#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Script de Deploy para Produ√ß√£o - Utmify SaaS

.DESCRIPTION
    Este script automatiza o processo de deploy para produ√ß√£o,
    incluindo todas as verifica√ß√µes de seguran√ßa necess√°rias.

.PARAMETER Environment
    Ambiente de destino (production, staging)

.PARAMETER SkipTests
    Pula a execu√ß√£o dos testes (n√£o recomendado)

.PARAMETER SkipSecurity
    Pula as verifica√ß√µes de seguran√ßa (n√£o recomendado)

.EXAMPLE
    .\deploy-production.ps1 -Environment production
    .\deploy-production.ps1 -Environment staging -SkipTests
#>

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("production", "staging")]
    [string]$Environment,
    
    [switch]$SkipTests,
    [switch]$SkipSecurity,
    [switch]$Force
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Cores para output
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Cyan"

# Fun√ß√£o para logging
function Write-Log {
    param(
        [string]$Message,
        [string]$Level = "INFO",
        [string]$Color = "White"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    
    Write-Host $logMessage -ForegroundColor $Color
    
    # Log para arquivo
    $logFile = "deploy-$(Get-Date -Format 'yyyyMMdd').log"
    Add-Content -Path $logFile -Value $logMessage
}

# Fun√ß√£o para verificar pr√©-requisitos
function Test-Prerequisites {
    Write-Log "üîç Verificando pr√©-requisitos..." "INFO" $Blue
    
    # Verificar Node.js
    try {
        $nodeVersion = node --version
        Write-Log "‚úÖ Node.js: $nodeVersion" "INFO" $Green
    } catch {
        Write-Log "‚ùå Node.js n√£o encontrado" "ERROR" $Red
        exit 1
    }
    
    # Verificar pnpm
    try {
        $pnpmVersion = pnpm --version
        Write-Log "‚úÖ pnpm: $pnpmVersion" "INFO" $Green
    } catch {
        Write-Log "‚ùå pnpm n√£o encontrado" "ERROR" $Red
        exit 1
    }
    
    # Verificar Git
    try {
        $gitVersion = git --version
        Write-Log "‚úÖ Git: $gitVersion" "INFO" $Green
    } catch {
        Write-Log "‚ùå Git n√£o encontrado" "ERROR" $Red
        exit 1
    }
    
    # Verificar se estamos na branch correta
    $currentBranch = git branch --show-current
    if ($Environment -eq "production" -and $currentBranch -ne "main") {
        if (-not $Force) {
            Write-Log "‚ùå Deploy para produ√ß√£o deve ser feito a partir da branch 'main'. Branch atual: $currentBranch" "ERROR" $Red
            Write-Log "Use -Force para ignorar esta verifica√ß√£o" "WARN" $Yellow
            exit 1
        } else {
            Write-Log "‚ö†Ô∏è ATEN√á√ÉO: Deploy for√ßado a partir da branch '$currentBranch'" "WARN" $Yellow
        }
    }
    
    Write-Log "‚úÖ Pr√©-requisitos verificados" "INFO" $Green
}

# Fun√ß√£o para verificar arquivos de ambiente
function Test-EnvironmentFiles {
    Write-Log "üîç Verificando arquivos de ambiente..." "INFO" $Blue
    
    $envFiles = @(
        "apps/api/.env.$Environment",
        "apps/web/.env.$Environment"
    )
    
    foreach ($envFile in $envFiles) {
        if (-not (Test-Path $envFile)) {
            Write-Log "‚ùå Arquivo de ambiente n√£o encontrado: $envFile" "ERROR" $Red
            exit 1
        }
        
        # Verificar se cont√©m vari√°veis cr√≠ticas
        $content = Get-Content $envFile -Raw
        $criticalVars = @("DATABASE_URL", "JWT_SECRET", "NODE_ENV")
        
        foreach ($var in $criticalVars) {
            if ($content -notmatch "$var=") {
                Write-Log "‚ùå Vari√°vel cr√≠tica '$var' n√£o encontrada em $envFile" "ERROR" $Red
                exit 1
            }
        }
        
        Write-Log "‚úÖ Arquivo de ambiente v√°lido: $envFile" "INFO" $Green
    }
}

# Fun√ß√£o para executar testes
function Invoke-Tests {
    if ($SkipTests) {
        Write-Log "‚ö†Ô∏è Testes pulados conforme solicitado" "WARN" $Yellow
        return
    }
    
    Write-Log "üß™ Executando testes..." "INFO" $Blue
    
    # Testes da API
    Write-Log "Executando testes da API..." "INFO" $Blue
    Set-Location "apps/api"
    try {
        pnpm test --coverage --passWithNoTests
        Write-Log "‚úÖ Testes da API passaram" "INFO" $Green
    } catch {
        Write-Log "‚ùå Testes da API falharam" "ERROR" $Red
        Set-Location "../.."
        exit 1
    }
    Set-Location "../.."
    
    # Testes do Frontend
    Write-Log "Executando testes do Frontend..." "INFO" $Blue
    Set-Location "apps/web"
    try {
        pnpm test --passWithNoTests
        Write-Log "‚úÖ Testes do Frontend passaram" "INFO" $Green
    } catch {
        Write-Log "‚ùå Testes do Frontend falharam" "ERROR" $Red
        Set-Location "../.."
        exit 1
    }
    Set-Location "../.."
}

# Fun√ß√£o para verifica√ß√µes de seguran√ßa
function Test-Security {
    if ($SkipSecurity) {
        Write-Log "‚ö†Ô∏è Verifica√ß√µes de seguran√ßa puladas conforme solicitado" "WARN" $Yellow
        return
    }
    
    Write-Log "üîí Executando verifica√ß√µes de seguran√ßa..." "INFO" $Blue
    
    # Verificar se h√° secrets no c√≥digo
    Write-Log "Verificando vazamento de secrets..." "INFO" $Blue
    $secretPatterns = @(
        "password\s*=\s*['\"][^'\"]+['\"]?",
        "secret\s*=\s*['\"][^'\"]+['\"]?",
        "key\s*=\s*['\"][^'\"]+['\"]?",
        "token\s*=\s*['\"][^'\"]+['\"]?"
    )
    
    $foundSecrets = $false
    foreach ($pattern in $secretPatterns) {
        $matches = git grep -i -E $pattern -- '*.ts' '*.js' '*.json' '*.env.example' 2>$null
        if ($matches) {
            Write-Log "‚ö†Ô∏è Poss√≠vel secret encontrado: $matches" "WARN" $Yellow
            $foundSecrets = $true
        }
    }
    
    if (-not $foundSecrets) {
        Write-Log "‚úÖ Nenhum secret encontrado no c√≥digo" "INFO" $Green
    }
    
    # Verificar depend√™ncias vulner√°veis
    Write-Log "Verificando vulnerabilidades nas depend√™ncias..." "INFO" $Blue
    try {
        Set-Location "apps/api"
        $auditResult = pnpm audit --audit-level moderate 2>&1
        if ($LASTEXITCODE -ne 0) {
            Write-Log "‚ö†Ô∏è Vulnerabilidades encontradas na API: $auditResult" "WARN" $Yellow
        } else {
            Write-Log "‚úÖ API sem vulnerabilidades cr√≠ticas" "INFO" $Green
        }
        Set-Location "../.."
        
        Set-Location "apps/web"
        $auditResult = pnpm audit --audit-level moderate 2>&1
        if ($LASTEXITCODE -ne 0) {
            Write-Log "‚ö†Ô∏è Vulnerabilidades encontradas no Frontend: $auditResult" "WARN" $Yellow
        } else {
            Write-Log "‚úÖ Frontend sem vulnerabilidades cr√≠ticas" "INFO" $Green
        }
        Set-Location "../.."
    } catch {
        Write-Log "‚ö†Ô∏è Erro ao verificar vulnerabilidades: $_" "WARN" $Yellow
    }
}

# Fun√ß√£o para build
function Invoke-Build {
    Write-Log "üèóÔ∏è Executando build..." "INFO" $Blue
    
    # Build da API
    Write-Log "Build da API..." "INFO" $Blue
    Set-Location "apps/api"
    try {
        # Copiar arquivo de ambiente
        Copy-Item ".env.$Environment" ".env" -Force
        
        pnpm build
        Write-Log "‚úÖ Build da API conclu√≠do" "INFO" $Green
    } catch {
        Write-Log "‚ùå Build da API falhou: $_" "ERROR" $Red
        Set-Location "../.."
        exit 1
    }
    Set-Location "../.."
    
    # Build do Frontend
    Write-Log "Build do Frontend..." "INFO" $Blue
    Set-Location "apps/web"
    try {
        # Copiar arquivo de ambiente
        Copy-Item ".env.$Environment" ".env" -Force
        
        pnpm build
        Write-Log "‚úÖ Build do Frontend conclu√≠do" "INFO" $Green
    } catch {
        Write-Log "‚ùå Build do Frontend falhou: $_" "ERROR" $Red
        Set-Location "../.."
        exit 1
    }
    Set-Location "../.."
}

# Fun√ß√£o para executar testes de performance
function Invoke-PerformanceTests {
    Write-Log "‚ö° Executando testes de performance..." "INFO" $Blue
    
    try {
        # Iniciar API em background para testes
        Set-Location "apps/api"
        $apiProcess = Start-Process -FilePath "pnpm" -ArgumentList "start" -PassThru -WindowStyle Hidden
        Start-Sleep -Seconds 10  # Aguardar API inicializar
        Set-Location "../.."
        
        # Executar testes de performance
        Set-Location "scripts"
        powershell -ExecutionPolicy Bypass -File "run-performance-tests.ps1" -Target "http://localhost:3001" -GenerateReport
        
        # Parar API
        Stop-Process -Id $apiProcess.Id -Force -ErrorAction SilentlyContinue
        
        Write-Log "‚úÖ Testes de performance conclu√≠dos" "INFO" $Green
        Set-Location ".."
    } catch {
        Write-Log "‚ö†Ô∏è Erro nos testes de performance: $_" "WARN" $Yellow
        Set-Location ".."
    }
}

# Fun√ß√£o para gerar relat√≥rio de deploy
function New-DeployReport {
    Write-Log "üìä Gerando relat√≥rio de deploy..." "INFO" $Blue
    
    $reportFile = "deploy-report-$(Get-Date -Format 'yyyyMMdd-HHmmss').md"
    
    $report = @"
# üöÄ RELAT√ìRIO DE DEPLOY - UTMIFY

**Data:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')  
**Ambiente:** $Environment  
**Branch:** $(git branch --show-current)  
**Commit:** $(git rev-parse --short HEAD)  
**Usu√°rio:** $env:USERNAME  

## ‚úÖ VERIFICA√á√ïES REALIZADAS

- [x] Pr√©-requisitos verificados
- [x] Arquivos de ambiente validados
- [$(if ($SkipTests) { ' ' } else { 'x' })] Testes executados
- [$(if ($SkipSecurity) { ' ' } else { 'x' })] Verifica√ß√µes de seguran√ßa
- [x] Build realizado
- [x] Testes de performance

## üìà M√âTRICAS

### Testes
- **API:** $(if ($SkipTests) { 'Pulados' } else { 'Passou' })
- **Frontend:** $(if ($SkipTests) { 'Pulados' } else { 'Passou' })

### Seguran√ßa
- **Secrets:** $(if ($SkipSecurity) { 'N√£o verificado' } else { 'Verificado' })
- **Vulnerabilidades:** $(if ($SkipSecurity) { 'N√£o verificado' } else { 'Verificado' })

### Performance
- **Relat√≥rio:** Dispon√≠vel em test-results/

## üîß PR√ìXIMOS PASSOS

1. **Backup do banco de dados**
2. **Deploy da aplica√ß√£o**
3. **Verifica√ß√£o de sa√∫de**
4. **Monitoramento ativo**

## üìû CONTATOS DE EMERG√äNCIA

- **DevOps:** [email]
- **Tech Lead:** [email]
- **On-call:** [telefone]

---

**Status:** ‚úÖ PRONTO PARA DEPLOY  
**Aprova√ß√£o:** Pendente  

"@
    
    Set-Content -Path $reportFile -Value $report
    Write-Log "‚úÖ Relat√≥rio gerado: $reportFile" "INFO" $Green
}

# Fun√ß√£o principal
function Main {
    Write-Log "üöÄ Iniciando processo de deploy para $Environment" "INFO" $Blue
    Write-Log "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" "INFO" $Blue
    
    try {
        # Verifica√ß√µes iniciais
        Test-Prerequisites
        Test-EnvironmentFiles
        
        # Instalar depend√™ncias
        Write-Log "üì¶ Instalando depend√™ncias..." "INFO" $Blue
        pnpm install --frozen-lockfile
        Write-Log "‚úÖ Depend√™ncias instaladas" "INFO" $Green
        
        # Executar testes
        Invoke-Tests
        
        # Verifica√ß√µes de seguran√ßa
        Test-Security
        
        # Build
        Invoke-Build
        
        # Testes de performance
        if ($Environment -eq "production") {
            Invoke-PerformanceTests
        }
        
        # Gerar relat√≥rio
        New-DeployReport
        
        Write-Log "üéâ Deploy preparado com sucesso!" "INFO" $Green
        Write-Log "üìã Verifique o relat√≥rio de deploy antes de prosseguir" "INFO" $Yellow
        
        if ($Environment -eq "production") {
            Write-Log "‚ö†Ô∏è ATEN√á√ÉO: Este √© um deploy para PRODU√á√ÉO" "WARN" $Yellow
            Write-Log "üîç Revise todos os logs e relat√≥rios antes de continuar" "WARN" $Yellow
        }
        
    } catch {
        Write-Log "‚ùå Erro durante o processo de deploy: $_" "ERROR" $Red
        Write-Log "Stack trace: $($_.ScriptStackTrace)" "ERROR" $Red
        exit 1
    }
}

# Executar script principal
Main