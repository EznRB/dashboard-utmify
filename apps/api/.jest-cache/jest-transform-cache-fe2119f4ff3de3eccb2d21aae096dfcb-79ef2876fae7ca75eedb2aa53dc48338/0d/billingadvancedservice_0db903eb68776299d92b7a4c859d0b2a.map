{"version":3,"names":["PrismaService","StripeService","logger","SubscriptionStatus","BillingAdvancedService","prisma","stripeService","defaultDunningConfig","constructor","cov_13ngqjmjoo","f","s","maxRetries","retryIntervals","emailTemplates","firstReminder","secondReminder","finalNotice","cancellationNotice","startTrial","organizationId","planType","trialDays","b","organization","findUnique","where","id","include","subscription","Error","length","previousTrial","findFirst","trialStart","not","deletedAt","plan","type","isActive","stripePriceId","stripeCustomerId","customer","createCustomer","email","name","metadata","update","data","stripe","stripeSubscription","subscriptions","create","items","price","trial_period_days","planId","stripeSubscriptionId","status","TRIALING","currentPeriodStart","Date","current_period_start","currentPeriodEnd","current_period_end","trial_start","trialEnd","trial_end","info","previewProration","subscriptionId","newPlanId","newPlan","upcomingInvoice","invoices","retrieveUpcoming","subscription_items","proration_date","Math","floor","now","prorationDate","lines","map","line","description","amount","proration","immediateTotal","total","nextInvoiceTotal","amount_due","applyProration","prorate","retrieve","updatedSubscription","proration_behavior","oldPlan","processDunning","invoiceId","invoice","failedAttempts","count","createdAt","gte","config","cancelSubscriptionForNonPayment","sendDunningEmail","reason","templateKey","attempt","template","cancel","invoice_now","CANCELED","canceledAt","freePlan","warn","JSON","stringify","processExpiringTrials","expiringTrials","findMany","lte","sendTrialExpirationEmail","error","getUsageMetrics","period","startOfMonth","getFullYear","getMonth","endOfMonth","startDate","endDate","usageRecords","usageRecord","timestamp","orderBy","metrics","reduce","acc","record","metricName","quantity","start","end","totalRecords"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\billing-advanced.service.ts"],"sourcesContent":["import { PrismaService } from '../database/prisma.service';\nimport { StripeService } from './stripe.service';\nimport { logger } from '../utils/logger';\nimport { SubscriptionStatus, PlanType } from '@prisma/client';\nimport Stripe from 'stripe';\n\nexport interface TrialConfig {\n  days: number;\n  planType: PlanType;\n}\n\nexport interface ProrationPreview {\n  immediateTotal: number;\n  nextInvoiceTotal: number;\n  prorationDate: Date;\n  items: {\n    description: string;\n    amount: number;\n    proration: boolean;\n  }[];\n}\n\nexport interface DunningConfig {\n  maxRetries: number;\n  retryIntervals: number[]; // days between retries\n  emailTemplates: {\n    firstReminder: string;\n    secondReminder: string;\n    finalNotice: string;\n    cancellationNotice: string;\n  };\n}\n\nexport class BillingAdvancedService {\n  private prisma: PrismaService;\n  private stripeService: StripeService;\n  private defaultDunningConfig: DunningConfig;\n\n  constructor() {\n    this.prisma = new PrismaService();\n    this.stripeService = new StripeService();\n    this.defaultDunningConfig = {\n      maxRetries: 3,\n      retryIntervals: [3, 7, 14], // 3 days, 7 days, 14 days\n      emailTemplates: {\n        firstReminder: 'payment_reminder_1',\n        secondReminder: 'payment_reminder_2',\n        finalNotice: 'payment_final_notice',\n        cancellationNotice: 'subscription_cancelled',\n      },\n    };\n  }\n\n  /**\n   * Start a trial for an organization\n   */\n  async startTrial(organizationId: string, planType: PlanType, trialDays: number = 7): Promise<void> {\n    const organization = await this.prisma.organization.findUnique({\n      where: { id: organizationId },\n      include: { subscription: true },\n    });\n\n    if (!organization) {\n      throw new Error('Organization not found');\n    }\n\n    if (organization.subscription && organization.subscription.length > 0) {\n      throw new Error('Organization already has an active subscription');\n    }\n\n    // Check if organization has already used a trial\n    const previousTrial = await this.prisma.subscription.findFirst({\n      where: {\n        organizationId,\n        trialStart: { not: null },\n        deletedAt: null,\n      },\n    });\n\n    if (previousTrial) {\n      throw new Error('Trial already used for this organization');\n    }\n\n    const plan = await this.prisma.plan.findFirst({\n      where: { type: planType, isActive: true },\n    });\n\n    if (!plan || !plan.stripePriceId) {\n      throw new Error('Plan not found or not configured for Stripe');\n    }\n\n    // Create Stripe customer if not exists\n    let stripeCustomerId = organization.stripeCustomerId;\n    if (!stripeCustomerId) {\n      const customer = await this.stripeService.createCustomer({\n        email: organization.name, // You might want to use a proper email field\n        name: organization.name,\n        metadata: { organizationId },\n      });\n      stripeCustomerId = customer.id;\n\n      await this.prisma.organization.update({\n        where: { id: organizationId },\n        data: { stripeCustomerId },\n      });\n    }\n\n    // Create Stripe subscription with trial\n    const stripe = (this.stripeService as any).stripe;\n    const stripeSubscription = await stripe.subscriptions.create({\n      customer: stripeCustomerId,\n      items: [{ price: plan.stripePriceId }],\n      trial_period_days: trialDays,\n      metadata: {\n        organizationId,\n        planType,\n      },\n    });\n\n    // Create subscription record\n    await this.prisma.subscription.create({\n      data: {\n        organizationId,\n        planId: plan.id,\n        stripeSubscriptionId: stripeSubscription.id,\n        status: SubscriptionStatus.TRIALING,\n        currentPeriodStart: new Date(stripeSubscription.current_period_start * 1000),\n        currentPeriodEnd: new Date(stripeSubscription.current_period_end * 1000),\n        trialStart: new Date(stripeSubscription.trial_start! * 1000),\n        trialEnd: new Date(stripeSubscription.trial_end! * 1000),\n      },\n    });\n\n    // Update organization plan type\n    await this.prisma.organization.update({\n      where: { id: organizationId },\n      data: { planType: plan.type },\n    });\n\n    logger.info(`Trial started for organization ${organizationId}`, {\n      planType,\n      trialDays,\n      trialEnd: new Date(stripeSubscription.trial_end! * 1000),\n    });\n  }\n\n  /**\n   * Preview proration for subscription upgrade/downgrade\n   */\n  async previewProration(\n    subscriptionId: string,\n    newPlanId: string\n  ): Promise<ProrationPreview> {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { id: subscriptionId },\n      include: { plan: true },\n    });\n\n    if (!subscription) {\n      throw new Error('Subscription not found');\n    }\n\n    const newPlan = await this.prisma.plan.findUnique({\n      where: { id: newPlanId },\n    });\n\n    if (!newPlan || !newPlan.stripePriceId) {\n      throw new Error('New plan not found or not configured');\n    }\n\n    const stripe = (this.stripeService as any).stripe;\n\n    // Get upcoming invoice with proration preview\n    const upcomingInvoice = await stripe.invoices.retrieveUpcoming({\n      subscription: subscription.stripeSubscriptionId,\n      subscription_items: [\n        {\n          id: subscription.stripeSubscriptionId,\n          price: newPlan.stripePriceId,\n        },\n      ],\n      proration_date: Math.floor(Date.now() / 1000),\n    });\n\n    const prorationDate = new Date();\n    const items = upcomingInvoice.lines.data.map((line: any) => ({\n      description: line.description || 'Subscription change',\n      amount: line.amount,\n      proration: line.proration,\n    }));\n\n    return {\n      immediateTotal: upcomingInvoice.total,\n      nextInvoiceTotal: upcomingInvoice.amount_due,\n      prorationDate,\n      items,\n    };\n  }\n\n  /**\n   * Apply proration when upgrading/downgrading subscription\n   */\n  async applyProration(\n    subscriptionId: string,\n    newPlanId: string,\n    prorate: boolean = true\n  ): Promise<void> {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { id: subscriptionId },\n      include: { organization: true },\n    });\n\n    if (!subscription) {\n      throw new Error('Subscription not found');\n    }\n\n    const newPlan = await this.prisma.plan.findUnique({\n      where: { id: newPlanId },\n    });\n\n    if (!newPlan || !newPlan.stripePriceId) {\n      throw new Error('New plan not found or not configured');\n    }\n\n    const stripe = (this.stripeService as any).stripe;\n\n    // Get current subscription from Stripe\n    const stripeSubscription = await stripe.subscriptions.retrieve(\n      subscription.stripeSubscriptionId\n    );\n\n    // Update subscription with proration\n    const updatedSubscription = await stripe.subscriptions.update(\n      subscription.stripeSubscriptionId,\n      {\n        items: [\n          {\n            id: stripeSubscription.items.data[0].id,\n            price: newPlan.stripePriceId,\n          },\n        ],\n        proration_behavior: prorate ? 'create_prorations' : 'none',\n      }\n    );\n\n    // Update local subscription record\n    await this.prisma.subscription.update({\n      where: { id: subscriptionId },\n      data: {\n        planId: newPlan.id,\n        currentPeriodStart: new Date(updatedSubscription.current_period_start * 1000),\n        currentPeriodEnd: new Date(updatedSubscription.current_period_end * 1000),\n      },\n    });\n\n    // Update organization plan type\n    await this.prisma.organization.update({\n      where: { id: subscription.organizationId },\n      data: { planType: newPlan.type },\n    });\n\n    logger.info(`Proration applied for subscription ${subscriptionId}`, {\n      oldPlan: subscription.plan?.type,\n      newPlan: newPlan.type,\n      prorate,\n    });\n  }\n\n  /**\n   * Process dunning management for failed payments\n   */\n  async processDunning(invoiceId: string): Promise<void> {\n    const invoice = await this.prisma.invoice.findUnique({\n      where: { id: invoiceId },\n      include: {\n        subscription: {\n          include: { organization: true },\n        },\n      },\n    });\n\n    if (!invoice || !invoice.subscription) {\n      throw new Error('Invoice or subscription not found');\n    }\n\n    // Count previous failed payment attempts\n    const failedAttempts = await this.prisma.invoice.count({\n      where: {\n        subscriptionId: invoice.subscriptionId,\n        status: 'FAILED',\n        createdAt: {\n          gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\n        },\n      },\n    });\n\n    const config = this.defaultDunningConfig;\n\n    if (failedAttempts >= config.maxRetries) {\n      // Cancel subscription after max retries\n      await this.cancelSubscriptionForNonPayment(invoice.subscription.id);\n      await this.sendDunningEmail(\n        invoice.subscription.organization.id,\n        config.emailTemplates.cancellationNotice,\n        { invoice, reason: 'max_retries_exceeded' }\n      );\n      return;\n    }\n\n    // Send appropriate dunning email\n    let templateKey: keyof typeof config.emailTemplates;\n    if (failedAttempts === 0) {\n      templateKey = 'firstReminder';\n    } else if (failedAttempts === 1) {\n      templateKey = 'secondReminder';\n    } else {\n      templateKey = 'finalNotice';\n    }\n\n    await this.sendDunningEmail(\n      invoice.subscription.organization.id,\n      config.emailTemplates[templateKey],\n      { invoice, attempt: failedAttempts + 1 }\n    );\n\n    logger.info(`Dunning email sent for invoice ${invoiceId}`, {\n      organizationId: invoice.subscription.organization.id,\n      attempt: failedAttempts + 1,\n      template: templateKey,\n    });\n  }\n\n  /**\n   * Cancel subscription due to non-payment\n   */\n  private async cancelSubscriptionForNonPayment(subscriptionId: string): Promise<void> {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { id: subscriptionId },\n      include: { organization: true },\n    });\n\n    if (!subscription) {\n      throw new Error('Subscription not found');\n    }\n\n    // Cancel in Stripe\n    const stripe = (this.stripeService as any).stripe;\n    await stripe.subscriptions.cancel(subscription.stripeSubscriptionId, {\n      invoice_now: false,\n      prorate: false,\n    });\n\n    // Update local subscription (soft delete)\n    await this.prisma.subscription.update({\n      where: { id: subscriptionId },\n      data: {\n        status: SubscriptionStatus.CANCELED,\n        canceledAt: new Date(),\n        deletedAt: new Date(),\n      },\n    });\n\n    // Downgrade to free plan\n    const freePlan = await this.prisma.plan.findFirst({\n      where: { type: 'FREE' },\n    });\n\n    if (freePlan) {\n      await this.prisma.organization.update({\n        where: { id: subscription.organizationId },\n        data: { planType: freePlan.type },\n      });\n    }\n\n    logger.warn(`Subscription cancelled for non-payment: ${subscriptionId}`, {\n      organizationId: subscription.organizationId,\n    });\n  }\n\n  /**\n   * Send dunning email (placeholder - integrate with your email service)\n   */\n  private async sendDunningEmail(\n    organizationId: string,\n    template: string,\n    data: any\n  ): Promise<void> {\n    // TODO: Integrate with your email service (SendGrid, AWS SES, etc.)\n    logger.info(`Dunning email queued`, {\n      organizationId,\n      template,\n      data: JSON.stringify(data),\n    });\n\n    // Example implementation:\n    // await emailService.send({\n    //   to: organization.email,\n    //   template,\n    //   data,\n    // });\n  }\n\n  /**\n   * Check and process expiring trials\n   */\n  async processExpiringTrials(): Promise<void> {\n    const expiringTrials = await this.prisma.subscription.findMany({\n      where: {\n        status: SubscriptionStatus.TRIALING,\n        trialEnd: {\n          lte: new Date(Date.now() + 24 * 60 * 60 * 1000), // Next 24 hours\n        },\n        deletedAt: null,\n      },\n      include: { organization: true, plan: true },\n    });\n\n    for (const subscription of expiringTrials) {\n      try {\n        // Send trial expiration reminder\n        await this.sendTrialExpirationEmail(\n          subscription.organization.id,\n          subscription.trialEnd!\n        );\n\n        logger.info(`Trial expiration reminder sent`, {\n          organizationId: subscription.organizationId,\n          trialEnd: subscription.trialEnd,\n        });\n      } catch (error) {\n        logger.error(`Error processing expiring trial for ${subscription.id}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Send trial expiration email\n   */\n  private async sendTrialExpirationEmail(\n    organizationId: string,\n    trialEnd: Date\n  ): Promise<void> {\n    // TODO: Integrate with your email service\n    logger.info(`Trial expiration email queued`, {\n      organizationId,\n      trialEnd,\n    });\n  }\n\n  /**\n   * Get usage-based billing metrics\n   */\n  async getUsageMetrics(organizationId: string, period: 'current' | 'previous' = 'current') {\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n\n    let startDate = startOfMonth;\n    let endDate = endOfMonth;\n\n    if (period === 'previous') {\n      startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n      endDate = new Date(now.getFullYear(), now.getMonth(), 0);\n    }\n\n    const usageRecords = await this.prisma.usageRecord.findMany({\n      where: {\n        organizationId,\n        timestamp: {\n          gte: startDate,\n          lte: endDate,\n        },\n      },\n      orderBy: { timestamp: 'desc' },\n    });\n\n    // Aggregate usage by metric\n    const metrics = usageRecords.reduce((acc, record) => {\n      if (!acc[record.metricName]) {\n        acc[record.metricName] = 0;\n      }\n      acc[record.metricName] += record.quantity;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      period: { start: startDate, end: endDate },\n      metrics,\n      totalRecords: usageRecords.length,\n    };\n  }\n}"],"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","ignoreList":[]}