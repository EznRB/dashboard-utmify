76e0b597c6bf1a141b3de3379a1ad9c6
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const supertest_1 = __importDefault(require("supertest"));
const prisma_service_1 = require("../../services/prisma.service");
const cache_service_1 = require("../../services/cache.service");
const metrics_service_1 = require("../../services/metrics.service");
const stored_procedures_service_1 = require("../../services/stored-procedures.service");
const metrics_controller_1 = require("../../controllers/metrics.controller");
const global_setup_1 = require("../global-setup");
const redis_1 = require("redis");
const perf_hooks_1 = require("perf_hooks");
describe('Metrics System Integration Tests', () => {
    let app;
    let prismaService;
    let cacheService;
    let metricsService;
    let storedProceduresService;
    let redisClient;
    const testOrganizationId = '123e4567-e89b-12d3-a456-426614174001';
    const testCampaignId = '123e4567-e89b-12d3-a456-426614174002';
    const testUserId = '123e4567-e89b-12d3-a456-426614174000';
    beforeAll(async () => {
        // Check if test environment is ready
        const dbHealthy = await (0, global_setup_1.checkDatabaseHealth)();
        const redisHealthy = await (0, global_setup_1.checkRedisHealth)();
        if (!dbHealthy) {
            throw new Error('Test database is not healthy');
        }
        if (!redisHealthy) {
            console.warn('Redis is not healthy, some tests may fail');
        }
        // Create testing module
        const moduleFixture = await testing_1.Test.createTestingModule({
            controllers: [metrics_controller_1.MetricsController],
            providers: [
                prisma_service_1.PrismaService,
                cache_service_1.CacheService,
                metrics_service_1.MetricsService,
                stored_procedures_service_1.StoredProceduresService,
            ],
        }).compile();
        app = moduleFixture.createNestApplication();
        await app.init();
        // Get services
        prismaService = moduleFixture.get(prisma_service_1.PrismaService);
        cacheService = moduleFixture.get(cache_service_1.CacheService);
        metricsService = moduleFixture.get(metrics_service_1.MetricsService);
        storedProceduresService = moduleFixture.get(stored_procedures_service_1.StoredProceduresService);
        // Setup Redis client for direct testing
        if (process.env.REDIS_URL) {
            redisClient = (0, redis_1.createClient)({ url: process.env.REDIS_URL });
            await redisClient.connect();
        }
        // Seed test data
        await (0, global_setup_1.seedTestData)();
    });
    afterAll(async () => {
        // Cleanup
        await (0, global_setup_1.cleanupTestData)();
        if (redisClient) {
            await redisClient.disconnect();
        }
        await app.close();
    });
    beforeEach(async () => {
        // Clear cache before each test
        if (cacheService) {
            await cacheService.invalidatePattern('metrics:*');
        }
    });
    describe('System Health Checks', () => {
        it('should have all services initialized', () => {
            expect(prismaService).toBeDefined();
            expect(cacheService).toBeDefined();
            expect(metricsService).toBeDefined();
            expect(storedProceduresService).toBeDefined();
        });
        it('should connect to database successfully', async () => {
            const result = await prismaService.$queryRaw `SELECT 1 as test`;
            expect(result).toBeDefined();
        });
        it('should connect to Redis successfully', async () => {
            if (redisClient) {
                const pong = await redisClient.ping();
                expect(pong).toBe('PONG');
            }
        });
        it('should have stored procedures installed', async () => {
            const health = await storedProceduresService.checkStoredProceduresHealth();
            expect(health.available).toBe(true);
            expect(health.procedures.length).toBeGreaterThan(0);
        });
    });
    describe('Metrics Calculation Flow', () => {
        it('should calculate KPI metrics end-to-end', async () => {
            const startTime = perf_hooks_1.performance.now();
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago
                    end: new Date(),
                },
            };
            const metrics = await metricsService.calculateMetrics(filters);
            const endTime = perf_hooks_1.performance.now();
            const executionTime = endTime - startTime;
            expect(metrics).toBeDefined();
            expect(metrics.kpis).toBeDefined();
            expect(metrics.kpis.roas).toBeGreaterThanOrEqual(0);
            expect(metrics.kpis.roi).toBeGreaterThanOrEqual(-100);
            expect(metrics.kpis.ctr).toBeGreaterThanOrEqual(0);
            expect(metrics.kpis.conversionRate).toBeGreaterThanOrEqual(0);
            expect(executionTime).toBeLessThan(5000); // Should complete within 5 seconds
        });
        it('should use cache for repeated requests', async () => {
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago
                    end: new Date(),
                },
            };
            // First request (should hit database)
            const startTime1 = perf_hooks_1.performance.now();
            const metrics1 = await metricsService.calculateMetrics(filters);
            const endTime1 = perf_hooks_1.performance.now();
            const time1 = endTime1 - startTime1;
            // Second request (should hit cache)
            const startTime2 = perf_hooks_1.performance.now();
            const metrics2 = await metricsService.calculateMetrics(filters);
            const endTime2 = perf_hooks_1.performance.now();
            const time2 = endTime2 - startTime2;
            expect(metrics1).toEqual(metrics2);
            expect(time2).toBeLessThan(time1); // Cache should be faster
            expect(time2).toBeLessThan(100); // Cache response should be very fast
        });
        it('should fallback to TypeScript calculation when stored procedures fail', async () => {
            // Mock stored procedures to fail
            jest.spyOn(storedProceduresService, 'calculateKPIMetrics')
                .mockRejectedValueOnce(new Error('Stored procedure failed'));
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 24 * 60 * 60 * 1000),
                    end: new Date(),
                },
            };
            const metrics = await metricsService.calculateMetrics(filters);
            expect(metrics).toBeDefined();
            expect(metrics.kpis).toBeDefined();
            // Should still return valid metrics despite stored procedure failure
        });
    });
    describe('Real-time Metrics Updates', () => {
        it('should update real-time metrics when conversion events occur', async () => {
            const eventData = {
                campaignId: testCampaignId,
                organizationId: testOrganizationId,
                eventType: 'conversion',
                value: 100,
                timestamp: new Date(),
            };
            // Get initial metrics
            const initialMetrics = await metricsService.getRealTimeMetrics(testOrganizationId, [testCampaignId]);
            // Update real-time metrics
            await metricsService.updateRealTimeMetrics(eventData);
            // Get updated metrics
            const updatedMetrics = await metricsService.getRealTimeMetrics(testOrganizationId, [testCampaignId]);
            expect(updatedMetrics).toBeDefined();
            // Should reflect the new conversion event
        });
        it('should invalidate cache when real-time updates occur', async () => {
            const eventData = {
                campaignId: testCampaignId,
                organizationId: testOrganizationId,
                eventType: 'conversion',
                value: 50,
                timestamp: new Date(),
            };
            // Cache some metrics first
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 24 * 60 * 60 * 1000),
                    end: new Date(),
                },
            };
            await metricsService.calculateMetrics(filters);
            // Update real-time metrics (should invalidate cache)
            await metricsService.updateRealTimeMetrics(eventData);
            // Check if cache was invalidated
            const cacheKey = `metrics:kpi:${testOrganizationId}:${JSON.stringify(filters)}`;
            const cachedValue = await cacheService.get(cacheKey);
            expect(cachedValue).toBeNull();
        });
    });
    describe('Dashboard Metrics', () => {
        it('should return dashboard metrics with proper structure', async () => {
            const dashboardMetrics = await metricsService.getDashboardMetrics(testOrganizationId, [testCampaignId], {
                start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
                end: new Date(),
            });
            expect(dashboardMetrics).toBeDefined();
            expect(dashboardMetrics.overview).toBeDefined();
            expect(dashboardMetrics.trends).toBeDefined();
            expect(dashboardMetrics.topCampaigns).toBeDefined();
            expect(dashboardMetrics.funnelMetrics).toBeDefined();
            // Validate overview structure
            expect(dashboardMetrics.overview.totalRevenue).toBeGreaterThanOrEqual(0);
            expect(dashboardMetrics.overview.totalAdSpend).toBeGreaterThanOrEqual(0);
            expect(dashboardMetrics.overview.totalConversions).toBeGreaterThanOrEqual(0);
            // Validate trends structure
            expect(Array.isArray(dashboardMetrics.trends)).toBe(true);
            // Validate top campaigns structure
            expect(Array.isArray(dashboardMetrics.topCampaigns)).toBe(true);
        });
    });
    describe('Metrics Comparison', () => {
        it('should compare metrics between different time periods', async () => {
            const currentPeriod = {
                start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
                end: new Date(),
            };
            const previousPeriod = {
                start: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),
                end: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
            };
            const comparison = await metricsService.compareMetrics(testOrganizationId, [testCampaignId], currentPeriod, previousPeriod);
            expect(comparison).toBeDefined();
            expect(comparison.current).toBeDefined();
            expect(comparison.previous).toBeDefined();
            expect(comparison.changes).toBeDefined();
            // Validate changes structure
            expect(comparison.changes.revenue).toBeDefined();
            expect(comparison.changes.conversions).toBeDefined();
            expect(comparison.changes.roas).toBeDefined();
            // Changes should have percentage and absolute values
            expect(typeof comparison.changes.revenue.percentage).toBe('number');
            expect(typeof comparison.changes.revenue.absolute).toBe('number');
        });
    });
    describe('Data Export', () => {
        it('should export metrics data in CSV format', async () => {
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
                    end: new Date(),
                },
            };
            const exportData = await metricsService.exportMetrics(filters, 'csv');
            expect(exportData).toBeDefined();
            expect(exportData.data).toBeDefined();
            expect(exportData.filename).toContain('.csv');
            expect(exportData.mimeType).toBe('text/csv');
            // CSV should contain headers
            expect(exportData.data).toContain('Date');
            expect(exportData.data).toContain('Campaign');
            expect(exportData.data).toContain('Revenue');
        });
        it('should export metrics data in JSON format', async () => {
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
                    end: new Date(),
                },
            };
            const exportData = await metricsService.exportMetrics(filters, 'json');
            expect(exportData).toBeDefined();
            expect(exportData.data).toBeDefined();
            expect(exportData.filename).toContain('.json');
            expect(exportData.mimeType).toBe('application/json');
            // Should be valid JSON
            expect(() => JSON.parse(exportData.data)).not.toThrow();
        });
    });
    describe('API Endpoints Integration', () => {
        it('should handle POST /api/metrics/calculate', async () => {
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/metrics/calculate')
                .send({
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
                    end: new Date().toISOString(),
                },
            })
                .expect(200);
            expect(response.body).toBeDefined();
            expect(response.body.kpis).toBeDefined();
            expect(response.body.success).toBe(true);
        });
        it('should handle GET /api/metrics/dashboard', async () => {
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .get('/api/metrics/dashboard')
                .query({
                organizationId: testOrganizationId,
                campaignIds: testCampaignId,
                startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
                endDate: new Date().toISOString(),
            })
                .expect(200);
            expect(response.body).toBeDefined();
            expect(response.body.overview).toBeDefined();
            expect(response.body.trends).toBeDefined();
        });
        it('should handle POST /api/metrics/compare', async () => {
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/metrics/compare')
                .send({
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                currentPeriod: {
                    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
                    end: new Date().toISOString(),
                },
                previousPeriod: {
                    start: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),
                    end: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
                },
            })
                .expect(200);
            expect(response.body).toBeDefined();
            expect(response.body.current).toBeDefined();
            expect(response.body.previous).toBeDefined();
            expect(response.body.changes).toBeDefined();
        });
        it('should handle POST /api/metrics/export', async () => {
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/metrics/export')
                .send({
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
                    end: new Date().toISOString(),
                },
                format: 'csv',
            })
                .expect(200);
            expect(response.body).toBeDefined();
            expect(response.body.data).toBeDefined();
            expect(response.body.filename).toBeDefined();
        });
    });
    describe('Performance Tests', () => {
        it('should handle concurrent metric calculations', async () => {
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
                    end: new Date(),
                },
            };
            const startTime = perf_hooks_1.performance.now();
            // Run 5 concurrent requests
            const promises = Array(5).fill(null).map(() => metricsService.calculateMetrics(filters));
            const results = await Promise.all(promises);
            const endTime = perf_hooks_1.performance.now();
            const totalTime = endTime - startTime;
            expect(results).toHaveLength(5);
            expect(results.every(result => result.kpis)).toBe(true);
            expect(totalTime).toBeLessThan(10000); // Should complete within 10 seconds
        });
        it('should maintain cache efficiency under load', async () => {
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 24 * 60 * 60 * 1000),
                    end: new Date(),
                },
            };
            // First request to populate cache
            await metricsService.calculateMetrics(filters);
            // Multiple concurrent cached requests
            const startTime = perf_hooks_1.performance.now();
            const promises = Array(10).fill(null).map(() => metricsService.calculateMetrics(filters));
            const results = await Promise.all(promises);
            const endTime = perf_hooks_1.performance.now();
            const totalTime = endTime - startTime;
            expect(results).toHaveLength(10);
            expect(totalTime).toBeLessThan(1000); // Cached requests should be very fast
        });
    });
    describe('Error Handling', () => {
        it('should handle database connection errors gracefully', async () => {
            // Mock database error
            jest.spyOn(prismaService, '$queryRaw')
                .mockRejectedValueOnce(new Error('Database connection failed'));
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 24 * 60 * 60 * 1000),
                    end: new Date(),
                },
            };
            await expect(metricsService.calculateMetrics(filters))
                .rejects.toThrow('Database connection failed');
        });
        it('should handle Redis connection errors gracefully', async () => {
            // Mock Redis error
            jest.spyOn(cacheService, 'get')
                .mockRejectedValueOnce(new Error('Redis connection failed'));
            const filters = {
                organizationId: testOrganizationId,
                campaignIds: [testCampaignId],
                dateRange: {
                    start: new Date(Date.now() - 24 * 60 * 60 * 1000),
                    end: new Date(),
                },
            };
            // Should still work without cache
            const metrics = await metricsService.calculateMetrics(filters);
            expect(metrics).toBeDefined();
        });
        it('should validate input parameters', async () => {
            const invalidFilters = {
                organizationId: 'invalid-uuid',
                campaignIds: [],
                dateRange: {
                    start: new Date('invalid-date'),
                    end: new Date(),
                },
            };
            await expect(metricsService.calculateMetrics(invalidFilters))
                .rejects.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,