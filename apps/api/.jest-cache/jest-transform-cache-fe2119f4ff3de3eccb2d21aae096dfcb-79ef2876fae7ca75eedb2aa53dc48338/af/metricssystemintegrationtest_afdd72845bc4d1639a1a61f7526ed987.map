{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\integration\\metrics-system.integration.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\integration\\metrics-system.integration.test.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport request from 'supertest';\nimport { PrismaService } from '../../services/prisma.service';\nimport { CacheService } from '../../services/cache.service';\nimport { MetricsService } from '../../services/metrics.service';\nimport { StoredProceduresService } from '../../services/stored-procedures.service';\nimport { MetricsController } from '../../controllers/metrics.controller';\nimport { seedTestData, cleanupTestData, checkDatabaseHealth, checkRedisHealth } from '../global-setup';\nimport { createClient } from 'redis';\nimport { performance } from 'perf_hooks';\n\ndescribe('Metrics System Integration Tests', () => {\n  let app: INestApplication;\n  let prismaService: PrismaService;\n  let cacheService: CacheService;\n  let metricsService: MetricsService;\n  let storedProceduresService: StoredProceduresService;\n  let redisClient: any;\n  \n  const testOrganizationId = '123e4567-e89b-12d3-a456-426614174001';\n  const testCampaignId = '123e4567-e89b-12d3-a456-426614174002';\n  const testUserId = '123e4567-e89b-12d3-a456-426614174000';\n  \n  beforeAll(async () => {\n    // Check if test environment is ready\n    const dbHealthy = await checkDatabaseHealth();\n    const redisHealthy = await checkRedisHealth();\n    \n    if (!dbHealthy) {\n      throw new Error('Test database is not healthy');\n    }\n    \n    if (!redisHealthy) {\n      console.warn('Redis is not healthy, some tests may fail');\n    }\n    \n    // Create testing module\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      controllers: [MetricsController],\n      providers: [\n        PrismaService,\n        CacheService,\n        MetricsService,\n        StoredProceduresService,\n      ],\n    }).compile();\n    \n    app = moduleFixture.createNestApplication();\n    await app.init();\n    \n    // Get services\n    prismaService = moduleFixture.get<PrismaService>(PrismaService);\n    cacheService = moduleFixture.get<CacheService>(CacheService);\n    metricsService = moduleFixture.get<MetricsService>(MetricsService);\n    storedProceduresService = moduleFixture.get<StoredProceduresService>(StoredProceduresService);\n    \n    // Setup Redis client for direct testing\n    if (process.env.REDIS_URL) {\n      redisClient = createClient({ url: process.env.REDIS_URL });\n      await redisClient.connect();\n    }\n    \n    // Seed test data\n    await seedTestData();\n  });\n  \n  afterAll(async () => {\n    // Cleanup\n    await cleanupTestData();\n    \n    if (redisClient) {\n      await redisClient.disconnect();\n    }\n    \n    await app.close();\n  });\n  \n  beforeEach(async () => {\n    // Clear cache before each test\n    if (cacheService) {\n      await cacheService.invalidatePattern('metrics:*');\n    }\n  });\n  \n  describe('System Health Checks', () => {\n    it('should have all services initialized', () => {\n      expect(prismaService).toBeDefined();\n      expect(cacheService).toBeDefined();\n      expect(metricsService).toBeDefined();\n      expect(storedProceduresService).toBeDefined();\n    });\n    \n    it('should connect to database successfully', async () => {\n      const result = await prismaService.$queryRaw`SELECT 1 as test`;\n      expect(result).toBeDefined();\n    });\n    \n    it('should connect to Redis successfully', async () => {\n      if (redisClient) {\n        const pong = await redisClient.ping();\n        expect(pong).toBe('PONG');\n      }\n    });\n    \n    it('should have stored procedures installed', async () => {\n      const health = await storedProceduresService.checkStoredProceduresHealth();\n      expect(health.available).toBe(true);\n      expect(health.procedures.length).toBeGreaterThan(0);\n    });\n  });\n  \n  describe('Metrics Calculation Flow', () => {\n    it('should calculate KPI metrics end-to-end', async () => {\n      const startTime = performance.now();\n      \n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago\n          end: new Date(),\n        },\n      };\n      \n      const metrics = await metricsService.calculateMetrics(filters);\n      \n      const endTime = performance.now();\n      const executionTime = endTime - startTime;\n      \n      expect(metrics).toBeDefined();\n      expect(metrics.kpis).toBeDefined();\n      expect(metrics.kpis.roas).toBeGreaterThanOrEqual(0);\n      expect(metrics.kpis.roi).toBeGreaterThanOrEqual(-100);\n      expect(metrics.kpis.ctr).toBeGreaterThanOrEqual(0);\n      expect(metrics.kpis.conversionRate).toBeGreaterThanOrEqual(0);\n      expect(executionTime).toBeLessThan(5000); // Should complete within 5 seconds\n    });\n    \n    it('should use cache for repeated requests', async () => {\n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n          end: new Date(),\n        },\n      };\n      \n      // First request (should hit database)\n      const startTime1 = performance.now();\n      const metrics1 = await metricsService.calculateMetrics(filters);\n      const endTime1 = performance.now();\n      const time1 = endTime1 - startTime1;\n      \n      // Second request (should hit cache)\n      const startTime2 = performance.now();\n      const metrics2 = await metricsService.calculateMetrics(filters);\n      const endTime2 = performance.now();\n      const time2 = endTime2 - startTime2;\n      \n      expect(metrics1).toEqual(metrics2);\n      expect(time2).toBeLessThan(time1); // Cache should be faster\n      expect(time2).toBeLessThan(100); // Cache response should be very fast\n    });\n    \n    it('should fallback to TypeScript calculation when stored procedures fail', async () => {\n      // Mock stored procedures to fail\n      jest.spyOn(storedProceduresService, 'calculateKPIMetrics')\n        .mockRejectedValueOnce(new Error('Stored procedure failed'));\n      \n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 24 * 60 * 60 * 1000),\n          end: new Date(),\n        },\n      };\n      \n      const metrics = await metricsService.calculateMetrics(filters);\n      \n      expect(metrics).toBeDefined();\n      expect(metrics.kpis).toBeDefined();\n      // Should still return valid metrics despite stored procedure failure\n    });\n  });\n  \n  describe('Real-time Metrics Updates', () => {\n    it('should update real-time metrics when conversion events occur', async () => {\n      const eventData = {\n        campaignId: testCampaignId,\n        organizationId: testOrganizationId,\n        eventType: 'conversion',\n        value: 100,\n        timestamp: new Date(),\n      };\n      \n      // Get initial metrics\n      const initialMetrics = await metricsService.getRealTimeMetrics(testOrganizationId, [testCampaignId]);\n      \n      // Update real-time metrics\n      await metricsService.updateRealTimeMetrics(eventData);\n      \n      // Get updated metrics\n      const updatedMetrics = await metricsService.getRealTimeMetrics(testOrganizationId, [testCampaignId]);\n      \n      expect(updatedMetrics).toBeDefined();\n      // Should reflect the new conversion event\n    });\n    \n    it('should invalidate cache when real-time updates occur', async () => {\n      const eventData = {\n        campaignId: testCampaignId,\n        organizationId: testOrganizationId,\n        eventType: 'conversion',\n        value: 50,\n        timestamp: new Date(),\n      };\n      \n      // Cache some metrics first\n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 24 * 60 * 60 * 1000),\n          end: new Date(),\n        },\n      };\n      \n      await metricsService.calculateMetrics(filters);\n      \n      // Update real-time metrics (should invalidate cache)\n      await metricsService.updateRealTimeMetrics(eventData);\n      \n      // Check if cache was invalidated\n      const cacheKey = `metrics:kpi:${testOrganizationId}:${JSON.stringify(filters)}`;\n      const cachedValue = await cacheService.get(cacheKey);\n      \n      expect(cachedValue).toBeNull();\n    });\n  });\n  \n  describe('Dashboard Metrics', () => {\n    it('should return dashboard metrics with proper structure', async () => {\n      const dashboardMetrics = await metricsService.getDashboardMetrics(\n        testOrganizationId,\n        [testCampaignId],\n        {\n          start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n          end: new Date(),\n        }\n      );\n      \n      expect(dashboardMetrics).toBeDefined();\n      expect(dashboardMetrics.overview).toBeDefined();\n      expect(dashboardMetrics.trends).toBeDefined();\n      expect(dashboardMetrics.topCampaigns).toBeDefined();\n      expect(dashboardMetrics.funnelMetrics).toBeDefined();\n      \n      // Validate overview structure\n      expect(dashboardMetrics.overview.totalRevenue).toBeGreaterThanOrEqual(0);\n      expect(dashboardMetrics.overview.totalAdSpend).toBeGreaterThanOrEqual(0);\n      expect(dashboardMetrics.overview.totalConversions).toBeGreaterThanOrEqual(0);\n      \n      // Validate trends structure\n      expect(Array.isArray(dashboardMetrics.trends)).toBe(true);\n      \n      // Validate top campaigns structure\n      expect(Array.isArray(dashboardMetrics.topCampaigns)).toBe(true);\n    });\n  });\n  \n  describe('Metrics Comparison', () => {\n    it('should compare metrics between different time periods', async () => {\n      const currentPeriod = {\n        start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n        end: new Date(),\n      };\n      \n      const previousPeriod = {\n        start: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\n        end: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n      };\n      \n      const comparison = await metricsService.compareMetrics(\n        testOrganizationId,\n        [testCampaignId],\n        currentPeriod,\n        previousPeriod\n      );\n      \n      expect(comparison).toBeDefined();\n      expect(comparison.current).toBeDefined();\n      expect(comparison.previous).toBeDefined();\n      expect(comparison.changes).toBeDefined();\n      \n      // Validate changes structure\n      expect(comparison.changes.revenue).toBeDefined();\n      expect(comparison.changes.conversions).toBeDefined();\n      expect(comparison.changes.roas).toBeDefined();\n      \n      // Changes should have percentage and absolute values\n      expect(typeof comparison.changes.revenue.percentage).toBe('number');\n      expect(typeof comparison.changes.revenue.absolute).toBe('number');\n    });\n  });\n  \n  describe('Data Export', () => {\n    it('should export metrics data in CSV format', async () => {\n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n          end: new Date(),\n        },\n      };\n      \n      const exportData = await metricsService.exportMetrics(filters, 'csv');\n      \n      expect(exportData).toBeDefined();\n      expect(exportData.data).toBeDefined();\n      expect(exportData.filename).toContain('.csv');\n      expect(exportData.mimeType).toBe('text/csv');\n      \n      // CSV should contain headers\n      expect(exportData.data).toContain('Date');\n      expect(exportData.data).toContain('Campaign');\n      expect(exportData.data).toContain('Revenue');\n    });\n    \n    it('should export metrics data in JSON format', async () => {\n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n          end: new Date(),\n        },\n      };\n      \n      const exportData = await metricsService.exportMetrics(filters, 'json');\n      \n      expect(exportData).toBeDefined();\n      expect(exportData.data).toBeDefined();\n      expect(exportData.filename).toContain('.json');\n      expect(exportData.mimeType).toBe('application/json');\n      \n      // Should be valid JSON\n      expect(() => JSON.parse(exportData.data)).not.toThrow();\n    });\n  });\n  \n  describe('API Endpoints Integration', () => {\n    it('should handle POST /api/metrics/calculate', async () => {\n      const response = await request(app.getHttpServer())\n        .post('/api/metrics/calculate')\n        .send({\n          organizationId: testOrganizationId,\n          campaignIds: [testCampaignId],\n          dateRange: {\n            start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n            end: new Date().toISOString(),\n          },\n        })\n        .expect(200);\n      \n      expect(response.body).toBeDefined();\n      expect(response.body.kpis).toBeDefined();\n      expect(response.body.success).toBe(true);\n    });\n    \n    it('should handle GET /api/metrics/dashboard', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/api/metrics/dashboard')\n        .query({\n          organizationId: testOrganizationId,\n          campaignIds: testCampaignId,\n          startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n          endDate: new Date().toISOString(),\n        })\n        .expect(200);\n      \n      expect(response.body).toBeDefined();\n      expect(response.body.overview).toBeDefined();\n      expect(response.body.trends).toBeDefined();\n    });\n    \n    it('should handle POST /api/metrics/compare', async () => {\n      const response = await request(app.getHttpServer())\n        .post('/api/metrics/compare')\n        .send({\n          organizationId: testOrganizationId,\n          campaignIds: [testCampaignId],\n          currentPeriod: {\n            start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n            end: new Date().toISOString(),\n          },\n          previousPeriod: {\n            start: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),\n            end: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n          },\n        })\n        .expect(200);\n      \n      expect(response.body).toBeDefined();\n      expect(response.body.current).toBeDefined();\n      expect(response.body.previous).toBeDefined();\n      expect(response.body.changes).toBeDefined();\n    });\n    \n    it('should handle POST /api/metrics/export', async () => {\n      const response = await request(app.getHttpServer())\n        .post('/api/metrics/export')\n        .send({\n          organizationId: testOrganizationId,\n          campaignIds: [testCampaignId],\n          dateRange: {\n            start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n            end: new Date().toISOString(),\n          },\n          format: 'csv',\n        })\n        .expect(200);\n      \n      expect(response.body).toBeDefined();\n      expect(response.body.data).toBeDefined();\n      expect(response.body.filename).toBeDefined();\n    });\n  });\n  \n  describe('Performance Tests', () => {\n    it('should handle concurrent metric calculations', async () => {\n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n          end: new Date(),\n        },\n      };\n      \n      const startTime = performance.now();\n      \n      // Run 5 concurrent requests\n      const promises = Array(5).fill(null).map(() => \n        metricsService.calculateMetrics(filters)\n      );\n      \n      const results = await Promise.all(promises);\n      \n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n      \n      expect(results).toHaveLength(5);\n      expect(results.every(result => result.kpis)).toBe(true);\n      expect(totalTime).toBeLessThan(10000); // Should complete within 10 seconds\n    });\n    \n    it('should maintain cache efficiency under load', async () => {\n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 24 * 60 * 60 * 1000),\n          end: new Date(),\n        },\n      };\n      \n      // First request to populate cache\n      await metricsService.calculateMetrics(filters);\n      \n      // Multiple concurrent cached requests\n      const startTime = performance.now();\n      \n      const promises = Array(10).fill(null).map(() => \n        metricsService.calculateMetrics(filters)\n      );\n      \n      const results = await Promise.all(promises);\n      \n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n      \n      expect(results).toHaveLength(10);\n      expect(totalTime).toBeLessThan(1000); // Cached requests should be very fast\n    });\n  });\n  \n  describe('Error Handling', () => {\n    it('should handle database connection errors gracefully', async () => {\n      // Mock database error\n      jest.spyOn(prismaService, '$queryRaw')\n        .mockRejectedValueOnce(new Error('Database connection failed'));\n      \n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 24 * 60 * 60 * 1000),\n          end: new Date(),\n        },\n      };\n      \n      await expect(metricsService.calculateMetrics(filters))\n        .rejects.toThrow('Database connection failed');\n    });\n    \n    it('should handle Redis connection errors gracefully', async () => {\n      // Mock Redis error\n      jest.spyOn(cacheService, 'get')\n        .mockRejectedValueOnce(new Error('Redis connection failed'));\n      \n      const filters = {\n        organizationId: testOrganizationId,\n        campaignIds: [testCampaignId],\n        dateRange: {\n          start: new Date(Date.now() - 24 * 60 * 60 * 1000),\n          end: new Date(),\n        },\n      };\n      \n      // Should still work without cache\n      const metrics = await metricsService.calculateMetrics(filters);\n      expect(metrics).toBeDefined();\n    });\n    \n    it('should validate input parameters', async () => {\n      const invalidFilters = {\n        organizationId: 'invalid-uuid',\n        campaignIds: [],\n        dateRange: {\n          start: new Date('invalid-date'),\n          end: new Date(),\n        },\n      };\n      \n      await expect(metricsService.calculateMetrics(invalidFilters))\n        .rejects.toThrow();\n    });\n  });\n});"],"version":3}