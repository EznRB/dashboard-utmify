{"version":3,"names":["cov_mghjao0l5","actualCoverage","MetricsAggregationJob","logger","JobManager","metricsAggregationJob","prisma","isRunning","s","constructor","f","start","b","warn","info","nextMetricsRun","getNextRun","toISOString","error","stop","getMetricsAggregationJob","isJobManagerRunning","getJobsHealth","metricsNextRun","metricsLastRun","getLastRun","status","jobs","metricsAggregation","isJobRunning","nextRun","lastRun","triggerMetricsAggregation","triggerManualRun","jobManager","getJobManager","Error","process","on"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\index.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { MetricsAggregationJob } from './metrics-aggregation.job';\nimport { logger } from '../utils/logger';\n\nexport class JobManager {\n  private metricsAggregationJob: MetricsAggregationJob;\n  private prisma: PrismaClient;\n  private isRunning: boolean = false;\n\n  constructor(prisma: PrismaClient) {\n    this.prisma = prisma;\n    this.metricsAggregationJob = new MetricsAggregationJob(prisma);\n  }\n\n  public async start(): Promise<void> {\n    if (this.isRunning) {\n      logger.warn('Jobs are already running');\n      return;\n    }\n\n    try {\n      logger.info('Starting scheduled jobs...');\n      \n      // Start metrics aggregation job\n      this.metricsAggregationJob.start();\n      \n      this.isRunning = true;\n      logger.info('All scheduled jobs started successfully');\n      \n      // Log next run times\n      const nextMetricsRun = this.metricsAggregationJob.getNextRun();\n      if (nextMetricsRun) {\n        logger.info(`Next metrics aggregation: ${nextMetricsRun.toISOString()}`);\n      }\n      \n    } catch (error) {\n      logger.error('Failed to start jobs:', error);\n      throw error;\n    }\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.isRunning) {\n      logger.warn('Jobs are not running');\n      return;\n    }\n\n    try {\n      logger.info('Stopping scheduled jobs...');\n      \n      this.metricsAggregationJob.stop();\n      \n      this.isRunning = false;\n      logger.info('All scheduled jobs stopped successfully');\n    } catch (error) {\n      logger.error('Error stopping jobs:', error);\n      throw error;\n    }\n  }\n\n  public getMetricsAggregationJob(): MetricsAggregationJob {\n    return this.metricsAggregationJob;\n  }\n\n  public isJobManagerRunning(): boolean {\n    return this.isRunning;\n  }\n\n  // Health check for jobs\n  public getJobsHealth(): {\n    status: 'healthy' | 'unhealthy';\n    jobs: {\n      metricsAggregation: {\n        status: 'running' | 'stopped';\n        nextRun: string | null;\n        lastRun: string | null;\n      };\n    };\n  } {\n    const metricsNextRun = this.metricsAggregationJob.getNextRun();\n    const metricsLastRun = this.metricsAggregationJob.getLastRun();\n\n    return {\n      status: this.isRunning ? 'healthy' : 'unhealthy',\n      jobs: {\n        metricsAggregation: {\n          status: this.metricsAggregationJob.isJobRunning() ? 'running' : 'stopped',\n          nextRun: metricsNextRun ? metricsNextRun.toISOString() : null,\n          lastRun: metricsLastRun ? metricsLastRun.toISOString() : null,\n        },\n      },\n    };\n  }\n\n  // Manual triggers for testing\n  public async triggerMetricsAggregation(): Promise<void> {\n    logger.info('Manual trigger: metrics aggregation');\n    await this.metricsAggregationJob.triggerManualRun();\n  }\n}\n\n// Singleton instance\nlet jobManager: JobManager | null = null;\n\nexport function getJobManager(prisma?: PrismaClient): JobManager {\n  if (!jobManager && prisma) {\n    jobManager = new JobManager(prisma);\n  }\n  \n  if (!jobManager) {\n    throw new Error('JobManager not initialized. Call with PrismaClient first.');\n  }\n  \n  return jobManager;\n}\n\n// Graceful shutdown handler\nprocess.on('SIGTERM', async () => {\n  logger.info('SIGTERM received, shutting down jobs gracefully');\n  if (jobManager) {\n    await jobManager.stop();\n  }\n});\n\nprocess.on('SIGINT', async () => {\n  logger.info('SIGINT received, shutting down jobs gracefully');\n  if (jobManager) {\n    await jobManager.stop();\n  }\n});\n\nexport * from './metrics-aggregation.job';"],"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","ignoreList":[]}