4f9acfc9fda3ceecd9a5fe4c0121ee6a
/* istanbul ignore next */
function cov_mghjao0l5() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\index.ts";
  var hash = "8a08277696743dcc7d70a127d973286313adefa7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\index.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 21
        }
      },
      "1": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 29
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 71
        }
      },
      "3": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 15,
          column: 9
        }
      },
      "4": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 52
        }
      },
      "5": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "7": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 54
        }
      },
      "8": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 47
        }
      },
      "9": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 34
        }
      },
      "10": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 67
        }
      },
      "11": {
        start: {
          line: 23,
          column: 35
        },
        end: {
          line: 23,
          column: 74
        }
      },
      "12": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "13": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 89
        }
      },
      "14": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 57
        }
      },
      "15": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "16": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "17": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 48
        }
      },
      "18": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 19
        }
      },
      "19": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "20": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 54
        }
      },
      "21": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "22": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 35
        }
      },
      "23": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 67
        }
      },
      "24": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 56
        }
      },
      "25": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 24
        }
      },
      "26": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 42
        }
      },
      "27": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 30
        }
      },
      "28": {
        start: {
          line: 57,
          column: 31
        },
        end: {
          line: 57,
          column: 70
        }
      },
      "29": {
        start: {
          line: 58,
          column: 31
        },
        end: {
          line: 58,
          column: 70
        }
      },
      "30": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 68,
          column: 10
        }
      },
      "31": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 59
        }
      },
      "32": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 60
        }
      },
      "33": {
        start: {
          line: 77,
          column: 17
        },
        end: {
          line: 77,
          column: 21
        }
      },
      "34": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "35": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 44
        }
      },
      "36": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "37": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 85
        }
      },
      "38": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 22
        }
      },
      "39": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 93,
          column: 3
        }
      },
      "40": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 67
        }
      },
      "41": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "42": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 32
        }
      },
      "43": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 99,
          column: 3
        }
      },
      "44": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 66
        }
      },
      "45": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "46": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 31
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 49
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 26
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 52
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 56
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 38
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 71
      },
      "7": {
        name: "getJobManager",
        decl: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 78,
            column: 29
          }
        },
        loc: {
          start: {
            line: 78,
            column: 38
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 78
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 88,
            column: 22
          },
          end: {
            line: 88,
            column: 23
          }
        },
        loc: {
          start: {
            line: 88,
            column: 34
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 88
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 94,
            column: 21
          },
          end: {
            line: 94,
            column: 22
          }
        },
        loc: {
          start: {
            line: 94,
            column: 33
          },
          end: {
            line: 99,
            column: 1
          }
        },
        line: 94
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 37
          },
          end: {
            line: 60,
            column: 46
          }
        }, {
          start: {
            line: 60,
            column: 49
          },
          end: {
            line: 60,
            column: 60
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 63,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 72
          },
          end: {
            line: 63,
            column: 81
          }
        }, {
          start: {
            line: 63,
            column: 84
          },
          end: {
            line: 63,
            column: 93
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 64,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 64,
            column: 74
          }
        }, {
          start: {
            line: 64,
            column: 77
          },
          end: {
            line: 64,
            column: 81
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 29
          },
          end: {
            line: 65,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 46
          },
          end: {
            line: 65,
            column: 74
          }
        }, {
          start: {
            line: 65,
            column: 77
          },
          end: {
            line: 65,
            column: 81
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 79,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 79,
            column: 19
          }
        }, {
          start: {
            line: 79,
            column: 23
          },
          end: {
            line: 79,
            column: 29
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "10": {
        loc: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "11": {
        loc: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\index.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\index.ts"],
      sourcesContent: ["import { PrismaClient } from '@prisma/client';\nimport { MetricsAggregationJob } from './metrics-aggregation.job';\nimport { logger } from '../utils/logger';\n\nexport class JobManager {\n  private metricsAggregationJob: MetricsAggregationJob;\n  private prisma: PrismaClient;\n  private isRunning: boolean = false;\n\n  constructor(prisma: PrismaClient) {\n    this.prisma = prisma;\n    this.metricsAggregationJob = new MetricsAggregationJob(prisma);\n  }\n\n  public async start(): Promise<void> {\n    if (this.isRunning) {\n      logger.warn('Jobs are already running');\n      return;\n    }\n\n    try {\n      logger.info('Starting scheduled jobs...');\n      \n      // Start metrics aggregation job\n      this.metricsAggregationJob.start();\n      \n      this.isRunning = true;\n      logger.info('All scheduled jobs started successfully');\n      \n      // Log next run times\n      const nextMetricsRun = this.metricsAggregationJob.getNextRun();\n      if (nextMetricsRun) {\n        logger.info(`Next metrics aggregation: ${nextMetricsRun.toISOString()}`);\n      }\n      \n    } catch (error) {\n      logger.error('Failed to start jobs:', error);\n      throw error;\n    }\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.isRunning) {\n      logger.warn('Jobs are not running');\n      return;\n    }\n\n    try {\n      logger.info('Stopping scheduled jobs...');\n      \n      this.metricsAggregationJob.stop();\n      \n      this.isRunning = false;\n      logger.info('All scheduled jobs stopped successfully');\n    } catch (error) {\n      logger.error('Error stopping jobs:', error);\n      throw error;\n    }\n  }\n\n  public getMetricsAggregationJob(): MetricsAggregationJob {\n    return this.metricsAggregationJob;\n  }\n\n  public isJobManagerRunning(): boolean {\n    return this.isRunning;\n  }\n\n  // Health check for jobs\n  public getJobsHealth(): {\n    status: 'healthy' | 'unhealthy';\n    jobs: {\n      metricsAggregation: {\n        status: 'running' | 'stopped';\n        nextRun: string | null;\n        lastRun: string | null;\n      };\n    };\n  } {\n    const metricsNextRun = this.metricsAggregationJob.getNextRun();\n    const metricsLastRun = this.metricsAggregationJob.getLastRun();\n\n    return {\n      status: this.isRunning ? 'healthy' : 'unhealthy',\n      jobs: {\n        metricsAggregation: {\n          status: this.metricsAggregationJob.isJobRunning() ? 'running' : 'stopped',\n          nextRun: metricsNextRun ? metricsNextRun.toISOString() : null,\n          lastRun: metricsLastRun ? metricsLastRun.toISOString() : null,\n        },\n      },\n    };\n  }\n\n  // Manual triggers for testing\n  public async triggerMetricsAggregation(): Promise<void> {\n    logger.info('Manual trigger: metrics aggregation');\n    await this.metricsAggregationJob.triggerManualRun();\n  }\n}\n\n// Singleton instance\nlet jobManager: JobManager | null = null;\n\nexport function getJobManager(prisma?: PrismaClient): JobManager {\n  if (!jobManager && prisma) {\n    jobManager = new JobManager(prisma);\n  }\n  \n  if (!jobManager) {\n    throw new Error('JobManager not initialized. Call with PrismaClient first.');\n  }\n  \n  return jobManager;\n}\n\n// Graceful shutdown handler\nprocess.on('SIGTERM', async () => {\n  logger.info('SIGTERM received, shutting down jobs gracefully');\n  if (jobManager) {\n    await jobManager.stop();\n  }\n});\n\nprocess.on('SIGINT', async () => {\n  logger.info('SIGINT received, shutting down jobs gracefully');\n  if (jobManager) {\n    await jobManager.stop();\n  }\n});\n\nexport * from './metrics-aggregation.job';"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8a08277696743dcc7d70a127d973286313adefa7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_mghjao0l5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_mghjao0l5();
import { MetricsAggregationJob } from './metrics-aggregation.job';
import { logger } from '../utils/logger';
export class JobManager {
  metricsAggregationJob;
  prisma;
  isRunning =
  /* istanbul ignore next */
  (cov_mghjao0l5().s[0]++, false);
  constructor(prisma) {
    /* istanbul ignore next */
    cov_mghjao0l5().f[0]++;
    cov_mghjao0l5().s[1]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_mghjao0l5().s[2]++;
    this.metricsAggregationJob = new MetricsAggregationJob(prisma);
  }
  async start() {
    /* istanbul ignore next */
    cov_mghjao0l5().f[1]++;
    cov_mghjao0l5().s[3]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_mghjao0l5().b[0][0]++;
      cov_mghjao0l5().s[4]++;
      logger.warn('Jobs are already running');
      /* istanbul ignore next */
      cov_mghjao0l5().s[5]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_mghjao0l5().b[0][1]++;
    }
    cov_mghjao0l5().s[6]++;
    try {
      /* istanbul ignore next */
      cov_mghjao0l5().s[7]++;
      logger.info('Starting scheduled jobs...');
      // Start metrics aggregation job
      /* istanbul ignore next */
      cov_mghjao0l5().s[8]++;
      this.metricsAggregationJob.start();
      /* istanbul ignore next */
      cov_mghjao0l5().s[9]++;
      this.isRunning = true;
      /* istanbul ignore next */
      cov_mghjao0l5().s[10]++;
      logger.info('All scheduled jobs started successfully');
      // Log next run times
      const nextMetricsRun =
      /* istanbul ignore next */
      (cov_mghjao0l5().s[11]++, this.metricsAggregationJob.getNextRun());
      /* istanbul ignore next */
      cov_mghjao0l5().s[12]++;
      if (nextMetricsRun) {
        /* istanbul ignore next */
        cov_mghjao0l5().b[1][0]++;
        cov_mghjao0l5().s[13]++;
        logger.info(`Next metrics aggregation: ${nextMetricsRun.toISOString()}`);
      } else
      /* istanbul ignore next */
      {
        cov_mghjao0l5().b[1][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_mghjao0l5().s[14]++;
      logger.error('Failed to start jobs:', error);
      /* istanbul ignore next */
      cov_mghjao0l5().s[15]++;
      throw error;
    }
  }
  async stop() {
    /* istanbul ignore next */
    cov_mghjao0l5().f[2]++;
    cov_mghjao0l5().s[16]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_mghjao0l5().b[2][0]++;
      cov_mghjao0l5().s[17]++;
      logger.warn('Jobs are not running');
      /* istanbul ignore next */
      cov_mghjao0l5().s[18]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_mghjao0l5().b[2][1]++;
    }
    cov_mghjao0l5().s[19]++;
    try {
      /* istanbul ignore next */
      cov_mghjao0l5().s[20]++;
      logger.info('Stopping scheduled jobs...');
      /* istanbul ignore next */
      cov_mghjao0l5().s[21]++;
      this.metricsAggregationJob.stop();
      /* istanbul ignore next */
      cov_mghjao0l5().s[22]++;
      this.isRunning = false;
      /* istanbul ignore next */
      cov_mghjao0l5().s[23]++;
      logger.info('All scheduled jobs stopped successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_mghjao0l5().s[24]++;
      logger.error('Error stopping jobs:', error);
      /* istanbul ignore next */
      cov_mghjao0l5().s[25]++;
      throw error;
    }
  }
  getMetricsAggregationJob() {
    /* istanbul ignore next */
    cov_mghjao0l5().f[3]++;
    cov_mghjao0l5().s[26]++;
    return this.metricsAggregationJob;
  }
  isJobManagerRunning() {
    /* istanbul ignore next */
    cov_mghjao0l5().f[4]++;
    cov_mghjao0l5().s[27]++;
    return this.isRunning;
  }
  // Health check for jobs
  getJobsHealth() {
    /* istanbul ignore next */
    cov_mghjao0l5().f[5]++;
    const metricsNextRun =
    /* istanbul ignore next */
    (cov_mghjao0l5().s[28]++, this.metricsAggregationJob.getNextRun());
    const metricsLastRun =
    /* istanbul ignore next */
    (cov_mghjao0l5().s[29]++, this.metricsAggregationJob.getLastRun());
    /* istanbul ignore next */
    cov_mghjao0l5().s[30]++;
    return {
      status: this.isRunning ?
      /* istanbul ignore next */
      (cov_mghjao0l5().b[3][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_mghjao0l5().b[3][1]++, 'unhealthy'),
      jobs: {
        metricsAggregation: {
          status: this.metricsAggregationJob.isJobRunning() ?
          /* istanbul ignore next */
          (cov_mghjao0l5().b[4][0]++, 'running') :
          /* istanbul ignore next */
          (cov_mghjao0l5().b[4][1]++, 'stopped'),
          nextRun: metricsNextRun ?
          /* istanbul ignore next */
          (cov_mghjao0l5().b[5][0]++, metricsNextRun.toISOString()) :
          /* istanbul ignore next */
          (cov_mghjao0l5().b[5][1]++, null),
          lastRun: metricsLastRun ?
          /* istanbul ignore next */
          (cov_mghjao0l5().b[6][0]++, metricsLastRun.toISOString()) :
          /* istanbul ignore next */
          (cov_mghjao0l5().b[6][1]++, null)
        }
      }
    };
  }
  // Manual triggers for testing
  async triggerMetricsAggregation() {
    /* istanbul ignore next */
    cov_mghjao0l5().f[6]++;
    cov_mghjao0l5().s[31]++;
    logger.info('Manual trigger: metrics aggregation');
    /* istanbul ignore next */
    cov_mghjao0l5().s[32]++;
    await this.metricsAggregationJob.triggerManualRun();
  }
}
// Singleton instance
let jobManager =
/* istanbul ignore next */
(cov_mghjao0l5().s[33]++, null);
export function getJobManager(prisma) {
  /* istanbul ignore next */
  cov_mghjao0l5().f[7]++;
  cov_mghjao0l5().s[34]++;
  if (
  /* istanbul ignore next */
  (cov_mghjao0l5().b[8][0]++, !jobManager) &&
  /* istanbul ignore next */
  (cov_mghjao0l5().b[8][1]++, prisma)) {
    /* istanbul ignore next */
    cov_mghjao0l5().b[7][0]++;
    cov_mghjao0l5().s[35]++;
    jobManager = new JobManager(prisma);
  } else
  /* istanbul ignore next */
  {
    cov_mghjao0l5().b[7][1]++;
  }
  cov_mghjao0l5().s[36]++;
  if (!jobManager) {
    /* istanbul ignore next */
    cov_mghjao0l5().b[9][0]++;
    cov_mghjao0l5().s[37]++;
    throw new Error('JobManager not initialized. Call with PrismaClient first.');
  } else
  /* istanbul ignore next */
  {
    cov_mghjao0l5().b[9][1]++;
  }
  cov_mghjao0l5().s[38]++;
  return jobManager;
}
// Graceful shutdown handler
/* istanbul ignore next */
cov_mghjao0l5().s[39]++;
process.on('SIGTERM', async () => {
  /* istanbul ignore next */
  cov_mghjao0l5().f[8]++;
  cov_mghjao0l5().s[40]++;
  logger.info('SIGTERM received, shutting down jobs gracefully');
  /* istanbul ignore next */
  cov_mghjao0l5().s[41]++;
  if (jobManager) {
    /* istanbul ignore next */
    cov_mghjao0l5().b[10][0]++;
    cov_mghjao0l5().s[42]++;
    await jobManager.stop();
  } else
  /* istanbul ignore next */
  {
    cov_mghjao0l5().b[10][1]++;
  }
});
/* istanbul ignore next */
cov_mghjao0l5().s[43]++;
process.on('SIGINT', async () => {
  /* istanbul ignore next */
  cov_mghjao0l5().f[9]++;
  cov_mghjao0l5().s[44]++;
  logger.info('SIGINT received, shutting down jobs gracefully');
  /* istanbul ignore next */
  cov_mghjao0l5().s[45]++;
  if (jobManager) {
    /* istanbul ignore next */
    cov_mghjao0l5().b[11][0]++;
    cov_mghjao0l5().s[46]++;
    await jobManager.stop();
  } else
  /* istanbul ignore next */
  {
    cov_mghjao0l5().b[11][1]++;
  }
});
export * from './metrics-aggregation.job';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,