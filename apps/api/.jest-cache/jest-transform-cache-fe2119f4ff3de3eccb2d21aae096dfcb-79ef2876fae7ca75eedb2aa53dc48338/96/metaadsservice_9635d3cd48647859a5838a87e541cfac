38597ea79ad8fa7759a3c86b68535b2c
/* istanbul ignore next */
function cov_1aay3nzpso() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\meta-ads.service.ts";
  var hash = "c40dc42b50e49575c3def1b3cd7c6e6069920f65";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\meta-ads.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 470,
          column: 1
        }
      },
      "14": {
        start: {
          line: 22,
          column: 13
        },
        end: {
          line: 22,
          column: 46
        }
      },
      "15": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 48
        }
      },
      "16": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 18
        }
      },
      "17": {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 26,
          column: 21
        }
      },
      "18": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 43
        }
      },
      "19": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 29
        }
      },
      "20": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 43
        }
      },
      "21": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "22": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 39,
          column: 45
        }
      },
      "23": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 66
        }
      },
      "24": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 26
        }
      },
      "25": {
        start: {
          line: 39,
          column: 22
        },
        end: {
          line: 39,
          column: 43
        }
      },
      "26": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "27": {
        start: {
          line: 41,
          column: 63
        },
        end: {
          line: 41,
          column: 71
        }
      },
      "28": {
        start: {
          line: 42,
          column: 41
        },
        end: {
          line: 42,
          column: 46
        }
      },
      "29": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "30": {
        start: {
          line: 45,
          column: 35
        },
        end: {
          line: 45,
          column: 88
        }
      },
      "31": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 87
        }
      },
      "32": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 52
        }
      },
      "33": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 54
        }
      },
      "34": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "35": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 77
        }
      },
      "36": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 41
        }
      },
      "37": {
        start: {
          line: 62,
          column: 25
        },
        end: {
          line: 62,
          column: 62
        }
      },
      "38": {
        start: {
          line: 63,
          column: 22
        },
        end: {
          line: 63,
          column: 67
        }
      },
      "39": {
        start: {
          line: 64,
          column: 22
        },
        end: {
          line: 64,
          column: 99
        }
      },
      "40": {
        start: {
          line: 65,
          column: 23
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "41": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 82
        }
      },
      "42": {
        start: {
          line: 78,
          column: 25
        },
        end: {
          line: 78,
          column: 62
        }
      },
      "43": {
        start: {
          line: 79,
          column: 29
        },
        end: {
          line: 79,
          column: 70
        }
      },
      "44": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "45": {
        start: {
          line: 81,
          column: 29
        },
        end: {
          line: 88,
          column: 14
        }
      },
      "46": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 33
        }
      },
      "47": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 89
        }
      },
      "48": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 75
        }
      },
      "49": {
        start: {
          line: 100,
          column: 25
        },
        end: {
          line: 100,
          column: 62
        }
      },
      "50": {
        start: {
          line: 101,
          column: 29
        },
        end: {
          line: 101,
          column: 70
        }
      },
      "51": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "52": {
        start: {
          line: 103,
          column: 29
        },
        end: {
          line: 110,
          column: 14
        }
      },
      "53": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 33
        }
      },
      "54": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 86
        }
      },
      "55": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 79
        }
      },
      "56": {
        start: {
          line: 122,
          column: 37
        },
        end: {
          line: 122,
          column: 84
        }
      },
      "57": {
        start: {
          line: 123,
          column: 38
        },
        end: {
          line: 125,
          column: 18
        }
      },
      "58": {
        start: {
          line: 126,
          column: 26
        },
        end: {
          line: 126,
          column: 75
        }
      },
      "59": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "60": {
        start: {
          line: 156,
          column: 28
        },
        end: {
          line: 163,
          column: 10
        }
      },
      "61": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "62": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 90
        }
      },
      "63": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "64": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 72
        }
      },
      "65": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 68
        }
      },
      "66": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 67
        }
      },
      "67": {
        start: {
          line: 179,
          column: 28
        },
        end: {
          line: 179,
          column: 61
        }
      },
      "68": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "69": {
        start: {
          line: 181,
          column: 29
        },
        end: {
          line: 186,
          column: 14
        }
      },
      "70": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 44
        }
      },
      "71": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 83
        }
      },
      "72": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 73
        }
      },
      "73": {
        start: {
          line: 198,
          column: 28
        },
        end: {
          line: 198,
          column: 61
        }
      },
      "74": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "75": {
        start: {
          line: 200,
          column: 29
        },
        end: {
          line: 206,
          column: 14
        }
      },
      "76": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 44
        }
      },
      "77": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 81
        }
      },
      "78": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 71
        }
      },
      "79": {
        start: {
          line: 218,
          column: 28
        },
        end: {
          line: 218,
          column: 61
        }
      },
      "80": {
        start: {
          line: 219,
          column: 23
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "81": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "82": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 228,
          column: 15
        }
      },
      "83": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "84": {
        start: {
          line: 231,
          column: 29
        },
        end: {
          line: 233,
          column: 14
        }
      },
      "85": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 44
        }
      },
      "86": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 89
        }
      },
      "87": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 79
        }
      },
      "88": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 60
        }
      },
      "89": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "90": {
        start: {
          line: 247,
          column: 31
        },
        end: {
          line: 247,
          column: 63
        }
      },
      "91": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "92": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 62
        }
      },
      "93": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 262,
          column: 15
        }
      },
      "94": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 65
        }
      },
      "95": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 71
        }
      },
      "96": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 24
        }
      },
      "97": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "98": {
        start: {
          line: 275,
          column: 30
        },
        end: {
          line: 275,
          column: 73
        }
      },
      "99": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "100": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 72
        }
      },
      "101": {
        start: {
          line: 280,
          column: 33
        },
        end: {
          line: 280,
          column: 84
        }
      },
      "102": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 80
        }
      },
      "103": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 80
        }
      },
      "104": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 324,
          column: 11
        }
      },
      "105": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "106": {
        start: {
          line: 331,
          column: 32
        },
        end: {
          line: 331,
          column: 153
        }
      },
      "107": {
        start: {
          line: 331,
          column: 64
        },
        end: {
          line: 331,
          column: 138
        }
      },
      "108": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 368,
          column: 15
        }
      },
      "109": {
        start: {
          line: 375,
          column: 26
        },
        end: {
          line: 375,
          column: 67
        }
      },
      "110": {
        start: {
          line: 376,
          column: 23
        },
        end: {
          line: 376,
          column: 40
        }
      },
      "111": {
        start: {
          line: 377,
          column: 34
        },
        end: {
          line: 380,
          column: 26
        }
      },
      "112": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 59
        }
      },
      "113": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "114": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 395,
          column: 13
        }
      },
      "115": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 394,
          column: 17
        }
      },
      "116": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 390,
          column: 76
        }
      },
      "117": {
        start: {
          line: 392,
          column: 21
        },
        end: {
          line: 394,
          column: 17
        }
      },
      "118": {
        start: {
          line: 393,
          column: 20
        },
        end: {
          line: 393,
          column: 76
        }
      },
      "119": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 402,
          column: 84
        }
      },
      "120": {
        start: {
          line: 404,
          column: 29
        },
        end: {
          line: 409,
          column: 10
        }
      },
      "121": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "122": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 417,
          column: 13
        }
      },
      "123": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 413,
          column: 60
        }
      },
      "124": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 100
        }
      },
      "125": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 84
        }
      },
      "126": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 60
        }
      },
      "127": {
        start: {
          line: 432,
          column: 29
        },
        end: {
          line: 437,
          column: 10
        }
      },
      "128": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 445,
          column: 9
        }
      },
      "129": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 444,
          column: 13
        }
      },
      "130": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 60
        }
      },
      "131": {
        start: {
          line: 443,
          column: 16
        },
        end: {
          line: 443,
          column: 97
        }
      },
      "132": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 61
        }
      },
      "133": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 63
        }
      },
      "134": {
        start: {
          line: 452,
          column: 38
        },
        end: {
          line: 452,
          column: 61
        }
      },
      "135": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 468,
          column: 9
        }
      },
      "136": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 459,
          column: 35
        }
      },
      "137": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 466,
          column: 13
        }
      },
      "138": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 91
        }
      },
      "139": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 50
        }
      },
      "140": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 465,
          column: 63
        }
      },
      "141": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 24
        }
      },
      "142": {
        start: {
          line: 471,
          column: 0
        },
        end: {
          line: 476,
          column: 52
        }
      },
      "143": {
        start: {
          line: 477,
          column: 0
        },
        end: {
          line: 480,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 54
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 48
          },
          end: {
            line: 36,
            column: 49
          }
        },
        loc: {
          start: {
            line: 36,
            column: 60
          },
          end: {
            line: 39,
            column: 9
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 11
          },
          end: {
            line: 39,
            column: 12
          }
        },
        loc: {
          start: {
            line: 39,
            column: 22
          },
          end: {
            line: 39,
            column: 43
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 49
          },
          end: {
            line: 41,
            column: 50
          }
        },
        loc: {
          start: {
            line: 41,
            column: 63
          },
          end: {
            line: 41,
            column: 71
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 41,
            column: 73
          },
          end: {
            line: 41,
            column: 74
          }
        },
        loc: {
          start: {
            line: 41,
            column: 90
          },
          end: {
            line: 56,
            column: 9
          }
        },
        line: 41
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 41
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 61
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 50
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 77
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 45
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 99
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 38
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 121
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 155
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 32
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 178
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 44
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 197
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 61
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 217
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 31
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 244
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 45
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 273
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 55
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 291
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 62
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 329
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 331,
            column: 54
          },
          end: {
            line: 331,
            column: 55
          }
        },
        loc: {
          start: {
            line: 331,
            column: 64
          },
          end: {
            line: 331,
            column: 138
          }
        },
        line: 331
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 47
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 374
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 386,
            column: 4
          },
          end: {
            line: 386,
            column: 5
          }
        },
        loc: {
          start: {
            line: 386,
            column: 34
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 386
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 57
          },
          end: {
            line: 419,
            column: 5
          }
        },
        line: 401
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 423,
            column: 4
          },
          end: {
            line: 423,
            column: 5
          }
        },
        loc: {
          start: {
            line: 423,
            column: 57
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 423
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 430,
            column: 4
          },
          end: {
            line: 430,
            column: 5
          }
        },
        loc: {
          start: {
            line: 430,
            column: 26
          },
          end: {
            line: 447,
            column: 5
          }
        },
        line: 430
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 14
          },
          end: {
            line: 453,
            column: 5
          }
        },
        line: 451
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 452,
            column: 27
          },
          end: {
            line: 452,
            column: 28
          }
        },
        loc: {
          start: {
            line: 452,
            column: 38
          },
          end: {
            line: 452,
            column: 61
          }
        },
        line: 452
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 457,
            column: 4
          },
          end: {
            line: 457,
            column: 5
          }
        },
        loc: {
          start: {
            line: 457,
            column: 59
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 457
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "14": {
        loc: {
          start: {
            line: 45,
            column: 44
          },
          end: {
            line: 45,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 44
          },
          end: {
            line: 45,
            column: 75
          }
        }, {
          start: {
            line: 45,
            column: 79
          },
          end: {
            line: 45,
            column: 83
          }
        }],
        line: 45
      },
      "15": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "16": {
        loc: {
          start: {
            line: 123,
            column: 38
          },
          end: {
            line: 125,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 14
          },
          end: {
            line: 124,
            column: 62
          }
        }, {
          start: {
            line: 125,
            column: 14
          },
          end: {
            line: 125,
            column: 18
          }
        }],
        line: 123
      },
      "17": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "18": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 164,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 164,
            column: 24
          }
        }, {
          start: {
            line: 164,
            column: 28
          },
          end: {
            line: 164,
            column: 49
          }
        }],
        line: 164
      },
      "19": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "20": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 168,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 168,
            column: 33
          }
        }, {
          start: {
            line: 168,
            column: 37
          },
          end: {
            line: 168,
            column: 71
          }
        }],
        line: 168
      },
      "21": {
        loc: {
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 187,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 187,
            column: 37
          }
        }, {
          start: {
            line: 187,
            column: 41
          },
          end: {
            line: 187,
            column: 43
          }
        }],
        line: 187
      },
      "22": {
        loc: {
          start: {
            line: 207,
            column: 19
          },
          end: {
            line: 207,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 19
          },
          end: {
            line: 207,
            column: 37
          }
        }, {
          start: {
            line: 207,
            column: 41
          },
          end: {
            line: 207,
            column: 43
          }
        }],
        line: 207
      },
      "23": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "24": {
        loc: {
          start: {
            line: 234,
            column: 19
          },
          end: {
            line: 234,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 19
          },
          end: {
            line: 234,
            column: 37
          }
        }, {
          start: {
            line: 234,
            column: 41
          },
          end: {
            line: 234,
            column: 43
          }
        }],
        line: 234
      },
      "25": {
        loc: {
          start: {
            line: 303,
            column: 27
          },
          end: {
            line: 303,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 49
          },
          end: {
            line: 303,
            column: 78
          }
        }, {
          start: {
            line: 303,
            column: 81
          },
          end: {
            line: 303,
            column: 85
          }
        }],
        line: 303
      },
      "26": {
        loc: {
          start: {
            line: 304,
            column: 25
          },
          end: {
            line: 304,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 304,
            column: 46
          },
          end: {
            line: 304,
            column: 74
          }
        }, {
          start: {
            line: 304,
            column: 77
          },
          end: {
            line: 304,
            column: 81
          }
        }],
        line: 304
      },
      "27": {
        loc: {
          start: {
            line: 305,
            column: 29
          },
          end: {
            line: 305,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 305,
            column: 53
          },
          end: {
            line: 305,
            column: 86
          }
        }, {
          start: {
            line: 305,
            column: 89
          },
          end: {
            line: 305,
            column: 93
          }
        }],
        line: 305
      },
      "28": {
        loc: {
          start: {
            line: 306,
            column: 29
          },
          end: {
            line: 306,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 306,
            column: 56
          },
          end: {
            line: 306,
            column: 92
          }
        }, {
          start: {
            line: 306,
            column: 95
          },
          end: {
            line: 306,
            column: 99
          }
        }],
        line: 306
      },
      "29": {
        loc: {
          start: {
            line: 316,
            column: 27
          },
          end: {
            line: 316,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 316,
            column: 49
          },
          end: {
            line: 316,
            column: 78
          }
        }, {
          start: {
            line: 316,
            column: 81
          },
          end: {
            line: 316,
            column: 85
          }
        }],
        line: 316
      },
      "30": {
        loc: {
          start: {
            line: 317,
            column: 25
          },
          end: {
            line: 317,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 317,
            column: 46
          },
          end: {
            line: 317,
            column: 74
          }
        }, {
          start: {
            line: 317,
            column: 77
          },
          end: {
            line: 317,
            column: 81
          }
        }],
        line: 317
      },
      "31": {
        loc: {
          start: {
            line: 318,
            column: 29
          },
          end: {
            line: 318,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 318,
            column: 53
          },
          end: {
            line: 318,
            column: 86
          }
        }, {
          start: {
            line: 318,
            column: 89
          },
          end: {
            line: 318,
            column: 93
          }
        }],
        line: 318
      },
      "32": {
        loc: {
          start: {
            line: 319,
            column: 29
          },
          end: {
            line: 319,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 319,
            column: 56
          },
          end: {
            line: 319,
            column: 92
          }
        }, {
          start: {
            line: 319,
            column: 95
          },
          end: {
            line: 319,
            column: 99
          }
        }],
        line: 319
      },
      "33": {
        loc: {
          start: {
            line: 331,
            column: 32
          },
          end: {
            line: 331,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 32
          },
          end: {
            line: 331,
            column: 146
          }
        }, {
          start: {
            line: 331,
            column: 150
          },
          end: {
            line: 331,
            column: 153
          }
        }],
        line: 331
      },
      "34": {
        loc: {
          start: {
            line: 341,
            column: 42
          },
          end: {
            line: 341,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 42
          },
          end: {
            line: 341,
            column: 61
          }
        }, {
          start: {
            line: 341,
            column: 65
          },
          end: {
            line: 341,
            column: 68
          }
        }],
        line: 341
      },
      "35": {
        loc: {
          start: {
            line: 342,
            column: 37
          },
          end: {
            line: 342,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 37
          },
          end: {
            line: 342,
            column: 51
          }
        }, {
          start: {
            line: 342,
            column: 55
          },
          end: {
            line: 342,
            column: 58
          }
        }],
        line: 342
      },
      "36": {
        loc: {
          start: {
            line: 343,
            column: 38
          },
          end: {
            line: 343,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 343,
            column: 38
          },
          end: {
            line: 343,
            column: 51
          }
        }, {
          start: {
            line: 343,
            column: 55
          },
          end: {
            line: 343,
            column: 58
          }
        }],
        line: 343
      },
      "37": {
        loc: {
          start: {
            line: 345,
            column: 36
          },
          end: {
            line: 345,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 345,
            column: 36
          },
          end: {
            line: 345,
            column: 47
          }
        }, {
          start: {
            line: 345,
            column: 51
          },
          end: {
            line: 345,
            column: 54
          }
        }],
        line: 345
      },
      "38": {
        loc: {
          start: {
            line: 346,
            column: 36
          },
          end: {
            line: 346,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 346,
            column: 36
          },
          end: {
            line: 346,
            column: 47
          }
        }, {
          start: {
            line: 346,
            column: 51
          },
          end: {
            line: 346,
            column: 54
          }
        }],
        line: 346
      },
      "39": {
        loc: {
          start: {
            line: 347,
            column: 36
          },
          end: {
            line: 347,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 36
          },
          end: {
            line: 347,
            column: 47
          }
        }, {
          start: {
            line: 347,
            column: 51
          },
          end: {
            line: 347,
            column: 54
          }
        }],
        line: 347
      },
      "40": {
        loc: {
          start: {
            line: 348,
            column: 36
          },
          end: {
            line: 348,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 36
          },
          end: {
            line: 348,
            column: 49
          }
        }, {
          start: {
            line: 348,
            column: 53
          },
          end: {
            line: 348,
            column: 56
          }
        }],
        line: 348
      },
      "41": {
        loc: {
          start: {
            line: 349,
            column: 42
          },
          end: {
            line: 349,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 42
          },
          end: {
            line: 349,
            column: 59
          }
        }, {
          start: {
            line: 349,
            column: 63
          },
          end: {
            line: 349,
            column: 66
          }
        }],
        line: 349
      },
      "42": {
        loc: {
          start: {
            line: 356,
            column: 42
          },
          end: {
            line: 356,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 356,
            column: 42
          },
          end: {
            line: 356,
            column: 61
          }
        }, {
          start: {
            line: 356,
            column: 65
          },
          end: {
            line: 356,
            column: 68
          }
        }],
        line: 356
      },
      "43": {
        loc: {
          start: {
            line: 357,
            column: 37
          },
          end: {
            line: 357,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 37
          },
          end: {
            line: 357,
            column: 51
          }
        }, {
          start: {
            line: 357,
            column: 55
          },
          end: {
            line: 357,
            column: 58
          }
        }],
        line: 357
      },
      "44": {
        loc: {
          start: {
            line: 358,
            column: 38
          },
          end: {
            line: 358,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 38
          },
          end: {
            line: 358,
            column: 51
          }
        }, {
          start: {
            line: 358,
            column: 55
          },
          end: {
            line: 358,
            column: 58
          }
        }],
        line: 358
      },
      "45": {
        loc: {
          start: {
            line: 360,
            column: 36
          },
          end: {
            line: 360,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 36
          },
          end: {
            line: 360,
            column: 47
          }
        }, {
          start: {
            line: 360,
            column: 51
          },
          end: {
            line: 360,
            column: 54
          }
        }],
        line: 360
      },
      "46": {
        loc: {
          start: {
            line: 361,
            column: 36
          },
          end: {
            line: 361,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 36
          },
          end: {
            line: 361,
            column: 47
          }
        }, {
          start: {
            line: 361,
            column: 51
          },
          end: {
            line: 361,
            column: 54
          }
        }],
        line: 361
      },
      "47": {
        loc: {
          start: {
            line: 362,
            column: 36
          },
          end: {
            line: 362,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 36
          },
          end: {
            line: 362,
            column: 47
          }
        }, {
          start: {
            line: 362,
            column: 51
          },
          end: {
            line: 362,
            column: 54
          }
        }],
        line: 362
      },
      "48": {
        loc: {
          start: {
            line: 363,
            column: 36
          },
          end: {
            line: 363,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 36
          },
          end: {
            line: 363,
            column: 49
          }
        }, {
          start: {
            line: 363,
            column: 53
          },
          end: {
            line: 363,
            column: 56
          }
        }],
        line: 363
      },
      "49": {
        loc: {
          start: {
            line: 364,
            column: 42
          },
          end: {
            line: 364,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 42
          },
          end: {
            line: 364,
            column: 59
          }
        }, {
          start: {
            line: 364,
            column: 63
          },
          end: {
            line: 364,
            column: 66
          }
        }],
        line: 364
      },
      "50": {
        loc: {
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 394,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 394,
            column: 17
          }
        }, {
          start: {
            line: 392,
            column: 21
          },
          end: {
            line: 394,
            column: 17
          }
        }],
        line: 389
      },
      "51": {
        loc: {
          start: {
            line: 392,
            column: 21
          },
          end: {
            line: 394,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 21
          },
          end: {
            line: 394,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "52": {
        loc: {
          start: {
            line: 457,
            column: 32
          },
          end: {
            line: 457,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 457,
            column: 42
          },
          end: {
            line: 457,
            column: 57
          }
        }],
        line: 457
      },
      "53": {
        loc: {
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 466,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 466,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "54": {
        loc: {
          start: {
            line: 462,
            column: 16
          },
          end: {
            line: 462,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 462,
            column: 16
          },
          end: {
            line: 462,
            column: 27
          }
        }, {
          start: {
            line: 462,
            column: 31
          },
          end: {
            line: 462,
            column: 60
          }
        }],
        line: 462
      },
      "55": {
        loc: {
          start: {
            line: 475,
            column: 36
          },
          end: {
            line: 475,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 475,
            column: 109
          },
          end: {
            line: 475,
            column: 111
          }
        }, {
          start: {
            line: 475,
            column: 114
          },
          end: {
            line: 475,
            column: 120
          }
        }],
        line: 475
      },
      "56": {
        loc: {
          start: {
            line: 475,
            column: 49
          },
          end: {
            line: 475,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 475,
            column: 49
          },
          end: {
            line: 475,
            column: 79
          }
        }, {
          start: {
            line: 475,
            column: 83
          },
          end: {
            line: 475,
            column: 90
          }
        }],
        line: 475
      },
      "57": {
        loc: {
          start: {
            line: 479,
            column: 37
          },
          end: {
            line: 479,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 479,
            column: 122
          },
          end: {
            line: 479,
            column: 124
          }
        }, {
          start: {
            line: 479,
            column: 127
          },
          end: {
            line: 479,
            column: 133
          }
        }],
        line: 479
      },
      "58": {
        loc: {
          start: {
            line: 479,
            column: 50
          },
          end: {
            line: 479,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 479,
            column: 50
          },
          end: {
            line: 479,
            column: 86
          }
        }, {
          start: {
            line: 479,
            column: 90
          },
          end: {
            line: 479,
            column: 103
          }
        }],
        line: 479
      },
      "59": {
        loc: {
          start: {
            line: 479,
            column: 135
          },
          end: {
            line: 479,
            column: 231
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 479,
            column: 220
          },
          end: {
            line: 479,
            column: 222
          }
        }, {
          start: {
            line: 479,
            column: 225
          },
          end: {
            line: 479,
            column: 231
          }
        }],
        line: 479
      },
      "60": {
        loc: {
          start: {
            line: 479,
            column: 148
          },
          end: {
            line: 479,
            column: 201
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 479,
            column: 148
          },
          end: {
            line: 479,
            column: 184
          }
        }, {
          start: {
            line: 479,
            column: 188
          },
          end: {
            line: 479,
            column: 201
          }
        }],
        line: 479
      },
      "61": {
        loc: {
          start: {
            line: 479,
            column: 233
          },
          end: {
            line: 479,
            column: 329
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 479,
            column: 318
          },
          end: {
            line: 479,
            column: 320
          }
        }, {
          start: {
            line: 479,
            column: 323
          },
          end: {
            line: 479,
            column: 329
          }
        }],
        line: 479
      },
      "62": {
        loc: {
          start: {
            line: 479,
            column: 246
          },
          end: {
            line: 479,
            column: 299
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 479,
            column: 246
          },
          end: {
            line: 479,
            column: 282
          }
        }, {
          start: {
            line: 479,
            column: 286
          },
          end: {
            line: 479,
            column: 299
          }
        }],
        line: 479
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\meta-ads.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\meta-ads.service.ts"],
      sourcesContent: ["import { Injectable, Logger, BadRequestException, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../database/prisma.service';\nimport { CryptoService } from './crypto.service';\nimport axios, { AxiosInstance } from 'axios';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\ninterface MetaOAuthTokens {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  refresh_token?: string;\n}\n\ninterface MetaAdAccount {\n  id: string;\n  name: string;\n  account_status: number;\n  currency: string;\n  timezone_name: string;\n  business?: {\n    id: string;\n    name: string;\n  };\n}\n\ninterface MetaCampaign {\n  id: string;\n  name: string;\n  status: string;\n  objective: string;\n  created_time: string;\n  updated_time: string;\n  start_time?: string;\n  stop_time?: string;\n  daily_budget?: string;\n  lifetime_budget?: string;\n  budget_remaining?: string;\n  account_id: string;\n}\n\ninterface MetaCampaignInsights {\n  campaign_id: string;\n  impressions: string;\n  clicks: string;\n  spend: string;\n  ctr: string;\n  cpc: string;\n  cpp: string;\n  cpm: string;\n  reach: string;\n  frequency: string;\n  actions?: Array<{\n    action_type: string;\n    value: string;\n  }>;\n  cost_per_action_type?: Array<{\n    action_type: string;\n    value: string;\n  }>;\n  date_start: string;\n  date_stop: string;\n}\n\ninterface WebhookEntry {\n  id: string;\n  time: number;\n  changes: Array<{\n    field: string;\n    value: any;\n  }>;\n}\n\n@Injectable()\nexport class MetaAdsService {\n  private readonly logger = new Logger(MetaAdsService.name);\n  private readonly apiClient: AxiosInstance;\n  private readonly baseUrl = 'https://graph.facebook.com/v18.0';\n  private readonly maxRetries = 3;\n  private readonly retryDelay = 1000; // 1 second\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly prisma: PrismaService,\n    private readonly cryptoService: CryptoService,\n  ) {\n    this.apiClient = axios.create({\n      baseURL: this.baseUrl,\n      timeout: 30000,\n    });\n\n    // Add request interceptor for rate limiting\n    this.apiClient.interceptors.request.use(\n      (config) => {\n        this.logger.debug(`Making request to: ${config.url}`);\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Add response interceptor for error handling and retries\n    this.apiClient.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const { config, response } = error;\n        \n        // Handle rate limiting (HTTP 429)\n        if (response?.status === 429) {\n          const retryAfter = parseInt(response.headers['retry-after'] || '60', 10);\n          this.logger.warn(`Rate limited. Retrying after ${retryAfter} seconds`);\n          \n          await this.delay(retryAfter * 1000);\n          return this.apiClient.request(config);\n        }\n\n        // Handle token expiration (HTTP 401)\n        if (response?.status === 401) {\n          this.logger.warn('Access token expired, attempting refresh');\n          // Token refresh logic will be handled by the calling method\n        }\n\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   * Generate OAuth authorization URL\n   */\n  generateAuthUrl(userId: string, redirectUri: string): string {\n    const clientId = this.configService.get<string>('META_APP_ID');\n    const scope = 'ads_read,ads_management,business_management';\n    const state = this.cryptoService.encrypt(JSON.stringify({ userId, timestamp: Date.now() }));\n\n    const params = new URLSearchParams({\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      scope,\n      response_type: 'code',\n      state,\n    });\n\n    return `https://www.facebook.com/v18.0/dialog/oauth?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for access token\n   */\n  async exchangeCodeForToken(code: string, redirectUri: string): Promise<MetaOAuthTokens> {\n    const clientId = this.configService.get<string>('META_APP_ID');\n    const clientSecret = this.configService.get<string>('META_APP_SECRET');\n\n    try {\n      const response = await this.apiClient.post('/oauth/access_token', null, {\n        params: {\n          client_id: clientId,\n          client_secret: clientSecret,\n          redirect_uri: redirectUri,\n          code,\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      this.logger.error('Failed to exchange code for token', error.response?.data);\n      throw new BadRequestException('Failed to obtain access token');\n    }\n  }\n\n  /**\n   * Get long-lived access token\n   */\n  async getLongLivedToken(shortLivedToken: string): Promise<MetaOAuthTokens> {\n    const clientId = this.configService.get<string>('META_APP_ID');\n    const clientSecret = this.configService.get<string>('META_APP_SECRET');\n\n    try {\n      const response = await this.apiClient.get('/oauth/access_token', {\n        params: {\n          grant_type: 'fb_exchange_token',\n          client_id: clientId,\n          client_secret: clientSecret,\n          fb_exchange_token: shortLivedToken,\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      this.logger.error('Failed to get long-lived token', error.response?.data);\n      throw new BadRequestException('Failed to obtain long-lived token');\n    }\n  }\n\n  /**\n   * Store encrypted tokens in database\n   */\n  async storeTokens(userId: string, tokens: MetaOAuthTokens): Promise<void> {\n    const encryptedAccessToken = this.cryptoService.encrypt(tokens.access_token);\n    const encryptedRefreshToken = tokens.refresh_token \n      ? this.cryptoService.encrypt(tokens.refresh_token) \n      : null;\n\n    const expiresAt = new Date(Date.now() + (tokens.expires_in * 1000));\n\n    await this.prisma.integration.upsert({\n      where: {\n        userId_provider: {\n          userId,\n          provider: 'META_ADS',\n        },\n      },\n      update: {\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSyncAt: new Date(),\n      },\n      create: {\n        userId,\n        provider: 'META_ADS',\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSyncAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Get decrypted access token for user\n   */\n  async getAccessToken(userId: string): Promise<string> {\n    const integration = await this.prisma.integration.findUnique({\n      where: {\n        userId_provider: {\n          userId,\n          provider: 'META_ADS',\n        },\n      },\n    });\n\n    if (!integration || !integration.isActive) {\n      throw new UnauthorizedException('Meta Ads integration not found or inactive');\n    }\n\n    // Check if token is expired\n    if (integration.expiresAt && integration.expiresAt < new Date()) {\n      this.logger.warn(`Access token expired for user ${userId}`);\n      // In a real implementation, you would refresh the token here\n      throw new UnauthorizedException('Access token expired');\n    }\n\n    return this.cryptoService.decrypt(integration.accessToken);\n  }\n\n  /**\n   * Get user's ad accounts\n   */\n  async getAdAccounts(userId: string): Promise<MetaAdAccount[]> {\n    const accessToken = await this.getAccessToken(userId);\n\n    try {\n      const response = await this.apiClient.get('/me/adaccounts', {\n        params: {\n          access_token: accessToken,\n          fields: 'id,name,account_status,currency,timezone_name,business{id,name}',\n        },\n      });\n\n      return response.data.data || [];\n    } catch (error) {\n      this.logger.error('Failed to fetch ad accounts', error.response?.data);\n      throw new BadRequestException('Failed to fetch ad accounts');\n    }\n  }\n\n  /**\n   * Get campaigns for an ad account\n   */\n  async getCampaigns(userId: string, adAccountId: string): Promise<MetaCampaign[]> {\n    const accessToken = await this.getAccessToken(userId);\n\n    try {\n      const response = await this.apiClient.get(`/${adAccountId}/campaigns`, {\n        params: {\n          access_token: accessToken,\n          fields: 'id,name,status,objective,created_time,updated_time,start_time,stop_time,daily_budget,lifetime_budget,budget_remaining',\n          limit: 100,\n        },\n      });\n\n      return response.data.data || [];\n    } catch (error) {\n      this.logger.error('Failed to fetch campaigns', error.response?.data);\n      throw new BadRequestException('Failed to fetch campaigns');\n    }\n  }\n\n  /**\n   * Get campaign insights (metrics)\n   */\n  async getCampaignInsights(\n    userId: string,\n    campaignId: string,\n    dateRange?: { since: string; until: string }\n  ): Promise<MetaCampaignInsights[]> {\n    const accessToken = await this.getAccessToken(userId);\n\n    const params: any = {\n      access_token: accessToken,\n      fields: 'impressions,clicks,spend,ctr,cpc,cpp,cpm,reach,frequency,actions,cost_per_action_type',\n      level: 'campaign',\n    };\n\n    if (dateRange) {\n      params.time_range = JSON.stringify({\n        since: dateRange.since,\n        until: dateRange.until,\n      });\n    }\n\n    try {\n      const response = await this.apiClient.get(`/${campaignId}/insights`, {\n        params,\n      });\n\n      return response.data.data || [];\n    } catch (error) {\n      this.logger.error('Failed to fetch campaign insights', error.response?.data);\n      throw new BadRequestException('Failed to fetch campaign insights');\n    }\n  }\n\n  /**\n   * Sync campaigns and metrics for a user\n   */\n  async syncUserData(userId: string): Promise<void> {\n    this.logger.log(`Starting sync for user ${userId}`);\n\n    try {\n      const adAccounts = await this.getAdAccounts(userId);\n      \n      for (const account of adAccounts) {\n        await this.syncAdAccountData(userId, account);\n      }\n\n      // Update last sync timestamp\n      await this.prisma.integration.update({\n        where: {\n          userId_provider: {\n            userId,\n            provider: 'META_ADS',\n          },\n        },\n        data: {\n          lastSyncAt: new Date(),\n        },\n      });\n\n      this.logger.log(`Sync completed for user ${userId}`);\n    } catch (error) {\n      this.logger.error(`Sync failed for user ${userId}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sync data for a specific ad account\n   */\n  private async syncAdAccountData(userId: string, account: MetaAdAccount): Promise<void> {\n    try {\n      const campaigns = await this.getCampaigns(userId, account.id);\n      \n      for (const campaign of campaigns) {\n        // Store campaign data\n        await this.storeCampaignData(userId, account, campaign);\n        \n        // Get and store insights\n        const insights = await this.getCampaignInsights(userId, campaign.id);\n        await this.storeCampaignInsights(userId, campaign.id, insights);\n      }\n    } catch (error) {\n      this.logger.error(`Failed to sync ad account ${account.id}`, error);\n    }\n  }\n\n  /**\n   * Store campaign data in database\n   */\n  private async storeCampaignData(\n    userId: string,\n    account: MetaAdAccount,\n    campaign: MetaCampaign\n  ): Promise<void> {\n    await this.prisma.campaign.upsert({\n      where: {\n        externalId_platform: {\n          externalId: campaign.id,\n          platform: 'META_ADS',\n        },\n      },\n      update: {\n        name: campaign.name,\n        status: campaign.status.toUpperCase(),\n        objective: campaign.objective,\n        startDate: campaign.start_time ? new Date(campaign.start_time) : null,\n        endDate: campaign.stop_time ? new Date(campaign.stop_time) : null,\n        dailyBudget: campaign.daily_budget ? parseFloat(campaign.daily_budget) : null,\n        totalBudget: campaign.lifetime_budget ? parseFloat(campaign.lifetime_budget) : null,\n        updatedAt: new Date(),\n      },\n      create: {\n        userId,\n        externalId: campaign.id,\n        platform: 'META_ADS',\n        name: campaign.name,\n        status: campaign.status.toUpperCase(),\n        objective: campaign.objective,\n        startDate: campaign.start_time ? new Date(campaign.start_time) : null,\n        endDate: campaign.stop_time ? new Date(campaign.stop_time) : null,\n        dailyBudget: campaign.daily_budget ? parseFloat(campaign.daily_budget) : null,\n        totalBudget: campaign.lifetime_budget ? parseFloat(campaign.lifetime_budget) : null,\n        adAccountId: account.id,\n        createdAt: new Date(campaign.created_time),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store campaign insights in database\n   */\n  private async storeCampaignInsights(\n    userId: string,\n    campaignId: string,\n    insights: MetaCampaignInsights[]\n  ): Promise<void> {\n    for (const insight of insights) {\n      const conversions = insight.actions?.find(action => \n        ['purchase', 'complete_registration', 'lead'].includes(action.action_type)\n      )?.value || '0';\n\n      await this.prisma.campaignMetrics.upsert({\n        where: {\n          campaignExternalId_date_platform: {\n            campaignExternalId: campaignId,\n            date: new Date(insight.date_start),\n            platform: 'META_ADS',\n          },\n        },\n        update: {\n          impressions: parseInt(insight.impressions || '0'),\n          clicks: parseInt(insight.clicks || '0'),\n          spend: parseFloat(insight.spend || '0'),\n          conversions: parseInt(conversions),\n          ctr: parseFloat(insight.ctr || '0'),\n          cpc: parseFloat(insight.cpc || '0'),\n          cpm: parseFloat(insight.cpm || '0'),\n          reach: parseInt(insight.reach || '0'),\n          frequency: parseFloat(insight.frequency || '0'),\n          updatedAt: new Date(),\n        },\n        create: {\n          campaignExternalId: campaignId,\n          platform: 'META_ADS',\n          date: new Date(insight.date_start),\n          impressions: parseInt(insight.impressions || '0'),\n          clicks: parseInt(insight.clicks || '0'),\n          spend: parseFloat(insight.spend || '0'),\n          conversions: parseInt(conversions),\n          ctr: parseFloat(insight.ctr || '0'),\n          cpc: parseFloat(insight.cpc || '0'),\n          cpm: parseFloat(insight.cpm || '0'),\n          reach: parseInt(insight.reach || '0'),\n          frequency: parseFloat(insight.frequency || '0'),\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n      });\n    }\n  }\n\n  /**\n   * Verify webhook signature\n   */\n  verifyWebhookSignature(payload: string, signature: string): boolean {\n    const appSecret = this.configService.get<string>('META_APP_SECRET');\n    const crypto = require('crypto');\n    \n    const expectedSignature = crypto\n      .createHmac('sha256', appSecret)\n      .update(payload)\n      .digest('hex');\n    \n    return signature === `sha256=${expectedSignature}`;\n  }\n\n  /**\n   * Process webhook data\n   */\n  async processWebhook(entries: WebhookEntry[]): Promise<void> {\n    for (const entry of entries) {\n      for (const change of entry.changes) {\n        if (change.field === 'campaigns') {\n          await this.handleCampaignChange(entry.id, change.value);\n        } else if (change.field === 'insights') {\n          await this.handleInsightsChange(entry.id, change.value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle campaign changes from webhook\n   */\n  private async handleCampaignChange(adAccountId: string, changeValue: any): Promise<void> {\n    this.logger.log(`Processing campaign change for ad account ${adAccountId}`);\n    \n    // Find users with this ad account integration\n    const integrations = await this.prisma.integration.findMany({\n      where: {\n        provider: 'META_ADS',\n        isActive: true,\n      },\n    });\n\n    for (const integration of integrations) {\n      try {\n        // Trigger sync for this user\n        await this.syncUserData(integration.userId);\n      } catch (error) {\n        this.logger.error(`Failed to sync user ${integration.userId} after webhook`, error);\n      }\n    }\n  }\n\n  /**\n   * Handle insights changes from webhook\n   */\n  private async handleInsightsChange(adAccountId: string, changeValue: any): Promise<void> {\n    this.logger.log(`Processing insights change for ad account ${adAccountId}`);\n    // Similar to campaign change handling\n  }\n\n  /**\n   * Scheduled sync job - runs every 15 minutes\n   */\n  @Cron(CronExpression.EVERY_15_MINUTES)\n  async scheduledSync(): Promise<void> {\n    this.logger.log('Starting scheduled Meta Ads sync');\n\n    const integrations = await this.prisma.integration.findMany({\n      where: {\n        provider: 'META_ADS',\n        isActive: true,\n      },\n    });\n\n    for (const integration of integrations) {\n      try {\n        await this.syncUserData(integration.userId);\n      } catch (error) {\n        this.logger.error(`Scheduled sync failed for user ${integration.userId}`, error);\n      }\n    }\n\n    this.logger.log('Scheduled Meta Ads sync completed');\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Retry mechanism for API calls\n   */\n  private async retryApiCall<T>(\n    apiCall: () => Promise<T>,\n    retries: number = this.maxRetries\n  ): Promise<T> {\n    try {\n      return await apiCall();\n    } catch (error) {\n      if (retries > 0 && error.response?.status >= 500) {\n        this.logger.warn(`API call failed, retrying... (${retries} retries left)`);\n        await this.delay(this.retryDelay);\n        return this.retryApiCall(apiCall, retries - 1);\n      }\n      throw error;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c40dc42b50e49575c3def1b3cd7c6e6069920f65"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1aay3nzpso = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1aay3nzpso();
var __decorate =
/* istanbul ignore next */
(cov_1aay3nzpso().s[0]++,
/* istanbul ignore next */
(cov_1aay3nzpso().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1aay3nzpso().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_1aay3nzpso().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_1aay3nzpso().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_1aay3nzpso().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_1aay3nzpso().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1aay3nzpso().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_1aay3nzpso().b[3][0]++;
    cov_1aay3nzpso().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_1aay3nzpso().b[3][1]++;
    cov_1aay3nzpso().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_1aay3nzpso().b[5][0]++;
        cov_1aay3nzpso().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_1aay3nzpso().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_1aay3nzpso().s[9]++;
  return /* istanbul ignore next */(cov_1aay3nzpso().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_1aay3nzpso().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_1aay3nzpso().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_1aay3nzpso().s[10]++,
/* istanbul ignore next */
(cov_1aay3nzpso().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1aay3nzpso().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_1aay3nzpso().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_1aay3nzpso().f[1]++;
  cov_1aay3nzpso().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_1aay3nzpso().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1aay3nzpso().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_1aay3nzpso().b[11][0]++;
    cov_1aay3nzpso().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_1aay3nzpso().b[11][1]++;
  }
}));
var MetaAdsService_1;
var _a, _b, _c, _d;
import { Injectable, Logger, BadRequestException, UnauthorizedException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from '../database/prisma.service';
import { CryptoService } from './crypto.service';
import axios from 'axios';
import { Cron, CronExpression } from '@nestjs/schedule';
let MetaAdsService =
/* istanbul ignore next */
(cov_1aay3nzpso().s[13]++, MetaAdsService_1 = class MetaAdsService {
  configService;
  prisma;
  cryptoService;
  logger =
  /* istanbul ignore next */
  (cov_1aay3nzpso().s[14]++, new Logger(MetaAdsService_1.name));
  apiClient;
  baseUrl =
  /* istanbul ignore next */
  (cov_1aay3nzpso().s[15]++, 'https://graph.facebook.com/v18.0');
  maxRetries =
  /* istanbul ignore next */
  (cov_1aay3nzpso().s[16]++, 3);
  retryDelay =
  /* istanbul ignore next */
  (cov_1aay3nzpso().s[17]++, 1000); // 1 second
  constructor(configService, prisma, cryptoService) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[2]++;
    cov_1aay3nzpso().s[18]++;
    this.configService = configService;
    /* istanbul ignore next */
    cov_1aay3nzpso().s[19]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_1aay3nzpso().s[20]++;
    this.cryptoService = cryptoService;
    /* istanbul ignore next */
    cov_1aay3nzpso().s[21]++;
    this.apiClient = axios.create({
      baseURL: this.baseUrl,
      timeout: 30000
    });
    // Add request interceptor for rate limiting
    /* istanbul ignore next */
    cov_1aay3nzpso().s[22]++;
    this.apiClient.interceptors.request.use(config => {
      /* istanbul ignore next */
      cov_1aay3nzpso().f[3]++;
      cov_1aay3nzpso().s[23]++;
      this.logger.debug(`Making request to: ${config.url}`);
      /* istanbul ignore next */
      cov_1aay3nzpso().s[24]++;
      return config;
    }, error => {
      /* istanbul ignore next */
      cov_1aay3nzpso().f[4]++;
      cov_1aay3nzpso().s[25]++;
      return Promise.reject(error);
    });
    // Add response interceptor for error handling and retries
    /* istanbul ignore next */
    cov_1aay3nzpso().s[26]++;
    this.apiClient.interceptors.response.use(response => {
      /* istanbul ignore next */
      cov_1aay3nzpso().f[5]++;
      cov_1aay3nzpso().s[27]++;
      return response;
    }, async error => {
      /* istanbul ignore next */
      cov_1aay3nzpso().f[6]++;
      const {
        config,
        response
      } =
      /* istanbul ignore next */
      (cov_1aay3nzpso().s[28]++, error);
      // Handle rate limiting (HTTP 429)
      /* istanbul ignore next */
      cov_1aay3nzpso().s[29]++;
      if (response?.status === 429) {
        /* istanbul ignore next */
        cov_1aay3nzpso().b[13][0]++;
        const retryAfter =
        /* istanbul ignore next */
        (cov_1aay3nzpso().s[30]++, parseInt(
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[14][0]++, response.headers['retry-after']) ||
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[14][1]++, '60'), 10));
        /* istanbul ignore next */
        cov_1aay3nzpso().s[31]++;
        this.logger.warn(`Rate limited. Retrying after ${retryAfter} seconds`);
        /* istanbul ignore next */
        cov_1aay3nzpso().s[32]++;
        await this.delay(retryAfter * 1000);
        /* istanbul ignore next */
        cov_1aay3nzpso().s[33]++;
        return this.apiClient.request(config);
      } else
      /* istanbul ignore next */
      {
        cov_1aay3nzpso().b[13][1]++;
      }
      // Handle token expiration (HTTP 401)
      cov_1aay3nzpso().s[34]++;
      if (response?.status === 401) {
        /* istanbul ignore next */
        cov_1aay3nzpso().b[15][0]++;
        cov_1aay3nzpso().s[35]++;
        this.logger.warn('Access token expired, attempting refresh');
        // Token refresh logic will be handled by the calling method
      } else
      /* istanbul ignore next */
      {
        cov_1aay3nzpso().b[15][1]++;
      }
      cov_1aay3nzpso().s[36]++;
      return Promise.reject(error);
    });
  }
  /**
   * Generate OAuth authorization URL
   */
  generateAuthUrl(userId, redirectUri) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[7]++;
    const clientId =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[37]++, this.configService.get('META_APP_ID'));
    const scope =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[38]++, 'ads_read,ads_management,business_management');
    const state =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[39]++, this.cryptoService.encrypt(JSON.stringify({
      userId,
      timestamp: Date.now()
    })));
    const params =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[40]++, new URLSearchParams({
      client_id: clientId,
      redirect_uri: redirectUri,
      scope,
      response_type: 'code',
      state
    }));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[41]++;
    return `https://www.facebook.com/v18.0/dialog/oauth?${params.toString()}`;
  }
  /**
   * Exchange authorization code for access token
   */
  async exchangeCodeForToken(code, redirectUri) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[8]++;
    const clientId =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[42]++, this.configService.get('META_APP_ID'));
    const clientSecret =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[43]++, this.configService.get('META_APP_SECRET'));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[44]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1aay3nzpso().s[45]++, await this.apiClient.post('/oauth/access_token', null, {
        params: {
          client_id: clientId,
          client_secret: clientSecret,
          redirect_uri: redirectUri,
          code
        }
      }));
      /* istanbul ignore next */
      cov_1aay3nzpso().s[46]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[47]++;
      this.logger.error('Failed to exchange code for token', error.response?.data);
      /* istanbul ignore next */
      cov_1aay3nzpso().s[48]++;
      throw new BadRequestException('Failed to obtain access token');
    }
  }
  /**
   * Get long-lived access token
   */
  async getLongLivedToken(shortLivedToken) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[9]++;
    const clientId =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[49]++, this.configService.get('META_APP_ID'));
    const clientSecret =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[50]++, this.configService.get('META_APP_SECRET'));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[51]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1aay3nzpso().s[52]++, await this.apiClient.get('/oauth/access_token', {
        params: {
          grant_type: 'fb_exchange_token',
          client_id: clientId,
          client_secret: clientSecret,
          fb_exchange_token: shortLivedToken
        }
      }));
      /* istanbul ignore next */
      cov_1aay3nzpso().s[53]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[54]++;
      this.logger.error('Failed to get long-lived token', error.response?.data);
      /* istanbul ignore next */
      cov_1aay3nzpso().s[55]++;
      throw new BadRequestException('Failed to obtain long-lived token');
    }
  }
  /**
   * Store encrypted tokens in database
   */
  async storeTokens(userId, tokens) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[10]++;
    const encryptedAccessToken =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[56]++, this.cryptoService.encrypt(tokens.access_token));
    const encryptedRefreshToken =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[57]++, tokens.refresh_token ?
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[16][0]++, this.cryptoService.encrypt(tokens.refresh_token)) :
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[16][1]++, null));
    const expiresAt =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[58]++, new Date(Date.now() + tokens.expires_in * 1000));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[59]++;
    await this.prisma.integration.upsert({
      where: {
        userId_provider: {
          userId,
          provider: 'META_ADS'
        }
      },
      update: {
        accessToken: encryptedAccessToken,
        refreshToken: encryptedRefreshToken,
        expiresAt,
        isActive: true,
        lastSyncAt: new Date()
      },
      create: {
        userId,
        provider: 'META_ADS',
        accessToken: encryptedAccessToken,
        refreshToken: encryptedRefreshToken,
        expiresAt,
        isActive: true,
        lastSyncAt: new Date()
      }
    });
  }
  /**
   * Get decrypted access token for user
   */
  async getAccessToken(userId) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[11]++;
    const integration =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[60]++, await this.prisma.integration.findUnique({
      where: {
        userId_provider: {
          userId,
          provider: 'META_ADS'
        }
      }
    }));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[61]++;
    if (
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[18][0]++, !integration) ||
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[18][1]++, !integration.isActive)) {
      /* istanbul ignore next */
      cov_1aay3nzpso().b[17][0]++;
      cov_1aay3nzpso().s[62]++;
      throw new UnauthorizedException('Meta Ads integration not found or inactive');
    } else
    /* istanbul ignore next */
    {
      cov_1aay3nzpso().b[17][1]++;
    }
    // Check if token is expired
    cov_1aay3nzpso().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[20][0]++, integration.expiresAt) &&
    /* istanbul ignore next */
    (cov_1aay3nzpso().b[20][1]++, integration.expiresAt < new Date())) {
      /* istanbul ignore next */
      cov_1aay3nzpso().b[19][0]++;
      cov_1aay3nzpso().s[64]++;
      this.logger.warn(`Access token expired for user ${userId}`);
      // In a real implementation, you would refresh the token here
      /* istanbul ignore next */
      cov_1aay3nzpso().s[65]++;
      throw new UnauthorizedException('Access token expired');
    } else
    /* istanbul ignore next */
    {
      cov_1aay3nzpso().b[19][1]++;
    }
    cov_1aay3nzpso().s[66]++;
    return this.cryptoService.decrypt(integration.accessToken);
  }
  /**
   * Get user's ad accounts
   */
  async getAdAccounts(userId) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[12]++;
    const accessToken =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[67]++, await this.getAccessToken(userId));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[68]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1aay3nzpso().s[69]++, await this.apiClient.get('/me/adaccounts', {
        params: {
          access_token: accessToken,
          fields: 'id,name,account_status,currency,timezone_name,business{id,name}'
        }
      }));
      /* istanbul ignore next */
      cov_1aay3nzpso().s[70]++;
      return /* istanbul ignore next */(cov_1aay3nzpso().b[21][0]++, response.data.data) ||
      /* istanbul ignore next */
      (cov_1aay3nzpso().b[21][1]++, []);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[71]++;
      this.logger.error('Failed to fetch ad accounts', error.response?.data);
      /* istanbul ignore next */
      cov_1aay3nzpso().s[72]++;
      throw new BadRequestException('Failed to fetch ad accounts');
    }
  }
  /**
   * Get campaigns for an ad account
   */
  async getCampaigns(userId, adAccountId) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[13]++;
    const accessToken =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[73]++, await this.getAccessToken(userId));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[74]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1aay3nzpso().s[75]++, await this.apiClient.get(`/${adAccountId}/campaigns`, {
        params: {
          access_token: accessToken,
          fields: 'id,name,status,objective,created_time,updated_time,start_time,stop_time,daily_budget,lifetime_budget,budget_remaining',
          limit: 100
        }
      }));
      /* istanbul ignore next */
      cov_1aay3nzpso().s[76]++;
      return /* istanbul ignore next */(cov_1aay3nzpso().b[22][0]++, response.data.data) ||
      /* istanbul ignore next */
      (cov_1aay3nzpso().b[22][1]++, []);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[77]++;
      this.logger.error('Failed to fetch campaigns', error.response?.data);
      /* istanbul ignore next */
      cov_1aay3nzpso().s[78]++;
      throw new BadRequestException('Failed to fetch campaigns');
    }
  }
  /**
   * Get campaign insights (metrics)
   */
  async getCampaignInsights(userId, campaignId, dateRange) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[14]++;
    const accessToken =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[79]++, await this.getAccessToken(userId));
    const params =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[80]++, {
      access_token: accessToken,
      fields: 'impressions,clicks,spend,ctr,cpc,cpp,cpm,reach,frequency,actions,cost_per_action_type',
      level: 'campaign'
    });
    /* istanbul ignore next */
    cov_1aay3nzpso().s[81]++;
    if (dateRange) {
      /* istanbul ignore next */
      cov_1aay3nzpso().b[23][0]++;
      cov_1aay3nzpso().s[82]++;
      params.time_range = JSON.stringify({
        since: dateRange.since,
        until: dateRange.until
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aay3nzpso().b[23][1]++;
    }
    cov_1aay3nzpso().s[83]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1aay3nzpso().s[84]++, await this.apiClient.get(`/${campaignId}/insights`, {
        params
      }));
      /* istanbul ignore next */
      cov_1aay3nzpso().s[85]++;
      return /* istanbul ignore next */(cov_1aay3nzpso().b[24][0]++, response.data.data) ||
      /* istanbul ignore next */
      (cov_1aay3nzpso().b[24][1]++, []);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[86]++;
      this.logger.error('Failed to fetch campaign insights', error.response?.data);
      /* istanbul ignore next */
      cov_1aay3nzpso().s[87]++;
      throw new BadRequestException('Failed to fetch campaign insights');
    }
  }
  /**
   * Sync campaigns and metrics for a user
   */
  async syncUserData(userId) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[15]++;
    cov_1aay3nzpso().s[88]++;
    this.logger.log(`Starting sync for user ${userId}`);
    /* istanbul ignore next */
    cov_1aay3nzpso().s[89]++;
    try {
      const adAccounts =
      /* istanbul ignore next */
      (cov_1aay3nzpso().s[90]++, await this.getAdAccounts(userId));
      /* istanbul ignore next */
      cov_1aay3nzpso().s[91]++;
      for (const account of adAccounts) {
        /* istanbul ignore next */
        cov_1aay3nzpso().s[92]++;
        await this.syncAdAccountData(userId, account);
      }
      // Update last sync timestamp
      /* istanbul ignore next */
      cov_1aay3nzpso().s[93]++;
      await this.prisma.integration.update({
        where: {
          userId_provider: {
            userId,
            provider: 'META_ADS'
          }
        },
        data: {
          lastSyncAt: new Date()
        }
      });
      /* istanbul ignore next */
      cov_1aay3nzpso().s[94]++;
      this.logger.log(`Sync completed for user ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[95]++;
      this.logger.error(`Sync failed for user ${userId}`, error);
      /* istanbul ignore next */
      cov_1aay3nzpso().s[96]++;
      throw error;
    }
  }
  /**
   * Sync data for a specific ad account
   */
  async syncAdAccountData(userId, account) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[16]++;
    cov_1aay3nzpso().s[97]++;
    try {
      const campaigns =
      /* istanbul ignore next */
      (cov_1aay3nzpso().s[98]++, await this.getCampaigns(userId, account.id));
      /* istanbul ignore next */
      cov_1aay3nzpso().s[99]++;
      for (const campaign of campaigns) {
        /* istanbul ignore next */
        cov_1aay3nzpso().s[100]++;
        // Store campaign data
        await this.storeCampaignData(userId, account, campaign);
        // Get and store insights
        const insights =
        /* istanbul ignore next */
        (cov_1aay3nzpso().s[101]++, await this.getCampaignInsights(userId, campaign.id));
        /* istanbul ignore next */
        cov_1aay3nzpso().s[102]++;
        await this.storeCampaignInsights(userId, campaign.id, insights);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[103]++;
      this.logger.error(`Failed to sync ad account ${account.id}`, error);
    }
  }
  /**
   * Store campaign data in database
   */
  async storeCampaignData(userId, account, campaign) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[17]++;
    cov_1aay3nzpso().s[104]++;
    await this.prisma.campaign.upsert({
      where: {
        externalId_platform: {
          externalId: campaign.id,
          platform: 'META_ADS'
        }
      },
      update: {
        name: campaign.name,
        status: campaign.status.toUpperCase(),
        objective: campaign.objective,
        startDate: campaign.start_time ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[25][0]++, new Date(campaign.start_time)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[25][1]++, null),
        endDate: campaign.stop_time ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[26][0]++, new Date(campaign.stop_time)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[26][1]++, null),
        dailyBudget: campaign.daily_budget ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[27][0]++, parseFloat(campaign.daily_budget)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[27][1]++, null),
        totalBudget: campaign.lifetime_budget ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[28][0]++, parseFloat(campaign.lifetime_budget)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[28][1]++, null),
        updatedAt: new Date()
      },
      create: {
        userId,
        externalId: campaign.id,
        platform: 'META_ADS',
        name: campaign.name,
        status: campaign.status.toUpperCase(),
        objective: campaign.objective,
        startDate: campaign.start_time ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[29][0]++, new Date(campaign.start_time)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[29][1]++, null),
        endDate: campaign.stop_time ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[30][0]++, new Date(campaign.stop_time)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[30][1]++, null),
        dailyBudget: campaign.daily_budget ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[31][0]++, parseFloat(campaign.daily_budget)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[31][1]++, null),
        totalBudget: campaign.lifetime_budget ?
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[32][0]++, parseFloat(campaign.lifetime_budget)) :
        /* istanbul ignore next */
        (cov_1aay3nzpso().b[32][1]++, null),
        adAccountId: account.id,
        createdAt: new Date(campaign.created_time),
        updatedAt: new Date()
      }
    });
  }
  /**
   * Store campaign insights in database
   */
  async storeCampaignInsights(userId, campaignId, insights) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[18]++;
    cov_1aay3nzpso().s[105]++;
    for (const insight of insights) {
      const conversions =
      /* istanbul ignore next */
      (cov_1aay3nzpso().s[106]++,
      /* istanbul ignore next */
      (cov_1aay3nzpso().b[33][0]++, insight.actions?.find(action => {
        /* istanbul ignore next */
        cov_1aay3nzpso().f[19]++;
        cov_1aay3nzpso().s[107]++;
        return ['purchase', 'complete_registration', 'lead'].includes(action.action_type);
      })?.value) ||
      /* istanbul ignore next */
      (cov_1aay3nzpso().b[33][1]++, '0'));
      /* istanbul ignore next */
      cov_1aay3nzpso().s[108]++;
      await this.prisma.campaignMetrics.upsert({
        where: {
          campaignExternalId_date_platform: {
            campaignExternalId: campaignId,
            date: new Date(insight.date_start),
            platform: 'META_ADS'
          }
        },
        update: {
          impressions: parseInt(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[34][0]++, insight.impressions) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[34][1]++, '0')),
          clicks: parseInt(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[35][0]++, insight.clicks) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[35][1]++, '0')),
          spend: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[36][0]++, insight.spend) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[36][1]++, '0')),
          conversions: parseInt(conversions),
          ctr: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[37][0]++, insight.ctr) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[37][1]++, '0')),
          cpc: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[38][0]++, insight.cpc) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[38][1]++, '0')),
          cpm: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[39][0]++, insight.cpm) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[39][1]++, '0')),
          reach: parseInt(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[40][0]++, insight.reach) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[40][1]++, '0')),
          frequency: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[41][0]++, insight.frequency) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[41][1]++, '0')),
          updatedAt: new Date()
        },
        create: {
          campaignExternalId: campaignId,
          platform: 'META_ADS',
          date: new Date(insight.date_start),
          impressions: parseInt(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[42][0]++, insight.impressions) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[42][1]++, '0')),
          clicks: parseInt(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[43][0]++, insight.clicks) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[43][1]++, '0')),
          spend: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[44][0]++, insight.spend) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[44][1]++, '0')),
          conversions: parseInt(conversions),
          ctr: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[45][0]++, insight.ctr) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[45][1]++, '0')),
          cpc: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[46][0]++, insight.cpc) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[46][1]++, '0')),
          cpm: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[47][0]++, insight.cpm) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[47][1]++, '0')),
          reach: parseInt(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[48][0]++, insight.reach) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[48][1]++, '0')),
          frequency: parseFloat(
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[49][0]++, insight.frequency) ||
          /* istanbul ignore next */
          (cov_1aay3nzpso().b[49][1]++, '0')),
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
    }
  }
  /**
   * Verify webhook signature
   */
  verifyWebhookSignature(payload, signature) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[20]++;
    const appSecret =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[109]++, this.configService.get('META_APP_SECRET'));
    const crypto =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[110]++, require('crypto'));
    const expectedSignature =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[111]++, crypto.createHmac('sha256', appSecret).update(payload).digest('hex'));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[112]++;
    return signature === `sha256=${expectedSignature}`;
  }
  /**
   * Process webhook data
   */
  async processWebhook(entries) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[21]++;
    cov_1aay3nzpso().s[113]++;
    for (const entry of entries) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[114]++;
      for (const change of entry.changes) {
        /* istanbul ignore next */
        cov_1aay3nzpso().s[115]++;
        if (change.field === 'campaigns') {
          /* istanbul ignore next */
          cov_1aay3nzpso().b[50][0]++;
          cov_1aay3nzpso().s[116]++;
          await this.handleCampaignChange(entry.id, change.value);
        } else {
          /* istanbul ignore next */
          cov_1aay3nzpso().b[50][1]++;
          cov_1aay3nzpso().s[117]++;
          if (change.field === 'insights') {
            /* istanbul ignore next */
            cov_1aay3nzpso().b[51][0]++;
            cov_1aay3nzpso().s[118]++;
            await this.handleInsightsChange(entry.id, change.value);
          } else
          /* istanbul ignore next */
          {
            cov_1aay3nzpso().b[51][1]++;
          }
        }
      }
    }
  }
  /**
   * Handle campaign changes from webhook
   */
  async handleCampaignChange(adAccountId, changeValue) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[22]++;
    cov_1aay3nzpso().s[119]++;
    this.logger.log(`Processing campaign change for ad account ${adAccountId}`);
    // Find users with this ad account integration
    const integrations =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[120]++, await this.prisma.integration.findMany({
      where: {
        provider: 'META_ADS',
        isActive: true
      }
    }));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[121]++;
    for (const integration of integrations) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[122]++;
      try {
        /* istanbul ignore next */
        cov_1aay3nzpso().s[123]++;
        // Trigger sync for this user
        await this.syncUserData(integration.userId);
      } catch (error) {
        /* istanbul ignore next */
        cov_1aay3nzpso().s[124]++;
        this.logger.error(`Failed to sync user ${integration.userId} after webhook`, error);
      }
    }
  }
  /**
   * Handle insights changes from webhook
   */
  async handleInsightsChange(adAccountId, changeValue) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[23]++;
    cov_1aay3nzpso().s[125]++;
    this.logger.log(`Processing insights change for ad account ${adAccountId}`);
    // Similar to campaign change handling
  }
  /**
   * Scheduled sync job - runs every 15 minutes
   */
  async scheduledSync() {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[24]++;
    cov_1aay3nzpso().s[126]++;
    this.logger.log('Starting scheduled Meta Ads sync');
    const integrations =
    /* istanbul ignore next */
    (cov_1aay3nzpso().s[127]++, await this.prisma.integration.findMany({
      where: {
        provider: 'META_ADS',
        isActive: true
      }
    }));
    /* istanbul ignore next */
    cov_1aay3nzpso().s[128]++;
    for (const integration of integrations) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[129]++;
      try {
        /* istanbul ignore next */
        cov_1aay3nzpso().s[130]++;
        await this.syncUserData(integration.userId);
      } catch (error) {
        /* istanbul ignore next */
        cov_1aay3nzpso().s[131]++;
        this.logger.error(`Scheduled sync failed for user ${integration.userId}`, error);
      }
    }
    /* istanbul ignore next */
    cov_1aay3nzpso().s[132]++;
    this.logger.log('Scheduled Meta Ads sync completed');
  }
  /**
   * Utility method to add delay
   */
  delay(ms) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[25]++;
    cov_1aay3nzpso().s[133]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1aay3nzpso().f[26]++;
      cov_1aay3nzpso().s[134]++;
      return setTimeout(resolve, ms);
    });
  }
  /**
   * Retry mechanism for API calls
   */
  async retryApiCall(apiCall, retries =
  /* istanbul ignore next */
  (cov_1aay3nzpso().b[52][0]++, this.maxRetries)) {
    /* istanbul ignore next */
    cov_1aay3nzpso().f[27]++;
    cov_1aay3nzpso().s[135]++;
    try {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[136]++;
      return await apiCall();
    } catch (error) {
      /* istanbul ignore next */
      cov_1aay3nzpso().s[137]++;
      if (
      /* istanbul ignore next */
      (cov_1aay3nzpso().b[54][0]++, retries > 0) &&
      /* istanbul ignore next */
      (cov_1aay3nzpso().b[54][1]++, error.response?.status >= 500)) {
        /* istanbul ignore next */
        cov_1aay3nzpso().b[53][0]++;
        cov_1aay3nzpso().s[138]++;
        this.logger.warn(`API call failed, retrying... (${retries} retries left)`);
        /* istanbul ignore next */
        cov_1aay3nzpso().s[139]++;
        await this.delay(this.retryDelay);
        /* istanbul ignore next */
        cov_1aay3nzpso().s[140]++;
        return this.retryApiCall(apiCall, retries - 1);
      } else
      /* istanbul ignore next */
      {
        cov_1aay3nzpso().b[53][1]++;
      }
      cov_1aay3nzpso().s[141]++;
      throw error;
    }
  }
});
/* istanbul ignore next */
cov_1aay3nzpso().s[142]++;
__decorate([Cron(CronExpression.EVERY_15_MINUTES), __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", typeof (_d =
/* istanbul ignore next */
(cov_1aay3nzpso().b[56][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1aay3nzpso().b[56][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1aay3nzpso().b[55][0]++, _d) :
/* istanbul ignore next */
(cov_1aay3nzpso().b[55][1]++, Object))], MetaAdsService.prototype, "scheduledSync", null);
/* istanbul ignore next */
cov_1aay3nzpso().s[143]++;
MetaAdsService = MetaAdsService_1 = __decorate([Injectable(), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_1aay3nzpso().b[58][0]++, typeof ConfigService !== "undefined") &&
/* istanbul ignore next */
(cov_1aay3nzpso().b[58][1]++, ConfigService)) === "function" ?
/* istanbul ignore next */
(cov_1aay3nzpso().b[57][0]++, _a) :
/* istanbul ignore next */
(cov_1aay3nzpso().b[57][1]++, Object), typeof (_b =
/* istanbul ignore next */
(cov_1aay3nzpso().b[60][0]++, typeof PrismaService !== "undefined") &&
/* istanbul ignore next */
(cov_1aay3nzpso().b[60][1]++, PrismaService)) === "function" ?
/* istanbul ignore next */
(cov_1aay3nzpso().b[59][0]++, _b) :
/* istanbul ignore next */
(cov_1aay3nzpso().b[59][1]++, Object), typeof (_c =
/* istanbul ignore next */
(cov_1aay3nzpso().b[62][0]++, typeof CryptoService !== "undefined") &&
/* istanbul ignore next */
(cov_1aay3nzpso().b[62][1]++, CryptoService)) === "function" ?
/* istanbul ignore next */
(cov_1aay3nzpso().b[61][0]++, _c) :
/* istanbul ignore next */
(cov_1aay3nzpso().b[61][1]++, Object)])], MetaAdsService);
export { MetaAdsService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,