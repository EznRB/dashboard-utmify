{"version":3,"names":["cov_1aay3nzpso","actualCoverage","Injectable","Logger","BadRequestException","UnauthorizedException","ConfigService","PrismaService","CryptoService","axios","Cron","CronExpression","MetaAdsService","s","MetaAdsService_1","configService","prisma","cryptoService","logger","name","apiClient","baseUrl","maxRetries","retryDelay","constructor","f","create","baseURL","timeout","interceptors","request","use","config","debug","url","error","Promise","reject","response","status","b","retryAfter","parseInt","headers","warn","delay","generateAuthUrl","userId","redirectUri","clientId","get","scope","state","encrypt","JSON","stringify","timestamp","Date","now","params","URLSearchParams","client_id","redirect_uri","response_type","toString","exchangeCodeForToken","code","clientSecret","post","client_secret","data","getLongLivedToken","shortLivedToken","grant_type","fb_exchange_token","storeTokens","tokens","encryptedAccessToken","access_token","encryptedRefreshToken","refresh_token","expiresAt","expires_in","integration","upsert","where","userId_provider","provider","update","accessToken","refreshToken","isActive","lastSyncAt","getAccessToken","findUnique","decrypt","getAdAccounts","fields","getCampaigns","adAccountId","limit","getCampaignInsights","campaignId","dateRange","level","time_range","since","until","syncUserData","log","adAccounts","account","syncAdAccountData","campaigns","id","campaign","storeCampaignData","insights","storeCampaignInsights","externalId_platform","externalId","platform","toUpperCase","objective","startDate","start_time","endDate","stop_time","dailyBudget","daily_budget","parseFloat","totalBudget","lifetime_budget","updatedAt","createdAt","created_time","insight","conversions","actions","find","action","includes","action_type","value","campaignMetrics","campaignExternalId_date_platform","campaignExternalId","date","date_start","impressions","clicks","spend","ctr","cpc","cpm","reach","frequency","verifyWebhookSignature","payload","signature","appSecret","crypto","require","expectedSignature","createHmac","digest","processWebhook","entries","entry","change","changes","field","handleCampaignChange","handleInsightsChange","changeValue","integrations","findMany","scheduledSync","ms","resolve","setTimeout","retryApiCall","apiCall","retries","__decorate","EVERY_15_MINUTES","_d","Object","_a","_b","_c"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\meta-ads.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../database/prisma.service';\nimport { CryptoService } from './crypto.service';\nimport axios, { AxiosInstance } from 'axios';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\ninterface MetaOAuthTokens {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  refresh_token?: string;\n}\n\ninterface MetaAdAccount {\n  id: string;\n  name: string;\n  account_status: number;\n  currency: string;\n  timezone_name: string;\n  business?: {\n    id: string;\n    name: string;\n  };\n}\n\ninterface MetaCampaign {\n  id: string;\n  name: string;\n  status: string;\n  objective: string;\n  created_time: string;\n  updated_time: string;\n  start_time?: string;\n  stop_time?: string;\n  daily_budget?: string;\n  lifetime_budget?: string;\n  budget_remaining?: string;\n  account_id: string;\n}\n\ninterface MetaCampaignInsights {\n  campaign_id: string;\n  impressions: string;\n  clicks: string;\n  spend: string;\n  ctr: string;\n  cpc: string;\n  cpp: string;\n  cpm: string;\n  reach: string;\n  frequency: string;\n  actions?: Array<{\n    action_type: string;\n    value: string;\n  }>;\n  cost_per_action_type?: Array<{\n    action_type: string;\n    value: string;\n  }>;\n  date_start: string;\n  date_stop: string;\n}\n\ninterface WebhookEntry {\n  id: string;\n  time: number;\n  changes: Array<{\n    field: string;\n    value: any;\n  }>;\n}\n\n@Injectable()\nexport class MetaAdsService {\n  private readonly logger = new Logger(MetaAdsService.name);\n  private readonly apiClient: AxiosInstance;\n  private readonly baseUrl = 'https://graph.facebook.com/v18.0';\n  private readonly maxRetries = 3;\n  private readonly retryDelay = 1000; // 1 second\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly prisma: PrismaService,\n    private readonly cryptoService: CryptoService,\n  ) {\n    this.apiClient = axios.create({\n      baseURL: this.baseUrl,\n      timeout: 30000,\n    });\n\n    // Add request interceptor for rate limiting\n    this.apiClient.interceptors.request.use(\n      (config) => {\n        this.logger.debug(`Making request to: ${config.url}`);\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Add response interceptor for error handling and retries\n    this.apiClient.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const { config, response } = error;\n        \n        // Handle rate limiting (HTTP 429)\n        if (response?.status === 429) {\n          const retryAfter = parseInt(response.headers['retry-after'] || '60', 10);\n          this.logger.warn(`Rate limited. Retrying after ${retryAfter} seconds`);\n          \n          await this.delay(retryAfter * 1000);\n          return this.apiClient.request(config);\n        }\n\n        // Handle token expiration (HTTP 401)\n        if (response?.status === 401) {\n          this.logger.warn('Access token expired, attempting refresh');\n          // Token refresh logic will be handled by the calling method\n        }\n\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   * Generate OAuth authorization URL\n   */\n  generateAuthUrl(userId: string, redirectUri: string): string {\n    const clientId = this.configService.get<string>('META_APP_ID');\n    const scope = 'ads_read,ads_management,business_management';\n    const state = this.cryptoService.encrypt(JSON.stringify({ userId, timestamp: Date.now() }));\n\n    const params = new URLSearchParams({\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      scope,\n      response_type: 'code',\n      state,\n    });\n\n    return `https://www.facebook.com/v18.0/dialog/oauth?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for access token\n   */\n  async exchangeCodeForToken(code: string, redirectUri: string): Promise<MetaOAuthTokens> {\n    const clientId = this.configService.get<string>('META_APP_ID');\n    const clientSecret = this.configService.get<string>('META_APP_SECRET');\n\n    try {\n      const response = await this.apiClient.post('/oauth/access_token', null, {\n        params: {\n          client_id: clientId,\n          client_secret: clientSecret,\n          redirect_uri: redirectUri,\n          code,\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      this.logger.error('Failed to exchange code for token', error.response?.data);\n      throw new BadRequestException('Failed to obtain access token');\n    }\n  }\n\n  /**\n   * Get long-lived access token\n   */\n  async getLongLivedToken(shortLivedToken: string): Promise<MetaOAuthTokens> {\n    const clientId = this.configService.get<string>('META_APP_ID');\n    const clientSecret = this.configService.get<string>('META_APP_SECRET');\n\n    try {\n      const response = await this.apiClient.get('/oauth/access_token', {\n        params: {\n          grant_type: 'fb_exchange_token',\n          client_id: clientId,\n          client_secret: clientSecret,\n          fb_exchange_token: shortLivedToken,\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      this.logger.error('Failed to get long-lived token', error.response?.data);\n      throw new BadRequestException('Failed to obtain long-lived token');\n    }\n  }\n\n  /**\n   * Store encrypted tokens in database\n   */\n  async storeTokens(userId: string, tokens: MetaOAuthTokens): Promise<void> {\n    const encryptedAccessToken = this.cryptoService.encrypt(tokens.access_token);\n    const encryptedRefreshToken = tokens.refresh_token \n      ? this.cryptoService.encrypt(tokens.refresh_token) \n      : null;\n\n    const expiresAt = new Date(Date.now() + (tokens.expires_in * 1000));\n\n    await this.prisma.integration.upsert({\n      where: {\n        userId_provider: {\n          userId,\n          provider: 'META_ADS',\n        },\n      },\n      update: {\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSyncAt: new Date(),\n      },\n      create: {\n        userId,\n        provider: 'META_ADS',\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSyncAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Get decrypted access token for user\n   */\n  async getAccessToken(userId: string): Promise<string> {\n    const integration = await this.prisma.integration.findUnique({\n      where: {\n        userId_provider: {\n          userId,\n          provider: 'META_ADS',\n        },\n      },\n    });\n\n    if (!integration || !integration.isActive) {\n      throw new UnauthorizedException('Meta Ads integration not found or inactive');\n    }\n\n    // Check if token is expired\n    if (integration.expiresAt && integration.expiresAt < new Date()) {\n      this.logger.warn(`Access token expired for user ${userId}`);\n      // In a real implementation, you would refresh the token here\n      throw new UnauthorizedException('Access token expired');\n    }\n\n    return this.cryptoService.decrypt(integration.accessToken);\n  }\n\n  /**\n   * Get user's ad accounts\n   */\n  async getAdAccounts(userId: string): Promise<MetaAdAccount[]> {\n    const accessToken = await this.getAccessToken(userId);\n\n    try {\n      const response = await this.apiClient.get('/me/adaccounts', {\n        params: {\n          access_token: accessToken,\n          fields: 'id,name,account_status,currency,timezone_name,business{id,name}',\n        },\n      });\n\n      return response.data.data || [];\n    } catch (error) {\n      this.logger.error('Failed to fetch ad accounts', error.response?.data);\n      throw new BadRequestException('Failed to fetch ad accounts');\n    }\n  }\n\n  /**\n   * Get campaigns for an ad account\n   */\n  async getCampaigns(userId: string, adAccountId: string): Promise<MetaCampaign[]> {\n    const accessToken = await this.getAccessToken(userId);\n\n    try {\n      const response = await this.apiClient.get(`/${adAccountId}/campaigns`, {\n        params: {\n          access_token: accessToken,\n          fields: 'id,name,status,objective,created_time,updated_time,start_time,stop_time,daily_budget,lifetime_budget,budget_remaining',\n          limit: 100,\n        },\n      });\n\n      return response.data.data || [];\n    } catch (error) {\n      this.logger.error('Failed to fetch campaigns', error.response?.data);\n      throw new BadRequestException('Failed to fetch campaigns');\n    }\n  }\n\n  /**\n   * Get campaign insights (metrics)\n   */\n  async getCampaignInsights(\n    userId: string,\n    campaignId: string,\n    dateRange?: { since: string; until: string }\n  ): Promise<MetaCampaignInsights[]> {\n    const accessToken = await this.getAccessToken(userId);\n\n    const params: any = {\n      access_token: accessToken,\n      fields: 'impressions,clicks,spend,ctr,cpc,cpp,cpm,reach,frequency,actions,cost_per_action_type',\n      level: 'campaign',\n    };\n\n    if (dateRange) {\n      params.time_range = JSON.stringify({\n        since: dateRange.since,\n        until: dateRange.until,\n      });\n    }\n\n    try {\n      const response = await this.apiClient.get(`/${campaignId}/insights`, {\n        params,\n      });\n\n      return response.data.data || [];\n    } catch (error) {\n      this.logger.error('Failed to fetch campaign insights', error.response?.data);\n      throw new BadRequestException('Failed to fetch campaign insights');\n    }\n  }\n\n  /**\n   * Sync campaigns and metrics for a user\n   */\n  async syncUserData(userId: string): Promise<void> {\n    this.logger.log(`Starting sync for user ${userId}`);\n\n    try {\n      const adAccounts = await this.getAdAccounts(userId);\n      \n      for (const account of adAccounts) {\n        await this.syncAdAccountData(userId, account);\n      }\n\n      // Update last sync timestamp\n      await this.prisma.integration.update({\n        where: {\n          userId_provider: {\n            userId,\n            provider: 'META_ADS',\n          },\n        },\n        data: {\n          lastSyncAt: new Date(),\n        },\n      });\n\n      this.logger.log(`Sync completed for user ${userId}`);\n    } catch (error) {\n      this.logger.error(`Sync failed for user ${userId}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sync data for a specific ad account\n   */\n  private async syncAdAccountData(userId: string, account: MetaAdAccount): Promise<void> {\n    try {\n      const campaigns = await this.getCampaigns(userId, account.id);\n      \n      for (const campaign of campaigns) {\n        // Store campaign data\n        await this.storeCampaignData(userId, account, campaign);\n        \n        // Get and store insights\n        const insights = await this.getCampaignInsights(userId, campaign.id);\n        await this.storeCampaignInsights(userId, campaign.id, insights);\n      }\n    } catch (error) {\n      this.logger.error(`Failed to sync ad account ${account.id}`, error);\n    }\n  }\n\n  /**\n   * Store campaign data in database\n   */\n  private async storeCampaignData(\n    userId: string,\n    account: MetaAdAccount,\n    campaign: MetaCampaign\n  ): Promise<void> {\n    await this.prisma.campaign.upsert({\n      where: {\n        externalId_platform: {\n          externalId: campaign.id,\n          platform: 'META_ADS',\n        },\n      },\n      update: {\n        name: campaign.name,\n        status: campaign.status.toUpperCase(),\n        objective: campaign.objective,\n        startDate: campaign.start_time ? new Date(campaign.start_time) : null,\n        endDate: campaign.stop_time ? new Date(campaign.stop_time) : null,\n        dailyBudget: campaign.daily_budget ? parseFloat(campaign.daily_budget) : null,\n        totalBudget: campaign.lifetime_budget ? parseFloat(campaign.lifetime_budget) : null,\n        updatedAt: new Date(),\n      },\n      create: {\n        userId,\n        externalId: campaign.id,\n        platform: 'META_ADS',\n        name: campaign.name,\n        status: campaign.status.toUpperCase(),\n        objective: campaign.objective,\n        startDate: campaign.start_time ? new Date(campaign.start_time) : null,\n        endDate: campaign.stop_time ? new Date(campaign.stop_time) : null,\n        dailyBudget: campaign.daily_budget ? parseFloat(campaign.daily_budget) : null,\n        totalBudget: campaign.lifetime_budget ? parseFloat(campaign.lifetime_budget) : null,\n        adAccountId: account.id,\n        createdAt: new Date(campaign.created_time),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store campaign insights in database\n   */\n  private async storeCampaignInsights(\n    userId: string,\n    campaignId: string,\n    insights: MetaCampaignInsights[]\n  ): Promise<void> {\n    for (const insight of insights) {\n      const conversions = insight.actions?.find(action => \n        ['purchase', 'complete_registration', 'lead'].includes(action.action_type)\n      )?.value || '0';\n\n      await this.prisma.campaignMetrics.upsert({\n        where: {\n          campaignExternalId_date_platform: {\n            campaignExternalId: campaignId,\n            date: new Date(insight.date_start),\n            platform: 'META_ADS',\n          },\n        },\n        update: {\n          impressions: parseInt(insight.impressions || '0'),\n          clicks: parseInt(insight.clicks || '0'),\n          spend: parseFloat(insight.spend || '0'),\n          conversions: parseInt(conversions),\n          ctr: parseFloat(insight.ctr || '0'),\n          cpc: parseFloat(insight.cpc || '0'),\n          cpm: parseFloat(insight.cpm || '0'),\n          reach: parseInt(insight.reach || '0'),\n          frequency: parseFloat(insight.frequency || '0'),\n          updatedAt: new Date(),\n        },\n        create: {\n          campaignExternalId: campaignId,\n          platform: 'META_ADS',\n          date: new Date(insight.date_start),\n          impressions: parseInt(insight.impressions || '0'),\n          clicks: parseInt(insight.clicks || '0'),\n          spend: parseFloat(insight.spend || '0'),\n          conversions: parseInt(conversions),\n          ctr: parseFloat(insight.ctr || '0'),\n          cpc: parseFloat(insight.cpc || '0'),\n          cpm: parseFloat(insight.cpm || '0'),\n          reach: parseInt(insight.reach || '0'),\n          frequency: parseFloat(insight.frequency || '0'),\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n      });\n    }\n  }\n\n  /**\n   * Verify webhook signature\n   */\n  verifyWebhookSignature(payload: string, signature: string): boolean {\n    const appSecret = this.configService.get<string>('META_APP_SECRET');\n    const crypto = require('crypto');\n    \n    const expectedSignature = crypto\n      .createHmac('sha256', appSecret)\n      .update(payload)\n      .digest('hex');\n    \n    return signature === `sha256=${expectedSignature}`;\n  }\n\n  /**\n   * Process webhook data\n   */\n  async processWebhook(entries: WebhookEntry[]): Promise<void> {\n    for (const entry of entries) {\n      for (const change of entry.changes) {\n        if (change.field === 'campaigns') {\n          await this.handleCampaignChange(entry.id, change.value);\n        } else if (change.field === 'insights') {\n          await this.handleInsightsChange(entry.id, change.value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle campaign changes from webhook\n   */\n  private async handleCampaignChange(adAccountId: string, changeValue: any): Promise<void> {\n    this.logger.log(`Processing campaign change for ad account ${adAccountId}`);\n    \n    // Find users with this ad account integration\n    const integrations = await this.prisma.integration.findMany({\n      where: {\n        provider: 'META_ADS',\n        isActive: true,\n      },\n    });\n\n    for (const integration of integrations) {\n      try {\n        // Trigger sync for this user\n        await this.syncUserData(integration.userId);\n      } catch (error) {\n        this.logger.error(`Failed to sync user ${integration.userId} after webhook`, error);\n      }\n    }\n  }\n\n  /**\n   * Handle insights changes from webhook\n   */\n  private async handleInsightsChange(adAccountId: string, changeValue: any): Promise<void> {\n    this.logger.log(`Processing insights change for ad account ${adAccountId}`);\n    // Similar to campaign change handling\n  }\n\n  /**\n   * Scheduled sync job - runs every 15 minutes\n   */\n  @Cron(CronExpression.EVERY_15_MINUTES)\n  async scheduledSync(): Promise<void> {\n    this.logger.log('Starting scheduled Meta Ads sync');\n\n    const integrations = await this.prisma.integration.findMany({\n      where: {\n        provider: 'META_ADS',\n        isActive: true,\n      },\n    });\n\n    for (const integration of integrations) {\n      try {\n        await this.syncUserData(integration.userId);\n      } catch (error) {\n        this.logger.error(`Scheduled sync failed for user ${integration.userId}`, error);\n      }\n    }\n\n    this.logger.log('Scheduled Meta Ads sync completed');\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Retry mechanism for API calls\n   */\n  private async retryApiCall<T>(\n    apiCall: () => Promise<T>,\n    retries: number = this.maxRetries\n  ): Promise<T> {\n    try {\n      return await apiCall();\n    } catch (error) {\n      if (retries > 0 && error.response?.status >= 500) {\n        this.logger.warn(`API call failed, retrying... (${retries} retries left)`);\n        await this.delay(this.retryDelay);\n        return this.retryApiCall(apiCall, retries - 1);\n      }\n      throw error;\n    }\n  }\n}"],"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","ignoreList":[]}