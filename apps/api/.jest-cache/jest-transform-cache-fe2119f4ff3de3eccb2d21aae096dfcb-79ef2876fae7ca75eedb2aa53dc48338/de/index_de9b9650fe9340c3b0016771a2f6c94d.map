{"version":3,"names":["cov_1e8a0gbxo4","actualCoverage","Fastify","gracefulShutdown","logger","registerPlugins","registerRoutes","errorHandler","notFoundHandler","config","app","s","trustProxy","requestIdLogLabel","requestIdHeader","addHook","request","f","info","method","url","headers","ip","setErrorHandler","setNotFoundHandler","start","address","listen","port","PORT","host","HOST","NODE_ENV","DATABASE_URL","b","REDIS_URL","error","process","exit","on","reason","promise","stack","Error","message","String","console"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\index.ts"],"sourcesContent":["import 'dotenv/config'\nimport Fastify from 'fastify'\nimport { gracefulShutdown } from './utils/graceful-shutdown'\nimport { logger } from './utils/logger'\nimport { registerPlugins } from './config/plugins'\nimport { registerRoutes } from './routes'\nimport { errorHandler, notFoundHandler } from './utils/errors'\nimport { config } from './config/env'\nimport { getWorkerManager } from './workers'\nimport { getJobManager } from './jobs'\nimport { getQueueManager } from './queue'\n\n// Create Fastify instance\nconst app = Fastify({\n  logger: false, // We use our custom logger\n  trustProxy: true,\n  requestIdLogLabel: 'requestId',\n  requestIdHeader: 'x-request-id',\n})\n\n// Add request logging\napp.addHook('onRequest', async (request) => {\n  logger.info({\n    request: {\n      method: request.method,\n      url: request.url,\n      headers: request.headers,\n      ip: request.ip,\n    },\n  }, 'Incoming request')\n})\n\n// Global error handler\napp.setErrorHandler(errorHandler)\n\n// 404 handler\napp.setNotFoundHandler(notFoundHandler)\n\n// Start server\nconst start = async () => {\n  // Register plugins\n  await registerPlugins(app)\n\n  // Register routes\n  await registerRoutes(app)\n  try {\n    // TEMPORARILY DISABLED - Initialize workers\n    // const workerManager = getWorkerManager(app.db)\n    // await workerManager.start()\n    // logger.info('Workers initialized successfully')\n    \n    // TEMPORARILY DISABLED - Initialize scheduled jobs\n    // const jobManager = getJobManager(app.db)\n    // await jobManager.start()\n    // logger.info('Scheduled jobs initialized successfully')\n    \n    // TEMPORARILY DISABLED - Initialize queue system\n    // const queueManager = getQueueManager(app.db)\n    // await queueManager.initialize()\n    // logger.info('Queue system initialized successfully')\n    \n    const address = await app.listen({\n      port: config.PORT,\n      host: config.HOST,\n    })\n    \n    logger.info(`Server listening on ${address}`)\n    logger.info(`Environment: ${config.NODE_ENV}`)\n    logger.info(`Database URL: ${config.DATABASE_URL ? 'Connected' : 'Not configured'}`)\n    logger.info(`Redis URL: ${config.REDIS_URL ? 'Connected' : 'Not configured'}`)\n  } catch (error) {\n    logger.error(error, 'Error starting server')\n    process.exit(1)\n  }\n}\n\n// Setup graceful shutdown\ngracefulShutdown(app)\n\n// Handle unhandled promise rejections - TEMPORARILY NOT EXITING FOR DEBUGGING\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error({\n    reason,\n    promise,\n    stack: reason instanceof Error ? reason.stack : 'No stack trace available',\n    message: reason instanceof Error ? reason.message : String(reason)\n  }, 'Unhandled promise rejection - NOT EXITING FOR DEBUGGING')\n  console.error('UNHANDLED REJECTION DETAILS:')\n  console.error('Reason:', reason)\n  console.error('Promise:', promise)\n  if (reason instanceof Error) {\n    console.error('Stack:', reason.stack)\n  }\n  // Temporarily commented out to debug: process.exit(1)\n})\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  logger.error(error, 'Uncaught exception')\n  process.exit(1)\n})\n\n// Start the server\nstart()"],"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","ignoreList":[]}