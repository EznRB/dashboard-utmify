2533361bb842df00938cd2ca58ef2357
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock logger to avoid env import
jest.mock('../../utils/logger', () => ({
    logger: {
        info: jest.fn(),
        error: jest.fn(),
        warn: jest.fn(),
        debug: jest.fn(),
    }
}));
// Mock dependencies
jest.mock('axios');
jest.mock('google-ads-api');
jest.mock('../../database/prisma.service');
jest.mock('../crypto.service');
const google_ads_service_1 = require("../google-ads.service");
const google_ads_api_1 = require("google-ads-api");
const axios_1 = __importDefault(require("axios"));
const mockedAxios = axios_1.default;
const MockedGoogleAdsApi = google_ads_api_1.GoogleAdsApi;
describe('GoogleAdsService', () => {
    let service;
    let mockPrismaService;
    let mockCryptoService;
    let mockGoogleAdsClient;
    const mockUser = {
        id: 'user-1',
        email: 'test@example.com',
        organizationId: 'org-1',
    };
    const mockIntegration = {
        id: 'integration-1',
        organizationId: 'org-1',
        platform: 'google_ads',
        isActive: true,
        accessToken: 'encrypted-access-token',
        refreshToken: 'encrypted-refresh-token',
        expiresAt: new Date(Date.now() + 3600000), // 1 hour from now
        settings: {
            customerId: '123-456-7890',
            developerToken: 'test-developer-token',
        },
    };
    const mockGoogleAdsAccount = {
        customer: {
            resource_name: 'customers/1234567890',
            id: '1234567890',
            descriptive_name: 'Test Account',
            currency_code: 'USD',
            time_zone: 'America/New_York',
            status: 'ENABLED',
            type: 'STANDARD',
        },
    };
    const mockCampaign = {
        campaign: {
            resource_name: 'customers/1234567890/campaigns/987654321',
            id: '987654321',
            name: 'Test Campaign',
            status: 'ENABLED',
            advertising_channel_type: 'SEARCH',
            start_date: '2024-01-01',
            end_date: '2024-12-31',
        },
        campaign_budget: {
            amount_micros: '10000000', // $10 in micros
            delivery_method: 'STANDARD',
        },
        metrics: {
            impressions: '1000',
            clicks: '50',
            cost_micros: '5000000', // $5 in micros
            conversions: '5',
            ctr: '0.05',
            average_cpc: '100000', // $0.10 in micros
        },
    };
    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        // Mock PrismaService
        mockPrismaService = {
            integration: {
                findFirst: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn(),
                upsert: jest.fn(),
                findMany: jest.fn(),
            },
            googleAdsAccount: {
                findMany: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
            },
            googleAdsCampaign: {
                findMany: jest.fn(),
                create: jest.fn(),
                createMany: jest.fn(),
                update: jest.fn(),
                upsert: jest.fn(),
            },
            googleAdsKeyword: {
                findMany: jest.fn(),
                create: jest.fn(),
                createMany: jest.fn(),
                update: jest.fn(),
                upsert: jest.fn(),
            },
            googleAdsDailyMetrics: {
                findMany: jest.fn(),
                create: jest.fn(),
                createMany: jest.fn(),
                upsert: jest.fn(),
            },
            googleAdsSyncLog: {
                create: jest.fn(),
                findMany: jest.fn(),
            },
            campaign: {
                upsert: jest.fn(),
            },
            keyword: {
                upsert: jest.fn(),
            },
            campaignMetrics: {
                upsert: jest.fn(),
            },
            $transaction: jest.fn(),
        };
        // Mock CryptoService
        mockCryptoService = {
            encrypt: jest.fn().mockReturnValue('encrypted-token'),
            decrypt: jest.fn().mockReturnValue('decrypted-token'),
        };
        // Mock Google Ads API client
        mockGoogleAdsClient = {
            Customer: jest.fn().mockReturnValue({
                query: jest.fn(),
                listAccessibleCustomers: jest.fn(),
            }),
        };
        MockedGoogleAdsApi.mockImplementation(() => mockGoogleAdsClient);
        // Mock Google Ads config
        const mockGoogleAdsConfig = {
            clientId: 'test-client-id',
            clientSecret: 'test-client-secret',
            developerToken: 'test-developer-token',
            loginCustomerId: 'test-login-customer-id',
            scopes: ['https://www.googleapis.com/auth/adwords']
        };
        // Create service instance
        service = new google_ads_service_1.GoogleAdsService(mockPrismaService, mockCryptoService, mockGoogleAdsConfig);
    });
    describe('generateAuthUrl', () => {
        it('should generate a valid OAuth URL', async () => {
            const redirectUri = 'http://localhost:3000/callback';
            const result = await service.generateAuthUrl(mockUser, redirectUri);
            expect(result).toHaveProperty('authUrl');
            expect(result).toHaveProperty('state');
            expect(result.authUrl).toContain('accounts.google.com/oauth/authorize');
            expect(result.authUrl).toContain('client_id=test-client-id');
            expect(result.authUrl).toContain('redirect_uri=' + encodeURIComponent(redirectUri));
            expect(result.authUrl).toContain('scope=' + encodeURIComponent('https://www.googleapis.com/auth/adwords'));
        });
    });
    describe('handleCallback', () => {
        const mockTokenResponse = {
            data: {
                access_token: 'new-access-token',
                refresh_token: 'new-refresh-token',
                expires_in: 3600,
                token_type: 'Bearer',
            },
        };
        beforeEach(() => {
            mockAxios.post.mockResolvedValue(mockTokenResponse);
            mockPrismaService.integration.findFirst.mockResolvedValue(null);
            mockPrismaService.integration.create.mockResolvedValue(mockIntegration);
        });
        it('should handle OAuth callback and create integration', async () => {
            const code = 'auth-code';
            const state = 'valid-state';
            const redirectUri = 'http://localhost:3000/callback';
            const result = await service.handleCallback(mockUser, code, state, redirectUri);
            expect(mockAxios.post).toHaveBeenCalledWith('https://oauth2.googleapis.com/token', expect.objectContaining({
                client_id: 'test-client-id',
                client_secret: 'test-client-secret',
                code,
                grant_type: 'authorization_code',
                redirect_uri: redirectUri,
            }));
            expect(mockCryptoService.encrypt).toHaveBeenCalledWith('new-access-token');
            expect(mockCryptoService.encrypt).toHaveBeenCalledWith('new-refresh-token');
            expect(mockPrismaService.integration.create).toHaveBeenCalled();
            expect(result).toEqual(mockIntegration);
        });
        it('should update existing integration', async () => {
            mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration);
            mockPrismaService.integration.update.mockResolvedValue(mockIntegration);
            const code = 'auth-code';
            const state = 'valid-state';
            const redirectUri = 'http://localhost:3000/callback';
            const result = await service.handleCallback(mockUser, code, state, redirectUri);
            expect(mockPrismaService.integration.update).toHaveBeenCalled();
            expect(result).toEqual(mockIntegration);
        });
        it('should throw error for invalid authorization code', async () => {
            mockAxios.post.mockRejectedValue(new Error('Invalid authorization code'));
            await expect(service.handleCallback(mockUser, 'invalid-code', 'state', 'redirect-uri')).rejects.toThrow('Invalid authorization code');
        });
    });
    describe('getAccounts', () => {
        beforeEach(() => {
            mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration);
            mockCryptoService.decrypt.mockReturnValue('decrypted-access-token');
        });
        it('should fetch Google Ads accounts', async () => {
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockResolvedValue([mockGoogleAdsAccount]),
            });
            const result = await service.getAccounts(mockUser);
            expect(mockPrismaService.integration.findFirst).toHaveBeenCalledWith({
                where: {
                    organizationId: mockUser.organizationId,
                    platform: 'google_ads',
                    isActive: true,
                },
            });
            expect(mockCustomer.query).toHaveBeenCalled();
            expect(result).toHaveLength(1);
            expect(result[0]).toEqual({
                id: '1234567890',
                name: 'Test Account',
                currency: 'USD',
                timezone: 'America/New_York',
                status: 'ENABLED',
                type: 'STANDARD',
            });
        });
        it('should throw error when integration not found', async () => {
            mockPrismaService.integration.findFirst.mockResolvedValue(null);
            await expect(service.getAccounts(mockUser)).rejects.toThrow('Google Ads integration not found or inactive');
        });
    });
    describe('getCampaigns', () => {
        beforeEach(() => {
            mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration);
            mockCryptoService.decrypt.mockReturnValue('decrypted-access-token');
        });
        it('should fetch campaigns for a customer', async () => {
            const customerId = '1234567890';
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockResolvedValue([mockCampaign]),
            });
            const result = await service.getCampaigns(mockUser, customerId);
            expect(mockCustomer.query).toHaveBeenCalled();
            expect(result).toHaveLength(1);
            expect(result[0]).toEqual({
                id: '987654321',
                name: 'Test Campaign',
                status: 'ENABLED',
                type: 'SEARCH',
                budget_amount: 10000000,
                budget_type: 'STANDARD',
                impressions: 1000,
                clicks: 50,
                cost: 5000000,
                conversions: 5,
                customer_id: customerId,
            });
        });
        it('should handle empty campaigns result', async () => {
            const customerId = '1234567890';
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockResolvedValue([]),
            });
            const result = await service.getCampaigns(mockUser, customerId);
            expect(result).toHaveLength(0);
        });
    });
    describe('syncData', () => {
        beforeEach(() => {
            mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration);
            mockCryptoService.decrypt.mockReturnValue('decrypted-access-token');
            mockPrismaService.$transaction.mockImplementation((callback) => callback(mockPrismaService));
        });
        it('should sync campaigns and metrics data', async () => {
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockResolvedValue([mockCampaign]),
            });
            mockPrismaService.googleAdsCampaign.upsert.mockResolvedValue({});
            mockPrismaService.googleAdsDailyMetrics.upsert.mockResolvedValue({});
            const result = await service.syncData(mockUser, { force: true });
            expect(mockCustomer.query).toHaveBeenCalled();
            expect(mockPrismaService.googleAdsCampaign.upsert).toHaveBeenCalled();
            expect(mockPrismaService.googleAdsDailyMetrics.upsert).toHaveBeenCalled();
            expect(result).toEqual({
                success: true,
                message: 'Sincronização concluída com sucesso',
                stats: {
                    campaigns: 1,
                    keywords: 0,
                    metrics: 1,
                },
            });
        });
        it('should handle sync errors gracefully', async () => {
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockRejectedValue(new Error('API Error')),
            });
            await expect(service.syncData(mockUser, { force: true })).rejects.toThrow('API Error');
        });
    });
    describe('disconnect', () => {
        beforeEach(() => {
            mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration);
            mockPrismaService.integration.update.mockResolvedValue({ ...mockIntegration, isActive: false });
        });
        it('should disconnect integration', async () => {
            const result = await service.disconnect(mockUser);
            expect(mockPrismaService.integration.update).toHaveBeenCalledWith({
                where: { id: mockIntegration.id },
                data: {
                    isActive: false,
                    accessToken: null,
                    refreshToken: null,
                    expiresAt: null,
                },
            });
            expect(result).toEqual({
                success: true,
                message: 'Google Ads desconectado com sucesso',
            });
        });
        it('should throw error when integration not found', async () => {
            mockPrismaService.integration.findFirst.mockResolvedValue(null);
            await expect(service.disconnect(mockUser)).rejects.toThrow('Google Ads integration not found');
        });
    });
    describe('refreshAccessToken', () => {
        const mockRefreshResponse = {
            data: {
                access_token: 'new-access-token',
                expires_in: 3600,
                token_type: 'Bearer',
            },
        };
        beforeEach(() => {
            mockAxios.post.mockResolvedValue(mockRefreshResponse);
            mockPrismaService.integration.update.mockResolvedValue(mockIntegration);
        });
        it('should refresh access token', async () => {
            const result = await service.refreshAccessToken(mockIntegration);
            expect(mockAxios.post).toHaveBeenCalledWith('https://oauth2.googleapis.com/token', expect.objectContaining({
                client_id: 'test-client-id',
                client_secret: 'test-client-secret',
                refresh_token: 'decrypted-token',
                grant_type: 'refresh_token',
            }));
            expect(mockCryptoService.encrypt).toHaveBeenCalledWith('new-access-token');
            expect(mockPrismaService.integration.update).toHaveBeenCalled();
            expect(result).toBe('new-access-token');
        });
        it('should handle refresh token errors', async () => {
            mockAxios.post.mockRejectedValue(new Error('Invalid refresh token'));
            await expect(service.refreshAccessToken(mockIntegration)).rejects.toThrow('Invalid refresh token');
        });
    });
    describe('getIntegrationStatus', () => {
        it('should return integration status when active', async () => {
            mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration);
            const result = await service.getIntegrationStatus(mockUser);
            expect(result).toEqual({
                connected: true,
                lastSync: undefined,
                connectedAt: mockIntegration.createdAt,
                expiresAt: mockIntegration.expiresAt,
                status: 'active',
            });
        });
        it('should return disconnected status when integration not found', async () => {
            mockPrismaService.integration.findFirst.mockResolvedValue(null);
            const result = await service.getIntegrationStatus(mockUser);
            expect(result).toEqual({
                connected: false,
                status: 'not_connected',
            });
        });
        it('should return expired status when token is expired', async () => {
            const expiredIntegration = {
                ...mockIntegration,
                expiresAt: new Date(Date.now() - 3600000), // 1 hour ago
            };
            mockPrismaService.integration.findFirst.mockResolvedValue(expiredIntegration);
            const result = await service.getIntegrationStatus(mockUser);
            expect(result.status).toBe('expired');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,