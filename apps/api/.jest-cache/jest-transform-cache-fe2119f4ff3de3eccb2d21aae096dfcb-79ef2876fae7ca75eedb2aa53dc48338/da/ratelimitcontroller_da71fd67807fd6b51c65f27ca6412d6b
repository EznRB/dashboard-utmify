00e3d98abda88656a9ddd32f7fec5d29
/* istanbul ignore next */
function cov_1kta31yhxa() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\rate-limit.controller.ts";
  var hash = "d4ca4c651c4a1f3a7bd4557d95e4085387b0df05";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\rate-limit.controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "14": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 73
        }
      },
      "15": {
        start: {
          line: 11,
          column: 36
        },
        end: {
          line: 11,
          column: 71
        }
      },
      "16": {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 128,
          column: 1
        }
      },
      "17": {
        start: {
          line: 25,
          column: 13
        },
        end: {
          line: 25,
          column: 51
        }
      },
      "18": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 49
        }
      },
      "19": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "20": {
        start: {
          line: 31,
          column: 26
        },
        end: {
          line: 31,
          column: 91
        }
      },
      "21": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 93
        }
      },
      "22": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 25
        }
      },
      "23": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 90
        }
      },
      "24": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 24
        }
      },
      "25": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "26": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 106
        }
      },
      "27": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 105
        }
      },
      "28": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 25
        }
      },
      "29": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 102
        }
      },
      "30": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 24
        }
      },
      "31": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "32": {
        start: {
          line: 53,
          column: 27
        },
        end: {
          line: 53,
          column: 89
        }
      },
      "33": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 93
        }
      },
      "34": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 26
        }
      },
      "35": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 90
        }
      },
      "36": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 24
        }
      },
      "37": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "38": {
        start: {
          line: 64,
          column: 27
        },
        end: {
          line: 64,
          column: 108
        }
      },
      "39": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 141
        }
      },
      "40": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 26
        }
      },
      "41": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 103
        }
      },
      "42": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 24
        }
      },
      "43": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "44": {
        start: {
          line: 75,
          column: 27
        },
        end: {
          line: 75,
          column: 122
        }
      },
      "45": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 122
        }
      },
      "46": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 26
        }
      },
      "47": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 105
        }
      },
      "48": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 24
        }
      },
      "49": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "50": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 94
        }
      },
      "51": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 117
        }
      },
      "52": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "53": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 103
        }
      },
      "54": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 24
        }
      },
      "55": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "56": {
        start: {
          line: 101,
          column: 31
        },
        end: {
          line: 101,
          column: 116
        }
      },
      "57": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 133
        }
      },
      "58": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 107,
          column: 14
        }
      },
      "59": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 105
        }
      },
      "60": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 24
        }
      },
      "61": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "62": {
        start: {
          line: 116,
          column: 33
        },
        end: {
          line: 116,
          column: 81
        }
      },
      "63": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 103
        }
      },
      "64": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "65": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 95
        }
      },
      "66": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "67": {
        start: {
          line: 129,
          column: 0
        },
        end: {
          line: 191,
          column: 57
        }
      },
      "68": {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 225,
          column: 63
        }
      },
      "69": {
        start: {
          line: 226,
          column: 0
        },
        end: {
          line: 278,
          column: 57
        }
      },
      "70": {
        start: {
          line: 279,
          column: 0
        },
        end: {
          line: 312,
          column: 58
        }
      },
      "71": {
        start: {
          line: 313,
          column: 0
        },
        end: {
          line: 353,
          column: 60
        }
      },
      "72": {
        start: {
          line: 354,
          column: 0
        },
        end: {
          line: 386,
          column: 58
        }
      },
      "73": {
        start: {
          line: 387,
          column: 0
        },
        end: {
          line: 419,
          column: 60
        }
      },
      "74": {
        start: {
          line: 420,
          column: 0
        },
        end: {
          line: 439,
          column: 62
        }
      },
      "75": {
        start: {
          line: 440,
          column: 0
        },
        end: {
          line: 449,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 10,
            column: 41
          }
        },
        loc: {
          start: {
            line: 10,
            column: 73
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 10
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 11,
            column: 11
          },
          end: {
            line: 11,
            column: 12
          }
        },
        loc: {
          start: {
            line: 11,
            column: 34
          },
          end: {
            line: 11,
            column: 73
          }
        },
        line: 11
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 34
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 30
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 29
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 54
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 40
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 51
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 49
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 62
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 58
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 73
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 49
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 84
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 53
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 99
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 35
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 114
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 10,
            column: 14
          },
          end: {
            line: 12,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 19
          }
        }, {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 35
          }
        }, {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 10
      },
      "14": {
        loc: {
          start: {
            line: 65,
            column: 99
          },
          end: {
            line: 65,
            column: 137
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 116
          },
          end: {
            line: 65,
            column: 125
          }
        }, {
          start: {
            line: 65,
            column: 128
          },
          end: {
            line: 65,
            column: 137
          }
        }],
        line: 65
      },
      "15": {
        loc: {
          start: {
            line: 75,
            column: 111
          },
          end: {
            line: 75,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 111
          },
          end: {
            line: 75,
            column: 116
          }
        }, {
          start: {
            line: 75,
            column: 120
          },
          end: {
            line: 75,
            column: 121
          }
        }],
        line: 75
      },
      "16": {
        loc: {
          start: {
            line: 76,
            column: 102
          },
          end: {
            line: 76,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 102
          },
          end: {
            line: 76,
            column: 107
          }
        }, {
          start: {
            line: 76,
            column: 111
          },
          end: {
            line: 76,
            column: 112
          }
        }],
        line: 76
      },
      "17": {
        loc: {
          start: {
            line: 102,
            column: 95
          },
          end: {
            line: 102,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 108
          },
          end: {
            line: 102,
            column: 117
          }
        }, {
          start: {
            line: 102,
            column: 120
          },
          end: {
            line: 102,
            column: 129
          }
        }],
        line: 102
      },
      "18": {
        loc: {
          start: {
            line: 190,
            column: 36
          },
          end: {
            line: 190,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 109
          },
          end: {
            line: 190,
            column: 111
          }
        }, {
          start: {
            line: 190,
            column: 114
          },
          end: {
            line: 190,
            column: 120
          }
        }],
        line: 190
      },
      "19": {
        loc: {
          start: {
            line: 190,
            column: 49
          },
          end: {
            line: 190,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 49
          },
          end: {
            line: 190,
            column: 79
          }
        }, {
          start: {
            line: 190,
            column: 83
          },
          end: {
            line: 190,
            column: 90
          }
        }],
        line: 190
      },
      "20": {
        loc: {
          start: {
            line: 224,
            column: 36
          },
          end: {
            line: 224,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 224,
            column: 109
          },
          end: {
            line: 224,
            column: 111
          }
        }, {
          start: {
            line: 224,
            column: 114
          },
          end: {
            line: 224,
            column: 120
          }
        }],
        line: 224
      },
      "21": {
        loc: {
          start: {
            line: 224,
            column: 49
          },
          end: {
            line: 224,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 49
          },
          end: {
            line: 224,
            column: 79
          }
        }, {
          start: {
            line: 224,
            column: 83
          },
          end: {
            line: 224,
            column: 90
          }
        }],
        line: 224
      },
      "22": {
        loc: {
          start: {
            line: 277,
            column: 36
          },
          end: {
            line: 277,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 277,
            column: 109
          },
          end: {
            line: 277,
            column: 111
          }
        }, {
          start: {
            line: 277,
            column: 114
          },
          end: {
            line: 277,
            column: 120
          }
        }],
        line: 277
      },
      "23": {
        loc: {
          start: {
            line: 277,
            column: 49
          },
          end: {
            line: 277,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 49
          },
          end: {
            line: 277,
            column: 79
          }
        }, {
          start: {
            line: 277,
            column: 83
          },
          end: {
            line: 277,
            column: 90
          }
        }],
        line: 277
      },
      "24": {
        loc: {
          start: {
            line: 311,
            column: 36
          },
          end: {
            line: 311,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 311,
            column: 109
          },
          end: {
            line: 311,
            column: 111
          }
        }, {
          start: {
            line: 311,
            column: 114
          },
          end: {
            line: 311,
            column: 120
          }
        }],
        line: 311
      },
      "25": {
        loc: {
          start: {
            line: 311,
            column: 49
          },
          end: {
            line: 311,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 49
          },
          end: {
            line: 311,
            column: 79
          }
        }, {
          start: {
            line: 311,
            column: 83
          },
          end: {
            line: 311,
            column: 90
          }
        }],
        line: 311
      },
      "26": {
        loc: {
          start: {
            line: 352,
            column: 36
          },
          end: {
            line: 352,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 352,
            column: 109
          },
          end: {
            line: 352,
            column: 111
          }
        }, {
          start: {
            line: 352,
            column: 114
          },
          end: {
            line: 352,
            column: 120
          }
        }],
        line: 352
      },
      "27": {
        loc: {
          start: {
            line: 352,
            column: 49
          },
          end: {
            line: 352,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 49
          },
          end: {
            line: 352,
            column: 79
          }
        }, {
          start: {
            line: 352,
            column: 83
          },
          end: {
            line: 352,
            column: 90
          }
        }],
        line: 352
      },
      "28": {
        loc: {
          start: {
            line: 385,
            column: 36
          },
          end: {
            line: 385,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 385,
            column: 109
          },
          end: {
            line: 385,
            column: 111
          }
        }, {
          start: {
            line: 385,
            column: 114
          },
          end: {
            line: 385,
            column: 120
          }
        }],
        line: 385
      },
      "29": {
        loc: {
          start: {
            line: 385,
            column: 49
          },
          end: {
            line: 385,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 49
          },
          end: {
            line: 385,
            column: 79
          }
        }, {
          start: {
            line: 385,
            column: 83
          },
          end: {
            line: 385,
            column: 90
          }
        }],
        line: 385
      },
      "30": {
        loc: {
          start: {
            line: 418,
            column: 36
          },
          end: {
            line: 418,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 418,
            column: 109
          },
          end: {
            line: 418,
            column: 111
          }
        }, {
          start: {
            line: 418,
            column: 114
          },
          end: {
            line: 418,
            column: 120
          }
        }],
        line: 418
      },
      "31": {
        loc: {
          start: {
            line: 418,
            column: 49
          },
          end: {
            line: 418,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 418,
            column: 49
          },
          end: {
            line: 418,
            column: 79
          }
        }, {
          start: {
            line: 418,
            column: 83
          },
          end: {
            line: 418,
            column: 90
          }
        }],
        line: 418
      },
      "32": {
        loc: {
          start: {
            line: 438,
            column: 36
          },
          end: {
            line: 438,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 438,
            column: 109
          },
          end: {
            line: 438,
            column: 111
          }
        }, {
          start: {
            line: 438,
            column: 114
          },
          end: {
            line: 438,
            column: 120
          }
        }],
        line: 438
      },
      "33": {
        loc: {
          start: {
            line: 438,
            column: 49
          },
          end: {
            line: 438,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 438,
            column: 49
          },
          end: {
            line: 438,
            column: 79
          }
        }, {
          start: {
            line: 438,
            column: 83
          },
          end: {
            line: 438,
            column: 90
          }
        }],
        line: 438
      },
      "34": {
        loc: {
          start: {
            line: 448,
            column: 37
          },
          end: {
            line: 448,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 448,
            column: 140
          },
          end: {
            line: 448,
            column: 142
          }
        }, {
          start: {
            line: 448,
            column: 145
          },
          end: {
            line: 448,
            column: 151
          }
        }],
        line: 448
      },
      "35": {
        loc: {
          start: {
            line: 448,
            column: 50
          },
          end: {
            line: 448,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 448,
            column: 50
          },
          end: {
            line: 448,
            column: 95
          }
        }, {
          start: {
            line: 448,
            column: 99
          },
          end: {
            line: 448,
            column: 121
          }
        }],
        line: 448
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\rate-limit.controller.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\rate-limit.controller.ts"],
      sourcesContent: ["import {\n  Controller,\n  Get,\n  Post,\n  Delete,\n  Param,\n  Query,\n  UseGuards,\n  UseInterceptors,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiQuery,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { TenantRateLimitService } from '../services/tenant-rate-limit.service';\nimport { TenantValidationInterceptor } from '../interceptors/tenant-validation.interceptor';\nimport { TenantRoleGuard } from '../interceptors/tenant-validation.interceptor';\nimport { GetUser } from '../decorators/get-user.decorator';\nimport { Roles } from '../interceptors/tenant-validation.interceptor';\nimport { SkipRateLimit } from '../interceptors/rate-limit.interceptor';\n\ninterface UsageStatsResponse {\n  current: number;\n  limit: number;\n  resetTime: number;\n  percentage: number;\n}\n\ninterface AllUsageStatsResponse {\n  api: UsageStatsResponse;\n  campaigns: UsageStatsResponse;\n  whatsapp: UsageStatsResponse;\n  webhooks: UsageStatsResponse;\n  exports: UsageStatsResponse;\n}\n\ninterface PlanLimitsResponse {\n  api: {\n    requests: number;\n    windowMs: number;\n  };\n  campaigns: {\n    requests: number;\n    windowMs: number;\n  };\n  whatsapp: {\n    requests: number;\n    windowMs: number;\n  };\n  webhooks: {\n    requests: number;\n    windowMs: number;\n  };\n  exports: {\n    requests: number;\n    windowMs: number;\n  };\n}\n\ninterface RateLimitCheckResponse {\n  allowed: boolean;\n  remaining: number;\n  resetTime: number;\n  limit: number;\n}\n\n@ApiTags('Rate Limit')\n@ApiBearerAuth()\n@Controller('rate-limit')\n@UseInterceptors(TenantValidationInterceptor)\n@UseGuards(TenantRoleGuard)\n@SkipRateLimit() // Pular rate limiting para endpoints de gerenciamento\nexport class RateLimitController {\n  private readonly logger = new Logger(RateLimitController.name);\n\n  constructor(\n    private readonly rateLimitService: TenantRateLimitService,\n  ) {}\n\n  @Get('usage')\n  @ApiOperation({ summary: 'Obter estat\xEDsticas de uso de rate limit' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Estat\xEDsticas de uso obtidas com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        api: {\n          type: 'object',\n          properties: {\n            current: { type: 'number' },\n            limit: { type: 'number' },\n            resetTime: { type: 'number' },\n            percentage: { type: 'number' },\n          },\n        },\n        campaigns: {\n          type: 'object',\n          properties: {\n            current: { type: 'number' },\n            limit: { type: 'number' },\n            resetTime: { type: 'number' },\n            percentage: { type: 'number' },\n          },\n        },\n        whatsapp: {\n          type: 'object',\n          properties: {\n            current: { type: 'number' },\n            limit: { type: 'number' },\n            resetTime: { type: 'number' },\n            percentage: { type: 'number' },\n          },\n        },\n        webhooks: {\n          type: 'object',\n          properties: {\n            current: { type: 'number' },\n            limit: { type: 'number' },\n            resetTime: { type: 'number' },\n            percentage: { type: 'number' },\n          },\n        },\n        exports: {\n          type: 'object',\n          properties: {\n            current: { type: 'number' },\n            limit: { type: 'number' },\n            resetTime: { type: 'number' },\n            percentage: { type: 'number' },\n          },\n        },\n      },\n    },\n  })\n  @Roles('ADMIN', 'OWNER', 'MEMBER')\n  async getUsageStats(\n    @GetUser() user: any,\n  ): Promise<AllUsageStatsResponse> {\n    try {\n      const stats = await this.rateLimitService.getAllUsageStats(\n        user.organizationId,\n      );\n\n      this.logger.log(\n        `Usage stats retrieved for organization ${user.organizationId}`,\n      );\n\n      return stats as AllUsageStatsResponse;\n    } catch (error) {\n      this.logger.error(\n        `Failed to get usage stats: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  @Get('usage/:type')\n  @ApiOperation({ summary: 'Obter estat\xEDsticas de uso por tipo' })\n  @ApiParam({\n    name: 'type',\n    description: 'Tipo de rate limit',\n    enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports'],\n  })\n  @ApiQuery({\n    name: 'identifier',\n    description: 'Identificador adicional (opcional)',\n    required: false,\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Estat\xEDsticas de uso obtidas com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        current: { type: 'number' },\n        limit: { type: 'number' },\n        resetTime: { type: 'number' },\n        percentage: { type: 'number' },\n      },\n    },\n  })\n  @Roles('ADMIN', 'OWNER', 'MEMBER')\n  async getUsageStatsByType(\n    @GetUser() user: any,\n    @Param('type') type: string,\n    @Query('identifier') identifier?: string,\n  ): Promise<UsageStatsResponse> {\n    try {\n      const stats = await this.rateLimitService.getUsageStats(\n        user.organizationId,\n        type as any,\n        identifier,\n      );\n\n      this.logger.log(\n        `Usage stats for ${type} retrieved for organization ${user.organizationId}`,\n      );\n\n      return stats;\n    } catch (error) {\n      this.logger.error(\n        `Failed to get usage stats for ${type}: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  @Get('limits')\n  @ApiOperation({ summary: 'Obter limites do plano atual' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Limites do plano obtidos com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        api: {\n          type: 'object',\n          properties: {\n            requests: { type: 'number' },\n            windowMs: { type: 'number' },\n          },\n        },\n        campaigns: {\n          type: 'object',\n          properties: {\n            requests: { type: 'number' },\n            windowMs: { type: 'number' },\n          },\n        },\n        whatsapp: {\n          type: 'object',\n          properties: {\n            requests: { type: 'number' },\n            windowMs: { type: 'number' },\n          },\n        },\n        webhooks: {\n          type: 'object',\n          properties: {\n            requests: { type: 'number' },\n            windowMs: { type: 'number' },\n          },\n        },\n        exports: {\n          type: 'object',\n          properties: {\n            requests: { type: 'number' },\n            windowMs: { type: 'number' },\n          },\n        },\n      },\n    },\n  })\n  @Roles('ADMIN', 'OWNER', 'MEMBER')\n  async getPlanLimits(\n    @GetUser() user: any,\n  ): Promise<PlanLimitsResponse> {\n    try {\n      const limits = await this.rateLimitService.getPlanLimits(\n        user.organizationId,\n      );\n\n      this.logger.log(\n        `Plan limits retrieved for organization ${user.organizationId}`,\n      );\n\n      return limits as PlanLimitsResponse;\n    } catch (error) {\n      this.logger.error(\n        `Failed to get plan limits: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  @Get('check/:type')\n  @ApiOperation({ summary: 'Verificar rate limit sem consumir' })\n  @ApiParam({\n    name: 'type',\n    description: 'Tipo de rate limit',\n    enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports'],\n  })\n  @ApiQuery({\n    name: 'identifier',\n    description: 'Identificador adicional (opcional)',\n    required: false,\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Verifica\xE7\xE3o de rate limit realizada com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        allowed: { type: 'boolean' },\n        remaining: { type: 'number' },\n        resetTime: { type: 'number' },\n        limit: { type: 'number' },\n      },\n    },\n  })\n  @Roles('ADMIN', 'OWNER', 'MEMBER')\n  async checkRateLimit(\n    @GetUser() user: any,\n    @Param('type') type: string,\n    @Query('identifier') identifier?: string,\n  ): Promise<RateLimitCheckResponse> {\n    try {\n      const result = await this.rateLimitService.checkRateLimit(\n        user.organizationId,\n        type as any,\n        identifier,\n      );\n\n      this.logger.log(\n        `Rate limit check for ${type} - Organization ${user.organizationId}: ${result.allowed ? 'ALLOWED' : 'BLOCKED'}`,\n      );\n\n      return result;\n    } catch (error) {\n      this.logger.error(\n        `Failed to check rate limit for ${type}: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  @Post('consume/:type')\n  @ApiOperation({ summary: 'Consumir rate limit manualmente' })\n  @ApiParam({\n    name: 'type',\n    description: 'Tipo de rate limit',\n    enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports'],\n  })\n  @ApiQuery({\n    name: 'identifier',\n    description: 'Identificador adicional (opcional)',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'count',\n    description: 'Quantidade a consumir (padr\xE3o: 1)',\n    required: false,\n    type: 'number',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Rate limit consumido com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        allowed: { type: 'boolean' },\n        remaining: { type: 'number' },\n        resetTime: { type: 'number' },\n        limit: { type: 'number' },\n      },\n    },\n  })\n  @Roles('ADMIN', 'OWNER')\n  async consumeRateLimit(\n    @GetUser() user: any,\n    @Param('type') type: string,\n    @Query('identifier') identifier?: string,\n    @Query('count') count?: number,\n  ): Promise<RateLimitCheckResponse> {\n    try {\n      const result = await this.rateLimitService.consumeRateLimit(\n        user.organizationId,\n        type as any,\n        identifier,\n        count || 1,\n      );\n\n      this.logger.log(\n        `Rate limit consumed for ${type} - Organization ${user.organizationId}: ${count || 1} units`,\n      );\n\n      return result;\n    } catch (error) {\n      this.logger.error(\n        `Failed to consume rate limit for ${type}: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  @Delete('reset/:type')\n  @ApiOperation({ summary: 'Resetar rate limit (apenas admins)' })\n  @ApiParam({\n    name: 'type',\n    description: 'Tipo de rate limit',\n    enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports'],\n  })\n  @ApiQuery({\n    name: 'identifier',\n    description: 'Identificador adicional (opcional)',\n    required: false,\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Rate limit resetado com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string' },\n        type: { type: 'string' },\n        organizationId: { type: 'string' },\n      },\n    },\n  })\n  @Roles('ADMIN', 'OWNER')\n  async resetRateLimit(\n    @GetUser() user: any,\n    @Param('type') type: string,\n    @Query('identifier') identifier?: string,\n  ): Promise<{ message: string; type: string; organizationId: string }> {\n    try {\n      await this.rateLimitService.resetRateLimit(\n        user.organizationId,\n        type as any,\n        identifier,\n      );\n\n      this.logger.log(\n        `Rate limit reset for ${type} - Organization ${user.organizationId} by user ${user.id}`,\n      );\n\n      return {\n        message: `Rate limit for ${type} has been reset successfully`,\n        type,\n        organizationId: user.organizationId,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Failed to reset rate limit for ${type}: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  @Get('can-perform/:action')\n  @ApiOperation({ summary: 'Verificar se pode executar a\xE7\xE3o' })\n  @ApiParam({\n    name: 'action',\n    description: 'A\xE7\xE3o a verificar',\n    enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports'],\n  })\n  @ApiQuery({\n    name: 'identifier',\n    description: 'Identificador adicional (opcional)',\n    required: false,\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Verifica\xE7\xE3o realizada com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        canPerform: { type: 'boolean' },\n        action: { type: 'string' },\n        organizationId: { type: 'string' },\n      },\n    },\n  })\n  @Roles('ADMIN', 'OWNER', 'MEMBER')\n  async canPerformAction(\n    @GetUser() user: any,\n    @Param('action') action: string,\n    @Query('identifier') identifier?: string,\n  ): Promise<{ canPerform: boolean; action: string; organizationId: string }> {\n    try {\n      const canPerform = await this.rateLimitService.canPerformAction(\n        user.organizationId,\n        action as any,\n        identifier,\n      );\n\n      this.logger.log(\n        `Action ${action} check for organization ${user.organizationId}: ${canPerform ? 'ALLOWED' : 'BLOCKED'}`,\n      );\n\n      return {\n        canPerform,\n        action,\n        organizationId: user.organizationId,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Failed to check if can perform ${action}: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  @Post('cleanup')\n  @ApiOperation({ summary: 'Limpar contadores antigos (apenas admins)' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Limpeza realizada com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string' },\n        deletedCount: { type: 'number' },\n      },\n    },\n  })\n  @Roles('ADMIN', 'OWNER')\n  async cleanupOldCounters(\n    @GetUser() user: any,\n  ): Promise<{ message: string; deletedCount: number }> {\n    try {\n      const deletedCount = await this.rateLimitService.cleanupOldCounters();\n\n      this.logger.log(\n        `Cleanup performed by user ${user.id} - ${deletedCount} counters deleted`,\n      );\n\n      return {\n        message: `Successfully cleaned up ${deletedCount} old rate limit counters`,\n        deletedCount,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Failed to cleanup old counters: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d4ca4c651c4a1f3a7bd4557d95e4085387b0df05"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kta31yhxa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kta31yhxa();
var __decorate =
/* istanbul ignore next */
(cov_1kta31yhxa().s[0]++,
/* istanbul ignore next */
(cov_1kta31yhxa().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_1kta31yhxa().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_1kta31yhxa().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_1kta31yhxa().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_1kta31yhxa().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_1kta31yhxa().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_1kta31yhxa().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_1kta31yhxa().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_1kta31yhxa().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_1kta31yhxa().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_1kta31yhxa().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1kta31yhxa().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_1kta31yhxa().b[3][0]++;
    cov_1kta31yhxa().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_1kta31yhxa().b[3][1]++;
    cov_1kta31yhxa().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_1kta31yhxa().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_1kta31yhxa().b[5][0]++;
        cov_1kta31yhxa().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_1kta31yhxa().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_1kta31yhxa().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_1kta31yhxa().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_1kta31yhxa().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_1kta31yhxa().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_1kta31yhxa().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_1kta31yhxa().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_1kta31yhxa().s[9]++;
  return /* istanbul ignore next */(cov_1kta31yhxa().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_1kta31yhxa().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_1kta31yhxa().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_1kta31yhxa().s[10]++,
/* istanbul ignore next */
(cov_1kta31yhxa().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_1kta31yhxa().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_1kta31yhxa().f[1]++;
  cov_1kta31yhxa().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_1kta31yhxa().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1kta31yhxa().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_1kta31yhxa().b[11][0]++;
    cov_1kta31yhxa().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_1kta31yhxa().b[11][1]++;
  }
}));
var __param =
/* istanbul ignore next */
(cov_1kta31yhxa().s[13]++,
/* istanbul ignore next */
(cov_1kta31yhxa().b[13][0]++, this) &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[13][1]++, this.__param) ||
/* istanbul ignore next */
(cov_1kta31yhxa().b[13][2]++, function (paramIndex, decorator) {
  /* istanbul ignore next */
  cov_1kta31yhxa().f[2]++;
  cov_1kta31yhxa().s[14]++;
  return function (target, key) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[3]++;
    cov_1kta31yhxa().s[15]++;
    decorator(target, key, paramIndex);
  };
}));
var RateLimitController_1;
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
import { Controller, Get, Post, Delete, Param, Query, UseGuards, UseInterceptors, HttpStatus, Logger } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';
import { TenantRateLimitService } from '../services/tenant-rate-limit.service';
import { TenantValidationInterceptor } from '../interceptors/tenant-validation.interceptor';
import { TenantRoleGuard } from '../interceptors/tenant-validation.interceptor';
import { GetUser } from '../decorators/get-user.decorator';
import { Roles } from '../interceptors/tenant-validation.interceptor';
import { SkipRateLimit } from '../interceptors/rate-limit.interceptor';
let RateLimitController =
/* istanbul ignore next */
(cov_1kta31yhxa().s[16]++, RateLimitController_1 = class RateLimitController {
  rateLimitService;
  logger =
  /* istanbul ignore next */
  (cov_1kta31yhxa().s[17]++, new Logger(RateLimitController_1.name));
  constructor(rateLimitService) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[4]++;
    cov_1kta31yhxa().s[18]++;
    this.rateLimitService = rateLimitService;
  }
  async getUsageStats(user) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[5]++;
    cov_1kta31yhxa().s[19]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_1kta31yhxa().s[20]++, await this.rateLimitService.getAllUsageStats(user.organizationId));
      /* istanbul ignore next */
      cov_1kta31yhxa().s[21]++;
      this.logger.log(`Usage stats retrieved for organization ${user.organizationId}`);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[22]++;
      return stats;
    } catch (error) {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[23]++;
      this.logger.error(`Failed to get usage stats: ${error.message}`, error.stack);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[24]++;
      throw error;
    }
  }
  async getUsageStatsByType(user, type, identifier) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[6]++;
    cov_1kta31yhxa().s[25]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_1kta31yhxa().s[26]++, await this.rateLimitService.getUsageStats(user.organizationId, type, identifier));
      /* istanbul ignore next */
      cov_1kta31yhxa().s[27]++;
      this.logger.log(`Usage stats for ${type} retrieved for organization ${user.organizationId}`);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[28]++;
      return stats;
    } catch (error) {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[29]++;
      this.logger.error(`Failed to get usage stats for ${type}: ${error.message}`, error.stack);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[30]++;
      throw error;
    }
  }
  async getPlanLimits(user) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[7]++;
    cov_1kta31yhxa().s[31]++;
    try {
      const limits =
      /* istanbul ignore next */
      (cov_1kta31yhxa().s[32]++, await this.rateLimitService.getPlanLimits(user.organizationId));
      /* istanbul ignore next */
      cov_1kta31yhxa().s[33]++;
      this.logger.log(`Plan limits retrieved for organization ${user.organizationId}`);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[34]++;
      return limits;
    } catch (error) {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[35]++;
      this.logger.error(`Failed to get plan limits: ${error.message}`, error.stack);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[36]++;
      throw error;
    }
  }
  async checkRateLimit(user, type, identifier) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[8]++;
    cov_1kta31yhxa().s[37]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1kta31yhxa().s[38]++, await this.rateLimitService.checkRateLimit(user.organizationId, type, identifier));
      /* istanbul ignore next */
      cov_1kta31yhxa().s[39]++;
      this.logger.log(`Rate limit check for ${type} - Organization ${user.organizationId}: ${result.allowed ?
      /* istanbul ignore next */
      (cov_1kta31yhxa().b[14][0]++, 'ALLOWED') :
      /* istanbul ignore next */
      (cov_1kta31yhxa().b[14][1]++, 'BLOCKED')}`);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[40]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[41]++;
      this.logger.error(`Failed to check rate limit for ${type}: ${error.message}`, error.stack);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[42]++;
      throw error;
    }
  }
  async consumeRateLimit(user, type, identifier, count) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[9]++;
    cov_1kta31yhxa().s[43]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1kta31yhxa().s[44]++, await this.rateLimitService.consumeRateLimit(user.organizationId, type, identifier,
      /* istanbul ignore next */
      (cov_1kta31yhxa().b[15][0]++, count) ||
      /* istanbul ignore next */
      (cov_1kta31yhxa().b[15][1]++, 1)));
      /* istanbul ignore next */
      cov_1kta31yhxa().s[45]++;
      this.logger.log(`Rate limit consumed for ${type} - Organization ${user.organizationId}: ${
      /* istanbul ignore next */
      (cov_1kta31yhxa().b[16][0]++, count) ||
      /* istanbul ignore next */
      (cov_1kta31yhxa().b[16][1]++, 1)} units`);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[46]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[47]++;
      this.logger.error(`Failed to consume rate limit for ${type}: ${error.message}`, error.stack);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[48]++;
      throw error;
    }
  }
  async resetRateLimit(user, type, identifier) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[10]++;
    cov_1kta31yhxa().s[49]++;
    try {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[50]++;
      await this.rateLimitService.resetRateLimit(user.organizationId, type, identifier);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[51]++;
      this.logger.log(`Rate limit reset for ${type} - Organization ${user.organizationId} by user ${user.id}`);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[52]++;
      return {
        message: `Rate limit for ${type} has been reset successfully`,
        type,
        organizationId: user.organizationId
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[53]++;
      this.logger.error(`Failed to reset rate limit for ${type}: ${error.message}`, error.stack);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[54]++;
      throw error;
    }
  }
  async canPerformAction(user, action, identifier) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[11]++;
    cov_1kta31yhxa().s[55]++;
    try {
      const canPerform =
      /* istanbul ignore next */
      (cov_1kta31yhxa().s[56]++, await this.rateLimitService.canPerformAction(user.organizationId, action, identifier));
      /* istanbul ignore next */
      cov_1kta31yhxa().s[57]++;
      this.logger.log(`Action ${action} check for organization ${user.organizationId}: ${canPerform ?
      /* istanbul ignore next */
      (cov_1kta31yhxa().b[17][0]++, 'ALLOWED') :
      /* istanbul ignore next */
      (cov_1kta31yhxa().b[17][1]++, 'BLOCKED')}`);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[58]++;
      return {
        canPerform,
        action,
        organizationId: user.organizationId
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[59]++;
      this.logger.error(`Failed to check if can perform ${action}: ${error.message}`, error.stack);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[60]++;
      throw error;
    }
  }
  async cleanupOldCounters(user) {
    /* istanbul ignore next */
    cov_1kta31yhxa().f[12]++;
    cov_1kta31yhxa().s[61]++;
    try {
      const deletedCount =
      /* istanbul ignore next */
      (cov_1kta31yhxa().s[62]++, await this.rateLimitService.cleanupOldCounters());
      /* istanbul ignore next */
      cov_1kta31yhxa().s[63]++;
      this.logger.log(`Cleanup performed by user ${user.id} - ${deletedCount} counters deleted`);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[64]++;
      return {
        message: `Successfully cleaned up ${deletedCount} old rate limit counters`,
        deletedCount
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1kta31yhxa().s[65]++;
      this.logger.error(`Failed to cleanup old counters: ${error.message}`, error.stack);
      /* istanbul ignore next */
      cov_1kta31yhxa().s[66]++;
      throw error;
    }
  }
});
/* istanbul ignore next */
cov_1kta31yhxa().s[67]++;
__decorate([Get('usage'), ApiOperation({
  summary: 'Obter estatísticas de uso de rate limit'
}), ApiResponse({
  status: HttpStatus.OK,
  description: 'Estatísticas de uso obtidas com sucesso',
  schema: {
    type: 'object',
    properties: {
      api: {
        type: 'object',
        properties: {
          current: {
            type: 'number'
          },
          limit: {
            type: 'number'
          },
          resetTime: {
            type: 'number'
          },
          percentage: {
            type: 'number'
          }
        }
      },
      campaigns: {
        type: 'object',
        properties: {
          current: {
            type: 'number'
          },
          limit: {
            type: 'number'
          },
          resetTime: {
            type: 'number'
          },
          percentage: {
            type: 'number'
          }
        }
      },
      whatsapp: {
        type: 'object',
        properties: {
          current: {
            type: 'number'
          },
          limit: {
            type: 'number'
          },
          resetTime: {
            type: 'number'
          },
          percentage: {
            type: 'number'
          }
        }
      },
      webhooks: {
        type: 'object',
        properties: {
          current: {
            type: 'number'
          },
          limit: {
            type: 'number'
          },
          resetTime: {
            type: 'number'
          },
          percentage: {
            type: 'number'
          }
        }
      },
      exports: {
        type: 'object',
        properties: {
          current: {
            type: 'number'
          },
          limit: {
            type: 'number'
          },
          resetTime: {
            type: 'number'
          },
          percentage: {
            type: 'number'
          }
        }
      }
    }
  }
}), Roles('ADMIN', 'OWNER', 'MEMBER'), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", typeof (_b =
/* istanbul ignore next */
(cov_1kta31yhxa().b[19][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[19][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1kta31yhxa().b[18][0]++, _b) :
/* istanbul ignore next */
(cov_1kta31yhxa().b[18][1]++, Object))], RateLimitController.prototype, "getUsageStats", null);
/* istanbul ignore next */
cov_1kta31yhxa().s[68]++;
__decorate([Get('usage/:type'), ApiOperation({
  summary: 'Obter estatísticas de uso por tipo'
}), ApiParam({
  name: 'type',
  description: 'Tipo de rate limit',
  enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports']
}), ApiQuery({
  name: 'identifier',
  description: 'Identificador adicional (opcional)',
  required: false
}), ApiResponse({
  status: HttpStatus.OK,
  description: 'Estatísticas de uso obtidas com sucesso',
  schema: {
    type: 'object',
    properties: {
      current: {
        type: 'number'
      },
      limit: {
        type: 'number'
      },
      resetTime: {
        type: 'number'
      },
      percentage: {
        type: 'number'
      }
    }
  }
}), Roles('ADMIN', 'OWNER', 'MEMBER'), __param(0, GetUser()), __param(1, Param('type')), __param(2, Query('identifier')), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String, String]), __metadata("design:returntype", typeof (_c =
/* istanbul ignore next */
(cov_1kta31yhxa().b[21][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[21][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1kta31yhxa().b[20][0]++, _c) :
/* istanbul ignore next */
(cov_1kta31yhxa().b[20][1]++, Object))], RateLimitController.prototype, "getUsageStatsByType", null);
/* istanbul ignore next */
cov_1kta31yhxa().s[69]++;
__decorate([Get('limits'), ApiOperation({
  summary: 'Obter limites do plano atual'
}), ApiResponse({
  status: HttpStatus.OK,
  description: 'Limites do plano obtidos com sucesso',
  schema: {
    type: 'object',
    properties: {
      api: {
        type: 'object',
        properties: {
          requests: {
            type: 'number'
          },
          windowMs: {
            type: 'number'
          }
        }
      },
      campaigns: {
        type: 'object',
        properties: {
          requests: {
            type: 'number'
          },
          windowMs: {
            type: 'number'
          }
        }
      },
      whatsapp: {
        type: 'object',
        properties: {
          requests: {
            type: 'number'
          },
          windowMs: {
            type: 'number'
          }
        }
      },
      webhooks: {
        type: 'object',
        properties: {
          requests: {
            type: 'number'
          },
          windowMs: {
            type: 'number'
          }
        }
      },
      exports: {
        type: 'object',
        properties: {
          requests: {
            type: 'number'
          },
          windowMs: {
            type: 'number'
          }
        }
      }
    }
  }
}), Roles('ADMIN', 'OWNER', 'MEMBER'), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", typeof (_d =
/* istanbul ignore next */
(cov_1kta31yhxa().b[23][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[23][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1kta31yhxa().b[22][0]++, _d) :
/* istanbul ignore next */
(cov_1kta31yhxa().b[22][1]++, Object))], RateLimitController.prototype, "getPlanLimits", null);
/* istanbul ignore next */
cov_1kta31yhxa().s[70]++;
__decorate([Get('check/:type'), ApiOperation({
  summary: 'Verificar rate limit sem consumir'
}), ApiParam({
  name: 'type',
  description: 'Tipo de rate limit',
  enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports']
}), ApiQuery({
  name: 'identifier',
  description: 'Identificador adicional (opcional)',
  required: false
}), ApiResponse({
  status: HttpStatus.OK,
  description: 'Verificação de rate limit realizada com sucesso',
  schema: {
    type: 'object',
    properties: {
      allowed: {
        type: 'boolean'
      },
      remaining: {
        type: 'number'
      },
      resetTime: {
        type: 'number'
      },
      limit: {
        type: 'number'
      }
    }
  }
}), Roles('ADMIN', 'OWNER', 'MEMBER'), __param(0, GetUser()), __param(1, Param('type')), __param(2, Query('identifier')), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String, String]), __metadata("design:returntype", typeof (_e =
/* istanbul ignore next */
(cov_1kta31yhxa().b[25][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[25][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1kta31yhxa().b[24][0]++, _e) :
/* istanbul ignore next */
(cov_1kta31yhxa().b[24][1]++, Object))], RateLimitController.prototype, "checkRateLimit", null);
/* istanbul ignore next */
cov_1kta31yhxa().s[71]++;
__decorate([Post('consume/:type'), ApiOperation({
  summary: 'Consumir rate limit manualmente'
}), ApiParam({
  name: 'type',
  description: 'Tipo de rate limit',
  enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports']
}), ApiQuery({
  name: 'identifier',
  description: 'Identificador adicional (opcional)',
  required: false
}), ApiQuery({
  name: 'count',
  description: 'Quantidade a consumir (padrão: 1)',
  required: false,
  type: 'number'
}), ApiResponse({
  status: HttpStatus.OK,
  description: 'Rate limit consumido com sucesso',
  schema: {
    type: 'object',
    properties: {
      allowed: {
        type: 'boolean'
      },
      remaining: {
        type: 'number'
      },
      resetTime: {
        type: 'number'
      },
      limit: {
        type: 'number'
      }
    }
  }
}), Roles('ADMIN', 'OWNER'), __param(0, GetUser()), __param(1, Param('type')), __param(2, Query('identifier')), __param(3, Query('count')), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String, String, Number]), __metadata("design:returntype", typeof (_f =
/* istanbul ignore next */
(cov_1kta31yhxa().b[27][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[27][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1kta31yhxa().b[26][0]++, _f) :
/* istanbul ignore next */
(cov_1kta31yhxa().b[26][1]++, Object))], RateLimitController.prototype, "consumeRateLimit", null);
/* istanbul ignore next */
cov_1kta31yhxa().s[72]++;
__decorate([Delete('reset/:type'), ApiOperation({
  summary: 'Resetar rate limit (apenas admins)'
}), ApiParam({
  name: 'type',
  description: 'Tipo de rate limit',
  enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports']
}), ApiQuery({
  name: 'identifier',
  description: 'Identificador adicional (opcional)',
  required: false
}), ApiResponse({
  status: HttpStatus.OK,
  description: 'Rate limit resetado com sucesso',
  schema: {
    type: 'object',
    properties: {
      message: {
        type: 'string'
      },
      type: {
        type: 'string'
      },
      organizationId: {
        type: 'string'
      }
    }
  }
}), Roles('ADMIN', 'OWNER'), __param(0, GetUser()), __param(1, Param('type')), __param(2, Query('identifier')), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String, String]), __metadata("design:returntype", typeof (_g =
/* istanbul ignore next */
(cov_1kta31yhxa().b[29][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[29][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1kta31yhxa().b[28][0]++, _g) :
/* istanbul ignore next */
(cov_1kta31yhxa().b[28][1]++, Object))], RateLimitController.prototype, "resetRateLimit", null);
/* istanbul ignore next */
cov_1kta31yhxa().s[73]++;
__decorate([Get('can-perform/:action'), ApiOperation({
  summary: 'Verificar se pode executar ação'
}), ApiParam({
  name: 'action',
  description: 'Ação a verificar',
  enum: ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports']
}), ApiQuery({
  name: 'identifier',
  description: 'Identificador adicional (opcional)',
  required: false
}), ApiResponse({
  status: HttpStatus.OK,
  description: 'Verificação realizada com sucesso',
  schema: {
    type: 'object',
    properties: {
      canPerform: {
        type: 'boolean'
      },
      action: {
        type: 'string'
      },
      organizationId: {
        type: 'string'
      }
    }
  }
}), Roles('ADMIN', 'OWNER', 'MEMBER'), __param(0, GetUser()), __param(1, Param('action')), __param(2, Query('identifier')), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String, String]), __metadata("design:returntype", typeof (_h =
/* istanbul ignore next */
(cov_1kta31yhxa().b[31][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[31][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1kta31yhxa().b[30][0]++, _h) :
/* istanbul ignore next */
(cov_1kta31yhxa().b[30][1]++, Object))], RateLimitController.prototype, "canPerformAction", null);
/* istanbul ignore next */
cov_1kta31yhxa().s[74]++;
__decorate([Post('cleanup'), ApiOperation({
  summary: 'Limpar contadores antigos (apenas admins)'
}), ApiResponse({
  status: HttpStatus.OK,
  description: 'Limpeza realizada com sucesso',
  schema: {
    type: 'object',
    properties: {
      message: {
        type: 'string'
      },
      deletedCount: {
        type: 'number'
      }
    }
  }
}), Roles('ADMIN', 'OWNER'), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", typeof (_j =
/* istanbul ignore next */
(cov_1kta31yhxa().b[33][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[33][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1kta31yhxa().b[32][0]++, _j) :
/* istanbul ignore next */
(cov_1kta31yhxa().b[32][1]++, Object))], RateLimitController.prototype, "cleanupOldCounters", null);
/* istanbul ignore next */
cov_1kta31yhxa().s[75]++;
RateLimitController = RateLimitController_1 = __decorate([ApiTags('Rate Limit'), ApiBearerAuth(), Controller('rate-limit'), UseInterceptors(TenantValidationInterceptor), UseGuards(TenantRoleGuard), SkipRateLimit() // Pular rate limiting para endpoints de gerenciamento
, __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_1kta31yhxa().b[35][0]++, typeof TenantRateLimitService !== "undefined") &&
/* istanbul ignore next */
(cov_1kta31yhxa().b[35][1]++, TenantRateLimitService)) === "function" ?
/* istanbul ignore next */
(cov_1kta31yhxa().b[34][0]++, _a) :
/* istanbul ignore next */
(cov_1kta31yhxa().b[34][1]++, Object)])], RateLimitController);
export { RateLimitController };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,