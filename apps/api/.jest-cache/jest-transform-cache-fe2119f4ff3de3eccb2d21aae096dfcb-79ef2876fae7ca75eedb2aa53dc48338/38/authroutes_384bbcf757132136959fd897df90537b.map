{"version":3,"names":["AuthService","requireAuth","optionalAuth","ApiError","asyncHandler","logAuth","loginSchema","registerSchema","refreshTokenSchema","changePasswordSchema","authRoutes","app","cov_14t0d8qzba","f","authService","s","post","schema","body","response","type","properties","success","data","user","id","name","email","role","isActive","createdAt","updatedAt","organization","slug","planType","tokens","accessToken","refreshToken","expiresIn","request","reply","password","ip","userAgent","headers","result","login","status","send","organizationName","register","preHandler","message","sessionId","logout","get","lastLoginAt","nullable","settings","currentPassword","newPassword","userId","db","findUnique","where","select","b","notFound","bcrypt","isValidPassword","compare","badRequest","hashedNewPassword","hash","update","userSession","updateMany","not","expiresAt","Date","items","ipAddress","isCurrent","currentSessionId","sessions","getUserSessions","sessionsWithCurrent","map","session","delete","params","required","revokeSession","revokeAllSessions","valid","isValid"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\auth.routes.ts"],"sourcesContent":["import type { FastifyInstance } from 'fastify'\nimport { AuthService } from '@/services/auth.service'\nimport { requireAuth, optionalAuth } from '@/middleware/auth.middleware'\nimport { ApiError, ValidationError, asyncHandler } from '@/utils/errors'\nimport { logAuth } from '@/utils/logger'\nimport {\n  loginSchema,\n  registerSchema,\n  refreshTokenSchema,\n  changePasswordSchema,\n  type LoginRequest,\n  type RegisterRequest,\n  type RefreshTokenRequest,\n  type ChangePasswordRequest,\n} from '@utmify/shared'\n\n// Auth routes\nexport async function authRoutes(app: FastifyInstance) {\n  const authService = new AuthService(app)\n\n  // Login route\n  app.post<{ Body: LoginRequest }>(\n    '/login',\n    {\n      schema: {\n        body: loginSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  user: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                    },\n                  },\n                  tokens: {\n                    type: 'object',\n                    properties: {\n                      accessToken: { type: 'string' },\n                      refreshToken: { type: 'string' },\n                      expiresIn: { type: 'number' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { email, password } = request.body\n      const ip = request.ip\n      const userAgent = request.headers['user-agent']\n\n      const result = await authService.login(email, password, ip, userAgent)\n\n      return reply.status(200).send({\n        success: true,\n        data: result,\n      })\n    })\n  )\n\n  // Register route\n  app.post<{ Body: RegisterRequest }>(\n    '/register',\n    {\n      schema: {\n        body: registerSchema,\n        response: {\n          201: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  user: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                    },\n                  },\n                  tokens: {\n                    type: 'object',\n                    properties: {\n                      accessToken: { type: 'string' },\n                      refreshToken: { type: 'string' },\n                      expiresIn: { type: 'number' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { name, email, password, organizationName } = request.body\n      const ip = request.ip\n\n      const result = await authService.register(\n        { name, email, password, organizationName },\n        ip\n      )\n\n      return reply.status(201).send({\n        success: true,\n        data: result,\n      })\n    })\n  )\n\n  // Refresh token route\n  app.post<{ Body: RefreshTokenRequest }>(\n    '/refresh',\n    {\n      schema: {\n        body: refreshTokenSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  accessToken: { type: 'string' },\n                  refreshToken: { type: 'string' },\n                  expiresIn: { type: 'number' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { refreshToken } = request.body\n\n      const tokens = await authService.refreshToken(refreshToken)\n\n      return reply.status(200).send({\n        success: true,\n        data: tokens,\n      })\n    })\n  )\n\n  // Logout route\n  app.post(\n    '/logout',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const sessionId = request.sessionId!\n      const refreshToken = request.headers['x-refresh-token'] as string\n\n      await authService.logout(sessionId, refreshToken)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'Logged out successfully',\n      })\n    })\n  )\n\n  // Get current user route\n  app.get(\n    '/me',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  user: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      lastLoginAt: { type: 'string', nullable: true },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      settings: { type: 'object' },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      return reply.status(200).send({\n        success: true,\n        data: {\n          user: request.user!,\n          organization: request.organization!,\n        },\n      })\n    })\n  )\n\n  // Change password route\n  app.post<{ Body: ChangePasswordRequest }>(\n    '/change-password',\n    {\n      preHandler: requireAuth,\n      schema: {\n        body: changePasswordSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { currentPassword, newPassword } = request.body\n      const userId = request.user!.id\n\n      // Get user with password\n      const user = await app.db.user.findUnique({\n        where: { id: userId },\n        select: { id: true, password: true },\n      })\n\n      if (!user) {\n        throw ApiError.notFound('User not found')\n      }\n\n      // Verify current password\n      const bcrypt = await import('bcryptjs')\n      const isValidPassword = await bcrypt.compare(currentPassword, user.password)\n      \n      if (!isValidPassword) {\n        throw ApiError.badRequest('Current password is incorrect', 'INVALID_CURRENT_PASSWORD')\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 12)\n\n      // Update password\n      await app.db.user.update({\n        where: { id: userId },\n        data: { password: hashedNewPassword },\n      })\n\n      // Revoke all sessions except current one\n      await app.db.userSession.updateMany({\n        where: {\n          userId,\n          id: { not: request.sessionId! },\n        },\n        data: { expiresAt: new Date() },\n      })\n\n      logAuth('password_changed', userId, request.user!.email, request.ip)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'Password changed successfully',\n      })\n    })\n  )\n\n  // Get user sessions route\n  app.get(\n    '/sessions',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    id: { type: 'string' },\n                    ipAddress: { type: 'string', nullable: true },\n                    userAgent: { type: 'string', nullable: true },\n                    createdAt: { type: 'string' },\n                    expiresAt: { type: 'string' },\n                    isCurrent: { type: 'boolean' },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const userId = request.user!.id\n      const currentSessionId = request.sessionId!\n\n      const sessions = await authService.getUserSessions(userId)\n      \n      // Mark current session\n      const sessionsWithCurrent = sessions.map(session => ({\n        ...session,\n        isCurrent: session.id === currentSessionId,\n      }))\n\n      return reply.status(200).send({\n        success: true,\n        data: sessionsWithCurrent,\n      })\n    })\n  )\n\n  // Revoke session route\n  app.delete(\n    '/sessions/:sessionId',\n    {\n      preHandler: requireAuth,\n      schema: {\n        params: {\n          type: 'object',\n          properties: {\n            sessionId: { type: 'string' },\n          },\n          required: ['sessionId'],\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { sessionId } = request.params as { sessionId: string }\n      const userId = request.user!.id\n      const currentSessionId = request.sessionId!\n\n      if (sessionId === currentSessionId) {\n        throw ApiError.badRequest('Cannot revoke current session', 'CANNOT_REVOKE_CURRENT_SESSION')\n      }\n\n      await authService.revokeSession(sessionId, userId)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'Session revoked successfully',\n      })\n    })\n  )\n\n  // Revoke all sessions route\n  app.delete(\n    '/sessions',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const userId = request.user!.id\n\n      await authService.revokeAllSessions(userId)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'All sessions revoked successfully',\n      })\n    })\n  )\n\n  // Verify token route (for client-side token validation)\n  app.post(\n    '/verify',\n    {\n      preHandler: optionalAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  valid: { type: 'boolean' },\n                  user: {\n                    type: 'object',\n                    nullable: true,\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    nullable: true,\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const isValid = !!request.user\n\n      return reply.status(200).send({\n        success: true,\n        data: {\n          valid: isValid,\n          user: request.user || null,\n          organization: request.organization || null,\n        },\n      })\n    })\n  )\n}"],"mappingsyBAAyB;AACrD,SAASC,WAAW,EAAEC,YAAY,QAAQ,8BAA8B;AACxE,SAASC,QAAQ,EAAmBC,YAAY,QAAQ,gBAAgB;AACxE,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SACEC,WAAW,EACXC,cAAc,EACdC,kBAAkB,EAClBC,oBAAoB,QAKf,gBAAgB;AAEvB;AACA,OAAO,eAAeC,UAAUA,CAACC,GAAoB;EAAA;EAAAC,cAAA,GAAAC,CAAA;EACnD,MAAMC,WAAW;EAAA;EAAA,CAAAF,cAAA,GAAAG,CAAA,OAAG,IAAIf,WAAW,CAACW,GAAG,CAAC;EAExC;EAAA;EAAAC,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAACK,IAAI,CACN,QAAQ,EACR;IACEC,MAAM,EAAE;MACNC,IAAI,EAAEZ,WAAW;MACjBa,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BG,IAAI,EAAE;cACJH,IAAI,EAAE,QAAQ;cACdC,UAAU,EAAE;gBACVG,IAAI,EAAE;kBACJJ,IAAI,EAAE,QAAQ;kBACdC,UAAU,EAAE;oBACVI,EAAE,EAAE;sBAAEL,IAAI,EAAE;oBAAQ,CAAE;oBACtBM,IAAI,EAAE;sBAAEN,IAAI,EAAE;oBAAQ,CAAE;oBACxBO,KAAK,EAAE;sBAAEP,IAAI,EAAE;oBAAQ,CAAE;oBACzBQ,IAAI,EAAE;sBAAER,IAAI,EAAE;oBAAQ,CAAE;oBACxBS,QAAQ,EAAE;sBAAET,IAAI,EAAE;oBAAS,CAAE;oBAC7BU,SAAS,EAAE;sBAAEV,IAAI,EAAE;oBAAQ,CAAE;oBAC7BW,SAAS,EAAE;sBAAEX,IAAI,EAAE;oBAAQ;;iBAE9B;gBACDY,YAAY,EAAE;kBACZZ,IAAI,EAAE,QAAQ;kBACdC,UAAU,EAAE;oBACVI,EAAE,EAAE;sBAAEL,IAAI,EAAE;oBAAQ,CAAE;oBACtBM,IAAI,EAAE;sBAAEN,IAAI,EAAE;oBAAQ,CAAE;oBACxBa,IAAI,EAAE;sBAAEb,IAAI,EAAE;oBAAQ,CAAE;oBACxBc,QAAQ,EAAE;sBAAEd,IAAI,EAAE;oBAAQ,CAAE;oBAC5BS,QAAQ,EAAE;sBAAET,IAAI,EAAE;oBAAS;;iBAE9B;gBACDe,MAAM,EAAE;kBACNf,IAAI,EAAE,QAAQ;kBACdC,UAAU,EAAE;oBACVe,WAAW,EAAE;sBAAEhB,IAAI,EAAE;oBAAQ,CAAE;oBAC/BiB,YAAY,EAAE;sBAAEjB,IAAI,EAAE;oBAAQ,CAAE;oBAChCkB,SAAS,EAAE;sBAAElB,IAAI,EAAE;oBAAQ;;;;;;;;;GAS5C,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IACpC,MAAM;MAAEc,KAAK;MAAEc;IAAQ,CAAE;IAAA;IAAA,CAAA7B,cAAA,GAAAG,CAAA,OAAGwB,OAAO,CAACrB,IAAI;IACxC,MAAMwB,EAAE;IAAA;IAAA,CAAA9B,cAAA,GAAAG,CAAA,OAAGwB,OAAO,CAACG,EAAE;IACrB,MAAMC,SAAS;IAAA;IAAA,CAAA/B,cAAA,GAAAG,CAAA,OAAGwB,OAAO,CAACK,OAAO,CAAC,YAAY,CAAC;IAE/C,MAAMC,MAAM;IAAA;IAAA,CAAAjC,cAAA,GAAAG,CAAA,OAAG,MAAMD,WAAW,CAACgC,KAAK,CAACnB,KAAK,EAAEc,QAAQ,EAAEC,EAAE,EAAEC,SAAS,CAAC;IAAA;IAAA/B,cAAA,GAAAG,CAAA;IAEtE,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEsB;KACP,CAAC;EACJ,CAAC,CAAC,CACH;EAED;EAAA;EAAAjC,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAACK,IAAI,CACN,WAAW,EACX;IACEC,MAAM,EAAE;MACNC,IAAI,EAAEX,cAAc;MACpBY,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BG,IAAI,EAAE;cACJH,IAAI,EAAE,QAAQ;cACdC,UAAU,EAAE;gBACVG,IAAI,EAAE;kBACJJ,IAAI,EAAE,QAAQ;kBACdC,UAAU,EAAE;oBACVI,EAAE,EAAE;sBAAEL,IAAI,EAAE;oBAAQ,CAAE;oBACtBM,IAAI,EAAE;sBAAEN,IAAI,EAAE;oBAAQ,CAAE;oBACxBO,KAAK,EAAE;sBAAEP,IAAI,EAAE;oBAAQ,CAAE;oBACzBQ,IAAI,EAAE;sBAAER,IAAI,EAAE;oBAAQ,CAAE;oBACxBS,QAAQ,EAAE;sBAAET,IAAI,EAAE;oBAAS,CAAE;oBAC7BU,SAAS,EAAE;sBAAEV,IAAI,EAAE;oBAAQ,CAAE;oBAC7BW,SAAS,EAAE;sBAAEX,IAAI,EAAE;oBAAQ;;iBAE9B;gBACDY,YAAY,EAAE;kBACZZ,IAAI,EAAE,QAAQ;kBACdC,UAAU,EAAE;oBACVI,EAAE,EAAE;sBAAEL,IAAI,EAAE;oBAAQ,CAAE;oBACtBM,IAAI,EAAE;sBAAEN,IAAI,EAAE;oBAAQ,CAAE;oBACxBa,IAAI,EAAE;sBAAEb,IAAI,EAAE;oBAAQ,CAAE;oBACxBc,QAAQ,EAAE;sBAAEd,IAAI,EAAE;oBAAQ,CAAE;oBAC5BS,QAAQ,EAAE;sBAAET,IAAI,EAAE;oBAAS;;iBAE9B;gBACDe,MAAM,EAAE;kBACNf,IAAI,EAAE,QAAQ;kBACdC,UAAU,EAAE;oBACVe,WAAW,EAAE;sBAAEhB,IAAI,EAAE;oBAAQ,CAAE;oBAC/BiB,YAAY,EAAE;sBAAEjB,IAAI,EAAE;oBAAQ,CAAE;oBAChCkB,SAAS,EAAE;sBAAElB,IAAI,EAAE;oBAAQ;;;;;;;;;GAS5C,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IACpC,MAAM;MAAEa,IAAI;MAAEC,KAAK;MAAEc,QAAQ;MAAEQ;IAAgB,CAAE;IAAA;IAAA,CAAArC,cAAA,GAAAG,CAAA,OAAGwB,OAAO,CAACrB,IAAI;IAChE,MAAMwB,EAAE;IAAA;IAAA,CAAA9B,cAAA,GAAAG,CAAA,OAAGwB,OAAO,CAACG,EAAE;IAErB,MAAMG,MAAM;IAAA;IAAA,CAAAjC,cAAA,GAAAG,CAAA,QAAG,MAAMD,WAAW,CAACoC,QAAQ,CACvC;MAAExB,IAAI;MAAEC,KAAK;MAAEc,QAAQ;MAAEQ;IAAgB,CAAE,EAC3CP,EAAE,CACH;IAAA;IAAA9B,cAAA,GAAAG,CAAA;IAED,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEsB;KACP,CAAC;EACJ,CAAC,CAAC,CACH;EAED;EAAA;EAAAjC,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAACK,IAAI,CACN,UAAU,EACV;IACEC,MAAM,EAAE;MACNC,IAAI,EAAEV,kBAAkB;MACxBW,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BG,IAAI,EAAE;cACJH,IAAI,EAAE,QAAQ;cACdC,UAAU,EAAE;gBACVe,WAAW,EAAE;kBAAEhB,IAAI,EAAE;gBAAQ,CAAE;gBAC/BiB,YAAY,EAAE;kBAAEjB,IAAI,EAAE;gBAAQ,CAAE;gBAChCkB,SAAS,EAAE;kBAAElB,IAAI,EAAE;gBAAQ;;;;;;;GAOxC,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IACpC,MAAM;MAAEwB;IAAY,CAAE;IAAA;IAAA,CAAAzB,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACrB,IAAI;IAErC,MAAMiB,MAAM;IAAA;IAAA,CAAAvB,cAAA,GAAAG,CAAA,QAAG,MAAMD,WAAW,CAACuB,YAAY,CAACA,YAAY,CAAC;IAAA;IAAAzB,cAAA,GAAAG,CAAA;IAE3D,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEY;KACP,CAAC;EACJ,CAAC,CAAC,CACH;EAED;EAAA;EAAAvB,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAACK,IAAI,CACN,SAAS,EACT;IACEmC,UAAU,EAAElD,WAAW;IACvBgB,MAAM,EAAE;MACNE,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BgC,OAAO,EAAE;cAAEhC,IAAI,EAAE;YAAQ;;;;;GAKlC,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IACpC,MAAMwC,SAAS;IAAA;IAAA,CAAAzC,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACc,SAAU;IACpC,MAAMhB,YAAY;IAAA;IAAA,CAAAzB,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACK,OAAO,CAAC,iBAAiB,CAAW;IAAA;IAAAhC,cAAA,GAAAG,CAAA;IAEjE,MAAMD,WAAW,CAACwC,MAAM,CAACD,SAAS,EAAEhB,YAAY,CAAC;IAAA;IAAAzB,cAAA,GAAAG,CAAA;IAEjD,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACb8B,OAAO,EAAE;KACV,CAAC;EACJ,CAAC,CAAC,CACH;EAED;EAAA;EAAAxC,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAAC4C,GAAG,CACL,KAAK,EACL;IACEJ,UAAU,EAAElD,WAAW;IACvBgB,MAAM,EAAE;MACNE,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BG,IAAI,EAAE;cACJH,IAAI,EAAE,QAAQ;cACdC,UAAU,EAAE;gBACVG,IAAI,EAAE;kBACJJ,IAAI,EAAE,QAAQ;kBACdC,UAAU,EAAE;oBACVI,EAAE,EAAE;sBAAEL,IAAI,EAAE;oBAAQ,CAAE;oBACtBM,IAAI,EAAE;sBAAEN,IAAI,EAAE;oBAAQ,CAAE;oBACxBO,KAAK,EAAE;sBAAEP,IAAI,EAAE;oBAAQ,CAAE;oBACzBQ,IAAI,EAAE;sBAAER,IAAI,EAAE;oBAAQ,CAAE;oBACxBS,QAAQ,EAAE;sBAAET,IAAI,EAAE;oBAAS,CAAE;oBAC7BoC,WAAW,EAAE;sBAAEpC,IAAI,EAAE,QAAQ;sBAAEqC,QAAQ,EAAE;oBAAI,CAAE;oBAC/C3B,SAAS,EAAE;sBAAEV,IAAI,EAAE;oBAAQ,CAAE;oBAC7BW,SAAS,EAAE;sBAAEX,IAAI,EAAE;oBAAQ;;iBAE9B;gBACDY,YAAY,EAAE;kBACZZ,IAAI,EAAE,QAAQ;kBACdC,UAAU,EAAE;oBACVI,EAAE,EAAE;sBAAEL,IAAI,EAAE;oBAAQ,CAAE;oBACtBM,IAAI,EAAE;sBAAEN,IAAI,EAAE;oBAAQ,CAAE;oBACxBa,IAAI,EAAE;sBAAEb,IAAI,EAAE;oBAAQ,CAAE;oBACxBc,QAAQ,EAAE;sBAAEd,IAAI,EAAE;oBAAQ,CAAE;oBAC5BS,QAAQ,EAAE;sBAAET,IAAI,EAAE;oBAAS,CAAE;oBAC7BsC,QAAQ,EAAE;sBAAEtC,IAAI,EAAE;oBAAQ,CAAE;oBAC5BU,SAAS,EAAE;sBAAEV,IAAI,EAAE;oBAAQ,CAAE;oBAC7BW,SAAS,EAAE;sBAAEX,IAAI,EAAE;oBAAQ;;;;;;;;;GAS5C,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAG,CAAA;IACpC,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;QACJC,IAAI,EAAEe,OAAO,CAACf,IAAK;QACnBQ,YAAY,EAAEO,OAAO,CAACP;;KAEzB,CAAC;EACJ,CAAC,CAAC,CACH;EAED;EAAA;EAAApB,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAACK,IAAI,CACN,kBAAkB,EAClB;IACEmC,UAAU,EAAElD,WAAW;IACvBgB,MAAM,EAAE;MACNC,IAAI,EAAET,oBAAoB;MAC1BU,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BgC,OAAO,EAAE;cAAEhC,IAAI,EAAE;YAAQ;;;;;GAKlC,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IACpC,MAAM;MAAE8C,eAAe;MAAEC;IAAW,CAAE;IAAA;IAAA,CAAAhD,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACrB,IAAI;IACrD,MAAM2C,MAAM;IAAA;IAAA,CAAAjD,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACf,IAAK,CAACC,EAAE;IAE/B;IACA,MAAMD,IAAI;IAAA;IAAA,CAAAZ,cAAA,GAAAG,CAAA,QAAG,MAAMJ,GAAG,CAACmD,EAAE,CAACtC,IAAI,CAACuC,UAAU,CAAC;MACxCC,KAAK,EAAE;QAAEvC,EAAE,EAAEoC;MAAM,CAAE;MACrBI,MAAM,EAAE;QAAExC,EAAE,EAAE,IAAI;QAAEgB,QAAQ,EAAE;MAAI;KACnC,CAAC;IAAA;IAAA7B,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACS,IAAI,EAAE;MAAA;MAAAZ,cAAA,GAAAsD,CAAA;MAAAtD,cAAA,GAAAG,CAAA;MACT,MAAMZ,QAAQ,CAACgE,QAAQ,CAAC,gBAAgB,CAAC;IAC3C,CAAC;IAAA;IAAA;MAAAvD,cAAA,GAAAsD,CAAA;IAAA;IAED;IACA,MAAME,MAAM;IAAA;IAAA,CAAAxD,cAAA,GAAAG,CAAA,QAAG,MAAM,MAAM,CAAC,UAAU,CAAC;IACvC,MAAMsD,eAAe;IAAA;IAAA,CAAAzD,cAAA,GAAAG,CAAA,QAAG,MAAMqD,MAAM,CAACE,OAAO,CAACX,eAAe,EAAEnC,IAAI,CAACiB,QAAQ,CAAC;IAAA;IAAA7B,cAAA,GAAAG,CAAA;IAE5E,IAAI,CAACsD,eAAe,EAAE;MAAA;MAAAzD,cAAA,GAAAsD,CAAA;MAAAtD,cAAA,GAAAG,CAAA;MACpB,MAAMZ,QAAQ,CAACoE,UAAU,CAAC,+BAA+B,EAAE,0BAA0B,CAAC;IACxF,CAAC;IAAA;IAAA;MAAA3D,cAAA,GAAAsD,CAAA;IAAA;IAED;IACA,MAAMM,iBAAiB;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,QAAG,MAAMqD,MAAM,CAACK,IAAI,CAACb,WAAW,EAAE,EAAE,CAAC;IAE5D;IAAA;IAAAhD,cAAA,GAAAG,CAAA;IACA,MAAMJ,GAAG,CAACmD,EAAE,CAACtC,IAAI,CAACkD,MAAM,CAAC;MACvBV,KAAK,EAAE;QAAEvC,EAAE,EAAEoC;MAAM,CAAE;MACrBtC,IAAI,EAAE;QAAEkB,QAAQ,EAAE+B;MAAiB;KACpC,CAAC;IAEF;IAAA;IAAA5D,cAAA,GAAAG,CAAA;IACA,MAAMJ,GAAG,CAACmD,EAAE,CAACa,WAAW,CAACC,UAAU,CAAC;MAClCZ,KAAK,EAAE;QACLH,MAAM;QACNpC,EAAE,EAAE;UAAEoD,GAAG,EAAEtC,OAAO,CAACc;QAAU;OAC9B;MACD9B,IAAI,EAAE;QAAEuD,SAAS,EAAE,IAAIC,IAAI;MAAE;KAC9B,CAAC;IAAA;IAAAnE,cAAA,GAAAG,CAAA;IAEFV,OAAO,CAAC,kBAAkB,EAAEwD,MAAM,EAAEtB,OAAO,CAACf,IAAK,CAACG,KAAK,EAAEY,OAAO,CAACG,EAAE,CAAC;IAAA;IAAA9B,cAAA,GAAAG,CAAA;IAEpE,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACb8B,OAAO,EAAE;KACV,CAAC;EACJ,CAAC,CAAC,CACH;EAED;EAAA;EAAAxC,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAAC4C,GAAG,CACL,WAAW,EACX;IACEJ,UAAU,EAAElD,WAAW;IACvBgB,MAAM,EAAE;MACNE,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BG,IAAI,EAAE;cACJH,IAAI,EAAE,OAAO;cACb4D,KAAK,EAAE;gBACL5D,IAAI,EAAE,QAAQ;gBACdC,UAAU,EAAE;kBACVI,EAAE,EAAE;oBAAEL,IAAI,EAAE;kBAAQ,CAAE;kBACtB6D,SAAS,EAAE;oBAAE7D,IAAI,EAAE,QAAQ;oBAAEqC,QAAQ,EAAE;kBAAI,CAAE;kBAC7Cd,SAAS,EAAE;oBAAEvB,IAAI,EAAE,QAAQ;oBAAEqC,QAAQ,EAAE;kBAAI,CAAE;kBAC7C3B,SAAS,EAAE;oBAAEV,IAAI,EAAE;kBAAQ,CAAE;kBAC7B0D,SAAS,EAAE;oBAAE1D,IAAI,EAAE;kBAAQ,CAAE;kBAC7B8D,SAAS,EAAE;oBAAE9D,IAAI,EAAE;kBAAS;;;;;;;;GAQ3C,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IACpC,MAAMgD,MAAM;IAAA;IAAA,CAAAjD,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACf,IAAK,CAACC,EAAE;IAC/B,MAAM0D,gBAAgB;IAAA;IAAA,CAAAvE,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACc,SAAU;IAE3C,MAAM+B,QAAQ;IAAA;IAAA,CAAAxE,cAAA,GAAAG,CAAA,QAAG,MAAMD,WAAW,CAACuE,eAAe,CAACxB,MAAM,CAAC;IAE1D;IACA,MAAMyB,mBAAmB;IAAA;IAAA,CAAA1E,cAAA,GAAAG,CAAA,QAAGqE,QAAQ,CAACG,GAAG,CAACC,OAAO,IAAK;MAAA;MAAA5E,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAG,CAAA;MAAA;QACnD,GAAGyE,OAAO;QACVN,SAAS,EAAEM,OAAO,CAAC/D,EAAE,KAAK0D;OAC3B;KAAC,CAAC;IAAA;IAAAvE,cAAA,GAAAG,CAAA;IAEH,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE+D;KACP,CAAC;EACJ,CAAC,CAAC,CACH;EAED;EAAA;EAAA1E,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAAC8E,MAAM,CACR,sBAAsB,EACtB;IACEtC,UAAU,EAAElD,WAAW;IACvBgB,MAAM,EAAE;MACNyE,MAAM,EAAE;QACNtE,IAAI,EAAE,QAAQ;QACdC,UAAU,EAAE;UACVgC,SAAS,EAAE;YAAEjC,IAAI,EAAE;UAAQ;SAC5B;QACDuE,QAAQ,EAAE,CAAC,WAAW;OACvB;MACDxE,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BgC,OAAO,EAAE;cAAEhC,IAAI,EAAE;YAAQ;;;;;GAKlC,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IACpC,MAAM;MAAEwC;IAAS,CAAE;IAAA;IAAA,CAAAzC,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACmD,MAA+B;IAC7D,MAAM7B,MAAM;IAAA;IAAA,CAAAjD,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACf,IAAK,CAACC,EAAE;IAC/B,MAAM0D,gBAAgB;IAAA;IAAA,CAAAvE,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACc,SAAU;IAAA;IAAAzC,cAAA,GAAAG,CAAA;IAE3C,IAAIsC,SAAS,KAAK8B,gBAAgB,EAAE;MAAA;MAAAvE,cAAA,GAAAsD,CAAA;MAAAtD,cAAA,GAAAG,CAAA;MAClC,MAAMZ,QAAQ,CAACoE,UAAU,CAAC,+BAA+B,EAAE,+BAA+B,CAAC;IAC7F,CAAC;IAAA;IAAA;MAAA3D,cAAA,GAAAsD,CAAA;IAAA;IAAAtD,cAAA,GAAAG,CAAA;IAED,MAAMD,WAAW,CAAC8E,aAAa,CAACvC,SAAS,EAAEQ,MAAM,CAAC;IAAA;IAAAjD,cAAA,GAAAG,CAAA;IAElD,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACb8B,OAAO,EAAE;KACV,CAAC;EACJ,CAAC,CAAC,CACH;EAED;EAAA;EAAAxC,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAAC8E,MAAM,CACR,WAAW,EACX;IACEtC,UAAU,EAAElD,WAAW;IACvBgB,MAAM,EAAE;MACNE,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BgC,OAAO,EAAE;cAAEhC,IAAI,EAAE;YAAQ;;;;;GAKlC,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IACpC,MAAMgD,MAAM;IAAA;IAAA,CAAAjD,cAAA,GAAAG,CAAA,QAAGwB,OAAO,CAACf,IAAK,CAACC,EAAE;IAAA;IAAAb,cAAA,GAAAG,CAAA;IAE/B,MAAMD,WAAW,CAAC+E,iBAAiB,CAAChC,MAAM,CAAC;IAAA;IAAAjD,cAAA,GAAAG,CAAA;IAE3C,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACb8B,OAAO,EAAE;KACV,CAAC;EACJ,CAAC,CAAC,CACH;EAED;EAAA;EAAAxC,cAAA,GAAAG,CAAA;EACAJ,GAAG,CAACK,IAAI,CACN,SAAS,EACT;IACEmC,UAAU,EAAEjD,YAAY;IACxBe,MAAM,EAAE;MACNE,QAAQ,EAAE;QACR,GAAG,EAAE;UACHC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACVC,OAAO,EAAE;cAAEF,IAAI,EAAE;YAAS,CAAE;YAC5BG,IAAI,EAAE;cACJH,IAAI,EAAE,QAAQ;cACdC,UAAU,EAAE;gBACVyE,KAAK,EAAE;kBAAE1E,IAAI,EAAE;gBAAS,CAAE;gBAC1BI,IAAI,EAAE;kBACJJ,IAAI,EAAE,QAAQ;kBACdqC,QAAQ,EAAE,IAAI;kBACdpC,UAAU,EAAE;oBACVI,EAAE,EAAE;sBAAEL,IAAI,EAAE;oBAAQ,CAAE;oBACtBM,IAAI,EAAE;sBAAEN,IAAI,EAAE;oBAAQ,CAAE;oBACxBO,KAAK,EAAE;sBAAEP,IAAI,EAAE;oBAAQ,CAAE;oBACzBQ,IAAI,EAAE;sBAAER,IAAI,EAAE;oBAAQ;;iBAEzB;gBACDY,YAAY,EAAE;kBACZZ,IAAI,EAAE,QAAQ;kBACdqC,QAAQ,EAAE,IAAI;kBACdpC,UAAU,EAAE;oBACVI,EAAE,EAAE;sBAAEL,IAAI,EAAE;oBAAQ,CAAE;oBACtBM,IAAI,EAAE;sBAAEN,IAAI,EAAE;oBAAQ,CAAE;oBACxBa,IAAI,EAAE;sBAAEb,IAAI,EAAE;oBAAQ,CAAE;oBACxBc,QAAQ,EAAE;sBAAEd,IAAI,EAAE;oBAAQ;;;;;;;;;GAS3C,EACDhB,YAAY,CAAC,OAAOmC,OAAO,EAAEC,KAAK,KAAI;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IACpC,MAAMkF,OAAO;IAAA;IAAA,CAAAnF,cAAA,GAAAG,CAAA,QAAG,CAAC,CAACwB,OAAO,CAACf,IAAI;IAAA;IAAAZ,cAAA,GAAAG,CAAA;IAE9B,OAAOyB,KAAK,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC5B1B,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;QACJuE,KAAK,EAAEC,OAAO;QACdvE,IAAI;QAAE;QAAA,CAAAZ,cAAA,GAAAsD,CAAA,UAAA3B,OAAO,CAACf,IAAI;QAAA;QAAA,CAAAZ,cAAA,GAAAsD,CAAA,UAAI,IAAI;QAC1BlC,YAAY;QAAE;QAAA,CAAApB,cAAA,GAAAsD,CAAA,UAAA3B,OAAO,CAACP,YAAY;QAAA;QAAA,CAAApB,cAAA,GAAAsD,CAAA,UAAI,IAAI;;KAE7C,CAAC;EACJ,CAAC,CAAC,CACH;AACH","ignoreList":[]}