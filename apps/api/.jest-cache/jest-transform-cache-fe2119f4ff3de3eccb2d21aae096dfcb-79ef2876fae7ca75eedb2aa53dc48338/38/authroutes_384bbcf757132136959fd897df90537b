b2837fe1d7775bc98a7017ab8a3a86c1
/* istanbul ignore next */
function cov_14t0d8qzba() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\auth.routes.ts";
  var hash = "8c8ca052fd71b8765c610496c6721bb958a2147e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\auth.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "1": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 66,
          column: 8
        }
      },
      "2": {
        start: {
          line: 58,
          column: 36
        },
        end: {
          line: 58,
          column: 48
        }
      },
      "3": {
        start: {
          line: 59,
          column: 19
        },
        end: {
          line: 59,
          column: 29
        }
      },
      "4": {
        start: {
          line: 60,
          column: 26
        },
        end: {
          line: 60,
          column: 55
        }
      },
      "5": {
        start: {
          line: 61,
          column: 23
        },
        end: {
          line: 61,
          column: 78
        }
      },
      "6": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "7": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 123,
          column: 8
        }
      },
      "8": {
        start: {
          line: 116,
          column: 60
        },
        end: {
          line: 116,
          column: 72
        }
      },
      "9": {
        start: {
          line: 117,
          column: 19
        },
        end: {
          line: 117,
          column: 29
        }
      },
      "10": {
        start: {
          line: 118,
          column: 23
        },
        end: {
          line: 118,
          column: 98
        }
      },
      "11": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "12": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 152,
          column: 8
        }
      },
      "13": {
        start: {
          line: 146,
          column: 33
        },
        end: {
          line: 146,
          column: 45
        }
      },
      "14": {
        start: {
          line: 147,
          column: 23
        },
        end: {
          line: 147,
          column: 67
        }
      },
      "15": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "16": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 175,
          column: 8
        }
      },
      "17": {
        start: {
          line: 168,
          column: 26
        },
        end: {
          line: 168,
          column: 43
        }
      },
      "18": {
        start: {
          line: 169,
          column: 29
        },
        end: {
          line: 169,
          column: 63
        }
      },
      "19": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 58
        }
      },
      "20": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "21": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 228,
          column: 8
        }
      },
      "22": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 227,
          column: 11
        }
      },
      "23": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 281,
          column: 8
        }
      },
      "24": {
        start: {
          line: 245,
          column: 49
        },
        end: {
          line: 245,
          column: 61
        }
      },
      "25": {
        start: {
          line: 246,
          column: 23
        },
        end: {
          line: 246,
          column: 38
        }
      },
      "26": {
        start: {
          line: 248,
          column: 21
        },
        end: {
          line: 251,
          column: 10
        }
      },
      "27": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "28": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 54
        }
      },
      "29": {
        start: {
          line: 256,
          column: 23
        },
        end: {
          line: 256,
          column: 47
        }
      },
      "30": {
        start: {
          line: 257,
          column: 32
        },
        end: {
          line: 257,
          column: 84
        }
      },
      "31": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "32": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 99
        }
      },
      "33": {
        start: {
          line: 262,
          column: 34
        },
        end: {
          line: 262,
          column: 68
        }
      },
      "34": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "35": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      },
      "36": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 76
        }
      },
      "37": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 280,
          column: 11
        }
      },
      "38": {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 322,
          column: 8
        }
      },
      "39": {
        start: {
          line: 310,
          column: 23
        },
        end: {
          line: 310,
          column: 38
        }
      },
      "40": {
        start: {
          line: 311,
          column: 33
        },
        end: {
          line: 311,
          column: 50
        }
      },
      "41": {
        start: {
          line: 312,
          column: 25
        },
        end: {
          line: 312,
          column: 66
        }
      },
      "42": {
        start: {
          line: 314,
          column: 36
        },
        end: {
          line: 317,
          column: 11
        }
      },
      "43": {
        start: {
          line: 314,
          column: 61
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "44": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 321,
          column: 11
        }
      },
      "45": {
        start: {
          line: 324,
          column: 4
        },
        end: {
          line: 356,
          column: 8
        }
      },
      "46": {
        start: {
          line: 345,
          column: 30
        },
        end: {
          line: 345,
          column: 44
        }
      },
      "47": {
        start: {
          line: 346,
          column: 23
        },
        end: {
          line: 346,
          column: 38
        }
      },
      "48": {
        start: {
          line: 347,
          column: 33
        },
        end: {
          line: 347,
          column: 50
        }
      },
      "49": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "50": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 104
        }
      },
      "51": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 351,
          column: 59
        }
      },
      "52": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 355,
          column: 11
        }
      },
      "53": {
        start: {
          line: 358,
          column: 4
        },
        end: {
          line: 378,
          column: 8
        }
      },
      "54": {
        start: {
          line: 372,
          column: 23
        },
        end: {
          line: 372,
          column: 38
        }
      },
      "55": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 52
        }
      },
      "56": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 377,
          column: 11
        }
      },
      "57": {
        start: {
          line: 380,
          column: 4
        },
        end: {
          line: 428,
          column: 8
        }
      },
      "58": {
        start: {
          line: 419,
          column: 24
        },
        end: {
          line: 419,
          column: 38
        }
      },
      "59": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 427,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "authRoutes",
        decl: {
          start: {
            line: 7,
            column: 22
          },
          end: {
            line: 7,
            column: 32
          }
        },
        loc: {
          start: {
            line: 7,
            column: 38
          },
          end: {
            line: 429,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 21
          }
        },
        loc: {
          start: {
            line: 57,
            column: 46
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 57
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 115,
            column: 20
          },
          end: {
            line: 115,
            column: 21
          }
        },
        loc: {
          start: {
            line: 115,
            column: 46
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 115
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 145,
            column: 20
          },
          end: {
            line: 145,
            column: 21
          }
        },
        loc: {
          start: {
            line: 145,
            column: 46
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 145
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 21
          }
        },
        loc: {
          start: {
            line: 167,
            column: 46
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 167
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 220,
            column: 20
          },
          end: {
            line: 220,
            column: 21
          }
        },
        loc: {
          start: {
            line: 220,
            column: 46
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 220
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 244,
            column: 20
          },
          end: {
            line: 244,
            column: 21
          }
        },
        loc: {
          start: {
            line: 244,
            column: 46
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 244
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 309,
            column: 20
          },
          end: {
            line: 309,
            column: 21
          }
        },
        loc: {
          start: {
            line: 309,
            column: 46
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 309
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 314,
            column: 49
          },
          end: {
            line: 314,
            column: 50
          }
        },
        loc: {
          start: {
            line: 314,
            column: 61
          },
          end: {
            line: 317,
            column: 9
          }
        },
        line: 314
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 344,
            column: 20
          },
          end: {
            line: 344,
            column: 21
          }
        },
        loc: {
          start: {
            line: 344,
            column: 46
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 344
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 371,
            column: 20
          },
          end: {
            line: 371,
            column: 21
          }
        },
        loc: {
          start: {
            line: 371,
            column: 46
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 371
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 418,
            column: 20
          },
          end: {
            line: 418,
            column: 21
          }
        },
        loc: {
          start: {
            line: 418,
            column: 46
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 418
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "1": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "2": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "3": {
        loc: {
          start: {
            line: 424,
            column: 22
          },
          end: {
            line: 424,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 22
          },
          end: {
            line: 424,
            column: 34
          }
        }, {
          start: {
            line: 424,
            column: 38
          },
          end: {
            line: 424,
            column: 42
          }
        }],
        line: 424
      },
      "4": {
        loc: {
          start: {
            line: 425,
            column: 30
          },
          end: {
            line: 425,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 425,
            column: 30
          },
          end: {
            line: 425,
            column: 50
          }
        }, {
          start: {
            line: 425,
            column: 54
          },
          end: {
            line: 425,
            column: 58
          }
        }],
        line: 425
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\auth.routes.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\auth.routes.ts"],
      sourcesContent: ["import type { FastifyInstance } from 'fastify'\nimport { AuthService } from '@/services/auth.service'\nimport { requireAuth, optionalAuth } from '@/middleware/auth.middleware'\nimport { ApiError, ValidationError, asyncHandler } from '@/utils/errors'\nimport { logAuth } from '@/utils/logger'\nimport {\n  loginSchema,\n  registerSchema,\n  refreshTokenSchema,\n  changePasswordSchema,\n  type LoginRequest,\n  type RegisterRequest,\n  type RefreshTokenRequest,\n  type ChangePasswordRequest,\n} from '@utmify/shared'\n\n// Auth routes\nexport async function authRoutes(app: FastifyInstance) {\n  const authService = new AuthService(app)\n\n  // Login route\n  app.post<{ Body: LoginRequest }>(\n    '/login',\n    {\n      schema: {\n        body: loginSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  user: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                    },\n                  },\n                  tokens: {\n                    type: 'object',\n                    properties: {\n                      accessToken: { type: 'string' },\n                      refreshToken: { type: 'string' },\n                      expiresIn: { type: 'number' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { email, password } = request.body\n      const ip = request.ip\n      const userAgent = request.headers['user-agent']\n\n      const result = await authService.login(email, password, ip, userAgent)\n\n      return reply.status(200).send({\n        success: true,\n        data: result,\n      })\n    })\n  )\n\n  // Register route\n  app.post<{ Body: RegisterRequest }>(\n    '/register',\n    {\n      schema: {\n        body: registerSchema,\n        response: {\n          201: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  user: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                    },\n                  },\n                  tokens: {\n                    type: 'object',\n                    properties: {\n                      accessToken: { type: 'string' },\n                      refreshToken: { type: 'string' },\n                      expiresIn: { type: 'number' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { name, email, password, organizationName } = request.body\n      const ip = request.ip\n\n      const result = await authService.register(\n        { name, email, password, organizationName },\n        ip\n      )\n\n      return reply.status(201).send({\n        success: true,\n        data: result,\n      })\n    })\n  )\n\n  // Refresh token route\n  app.post<{ Body: RefreshTokenRequest }>(\n    '/refresh',\n    {\n      schema: {\n        body: refreshTokenSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  accessToken: { type: 'string' },\n                  refreshToken: { type: 'string' },\n                  expiresIn: { type: 'number' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { refreshToken } = request.body\n\n      const tokens = await authService.refreshToken(refreshToken)\n\n      return reply.status(200).send({\n        success: true,\n        data: tokens,\n      })\n    })\n  )\n\n  // Logout route\n  app.post(\n    '/logout',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const sessionId = request.sessionId!\n      const refreshToken = request.headers['x-refresh-token'] as string\n\n      await authService.logout(sessionId, refreshToken)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'Logged out successfully',\n      })\n    })\n  )\n\n  // Get current user route\n  app.get(\n    '/me',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  user: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      lastLoginAt: { type: 'string', nullable: true },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      settings: { type: 'object' },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      return reply.status(200).send({\n        success: true,\n        data: {\n          user: request.user!,\n          organization: request.organization!,\n        },\n      })\n    })\n  )\n\n  // Change password route\n  app.post<{ Body: ChangePasswordRequest }>(\n    '/change-password',\n    {\n      preHandler: requireAuth,\n      schema: {\n        body: changePasswordSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { currentPassword, newPassword } = request.body\n      const userId = request.user!.id\n\n      // Get user with password\n      const user = await app.db.user.findUnique({\n        where: { id: userId },\n        select: { id: true, password: true },\n      })\n\n      if (!user) {\n        throw ApiError.notFound('User not found')\n      }\n\n      // Verify current password\n      const bcrypt = await import('bcryptjs')\n      const isValidPassword = await bcrypt.compare(currentPassword, user.password)\n      \n      if (!isValidPassword) {\n        throw ApiError.badRequest('Current password is incorrect', 'INVALID_CURRENT_PASSWORD')\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 12)\n\n      // Update password\n      await app.db.user.update({\n        where: { id: userId },\n        data: { password: hashedNewPassword },\n      })\n\n      // Revoke all sessions except current one\n      await app.db.userSession.updateMany({\n        where: {\n          userId,\n          id: { not: request.sessionId! },\n        },\n        data: { expiresAt: new Date() },\n      })\n\n      logAuth('password_changed', userId, request.user!.email, request.ip)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'Password changed successfully',\n      })\n    })\n  )\n\n  // Get user sessions route\n  app.get(\n    '/sessions',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    id: { type: 'string' },\n                    ipAddress: { type: 'string', nullable: true },\n                    userAgent: { type: 'string', nullable: true },\n                    createdAt: { type: 'string' },\n                    expiresAt: { type: 'string' },\n                    isCurrent: { type: 'boolean' },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const userId = request.user!.id\n      const currentSessionId = request.sessionId!\n\n      const sessions = await authService.getUserSessions(userId)\n      \n      // Mark current session\n      const sessionsWithCurrent = sessions.map(session => ({\n        ...session,\n        isCurrent: session.id === currentSessionId,\n      }))\n\n      return reply.status(200).send({\n        success: true,\n        data: sessionsWithCurrent,\n      })\n    })\n  )\n\n  // Revoke session route\n  app.delete(\n    '/sessions/:sessionId',\n    {\n      preHandler: requireAuth,\n      schema: {\n        params: {\n          type: 'object',\n          properties: {\n            sessionId: { type: 'string' },\n          },\n          required: ['sessionId'],\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { sessionId } = request.params as { sessionId: string }\n      const userId = request.user!.id\n      const currentSessionId = request.sessionId!\n\n      if (sessionId === currentSessionId) {\n        throw ApiError.badRequest('Cannot revoke current session', 'CANNOT_REVOKE_CURRENT_SESSION')\n      }\n\n      await authService.revokeSession(sessionId, userId)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'Session revoked successfully',\n      })\n    })\n  )\n\n  // Revoke all sessions route\n  app.delete(\n    '/sessions',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const userId = request.user!.id\n\n      await authService.revokeAllSessions(userId)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'All sessions revoked successfully',\n      })\n    })\n  )\n\n  // Verify token route (for client-side token validation)\n  app.post(\n    '/verify',\n    {\n      preHandler: optionalAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  valid: { type: 'boolean' },\n                  user: {\n                    type: 'object',\n                    nullable: true,\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    nullable: true,\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const isValid = !!request.user\n\n      return reply.status(200).send({\n        success: true,\n        data: {\n          valid: isValid,\n          user: request.user || null,\n          organization: request.organization || null,\n        },\n      })\n    })\n  )\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8c8ca052fd71b8765c610496c6721bb958a2147e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14t0d8qzba = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14t0d8qzba();
import { AuthService } from '@/services/auth.service';
import { requireAuth, optionalAuth } from '@/middleware/auth.middleware';
import { ApiError, asyncHandler } from '@/utils/errors';
import { logAuth } from '@/utils/logger';
import { loginSchema, registerSchema, refreshTokenSchema, changePasswordSchema } from '@utmify/shared';
// Auth routes
export async function authRoutes(app) {
  /* istanbul ignore next */
  cov_14t0d8qzba().f[0]++;
  const authService =
  /* istanbul ignore next */
  (cov_14t0d8qzba().s[0]++, new AuthService(app));
  // Login route
  /* istanbul ignore next */
  cov_14t0d8qzba().s[1]++;
  app.post('/login', {
    schema: {
      body: loginSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                user: {
                  type: 'object',
                  properties: {
                    id: {
                      type: 'string'
                    },
                    name: {
                      type: 'string'
                    },
                    email: {
                      type: 'string'
                    },
                    role: {
                      type: 'string'
                    },
                    isActive: {
                      type: 'boolean'
                    },
                    createdAt: {
                      type: 'string'
                    },
                    updatedAt: {
                      type: 'string'
                    }
                  }
                },
                organization: {
                  type: 'object',
                  properties: {
                    id: {
                      type: 'string'
                    },
                    name: {
                      type: 'string'
                    },
                    slug: {
                      type: 'string'
                    },
                    planType: {
                      type: 'string'
                    },
                    isActive: {
                      type: 'boolean'
                    }
                  }
                },
                tokens: {
                  type: 'object',
                  properties: {
                    accessToken: {
                      type: 'string'
                    },
                    refreshToken: {
                      type: 'string'
                    },
                    expiresIn: {
                      type: 'number'
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[1]++;
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[2]++, request.body);
    const ip =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[3]++, request.ip);
    const userAgent =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[4]++, request.headers['user-agent']);
    const result =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[5]++, await authService.login(email, password, ip, userAgent));
    /* istanbul ignore next */
    cov_14t0d8qzba().s[6]++;
    return reply.status(200).send({
      success: true,
      data: result
    });
  }));
  // Register route
  /* istanbul ignore next */
  cov_14t0d8qzba().s[7]++;
  app.post('/register', {
    schema: {
      body: registerSchema,
      response: {
        201: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                user: {
                  type: 'object',
                  properties: {
                    id: {
                      type: 'string'
                    },
                    name: {
                      type: 'string'
                    },
                    email: {
                      type: 'string'
                    },
                    role: {
                      type: 'string'
                    },
                    isActive: {
                      type: 'boolean'
                    },
                    createdAt: {
                      type: 'string'
                    },
                    updatedAt: {
                      type: 'string'
                    }
                  }
                },
                organization: {
                  type: 'object',
                  properties: {
                    id: {
                      type: 'string'
                    },
                    name: {
                      type: 'string'
                    },
                    slug: {
                      type: 'string'
                    },
                    planType: {
                      type: 'string'
                    },
                    isActive: {
                      type: 'boolean'
                    }
                  }
                },
                tokens: {
                  type: 'object',
                  properties: {
                    accessToken: {
                      type: 'string'
                    },
                    refreshToken: {
                      type: 'string'
                    },
                    expiresIn: {
                      type: 'number'
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[2]++;
    const {
      name,
      email,
      password,
      organizationName
    } =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[8]++, request.body);
    const ip =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[9]++, request.ip);
    const result =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[10]++, await authService.register({
      name,
      email,
      password,
      organizationName
    }, ip));
    /* istanbul ignore next */
    cov_14t0d8qzba().s[11]++;
    return reply.status(201).send({
      success: true,
      data: result
    });
  }));
  // Refresh token route
  /* istanbul ignore next */
  cov_14t0d8qzba().s[12]++;
  app.post('/refresh', {
    schema: {
      body: refreshTokenSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                accessToken: {
                  type: 'string'
                },
                refreshToken: {
                  type: 'string'
                },
                expiresIn: {
                  type: 'number'
                }
              }
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[3]++;
    const {
      refreshToken
    } =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[13]++, request.body);
    const tokens =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[14]++, await authService.refreshToken(refreshToken));
    /* istanbul ignore next */
    cov_14t0d8qzba().s[15]++;
    return reply.status(200).send({
      success: true,
      data: tokens
    });
  }));
  // Logout route
  /* istanbul ignore next */
  cov_14t0d8qzba().s[16]++;
  app.post('/logout', {
    preHandler: requireAuth,
    schema: {
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            message: {
              type: 'string'
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[4]++;
    const sessionId =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[17]++, request.sessionId);
    const refreshToken =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[18]++, request.headers['x-refresh-token']);
    /* istanbul ignore next */
    cov_14t0d8qzba().s[19]++;
    await authService.logout(sessionId, refreshToken);
    /* istanbul ignore next */
    cov_14t0d8qzba().s[20]++;
    return reply.status(200).send({
      success: true,
      message: 'Logged out successfully'
    });
  }));
  // Get current user route
  /* istanbul ignore next */
  cov_14t0d8qzba().s[21]++;
  app.get('/me', {
    preHandler: requireAuth,
    schema: {
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                user: {
                  type: 'object',
                  properties: {
                    id: {
                      type: 'string'
                    },
                    name: {
                      type: 'string'
                    },
                    email: {
                      type: 'string'
                    },
                    role: {
                      type: 'string'
                    },
                    isActive: {
                      type: 'boolean'
                    },
                    lastLoginAt: {
                      type: 'string',
                      nullable: true
                    },
                    createdAt: {
                      type: 'string'
                    },
                    updatedAt: {
                      type: 'string'
                    }
                  }
                },
                organization: {
                  type: 'object',
                  properties: {
                    id: {
                      type: 'string'
                    },
                    name: {
                      type: 'string'
                    },
                    slug: {
                      type: 'string'
                    },
                    planType: {
                      type: 'string'
                    },
                    isActive: {
                      type: 'boolean'
                    },
                    settings: {
                      type: 'object'
                    },
                    createdAt: {
                      type: 'string'
                    },
                    updatedAt: {
                      type: 'string'
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[5]++;
    cov_14t0d8qzba().s[22]++;
    return reply.status(200).send({
      success: true,
      data: {
        user: request.user,
        organization: request.organization
      }
    });
  }));
  // Change password route
  /* istanbul ignore next */
  cov_14t0d8qzba().s[23]++;
  app.post('/change-password', {
    preHandler: requireAuth,
    schema: {
      body: changePasswordSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            message: {
              type: 'string'
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[6]++;
    const {
      currentPassword,
      newPassword
    } =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[24]++, request.body);
    const userId =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[25]++, request.user.id);
    // Get user with password
    const user =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[26]++, await app.db.user.findUnique({
      where: {
        id: userId
      },
      select: {
        id: true,
        password: true
      }
    }));
    /* istanbul ignore next */
    cov_14t0d8qzba().s[27]++;
    if (!user) {
      /* istanbul ignore next */
      cov_14t0d8qzba().b[0][0]++;
      cov_14t0d8qzba().s[28]++;
      throw ApiError.notFound('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_14t0d8qzba().b[0][1]++;
    }
    // Verify current password
    const bcrypt =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[29]++, await import('bcryptjs'));
    const isValidPassword =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[30]++, await bcrypt.compare(currentPassword, user.password));
    /* istanbul ignore next */
    cov_14t0d8qzba().s[31]++;
    if (!isValidPassword) {
      /* istanbul ignore next */
      cov_14t0d8qzba().b[1][0]++;
      cov_14t0d8qzba().s[32]++;
      throw ApiError.badRequest('Current password is incorrect', 'INVALID_CURRENT_PASSWORD');
    } else
    /* istanbul ignore next */
    {
      cov_14t0d8qzba().b[1][1]++;
    }
    // Hash new password
    const hashedNewPassword =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[33]++, await bcrypt.hash(newPassword, 12));
    // Update password
    /* istanbul ignore next */
    cov_14t0d8qzba().s[34]++;
    await app.db.user.update({
      where: {
        id: userId
      },
      data: {
        password: hashedNewPassword
      }
    });
    // Revoke all sessions except current one
    /* istanbul ignore next */
    cov_14t0d8qzba().s[35]++;
    await app.db.userSession.updateMany({
      where: {
        userId,
        id: {
          not: request.sessionId
        }
      },
      data: {
        expiresAt: new Date()
      }
    });
    /* istanbul ignore next */
    cov_14t0d8qzba().s[36]++;
    logAuth('password_changed', userId, request.user.email, request.ip);
    /* istanbul ignore next */
    cov_14t0d8qzba().s[37]++;
    return reply.status(200).send({
      success: true,
      message: 'Password changed successfully'
    });
  }));
  // Get user sessions route
  /* istanbul ignore next */
  cov_14t0d8qzba().s[38]++;
  app.get('/sessions', {
    preHandler: requireAuth,
    schema: {
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: {
                    type: 'string'
                  },
                  ipAddress: {
                    type: 'string',
                    nullable: true
                  },
                  userAgent: {
                    type: 'string',
                    nullable: true
                  },
                  createdAt: {
                    type: 'string'
                  },
                  expiresAt: {
                    type: 'string'
                  },
                  isCurrent: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[7]++;
    const userId =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[39]++, request.user.id);
    const currentSessionId =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[40]++, request.sessionId);
    const sessions =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[41]++, await authService.getUserSessions(userId));
    // Mark current session
    const sessionsWithCurrent =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[42]++, sessions.map(session => {
      /* istanbul ignore next */
      cov_14t0d8qzba().f[8]++;
      cov_14t0d8qzba().s[43]++;
      return {
        ...session,
        isCurrent: session.id === currentSessionId
      };
    }));
    /* istanbul ignore next */
    cov_14t0d8qzba().s[44]++;
    return reply.status(200).send({
      success: true,
      data: sessionsWithCurrent
    });
  }));
  // Revoke session route
  /* istanbul ignore next */
  cov_14t0d8qzba().s[45]++;
  app.delete('/sessions/:sessionId', {
    preHandler: requireAuth,
    schema: {
      params: {
        type: 'object',
        properties: {
          sessionId: {
            type: 'string'
          }
        },
        required: ['sessionId']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            message: {
              type: 'string'
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[9]++;
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[46]++, request.params);
    const userId =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[47]++, request.user.id);
    const currentSessionId =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[48]++, request.sessionId);
    /* istanbul ignore next */
    cov_14t0d8qzba().s[49]++;
    if (sessionId === currentSessionId) {
      /* istanbul ignore next */
      cov_14t0d8qzba().b[2][0]++;
      cov_14t0d8qzba().s[50]++;
      throw ApiError.badRequest('Cannot revoke current session', 'CANNOT_REVOKE_CURRENT_SESSION');
    } else
    /* istanbul ignore next */
    {
      cov_14t0d8qzba().b[2][1]++;
    }
    cov_14t0d8qzba().s[51]++;
    await authService.revokeSession(sessionId, userId);
    /* istanbul ignore next */
    cov_14t0d8qzba().s[52]++;
    return reply.status(200).send({
      success: true,
      message: 'Session revoked successfully'
    });
  }));
  // Revoke all sessions route
  /* istanbul ignore next */
  cov_14t0d8qzba().s[53]++;
  app.delete('/sessions', {
    preHandler: requireAuth,
    schema: {
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            message: {
              type: 'string'
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[10]++;
    const userId =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[54]++, request.user.id);
    /* istanbul ignore next */
    cov_14t0d8qzba().s[55]++;
    await authService.revokeAllSessions(userId);
    /* istanbul ignore next */
    cov_14t0d8qzba().s[56]++;
    return reply.status(200).send({
      success: true,
      message: 'All sessions revoked successfully'
    });
  }));
  // Verify token route (for client-side token validation)
  /* istanbul ignore next */
  cov_14t0d8qzba().s[57]++;
  app.post('/verify', {
    preHandler: optionalAuth,
    schema: {
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                valid: {
                  type: 'boolean'
                },
                user: {
                  type: 'object',
                  nullable: true,
                  properties: {
                    id: {
                      type: 'string'
                    },
                    name: {
                      type: 'string'
                    },
                    email: {
                      type: 'string'
                    },
                    role: {
                      type: 'string'
                    }
                  }
                },
                organization: {
                  type: 'object',
                  nullable: true,
                  properties: {
                    id: {
                      type: 'string'
                    },
                    name: {
                      type: 'string'
                    },
                    slug: {
                      type: 'string'
                    },
                    planType: {
                      type: 'string'
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_14t0d8qzba().f[11]++;
    const isValid =
    /* istanbul ignore next */
    (cov_14t0d8qzba().s[58]++, !!request.user);
    /* istanbul ignore next */
    cov_14t0d8qzba().s[59]++;
    return reply.status(200).send({
      success: true,
      data: {
        valid: isValid,
        user:
        /* istanbul ignore next */
        (cov_14t0d8qzba().b[3][0]++, request.user) ||
        /* istanbul ignore next */
        (cov_14t0d8qzba().b[3][1]++, null),
        organization:
        /* istanbul ignore next */
        (cov_14t0d8qzba().b[4][0]++, request.organization) ||
        /* istanbul ignore next */
        (cov_14t0d8qzba().b[4][1]++, null)
      }
    });
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,