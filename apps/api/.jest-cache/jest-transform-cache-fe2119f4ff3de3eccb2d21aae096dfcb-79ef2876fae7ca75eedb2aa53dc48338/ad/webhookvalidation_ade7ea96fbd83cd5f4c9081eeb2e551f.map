{"version":3,"names":["cov_1zxwnkci64","actualCoverage","crypto","rateLimit","webhookRateLimit","s","windowMs","max","message","standardHeaders","legacyHeaders","extractSignature","req","provider","f","headers","b","metaSignature","signature","replace","algorithm","stripeSignature","elements","split","timestamp","forEach","element","key","value","paypalSignature","paypalId","paypalTimestamp","authHeader","startsWith","validateMetaWebhook","payload","secret","expectedSignature","createHmac","update","digest","timingSafeEqual","Buffer","from","error","console","validateStripeWebhook","currentTime","Math","floor","Date","now","webhookTime","parseInt","signedPayload","validatePayPalWebhook","transmissionId","webhookId","certId","expectedPayload","createHash","length","validateGoogleWebhook","token","expectedAudience","parts","header","JSON","parse","toString","aud","exp","verifyChallenge","mode","challenge","verifyToken","validateWebhook","organizationId","isValid","stringify","body","metaSecret","process","env","META_APP_SECRET","stripeSecret","STRIPE_WEBHOOK_SECRET","GOOGLE_PUBSUB_AUDIENCE","undefined","WEBHOOK_CONFIG","meta","signatureHeader","encoding","whatsapp","stripe","timestampTolerance","paypal","google"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\utils\\webhook-validation.ts"],"sourcesContent":["import crypto from 'crypto';\nimport { Request } from 'express';\nimport rateLimit from 'express-rate-limit';\n\n// Interfaces\nexport interface WebhookValidationResult {\n  isValid: boolean;\n  error?: string;\n  organizationId?: string;\n}\n\nexport interface WebhookSignature {\n  signature: string;\n  timestamp?: string;\n  algorithm?: string;\n}\n\n// Rate limiter para webhooks\nexport const webhookRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutos\n  max: 1000, // máximo 1000 requests por IP\n  message: 'Too many webhook requests',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Extração de assinaturas por provedor\nexport function extractSignature(req: Request, provider: string): WebhookSignature | null {\n  const headers = req.headers;\n  \n  switch (provider) {\n    case 'meta':\n    case 'whatsapp':\n      const metaSignature = headers['x-hub-signature-256'] as string;\n      if (!metaSignature) return null;\n      return {\n        signature: metaSignature.replace('sha256=', ''),\n        algorithm: 'sha256'\n      };\n      \n    case 'stripe':\n      const stripeSignature = headers['stripe-signature'] as string;\n      if (!stripeSignature) return null;\n      \n      const elements = stripeSignature.split(',');\n      let timestamp = '';\n      let signature = '';\n      \n      elements.forEach(element => {\n        const [key, value] = element.split('=');\n        if (key === 't') timestamp = value;\n        if (key === 'v1') signature = value;\n      });\n      \n      return { signature, timestamp, algorithm: 'sha256' };\n      \n    case 'paypal':\n      const paypalSignature = headers['paypal-transmission-sig'] as string;\n      const paypalId = headers['paypal-transmission-id'] as string;\n      const paypalTimestamp = headers['paypal-transmission-time'] as string;\n      \n      if (!paypalSignature || !paypalId || !paypalTimestamp) return null;\n      \n      return {\n        signature: paypalSignature,\n        timestamp: paypalTimestamp,\n        algorithm: 'sha256'\n      };\n      \n    case 'google':\n      // Google usa JWT no header Authorization\n      const authHeader = headers['authorization'] as string;\n      if (!authHeader || !authHeader.startsWith('Bearer ')) return null;\n      \n      return {\n        signature: authHeader.replace('Bearer ', ''),\n        algorithm: 'jwt'\n      };\n      \n    default:\n      return null;\n  }\n}\n\n// Validação HMAC para Meta Ads e WhatsApp\nexport function validateMetaWebhook(\n  payload: string,\n  signature: string,\n  secret: string\n): boolean {\n  try {\n    const expectedSignature = crypto\n      .createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('hex');\n    \n    return crypto.timingSafeEqual(\n      Buffer.from(signature, 'hex'),\n      Buffer.from(expectedSignature, 'hex')\n    );\n  } catch (error) {\n    console.error('Meta webhook validation error:', error);\n    return false;\n  }\n}\n\n// Validação HMAC para Stripe\nexport function validateStripeWebhook(\n  payload: string,\n  signature: string,\n  timestamp: string,\n  secret: string\n): boolean {\n  try {\n    // Verificar se o timestamp não é muito antigo (5 minutos)\n    const currentTime = Math.floor(Date.now() / 1000);\n    const webhookTime = parseInt(timestamp);\n    \n    if (currentTime - webhookTime > 300) {\n      console.error('Stripe webhook timestamp too old');\n      return false;\n    }\n    \n    const signedPayload = `${timestamp}.${payload}`;\n    const expectedSignature = crypto\n      .createHmac('sha256', secret)\n      .update(signedPayload, 'utf8')\n      .digest('hex');\n    \n    return crypto.timingSafeEqual(\n      Buffer.from(signature, 'hex'),\n      Buffer.from(expectedSignature, 'hex')\n    );\n  } catch (error) {\n    console.error('Stripe webhook validation error:', error);\n    return false;\n  }\n}\n\n// Validação para PayPal\nexport function validatePayPalWebhook(\n  payload: string,\n  signature: string,\n  transmissionId: string,\n  timestamp: string,\n  webhookId: string,\n  certId: string\n): boolean {\n  try {\n    // PayPal usa validação baseada em certificado\n    // Aqui seria necessário implementar a validação completa do certificado\n    // Por simplicidade, vamos fazer uma validação básica\n    \n    const expectedPayload = `${transmissionId}|${timestamp}|${webhookId}|${crypto.createHash('sha256').update(payload).digest('base64')}`;\n    \n    // Em produção, você deve usar o certificado público do PayPal\n    // para verificar a assinatura RSA-SHA256\n    \n    return signature.length > 0 && transmissionId.length > 0;\n  } catch (error) {\n    console.error('PayPal webhook validation error:', error);\n    return false;\n  }\n}\n\n// Validação JWT para Google Ads (Pub/Sub)\nexport function validateGoogleWebhook(\n  token: string,\n  expectedAudience: string\n): boolean {\n  try {\n    // Em produção, você deve usar a biblioteca google-auth-library\n    // para verificar o JWT token do Google\n    \n    const parts = token.split('.');\n    if (parts.length !== 3) return false;\n    \n    const header = JSON.parse(Buffer.from(parts[0], 'base64').toString());\n    const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());\n    \n    // Verificações básicas\n    if (payload.aud !== expectedAudience) return false;\n    if (payload.exp < Math.floor(Date.now() / 1000)) return false;\n    \n    return true;\n  } catch (error) {\n    console.error('Google webhook validation error:', error);\n    return false;\n  }\n}\n\n// Verificação de desafio para Meta e WhatsApp\nexport function verifyChallenge(\n  mode: string,\n  token: string,\n  challenge: string,\n  verifyToken: string\n): string | null {\n  if (mode === 'subscribe' && token === verifyToken) {\n    return challenge;\n  }\n  return null;\n}\n\n// Função principal de validação\nexport async function validateWebhook(\n  req: Request,\n  provider: string,\n  organizationId: string\n): Promise<WebhookValidationResult> {\n  try {\n    const signature = extractSignature(req, provider);\n    if (!signature) {\n      return {\n        isValid: false,\n        error: 'Missing or invalid signature header'\n      };\n    }\n    \n    const payload = JSON.stringify(req.body);\n    \n    // Aqui você buscaria as credenciais da organização no banco\n    // const orgCredentials = await getOrganizationCredentials(organizationId, provider);\n    \n    let isValid = false;\n    \n    switch (provider) {\n      case 'meta':\n      case 'whatsapp':\n        // const metaSecret = orgCredentials.metaAppSecret;\n        const metaSecret = process.env.META_APP_SECRET || 'default-secret';\n        isValid = validateMetaWebhook(payload, signature.signature, metaSecret);\n        break;\n        \n      case 'stripe':\n        if (!signature.timestamp) {\n          return { isValid: false, error: 'Missing timestamp' };\n        }\n        // const stripeSecret = orgCredentials.stripeWebhookSecret;\n        const stripeSecret = process.env.STRIPE_WEBHOOK_SECRET || 'default-secret';\n        isValid = validateStripeWebhook(payload, signature.signature, signature.timestamp, stripeSecret);\n        break;\n        \n      case 'paypal':\n        // Implementação simplificada\n        isValid = signature.signature.length > 0;\n        break;\n        \n      case 'google':\n        const expectedAudience = process.env.GOOGLE_PUBSUB_AUDIENCE || 'default-audience';\n        isValid = validateGoogleWebhook(signature.signature, expectedAudience);\n        break;\n        \n      default:\n        return {\n          isValid: false,\n          error: `Unsupported provider: ${provider}`\n        };\n    }\n    \n    return {\n      isValid,\n      organizationId: isValid ? organizationId : undefined,\n      error: isValid ? undefined : 'Invalid signature'\n    };\n    \n  } catch (error) {\n    console.error('Webhook validation error:', error);\n    return {\n      isValid: false,\n      error: 'Validation failed'\n    };\n  }\n}\n\n// Configurações por provedor\nexport const WEBHOOK_CONFIG = {\n  meta: {\n    signatureHeader: 'x-hub-signature-256',\n    algorithm: 'sha256',\n    encoding: 'hex'\n  },\n  whatsapp: {\n    signatureHeader: 'x-hub-signature-256',\n    algorithm: 'sha256',\n    encoding: 'hex'\n  },\n  stripe: {\n    signatureHeader: 'stripe-signature',\n    algorithm: 'sha256',\n    encoding: 'hex',\n    timestampTolerance: 300 // 5 minutos\n  },\n  paypal: {\n    signatureHeader: 'paypal-transmission-sig',\n    algorithm: 'rsa-sha256',\n    encoding: 'base64'\n  },\n  google: {\n    signatureHeader: 'authorization',\n    algorithm: 'jwt',\n    encoding: 'base64'\n  }\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}