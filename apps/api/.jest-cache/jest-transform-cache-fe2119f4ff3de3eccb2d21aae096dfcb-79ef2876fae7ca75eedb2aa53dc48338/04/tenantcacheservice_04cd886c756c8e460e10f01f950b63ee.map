{"version":3,"names":["cov_1l5n09ug7n","actualCoverage","Injectable","Logger","ConfigService","Redis","TenantDatabaseService","TenantCacheService","s","TenantCacheService_1","configService","tenantDb","logger","name","redis","defaultTTL","keyPrefix","stats","Map","constructor","f","host","get","port","password","db","retryDelayOnFailover","maxRetriesPerRequest","lazyConnect","on","log","error","generateKey","tenantSlug","key","options","b","context","getCurrentTenantContext","Error","cacheKey","value","updateStats","serialize","JSON","parse","message","set","ttl","serializedValue","stringify","String","compress","length","result","setex","del","exists","expire","mget","keys","cacheKeys","map","values","mset","keyValues","pipeline","Object","entries","results","exec","every","clearTenantCache","pattern","getTenantKeys","searchPattern","prefix","replace","getTenantStats","hits","misses","memory","type","remember","callback","cached","invalidateByTag","tag","cleanupExpiredKeys","getMemoryInfo","info","__decorate","_a","_b"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-cache.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\nimport { TenantDatabaseService } from './tenant-database.service';\n\nexport interface CacheOptions {\n  ttl?: number; // Time to live em segundos\n  compress?: boolean; // Comprimir dados grandes\n  serialize?: boolean; // Serializar objetos automaticamente\n}\n\nexport interface TenantCacheStats {\n  hits: number;\n  misses: number;\n  keys: number;\n  memory: number;\n}\n\n@Injectable()\nexport class TenantCacheService {\n  private readonly logger = new Logger(TenantCacheService.name);\n  private readonly redis: Redis;\n  private readonly defaultTTL = 3600; // 1 hora\n  private readonly keyPrefix = 'utmify';\n  private readonly stats = new Map<string, TenantCacheStats>();\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly tenantDb: TenantDatabaseService,\n  ) {\n    this.redis = new Redis({\n      host: this.configService.get<string>('REDIS_HOST', 'localhost'),\n      port: this.configService.get<number>('REDIS_PORT', 6379),\n      password: this.configService.get<string>('REDIS_PASSWORD'),\n      db: this.configService.get<number>('REDIS_DB', 0),\n      retryDelayOnFailover: 100,\n      maxRetriesPerRequest: 3,\n      lazyConnect: true,\n    });\n\n    this.redis.on('connect', () => {\n      this.logger.log('Conectado ao Redis');\n    });\n\n    this.redis.on('error', (error) => {\n      this.logger.error('Erro no Redis:', error);\n    });\n  }\n\n  /**\n   * Gera chave de cache com prefixo do tenant\n   */\n  private generateKey(tenantSlug: string, key: string): string {\n    return `${this.keyPrefix}:tenant:${tenantSlug}:${key}`;\n  }\n\n  /**\n   * Obtém valor do cache para o tenant atual\n   */\n  async get<T = any>(key: string, options: CacheOptions = {}): Promise<T | null> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    \n    try {\n      const value = await this.redis.get(cacheKey);\n      \n      if (value === null) {\n        this.updateStats(context.tenantSlug, 'miss');\n        return null;\n      }\n\n      this.updateStats(context.tenantSlug, 'hit');\n      \n      // Deserializar se necessário\n      if (options.serialize !== false) {\n        try {\n          return JSON.parse(value);\n        } catch {\n          return value as T;\n        }\n      }\n      \n      return value as T;\n    } catch (error) {\n      this.logger.error(`Erro ao buscar cache ${cacheKey}: ${error.message}`);\n      return null;\n    }\n  }\n\n  /**\n   * Define valor no cache para o tenant atual\n   */\n  async set(\n    key: string,\n    value: any,\n    options: CacheOptions = {}\n  ): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    const ttl = options.ttl || this.defaultTTL;\n    \n    try {\n      let serializedValue: string;\n      \n      // Serializar se necessário\n      if (options.serialize !== false && typeof value === 'object') {\n        serializedValue = JSON.stringify(value);\n      } else {\n        serializedValue = String(value);\n      }\n\n      // Comprimir se necessário (implementar se valor for muito grande)\n      if (options.compress && serializedValue.length > 1024) {\n        // TODO: Implementar compressão com zlib\n      }\n\n      const result = await this.redis.setex(cacheKey, ttl, serializedValue);\n      return result === 'OK';\n    } catch (error) {\n      this.logger.error(`Erro ao definir cache ${cacheKey}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Remove valor do cache para o tenant atual\n   */\n  async del(key: string): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    \n    try {\n      const result = await this.redis.del(cacheKey);\n      return result > 0;\n    } catch (error) {\n      this.logger.error(`Erro ao remover cache ${cacheKey}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Verifica se chave existe no cache do tenant atual\n   */\n  async exists(key: string): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    \n    try {\n      const result = await this.redis.exists(cacheKey);\n      return result === 1;\n    } catch (error) {\n      this.logger.error(`Erro ao verificar cache ${cacheKey}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Define TTL para uma chave existente\n   */\n  async expire(key: string, ttl: number): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    \n    try {\n      const result = await this.redis.expire(cacheKey, ttl);\n      return result === 1;\n    } catch (error) {\n      this.logger.error(`Erro ao definir TTL para ${cacheKey}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Obtém múltiplos valores do cache\n   */\n  async mget<T = any>(keys: string[]): Promise<(T | null)[]> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKeys = keys.map(key => this.generateKey(context.tenantSlug, key));\n    \n    try {\n      const values = await this.redis.mget(...cacheKeys);\n      \n      return values.map(value => {\n        if (value === null) {\n          this.updateStats(context.tenantSlug, 'miss');\n          return null;\n        }\n        \n        this.updateStats(context.tenantSlug, 'hit');\n        \n        try {\n          return JSON.parse(value);\n        } catch {\n          return value as T;\n        }\n      });\n    } catch (error) {\n      this.logger.error(`Erro ao buscar múltiplos caches: ${error.message}`);\n      return keys.map(() => null);\n    }\n  }\n\n  /**\n   * Define múltiplos valores no cache\n   */\n  async mset(keyValues: Record<string, any>, ttl?: number): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    try {\n      const pipeline = this.redis.pipeline();\n      \n      for (const [key, value] of Object.entries(keyValues)) {\n        const cacheKey = this.generateKey(context.tenantSlug, key);\n        const serializedValue = typeof value === 'object' ? JSON.stringify(value) : String(value);\n        \n        if (ttl) {\n          pipeline.setex(cacheKey, ttl, serializedValue);\n        } else {\n          pipeline.setex(cacheKey, this.defaultTTL, serializedValue);\n        }\n      }\n      \n      const results = await pipeline.exec();\n      return results?.every(([error, result]) => !error && result === 'OK') || false;\n    } catch (error) {\n      this.logger.error(`Erro ao definir múltiplos caches: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Limpa todo o cache do tenant atual\n   */\n  async clearTenantCache(): Promise<number> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const pattern = this.generateKey(context.tenantSlug, '*');\n    \n    try {\n      const keys = await this.redis.keys(pattern);\n      \n      if (keys.length === 0) {\n        return 0;\n      }\n      \n      const result = await this.redis.del(...keys);\n      this.logger.log(`Cache limpo para tenant ${context.tenantSlug}: ${result} chaves removidas`);\n      \n      return result;\n    } catch (error) {\n      this.logger.error(`Erro ao limpar cache do tenant: ${error.message}`);\n      return 0;\n    }\n  }\n\n  /**\n   * Lista todas as chaves do tenant atual\n   */\n  async getTenantKeys(pattern: string = '*'): Promise<string[]> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const searchPattern = this.generateKey(context.tenantSlug, pattern);\n    \n    try {\n      const keys = await this.redis.keys(searchPattern);\n      \n      // Remover prefixo para retornar apenas as chaves originais\n      const prefix = this.generateKey(context.tenantSlug, '');\n      return keys.map(key => key.replace(prefix, ''));\n    } catch (error) {\n      this.logger.error(`Erro ao listar chaves do tenant: ${error.message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Obtém estatísticas do cache por tenant\n   */\n  getTenantStats(tenantSlug: string): TenantCacheStats {\n    return this.stats.get(tenantSlug) || {\n      hits: 0,\n      misses: 0,\n      keys: 0,\n      memory: 0,\n    };\n  }\n\n  /**\n   * Atualiza estatísticas do cache\n   */\n  private updateStats(tenantSlug: string, type: 'hit' | 'miss'): void {\n    const stats = this.stats.get(tenantSlug) || {\n      hits: 0,\n      misses: 0,\n      keys: 0,\n      memory: 0,\n    };\n\n    if (type === 'hit') {\n      stats.hits++;\n    } else {\n      stats.misses++;\n    }\n\n    this.stats.set(tenantSlug, stats);\n  }\n\n  /**\n   * Cache com fallback para função\n   */\n  async remember<T>(\n    key: string,\n    callback: () => Promise<T>,\n    options: CacheOptions = {}\n  ): Promise<T> {\n    // Tentar buscar no cache primeiro\n    const cached = await this.get<T>(key, options);\n    \n    if (cached !== null) {\n      return cached;\n    }\n\n    // Executar callback e cachear resultado\n    const result = await callback();\n    await this.set(key, result, options);\n    \n    return result;\n  }\n\n  /**\n   * Invalidação de cache por tags\n   */\n  async invalidateByTag(tag: string): Promise<number> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const pattern = this.generateKey(context.tenantSlug, `*:tag:${tag}:*`);\n    \n    try {\n      const keys = await this.redis.keys(pattern);\n      \n      if (keys.length === 0) {\n        return 0;\n      }\n      \n      return await this.redis.del(...keys);\n    } catch (error) {\n      this.logger.error(`Erro ao invalidar cache por tag ${tag}: ${error.message}`);\n      return 0;\n    }\n  }\n\n  /**\n   * Limpa caches expirados (limpeza manual)\n   */\n  async cleanupExpiredKeys(): Promise<number> {\n    // Redis já remove chaves expiradas automaticamente\n    // Esta função pode ser usada para limpeza adicional se necessário\n    return 0;\n  }\n\n  /**\n   * Obtém informações de memória do Redis\n   */\n  async getMemoryInfo(): Promise<any> {\n    try {\n      const info = await this.redis.memory('usage');\n      return info;\n    } catch (error) {\n      this.logger.error(`Erro ao obter informações de memória: ${error.message}`);\n      return null;\n    }\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}