{"version":3,"names":["cov_2m5wgvitkk","actualCoverage","s","logger_1","require","StoredProceduresService","prisma","constructor","f","calculateKPIMetrics","organizationId","campaignIds","startDate","endDate","start","b","Date","now","end","logger","debug","result","$queryRaw","map","id","join","error","Error","getTopCampaigns","limit","calculateFunnelMetrics","campaignId","getRealtimeDashboard","hoursBack","aggregateHourlyToDaily","targetDate","date","processedCount","aggregate_hourly_to_daily","info","toISOString","split","cleanupOldMetrics","retentionDays","deletedCount","cleanup_old_metrics","executeCustomQuery","query","params","$queryRawUnsafe","checkStoredProceduresHealth","expectedProcedures","p","availableProcedures","r","routine_name","missingProcedures","filter","proc","includes","available","length","procedures","missing","installStoredProcedures","warn","getPerformanceStats","exports","storedProceduresService","getStoredProceduresService"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stored-procedures.service.ts"],"sourcesContent":["import { PrismaService } from '../database/prisma.service';\nimport { logger } from '../utils/logger';\n\n// Interfaces for stored procedure results\nexport interface StoredProcedureKPIResult {\n  revenue: number;\n  ad_spend: number;\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  roas: number;\n  roi: number;\n  cpc: number;\n  cpm: number;\n  cac: number;\n  ctr: number;\n  conversion_rate: number;\n  arpu: number;\n  ltv: number;\n  margin: number;\n  profit: number;\n}\n\nexport interface TopCampaignResult {\n  campaign_id: string;\n  campaign_name: string;\n  revenue: number;\n  ad_spend: number;\n  roas: number;\n  conversions: number;\n}\n\nexport interface FunnelMetricResult {\n  stage_name: string;\n  stage_order: number;\n  users: number;\n  conversion_rate: number;\n  dropoff_rate: number;\n}\n\nexport interface RealtimeDashboardResult {\n  total_impressions: number;\n  total_clicks: number;\n  total_conversions: number;\n  total_revenue: number;\n  total_ad_spend: number;\n  avg_ctr: number;\n  avg_conversion_rate: number;\n  current_roas: number;\n}\n\nexport class StoredProceduresService {\n  constructor(private prisma: PrismaService) {}\n\n  /**\n   * Calculate KPI metrics using optimized stored procedure\n   */\n  async calculateKPIMetrics(\n    organizationId: string,\n    campaignIds?: string[],\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<StoredProcedureKPIResult | null> {\n    try {\n      const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // Default: 30 days ago\n      const end = endDate || new Date();\n\n      logger.debug('Executing calculate_kpi_metrics stored procedure', {\n        organizationId,\n        campaignIds,\n        startDate: start,\n        endDate: end,\n      });\n\n      const result = await this.prisma.$queryRaw<StoredProcedureKPIResult[]>`\n        SELECT * FROM calculate_kpi_metrics(\n          ${organizationId}::uuid,\n          ${campaignIds ? `ARRAY[${campaignIds.map(id => `'${id}'::uuid`).join(',')}]` : 'NULL'}::uuid[],\n          ${start}::date,\n          ${end}::date\n        )\n      `;\n\n      return result[0] || null;\n    } catch (error) {\n      logger.error('Error executing calculate_kpi_metrics stored procedure:', error);\n      throw new Error('Failed to calculate KPI metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Get top performing campaigns using stored procedure\n   */\n  async getTopCampaigns(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    limit: number = 10\n  ): Promise<TopCampaignResult[]> {\n    try {\n      logger.debug('Executing get_top_campaigns stored procedure', {\n        organizationId,\n        startDate,\n        endDate,\n        limit,\n      });\n\n      const result = await this.prisma.$queryRaw<TopCampaignResult[]>`\n        SELECT * FROM get_top_campaigns(\n          ${organizationId}::uuid,\n          ${startDate}::date,\n          ${endDate}::date,\n          ${limit}::integer\n        )\n      `;\n\n      return result;\n    } catch (error) {\n      logger.error('Error executing get_top_campaigns stored procedure:', error);\n      throw new Error('Failed to get top campaigns using stored procedure');\n    }\n  }\n\n  /**\n   * Calculate funnel metrics using stored procedure\n   */\n  async calculateFunnelMetrics(\n    campaignId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<FunnelMetricResult[]> {\n    try {\n      logger.debug('Executing calculate_funnel_metrics stored procedure', {\n        campaignId,\n        startDate,\n        endDate,\n      });\n\n      const result = await this.prisma.$queryRaw<FunnelMetricResult[]>`\n        SELECT * FROM calculate_funnel_metrics(\n          ${campaignId}::uuid,\n          ${startDate}::date,\n          ${endDate}::date\n        )\n      `;\n\n      return result;\n    } catch (error) {\n      logger.error('Error executing calculate_funnel_metrics stored procedure:', error);\n      throw new Error('Failed to calculate funnel metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Get real-time dashboard metrics using stored procedure\n   */\n  async getRealtimeDashboard(\n    organizationId: string,\n    hoursBack: number = 24\n  ): Promise<RealtimeDashboardResult | null> {\n    try {\n      logger.debug('Executing get_realtime_dashboard stored procedure', {\n        organizationId,\n        hoursBack,\n      });\n\n      const result = await this.prisma.$queryRaw<RealtimeDashboardResult[]>`\n        SELECT * FROM get_realtime_dashboard(\n          ${organizationId}::uuid,\n          ${hoursBack}::integer\n        )\n      `;\n\n      return result[0] || null;\n    } catch (error) {\n      logger.error('Error executing get_realtime_dashboard stored procedure:', error);\n      throw new Error('Failed to get realtime dashboard using stored procedure');\n    }\n  }\n\n  /**\n   * Aggregate hourly metrics to daily using stored procedure\n   */\n  async aggregateHourlyToDaily(targetDate?: Date): Promise<number> {\n    try {\n      const date = targetDate || new Date(Date.now() - 24 * 60 * 60 * 1000); // Default: yesterday\n\n      logger.debug('Executing aggregate_hourly_to_daily stored procedure', {\n        targetDate: date,\n      });\n\n      const result = await this.prisma.$queryRaw<{ aggregate_hourly_to_daily: number }[]>`\n        SELECT aggregate_hourly_to_daily(${date}::date) as aggregate_hourly_to_daily\n      `;\n\n      const processedCount = result[0]?.aggregate_hourly_to_daily || 0;\n      \n      logger.info(`Aggregated ${processedCount} campaign metrics for date ${date.toISOString().split('T')[0]}`);\n      \n      return processedCount;\n    } catch (error) {\n      logger.error('Error executing aggregate_hourly_to_daily stored procedure:', error);\n      throw new Error('Failed to aggregate hourly metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Clean up old metrics data using stored procedure\n   */\n  async cleanupOldMetrics(retentionDays: number = 90): Promise<number> {\n    try {\n      logger.debug('Executing cleanup_old_metrics stored procedure', {\n        retentionDays,\n      });\n\n      const result = await this.prisma.$queryRaw<{ cleanup_old_metrics: number }[]>`\n        SELECT cleanup_old_metrics(${retentionDays}::integer) as cleanup_old_metrics\n      `;\n\n      const deletedCount = result[0]?.cleanup_old_metrics || 0;\n      \n      logger.info(`Cleaned up ${deletedCount} old metric records with retention of ${retentionDays} days`);\n      \n      return deletedCount;\n    } catch (error) {\n      logger.error('Error executing cleanup_old_metrics stored procedure:', error);\n      throw new Error('Failed to cleanup old metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Execute custom SQL query with proper error handling\n   */\n  async executeCustomQuery<T = any>(query: string, params: any[] = []): Promise<T[]> {\n    try {\n      logger.debug('Executing custom SQL query', { query, params });\n\n      const result = await this.prisma.$queryRawUnsafe<T[]>(query, ...params);\n      \n      return result;\n    } catch (error) {\n      logger.error('Error executing custom SQL query:', error);\n      throw new Error('Failed to execute custom SQL query');\n    }\n  }\n\n  /**\n   * Check if stored procedures are available\n   */\n  async checkStoredProceduresHealth(): Promise<{\n    available: boolean;\n    procedures: string[];\n    missing: string[];\n  }> {\n    try {\n      const expectedProcedures = [\n        'calculate_kpi_metrics',\n        'get_top_campaigns',\n        'calculate_funnel_metrics',\n        'aggregate_hourly_to_daily',\n        'cleanup_old_metrics',\n        'get_realtime_dashboard',\n      ];\n\n      const result = await this.prisma.$queryRaw<{ routine_name: string }[]>`\n        SELECT routine_name \n        FROM information_schema.routines \n        WHERE routine_type = 'FUNCTION' \n        AND routine_name = ANY(ARRAY[${expectedProcedures.map(p => `'${p}'`).join(',')}])\n      `;\n\n      const availableProcedures = result.map(r => r.routine_name);\n      const missingProcedures = expectedProcedures.filter(\n        proc => !availableProcedures.includes(proc)\n      );\n\n      return {\n        available: missingProcedures.length === 0,\n        procedures: availableProcedures,\n        missing: missingProcedures,\n      };\n    } catch (error) {\n      logger.error('Error checking stored procedures health:', error);\n      return {\n        available: false,\n        procedures: [],\n        missing: [],\n      };\n    }\n  }\n\n  /**\n   * Install stored procedures from migration file\n   */\n  async installStoredProcedures(): Promise<void> {\n    try {\n      logger.info('Installing stored procedures...');\n\n      // This would typically be handled by a migration system\n      // For now, we'll just log that procedures should be installed manually\n      logger.warn('Stored procedures should be installed via migration system');\n      logger.info('Run the SQL file: prisma/migrations/001_create_metrics_procedures.sql');\n      \n    } catch (error) {\n      logger.error('Error installing stored procedures:', error);\n      throw new Error('Failed to install stored procedures');\n    }\n  }\n\n  /**\n   * Get performance statistics for stored procedures\n   */\n  async getPerformanceStats(): Promise<{\n    procedure_name: string;\n    calls: number;\n    total_time: number;\n    mean_time: number;\n  }[]> {\n    try {\n      // This requires pg_stat_statements extension\n      const result = await this.prisma.$queryRaw<{\n        procedure_name: string;\n        calls: number;\n        total_time: number;\n        mean_time: number;\n      }[]>`\n        SELECT \n          regexp_replace(query, '^SELECT \\* FROM (\\w+)\\(.*', '\\\\1') as procedure_name,\n          calls,\n          total_exec_time as total_time,\n          mean_exec_time as mean_time\n        FROM pg_stat_statements \n        WHERE query LIKE 'SELECT * FROM calculate_%' \n           OR query LIKE 'SELECT * FROM get_%'\n           OR query LIKE 'SELECT * FROM aggregate_%'\n           OR query LIKE 'SELECT * FROM cleanup_%'\n        ORDER BY calls DESC\n      `;\n\n      return result;\n    } catch (error) {\n      logger.warn('Performance stats not available (pg_stat_statements extension may not be enabled)');\n      return [];\n    }\n  }\n}\n\n// Singleton instance\nlet storedProceduresService: StoredProceduresService;\n\nexport const getStoredProceduresService = (prisma?: PrismaService): StoredProceduresService => {\n  if (!storedProceduresService) {\n    if (!prisma) {\n      throw new Error('PrismaService is required to initialize StoredProceduresService');\n    }\n    storedProceduresService = new StoredProceduresService(prisma);\n  }\n  return storedProceduresService;\n};"],"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","ignoreList":[]}