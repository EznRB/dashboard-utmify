e0a4e2d4939df691ef2814fc03ea011e
/* istanbul ignore next */
function cov_1l5n09ug7n() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-cache.service.ts";
  var hash = "f9707142d055a5abd740353e267e19d8bdd9e858";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-cache.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 352,
          column: 1
        }
      },
      "14": {
        start: {
          line: 19,
          column: 13
        },
        end: {
          line: 19,
          column: 50
        }
      },
      "15": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 21
        }
      },
      "16": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "17": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 21
        }
      },
      "18": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 43
        }
      },
      "19": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "20": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "21": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "22": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 50
        }
      },
      "23": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "24": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 55
        }
      },
      "25": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 63
        }
      },
      "26": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 63
        }
      },
      "27": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "28": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 73
        }
      },
      "29": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 57,
          column: 66
        }
      },
      "30": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "31": {
        start: {
          line: 59,
          column: 26
        },
        end: {
          line: 59,
          column: 56
        }
      },
      "32": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "33": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 61
        }
      },
      "34": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 28
        }
      },
      "35": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 56
        }
      },
      "36": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "37": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 72,
          column: 17
        }
      },
      "38": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 68,
          column: 45
        }
      },
      "39": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 71,
          column: 33
        }
      },
      "40": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 25
        }
      },
      "41": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 84
        }
      },
      "42": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 24
        }
      },
      "43": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 85,
          column: 63
        }
      },
      "44": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "45": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 73
        }
      },
      "46": {
        start: {
          line: 89,
          column: 25
        },
        end: {
          line: 89,
          column: 66
        }
      },
      "47": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 50
        }
      },
      "48": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "49": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 99,
          column: 13
        }
      },
      "50": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 56
        }
      },
      "51": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 48
        }
      },
      "52": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "53": {
        start: {
          line: 104,
          column: 27
        },
        end: {
          line: 104,
          column: 81
        }
      },
      "54": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 35
        }
      },
      "55": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 85
        }
      },
      "56": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 25
        }
      },
      "57": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 116,
          column: 63
        }
      },
      "58": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "59": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 73
        }
      },
      "60": {
        start: {
          line: 120,
          column: 25
        },
        end: {
          line: 120,
          column: 66
        }
      },
      "61": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "62": {
        start: {
          line: 122,
          column: 27
        },
        end: {
          line: 122,
          column: 57
        }
      },
      "63": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 30
        }
      },
      "64": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 85
        }
      },
      "65": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 25
        }
      },
      "66": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 63
        }
      },
      "67": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "68": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 73
        }
      },
      "69": {
        start: {
          line: 138,
          column: 25
        },
        end: {
          line: 138,
          column: 66
        }
      },
      "70": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "71": {
        start: {
          line: 140,
          column: 27
        },
        end: {
          line: 140,
          column: 60
        }
      },
      "72": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 32
        }
      },
      "73": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 87
        }
      },
      "74": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 25
        }
      },
      "75": {
        start: {
          line: 152,
          column: 24
        },
        end: {
          line: 152,
          column: 63
        }
      },
      "76": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "77": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 73
        }
      },
      "78": {
        start: {
          line: 156,
          column: 25
        },
        end: {
          line: 156,
          column: 66
        }
      },
      "79": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "80": {
        start: {
          line: 158,
          column: 27
        },
        end: {
          line: 158,
          column: 65
        }
      },
      "81": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 32
        }
      },
      "82": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 88
        }
      },
      "83": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 25
        }
      },
      "84": {
        start: {
          line: 170,
          column: 24
        },
        end: {
          line: 170,
          column: 63
        }
      },
      "85": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "86": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 73
        }
      },
      "87": {
        start: {
          line: 174,
          column: 26
        },
        end: {
          line: 174,
          column: 84
        }
      },
      "88": {
        start: {
          line: 174,
          column: 42
        },
        end: {
          line: 174,
          column: 83
        }
      },
      "89": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "90": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 176,
          column: 62
        }
      },
      "91": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "92": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 181,
          column: 17
        }
      },
      "93": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 65
        }
      },
      "94": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 32
        }
      },
      "95": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 60
        }
      },
      "96": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 188,
          column: 17
        }
      },
      "97": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 184,
          column: 45
        }
      },
      "98": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 187,
          column: 33
        }
      },
      "99": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 83
        }
      },
      "100": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 40
        }
      },
      "101": {
        start: {
          line: 193,
          column: 34
        },
        end: {
          line: 193,
          column: 38
        }
      },
      "102": {
        start: {
          line: 200,
          column: 24
        },
        end: {
          line: 200,
          column: 63
        }
      },
      "103": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "104": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 73
        }
      },
      "105": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "106": {
        start: {
          line: 205,
          column: 29
        },
        end: {
          line: 205,
          column: 50
        }
      },
      "107": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "108": {
        start: {
          line: 207,
          column: 33
        },
        end: {
          line: 207,
          column: 74
        }
      },
      "109": {
        start: {
          line: 208,
          column: 40
        },
        end: {
          line: 208,
          column: 105
        }
      },
      "110": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 214,
          column: 17
        }
      },
      "111": {
        start: {
          line: 210,
          column: 20
        },
        end: {
          line: 210,
          column: 67
        }
      },
      "112": {
        start: {
          line: 213,
          column: 20
        },
        end: {
          line: 213,
          column: 79
        }
      },
      "113": {
        start: {
          line: 216,
          column: 28
        },
        end: {
          line: 216,
          column: 49
        }
      },
      "114": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 91
        }
      },
      "115": {
        start: {
          line: 217,
          column: 55
        },
        end: {
          line: 217,
          column: 80
        }
      },
      "116": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 84
        }
      },
      "117": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 25
        }
      },
      "118": {
        start: {
          line: 228,
          column: 24
        },
        end: {
          line: 228,
          column: 63
        }
      },
      "119": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "120": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 73
        }
      },
      "121": {
        start: {
          line: 232,
          column: 24
        },
        end: {
          line: 232,
          column: 65
        }
      },
      "122": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "123": {
        start: {
          line: 234,
          column: 25
        },
        end: {
          line: 234,
          column: 55
        }
      },
      "124": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "125": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 25
        }
      },
      "126": {
        start: {
          line: 238,
          column: 27
        },
        end: {
          line: 238,
          column: 56
        }
      },
      "127": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 105
        }
      },
      "128": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 26
        }
      },
      "129": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 82
        }
      },
      "130": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 21
        }
      },
      "131": {
        start: {
          line: 251,
          column: 24
        },
        end: {
          line: 251,
          column: 63
        }
      },
      "132": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "133": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 73
        }
      },
      "134": {
        start: {
          line: 255,
          column: 30
        },
        end: {
          line: 255,
          column: 75
        }
      },
      "135": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "136": {
        start: {
          line: 257,
          column: 25
        },
        end: {
          line: 257,
          column: 61
        }
      },
      "137": {
        start: {
          line: 259,
          column: 27
        },
        end: {
          line: 259,
          column: 67
        }
      },
      "138": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 60
        }
      },
      "139": {
        start: {
          line: 260,
          column: 35
        },
        end: {
          line: 260,
          column: 58
        }
      },
      "140": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 83
        }
      },
      "141": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 22
        }
      },
      "142": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 276,
          column: 10
        }
      },
      "143": {
        start: {
          line: 282,
          column: 22
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "144": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "145": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 25
        }
      },
      "146": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 27
        }
      },
      "147": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 42
        }
      },
      "148": {
        start: {
          line: 301,
          column: 23
        },
        end: {
          line: 301,
          column: 51
        }
      },
      "149": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "150": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 26
        }
      },
      "151": {
        start: {
          line: 306,
          column: 23
        },
        end: {
          line: 306,
          column: 39
        }
      },
      "152": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 45
        }
      },
      "153": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 22
        }
      },
      "154": {
        start: {
          line: 314,
          column: 24
        },
        end: {
          line: 314,
          column: 63
        }
      },
      "155": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "156": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 73
        }
      },
      "157": {
        start: {
          line: 318,
          column: 24
        },
        end: {
          line: 318,
          column: 78
        }
      },
      "158": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "159": {
        start: {
          line: 320,
          column: 25
        },
        end: {
          line: 320,
          column: 55
        }
      },
      "160": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 323,
          column: 13
        }
      },
      "161": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 25
        }
      },
      "162": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 49
        }
      },
      "163": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 90
        }
      },
      "164": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 21
        }
      },
      "165": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 17
        }
      },
      "166": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "167": {
        start: {
          line: 344,
          column: 25
        },
        end: {
          line: 344,
          column: 57
        }
      },
      "168": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 24
        }
      },
      "169": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 88
        }
      },
      "170": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 24
        }
      },
      "171": {
        start: {
          line: 353,
          column: 0
        },
        end: {
          line: 356,
          column: 23
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 41
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 33
          },
          end: {
            line: 36,
            column: 34
          }
        },
        loc: {
          start: {
            line: 36,
            column: 39
          },
          end: {
            line: 38,
            column: 9
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 31
          },
          end: {
            line: 39,
            column: 32
          }
        },
        loc: {
          start: {
            line: 39,
            column: 42
          },
          end: {
            line: 41,
            column: 9
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 33
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 46
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 33
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 52
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 40
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 84
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        loc: {
          start: {
            line: 115,
            column: 19
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 115
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 22
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 133
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 151
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 21
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 169
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 174,
            column: 35
          },
          end: {
            line: 174,
            column: 36
          }
        },
        loc: {
          start: {
            line: 174,
            column: 42
          },
          end: {
            line: 174,
            column: 83
          }
        },
        line: 174
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 177,
            column: 30
          },
          end: {
            line: 177,
            column: 31
          }
        },
        loc: {
          start: {
            line: 177,
            column: 39
          },
          end: {
            line: 189,
            column: 13
          }
        },
        line: 177
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 193,
            column: 28
          },
          end: {
            line: 193,
            column: 29
          }
        },
        loc: {
          start: {
            line: 193,
            column: 34
          },
          end: {
            line: 193,
            column: 38
          }
        },
        line: 193
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 31
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 199
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 217,
            column: 34
          },
          end: {
            line: 217,
            column: 35
          }
        },
        loc: {
          start: {
            line: 217,
            column: 55
          },
          end: {
            line: 217,
            column: 80
          }
        },
        line: 217
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 29
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 227
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 39
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 250
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 260,
            column: 28
          },
          end: {
            line: 260,
            column: 29
          }
        },
        loc: {
          start: {
            line: 260,
            column: 35
          },
          end: {
            line: 260,
            column: 58
          }
        },
        line: 260
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 31
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 270
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 34
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 281
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 48
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 299
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 313,
            column: 4
          },
          end: {
            line: 313,
            column: 5
          }
        },
        loc: {
          start: {
            line: 313,
            column: 31
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 313
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 31
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 334
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 26
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 342
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 52,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 29
          },
          end: {
            line: 52,
            column: 31
          }
        }],
        line: 52
      },
      "14": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "15": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "16": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "17": {
        loc: {
          start: {
            line: 84,
            column: 26
          },
          end: {
            line: 84,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 84,
            column: 36
          },
          end: {
            line: 84,
            column: 38
          }
        }],
        line: 84
      },
      "18": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "19": {
        loc: {
          start: {
            line: 90,
            column: 20
          },
          end: {
            line: 90,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 20
          },
          end: {
            line: 90,
            column: 31
          }
        }, {
          start: {
            line: 90,
            column: 35
          },
          end: {
            line: 90,
            column: 50
          }
        }],
        line: 90
      },
      "20": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 99,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 99,
            column: 13
          }
        }, {
          start: {
            line: 97,
            column: 17
          },
          end: {
            line: 99,
            column: 13
          }
        }],
        line: 94
      },
      "21": {
        loc: {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 94,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 94,
            column: 43
          }
        }, {
          start: {
            line: 94,
            column: 47
          },
          end: {
            line: 94,
            column: 72
          }
        }],
        line: 94
      },
      "22": {
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "23": {
        loc: {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 101,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 101,
            column: 32
          }
        }, {
          start: {
            line: 101,
            column: 36
          },
          end: {
            line: 101,
            column: 65
          }
        }],
        line: 101
      },
      "24": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "25": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "26": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "27": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "28": {
        loc: {
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "29": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "30": {
        loc: {
          start: {
            line: 208,
            column: 40
          },
          end: {
            line: 208,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 208,
            column: 68
          },
          end: {
            line: 208,
            column: 89
          }
        }, {
          start: {
            line: 208,
            column: 92
          },
          end: {
            line: 208,
            column: 105
          }
        }],
        line: 208
      },
      "31": {
        loc: {
          start: {
            line: 209,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        }, {
          start: {
            line: 212,
            column: 21
          },
          end: {
            line: 214,
            column: 17
          }
        }],
        line: 209
      },
      "32": {
        loc: {
          start: {
            line: 217,
            column: 19
          },
          end: {
            line: 217,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 19
          },
          end: {
            line: 217,
            column: 81
          }
        }, {
          start: {
            line: 217,
            column: 85
          },
          end: {
            line: 217,
            column: 90
          }
        }],
        line: 217
      },
      "33": {
        loc: {
          start: {
            line: 217,
            column: 55
          },
          end: {
            line: 217,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 55
          },
          end: {
            line: 217,
            column: 61
          }
        }, {
          start: {
            line: 217,
            column: 65
          },
          end: {
            line: 217,
            column: 80
          }
        }],
        line: 217
      },
      "34": {
        loc: {
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "35": {
        loc: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "36": {
        loc: {
          start: {
            line: 250,
            column: 24
          },
          end: {
            line: 250,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 250,
            column: 34
          },
          end: {
            line: 250,
            column: 37
          }
        }],
        line: 250
      },
      "37": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "38": {
        loc: {
          start: {
            line: 271,
            column: 15
          },
          end: {
            line: 276,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 15
          },
          end: {
            line: 271,
            column: 41
          }
        }, {
          start: {
            line: 271,
            column: 45
          },
          end: {
            line: 276,
            column: 9
          }
        }],
        line: 271
      },
      "39": {
        loc: {
          start: {
            line: 282,
            column: 22
          },
          end: {
            line: 287,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 22
          },
          end: {
            line: 282,
            column: 48
          }
        }, {
          start: {
            line: 282,
            column: 52
          },
          end: {
            line: 287,
            column: 9
          }
        }],
        line: 282
      },
      "40": {
        loc: {
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: 291,
            column: 13
          },
          end: {
            line: 293,
            column: 9
          }
        }],
        line: 288
      },
      "41": {
        loc: {
          start: {
            line: 299,
            column: 34
          },
          end: {
            line: 299,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 299,
            column: 44
          },
          end: {
            line: 299,
            column: 46
          }
        }],
        line: 299
      },
      "42": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "43": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "44": {
        loc: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "45": {
        loc: {
          start: {
            line: 355,
            column: 37
          },
          end: {
            line: 355,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 355,
            column: 122
          },
          end: {
            line: 355,
            column: 124
          }
        }, {
          start: {
            line: 355,
            column: 127
          },
          end: {
            line: 355,
            column: 133
          }
        }],
        line: 355
      },
      "46": {
        loc: {
          start: {
            line: 355,
            column: 50
          },
          end: {
            line: 355,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 50
          },
          end: {
            line: 355,
            column: 86
          }
        }, {
          start: {
            line: 355,
            column: 90
          },
          end: {
            line: 355,
            column: 103
          }
        }],
        line: 355
      },
      "47": {
        loc: {
          start: {
            line: 355,
            column: 135
          },
          end: {
            line: 355,
            column: 247
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 355,
            column: 236
          },
          end: {
            line: 355,
            column: 238
          }
        }, {
          start: {
            line: 355,
            column: 241
          },
          end: {
            line: 355,
            column: 247
          }
        }],
        line: 355
      },
      "48": {
        loc: {
          start: {
            line: 355,
            column: 148
          },
          end: {
            line: 355,
            column: 217
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 148
          },
          end: {
            line: 355,
            column: 192
          }
        }, {
          start: {
            line: 355,
            column: 196
          },
          end: {
            line: 355,
            column: 217
          }
        }],
        line: 355
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-cache.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-cache.service.ts"],
      sourcesContent: ["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\nimport { TenantDatabaseService } from './tenant-database.service';\n\nexport interface CacheOptions {\n  ttl?: number; // Time to live em segundos\n  compress?: boolean; // Comprimir dados grandes\n  serialize?: boolean; // Serializar objetos automaticamente\n}\n\nexport interface TenantCacheStats {\n  hits: number;\n  misses: number;\n  keys: number;\n  memory: number;\n}\n\n@Injectable()\nexport class TenantCacheService {\n  private readonly logger = new Logger(TenantCacheService.name);\n  private readonly redis: Redis;\n  private readonly defaultTTL = 3600; // 1 hora\n  private readonly keyPrefix = 'utmify';\n  private readonly stats = new Map<string, TenantCacheStats>();\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly tenantDb: TenantDatabaseService,\n  ) {\n    this.redis = new Redis({\n      host: this.configService.get<string>('REDIS_HOST', 'localhost'),\n      port: this.configService.get<number>('REDIS_PORT', 6379),\n      password: this.configService.get<string>('REDIS_PASSWORD'),\n      db: this.configService.get<number>('REDIS_DB', 0),\n      retryDelayOnFailover: 100,\n      maxRetriesPerRequest: 3,\n      lazyConnect: true,\n    });\n\n    this.redis.on('connect', () => {\n      this.logger.log('Conectado ao Redis');\n    });\n\n    this.redis.on('error', (error) => {\n      this.logger.error('Erro no Redis:', error);\n    });\n  }\n\n  /**\n   * Gera chave de cache com prefixo do tenant\n   */\n  private generateKey(tenantSlug: string, key: string): string {\n    return `${this.keyPrefix}:tenant:${tenantSlug}:${key}`;\n  }\n\n  /**\n   * Obt\xE9m valor do cache para o tenant atual\n   */\n  async get<T = any>(key: string, options: CacheOptions = {}): Promise<T | null> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    \n    try {\n      const value = await this.redis.get(cacheKey);\n      \n      if (value === null) {\n        this.updateStats(context.tenantSlug, 'miss');\n        return null;\n      }\n\n      this.updateStats(context.tenantSlug, 'hit');\n      \n      // Deserializar se necess\xE1rio\n      if (options.serialize !== false) {\n        try {\n          return JSON.parse(value);\n        } catch {\n          return value as T;\n        }\n      }\n      \n      return value as T;\n    } catch (error) {\n      this.logger.error(`Erro ao buscar cache ${cacheKey}: ${error.message}`);\n      return null;\n    }\n  }\n\n  /**\n   * Define valor no cache para o tenant atual\n   */\n  async set(\n    key: string,\n    value: any,\n    options: CacheOptions = {}\n  ): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    const ttl = options.ttl || this.defaultTTL;\n    \n    try {\n      let serializedValue: string;\n      \n      // Serializar se necess\xE1rio\n      if (options.serialize !== false && typeof value === 'object') {\n        serializedValue = JSON.stringify(value);\n      } else {\n        serializedValue = String(value);\n      }\n\n      // Comprimir se necess\xE1rio (implementar se valor for muito grande)\n      if (options.compress && serializedValue.length > 1024) {\n        // TODO: Implementar compress\xE3o com zlib\n      }\n\n      const result = await this.redis.setex(cacheKey, ttl, serializedValue);\n      return result === 'OK';\n    } catch (error) {\n      this.logger.error(`Erro ao definir cache ${cacheKey}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Remove valor do cache para o tenant atual\n   */\n  async del(key: string): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    \n    try {\n      const result = await this.redis.del(cacheKey);\n      return result > 0;\n    } catch (error) {\n      this.logger.error(`Erro ao remover cache ${cacheKey}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Verifica se chave existe no cache do tenant atual\n   */\n  async exists(key: string): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    \n    try {\n      const result = await this.redis.exists(cacheKey);\n      return result === 1;\n    } catch (error) {\n      this.logger.error(`Erro ao verificar cache ${cacheKey}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Define TTL para uma chave existente\n   */\n  async expire(key: string, ttl: number): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKey = this.generateKey(context.tenantSlug, key);\n    \n    try {\n      const result = await this.redis.expire(cacheKey, ttl);\n      return result === 1;\n    } catch (error) {\n      this.logger.error(`Erro ao definir TTL para ${cacheKey}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Obt\xE9m m\xFAltiplos valores do cache\n   */\n  async mget<T = any>(keys: string[]): Promise<(T | null)[]> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const cacheKeys = keys.map(key => this.generateKey(context.tenantSlug, key));\n    \n    try {\n      const values = await this.redis.mget(...cacheKeys);\n      \n      return values.map(value => {\n        if (value === null) {\n          this.updateStats(context.tenantSlug, 'miss');\n          return null;\n        }\n        \n        this.updateStats(context.tenantSlug, 'hit');\n        \n        try {\n          return JSON.parse(value);\n        } catch {\n          return value as T;\n        }\n      });\n    } catch (error) {\n      this.logger.error(`Erro ao buscar m\xFAltiplos caches: ${error.message}`);\n      return keys.map(() => null);\n    }\n  }\n\n  /**\n   * Define m\xFAltiplos valores no cache\n   */\n  async mset(keyValues: Record<string, any>, ttl?: number): Promise<boolean> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    try {\n      const pipeline = this.redis.pipeline();\n      \n      for (const [key, value] of Object.entries(keyValues)) {\n        const cacheKey = this.generateKey(context.tenantSlug, key);\n        const serializedValue = typeof value === 'object' ? JSON.stringify(value) : String(value);\n        \n        if (ttl) {\n          pipeline.setex(cacheKey, ttl, serializedValue);\n        } else {\n          pipeline.setex(cacheKey, this.defaultTTL, serializedValue);\n        }\n      }\n      \n      const results = await pipeline.exec();\n      return results?.every(([error, result]) => !error && result === 'OK') || false;\n    } catch (error) {\n      this.logger.error(`Erro ao definir m\xFAltiplos caches: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Limpa todo o cache do tenant atual\n   */\n  async clearTenantCache(): Promise<number> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const pattern = this.generateKey(context.tenantSlug, '*');\n    \n    try {\n      const keys = await this.redis.keys(pattern);\n      \n      if (keys.length === 0) {\n        return 0;\n      }\n      \n      const result = await this.redis.del(...keys);\n      this.logger.log(`Cache limpo para tenant ${context.tenantSlug}: ${result} chaves removidas`);\n      \n      return result;\n    } catch (error) {\n      this.logger.error(`Erro ao limpar cache do tenant: ${error.message}`);\n      return 0;\n    }\n  }\n\n  /**\n   * Lista todas as chaves do tenant atual\n   */\n  async getTenantKeys(pattern: string = '*'): Promise<string[]> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const searchPattern = this.generateKey(context.tenantSlug, pattern);\n    \n    try {\n      const keys = await this.redis.keys(searchPattern);\n      \n      // Remover prefixo para retornar apenas as chaves originais\n      const prefix = this.generateKey(context.tenantSlug, '');\n      return keys.map(key => key.replace(prefix, ''));\n    } catch (error) {\n      this.logger.error(`Erro ao listar chaves do tenant: ${error.message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Obt\xE9m estat\xEDsticas do cache por tenant\n   */\n  getTenantStats(tenantSlug: string): TenantCacheStats {\n    return this.stats.get(tenantSlug) || {\n      hits: 0,\n      misses: 0,\n      keys: 0,\n      memory: 0,\n    };\n  }\n\n  /**\n   * Atualiza estat\xEDsticas do cache\n   */\n  private updateStats(tenantSlug: string, type: 'hit' | 'miss'): void {\n    const stats = this.stats.get(tenantSlug) || {\n      hits: 0,\n      misses: 0,\n      keys: 0,\n      memory: 0,\n    };\n\n    if (type === 'hit') {\n      stats.hits++;\n    } else {\n      stats.misses++;\n    }\n\n    this.stats.set(tenantSlug, stats);\n  }\n\n  /**\n   * Cache com fallback para fun\xE7\xE3o\n   */\n  async remember<T>(\n    key: string,\n    callback: () => Promise<T>,\n    options: CacheOptions = {}\n  ): Promise<T> {\n    // Tentar buscar no cache primeiro\n    const cached = await this.get<T>(key, options);\n    \n    if (cached !== null) {\n      return cached;\n    }\n\n    // Executar callback e cachear resultado\n    const result = await callback();\n    await this.set(key, result, options);\n    \n    return result;\n  }\n\n  /**\n   * Invalida\xE7\xE3o de cache por tags\n   */\n  async invalidateByTag(tag: string): Promise<number> {\n    const context = this.tenantDb.getCurrentTenantContext();\n    if (!context) {\n      throw new Error('Cache acessado fora do contexto de tenant');\n    }\n\n    const pattern = this.generateKey(context.tenantSlug, `*:tag:${tag}:*`);\n    \n    try {\n      const keys = await this.redis.keys(pattern);\n      \n      if (keys.length === 0) {\n        return 0;\n      }\n      \n      return await this.redis.del(...keys);\n    } catch (error) {\n      this.logger.error(`Erro ao invalidar cache por tag ${tag}: ${error.message}`);\n      return 0;\n    }\n  }\n\n  /**\n   * Limpa caches expirados (limpeza manual)\n   */\n  async cleanupExpiredKeys(): Promise<number> {\n    // Redis j\xE1 remove chaves expiradas automaticamente\n    // Esta fun\xE7\xE3o pode ser usada para limpeza adicional se necess\xE1rio\n    return 0;\n  }\n\n  /**\n   * Obt\xE9m informa\xE7\xF5es de mem\xF3ria do Redis\n   */\n  async getMemoryInfo(): Promise<any> {\n    try {\n      const info = await this.redis.memory('usage');\n      return info;\n    } catch (error) {\n      this.logger.error(`Erro ao obter informa\xE7\xF5es de mem\xF3ria: ${error.message}`);\n      return null;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f9707142d055a5abd740353e267e19d8bdd9e858"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1l5n09ug7n = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1l5n09ug7n();
var __decorate =
/* istanbul ignore next */
(cov_1l5n09ug7n().s[0]++,
/* istanbul ignore next */
(cov_1l5n09ug7n().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1l5n09ug7n().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_1l5n09ug7n().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_1l5n09ug7n().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_1l5n09ug7n().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_1l5n09ug7n().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_1l5n09ug7n().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_1l5n09ug7n().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_1l5n09ug7n().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().b[3][0]++;
    cov_1l5n09ug7n().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_1l5n09ug7n().b[3][1]++;
    cov_1l5n09ug7n().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_1l5n09ug7n().b[5][0]++;
        cov_1l5n09ug7n().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_1l5n09ug7n().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_1l5n09ug7n().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_1l5n09ug7n().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_1l5n09ug7n().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_1l5n09ug7n().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_1l5n09ug7n().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_1l5n09ug7n().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_1l5n09ug7n().s[9]++;
  return /* istanbul ignore next */(cov_1l5n09ug7n().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_1l5n09ug7n().s[10]++,
/* istanbul ignore next */
(cov_1l5n09ug7n().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1l5n09ug7n().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_1l5n09ug7n().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_1l5n09ug7n().f[1]++;
  cov_1l5n09ug7n().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().b[11][0]++;
    cov_1l5n09ug7n().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_1l5n09ug7n().b[11][1]++;
  }
}));
var TenantCacheService_1;
var _a, _b;
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import Redis from 'ioredis';
import { TenantDatabaseService } from './tenant-database.service';
let TenantCacheService =
/* istanbul ignore next */
(cov_1l5n09ug7n().s[13]++, TenantCacheService_1 = class TenantCacheService {
  configService;
  tenantDb;
  logger =
  /* istanbul ignore next */
  (cov_1l5n09ug7n().s[14]++, new Logger(TenantCacheService_1.name));
  redis;
  defaultTTL =
  /* istanbul ignore next */
  (cov_1l5n09ug7n().s[15]++, 3600); // 1 hora
  keyPrefix =
  /* istanbul ignore next */
  (cov_1l5n09ug7n().s[16]++, 'utmify');
  stats =
  /* istanbul ignore next */
  (cov_1l5n09ug7n().s[17]++, new Map());
  constructor(configService, tenantDb) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[2]++;
    cov_1l5n09ug7n().s[18]++;
    this.configService = configService;
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[19]++;
    this.tenantDb = tenantDb;
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[20]++;
    this.redis = new Redis({
      host: this.configService.get('REDIS_HOST', 'localhost'),
      port: this.configService.get('REDIS_PORT', 6379),
      password: this.configService.get('REDIS_PASSWORD'),
      db: this.configService.get('REDIS_DB', 0),
      retryDelayOnFailover: 100,
      maxRetriesPerRequest: 3,
      lazyConnect: true
    });
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[21]++;
    this.redis.on('connect', () => {
      /* istanbul ignore next */
      cov_1l5n09ug7n().f[3]++;
      cov_1l5n09ug7n().s[22]++;
      this.logger.log('Conectado ao Redis');
    });
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[23]++;
    this.redis.on('error', error => {
      /* istanbul ignore next */
      cov_1l5n09ug7n().f[4]++;
      cov_1l5n09ug7n().s[24]++;
      this.logger.error('Erro no Redis:', error);
    });
  }
  /**
   * Gera chave de cache com prefixo do tenant
   */
  generateKey(tenantSlug, key) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[5]++;
    cov_1l5n09ug7n().s[25]++;
    return `${this.keyPrefix}:tenant:${tenantSlug}:${key}`;
  }
  /**
   * Obtém valor do cache para o tenant atual
   */
  async get(key, options =
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[13][0]++, {})) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[6]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[26]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[27]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[14][0]++;
      cov_1l5n09ug7n().s[28]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[14][1]++;
    }
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[29]++, this.generateKey(context.tenantSlug, key));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[30]++;
    try {
      const value =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[31]++, await this.redis.get(cacheKey));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[32]++;
      if (value === null) {
        /* istanbul ignore next */
        cov_1l5n09ug7n().b[15][0]++;
        cov_1l5n09ug7n().s[33]++;
        this.updateStats(context.tenantSlug, 'miss');
        /* istanbul ignore next */
        cov_1l5n09ug7n().s[34]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1l5n09ug7n().b[15][1]++;
      }
      cov_1l5n09ug7n().s[35]++;
      this.updateStats(context.tenantSlug, 'hit');
      // Deserializar se necessário
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[36]++;
      if (options.serialize !== false) {
        /* istanbul ignore next */
        cov_1l5n09ug7n().b[16][0]++;
        cov_1l5n09ug7n().s[37]++;
        try {
          /* istanbul ignore next */
          cov_1l5n09ug7n().s[38]++;
          return JSON.parse(value);
        } catch {
          /* istanbul ignore next */
          cov_1l5n09ug7n().s[39]++;
          return value;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1l5n09ug7n().b[16][1]++;
      }
      cov_1l5n09ug7n().s[40]++;
      return value;
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[41]++;
      this.logger.error(`Erro ao buscar cache ${cacheKey}: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[42]++;
      return null;
    }
  }
  /**
   * Define valor no cache para o tenant atual
   */
  async set(key, value, options =
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[17][0]++, {})) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[7]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[43]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[44]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[18][0]++;
      cov_1l5n09ug7n().s[45]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[18][1]++;
    }
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[46]++, this.generateKey(context.tenantSlug, key));
    const ttl =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[47]++,
    /* istanbul ignore next */
    (cov_1l5n09ug7n().b[19][0]++, options.ttl) ||
    /* istanbul ignore next */
    (cov_1l5n09ug7n().b[19][1]++, this.defaultTTL));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[48]++;
    try {
      let serializedValue;
      // Serializar se necessário
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[49]++;
      if (
      /* istanbul ignore next */
      (cov_1l5n09ug7n().b[21][0]++, options.serialize !== false) &&
      /* istanbul ignore next */
      (cov_1l5n09ug7n().b[21][1]++, typeof value === 'object')) {
        /* istanbul ignore next */
        cov_1l5n09ug7n().b[20][0]++;
        cov_1l5n09ug7n().s[50]++;
        serializedValue = JSON.stringify(value);
      } else {
        /* istanbul ignore next */
        cov_1l5n09ug7n().b[20][1]++;
        cov_1l5n09ug7n().s[51]++;
        serializedValue = String(value);
      }
      // Comprimir se necessário (implementar se valor for muito grande)
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[52]++;
      if (
      /* istanbul ignore next */
      (cov_1l5n09ug7n().b[23][0]++, options.compress) &&
      /* istanbul ignore next */
      (cov_1l5n09ug7n().b[23][1]++, serializedValue.length > 1024)) {
        /* istanbul ignore next */
        cov_1l5n09ug7n().b[22][0]++;
      } // TODO: Implementar compressão com zlib
      else
      /* istanbul ignore next */
      {
        cov_1l5n09ug7n().b[22][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[53]++, await this.redis.setex(cacheKey, ttl, serializedValue));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[54]++;
      return result === 'OK';
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[55]++;
      this.logger.error(`Erro ao definir cache ${cacheKey}: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[56]++;
      return false;
    }
  }
  /**
   * Remove valor do cache para o tenant atual
   */
  async del(key) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[8]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[57]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[58]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[24][0]++;
      cov_1l5n09ug7n().s[59]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[24][1]++;
    }
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[60]++, this.generateKey(context.tenantSlug, key));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[61]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[62]++, await this.redis.del(cacheKey));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[63]++;
      return result > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[64]++;
      this.logger.error(`Erro ao remover cache ${cacheKey}: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[65]++;
      return false;
    }
  }
  /**
   * Verifica se chave existe no cache do tenant atual
   */
  async exists(key) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[9]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[66]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[67]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[25][0]++;
      cov_1l5n09ug7n().s[68]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[25][1]++;
    }
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[69]++, this.generateKey(context.tenantSlug, key));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[70]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[71]++, await this.redis.exists(cacheKey));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[72]++;
      return result === 1;
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[73]++;
      this.logger.error(`Erro ao verificar cache ${cacheKey}: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[74]++;
      return false;
    }
  }
  /**
   * Define TTL para uma chave existente
   */
  async expire(key, ttl) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[10]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[75]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[76]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[26][0]++;
      cov_1l5n09ug7n().s[77]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[26][1]++;
    }
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[78]++, this.generateKey(context.tenantSlug, key));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[79]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[80]++, await this.redis.expire(cacheKey, ttl));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[81]++;
      return result === 1;
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[82]++;
      this.logger.error(`Erro ao definir TTL para ${cacheKey}: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[83]++;
      return false;
    }
  }
  /**
   * Obtém múltiplos valores do cache
   */
  async mget(keys) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[11]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[84]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[85]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[27][0]++;
      cov_1l5n09ug7n().s[86]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[27][1]++;
    }
    const cacheKeys =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[87]++, keys.map(key => {
      /* istanbul ignore next */
      cov_1l5n09ug7n().f[12]++;
      cov_1l5n09ug7n().s[88]++;
      return this.generateKey(context.tenantSlug, key);
    }));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[89]++;
    try {
      const values =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[90]++, await this.redis.mget(...cacheKeys));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[91]++;
      return values.map(value => {
        /* istanbul ignore next */
        cov_1l5n09ug7n().f[13]++;
        cov_1l5n09ug7n().s[92]++;
        if (value === null) {
          /* istanbul ignore next */
          cov_1l5n09ug7n().b[28][0]++;
          cov_1l5n09ug7n().s[93]++;
          this.updateStats(context.tenantSlug, 'miss');
          /* istanbul ignore next */
          cov_1l5n09ug7n().s[94]++;
          return null;
        } else
        /* istanbul ignore next */
        {
          cov_1l5n09ug7n().b[28][1]++;
        }
        cov_1l5n09ug7n().s[95]++;
        this.updateStats(context.tenantSlug, 'hit');
        /* istanbul ignore next */
        cov_1l5n09ug7n().s[96]++;
        try {
          /* istanbul ignore next */
          cov_1l5n09ug7n().s[97]++;
          return JSON.parse(value);
        } catch {
          /* istanbul ignore next */
          cov_1l5n09ug7n().s[98]++;
          return value;
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[99]++;
      this.logger.error(`Erro ao buscar múltiplos caches: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[100]++;
      return keys.map(() => {
        /* istanbul ignore next */
        cov_1l5n09ug7n().f[14]++;
        cov_1l5n09ug7n().s[101]++;
        return null;
      });
    }
  }
  /**
   * Define múltiplos valores no cache
   */
  async mset(keyValues, ttl) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[15]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[102]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[103]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[29][0]++;
      cov_1l5n09ug7n().s[104]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[29][1]++;
    }
    cov_1l5n09ug7n().s[105]++;
    try {
      const pipeline =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[106]++, this.redis.pipeline());
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[107]++;
      for (const [key, value] of Object.entries(keyValues)) {
        const cacheKey =
        /* istanbul ignore next */
        (cov_1l5n09ug7n().s[108]++, this.generateKey(context.tenantSlug, key));
        const serializedValue =
        /* istanbul ignore next */
        (cov_1l5n09ug7n().s[109]++, typeof value === 'object' ?
        /* istanbul ignore next */
        (cov_1l5n09ug7n().b[30][0]++, JSON.stringify(value)) :
        /* istanbul ignore next */
        (cov_1l5n09ug7n().b[30][1]++, String(value)));
        /* istanbul ignore next */
        cov_1l5n09ug7n().s[110]++;
        if (ttl) {
          /* istanbul ignore next */
          cov_1l5n09ug7n().b[31][0]++;
          cov_1l5n09ug7n().s[111]++;
          pipeline.setex(cacheKey, ttl, serializedValue);
        } else {
          /* istanbul ignore next */
          cov_1l5n09ug7n().b[31][1]++;
          cov_1l5n09ug7n().s[112]++;
          pipeline.setex(cacheKey, this.defaultTTL, serializedValue);
        }
      }
      const results =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[113]++, await pipeline.exec());
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[114]++;
      return /* istanbul ignore next */(cov_1l5n09ug7n().b[32][0]++, results?.every(([error, result]) => {
        /* istanbul ignore next */
        cov_1l5n09ug7n().f[16]++;
        cov_1l5n09ug7n().s[115]++;
        return /* istanbul ignore next */(cov_1l5n09ug7n().b[33][0]++, !error) &&
        /* istanbul ignore next */
        (cov_1l5n09ug7n().b[33][1]++, result === 'OK');
      })) ||
      /* istanbul ignore next */
      (cov_1l5n09ug7n().b[32][1]++, false);
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[116]++;
      this.logger.error(`Erro ao definir múltiplos caches: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[117]++;
      return false;
    }
  }
  /**
   * Limpa todo o cache do tenant atual
   */
  async clearTenantCache() {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[17]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[118]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[119]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[34][0]++;
      cov_1l5n09ug7n().s[120]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[34][1]++;
    }
    const pattern =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[121]++, this.generateKey(context.tenantSlug, '*'));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[122]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[123]++, await this.redis.keys(pattern));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[124]++;
      if (keys.length === 0) {
        /* istanbul ignore next */
        cov_1l5n09ug7n().b[35][0]++;
        cov_1l5n09ug7n().s[125]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_1l5n09ug7n().b[35][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[126]++, await this.redis.del(...keys));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[127]++;
      this.logger.log(`Cache limpo para tenant ${context.tenantSlug}: ${result} chaves removidas`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[128]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[129]++;
      this.logger.error(`Erro ao limpar cache do tenant: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[130]++;
      return 0;
    }
  }
  /**
   * Lista todas as chaves do tenant atual
   */
  async getTenantKeys(pattern =
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[36][0]++, '*')) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[18]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[131]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[132]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[37][0]++;
      cov_1l5n09ug7n().s[133]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[37][1]++;
    }
    const searchPattern =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[134]++, this.generateKey(context.tenantSlug, pattern));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[135]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[136]++, await this.redis.keys(searchPattern));
      // Remover prefixo para retornar apenas as chaves originais
      const prefix =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[137]++, this.generateKey(context.tenantSlug, ''));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[138]++;
      return keys.map(key => {
        /* istanbul ignore next */
        cov_1l5n09ug7n().f[19]++;
        cov_1l5n09ug7n().s[139]++;
        return key.replace(prefix, '');
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[140]++;
      this.logger.error(`Erro ao listar chaves do tenant: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[141]++;
      return [];
    }
  }
  /**
   * Obtém estatísticas do cache por tenant
   */
  getTenantStats(tenantSlug) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[20]++;
    cov_1l5n09ug7n().s[142]++;
    return /* istanbul ignore next */(cov_1l5n09ug7n().b[38][0]++, this.stats.get(tenantSlug)) ||
    /* istanbul ignore next */
    (cov_1l5n09ug7n().b[38][1]++, {
      hits: 0,
      misses: 0,
      keys: 0,
      memory: 0
    });
  }
  /**
   * Atualiza estatísticas do cache
   */
  updateStats(tenantSlug, type) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[21]++;
    const stats =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[143]++,
    /* istanbul ignore next */
    (cov_1l5n09ug7n().b[39][0]++, this.stats.get(tenantSlug)) ||
    /* istanbul ignore next */
    (cov_1l5n09ug7n().b[39][1]++, {
      hits: 0,
      misses: 0,
      keys: 0,
      memory: 0
    }));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[144]++;
    if (type === 'hit') {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[40][0]++;
      cov_1l5n09ug7n().s[145]++;
      stats.hits++;
    } else {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[40][1]++;
      cov_1l5n09ug7n().s[146]++;
      stats.misses++;
    }
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[147]++;
    this.stats.set(tenantSlug, stats);
  }
  /**
   * Cache com fallback para função
   */
  async remember(key, callback, options =
  /* istanbul ignore next */
  (cov_1l5n09ug7n().b[41][0]++, {})) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[22]++;
    // Tentar buscar no cache primeiro
    const cached =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[148]++, await this.get(key, options));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[149]++;
    if (cached !== null) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[42][0]++;
      cov_1l5n09ug7n().s[150]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[42][1]++;
    }
    // Executar callback e cachear resultado
    const result =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[151]++, await callback());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[152]++;
    await this.set(key, result, options);
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[153]++;
    return result;
  }
  /**
   * Invalidação de cache por tags
   */
  async invalidateByTag(tag) {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[23]++;
    const context =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[154]++, this.tenantDb.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[155]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().b[43][0]++;
      cov_1l5n09ug7n().s[156]++;
      throw new Error('Cache acessado fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_1l5n09ug7n().b[43][1]++;
    }
    const pattern =
    /* istanbul ignore next */
    (cov_1l5n09ug7n().s[157]++, this.generateKey(context.tenantSlug, `*:tag:${tag}:*`));
    /* istanbul ignore next */
    cov_1l5n09ug7n().s[158]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[159]++, await this.redis.keys(pattern));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[160]++;
      if (keys.length === 0) {
        /* istanbul ignore next */
        cov_1l5n09ug7n().b[44][0]++;
        cov_1l5n09ug7n().s[161]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_1l5n09ug7n().b[44][1]++;
      }
      cov_1l5n09ug7n().s[162]++;
      return await this.redis.del(...keys);
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[163]++;
      this.logger.error(`Erro ao invalidar cache por tag ${tag}: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[164]++;
      return 0;
    }
  }
  /**
   * Limpa caches expirados (limpeza manual)
   */
  async cleanupExpiredKeys() {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[24]++;
    cov_1l5n09ug7n().s[165]++;
    // Redis já remove chaves expiradas automaticamente
    // Esta função pode ser usada para limpeza adicional se necessário
    return 0;
  }
  /**
   * Obtém informações de memória do Redis
   */
  async getMemoryInfo() {
    /* istanbul ignore next */
    cov_1l5n09ug7n().f[25]++;
    cov_1l5n09ug7n().s[166]++;
    try {
      const info =
      /* istanbul ignore next */
      (cov_1l5n09ug7n().s[167]++, await this.redis.memory('usage'));
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[168]++;
      return info;
    } catch (error) {
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[169]++;
      this.logger.error(`Erro ao obter informações de memória: ${error.message}`);
      /* istanbul ignore next */
      cov_1l5n09ug7n().s[170]++;
      return null;
    }
  }
});
/* istanbul ignore next */
cov_1l5n09ug7n().s[171]++;
TenantCacheService = TenantCacheService_1 = __decorate([Injectable(), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_1l5n09ug7n().b[46][0]++, typeof ConfigService !== "undefined") &&
/* istanbul ignore next */
(cov_1l5n09ug7n().b[46][1]++, ConfigService)) === "function" ?
/* istanbul ignore next */
(cov_1l5n09ug7n().b[45][0]++, _a) :
/* istanbul ignore next */
(cov_1l5n09ug7n().b[45][1]++, Object), typeof (_b =
/* istanbul ignore next */
(cov_1l5n09ug7n().b[48][0]++, typeof TenantDatabaseService !== "undefined") &&
/* istanbul ignore next */
(cov_1l5n09ug7n().b[48][1]++, TenantDatabaseService)) === "function" ?
/* istanbul ignore next */
(cov_1l5n09ug7n().b[47][0]++, _b) :
/* istanbul ignore next */
(cov_1l5n09ug7n().b[47][1]++, Object)])], TenantCacheService);
export { TenantCacheService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,