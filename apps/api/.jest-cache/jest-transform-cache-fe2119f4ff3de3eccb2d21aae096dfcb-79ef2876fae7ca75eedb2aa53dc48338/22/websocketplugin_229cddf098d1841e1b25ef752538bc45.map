{"version":3,"names":["cov_5ky8ur652","actualCoverage","Server","SocketIOServer","createServer","logger","MetricsService","CacheService","MetricsWebSocketHandler","io","subscriptions","s","Map","intervals","metricsService","cacheService","constructor","f","setupEventHandlers","on","socket","info","id","data","handleSubscribeMetrics","handleUnsubscribeMetrics","emit","message","sendMetricsUpdate","reason","b","userId","metrics","length","code","minInterval","interval","Math","max","set","intervalId","setInterval","join","error","clientId","subscription","get","sockets","cacheKey","campaignIds","metricsData","filters","startDate","Date","now","endDate","calculateMetrics","filteredMetrics","filterRequestedMetrics","updateData","timestamp","toISOString","requestedMetrics","filtered","metric","undefined","clearInterval","delete","broadcastMetricsUpdate","relevantClients","Array","from","entries","filter","_","some","includes","getConnectionStats","totalConnections","size","activeSubscriptions","values","map","sub","campaignCount","websocketPlugin","fastify","httpServer","cors","origin","process","env","FRONTEND_URL","credentials","path","transports","db","websocketHandler","websocketPort","parseInt","WEBSOCKET_PORT","listen","decorate","addHook","close"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\plugins\\websocket.plugin.ts"],"sourcesContent":["import { FastifyInstance, FastifyPluginAsync } from 'fastify'\nimport { Server as SocketIOServer } from 'socket.io'\nimport { createServer } from 'http'\nimport { logger } from '../utils/logger'\nimport { MetricsService } from '../services/metrics.service'\nimport { CacheService } from '../services/cache.service'\n\ninterface MetricsSubscription {\n  userId: string\n  campaignIds?: string[]\n  metrics: string[]\n  interval: number // em segundos\n}\n\ninterface MetricsUpdate {\n  timestamp: string\n  metrics: Record<string, any>\n  userId: string\n  campaignIds?: string[]\n}\n\nclass MetricsWebSocketHandler {\n  private io: SocketIOServer\n  private subscriptions = new Map<string, MetricsSubscription>()\n  private intervals = new Map<string, NodeJS.Timeout>()\n  private metricsService: MetricsService\n  private cacheService: CacheService\n\n  constructor(\n    io: SocketIOServer,\n    metricsService: MetricsService,\n    cacheService: CacheService,\n  ) {\n    this.io = io\n    this.metricsService = metricsService\n    this.cacheService = cacheService\n    this.setupEventHandlers()\n  }\n\n  private setupEventHandlers() {\n    this.io.on('connection', (socket) => {\n      logger.info(`Cliente WebSocket conectado: ${socket.id}`)\n\n      socket.on('subscribe-metrics', async (data: MetricsSubscription) => {\n        await this.handleSubscribeMetrics(socket, data)\n      })\n\n      socket.on('unsubscribe-metrics', () => {\n        this.handleUnsubscribeMetrics(socket.id)\n        socket.emit('unsubscription-confirmed', {\n          message: 'Inscrição cancelada',\n        })\n      })\n\n      socket.on('get-current-metrics', async () => {\n        await this.sendMetricsUpdate(socket.id)\n      })\n\n      socket.on('disconnect', (reason) => {\n        logger.info(`Cliente WebSocket desconectado: ${socket.id}, razão: ${reason}`)\n        this.handleUnsubscribeMetrics(socket.id)\n      })\n    })\n  }\n\n  private async handleSubscribeMetrics(socket: any, data: MetricsSubscription) {\n    try {\n      // Validar dados de entrada\n      if (!data.userId || !data.metrics || data.metrics.length === 0) {\n        socket.emit('error', {\n          message: 'Dados de inscrição inválidos',\n          code: 'INVALID_SUBSCRIPTION_DATA',\n        })\n        return\n      }\n\n      // Limitar intervalo mínimo para evitar sobrecarga\n      const minInterval = 5 // 5 segundos\n      const interval = Math.max(data.interval || 30, minInterval)\n\n      // Armazenar inscrição\n      this.subscriptions.set(socket.id, {\n        ...data,\n        interval,\n      })\n\n      // Enviar dados iniciais\n      await this.sendMetricsUpdate(socket.id)\n\n      // Configurar intervalo de atualização\n      const intervalId = setInterval(async () => {\n        await this.sendMetricsUpdate(socket.id)\n      }, interval * 1000)\n\n      this.intervals.set(socket.id, intervalId)\n\n      socket.emit('subscription-confirmed', {\n        message: 'Inscrição confirmada',\n        interval,\n        metrics: data.metrics,\n      })\n\n      logger.info(\n        `Cliente ${socket.id} inscrito para métricas: ${data.metrics.join(', ')}`,\n      )\n    } catch (error) {\n      logger.error(\n        `Erro ao inscrever cliente ${socket.id}:`,\n        error,\n      )\n      socket.emit('error', {\n        message: 'Erro interno do servidor',\n        code: 'SUBSCRIPTION_ERROR',\n      })\n    }\n  }\n\n  private async sendMetricsUpdate(clientId: string) {\n    try {\n      const subscription = this.subscriptions.get(clientId)\n      if (!subscription) {\n        return\n      }\n\n      const socket = this.io.sockets.sockets.get(clientId)\n      if (!socket) {\n        this.handleUnsubscribeMetrics(clientId)\n        return\n      }\n\n      // Buscar métricas do cache primeiro\n      const cacheKey = `metrics:realtime:${subscription.userId}:${subscription.campaignIds?.join(',') || 'all'}`\n      let metricsData = await this.cacheService.get(cacheKey)\n\n      if (!metricsData) {\n        // Se não estiver no cache, calcular métricas\n        const filters = {\n          userId: subscription.userId,\n          campaignIds: subscription.campaignIds,\n          startDate: new Date(Date.now() - 24 * 60 * 60 * 1000), // últimas 24h\n          endDate: new Date(),\n        }\n\n        metricsData = await this.metricsService.calculateMetrics(filters)\n\n        // Armazenar no cache por 30 segundos\n        await this.cacheService.set(cacheKey, metricsData, 30)\n      }\n\n      // Filtrar apenas as métricas solicitadas\n      const filteredMetrics = this.filterRequestedMetrics(\n        metricsData,\n        subscription.metrics,\n      )\n\n      // Adicionar timestamp\n      const updateData: MetricsUpdate = {\n        timestamp: new Date().toISOString(),\n        metrics: filteredMetrics,\n        userId: subscription.userId,\n        campaignIds: subscription.campaignIds,\n      }\n\n      socket.emit('metrics-update', updateData)\n    } catch (error) {\n      logger.error(\n        `Erro ao enviar atualização de métricas para ${clientId}:`,\n        error,\n      )\n\n      const socket = this.io.sockets.sockets.get(clientId)\n      if (socket) {\n        socket.emit('error', {\n          message: 'Erro ao buscar métricas',\n          code: 'METRICS_FETCH_ERROR',\n        })\n      }\n    }\n  }\n\n  private filterRequestedMetrics(metricsData: any, requestedMetrics: string[]) {\n    const filtered: any = {}\n\n    for (const metric of requestedMetrics) {\n      if (metricsData[metric] !== undefined) {\n        filtered[metric] = metricsData[metric]\n      }\n    }\n\n    return filtered\n  }\n\n  private handleUnsubscribeMetrics(clientId: string) {\n    // Limpar intervalo\n    const intervalId = this.intervals.get(clientId)\n    if (intervalId) {\n      clearInterval(intervalId)\n      this.intervals.delete(clientId)\n    }\n\n    // Remover inscrição\n    this.subscriptions.delete(clientId)\n\n    logger.info(`Cliente ${clientId} desinscrito das métricas`)\n  }\n\n  // Método para broadcast de atualizações para todos os clientes\n  async broadcastMetricsUpdate(userId: string, campaignIds?: string[]) {\n    const relevantClients = Array.from(this.subscriptions.entries()).filter(\n      ([_, subscription]) => {\n        if (subscription.userId !== userId) {\n          return false\n        }\n\n        if (campaignIds && subscription.campaignIds) {\n          return campaignIds.some((id) =>\n            subscription.campaignIds!.includes(id),\n          )\n        }\n\n        return true\n      },\n    )\n\n    for (const [clientId] of relevantClients) {\n      await this.sendMetricsUpdate(clientId)\n    }\n  }\n\n  // Método para obter estatísticas de conexões\n  getConnectionStats() {\n    return {\n      totalConnections: this.subscriptions.size,\n      activeSubscriptions: Array.from(this.subscriptions.values()).map(\n        (sub) => ({\n          userId: sub.userId,\n          metrics: sub.metrics,\n          interval: sub.interval,\n          campaignCount: sub.campaignIds?.length || 0,\n        }),\n      ),\n    }\n  }\n}\n\nconst websocketPlugin: FastifyPluginAsync = async (fastify: FastifyInstance) => {\n  // Criar servidor HTTP para Socket.IO\n  const httpServer = createServer()\n  \n  // Configurar Socket.IO\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n      credentials: true,\n    },\n    path: '/socket.io/',\n    transports: ['websocket', 'polling'],\n  })\n\n  // Inicializar serviços\n  const metricsService = new MetricsService(fastify.db)\n  const cacheService = new CacheService()\n\n  // Criar handler de WebSocket\n  const websocketHandler = new MetricsWebSocketHandler(\n    io,\n    metricsService,\n    cacheService,\n  )\n\n  // Iniciar servidor HTTP na porta diferente\n  const websocketPort = parseInt(process.env.WEBSOCKET_PORT || '3002')\n  \n  httpServer.listen(websocketPort, () => {\n    logger.info(`WebSocket server listening on port ${websocketPort}`)\n  })\n\n  // Adicionar referências ao Fastify instance\n  fastify.decorate('io', io)\n  fastify.decorate('websocketHandler', websocketHandler)\n\n  // Adicionar hook para broadcast quando métricas são atualizadas\n  fastify.addHook('onReady', async () => {\n    logger.info('WebSocket plugin initialized successfully')\n  })\n\n  // Cleanup na finalização\n  fastify.addHook('onClose', async () => {\n    io.close()\n    httpServer.close()\n    logger.info('WebSocket server closed')\n  })\n}\n\n// Extend Fastify types\ndeclare module 'fastify' {\n  interface FastifyInstance {\n    io: SocketIOServer\n    websocketHandler: MetricsWebSocketHandler\n  }\n}\n\nexport default websocketPlugin"],"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","ignoreList":[]}