5e9486e3eaada9b8313eadc0ad834bce
/* istanbul ignore next */
function cov_r9zfrkqas() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts";
  var hash = "1046fd935fcfc1330b8d2b2d2e0e5a7d1c1d57a4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 23
        }
      },
      "1": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "2": {
        start: {
          line: 21,
          column: 31
        },
        end: {
          line: 21,
          column: 39
        }
      },
      "3": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "4": {
        start: {
          line: 28,
          column: 28
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "5": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "6": {
        start: {
          line: 37,
          column: 32
        },
        end: {
          line: 37,
          column: 65
        }
      },
      "7": {
        start: {
          line: 38,
          column: 33
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "8": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "9": {
        start: {
          line: 46,
          column: 26
        },
        end: {
          line: 46,
          column: 33
        }
      },
      "10": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "11": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "12": {
        start: {
          line: 57,
          column: 28
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "13": {
        start: {
          line: 61,
          column: 36
        },
        end: {
          line: 61,
          column: 70
        }
      },
      "14": {
        start: {
          line: 62,
          column: 30
        },
        end: {
          line: 62,
          column: 71
        }
      },
      "15": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "16": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 90
        }
      },
      "17": {
        start: {
          line: 66,
          column: 36
        },
        end: {
          line: 66,
          column: 57
        }
      },
      "18": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "19": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 90
        }
      },
      "20": {
        start: {
          line: 71,
          column: 25
        },
        end: {
          line: 74,
          column: 14
        }
      },
      "21": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "22": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 88
        }
      },
      "23": {
        start: {
          line: 79,
          column: 28
        },
        end: {
          line: 81,
          column: 14
        }
      },
      "24": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "25": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 78
        }
      },
      "26": {
        start: {
          line: 86,
          column: 30
        },
        end: {
          line: 86,
          column: 80
        }
      },
      "27": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 54
        }
      },
      "28": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 60
        }
      },
      "29": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 29
        }
      },
      "30": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 95,
          column: 13
        }
      },
      "31": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 28
        }
      },
      "32": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 86
        }
      },
      "33": {
        start: {
          line: 102,
          column: 21
        },
        end: {
          line: 105,
          column: 10
        }
      },
      "34": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "35": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 65
        }
      },
      "36": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 82
        }
      },
      "37": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "38": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 72
        }
      },
      "39": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 79
        }
      },
      "40": {
        start: {
          line: 116,
          column: 32
        },
        end: {
          line: 116,
          column: 77
        }
      },
      "41": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "42": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 63
        }
      },
      "43": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 82
        }
      },
      "44": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "45": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 76
        }
      },
      "46": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 89
        }
      },
      "47": {
        start: {
          line: 127,
          column: 26
        },
        end: {
          line: 127,
          column: 34
        }
      },
      "48": {
        start: {
          line: 128,
          column: 26
        },
        end: {
          line: 128,
          column: 36
        }
      },
      "49": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 51
        }
      },
      "50": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "51": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "52": {
        start: {
          line: 145,
          column: 23
        },
        end: {
          line: 145,
          column: 65
        }
      },
      "53": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 53
        }
      },
      "54": {
        start: {
          line: 148,
          column: 45
        },
        end: {
          line: 148,
          column: 49
        }
      },
      "55": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 153,
          column: 10
        }
      },
      "56": {
        start: {
          line: 157,
          column: 60
        },
        end: {
          line: 157,
          column: 64
        }
      },
      "57": {
        start: {
          line: 159,
          column: 29
        },
        end: {
          line: 161,
          column: 10
        }
      },
      "58": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "59": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 84
        }
      },
      "60": {
        start: {
          line: 166,
          column: 25
        },
        end: {
          line: 170,
          column: 29
        }
      },
      "61": {
        start: {
          line: 171,
          column: 19
        },
        end: {
          line: 171,
          column: 27
        }
      },
      "62": {
        start: {
          line: 172,
          column: 22
        },
        end: {
          line: 172,
          column: 23
        }
      },
      "63": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "64": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 44
        }
      },
      "65": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 22
        }
      },
      "66": {
        start: {
          line: 179,
          column: 31
        },
        end: {
          line: 179,
          column: 62
        }
      },
      "67": {
        start: {
          line: 181,
          column: 23
        },
        end: {
          line: 212,
          column: 10
        }
      },
      "68": {
        start: {
          line: 183,
          column: 33
        },
        end: {
          line: 199,
          column: 14
        }
      },
      "69": {
        start: {
          line: 201,
          column: 25
        },
        end: {
          line: 210,
          column: 14
        }
      },
      "70": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 42
        }
      },
      "71": {
        start: {
          line: 214,
          column: 26
        },
        end: {
          line: 214,
          column: 34
        }
      },
      "72": {
        start: {
          line: 215,
          column: 26
        },
        end: {
          line: 215,
          column: 36
        }
      },
      "73": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 51
        }
      },
      "74": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "75": {
        start: {
          line: 226,
          column: 23
        },
        end: {
          line: 226,
          column: 72
        }
      },
      "76": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 63
        }
      },
      "77": {
        start: {
          line: 229,
          column: 45
        },
        end: {
          line: 229,
          column: 56
        }
      },
      "78": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 234,
          column: 10
        }
      },
      "79": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "80": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 243,
          column: 15
        }
      },
      "81": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "82": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 255,
          column: 17
        }
      },
      "83": {
        start: {
          line: 247,
          column: 36
        },
        end: {
          line: 249,
          column: 22
        }
      },
      "84": {
        start: {
          line: 250,
          column: 44
        },
        end: {
          line: 250,
          column: 78
        }
      },
      "85": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 251,
          column: 62
        }
      },
      "86": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 38
        }
      },
      "87": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 55
        }
      },
      "88": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 70
        }
      },
      "89": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "90": {
        start: {
          line: 268,
          column: 28
        },
        end: {
          line: 268,
          column: 54
        }
      },
      "91": {
        start: {
          line: 270,
          column: 28
        },
        end: {
          line: 272,
          column: 14
        }
      },
      "92": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "93": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 78
        }
      },
      "94": {
        start: {
          line: 277,
          column: 25
        },
        end: {
          line: 280,
          column: 14
        }
      },
      "95": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "96": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 88
        }
      },
      "97": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "98": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 93
        }
      },
      "99": {
        start: {
          line: 288,
          column: 49
        },
        end: {
          line: 288,
          column: 53
        }
      },
      "100": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 293,
          column: 14
        }
      },
      "101": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 298,
          column: 13
        }
      },
      "102": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 28
        }
      },
      "103": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 70
        }
      },
      "104": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 317,
          column: 11
        }
      },
      "105": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 329,
          column: 11
        }
      },
      "106": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 43
        }
      },
      "107": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "108": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 338,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 21
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 42
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 54
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 48
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 100
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 29
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 156
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 181,
            column: 45
          },
          end: {
            line: 181,
            column: 46
          }
        },
        loc: {
          start: {
            line: 181,
            column: 59
          },
          end: {
            line: 212,
            column: 9
          }
        },
        line: 181
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 42
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 237
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 29
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 265
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 34
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 303
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 43
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 320
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 36
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 333
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "1": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "2": {
        loc: {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 57
          }
        }, {
          start: {
            line: 67,
            column: 61
          },
          end: {
            line: 67,
            column: 108
          }
        }],
        line: 67
      },
      "3": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 75,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 75,
            column: 21
          }
        }, {
          start: {
            line: 75,
            column: 25
          },
          end: {
            line: 75,
            column: 39
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 82,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 82,
            column: 24
          }
        }, {
          start: {
            line: 82,
            column: 28
          },
          end: {
            line: 82,
            column: 58
          }
        }],
        line: 82
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "9": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "10": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "11": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "12": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "13": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "14": {
        loc: {
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "15": {
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 273,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 273,
            column: 24
          }
        }, {
          start: {
            line: 273,
            column: 28
          },
          end: {
            line: 273,
            column: 58
          }
        }],
        line: 273
      },
      "16": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "17": {
        loc: {
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 281,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 281,
            column: 21
          }
        }, {
          start: {
            line: 281,
            column: 25
          },
          end: {
            line: 281,
            column: 39
          }
        }],
        line: 281
      },
      "18": {
        loc: {
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "19": {
        loc: {
          start: {
            line: 296,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts"],
      sourcesContent: ["import { nanoid } from 'nanoid'\nimport bcrypt from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport { db } from '@utmify/database'\nimport type { User, Organization, UserRole } from '@utmify/shared'\nimport { jwtConfig } from '@/config/env'\nimport { logger, logAuth } from '@/utils/logger'\nimport { ApiError } from '@/utils/errors'\n\nexport interface AuthTokens {\n  accessToken: string\n  refreshToken: string\n  expiresIn: number\n}\n\nexport interface JWTPayload {\n  userId: string\n  organizationId: string\n  role: UserRole\n  email: string\n  sessionId: string\n}\n\nexport interface RefreshTokenPayload {\n  userId: string\n  sessionId: string\n  tokenId: string\n}\n\nexport class AuthService {\n  constructor(private app: FastifyInstance) {}\n\n  // Generate JWT tokens\n  async generateTokens(user: User, sessionId: string): Promise<AuthTokens> {\n    const payload: JWTPayload = {\n      userId: user.id,\n      organizationId: user.organizationId,\n      role: user.role,\n      email: user.email,\n      sessionId,\n    }\n\n    const refreshTokenId = nanoid()\n    const refreshPayload: RefreshTokenPayload = {\n      userId: user.id,\n      sessionId,\n      tokenId: refreshTokenId,\n    }\n\n    // Generate access token\n    const accessToken = this.app.jwt.sign(payload, {\n      expiresIn: jwtConfig.accessExpiresIn,\n    })\n\n    // Generate refresh token with different secret\n    const refreshToken = this.app.jwt.sign(refreshPayload, {\n      secret: jwtConfig.refreshSecret,\n      expiresIn: jwtConfig.refreshExpiresIn,\n    })\n\n    // Store refresh token in Redis\n    const refreshTokenKey = `refresh_token:${refreshTokenId}`\n    const refreshTokenData = {\n      userId: user.id,\n      sessionId,\n      createdAt: new Date().toISOString(),\n    }\n\n    await this.app.redis.setex(\n      refreshTokenKey,\n      7 * 24 * 60 * 60, // 7 days in seconds\n      JSON.stringify(refreshTokenData)\n    )\n\n    // Calculate expiration time\n    const expiresIn = 15 * 60 // 15 minutes in seconds\n\n    return {\n      accessToken,\n      refreshToken,\n      expiresIn,\n    }\n  }\n\n  // Verify and refresh access token\n  async refreshToken(refreshToken: string): Promise<AuthTokens> {\n    try {\n      // Verify refresh token\n      const payload = this.app.jwt.verify(refreshToken, {\n        secret: jwtConfig.refreshSecret,\n      }) as RefreshTokenPayload\n\n      // Check if refresh token exists in Redis\n      const refreshTokenKey = `refresh_token:${payload.tokenId}`\n      const tokenData = await this.app.redis.get(refreshTokenKey)\n\n      if (!tokenData) {\n        throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n      }\n\n      const parsedTokenData = JSON.parse(tokenData)\n      if (parsedTokenData.userId !== payload.userId || parsedTokenData.sessionId !== payload.sessionId) {\n        throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n      }\n\n      // Get user from database\n      const user = await db.user.findUnique({\n        where: { id: payload.userId },\n        include: { organization: true },\n      })\n\n      if (!user || !user.isActive) {\n        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401)\n      }\n\n      // Check if session is still valid\n      const session = await db.userSession.findUnique({\n        where: { id: payload.sessionId },\n      })\n\n      if (!session || session.expiresAt < new Date()) {\n        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401)\n      }\n\n      // Generate new tokens\n      const newTokens = await this.generateTokens(user, payload.sessionId)\n\n      // Remove old refresh token\n      await this.app.redis.del(refreshTokenKey)\n\n      logAuth('token_refreshed', user.id, user.email)\n\n      return newTokens\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error\n      }\n      throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n    }\n  }\n\n  // Login user\n  async login(email: string, password: string, ip?: string, userAgent?: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    tokens: AuthTokens\n  }> {\n    // Find user with organization\n    const user = await db.user.findUnique({\n      where: { email: email.toLowerCase() },\n      include: { organization: true },\n    })\n\n    if (!user) {\n      logAuth('login_failed', undefined, email, ip, false)\n      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401)\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      logAuth('login_failed_inactive', user.id, email, ip, false)\n      throw new ApiError('Account is disabled', 'ACCOUNT_DISABLED', 401)\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password)\n    if (!isValidPassword) {\n      logAuth('login_failed', user.id, email, ip, false)\n      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401)\n    }\n\n    // Check if organization is active\n    if (!user.organization.isActive) {\n      logAuth('login_failed_org_inactive', user.id, email, ip, false)\n      throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401)\n    }\n\n    // Create user session\n    const sessionId = nanoid()\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 7) // 7 days\n\n    await db.userSession.create({\n      data: {\n        id: sessionId,\n        userId: user.id,\n        ipAddress: ip,\n        userAgent,\n        expiresAt,\n      },\n    })\n\n    // Update last login\n    await db.user.update({\n      where: { id: user.id },\n      data: { lastLoginAt: new Date() },\n    })\n\n    // Generate tokens\n    const tokens = await this.generateTokens(user, sessionId)\n\n    logAuth('login_success', user.id, email, ip)\n\n    // Remove password from response\n    const { password: _, ...safeUser } = user\n\n    return {\n      user: safeUser,\n      organization: user.organization,\n      tokens,\n    }\n  }\n\n  // Register new user and organization\n  async register(data: {\n    name: string\n    email: string\n    password: string\n    organizationName: string\n  }, ip?: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    tokens: AuthTokens\n  }> {\n    const { name, email, password, organizationName } = data\n\n    // Check if user already exists\n    const existingUser = await db.user.findUnique({\n      where: { email: email.toLowerCase() },\n    })\n\n    if (existingUser) {\n      throw new ApiError('Email already exists', 'EMAIL_ALREADY_EXISTS', 409)\n    }\n\n    // Generate organization slug\n    const baseSlug = organizationName\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/(^-|-$)/g, '')\n      .substring(0, 50)\n\n    let slug = baseSlug\n    let counter = 1\n\n    // Ensure unique slug\n    while (await db.organization.findUnique({ where: { slug } })) {\n      slug = `${baseSlug}-${counter}`\n      counter++\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12)\n\n    // Create organization and user in transaction\n    const result = await db.$transaction(async (tx) => {\n      // Create organization\n      const organization = await tx.organization.create({\n        data: {\n          name: organizationName,\n          slug,\n          planType: 'STARTER',\n          isActive: true,\n          settings: {\n            timezone: 'UTC',\n            currency: 'USD',\n            dateFormat: 'MM/DD/YYYY',\n            allowPublicDashboard: false,\n            requireTwoFactor: false,\n            maxUsers: 2,\n            customBranding: false,\n          },\n        },\n      })\n\n      // Create user as organization owner\n      const user = await tx.user.create({\n        data: {\n          name,\n          email: email.toLowerCase(),\n          password: hashedPassword,\n          role: 'OWNER',\n          isActive: true,\n          organizationId: organization.id,\n        },\n      })\n\n      return { user, organization }\n    })\n\n    // Create user session\n    const sessionId = nanoid()\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 7) // 7 days\n\n    await db.userSession.create({\n      data: {\n        id: sessionId,\n        userId: result.user.id,\n        ipAddress: ip,\n        expiresAt,\n      },\n    })\n\n    // Generate tokens\n    const tokens = await this.generateTokens(result.user, sessionId)\n\n    logAuth('register_success', result.user.id, email, ip)\n\n    // Remove password from response\n    const { password: _, ...safeUser } = result.user\n\n    return {\n      user: safeUser,\n      organization: result.organization,\n      tokens,\n    }\n  }\n\n  // Logout user\n  async logout(sessionId: string, refreshToken?: string): Promise<void> {\n    try {\n      // Invalidate session\n      await db.userSession.update({\n        where: { id: sessionId },\n        data: { expiresAt: new Date() },\n      })\n\n      // Remove refresh token from Redis if provided\n      if (refreshToken) {\n        try {\n          const payload = this.app.jwt.verify(refreshToken, {\n            secret: jwtConfig.refreshSecret,\n          }) as RefreshTokenPayload\n\n          const refreshTokenKey = `refresh_token:${payload.tokenId}`\n          await this.app.redis.del(refreshTokenKey)\n        } catch {\n          // Ignore errors when removing refresh token\n        }\n      }\n\n      logAuth('logout_success')\n    } catch (error) {\n      logger.error(error, 'Error during logout')\n      throw new ApiError('Logout failed', 'LOGOUT_FAILED', 500)\n    }\n  }\n\n  // Verify JWT token and get user\n  async verifyToken(token: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    sessionId: string\n  }> {\n    try {\n      // Verify token\n      const payload = this.app.jwt.verify(token) as JWTPayload\n\n      // Check if session is still valid\n      const session = await db.userSession.findUnique({\n        where: { id: payload.sessionId },\n      })\n\n      if (!session || session.expiresAt < new Date()) {\n        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401)\n      }\n\n      // Get user with organization\n      const user = await db.user.findUnique({\n        where: { id: payload.userId },\n        include: { organization: true },\n      })\n\n      if (!user || !user.isActive) {\n        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401)\n      }\n\n      if (!user.organization.isActive) {\n        throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401)\n      }\n\n      // Remove password from response\n      const { password: _, ...safeUser } = user\n\n      return {\n        user: safeUser,\n        organization: user.organization,\n        sessionId: payload.sessionId,\n      }\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error\n      }\n      throw new ApiError('Invalid token', 'INVALID_TOKEN', 401)\n    }\n  }\n\n  // Get all active sessions for a user\n  async getUserSessions(userId: string): Promise<any[]> {\n    return db.userSession.findMany({\n      where: {\n        userId,\n        expiresAt: { gt: new Date() },\n      },\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        ipAddress: true,\n        userAgent: true,\n        createdAt: true,\n        expiresAt: true,\n      },\n    })\n  }\n\n  // Revoke a specific session\n  async revokeSession(sessionId: string, userId: string): Promise<void> {\n    await db.userSession.updateMany({\n      where: {\n        id: sessionId,\n        userId,\n      },\n      data: {\n        expiresAt: new Date(),\n      },\n    })\n\n    logAuth('session_revoked', userId)\n  }\n\n  // Revoke all sessions for a user\n  async revokeAllSessions(userId: string): Promise<void> {\n    await db.userSession.updateMany({\n      where: { userId },\n      data: { expiresAt: new Date() },\n    })\n\n    logAuth('all_sessions_revoked', userId)\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1046fd935fcfc1330b8d2b2d2e0e5a7d1c1d57a4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_r9zfrkqas = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_r9zfrkqas();
import { nanoid } from 'nanoid';
import bcrypt from 'bcryptjs';
import { db } from '@utmify/database';
import { jwtConfig } from '@/config/env';
import { logger, logAuth } from '@/utils/logger';
import { ApiError } from '@/utils/errors';
export class AuthService {
  app;
  constructor(app) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[0]++;
    cov_r9zfrkqas().s[0]++;
    this.app = app;
  }
  // Generate JWT tokens
  async generateTokens(user, sessionId) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[1]++;
    const payload =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[1]++, {
      userId: user.id,
      organizationId: user.organizationId,
      role: user.role,
      email: user.email,
      sessionId
    });
    const refreshTokenId =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[2]++, nanoid());
    const refreshPayload =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[3]++, {
      userId: user.id,
      sessionId,
      tokenId: refreshTokenId
    });
    // Generate access token
    const accessToken =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[4]++, this.app.jwt.sign(payload, {
      expiresIn: jwtConfig.accessExpiresIn
    }));
    // Generate refresh token with different secret
    const refreshToken =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[5]++, this.app.jwt.sign(refreshPayload, {
      secret: jwtConfig.refreshSecret,
      expiresIn: jwtConfig.refreshExpiresIn
    }));
    // Store refresh token in Redis
    const refreshTokenKey =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[6]++, `refresh_token:${refreshTokenId}`);
    const refreshTokenData =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[7]++, {
      userId: user.id,
      sessionId,
      createdAt: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_r9zfrkqas().s[8]++;
    await this.app.redis.setex(refreshTokenKey, 7 * 24 * 60 * 60,
    // 7 days in seconds
    JSON.stringify(refreshTokenData));
    // Calculate expiration time
    const expiresIn =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[9]++, 15 * 60); // 15 minutes in seconds
    /* istanbul ignore next */
    cov_r9zfrkqas().s[10]++;
    return {
      accessToken,
      refreshToken,
      expiresIn
    };
  }
  // Verify and refresh access token
  async refreshToken(refreshToken) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[2]++;
    cov_r9zfrkqas().s[11]++;
    try {
      // Verify refresh token
      const payload =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[12]++, this.app.jwt.verify(refreshToken, {
        secret: jwtConfig.refreshSecret
      }));
      // Check if refresh token exists in Redis
      const refreshTokenKey =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[13]++, `refresh_token:${payload.tokenId}`);
      const tokenData =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[14]++, await this.app.redis.get(refreshTokenKey));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[15]++;
      if (!tokenData) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[0][0]++;
        cov_r9zfrkqas().s[16]++;
        throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[0][1]++;
      }
      const parsedTokenData =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[17]++, JSON.parse(tokenData));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[18]++;
      if (
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[2][0]++, parsedTokenData.userId !== payload.userId) ||
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[2][1]++, parsedTokenData.sessionId !== payload.sessionId)) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[1][0]++;
        cov_r9zfrkqas().s[19]++;
        throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[1][1]++;
      }
      // Get user from database
      const user =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[20]++, await db.user.findUnique({
        where: {
          id: payload.userId
        },
        include: {
          organization: true
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[21]++;
      if (
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[4][0]++, !user) ||
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[4][1]++, !user.isActive)) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[3][0]++;
        cov_r9zfrkqas().s[22]++;
        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[3][1]++;
      }
      // Check if session is still valid
      const session =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[23]++, await db.userSession.findUnique({
        where: {
          id: payload.sessionId
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[24]++;
      if (
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[6][0]++, !session) ||
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[6][1]++, session.expiresAt < new Date())) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[5][0]++;
        cov_r9zfrkqas().s[25]++;
        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[5][1]++;
      }
      // Generate new tokens
      const newTokens =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[26]++, await this.generateTokens(user, payload.sessionId));
      // Remove old refresh token
      /* istanbul ignore next */
      cov_r9zfrkqas().s[27]++;
      await this.app.redis.del(refreshTokenKey);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[28]++;
      logAuth('token_refreshed', user.id, user.email);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[29]++;
      return newTokens;
    } catch (error) {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[30]++;
      if (error instanceof ApiError) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[7][0]++;
        cov_r9zfrkqas().s[31]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[7][1]++;
      }
      cov_r9zfrkqas().s[32]++;
      throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401);
    }
  }
  // Login user
  async login(email, password, ip, userAgent) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[3]++;
    // Find user with organization
    const user =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[33]++, await db.user.findUnique({
      where: {
        email: email.toLowerCase()
      },
      include: {
        organization: true
      }
    }));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[34]++;
    if (!user) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[8][0]++;
      cov_r9zfrkqas().s[35]++;
      logAuth('login_failed', undefined, email, ip, false);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[36]++;
      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[8][1]++;
    }
    // Check if user is active
    cov_r9zfrkqas().s[37]++;
    if (!user.isActive) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[9][0]++;
      cov_r9zfrkqas().s[38]++;
      logAuth('login_failed_inactive', user.id, email, ip, false);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[39]++;
      throw new ApiError('Account is disabled', 'ACCOUNT_DISABLED', 401);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[9][1]++;
    }
    // Verify password
    const isValidPassword =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[40]++, await bcrypt.compare(password, user.password));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[41]++;
    if (!isValidPassword) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[10][0]++;
      cov_r9zfrkqas().s[42]++;
      logAuth('login_failed', user.id, email, ip, false);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[43]++;
      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[10][1]++;
    }
    // Check if organization is active
    cov_r9zfrkqas().s[44]++;
    if (!user.organization.isActive) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[11][0]++;
      cov_r9zfrkqas().s[45]++;
      logAuth('login_failed_org_inactive', user.id, email, ip, false);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[46]++;
      throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[11][1]++;
    }
    // Create user session
    const sessionId =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[47]++, nanoid());
    const expiresAt =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[48]++, new Date());
    /* istanbul ignore next */
    cov_r9zfrkqas().s[49]++;
    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days
    /* istanbul ignore next */
    cov_r9zfrkqas().s[50]++;
    await db.userSession.create({
      data: {
        id: sessionId,
        userId: user.id,
        ipAddress: ip,
        userAgent,
        expiresAt
      }
    });
    // Update last login
    /* istanbul ignore next */
    cov_r9zfrkqas().s[51]++;
    await db.user.update({
      where: {
        id: user.id
      },
      data: {
        lastLoginAt: new Date()
      }
    });
    // Generate tokens
    const tokens =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[52]++, await this.generateTokens(user, sessionId));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[53]++;
    logAuth('login_success', user.id, email, ip);
    // Remove password from response
    const {
      password: _,
      ...safeUser
    } =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[54]++, user);
    /* istanbul ignore next */
    cov_r9zfrkqas().s[55]++;
    return {
      user: safeUser,
      organization: user.organization,
      tokens
    };
  }
  // Register new user and organization
  async register(data, ip) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[4]++;
    const {
      name,
      email,
      password,
      organizationName
    } =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[56]++, data);
    // Check if user already exists
    const existingUser =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[57]++, await db.user.findUnique({
      where: {
        email: email.toLowerCase()
      }
    }));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[58]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[12][0]++;
      cov_r9zfrkqas().s[59]++;
      throw new ApiError('Email already exists', 'EMAIL_ALREADY_EXISTS', 409);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[12][1]++;
    }
    // Generate organization slug
    const baseSlug =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[60]++, organizationName.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '').substring(0, 50));
    let slug =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[61]++, baseSlug);
    let counter =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[62]++, 1);
    // Ensure unique slug
    /* istanbul ignore next */
    cov_r9zfrkqas().s[63]++;
    while (await db.organization.findUnique({
      where: {
        slug
      }
    })) {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[64]++;
      slug = `${baseSlug}-${counter}`;
      /* istanbul ignore next */
      cov_r9zfrkqas().s[65]++;
      counter++;
    }
    // Hash password
    const hashedPassword =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[66]++, await bcrypt.hash(password, 12));
    // Create organization and user in transaction
    const result =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[67]++, await db.$transaction(async tx => {
      /* istanbul ignore next */
      cov_r9zfrkqas().f[5]++;
      // Create organization
      const organization =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[68]++, await tx.organization.create({
        data: {
          name: organizationName,
          slug,
          planType: 'STARTER',
          isActive: true,
          settings: {
            timezone: 'UTC',
            currency: 'USD',
            dateFormat: 'MM/DD/YYYY',
            allowPublicDashboard: false,
            requireTwoFactor: false,
            maxUsers: 2,
            customBranding: false
          }
        }
      }));
      // Create user as organization owner
      const user =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[69]++, await tx.user.create({
        data: {
          name,
          email: email.toLowerCase(),
          password: hashedPassword,
          role: 'OWNER',
          isActive: true,
          organizationId: organization.id
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[70]++;
      return {
        user,
        organization
      };
    }));
    // Create user session
    const sessionId =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[71]++, nanoid());
    const expiresAt =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[72]++, new Date());
    /* istanbul ignore next */
    cov_r9zfrkqas().s[73]++;
    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days
    /* istanbul ignore next */
    cov_r9zfrkqas().s[74]++;
    await db.userSession.create({
      data: {
        id: sessionId,
        userId: result.user.id,
        ipAddress: ip,
        expiresAt
      }
    });
    // Generate tokens
    const tokens =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[75]++, await this.generateTokens(result.user, sessionId));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[76]++;
    logAuth('register_success', result.user.id, email, ip);
    // Remove password from response
    const {
      password: _,
      ...safeUser
    } =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[77]++, result.user);
    /* istanbul ignore next */
    cov_r9zfrkqas().s[78]++;
    return {
      user: safeUser,
      organization: result.organization,
      tokens
    };
  }
  // Logout user
  async logout(sessionId, refreshToken) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[6]++;
    cov_r9zfrkqas().s[79]++;
    try {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[80]++;
      // Invalidate session
      await db.userSession.update({
        where: {
          id: sessionId
        },
        data: {
          expiresAt: new Date()
        }
      });
      // Remove refresh token from Redis if provided
      /* istanbul ignore next */
      cov_r9zfrkqas().s[81]++;
      if (refreshToken) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[13][0]++;
        cov_r9zfrkqas().s[82]++;
        try {
          const payload =
          /* istanbul ignore next */
          (cov_r9zfrkqas().s[83]++, this.app.jwt.verify(refreshToken, {
            secret: jwtConfig.refreshSecret
          }));
          const refreshTokenKey =
          /* istanbul ignore next */
          (cov_r9zfrkqas().s[84]++, `refresh_token:${payload.tokenId}`);
          /* istanbul ignore next */
          cov_r9zfrkqas().s[85]++;
          await this.app.redis.del(refreshTokenKey);
        } catch {
          // Ignore errors when removing refresh token
        }
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[13][1]++;
      }
      cov_r9zfrkqas().s[86]++;
      logAuth('logout_success');
    } catch (error) {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[87]++;
      logger.error(error, 'Error during logout');
      /* istanbul ignore next */
      cov_r9zfrkqas().s[88]++;
      throw new ApiError('Logout failed', 'LOGOUT_FAILED', 500);
    }
  }
  // Verify JWT token and get user
  async verifyToken(token) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[7]++;
    cov_r9zfrkqas().s[89]++;
    try {
      // Verify token
      const payload =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[90]++, this.app.jwt.verify(token));
      // Check if session is still valid
      const session =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[91]++, await db.userSession.findUnique({
        where: {
          id: payload.sessionId
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[92]++;
      if (
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[15][0]++, !session) ||
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[15][1]++, session.expiresAt < new Date())) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[14][0]++;
        cov_r9zfrkqas().s[93]++;
        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[14][1]++;
      }
      // Get user with organization
      const user =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[94]++, await db.user.findUnique({
        where: {
          id: payload.userId
        },
        include: {
          organization: true
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[95]++;
      if (
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[17][0]++, !user) ||
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[17][1]++, !user.isActive)) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[16][0]++;
        cov_r9zfrkqas().s[96]++;
        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[16][1]++;
      }
      cov_r9zfrkqas().s[97]++;
      if (!user.organization.isActive) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[18][0]++;
        cov_r9zfrkqas().s[98]++;
        throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[18][1]++;
      }
      // Remove password from response
      const {
        password: _,
        ...safeUser
      } =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[99]++, user);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[100]++;
      return {
        user: safeUser,
        organization: user.organization,
        sessionId: payload.sessionId
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[101]++;
      if (error instanceof ApiError) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[19][0]++;
        cov_r9zfrkqas().s[102]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[19][1]++;
      }
      cov_r9zfrkqas().s[103]++;
      throw new ApiError('Invalid token', 'INVALID_TOKEN', 401);
    }
  }
  // Get all active sessions for a user
  async getUserSessions(userId) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[8]++;
    cov_r9zfrkqas().s[104]++;
    return db.userSession.findMany({
      where: {
        userId,
        expiresAt: {
          gt: new Date()
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      select: {
        id: true,
        ipAddress: true,
        userAgent: true,
        createdAt: true,
        expiresAt: true
      }
    });
  }
  // Revoke a specific session
  async revokeSession(sessionId, userId) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[9]++;
    cov_r9zfrkqas().s[105]++;
    await db.userSession.updateMany({
      where: {
        id: sessionId,
        userId
      },
      data: {
        expiresAt: new Date()
      }
    });
    /* istanbul ignore next */
    cov_r9zfrkqas().s[106]++;
    logAuth('session_revoked', userId);
  }
  // Revoke all sessions for a user
  async revokeAllSessions(userId) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[10]++;
    cov_r9zfrkqas().s[107]++;
    await db.userSession.updateMany({
      where: {
        userId
      },
      data: {
        expiresAt: new Date()
      }
    });
    /* istanbul ignore next */
    cov_r9zfrkqas().s[108]++;
    logAuth('all_sessions_revoked', userId);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfcjl6ZnJrcWFzIiwiYWN0dWFsQ292ZXJhZ2UiLCJuYW5vaWQiLCJiY3J5cHQiLCJkYiIsImp3dENvbmZpZyIsImxvZ2dlciIsImxvZ0F1dGgiLCJBcGlFcnJvciIsIkF1dGhTZXJ2aWNlIiwiYXBwIiwiY29uc3RydWN0b3IiLCJmIiwicyIsImdlbmVyYXRlVG9rZW5zIiwidXNlciIsInNlc3Npb25JZCIsInBheWxvYWQiLCJ1c2VySWQiLCJpZCIsIm9yZ2FuaXphdGlvbklkIiwicm9sZSIsImVtYWlsIiwicmVmcmVzaFRva2VuSWQiLCJyZWZyZXNoUGF5bG9hZCIsInRva2VuSWQiLCJhY2Nlc3NUb2tlbiIsImp3dCIsInNpZ24iLCJleHBpcmVzSW4iLCJhY2Nlc3NFeHBpcmVzSW4iLCJyZWZyZXNoVG9rZW4iLCJzZWNyZXQiLCJyZWZyZXNoU2VjcmV0IiwicmVmcmVzaEV4cGlyZXNJbiIsInJlZnJlc2hUb2tlbktleSIsInJlZnJlc2hUb2tlbkRhdGEiLCJjcmVhdGVkQXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJyZWRpcyIsInNldGV4IiwiSlNPTiIsInN0cmluZ2lmeSIsInZlcmlmeSIsInRva2VuRGF0YSIsImdldCIsImIiLCJwYXJzZWRUb2tlbkRhdGEiLCJwYXJzZSIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsImluY2x1ZGUiLCJvcmdhbml6YXRpb24iLCJpc0FjdGl2ZSIsInNlc3Npb24iLCJ1c2VyU2Vzc2lvbiIsImV4cGlyZXNBdCIsIm5ld1Rva2VucyIsImRlbCIsImVycm9yIiwibG9naW4iLCJwYXNzd29yZCIsImlwIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJ1bmRlZmluZWQiLCJpc1ZhbGlkUGFzc3dvcmQiLCJjb21wYXJlIiwic2V0RGF0ZSIsImdldERhdGUiLCJjcmVhdGUiLCJkYXRhIiwiaXBBZGRyZXNzIiwidXBkYXRlIiwibGFzdExvZ2luQXQiLCJ0b2tlbnMiLCJfIiwic2FmZVVzZXIiLCJyZWdpc3RlciIsIm5hbWUiLCJvcmdhbml6YXRpb25OYW1lIiwiZXhpc3RpbmdVc2VyIiwiYmFzZVNsdWciLCJyZXBsYWNlIiwic3Vic3RyaW5nIiwic2x1ZyIsImNvdW50ZXIiLCJoYXNoZWRQYXNzd29yZCIsImhhc2giLCJyZXN1bHQiLCIkdHJhbnNhY3Rpb24iLCJ0eCIsInBsYW5UeXBlIiwic2V0dGluZ3MiLCJ0aW1lem9uZSIsImN1cnJlbmN5IiwiZGF0ZUZvcm1hdCIsImFsbG93UHVibGljRGFzaGJvYXJkIiwicmVxdWlyZVR3b0ZhY3RvciIsIm1heFVzZXJzIiwiY3VzdG9tQnJhbmRpbmciLCJsb2dvdXQiLCJ2ZXJpZnlUb2tlbiIsInRva2VuIiwiZ2V0VXNlclNlc3Npb25zIiwiZmluZE1hbnkiLCJndCIsIm9yZGVyQnkiLCJzZWxlY3QiLCJyZXZva2VTZXNzaW9uIiwidXBkYXRlTWFueSIsInJldm9rZUFsbFNlc3Npb25zIl0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxFbnpvIE1hcmNlbG9cXERlc2t0b3BcXFByb2pldG9zIEVtcHJlc2FcXFNhYXMgVXRtaWZ5XFx1dG1pZnktY2xvbmVcXGFwcHNcXGFwaVxcc3JjXFxzZXJ2aWNlc1xcYXV0aC5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5hbm9pZCB9IGZyb20gJ25hbm9pZCdcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnXG5pbXBvcnQgdHlwZSB7IEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gJ2Zhc3RpZnknXG5pbXBvcnQgeyBkYiB9IGZyb20gJ0B1dG1pZnkvZGF0YWJhc2UnXG5pbXBvcnQgdHlwZSB7IFVzZXIsIE9yZ2FuaXphdGlvbiwgVXNlclJvbGUgfSBmcm9tICdAdXRtaWZ5L3NoYXJlZCdcbmltcG9ydCB7IGp3dENvbmZpZyB9IGZyb20gJ0AvY29uZmlnL2VudidcbmltcG9ydCB7IGxvZ2dlciwgbG9nQXV0aCB9IGZyb20gJ0AvdXRpbHMvbG9nZ2VyJ1xuaW1wb3J0IHsgQXBpRXJyb3IgfSBmcm9tICdAL3V0aWxzL2Vycm9ycydcblxuZXhwb3J0IGludGVyZmFjZSBBdXRoVG9rZW5zIHtcbiAgYWNjZXNzVG9rZW46IHN0cmluZ1xuICByZWZyZXNoVG9rZW46IHN0cmluZ1xuICBleHBpcmVzSW46IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpXVFBheWxvYWQge1xuICB1c2VySWQ6IHN0cmluZ1xuICBvcmdhbml6YXRpb25JZDogc3RyaW5nXG4gIHJvbGU6IFVzZXJSb2xlXG4gIGVtYWlsOiBzdHJpbmdcbiAgc2Vzc2lvbklkOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWZyZXNoVG9rZW5QYXlsb2FkIHtcbiAgdXNlcklkOiBzdHJpbmdcbiAgc2Vzc2lvbklkOiBzdHJpbmdcbiAgdG9rZW5JZDogc3RyaW5nXG59XG5cbmV4cG9ydCBjbGFzcyBBdXRoU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwOiBGYXN0aWZ5SW5zdGFuY2UpIHt9XG5cbiAgLy8gR2VuZXJhdGUgSldUIHRva2Vuc1xuICBhc3luYyBnZW5lcmF0ZVRva2Vucyh1c2VyOiBVc2VyLCBzZXNzaW9uSWQ6IHN0cmluZyk6IFByb21pc2U8QXV0aFRva2Vucz4ge1xuICAgIGNvbnN0IHBheWxvYWQ6IEpXVFBheWxvYWQgPSB7XG4gICAgICB1c2VySWQ6IHVzZXIuaWQsXG4gICAgICBvcmdhbml6YXRpb25JZDogdXNlci5vcmdhbml6YXRpb25JZCxcbiAgICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgc2Vzc2lvbklkLFxuICAgIH1cblxuICAgIGNvbnN0IHJlZnJlc2hUb2tlbklkID0gbmFub2lkKClcbiAgICBjb25zdCByZWZyZXNoUGF5bG9hZDogUmVmcmVzaFRva2VuUGF5bG9hZCA9IHtcbiAgICAgIHVzZXJJZDogdXNlci5pZCxcbiAgICAgIHNlc3Npb25JZCxcbiAgICAgIHRva2VuSWQ6IHJlZnJlc2hUb2tlbklkLFxuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIGFjY2VzcyB0b2tlblxuICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gdGhpcy5hcHAuand0LnNpZ24ocGF5bG9hZCwge1xuICAgICAgZXhwaXJlc0luOiBqd3RDb25maWcuYWNjZXNzRXhwaXJlc0luLFxuICAgIH0pXG5cbiAgICAvLyBHZW5lcmF0ZSByZWZyZXNoIHRva2VuIHdpdGggZGlmZmVyZW50IHNlY3JldFxuICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IHRoaXMuYXBwLmp3dC5zaWduKHJlZnJlc2hQYXlsb2FkLCB7XG4gICAgICBzZWNyZXQ6IGp3dENvbmZpZy5yZWZyZXNoU2VjcmV0LFxuICAgICAgZXhwaXJlc0luOiBqd3RDb25maWcucmVmcmVzaEV4cGlyZXNJbixcbiAgICB9KVxuXG4gICAgLy8gU3RvcmUgcmVmcmVzaCB0b2tlbiBpbiBSZWRpc1xuICAgIGNvbnN0IHJlZnJlc2hUb2tlbktleSA9IGByZWZyZXNoX3Rva2VuOiR7cmVmcmVzaFRva2VuSWR9YFxuICAgIGNvbnN0IHJlZnJlc2hUb2tlbkRhdGEgPSB7XG4gICAgICB1c2VySWQ6IHVzZXIuaWQsXG4gICAgICBzZXNzaW9uSWQsXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLmFwcC5yZWRpcy5zZXRleChcbiAgICAgIHJlZnJlc2hUb2tlbktleSxcbiAgICAgIDcgKiAyNCAqIDYwICogNjAsIC8vIDcgZGF5cyBpbiBzZWNvbmRzXG4gICAgICBKU09OLnN0cmluZ2lmeShyZWZyZXNoVG9rZW5EYXRhKVxuICAgIClcblxuICAgIC8vIENhbGN1bGF0ZSBleHBpcmF0aW9uIHRpbWVcbiAgICBjb25zdCBleHBpcmVzSW4gPSAxNSAqIDYwIC8vIDE1IG1pbnV0ZXMgaW4gc2Vjb25kc1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGFjY2Vzc1Rva2VuLFxuICAgICAgcmVmcmVzaFRva2VuLFxuICAgICAgZXhwaXJlc0luLFxuICAgIH1cbiAgfVxuXG4gIC8vIFZlcmlmeSBhbmQgcmVmcmVzaCBhY2Nlc3MgdG9rZW5cbiAgYXN5bmMgcmVmcmVzaFRva2VuKHJlZnJlc2hUb2tlbjogc3RyaW5nKTogUHJvbWlzZTxBdXRoVG9rZW5zPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFZlcmlmeSByZWZyZXNoIHRva2VuXG4gICAgICBjb25zdCBwYXlsb2FkID0gdGhpcy5hcHAuand0LnZlcmlmeShyZWZyZXNoVG9rZW4sIHtcbiAgICAgICAgc2VjcmV0OiBqd3RDb25maWcucmVmcmVzaFNlY3JldCxcbiAgICAgIH0pIGFzIFJlZnJlc2hUb2tlblBheWxvYWRcblxuICAgICAgLy8gQ2hlY2sgaWYgcmVmcmVzaCB0b2tlbiBleGlzdHMgaW4gUmVkaXNcbiAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbktleSA9IGByZWZyZXNoX3Rva2VuOiR7cGF5bG9hZC50b2tlbklkfWBcbiAgICAgIGNvbnN0IHRva2VuRGF0YSA9IGF3YWl0IHRoaXMuYXBwLnJlZGlzLmdldChyZWZyZXNoVG9rZW5LZXkpXG5cbiAgICAgIGlmICghdG9rZW5EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBBcGlFcnJvcignSW52YWxpZCByZWZyZXNoIHRva2VuJywgJ0lOVkFMSURfUkVGUkVTSF9UT0tFTicsIDQwMSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFyc2VkVG9rZW5EYXRhID0gSlNPTi5wYXJzZSh0b2tlbkRhdGEpXG4gICAgICBpZiAocGFyc2VkVG9rZW5EYXRhLnVzZXJJZCAhPT0gcGF5bG9hZC51c2VySWQgfHwgcGFyc2VkVG9rZW5EYXRhLnNlc3Npb25JZCAhPT0gcGF5bG9hZC5zZXNzaW9uSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKCdJbnZhbGlkIHJlZnJlc2ggdG9rZW4nLCAnSU5WQUxJRF9SRUZSRVNIX1RPS0VOJywgNDAxKVxuICAgICAgfVxuXG4gICAgICAvLyBHZXQgdXNlciBmcm9tIGRhdGFiYXNlXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgZGIudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IHBheWxvYWQudXNlcklkIH0sXG4gICAgICAgIGluY2x1ZGU6IHsgb3JnYW5pemF0aW9uOiB0cnVlIH0sXG4gICAgICB9KVxuXG4gICAgICBpZiAoIXVzZXIgfHwgIXVzZXIuaXNBY3RpdmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKCdVc2VyIG5vdCBmb3VuZCBvciBpbmFjdGl2ZScsICdVU0VSX05PVF9GT1VORCcsIDQwMSlcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgc2Vzc2lvbiBpcyBzdGlsbCB2YWxpZFxuICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGRiLnVzZXJTZXNzaW9uLmZpbmRVbmlxdWUoe1xuICAgICAgICB3aGVyZTogeyBpZDogcGF5bG9hZC5zZXNzaW9uSWQgfSxcbiAgICAgIH0pXG5cbiAgICAgIGlmICghc2Vzc2lvbiB8fCBzZXNzaW9uLmV4cGlyZXNBdCA8IG5ldyBEYXRlKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKCdTZXNzaW9uIGV4cGlyZWQnLCAnU0VTU0lPTl9FWFBJUkVEJywgNDAxKVxuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmF0ZSBuZXcgdG9rZW5zXG4gICAgICBjb25zdCBuZXdUb2tlbnMgPSBhd2FpdCB0aGlzLmdlbmVyYXRlVG9rZW5zKHVzZXIsIHBheWxvYWQuc2Vzc2lvbklkKVxuXG4gICAgICAvLyBSZW1vdmUgb2xkIHJlZnJlc2ggdG9rZW5cbiAgICAgIGF3YWl0IHRoaXMuYXBwLnJlZGlzLmRlbChyZWZyZXNoVG9rZW5LZXkpXG5cbiAgICAgIGxvZ0F1dGgoJ3Rva2VuX3JlZnJlc2hlZCcsIHVzZXIuaWQsIHVzZXIuZW1haWwpXG5cbiAgICAgIHJldHVybiBuZXdUb2tlbnNcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQXBpRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcignSW52YWxpZCByZWZyZXNoIHRva2VuJywgJ0lOVkFMSURfUkVGUkVTSF9UT0tFTicsIDQwMSlcbiAgICB9XG4gIH1cblxuICAvLyBMb2dpbiB1c2VyXG4gIGFzeW5jIGxvZ2luKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcsIGlwPzogc3RyaW5nLCB1c2VyQWdlbnQ/OiBzdHJpbmcpOiBQcm9taXNlPHtcbiAgICB1c2VyOiBPbWl0PFVzZXIsICdwYXNzd29yZCc+XG4gICAgb3JnYW5pemF0aW9uOiBPcmdhbml6YXRpb25cbiAgICB0b2tlbnM6IEF1dGhUb2tlbnNcbiAgfT4ge1xuICAgIC8vIEZpbmQgdXNlciB3aXRoIG9yZ2FuaXphdGlvblxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBkYi51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSxcbiAgICAgIGluY2x1ZGU6IHsgb3JnYW5pemF0aW9uOiB0cnVlIH0sXG4gICAgfSlcblxuICAgIGlmICghdXNlcikge1xuICAgICAgbG9nQXV0aCgnbG9naW5fZmFpbGVkJywgdW5kZWZpbmVkLCBlbWFpbCwgaXAsIGZhbHNlKVxuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKCdJbnZhbGlkIGNyZWRlbnRpYWxzJywgJ0lOVkFMSURfQ1JFREVOVElBTFMnLCA0MDEpXG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdXNlciBpcyBhY3RpdmVcbiAgICBpZiAoIXVzZXIuaXNBY3RpdmUpIHtcbiAgICAgIGxvZ0F1dGgoJ2xvZ2luX2ZhaWxlZF9pbmFjdGl2ZScsIHVzZXIuaWQsIGVtYWlsLCBpcCwgZmFsc2UpXG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoJ0FjY291bnQgaXMgZGlzYWJsZWQnLCAnQUNDT1VOVF9ESVNBQkxFRCcsIDQwMSlcbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgcGFzc3dvcmRcbiAgICBjb25zdCBpc1ZhbGlkUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgdXNlci5wYXNzd29yZClcbiAgICBpZiAoIWlzVmFsaWRQYXNzd29yZCkge1xuICAgICAgbG9nQXV0aCgnbG9naW5fZmFpbGVkJywgdXNlci5pZCwgZW1haWwsIGlwLCBmYWxzZSlcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcignSW52YWxpZCBjcmVkZW50aWFscycsICdJTlZBTElEX0NSRURFTlRJQUxTJywgNDAxKVxuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIG9yZ2FuaXphdGlvbiBpcyBhY3RpdmVcbiAgICBpZiAoIXVzZXIub3JnYW5pemF0aW9uLmlzQWN0aXZlKSB7XG4gICAgICBsb2dBdXRoKCdsb2dpbl9mYWlsZWRfb3JnX2luYWN0aXZlJywgdXNlci5pZCwgZW1haWwsIGlwLCBmYWxzZSlcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcignT3JnYW5pemF0aW9uIGlzIGRpc2FibGVkJywgJ09SR0FOSVpBVElPTl9ESVNBQkxFRCcsIDQwMSlcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdXNlciBzZXNzaW9uXG4gICAgY29uc3Qgc2Vzc2lvbklkID0gbmFub2lkKClcbiAgICBjb25zdCBleHBpcmVzQXQgPSBuZXcgRGF0ZSgpXG4gICAgZXhwaXJlc0F0LnNldERhdGUoZXhwaXJlc0F0LmdldERhdGUoKSArIDcpIC8vIDcgZGF5c1xuXG4gICAgYXdhaXQgZGIudXNlclNlc3Npb24uY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgaWQ6IHNlc3Npb25JZCxcbiAgICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgICBpcEFkZHJlc3M6IGlwLFxuICAgICAgICB1c2VyQWdlbnQsXG4gICAgICAgIGV4cGlyZXNBdCxcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIC8vIFVwZGF0ZSBsYXN0IGxvZ2luXG4gICAgYXdhaXQgZGIudXNlci51cGRhdGUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHVzZXIuaWQgfSxcbiAgICAgIGRhdGE6IHsgbGFzdExvZ2luQXQ6IG5ldyBEYXRlKCkgfSxcbiAgICB9KVxuXG4gICAgLy8gR2VuZXJhdGUgdG9rZW5zXG4gICAgY29uc3QgdG9rZW5zID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVRva2Vucyh1c2VyLCBzZXNzaW9uSWQpXG5cbiAgICBsb2dBdXRoKCdsb2dpbl9zdWNjZXNzJywgdXNlci5pZCwgZW1haWwsIGlwKVxuXG4gICAgLy8gUmVtb3ZlIHBhc3N3b3JkIGZyb20gcmVzcG9uc2VcbiAgICBjb25zdCB7IHBhc3N3b3JkOiBfLCAuLi5zYWZlVXNlciB9ID0gdXNlclxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXI6IHNhZmVVc2VyLFxuICAgICAgb3JnYW5pemF0aW9uOiB1c2VyLm9yZ2FuaXphdGlvbixcbiAgICAgIHRva2VucyxcbiAgICB9XG4gIH1cblxuICAvLyBSZWdpc3RlciBuZXcgdXNlciBhbmQgb3JnYW5pemF0aW9uXG4gIGFzeW5jIHJlZ2lzdGVyKGRhdGE6IHtcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBlbWFpbDogc3RyaW5nXG4gICAgcGFzc3dvcmQ6IHN0cmluZ1xuICAgIG9yZ2FuaXphdGlvbk5hbWU6IHN0cmluZ1xuICB9LCBpcD86IHN0cmluZyk6IFByb21pc2U8e1xuICAgIHVzZXI6IE9taXQ8VXNlciwgJ3Bhc3N3b3JkJz5cbiAgICBvcmdhbml6YXRpb246IE9yZ2FuaXphdGlvblxuICAgIHRva2VuczogQXV0aFRva2Vuc1xuICB9PiB7XG4gICAgY29uc3QgeyBuYW1lLCBlbWFpbCwgcGFzc3dvcmQsIG9yZ2FuaXphdGlvbk5hbWUgfSA9IGRhdGFcblxuICAgIC8vIENoZWNrIGlmIHVzZXIgYWxyZWFkeSBleGlzdHNcbiAgICBjb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBkYi51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSxcbiAgICB9KVxuXG4gICAgaWYgKGV4aXN0aW5nVXNlcikge1xuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKCdFbWFpbCBhbHJlYWR5IGV4aXN0cycsICdFTUFJTF9BTFJFQURZX0VYSVNUUycsIDQwOSlcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBvcmdhbml6YXRpb24gc2x1Z1xuICAgIGNvbnN0IGJhc2VTbHVnID0gb3JnYW5pemF0aW9uTmFtZVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5yZXBsYWNlKC9bXmEtejAtOV0rL2csICctJylcbiAgICAgIC5yZXBsYWNlKC8oXi18LSQpL2csICcnKVxuICAgICAgLnN1YnN0cmluZygwLCA1MClcblxuICAgIGxldCBzbHVnID0gYmFzZVNsdWdcbiAgICBsZXQgY291bnRlciA9IDFcblxuICAgIC8vIEVuc3VyZSB1bmlxdWUgc2x1Z1xuICAgIHdoaWxlIChhd2FpdCBkYi5vcmdhbml6YXRpb24uZmluZFVuaXF1ZSh7IHdoZXJlOiB7IHNsdWcgfSB9KSkge1xuICAgICAgc2x1ZyA9IGAke2Jhc2VTbHVnfS0ke2NvdW50ZXJ9YFxuICAgICAgY291bnRlcisrXG4gICAgfVxuXG4gICAgLy8gSGFzaCBwYXNzd29yZFxuICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEyKVxuXG4gICAgLy8gQ3JlYXRlIG9yZ2FuaXphdGlvbiBhbmQgdXNlciBpbiB0cmFuc2FjdGlvblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiLiR0cmFuc2FjdGlvbihhc3luYyAodHgpID0+IHtcbiAgICAgIC8vIENyZWF0ZSBvcmdhbml6YXRpb25cbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbiA9IGF3YWl0IHR4Lm9yZ2FuaXphdGlvbi5jcmVhdGUoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgbmFtZTogb3JnYW5pemF0aW9uTmFtZSxcbiAgICAgICAgICBzbHVnLFxuICAgICAgICAgIHBsYW5UeXBlOiAnU1RBUlRFUicsXG4gICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIHRpbWV6b25lOiAnVVRDJyxcbiAgICAgICAgICAgIGN1cnJlbmN5OiAnVVNEJyxcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgICAgIGFsbG93UHVibGljRGFzaGJvYXJkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlcXVpcmVUd29GYWN0b3I6IGZhbHNlLFxuICAgICAgICAgICAgbWF4VXNlcnM6IDIsXG4gICAgICAgICAgICBjdXN0b21CcmFuZGluZzogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIC8vIENyZWF0ZSB1c2VyIGFzIG9yZ2FuaXphdGlvbiBvd25lclxuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHR4LnVzZXIuY3JlYXRlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgICAgIHJvbGU6ICdPV05FUicsXG4gICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IG9yZ2FuaXphdGlvbi5pZCxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiB7IHVzZXIsIG9yZ2FuaXphdGlvbiB9XG4gICAgfSlcblxuICAgIC8vIENyZWF0ZSB1c2VyIHNlc3Npb25cbiAgICBjb25zdCBzZXNzaW9uSWQgPSBuYW5vaWQoKVxuICAgIGNvbnN0IGV4cGlyZXNBdCA9IG5ldyBEYXRlKClcbiAgICBleHBpcmVzQXQuc2V0RGF0ZShleHBpcmVzQXQuZ2V0RGF0ZSgpICsgNykgLy8gNyBkYXlzXG5cbiAgICBhd2FpdCBkYi51c2VyU2Vzc2lvbi5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBpZDogc2Vzc2lvbklkLFxuICAgICAgICB1c2VySWQ6IHJlc3VsdC51c2VyLmlkLFxuICAgICAgICBpcEFkZHJlc3M6IGlwLFxuICAgICAgICBleHBpcmVzQXQsXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICAvLyBHZW5lcmF0ZSB0b2tlbnNcbiAgICBjb25zdCB0b2tlbnMgPSBhd2FpdCB0aGlzLmdlbmVyYXRlVG9rZW5zKHJlc3VsdC51c2VyLCBzZXNzaW9uSWQpXG5cbiAgICBsb2dBdXRoKCdyZWdpc3Rlcl9zdWNjZXNzJywgcmVzdWx0LnVzZXIuaWQsIGVtYWlsLCBpcClcblxuICAgIC8vIFJlbW92ZSBwYXNzd29yZCBmcm9tIHJlc3BvbnNlXG4gICAgY29uc3QgeyBwYXNzd29yZDogXywgLi4uc2FmZVVzZXIgfSA9IHJlc3VsdC51c2VyXG5cbiAgICByZXR1cm4ge1xuICAgICAgdXNlcjogc2FmZVVzZXIsXG4gICAgICBvcmdhbml6YXRpb246IHJlc3VsdC5vcmdhbml6YXRpb24sXG4gICAgICB0b2tlbnMsXG4gICAgfVxuICB9XG5cbiAgLy8gTG9nb3V0IHVzZXJcbiAgYXN5bmMgbG9nb3V0KHNlc3Npb25JZDogc3RyaW5nLCByZWZyZXNoVG9rZW4/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgLy8gSW52YWxpZGF0ZSBzZXNzaW9uXG4gICAgICBhd2FpdCBkYi51c2VyU2Vzc2lvbi51cGRhdGUoe1xuICAgICAgICB3aGVyZTogeyBpZDogc2Vzc2lvbklkIH0sXG4gICAgICAgIGRhdGE6IHsgZXhwaXJlc0F0OiBuZXcgRGF0ZSgpIH0sXG4gICAgICB9KVxuXG4gICAgICAvLyBSZW1vdmUgcmVmcmVzaCB0b2tlbiBmcm9tIFJlZGlzIGlmIHByb3ZpZGVkXG4gICAgICBpZiAocmVmcmVzaFRva2VuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHRoaXMuYXBwLmp3dC52ZXJpZnkocmVmcmVzaFRva2VuLCB7XG4gICAgICAgICAgICBzZWNyZXQ6IGp3dENvbmZpZy5yZWZyZXNoU2VjcmV0LFxuICAgICAgICAgIH0pIGFzIFJlZnJlc2hUb2tlblBheWxvYWRcblxuICAgICAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbktleSA9IGByZWZyZXNoX3Rva2VuOiR7cGF5bG9hZC50b2tlbklkfWBcbiAgICAgICAgICBhd2FpdCB0aGlzLmFwcC5yZWRpcy5kZWwocmVmcmVzaFRva2VuS2V5KVxuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAvLyBJZ25vcmUgZXJyb3JzIHdoZW4gcmVtb3ZpbmcgcmVmcmVzaCB0b2tlblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxvZ0F1dGgoJ2xvZ291dF9zdWNjZXNzJylcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKGVycm9yLCAnRXJyb3IgZHVyaW5nIGxvZ291dCcpXG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoJ0xvZ291dCBmYWlsZWQnLCAnTE9HT1VUX0ZBSUxFRCcsIDUwMClcbiAgICB9XG4gIH1cblxuICAvLyBWZXJpZnkgSldUIHRva2VuIGFuZCBnZXQgdXNlclxuICBhc3luYyB2ZXJpZnlUb2tlbih0b2tlbjogc3RyaW5nKTogUHJvbWlzZTx7XG4gICAgdXNlcjogT21pdDxVc2VyLCAncGFzc3dvcmQnPlxuICAgIG9yZ2FuaXphdGlvbjogT3JnYW5pemF0aW9uXG4gICAgc2Vzc2lvbklkOiBzdHJpbmdcbiAgfT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBWZXJpZnkgdG9rZW5cbiAgICAgIGNvbnN0IHBheWxvYWQgPSB0aGlzLmFwcC5qd3QudmVyaWZ5KHRva2VuKSBhcyBKV1RQYXlsb2FkXG5cbiAgICAgIC8vIENoZWNrIGlmIHNlc3Npb24gaXMgc3RpbGwgdmFsaWRcbiAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBkYi51c2VyU2Vzc2lvbi5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IHBheWxvYWQuc2Vzc2lvbklkIH0sXG4gICAgICB9KVxuXG4gICAgICBpZiAoIXNlc3Npb24gfHwgc2Vzc2lvbi5leHBpcmVzQXQgPCBuZXcgRGF0ZSgpKSB7XG4gICAgICAgIHRocm93IG5ldyBBcGlFcnJvcignU2Vzc2lvbiBleHBpcmVkJywgJ1NFU1NJT05fRVhQSVJFRCcsIDQwMSlcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHVzZXIgd2l0aCBvcmdhbml6YXRpb25cbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBkYi51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgICB3aGVyZTogeyBpZDogcGF5bG9hZC51c2VySWQgfSxcbiAgICAgICAgaW5jbHVkZTogeyBvcmdhbml6YXRpb246IHRydWUgfSxcbiAgICAgIH0pXG5cbiAgICAgIGlmICghdXNlciB8fCAhdXNlci5pc0FjdGl2ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoJ1VzZXIgbm90IGZvdW5kIG9yIGluYWN0aXZlJywgJ1VTRVJfTk9UX0ZPVU5EJywgNDAxKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXVzZXIub3JnYW5pemF0aW9uLmlzQWN0aXZlKSB7XG4gICAgICAgIHRocm93IG5ldyBBcGlFcnJvcignT3JnYW5pemF0aW9uIGlzIGRpc2FibGVkJywgJ09SR0FOSVpBVElPTl9ESVNBQkxFRCcsIDQwMSlcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHBhc3N3b3JkIGZyb20gcmVzcG9uc2VcbiAgICAgIGNvbnN0IHsgcGFzc3dvcmQ6IF8sIC4uLnNhZmVVc2VyIH0gPSB1c2VyXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVzZXI6IHNhZmVVc2VyLFxuICAgICAgICBvcmdhbml6YXRpb246IHVzZXIub3JnYW5pemF0aW9uLFxuICAgICAgICBzZXNzaW9uSWQ6IHBheWxvYWQuc2Vzc2lvbklkLFxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBcGlFcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKCdJbnZhbGlkIHRva2VuJywgJ0lOVkFMSURfVE9LRU4nLCA0MDEpXG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGFsbCBhY3RpdmUgc2Vzc2lvbnMgZm9yIGEgdXNlclxuICBhc3luYyBnZXRVc2VyU2Vzc2lvbnModXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgcmV0dXJuIGRiLnVzZXJTZXNzaW9uLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgZXhwaXJlc0F0OiB7IGd0OiBuZXcgRGF0ZSgpIH0sXG4gICAgICB9LFxuICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6ICdkZXNjJyB9LFxuICAgICAgc2VsZWN0OiB7XG4gICAgICAgIGlkOiB0cnVlLFxuICAgICAgICBpcEFkZHJlc3M6IHRydWUsXG4gICAgICAgIHVzZXJBZ2VudDogdHJ1ZSxcbiAgICAgICAgY3JlYXRlZEF0OiB0cnVlLFxuICAgICAgICBleHBpcmVzQXQ6IHRydWUsXG4gICAgICB9LFxuICAgIH0pXG4gIH1cblxuICAvLyBSZXZva2UgYSBzcGVjaWZpYyBzZXNzaW9uXG4gIGFzeW5jIHJldm9rZVNlc3Npb24oc2Vzc2lvbklkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgZGIudXNlclNlc3Npb24udXBkYXRlTWFueSh7XG4gICAgICB3aGVyZToge1xuICAgICAgICBpZDogc2Vzc2lvbklkLFxuICAgICAgICB1c2VySWQsXG4gICAgICB9LFxuICAgICAgZGF0YToge1xuICAgICAgICBleHBpcmVzQXQ6IG5ldyBEYXRlKCksXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBsb2dBdXRoKCdzZXNzaW9uX3Jldm9rZWQnLCB1c2VySWQpXG4gIH1cblxuICAvLyBSZXZva2UgYWxsIHNlc3Npb25zIGZvciBhIHVzZXJcbiAgYXN5bmMgcmV2b2tlQWxsU2Vzc2lvbnModXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBkYi51c2VyU2Vzc2lvbi51cGRhdGVNYW55KHtcbiAgICAgIHdoZXJlOiB7IHVzZXJJZCB9LFxuICAgICAgZGF0YTogeyBleHBpcmVzQXQ6IG5ldyBEYXRlKCkgfSxcbiAgICB9KVxuXG4gICAgbG9nQXV0aCgnYWxsX3Nlc3Npb25zX3Jldm9rZWQnLCB1c2VySWQpXG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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