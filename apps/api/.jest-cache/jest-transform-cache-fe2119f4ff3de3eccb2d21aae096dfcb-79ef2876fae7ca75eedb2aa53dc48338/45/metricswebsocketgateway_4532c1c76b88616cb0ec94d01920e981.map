{"version":3,"names":["cov_2ep9ix5bag","actualCoverage","WebSocketGateway","WebSocketServer","SubscribeMessage","MessageBody","ConnectedSocket","Server","Socket","Injectable","Logger","MetricsService","CacheService","MetricsWebSocketGateway","s","MetricsWebSocketGateway_1","metricsService","cacheService","server","logger","name","subscriptions","Map","intervals","constructor","f","handleConnection","client","log","id","handleDisconnect","unsubscribeFromMetrics","handleSubscribeMetrics","data","b","userId","metrics","length","emit","message","code","minInterval","interval","Math","max","set","sendMetricsUpdate","intervalId","setInterval","join","error","stack","handleUnsubscribeMetrics","handleGetCurrentMetrics","clientId","subscription","get","sockets","cacheKey","campaignIds","metricsData","filters","startDate","Date","now","endDate","calculateMetrics","filteredMetrics","filterRequestedMetrics","updateData","timestamp","toISOString","requestedMetrics","filtered","metric","undefined","clearInterval","delete","broadcastMetricsUpdate","relevantClients","Array","from","entries","filter","_","some","includes","getConnectionStats","totalConnections","size","activeSubscriptions","values","map","sub","campaignCount","__decorate","_c","Object","__param","_d","_e","_f","cors","origin","process","env","FRONTEND_URL","credentials","namespace","_a","_b"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\websocket\\metrics-websocket.gateway.ts"],"sourcesContent":["import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  MessageBody,\n  ConnectedSocket,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { MetricsService } from '../services/metrics.service';\nimport { CacheService } from '../services/cache.service';\n\ninterface MetricsSubscription {\n  userId: string;\n  campaignIds?: string[];\n  metrics: string[];\n  interval: number; // em segundos\n}\n\n@Injectable()\n@WebSocketGateway({\n  cors: {\n    origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n    credentials: true,\n  },\n  namespace: '/metrics',\n})\nexport class MetricsWebSocketGateway\n  implements OnGatewayConnection, OnGatewayDisconnect\n{\n  @WebSocketServer()\n  server: Server;\n\n  private readonly logger = new Logger(MetricsWebSocketGateway.name);\n  private subscriptions = new Map<string, MetricsSubscription>();\n  private intervals = new Map<string, NodeJS.Timeout>();\n\n  constructor(\n    private readonly metricsService: MetricsService,\n    private readonly cacheService: CacheService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Cliente conectado: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Cliente desconectado: ${client.id}`);\n    this.unsubscribeFromMetrics(client.id);\n  }\n\n  @SubscribeMessage('subscribe-metrics')\n  async handleSubscribeMetrics(\n    @MessageBody() data: MetricsSubscription,\n    @ConnectedSocket() client: Socket,\n  ) {\n    try {\n      // Validar dados de entrada\n      if (!data.userId || !data.metrics || data.metrics.length === 0) {\n        client.emit('error', {\n          message: 'Dados de inscrição inválidos',\n          code: 'INVALID_SUBSCRIPTION_DATA',\n        });\n        return;\n      }\n\n      // Limitar intervalo mínimo para evitar sobrecarga\n      const minInterval = 5; // 5 segundos\n      const interval = Math.max(data.interval || 30, minInterval);\n\n      // Armazenar inscrição\n      this.subscriptions.set(client.id, {\n        ...data,\n        interval,\n      });\n\n      // Enviar dados iniciais\n      await this.sendMetricsUpdate(client.id);\n\n      // Configurar intervalo de atualização\n      const intervalId = setInterval(async () => {\n        await this.sendMetricsUpdate(client.id);\n      }, interval * 1000);\n\n      this.intervals.set(client.id, intervalId);\n\n      client.emit('subscription-confirmed', {\n        message: 'Inscrição confirmada',\n        interval,\n        metrics: data.metrics,\n      });\n\n      this.logger.log(\n        `Cliente ${client.id} inscrito para métricas: ${data.metrics.join(', ')}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao inscrever cliente ${client.id}:`,\n        error.stack,\n      );\n      client.emit('error', {\n        message: 'Erro interno do servidor',\n        code: 'SUBSCRIPTION_ERROR',\n      });\n    }\n  }\n\n  @SubscribeMessage('unsubscribe-metrics')\n  handleUnsubscribeMetrics(@ConnectedSocket() client: Socket) {\n    this.unsubscribeFromMetrics(client.id);\n    client.emit('unsubscription-confirmed', {\n      message: 'Inscrição cancelada',\n    });\n  }\n\n  @SubscribeMessage('get-current-metrics')\n  async handleGetCurrentMetrics(@ConnectedSocket() client: Socket) {\n    await this.sendMetricsUpdate(client.id);\n  }\n\n  private async sendMetricsUpdate(clientId: string) {\n    try {\n      const subscription = this.subscriptions.get(clientId);\n      if (!subscription) {\n        return;\n      }\n\n      const client = this.server.sockets.get(clientId);\n      if (!client) {\n        this.unsubscribeFromMetrics(clientId);\n        return;\n      }\n\n      // Buscar métricas do cache primeiro\n      const cacheKey = `metrics:realtime:${subscription.userId}:${subscription.campaignIds?.join(',') || 'all'}`;\n      let metricsData = await this.cacheService.get(cacheKey);\n\n      if (!metricsData) {\n        // Se não estiver no cache, calcular métricas\n        const filters = {\n          userId: subscription.userId,\n          campaignIds: subscription.campaignIds,\n          startDate: new Date(Date.now() - 24 * 60 * 60 * 1000), // últimas 24h\n          endDate: new Date(),\n        };\n\n        metricsData = await this.metricsService.calculateMetrics(filters);\n\n        // Armazenar no cache por 30 segundos\n        await this.cacheService.set(cacheKey, metricsData, 30);\n      }\n\n      // Filtrar apenas as métricas solicitadas\n      const filteredMetrics = this.filterRequestedMetrics(\n        metricsData,\n        subscription.metrics,\n      );\n\n      // Adicionar timestamp\n      const updateData = {\n        timestamp: new Date().toISOString(),\n        metrics: filteredMetrics,\n        userId: subscription.userId,\n        campaignIds: subscription.campaignIds,\n      };\n\n      client.emit('metrics-update', updateData);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao enviar atualização de métricas para ${clientId}:`,\n        error.stack,\n      );\n\n      const client = this.server.sockets.get(clientId);\n      if (client) {\n        client.emit('error', {\n          message: 'Erro ao buscar métricas',\n          code: 'METRICS_FETCH_ERROR',\n        });\n      }\n    }\n  }\n\n  private filterRequestedMetrics(metricsData: any, requestedMetrics: string[]) {\n    const filtered: any = {};\n\n    for (const metric of requestedMetrics) {\n      if (metricsData[metric] !== undefined) {\n        filtered[metric] = metricsData[metric];\n      }\n    }\n\n    return filtered;\n  }\n\n  private unsubscribeFromMetrics(clientId: string) {\n    // Limpar intervalo\n    const intervalId = this.intervals.get(clientId);\n    if (intervalId) {\n      clearInterval(intervalId);\n      this.intervals.delete(clientId);\n    }\n\n    // Remover inscrição\n    this.subscriptions.delete(clientId);\n\n    this.logger.log(`Cliente ${clientId} desinscrito das métricas`);\n  }\n\n  // Método para broadcast de atualizações para todos os clientes\n  async broadcastMetricsUpdate(userId: string, campaignIds?: string[]) {\n    const relevantClients = Array.from(this.subscriptions.entries()).filter(\n      ([_, subscription]) => {\n        if (subscription.userId !== userId) {\n          return false;\n        }\n\n        if (campaignIds && subscription.campaignIds) {\n          return campaignIds.some((id) =>\n            subscription.campaignIds!.includes(id),\n          );\n        }\n\n        return true;\n      },\n    );\n\n    for (const [clientId] of relevantClients) {\n      await this.sendMetricsUpdate(clientId);\n    }\n  }\n\n  // Método para obter estatísticas de conexões\n  getConnectionStats() {\n    return {\n      totalConnections: this.subscriptions.size,\n      activeSubscriptions: Array.from(this.subscriptions.values()).map(\n        (sub) => ({\n          userId: sub.userId,\n          metrics: sub.metrics,\n          interval: sub.interval,\n          campaignCount: sub.campaignIds?.length || 0,\n        }),\n      ),\n    };\n  }\n}"],"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","ignoreList":[]}