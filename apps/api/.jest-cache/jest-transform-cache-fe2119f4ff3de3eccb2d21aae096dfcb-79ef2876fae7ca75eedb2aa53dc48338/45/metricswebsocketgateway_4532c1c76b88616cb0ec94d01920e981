0c5d072f60a234d3f681c26bd3d7c336
/* istanbul ignore next */
function cov_2ep9ix5bag() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\websocket\\metrics-websocket.gateway.ts";
  var hash = "c7b684cd675795dcb56241f902063ce9ca5e7b49";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\websocket\\metrics-websocket.gateway.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "14": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 73
        }
      },
      "15": {
        start: {
          line: 11,
          column: 36
        },
        end: {
          line: 11,
          column: 71
        }
      },
      "16": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 182,
          column: 1
        }
      },
      "17": {
        start: {
          line: 24,
          column: 13
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "18": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "19": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 25
        }
      },
      "20": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 45
        }
      },
      "21": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "22": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 59
        }
      },
      "23": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "24": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 47
        }
      },
      "25": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "26": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "27": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 45,
          column: 19
        }
      },
      "28": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 23
        }
      },
      "29": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 49,
          column: 33
        }
      },
      "30": {
        start: {
          line: 50,
          column: 29
        },
        end: {
          line: 50,
          column: 71
        }
      },
      "31": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "32": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 52
        }
      },
      "33": {
        start: {
          line: 59,
          column: 31
        },
        end: {
          line: 61,
          column: 31
        }
      },
      "34": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 56
        }
      },
      "35": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 54
        }
      },
      "36": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "37": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 103
        }
      },
      "38": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 86
        }
      },
      "39": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "40": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 47
        }
      },
      "41": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "42": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 48
        }
      },
      "43": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "44": {
        start: {
          line: 89,
          column: 33
        },
        end: {
          line: 89,
          column: 65
        }
      },
      "45": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "46": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 23
        }
      },
      "47": {
        start: {
          line: 93,
          column: 27
        },
        end: {
          line: 93,
          column: 60
        }
      },
      "48": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "49": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 54
        }
      },
      "50": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 23
        }
      },
      "51": {
        start: {
          line: 99,
          column: 29
        },
        end: {
          line: 99,
          column: 118
        }
      },
      "52": {
        start: {
          line: 100,
          column: 30
        },
        end: {
          line: 100,
          column: 67
        }
      },
      "53": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "54": {
        start: {
          line: 103,
          column: 32
        },
        end: {
          line: 108,
          column: 17
        }
      },
      "55": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 82
        }
      },
      "56": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 71
        }
      },
      "57": {
        start: {
          line: 114,
          column: 36
        },
        end: {
          line: 114,
          column: 98
        }
      },
      "58": {
        start: {
          line: 116,
          column: 31
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "59": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 54
        }
      },
      "60": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 103
        }
      },
      "61": {
        start: {
          line: 126,
          column: 27
        },
        end: {
          line: 126,
          column: 60
        }
      },
      "62": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "63": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 131,
          column: 19
        }
      },
      "64": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 136,
          column: 27
        }
      },
      "65": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "66": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "67": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 55
        }
      },
      "68": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 24
        }
      },
      "69": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 146,
          column: 55
        }
      },
      "70": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "71": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 38
        }
      },
      "72": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 44
        }
      },
      "73": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 44
        }
      },
      "74": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 72
        }
      },
      "75": {
        start: {
          line: 157,
          column: 32
        },
        end: {
          line: 165,
          column: 10
        }
      },
      "76": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "77": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 29
        }
      },
      "78": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "79": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 87
        }
      },
      "80": {
        start: {
          line: 162,
          column: 48
        },
        end: {
          line: 162,
          column: 85
        }
      },
      "81": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 24
        }
      },
      "82": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "83": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 51
        }
      },
      "84": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 180,
          column: 10
        }
      },
      "85": {
        start: {
          line: 174,
          column: 87
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "86": {
        start: {
          line: 183,
          column: 0
        },
        end: {
          line: 186,
          column: 56
        }
      },
      "87": {
        start: {
          line: 187,
          column: 0
        },
        end: {
          line: 194,
          column: 70
        }
      },
      "88": {
        start: {
          line: 195,
          column: 0
        },
        end: {
          line: 201,
          column: 72
        }
      },
      "89": {
        start: {
          line: 202,
          column: 0
        },
        end: {
          line: 208,
          column: 71
        }
      },
      "90": {
        start: {
          line: 209,
          column: 0
        },
        end: {
          line: 219,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 10,
            column: 41
          }
        },
        loc: {
          start: {
            line: 10,
            column: 73
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 10
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 11,
            column: 11
          },
          end: {
            line: 11,
            column: 12
          }
        },
        loc: {
          start: {
            line: 11,
            column: 34
          },
          end: {
            line: 11,
            column: 73
          }
        },
        line: 11
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 46
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 29
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 34
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 47
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 38
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 59,
            column: 43
          },
          end: {
            line: 59,
            column: 44
          }
        },
        loc: {
          start: {
            line: 59,
            column: 55
          },
          end: {
            line: 61,
            column: 13
          }
        },
        line: 59
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 37
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 78
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 42
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 84
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 38
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 87
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 58
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 135
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 37
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 144
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 54
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 156
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 157,
            column: 80
          },
          end: {
            line: 157,
            column: 81
          }
        },
        loc: {
          start: {
            line: 157,
            column: 103
          },
          end: {
            line: 165,
            column: 9
          }
        },
        line: 157
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 162,
            column: 40
          },
          end: {
            line: 162,
            column: 41
          }
        },
        loc: {
          start: {
            line: 162,
            column: 48
          },
          end: {
            line: 162,
            column: 85
          }
        },
        line: 162
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 25
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 171
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 174,
            column: 77
          },
          end: {
            line: 174,
            column: 78
          }
        },
        loc: {
          start: {
            line: 174,
            column: 87
          },
          end: {
            line: 179,
            column: 13
          }
        },
        line: 174
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 10,
            column: 14
          },
          end: {
            line: 12,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 19
          }
        }, {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 35
          }
        }, {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 10
      },
      "14": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "15": {
        loc: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 41,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 41,
            column: 28
          }
        }, {
          start: {
            line: 41,
            column: 32
          },
          end: {
            line: 41,
            column: 45
          }
        }, {
          start: {
            line: 41,
            column: 49
          },
          end: {
            line: 41,
            column: 74
          }
        }],
        line: 41
      },
      "16": {
        loc: {
          start: {
            line: 50,
            column: 38
          },
          end: {
            line: 50,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 38
          },
          end: {
            line: 50,
            column: 51
          }
        }, {
          start: {
            line: 50,
            column: 55
          },
          end: {
            line: 50,
            column: 57
          }
        }],
        line: 50
      },
      "17": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "18": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "19": {
        loc: {
          start: {
            line: 99,
            column: 72
          },
          end: {
            line: 99,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 72
          },
          end: {
            line: 99,
            column: 107
          }
        }, {
          start: {
            line: 99,
            column: 111
          },
          end: {
            line: 99,
            column: 116
          }
        }],
        line: 99
      },
      "20": {
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "21": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "22": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "23": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "24": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "25": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "26": {
        loc: {
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 161,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 161,
            column: 27
          }
        }, {
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 55
          }
        }],
        line: 161
      },
      "27": {
        loc: {
          start: {
            line: 178,
            column: 31
          },
          end: {
            line: 178,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 31
          },
          end: {
            line: 178,
            column: 54
          }
        }, {
          start: {
            line: 178,
            column: 58
          },
          end: {
            line: 178,
            column: 59
          }
        }],
        line: 178
      },
      "28": {
        loc: {
          start: {
            line: 185,
            column: 30
          },
          end: {
            line: 185,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 101
          },
          end: {
            line: 185,
            column: 103
          }
        }, {
          start: {
            line: 185,
            column: 106
          },
          end: {
            line: 185,
            column: 112
          }
        }],
        line: 185
      },
      "29": {
        loc: {
          start: {
            line: 185,
            column: 43
          },
          end: {
            line: 185,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 43
          },
          end: {
            line: 185,
            column: 72
          }
        }, {
          start: {
            line: 185,
            column: 76
          },
          end: {
            line: 185,
            column: 82
          }
        }],
        line: 185
      },
      "30": {
        loc: {
          start: {
            line: 192,
            column: 45
          },
          end: {
            line: 192,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 116
          },
          end: {
            line: 192,
            column: 118
          }
        }, {
          start: {
            line: 192,
            column: 121
          },
          end: {
            line: 192,
            column: 127
          }
        }],
        line: 192
      },
      "31": {
        loc: {
          start: {
            line: 192,
            column: 58
          },
          end: {
            line: 192,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 58
          },
          end: {
            line: 192,
            column: 87
          }
        }, {
          start: {
            line: 192,
            column: 91
          },
          end: {
            line: 192,
            column: 97
          }
        }],
        line: 192
      },
      "32": {
        loc: {
          start: {
            line: 199,
            column: 37
          },
          end: {
            line: 199,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 199,
            column: 108
          },
          end: {
            line: 199,
            column: 110
          }
        }, {
          start: {
            line: 199,
            column: 113
          },
          end: {
            line: 199,
            column: 119
          }
        }],
        line: 199
      },
      "33": {
        loc: {
          start: {
            line: 199,
            column: 50
          },
          end: {
            line: 199,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 50
          },
          end: {
            line: 199,
            column: 79
          }
        }, {
          start: {
            line: 199,
            column: 83
          },
          end: {
            line: 199,
            column: 89
          }
        }],
        line: 199
      },
      "34": {
        loc: {
          start: {
            line: 206,
            column: 37
          },
          end: {
            line: 206,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 206,
            column: 108
          },
          end: {
            line: 206,
            column: 110
          }
        }, {
          start: {
            line: 206,
            column: 113
          },
          end: {
            line: 206,
            column: 119
          }
        }],
        line: 206
      },
      "35": {
        loc: {
          start: {
            line: 206,
            column: 50
          },
          end: {
            line: 206,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 50
          },
          end: {
            line: 206,
            column: 79
          }
        }, {
          start: {
            line: 206,
            column: 83
          },
          end: {
            line: 206,
            column: 89
          }
        }],
        line: 206
      },
      "36": {
        loc: {
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 213,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 213,
            column: 44
          }
        }, {
          start: {
            line: 213,
            column: 48
          },
          end: {
            line: 213,
            column: 71
          }
        }],
        line: 213
      },
      "37": {
        loc: {
          start: {
            line: 218,
            column: 37
          },
          end: {
            line: 218,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 218,
            column: 124
          },
          end: {
            line: 218,
            column: 126
          }
        }, {
          start: {
            line: 218,
            column: 129
          },
          end: {
            line: 218,
            column: 135
          }
        }],
        line: 218
      },
      "38": {
        loc: {
          start: {
            line: 218,
            column: 50
          },
          end: {
            line: 218,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 50
          },
          end: {
            line: 218,
            column: 87
          }
        }, {
          start: {
            line: 218,
            column: 91
          },
          end: {
            line: 218,
            column: 105
          }
        }],
        line: 218
      },
      "39": {
        loc: {
          start: {
            line: 218,
            column: 137
          },
          end: {
            line: 218,
            column: 231
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 218,
            column: 220
          },
          end: {
            line: 218,
            column: 222
          }
        }, {
          start: {
            line: 218,
            column: 225
          },
          end: {
            line: 218,
            column: 231
          }
        }],
        line: 218
      },
      "40": {
        loc: {
          start: {
            line: 218,
            column: 150
          },
          end: {
            line: 218,
            column: 201
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 150
          },
          end: {
            line: 218,
            column: 185
          }
        }, {
          start: {
            line: 218,
            column: 189
          },
          end: {
            line: 218,
            column: 201
          }
        }],
        line: 218
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\websocket\\metrics-websocket.gateway.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\websocket\\metrics-websocket.gateway.ts"],
      sourcesContent: ["import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  MessageBody,\n  ConnectedSocket,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { MetricsService } from '../services/metrics.service';\nimport { CacheService } from '../services/cache.service';\n\ninterface MetricsSubscription {\n  userId: string;\n  campaignIds?: string[];\n  metrics: string[];\n  interval: number; // em segundos\n}\n\n@Injectable()\n@WebSocketGateway({\n  cors: {\n    origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n    credentials: true,\n  },\n  namespace: '/metrics',\n})\nexport class MetricsWebSocketGateway\n  implements OnGatewayConnection, OnGatewayDisconnect\n{\n  @WebSocketServer()\n  server: Server;\n\n  private readonly logger = new Logger(MetricsWebSocketGateway.name);\n  private subscriptions = new Map<string, MetricsSubscription>();\n  private intervals = new Map<string, NodeJS.Timeout>();\n\n  constructor(\n    private readonly metricsService: MetricsService,\n    private readonly cacheService: CacheService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Cliente conectado: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Cliente desconectado: ${client.id}`);\n    this.unsubscribeFromMetrics(client.id);\n  }\n\n  @SubscribeMessage('subscribe-metrics')\n  async handleSubscribeMetrics(\n    @MessageBody() data: MetricsSubscription,\n    @ConnectedSocket() client: Socket,\n  ) {\n    try {\n      // Validar dados de entrada\n      if (!data.userId || !data.metrics || data.metrics.length === 0) {\n        client.emit('error', {\n          message: 'Dados de inscri\xE7\xE3o inv\xE1lidos',\n          code: 'INVALID_SUBSCRIPTION_DATA',\n        });\n        return;\n      }\n\n      // Limitar intervalo m\xEDnimo para evitar sobrecarga\n      const minInterval = 5; // 5 segundos\n      const interval = Math.max(data.interval || 30, minInterval);\n\n      // Armazenar inscri\xE7\xE3o\n      this.subscriptions.set(client.id, {\n        ...data,\n        interval,\n      });\n\n      // Enviar dados iniciais\n      await this.sendMetricsUpdate(client.id);\n\n      // Configurar intervalo de atualiza\xE7\xE3o\n      const intervalId = setInterval(async () => {\n        await this.sendMetricsUpdate(client.id);\n      }, interval * 1000);\n\n      this.intervals.set(client.id, intervalId);\n\n      client.emit('subscription-confirmed', {\n        message: 'Inscri\xE7\xE3o confirmada',\n        interval,\n        metrics: data.metrics,\n      });\n\n      this.logger.log(\n        `Cliente ${client.id} inscrito para m\xE9tricas: ${data.metrics.join(', ')}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao inscrever cliente ${client.id}:`,\n        error.stack,\n      );\n      client.emit('error', {\n        message: 'Erro interno do servidor',\n        code: 'SUBSCRIPTION_ERROR',\n      });\n    }\n  }\n\n  @SubscribeMessage('unsubscribe-metrics')\n  handleUnsubscribeMetrics(@ConnectedSocket() client: Socket) {\n    this.unsubscribeFromMetrics(client.id);\n    client.emit('unsubscription-confirmed', {\n      message: 'Inscri\xE7\xE3o cancelada',\n    });\n  }\n\n  @SubscribeMessage('get-current-metrics')\n  async handleGetCurrentMetrics(@ConnectedSocket() client: Socket) {\n    await this.sendMetricsUpdate(client.id);\n  }\n\n  private async sendMetricsUpdate(clientId: string) {\n    try {\n      const subscription = this.subscriptions.get(clientId);\n      if (!subscription) {\n        return;\n      }\n\n      const client = this.server.sockets.get(clientId);\n      if (!client) {\n        this.unsubscribeFromMetrics(clientId);\n        return;\n      }\n\n      // Buscar m\xE9tricas do cache primeiro\n      const cacheKey = `metrics:realtime:${subscription.userId}:${subscription.campaignIds?.join(',') || 'all'}`;\n      let metricsData = await this.cacheService.get(cacheKey);\n\n      if (!metricsData) {\n        // Se n\xE3o estiver no cache, calcular m\xE9tricas\n        const filters = {\n          userId: subscription.userId,\n          campaignIds: subscription.campaignIds,\n          startDate: new Date(Date.now() - 24 * 60 * 60 * 1000), // \xFAltimas 24h\n          endDate: new Date(),\n        };\n\n        metricsData = await this.metricsService.calculateMetrics(filters);\n\n        // Armazenar no cache por 30 segundos\n        await this.cacheService.set(cacheKey, metricsData, 30);\n      }\n\n      // Filtrar apenas as m\xE9tricas solicitadas\n      const filteredMetrics = this.filterRequestedMetrics(\n        metricsData,\n        subscription.metrics,\n      );\n\n      // Adicionar timestamp\n      const updateData = {\n        timestamp: new Date().toISOString(),\n        metrics: filteredMetrics,\n        userId: subscription.userId,\n        campaignIds: subscription.campaignIds,\n      };\n\n      client.emit('metrics-update', updateData);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao enviar atualiza\xE7\xE3o de m\xE9tricas para ${clientId}:`,\n        error.stack,\n      );\n\n      const client = this.server.sockets.get(clientId);\n      if (client) {\n        client.emit('error', {\n          message: 'Erro ao buscar m\xE9tricas',\n          code: 'METRICS_FETCH_ERROR',\n        });\n      }\n    }\n  }\n\n  private filterRequestedMetrics(metricsData: any, requestedMetrics: string[]) {\n    const filtered: any = {};\n\n    for (const metric of requestedMetrics) {\n      if (metricsData[metric] !== undefined) {\n        filtered[metric] = metricsData[metric];\n      }\n    }\n\n    return filtered;\n  }\n\n  private unsubscribeFromMetrics(clientId: string) {\n    // Limpar intervalo\n    const intervalId = this.intervals.get(clientId);\n    if (intervalId) {\n      clearInterval(intervalId);\n      this.intervals.delete(clientId);\n    }\n\n    // Remover inscri\xE7\xE3o\n    this.subscriptions.delete(clientId);\n\n    this.logger.log(`Cliente ${clientId} desinscrito das m\xE9tricas`);\n  }\n\n  // M\xE9todo para broadcast de atualiza\xE7\xF5es para todos os clientes\n  async broadcastMetricsUpdate(userId: string, campaignIds?: string[]) {\n    const relevantClients = Array.from(this.subscriptions.entries()).filter(\n      ([_, subscription]) => {\n        if (subscription.userId !== userId) {\n          return false;\n        }\n\n        if (campaignIds && subscription.campaignIds) {\n          return campaignIds.some((id) =>\n            subscription.campaignIds!.includes(id),\n          );\n        }\n\n        return true;\n      },\n    );\n\n    for (const [clientId] of relevantClients) {\n      await this.sendMetricsUpdate(clientId);\n    }\n  }\n\n  // M\xE9todo para obter estat\xEDsticas de conex\xF5es\n  getConnectionStats() {\n    return {\n      totalConnections: this.subscriptions.size,\n      activeSubscriptions: Array.from(this.subscriptions.values()).map(\n        (sub) => ({\n          userId: sub.userId,\n          metrics: sub.metrics,\n          interval: sub.interval,\n          campaignCount: sub.campaignIds?.length || 0,\n        }),\n      ),\n    };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c7b684cd675795dcb56241f902063ce9ca5e7b49"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ep9ix5bag = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ep9ix5bag();
var __decorate =
/* istanbul ignore next */
(cov_2ep9ix5bag().s[0]++,
/* istanbul ignore next */
(cov_2ep9ix5bag().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2ep9ix5bag().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_2ep9ix5bag().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_2ep9ix5bag().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_2ep9ix5bag().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_2ep9ix5bag().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_2ep9ix5bag().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_2ep9ix5bag().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_2ep9ix5bag().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_2ep9ix5bag().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_2ep9ix5bag().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_2ep9ix5bag().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_2ep9ix5bag().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().b[3][0]++;
    cov_2ep9ix5bag().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_2ep9ix5bag().b[3][1]++;
    cov_2ep9ix5bag().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_2ep9ix5bag().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_2ep9ix5bag().b[5][0]++;
        cov_2ep9ix5bag().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_2ep9ix5bag().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_2ep9ix5bag().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_2ep9ix5bag().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_2ep9ix5bag().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_2ep9ix5bag().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_2ep9ix5bag().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_2ep9ix5bag().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_2ep9ix5bag().s[9]++;
  return /* istanbul ignore next */(cov_2ep9ix5bag().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_2ep9ix5bag().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_2ep9ix5bag().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_2ep9ix5bag().s[10]++,
/* istanbul ignore next */
(cov_2ep9ix5bag().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_2ep9ix5bag().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_2ep9ix5bag().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_2ep9ix5bag().f[1]++;
  cov_2ep9ix5bag().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_2ep9ix5bag().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_2ep9ix5bag().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().b[11][0]++;
    cov_2ep9ix5bag().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_2ep9ix5bag().b[11][1]++;
  }
}));
var __param =
/* istanbul ignore next */
(cov_2ep9ix5bag().s[13]++,
/* istanbul ignore next */
(cov_2ep9ix5bag().b[13][0]++, this) &&
/* istanbul ignore next */
(cov_2ep9ix5bag().b[13][1]++, this.__param) ||
/* istanbul ignore next */
(cov_2ep9ix5bag().b[13][2]++, function (paramIndex, decorator) {
  /* istanbul ignore next */
  cov_2ep9ix5bag().f[2]++;
  cov_2ep9ix5bag().s[14]++;
  return function (target, key) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[3]++;
    cov_2ep9ix5bag().s[15]++;
    decorator(target, key, paramIndex);
  };
}));
var MetricsWebSocketGateway_1;
var _a, _b, _c, _d, _e, _f;
import { WebSocketGateway, WebSocketServer, SubscribeMessage, MessageBody, ConnectedSocket } from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { Injectable, Logger } from '@nestjs/common';
import { MetricsService } from '../services/metrics.service';
import { CacheService } from '../services/cache.service';
let MetricsWebSocketGateway =
/* istanbul ignore next */
(cov_2ep9ix5bag().s[16]++, MetricsWebSocketGateway_1 = class MetricsWebSocketGateway {
  metricsService;
  cacheService;
  server;
  logger =
  /* istanbul ignore next */
  (cov_2ep9ix5bag().s[17]++, new Logger(MetricsWebSocketGateway_1.name));
  subscriptions =
  /* istanbul ignore next */
  (cov_2ep9ix5bag().s[18]++, new Map());
  intervals =
  /* istanbul ignore next */
  (cov_2ep9ix5bag().s[19]++, new Map());
  constructor(metricsService, cacheService) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[4]++;
    cov_2ep9ix5bag().s[20]++;
    this.metricsService = metricsService;
    /* istanbul ignore next */
    cov_2ep9ix5bag().s[21]++;
    this.cacheService = cacheService;
  }
  handleConnection(client) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[5]++;
    cov_2ep9ix5bag().s[22]++;
    this.logger.log(`Cliente conectado: ${client.id}`);
  }
  handleDisconnect(client) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[6]++;
    cov_2ep9ix5bag().s[23]++;
    this.logger.log(`Cliente desconectado: ${client.id}`);
    /* istanbul ignore next */
    cov_2ep9ix5bag().s[24]++;
    this.unsubscribeFromMetrics(client.id);
  }
  async handleSubscribeMetrics(data, client) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[7]++;
    cov_2ep9ix5bag().s[25]++;
    try {
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[26]++;
      // Validar dados de entrada
      if (
      /* istanbul ignore next */
      (cov_2ep9ix5bag().b[15][0]++, !data.userId) ||
      /* istanbul ignore next */
      (cov_2ep9ix5bag().b[15][1]++, !data.metrics) ||
      /* istanbul ignore next */
      (cov_2ep9ix5bag().b[15][2]++, data.metrics.length === 0)) {
        /* istanbul ignore next */
        cov_2ep9ix5bag().b[14][0]++;
        cov_2ep9ix5bag().s[27]++;
        client.emit('error', {
          message: 'Dados de inscrição inválidos',
          code: 'INVALID_SUBSCRIPTION_DATA'
        });
        /* istanbul ignore next */
        cov_2ep9ix5bag().s[28]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ep9ix5bag().b[14][1]++;
      }
      // Limitar intervalo mínimo para evitar sobrecarga
      const minInterval =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[29]++, 5); // 5 segundos
      const interval =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[30]++, Math.max(
      /* istanbul ignore next */
      (cov_2ep9ix5bag().b[16][0]++, data.interval) ||
      /* istanbul ignore next */
      (cov_2ep9ix5bag().b[16][1]++, 30), minInterval));
      // Armazenar inscrição
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[31]++;
      this.subscriptions.set(client.id, {
        ...data,
        interval
      });
      // Enviar dados iniciais
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[32]++;
      await this.sendMetricsUpdate(client.id);
      // Configurar intervalo de atualização
      const intervalId =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[33]++, setInterval(async () => {
        /* istanbul ignore next */
        cov_2ep9ix5bag().f[8]++;
        cov_2ep9ix5bag().s[34]++;
        await this.sendMetricsUpdate(client.id);
      }, interval * 1000));
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[35]++;
      this.intervals.set(client.id, intervalId);
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[36]++;
      client.emit('subscription-confirmed', {
        message: 'Inscrição confirmada',
        interval,
        metrics: data.metrics
      });
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[37]++;
      this.logger.log(`Cliente ${client.id} inscrito para métricas: ${data.metrics.join(', ')}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[38]++;
      this.logger.error(`Erro ao inscrever cliente ${client.id}:`, error.stack);
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[39]++;
      client.emit('error', {
        message: 'Erro interno do servidor',
        code: 'SUBSCRIPTION_ERROR'
      });
    }
  }
  handleUnsubscribeMetrics(client) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[9]++;
    cov_2ep9ix5bag().s[40]++;
    this.unsubscribeFromMetrics(client.id);
    /* istanbul ignore next */
    cov_2ep9ix5bag().s[41]++;
    client.emit('unsubscription-confirmed', {
      message: 'Inscrição cancelada'
    });
  }
  async handleGetCurrentMetrics(client) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[10]++;
    cov_2ep9ix5bag().s[42]++;
    await this.sendMetricsUpdate(client.id);
  }
  async sendMetricsUpdate(clientId) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[11]++;
    cov_2ep9ix5bag().s[43]++;
    try {
      const subscription =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[44]++, this.subscriptions.get(clientId));
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[45]++;
      if (!subscription) {
        /* istanbul ignore next */
        cov_2ep9ix5bag().b[17][0]++;
        cov_2ep9ix5bag().s[46]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ep9ix5bag().b[17][1]++;
      }
      const client =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[47]++, this.server.sockets.get(clientId));
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[48]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2ep9ix5bag().b[18][0]++;
        cov_2ep9ix5bag().s[49]++;
        this.unsubscribeFromMetrics(clientId);
        /* istanbul ignore next */
        cov_2ep9ix5bag().s[50]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ep9ix5bag().b[18][1]++;
      }
      // Buscar métricas do cache primeiro
      const cacheKey =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[51]++, `metrics:realtime:${subscription.userId}:${
      /* istanbul ignore next */
      (cov_2ep9ix5bag().b[19][0]++, subscription.campaignIds?.join(',')) ||
      /* istanbul ignore next */
      (cov_2ep9ix5bag().b[19][1]++, 'all')}`);
      let metricsData =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[52]++, await this.cacheService.get(cacheKey));
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[53]++;
      if (!metricsData) {
        /* istanbul ignore next */
        cov_2ep9ix5bag().b[20][0]++;
        // Se não estiver no cache, calcular métricas
        const filters =
        /* istanbul ignore next */
        (cov_2ep9ix5bag().s[54]++, {
          userId: subscription.userId,
          campaignIds: subscription.campaignIds,
          startDate: new Date(Date.now() - 24 * 60 * 60 * 1000),
          // últimas 24h
          endDate: new Date()
        });
        /* istanbul ignore next */
        cov_2ep9ix5bag().s[55]++;
        metricsData = await this.metricsService.calculateMetrics(filters);
        // Armazenar no cache por 30 segundos
        /* istanbul ignore next */
        cov_2ep9ix5bag().s[56]++;
        await this.cacheService.set(cacheKey, metricsData, 30);
      } else
      /* istanbul ignore next */
      {
        cov_2ep9ix5bag().b[20][1]++;
      }
      // Filtrar apenas as métricas solicitadas
      const filteredMetrics =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[57]++, this.filterRequestedMetrics(metricsData, subscription.metrics));
      // Adicionar timestamp
      const updateData =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[58]++, {
        timestamp: new Date().toISOString(),
        metrics: filteredMetrics,
        userId: subscription.userId,
        campaignIds: subscription.campaignIds
      });
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[59]++;
      client.emit('metrics-update', updateData);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[60]++;
      this.logger.error(`Erro ao enviar atualização de métricas para ${clientId}:`, error.stack);
      const client =
      /* istanbul ignore next */
      (cov_2ep9ix5bag().s[61]++, this.server.sockets.get(clientId));
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[62]++;
      if (client) {
        /* istanbul ignore next */
        cov_2ep9ix5bag().b[21][0]++;
        cov_2ep9ix5bag().s[63]++;
        client.emit('error', {
          message: 'Erro ao buscar métricas',
          code: 'METRICS_FETCH_ERROR'
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ep9ix5bag().b[21][1]++;
      }
    }
  }
  filterRequestedMetrics(metricsData, requestedMetrics) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[12]++;
    const filtered =
    /* istanbul ignore next */
    (cov_2ep9ix5bag().s[64]++, {});
    /* istanbul ignore next */
    cov_2ep9ix5bag().s[65]++;
    for (const metric of requestedMetrics) {
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[66]++;
      if (metricsData[metric] !== undefined) {
        /* istanbul ignore next */
        cov_2ep9ix5bag().b[22][0]++;
        cov_2ep9ix5bag().s[67]++;
        filtered[metric] = metricsData[metric];
      } else
      /* istanbul ignore next */
      {
        cov_2ep9ix5bag().b[22][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2ep9ix5bag().s[68]++;
    return filtered;
  }
  unsubscribeFromMetrics(clientId) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[13]++;
    // Limpar intervalo
    const intervalId =
    /* istanbul ignore next */
    (cov_2ep9ix5bag().s[69]++, this.intervals.get(clientId));
    /* istanbul ignore next */
    cov_2ep9ix5bag().s[70]++;
    if (intervalId) {
      /* istanbul ignore next */
      cov_2ep9ix5bag().b[23][0]++;
      cov_2ep9ix5bag().s[71]++;
      clearInterval(intervalId);
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[72]++;
      this.intervals.delete(clientId);
    } else
    /* istanbul ignore next */
    {
      cov_2ep9ix5bag().b[23][1]++;
    }
    // Remover inscrição
    cov_2ep9ix5bag().s[73]++;
    this.subscriptions.delete(clientId);
    /* istanbul ignore next */
    cov_2ep9ix5bag().s[74]++;
    this.logger.log(`Cliente ${clientId} desinscrito das métricas`);
  }
  // Método para broadcast de atualizações para todos os clientes
  async broadcastMetricsUpdate(userId, campaignIds) {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[14]++;
    const relevantClients =
    /* istanbul ignore next */
    (cov_2ep9ix5bag().s[75]++, Array.from(this.subscriptions.entries()).filter(([_, subscription]) => {
      /* istanbul ignore next */
      cov_2ep9ix5bag().f[15]++;
      cov_2ep9ix5bag().s[76]++;
      if (subscription.userId !== userId) {
        /* istanbul ignore next */
        cov_2ep9ix5bag().b[24][0]++;
        cov_2ep9ix5bag().s[77]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_2ep9ix5bag().b[24][1]++;
      }
      cov_2ep9ix5bag().s[78]++;
      if (
      /* istanbul ignore next */
      (cov_2ep9ix5bag().b[26][0]++, campaignIds) &&
      /* istanbul ignore next */
      (cov_2ep9ix5bag().b[26][1]++, subscription.campaignIds)) {
        /* istanbul ignore next */
        cov_2ep9ix5bag().b[25][0]++;
        cov_2ep9ix5bag().s[79]++;
        return campaignIds.some(id => {
          /* istanbul ignore next */
          cov_2ep9ix5bag().f[16]++;
          cov_2ep9ix5bag().s[80]++;
          return subscription.campaignIds.includes(id);
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ep9ix5bag().b[25][1]++;
      }
      cov_2ep9ix5bag().s[81]++;
      return true;
    }));
    /* istanbul ignore next */
    cov_2ep9ix5bag().s[82]++;
    for (const [clientId] of relevantClients) {
      /* istanbul ignore next */
      cov_2ep9ix5bag().s[83]++;
      await this.sendMetricsUpdate(clientId);
    }
  }
  // Método para obter estatísticas de conexões
  getConnectionStats() {
    /* istanbul ignore next */
    cov_2ep9ix5bag().f[17]++;
    cov_2ep9ix5bag().s[84]++;
    return {
      totalConnections: this.subscriptions.size,
      activeSubscriptions: Array.from(this.subscriptions.values()).map(sub => {
        /* istanbul ignore next */
        cov_2ep9ix5bag().f[18]++;
        cov_2ep9ix5bag().s[85]++;
        return {
          userId: sub.userId,
          metrics: sub.metrics,
          interval: sub.interval,
          campaignCount:
          /* istanbul ignore next */
          (cov_2ep9ix5bag().b[27][0]++, sub.campaignIds?.length) ||
          /* istanbul ignore next */
          (cov_2ep9ix5bag().b[27][1]++, 0)
        };
      })
    };
  }
});
/* istanbul ignore next */
cov_2ep9ix5bag().s[86]++;
__decorate([WebSocketServer(), __metadata("design:type", typeof (_c =
/* istanbul ignore next */
(cov_2ep9ix5bag().b[29][0]++, typeof Server !== "undefined") &&
/* istanbul ignore next */
(cov_2ep9ix5bag().b[29][1]++, Server)) === "function" ?
/* istanbul ignore next */
(cov_2ep9ix5bag().b[28][0]++, _c) :
/* istanbul ignore next */
(cov_2ep9ix5bag().b[28][1]++, Object))], MetricsWebSocketGateway.prototype, "server", void 0);
/* istanbul ignore next */
cov_2ep9ix5bag().s[87]++;
__decorate([SubscribeMessage('subscribe-metrics'), __param(0, MessageBody()), __param(1, ConnectedSocket()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, typeof (_d =
/* istanbul ignore next */
(cov_2ep9ix5bag().b[31][0]++, typeof Socket !== "undefined") &&
/* istanbul ignore next */
(cov_2ep9ix5bag().b[31][1]++, Socket)) === "function" ?
/* istanbul ignore next */
(cov_2ep9ix5bag().b[30][0]++, _d) :
/* istanbul ignore next */
(cov_2ep9ix5bag().b[30][1]++, Object)]), __metadata("design:returntype", Promise)], MetricsWebSocketGateway.prototype, "handleSubscribeMetrics", null);
/* istanbul ignore next */
cov_2ep9ix5bag().s[88]++;
__decorate([SubscribeMessage('unsubscribe-metrics'), __param(0, ConnectedSocket()), __metadata("design:type", Function), __metadata("design:paramtypes", [typeof (_e =
/* istanbul ignore next */
(cov_2ep9ix5bag().b[33][0]++, typeof Socket !== "undefined") &&
/* istanbul ignore next */
(cov_2ep9ix5bag().b[33][1]++, Socket)) === "function" ?
/* istanbul ignore next */
(cov_2ep9ix5bag().b[32][0]++, _e) :
/* istanbul ignore next */
(cov_2ep9ix5bag().b[32][1]++, Object)]), __metadata("design:returntype", void 0)], MetricsWebSocketGateway.prototype, "handleUnsubscribeMetrics", null);
/* istanbul ignore next */
cov_2ep9ix5bag().s[89]++;
__decorate([SubscribeMessage('get-current-metrics'), __param(0, ConnectedSocket()), __metadata("design:type", Function), __metadata("design:paramtypes", [typeof (_f =
/* istanbul ignore next */
(cov_2ep9ix5bag().b[35][0]++, typeof Socket !== "undefined") &&
/* istanbul ignore next */
(cov_2ep9ix5bag().b[35][1]++, Socket)) === "function" ?
/* istanbul ignore next */
(cov_2ep9ix5bag().b[34][0]++, _f) :
/* istanbul ignore next */
(cov_2ep9ix5bag().b[34][1]++, Object)]), __metadata("design:returntype", Promise)], MetricsWebSocketGateway.prototype, "handleGetCurrentMetrics", null);
/* istanbul ignore next */
cov_2ep9ix5bag().s[90]++;
MetricsWebSocketGateway = MetricsWebSocketGateway_1 = __decorate([Injectable(), WebSocketGateway({
  cors: {
    origin:
    /* istanbul ignore next */
    (cov_2ep9ix5bag().b[36][0]++, process.env.FRONTEND_URL) ||
    /* istanbul ignore next */
    (cov_2ep9ix5bag().b[36][1]++, 'http://localhost:3000'),
    credentials: true
  },
  namespace: '/metrics'
}), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_2ep9ix5bag().b[38][0]++, typeof MetricsService !== "undefined") &&
/* istanbul ignore next */
(cov_2ep9ix5bag().b[38][1]++, MetricsService)) === "function" ?
/* istanbul ignore next */
(cov_2ep9ix5bag().b[37][0]++, _a) :
/* istanbul ignore next */
(cov_2ep9ix5bag().b[37][1]++, Object), typeof (_b =
/* istanbul ignore next */
(cov_2ep9ix5bag().b[40][0]++, typeof CacheService !== "undefined") &&
/* istanbul ignore next */
(cov_2ep9ix5bag().b[40][1]++, CacheService)) === "function" ?
/* istanbul ignore next */
(cov_2ep9ix5bag().b[39][0]++, _b) :
/* istanbul ignore next */
(cov_2ep9ix5bag().b[39][1]++, Object)])], MetricsWebSocketGateway);
export { MetricsWebSocketGateway };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,