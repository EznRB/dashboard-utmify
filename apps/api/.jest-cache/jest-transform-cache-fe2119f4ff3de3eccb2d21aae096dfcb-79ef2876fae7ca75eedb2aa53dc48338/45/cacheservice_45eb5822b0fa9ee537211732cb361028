9cd1e216ecb8e8508be77a87d26d483e
/* istanbul ignore next */
function cov_223sw53j1y() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\cache.service.ts";
  var hash = "b707508a1f06b686925f73e61c15dd862f77c6b3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\cache.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 30
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "1": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 22,
          column: 1
        }
      },
      "2": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 36
        }
      },
      "3": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "4": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "5": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 65
        }
      },
      "6": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "7": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 62
        }
      },
      "8": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "9": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 45
        }
      },
      "10": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "11": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 55
        }
      },
      "12": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 37
        }
      },
      "13": {
        start: {
          line: 57,
          column: 22
        },
        end: {
          line: 57,
          column: 30
        }
      },
      "14": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "15": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 48
        }
      },
      "16": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 24
        }
      },
      "17": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 31
        }
      },
      "18": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 36
        }
      },
      "19": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "20": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 36
        }
      },
      "21": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 68
        }
      },
      "22": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 24
        }
      },
      "23": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "24": {
        start: {
          line: 81,
          column: 99
        },
        end: {
          line: 81,
          column: 106
        }
      },
      "25": {
        start: {
          line: 82,
          column: 29
        },
        end: {
          line: 82,
          column: 58
        }
      },
      "26": {
        start: {
          line: 83,
          column: 36
        },
        end: {
          line: 83,
          column: 95
        }
      },
      "27": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "28": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 71
        }
      },
      "29": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 64
        }
      },
      "30": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 66
        }
      },
      "31": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 56
        }
      },
      "32": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "33": {
        start: {
          line: 100,
          column: 74
        },
        end: {
          line: 100,
          column: 81
        }
      },
      "34": {
        start: {
          line: 101,
          column: 29
        },
        end: {
          line: 101,
          column: 58
        }
      },
      "35": {
        start: {
          line: 102,
          column: 32
        },
        end: {
          line: 102,
          column: 62
        }
      },
      "36": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "37": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 38
        }
      },
      "38": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 56
        }
      },
      "39": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 28
        }
      },
      "40": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 32
        }
      },
      "41": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 51
        }
      },
      "42": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 89
        }
      },
      "43": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 56
        }
      },
      "44": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 34
        }
      },
      "45": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 24
        }
      },
      "46": {
        start: {
          line: 120,
          column: 28
        },
        end: {
          line: 120,
          column: 56
        }
      },
      "47": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "48": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 31
        }
      },
      "49": {
        start: {
          line: 125,
          column: 25
        },
        end: {
          line: 125,
          column: 40
        }
      },
      "50": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 47
        }
      },
      "51": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 24
        }
      },
      "52": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "53": {
        start: {
          line: 133,
          column: 56
        },
        end: {
          line: 133,
          column: 63
        }
      },
      "54": {
        start: {
          line: 134,
          column: 29
        },
        end: {
          line: 134,
          column: 58
        }
      },
      "55": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 43
        }
      },
      "56": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 55
        }
      },
      "57": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 59
        }
      },
      "58": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "59": {
        start: {
          line: 145,
          column: 56
        },
        end: {
          line: 145,
          column: 63
        }
      },
      "60": {
        start: {
          line: 146,
          column: 34
        },
        end: {
          line: 146,
          column: 67
        }
      },
      "61": {
        start: {
          line: 147,
          column: 25
        },
        end: {
          line: 147,
          column: 61
        }
      },
      "62": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "63": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 25
        }
      },
      "64": {
        start: {
          line: 151,
          column: 33
        },
        end: {
          line: 151,
          column: 62
        }
      },
      "65": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 91
        }
      },
      "66": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 32
        }
      },
      "67": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 67
        }
      },
      "68": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 21
        }
      },
      "69": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "70": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "71": {
        start: {
          line: 170,
          column: 31
        },
        end: {
          line: 170,
          column: 32
        }
      },
      "72": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "73": {
        start: {
          line: 172,
          column: 29
        },
        end: {
          line: 172,
          column: 77
        }
      },
      "74": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 176,
          column: 17
        }
      },
      "75": {
        start: {
          line: 174,
          column: 36
        },
        end: {
          line: 174,
          column: 65
        }
      },
      "76": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 175,
          column: 44
        }
      },
      "77": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 110
        }
      },
      "78": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 76
        }
      },
      "79": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "80": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "81": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "82": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 138
        }
      },
      "83": {
        start: {
          line: 195,
          column: 31
        },
        end: {
          line: 195,
          column: 32
        }
      },
      "84": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "85": {
        start: {
          line: 197,
          column: 29
        },
        end: {
          line: 197,
          column: 77
        }
      },
      "86": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 201,
          column: 17
        }
      },
      "87": {
        start: {
          line: 199,
          column: 36
        },
        end: {
          line: 199,
          column: 65
        }
      },
      "88": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 200,
          column: 44
        }
      },
      "89": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 102
        }
      },
      "90": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 72
        }
      },
      "91": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "92": {
        start: {
          line: 212,
          column: 25
        },
        end: {
          line: 212,
          column: 56
        }
      },
      "93": {
        start: {
          line: 213,
          column: 32
        },
        end: {
          line: 213,
          column: 63
        }
      },
      "94": {
        start: {
          line: 214,
          column: 32
        },
        end: {
          line: 214,
          column: 74
        }
      },
      "95": {
        start: {
          line: 215,
          column: 30
        },
        end: {
          line: 215,
          column: 55
        }
      },
      "96": {
        start: {
          line: 216,
          column: 28
        },
        end: {
          line: 218,
          column: 19
        }
      },
      "97": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 225,
          column: 14
        }
      },
      "98": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 64
        }
      },
      "99": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 235,
          column: 14
        }
      },
      "100": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 30
        }
      },
      "101": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 32
        }
      },
      "102": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "103": {
        start: {
          line: 246,
          column: 26
        },
        end: {
          line: 246,
          column: 36
        }
      },
      "104": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 36
        }
      },
      "105": {
        start: {
          line: 248,
          column: 28
        },
        end: {
          line: 248,
          column: 46
        }
      },
      "106": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 50
        }
      },
      "107": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 62
        }
      },
      "108": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 43
        }
      },
      "109": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "110": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 39
        }
      },
      "111": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 32
        }
      },
      "112": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 54
        }
      },
      "113": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 58
        }
      },
      "114": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 24
        }
      },
      "115": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "116": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 36
        }
      },
      "117": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 51
        }
      },
      "118": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 69
        }
      },
      "119": {
        start: {
          line: 281,
          column: 4
        },
        end: {
          line: 281,
          column: 38
        }
      },
      "120": {
        start: {
          line: 285,
          column: 4
        },
        end: {
          line: 303,
          column: 6
        }
      },
      "121": {
        start: {
          line: 286,
          column: 23
        },
        end: {
          line: 286,
          column: 39
        }
      },
      "122": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 302,
          column: 10
        }
      },
      "123": {
        start: {
          line: 288,
          column: 26
        },
        end: {
          line: 288,
          column: 43
        }
      },
      "124": {
        start: {
          line: 290,
          column: 24
        },
        end: {
          line: 292,
          column: 86
        }
      },
      "125": {
        start: {
          line: 294,
          column: 33
        },
        end: {
          line: 294,
          column: 62
        }
      },
      "126": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 297,
          column: 13
        }
      },
      "127": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 296,
          column: 36
        }
      },
      "128": {
        start: {
          line: 299,
          column: 27
        },
        end: {
          line: 299,
          column: 57
        }
      },
      "129": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 50
        }
      },
      "130": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 27
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 39,
            column: 31
          },
          end: {
            line: 39,
            column: 32
          }
        },
        loc: {
          start: {
            line: 39,
            column: 42
          },
          end: {
            line: 41,
            column: 9
          }
        },
        line: 39
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 42,
            column: 33
          },
          end: {
            line: 42,
            column: 34
          }
        },
        loc: {
          start: {
            line: 42,
            column: 39
          },
          end: {
            line: 44,
            column: 9
          }
        },
        line: 42
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 45,
            column: 31
          },
          end: {
            line: 45,
            column: 32
          }
        },
        loc: {
          start: {
            line: 45,
            column: 37
          },
          end: {
            line: 47,
            column: 9
          }
        },
        line: 45
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 25
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 49
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 45
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 56
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 23
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 65
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 25
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 69
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 79
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 33
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 98
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 47
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 119
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 36
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 131
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 47
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 143
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 49
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 161
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 57
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 185
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 23
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 210
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 19
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 239
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 24
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 244
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 18
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 257
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 18
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 269
      },
      "20": {
        name: "getCacheService",
        decl: {
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 280,
            column: 31
          }
        },
        loc: {
          start: {
            line: 280,
            column: 34
          },
          end: {
            line: 282,
            column: 1
          }
        },
        line: 280
      },
      "21": {
        name: "Cached",
        decl: {
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 284,
            column: 22
          }
        },
        loc: {
          start: {
            line: 284,
            column: 32
          },
          end: {
            line: 304,
            column: 1
          }
        },
        line: 284
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 285,
            column: 11
          },
          end: {
            line: 285,
            column: 12
          }
        },
        loc: {
          start: {
            line: 285,
            column: 55
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 285
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 287,
            column: 27
          },
          end: {
            line: 287,
            column: 28
          }
        },
        loc: {
          start: {
            line: 287,
            column: 52
          },
          end: {
            line: 302,
            column: 9
          }
        },
        line: 287
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 18
          },
          end: {
            line: 29,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 18
          },
          end: {
            line: 29,
            column: 32
          }
        }, {
          start: {
            line: 29,
            column: 36
          },
          end: {
            line: 29,
            column: 47
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 32
          }
        }, {
          start: {
            line: 30,
            column: 36
          },
          end: {
            line: 30,
            column: 40
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 34
          }
        }, {
          start: {
            line: 32,
            column: 38
          },
          end: {
            line: 32,
            column: 39
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 26
          },
          end: {
            line: 79,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 79,
            column: 36
          },
          end: {
            line: 79,
            column: 38
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 81,
            column: 20
          },
          end: {
            line: 81,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 81,
            column: 26
          },
          end: {
            line: 81,
            column: 43
          }
        }],
        line: 81
      },
      "7": {
        loc: {
          start: {
            line: 81,
            column: 45
          },
          end: {
            line: 81,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 81,
            column: 54
          },
          end: {
            line: 81,
            column: 76
          }
        }],
        line: 81
      },
      "8": {
        loc: {
          start: {
            line: 81,
            column: 78
          },
          end: {
            line: 81,
            column: 93
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 81,
            column: 89
          },
          end: {
            line: 81,
            column: 93
          }
        }],
        line: 81
      },
      "9": {
        loc: {
          start: {
            line: 83,
            column: 36
          },
          end: {
            line: 83,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 47
          },
          end: {
            line: 83,
            column: 71
          }
        }, {
          start: {
            line: 83,
            column: 74
          },
          end: {
            line: 83,
            column: 95
          }
        }],
        line: 83
      },
      "10": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: 87,
            column: 17
          },
          end: {
            line: 89,
            column: 13
          }
        }],
        line: 84
      },
      "11": {
        loc: {
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 98,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 98,
            column: 29
          },
          end: {
            line: 98,
            column: 31
          }
        }],
        line: 98
      },
      "12": {
        loc: {
          start: {
            line: 100,
            column: 20
          },
          end: {
            line: 100,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 100,
            column: 29
          },
          end: {
            line: 100,
            column: 51
          }
        }],
        line: 100
      },
      "13": {
        loc: {
          start: {
            line: 100,
            column: 53
          },
          end: {
            line: 100,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 100,
            column: 64
          },
          end: {
            line: 100,
            column: 68
          }
        }],
        line: 100
      },
      "14": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "15": {
        loc: {
          start: {
            line: 110,
            column: 19
          },
          end: {
            line: 110,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 30
          },
          end: {
            line: 110,
            column: 62
          }
        }, {
          start: {
            line: 110,
            column: 65
          },
          end: {
            line: 110,
            column: 88
          }
        }],
        line: 110
      },
      "16": {
        loc: {
          start: {
            line: 119,
            column: 33
          },
          end: {
            line: 119,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 119,
            column: 43
          },
          end: {
            line: 119,
            column: 45
          }
        }],
        line: 119
      },
      "17": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "18": {
        loc: {
          start: {
            line: 131,
            column: 22
          },
          end: {
            line: 131,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 131,
            column: 32
          },
          end: {
            line: 131,
            column: 34
          }
        }],
        line: 131
      },
      "19": {
        loc: {
          start: {
            line: 133,
            column: 20
          },
          end: {
            line: 133,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 133,
            column: 29
          },
          end: {
            line: 133,
            column: 51
          }
        }],
        line: 133
      },
      "20": {
        loc: {
          start: {
            line: 143,
            column: 33
          },
          end: {
            line: 143,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 143,
            column: 43
          },
          end: {
            line: 143,
            column: 45
          }
        }],
        line: 143
      },
      "21": {
        loc: {
          start: {
            line: 145,
            column: 20
          },
          end: {
            line: 145,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 145,
            column: 29
          },
          end: {
            line: 145,
            column: 51
          }
        }],
        line: 145
      },
      "22": {
        loc: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "23": {
        loc: {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "24": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "25": {
        loc: {
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 201,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 201,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "26": {
        loc: {
          start: {
            line: 214,
            column: 32
          },
          end: {
            line: 214,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 214,
            column: 46
          },
          end: {
            line: 214,
            column: 70
          }
        }, {
          start: {
            line: 214,
            column: 73
          },
          end: {
            line: 214,
            column: 74
          }
        }],
        line: 214
      },
      "27": {
        loc: {
          start: {
            line: 216,
            column: 28
          },
          end: {
            line: 218,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 217,
            column: 18
          },
          end: {
            line: 217,
            column: 87
          }
        }, {
          start: {
            line: 218,
            column: 18
          },
          end: {
            line: 218,
            column: 19
          }
        }],
        line: 216
      },
      "28": {
        loc: {
          start: {
            line: 290,
            column: 24
          },
          end: {
            line: 292,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 291,
            column: 18
          },
          end: {
            line: 291,
            column: 47
          }
        }, {
          start: {
            line: 292,
            column: 18
          },
          end: {
            line: 292,
            column: 86
          }
        }],
        line: 290
      },
      "29": {
        loc: {
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 297,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 297,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\cache.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\cache.service.ts"],
      sourcesContent: ["import { Redis } from 'ioredis';\nimport { env } from '../config/env';\nimport { logger } from '../utils/logger';\n\n// Cache key prefixes\nexport const CACHE_PREFIXES = {\n  METRICS: 'metrics',\n  CAMPAIGNS: 'campaigns',\n  DASHBOARD: 'dashboard',\n  FUNNEL: 'funnel',\n  COMPARISON: 'comparison',\n  EXPORT: 'export',\n} as const;\n\n// Cache TTL constants (in seconds)\nexport const CACHE_TTL = {\n  METRICS: 300, // 5 minutes\n  CAMPAIGNS: 600, // 10 minutes\n  DASHBOARD: 180, // 3 minutes\n  FUNNEL: 300, // 5 minutes\n  COMPARISON: 600, // 10 minutes\n  EXPORT: 1800, // 30 minutes\n  REAL_TIME: 30, // 30 seconds for real-time data\n} as const;\n\n// Cache service interface\nexport interface CacheMetrics {\n  hits: number;\n  misses: number;\n  hitRate: number;\n  totalKeys: number;\n  memoryUsage: number;\n}\n\nexport interface CacheOptions {\n  ttl?: number;\n  prefix?: string;\n  compress?: boolean;\n}\n\nexport class CacheService {\n  private static instance: CacheService;\n  private redis: Redis;\n  private metrics: {\n    hits: number;\n    misses: number;\n  } = { hits: 0, misses: 0 };\n\n  private constructor() {\n    this.redis = new Redis({\n      host: env.REDIS_HOST || 'localhost',\n      port: env.REDIS_PORT || 6379,\n      password: env.REDIS_PASSWORD,\n      db: env.REDIS_CACHE_DB || 1, // Use different DB for cache\n      retryDelayOnFailover: 100,\n      enableReadyCheck: false,\n      maxRetriesPerRequest: null,\n      lazyConnect: true,\n      keyPrefix: 'utmify:cache:',\n    });\n\n    this.redis.on('error', (error) => {\n      logger.error('Redis cache connection error:', error);\n    });\n\n    this.redis.on('connect', () => {\n      logger.info('Redis cache connected successfully');\n    });\n\n    this.redis.on('ready', () => {\n      logger.info('Redis cache ready');\n    });\n  }\n\n  public static getInstance(): CacheService {\n    if (!CacheService.instance) {\n      CacheService.instance = new CacheService();\n    }\n    return CacheService.instance;\n  }\n\n  // Generate cache key\n  private generateKey(prefix: string, key: string, organizationId?: string): string {\n    const parts = [prefix];\n    if (organizationId) {\n      parts.push(`org:${organizationId}`);\n    }\n    parts.push(key);\n    return parts.join(':');\n  }\n\n  // Compress data if needed\n  private compressData(data: any): string {\n    return JSON.stringify(data);\n  }\n\n  // Decompress data\n  private decompressData(data: string): any {\n    try {\n      return JSON.parse(data);\n    } catch (error) {\n      logger.error('Failed to decompress cache data:', error);\n      return null;\n    }\n  }\n\n  // Set cache value\n  public async set<T>(\n    key: string,\n    value: T,\n    options: CacheOptions = {}\n  ): Promise<void> {\n    try {\n      const {\n        ttl = CACHE_TTL.METRICS,\n        prefix = CACHE_PREFIXES.METRICS,\n        compress = true,\n      } = options;\n\n      const cacheKey = this.generateKey(prefix, key);\n      const serializedValue = compress ? this.compressData(value) : JSON.stringify(value);\n\n      if (ttl > 0) {\n        await this.redis.setex(cacheKey, ttl, serializedValue);\n      } else {\n        await this.redis.set(cacheKey, serializedValue);\n      }\n\n      logger.debug(`Cache set: ${cacheKey} (TTL: ${ttl}s)`);\n    } catch (error) {\n      logger.error('Failed to set cache:', error);\n      // Don't throw error to avoid breaking the application\n    }\n  }\n\n  // Get cache value\n  public async get<T>(\n    key: string,\n    options: CacheOptions = {}\n  ): Promise<T | null> {\n    try {\n      const {\n        prefix = CACHE_PREFIXES.METRICS,\n        compress = true,\n      } = options;\n\n      const cacheKey = this.generateKey(prefix, key);\n      const cachedValue = await this.redis.get(cacheKey);\n\n      if (cachedValue === null) {\n        this.metrics.misses++;\n        logger.debug(`Cache miss: ${cacheKey}`);\n        return null;\n      }\n\n      this.metrics.hits++;\n      logger.debug(`Cache hit: ${cacheKey}`);\n\n      return compress ? this.decompressData(cachedValue) : JSON.parse(cachedValue);\n    } catch (error) {\n      logger.error('Failed to get cache:', error);\n      this.metrics.misses++;\n      return null;\n    }\n  }\n\n  // Get or set cache value\n  public async getOrSet<T>(\n    key: string,\n    factory: () => Promise<T>,\n    options: CacheOptions = {}\n  ): Promise<T> {\n    const cachedValue = await this.get<T>(key, options);\n    \n    if (cachedValue !== null) {\n      return cachedValue;\n    }\n\n    // Generate new value\n    const newValue = await factory();\n    \n    // Cache the new value\n    await this.set(key, newValue, options);\n    \n    return newValue;\n  }\n\n  // Delete cache value\n  public async delete(key: string, options: { prefix?: string } = {}): Promise<void> {\n    try {\n      const { prefix = CACHE_PREFIXES.METRICS } = options;\n      const cacheKey = this.generateKey(prefix, key);\n      \n      await this.redis.del(cacheKey);\n      logger.debug(`Cache deleted: ${cacheKey}`);\n    } catch (error) {\n      logger.error('Failed to delete cache:', error);\n    }\n  }\n\n  // Delete multiple cache values by pattern\n  public async deletePattern(pattern: string, options: { prefix?: string } = {}): Promise<number> {\n    try {\n      const { prefix = CACHE_PREFIXES.METRICS } = options;\n      const searchPattern = this.generateKey(prefix, pattern);\n      \n      const keys = await this.redis.keys(searchPattern);\n      \n      if (keys.length === 0) {\n        return 0;\n      }\n\n      const deletedCount = await this.redis.del(...keys);\n      logger.debug(`Cache pattern deleted: ${searchPattern} (${deletedCount} keys)`);\n      \n      return deletedCount;\n    } catch (error) {\n      logger.error('Failed to delete cache pattern:', error);\n      return 0;\n    }\n  }\n\n  // Invalidate organization cache\n  public async invalidateOrganization(organizationId: string): Promise<void> {\n    try {\n      const patterns = [\n        `${CACHE_PREFIXES.METRICS}:org:${organizationId}:*`,\n        `${CACHE_PREFIXES.CAMPAIGNS}:org:${organizationId}:*`,\n        `${CACHE_PREFIXES.DASHBOARD}:org:${organizationId}:*`,\n        `${CACHE_PREFIXES.FUNNEL}:org:${organizationId}:*`,\n        `${CACHE_PREFIXES.COMPARISON}:org:${organizationId}:*`,\n      ];\n\n      let totalDeleted = 0;\n      for (const pattern of patterns) {\n        const keys = await this.redis.keys(`utmify:cache:${pattern}`);\n        if (keys.length > 0) {\n          const deleted = await this.redis.del(...keys);\n          totalDeleted += deleted;\n        }\n      }\n\n      logger.info(`Invalidated cache for organization ${organizationId}: ${totalDeleted} keys deleted`);\n    } catch (error) {\n      logger.error('Failed to invalidate organization cache:', error);\n    }\n  }\n\n  // Invalidate campaign cache\n  public async invalidateCampaign(campaignId: string, organizationId?: string): Promise<void> {\n    try {\n      const patterns = [\n        `${CACHE_PREFIXES.METRICS}:*:campaign:${campaignId}:*`,\n        `${CACHE_PREFIXES.DASHBOARD}:*:campaign:${campaignId}:*`,\n        `${CACHE_PREFIXES.FUNNEL}:*:campaign:${campaignId}:*`,\n      ];\n\n      if (organizationId) {\n        patterns.push(\n          `${CACHE_PREFIXES.METRICS}:org:${organizationId}:*`,\n          `${CACHE_PREFIXES.DASHBOARD}:org:${organizationId}:*`\n        );\n      }\n\n      let totalDeleted = 0;\n      for (const pattern of patterns) {\n        const keys = await this.redis.keys(`utmify:cache:${pattern}`);\n        if (keys.length > 0) {\n          const deleted = await this.redis.del(...keys);\n          totalDeleted += deleted;\n        }\n      }\n\n      logger.info(`Invalidated cache for campaign ${campaignId}: ${totalDeleted} keys deleted`);\n    } catch (error) {\n      logger.error('Failed to invalidate campaign cache:', error);\n    }\n  }\n\n  // Get cache metrics\n  public async getMetrics(): Promise<CacheMetrics> {\n    try {\n      const info = await this.redis.info('memory');\n      const memoryMatch = info.match(/used_memory:(\\d+)/);\n      const memoryUsage = memoryMatch ? parseInt(memoryMatch[1]) : 0;\n\n      const totalKeys = await this.redis.dbsize();\n      const hitRate = this.metrics.hits + this.metrics.misses > 0 \n        ? (this.metrics.hits / (this.metrics.hits + this.metrics.misses)) * 100 \n        : 0;\n\n      return {\n        hits: this.metrics.hits,\n        misses: this.metrics.misses,\n        hitRate: Math.round(hitRate * 100) / 100,\n        totalKeys,\n        memoryUsage,\n      };\n    } catch (error) {\n      logger.error('Failed to get cache metrics:', error);\n      return {\n        hits: this.metrics.hits,\n        misses: this.metrics.misses,\n        hitRate: 0,\n        totalKeys: 0,\n        memoryUsage: 0,\n      };\n    }\n  }\n\n  // Reset metrics\n  public resetMetrics(): void {\n    this.metrics.hits = 0;\n    this.metrics.misses = 0;\n  }\n\n  // Health check\n  public async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; latency?: number }> {\n    try {\n      const start = Date.now();\n      await this.redis.ping();\n      const latency = Date.now() - start;\n      \n      return { status: 'healthy', latency };\n    } catch (error) {\n      logger.error('Cache health check failed:', error);\n      return { status: 'unhealthy' };\n    }\n  }\n\n  // Flush all cache\n  public async flush(): Promise<void> {\n    try {\n      await this.redis.flushdb();\n      this.resetMetrics();\n      logger.info('Cache flushed successfully');\n    } catch (error) {\n      logger.error('Failed to flush cache:', error);\n      throw error;\n    }\n  }\n\n  // Close connection\n  public async close(): Promise<void> {\n    try {\n      await this.redis.quit();\n      logger.info('Cache connection closed');\n    } catch (error) {\n      logger.error('Failed to close cache connection:', error);\n    }\n  }\n}\n\n// Export singleton getter\nexport function getCacheService(): CacheService {\n  return CacheService.getInstance();\n}\n\n// Cache decorators for methods\nexport function Cached(options: CacheOptions & { keyGenerator?: (...args: any[]) => string }) {\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    \n    descriptor.value = async function (...args: any[]) {\n      const cache = getCacheService();\n      \n      // Generate cache key\n      const key = options.keyGenerator \n        ? options.keyGenerator(...args)\n        : `${target.constructor.name}:${propertyName}:${JSON.stringify(args)}`;\n      \n      // Try to get from cache\n      const cachedResult = await cache.get(key, options);\n      if (cachedResult !== null) {\n        return cachedResult;\n      }\n      \n      // Execute method and cache result\n      const result = await method.apply(this, args);\n      await cache.set(key, result, options);\n      \n      return result;\n    };\n  };\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b707508a1f06b686925f73e61c15dd862f77c6b3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_223sw53j1y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_223sw53j1y();
import { Redis } from 'ioredis';
import { env } from '../config/env';
import { logger } from '../utils/logger';
// Cache key prefixes
export const CACHE_PREFIXES =
/* istanbul ignore next */
(cov_223sw53j1y().s[0]++, {
  METRICS: 'metrics',
  CAMPAIGNS: 'campaigns',
  DASHBOARD: 'dashboard',
  FUNNEL: 'funnel',
  COMPARISON: 'comparison',
  EXPORT: 'export'
});
// Cache TTL constants (in seconds)
export const CACHE_TTL =
/* istanbul ignore next */
(cov_223sw53j1y().s[1]++, {
  METRICS: 300,
  // 5 minutes
  CAMPAIGNS: 600,
  // 10 minutes
  DASHBOARD: 180,
  // 3 minutes
  FUNNEL: 300,
  // 5 minutes
  COMPARISON: 600,
  // 10 minutes
  EXPORT: 1800,
  // 30 minutes
  REAL_TIME: 30 // 30 seconds for real-time data
});
export class CacheService {
  static instance;
  redis;
  metrics =
  /* istanbul ignore next */
  (cov_223sw53j1y().s[2]++, {
    hits: 0,
    misses: 0
  });
  constructor() {
    /* istanbul ignore next */
    cov_223sw53j1y().f[0]++;
    cov_223sw53j1y().s[3]++;
    this.redis = new Redis({
      host:
      /* istanbul ignore next */
      (cov_223sw53j1y().b[0][0]++, env.REDIS_HOST) ||
      /* istanbul ignore next */
      (cov_223sw53j1y().b[0][1]++, 'localhost'),
      port:
      /* istanbul ignore next */
      (cov_223sw53j1y().b[1][0]++, env.REDIS_PORT) ||
      /* istanbul ignore next */
      (cov_223sw53j1y().b[1][1]++, 6379),
      password: env.REDIS_PASSWORD,
      db:
      /* istanbul ignore next */
      (cov_223sw53j1y().b[2][0]++, env.REDIS_CACHE_DB) ||
      /* istanbul ignore next */
      (cov_223sw53j1y().b[2][1]++, 1),
      // Use different DB for cache
      retryDelayOnFailover: 100,
      enableReadyCheck: false,
      maxRetriesPerRequest: null,
      lazyConnect: true,
      keyPrefix: 'utmify:cache:'
    });
    /* istanbul ignore next */
    cov_223sw53j1y().s[4]++;
    this.redis.on('error', error => {
      /* istanbul ignore next */
      cov_223sw53j1y().f[1]++;
      cov_223sw53j1y().s[5]++;
      logger.error('Redis cache connection error:', error);
    });
    /* istanbul ignore next */
    cov_223sw53j1y().s[6]++;
    this.redis.on('connect', () => {
      /* istanbul ignore next */
      cov_223sw53j1y().f[2]++;
      cov_223sw53j1y().s[7]++;
      logger.info('Redis cache connected successfully');
    });
    /* istanbul ignore next */
    cov_223sw53j1y().s[8]++;
    this.redis.on('ready', () => {
      /* istanbul ignore next */
      cov_223sw53j1y().f[3]++;
      cov_223sw53j1y().s[9]++;
      logger.info('Redis cache ready');
    });
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_223sw53j1y().f[4]++;
    cov_223sw53j1y().s[10]++;
    if (!CacheService.instance) {
      /* istanbul ignore next */
      cov_223sw53j1y().b[3][0]++;
      cov_223sw53j1y().s[11]++;
      CacheService.instance = new CacheService();
    } else
    /* istanbul ignore next */
    {
      cov_223sw53j1y().b[3][1]++;
    }
    cov_223sw53j1y().s[12]++;
    return CacheService.instance;
  }
  // Generate cache key
  generateKey(prefix, key, organizationId) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[5]++;
    const parts =
    /* istanbul ignore next */
    (cov_223sw53j1y().s[13]++, [prefix]);
    /* istanbul ignore next */
    cov_223sw53j1y().s[14]++;
    if (organizationId) {
      /* istanbul ignore next */
      cov_223sw53j1y().b[4][0]++;
      cov_223sw53j1y().s[15]++;
      parts.push(`org:${organizationId}`);
    } else
    /* istanbul ignore next */
    {
      cov_223sw53j1y().b[4][1]++;
    }
    cov_223sw53j1y().s[16]++;
    parts.push(key);
    /* istanbul ignore next */
    cov_223sw53j1y().s[17]++;
    return parts.join(':');
  }
  // Compress data if needed
  compressData(data) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[6]++;
    cov_223sw53j1y().s[18]++;
    return JSON.stringify(data);
  }
  // Decompress data
  decompressData(data) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[7]++;
    cov_223sw53j1y().s[19]++;
    try {
      /* istanbul ignore next */
      cov_223sw53j1y().s[20]++;
      return JSON.parse(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[21]++;
      logger.error('Failed to decompress cache data:', error);
      /* istanbul ignore next */
      cov_223sw53j1y().s[22]++;
      return null;
    }
  }
  // Set cache value
  async set(key, value, options =
  /* istanbul ignore next */
  (cov_223sw53j1y().b[5][0]++, {})) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[8]++;
    cov_223sw53j1y().s[23]++;
    try {
      const {
        ttl =
        /* istanbul ignore next */
        (cov_223sw53j1y().b[6][0]++, CACHE_TTL.METRICS),
        prefix =
        /* istanbul ignore next */
        (cov_223sw53j1y().b[7][0]++, CACHE_PREFIXES.METRICS),
        compress =
        /* istanbul ignore next */
        (cov_223sw53j1y().b[8][0]++, true)
      } =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[24]++, options);
      const cacheKey =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[25]++, this.generateKey(prefix, key));
      const serializedValue =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[26]++, compress ?
      /* istanbul ignore next */
      (cov_223sw53j1y().b[9][0]++, this.compressData(value)) :
      /* istanbul ignore next */
      (cov_223sw53j1y().b[9][1]++, JSON.stringify(value)));
      /* istanbul ignore next */
      cov_223sw53j1y().s[27]++;
      if (ttl > 0) {
        /* istanbul ignore next */
        cov_223sw53j1y().b[10][0]++;
        cov_223sw53j1y().s[28]++;
        await this.redis.setex(cacheKey, ttl, serializedValue);
      } else {
        /* istanbul ignore next */
        cov_223sw53j1y().b[10][1]++;
        cov_223sw53j1y().s[29]++;
        await this.redis.set(cacheKey, serializedValue);
      }
      /* istanbul ignore next */
      cov_223sw53j1y().s[30]++;
      logger.debug(`Cache set: ${cacheKey} (TTL: ${ttl}s)`);
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[31]++;
      logger.error('Failed to set cache:', error);
      // Don't throw error to avoid breaking the application
    }
  }
  // Get cache value
  async get(key, options =
  /* istanbul ignore next */
  (cov_223sw53j1y().b[11][0]++, {})) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[9]++;
    cov_223sw53j1y().s[32]++;
    try {
      const {
        prefix =
        /* istanbul ignore next */
        (cov_223sw53j1y().b[12][0]++, CACHE_PREFIXES.METRICS),
        compress =
        /* istanbul ignore next */
        (cov_223sw53j1y().b[13][0]++, true)
      } =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[33]++, options);
      const cacheKey =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[34]++, this.generateKey(prefix, key));
      const cachedValue =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[35]++, await this.redis.get(cacheKey));
      /* istanbul ignore next */
      cov_223sw53j1y().s[36]++;
      if (cachedValue === null) {
        /* istanbul ignore next */
        cov_223sw53j1y().b[14][0]++;
        cov_223sw53j1y().s[37]++;
        this.metrics.misses++;
        /* istanbul ignore next */
        cov_223sw53j1y().s[38]++;
        logger.debug(`Cache miss: ${cacheKey}`);
        /* istanbul ignore next */
        cov_223sw53j1y().s[39]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_223sw53j1y().b[14][1]++;
      }
      cov_223sw53j1y().s[40]++;
      this.metrics.hits++;
      /* istanbul ignore next */
      cov_223sw53j1y().s[41]++;
      logger.debug(`Cache hit: ${cacheKey}`);
      /* istanbul ignore next */
      cov_223sw53j1y().s[42]++;
      return compress ?
      /* istanbul ignore next */
      (cov_223sw53j1y().b[15][0]++, this.decompressData(cachedValue)) :
      /* istanbul ignore next */
      (cov_223sw53j1y().b[15][1]++, JSON.parse(cachedValue));
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[43]++;
      logger.error('Failed to get cache:', error);
      /* istanbul ignore next */
      cov_223sw53j1y().s[44]++;
      this.metrics.misses++;
      /* istanbul ignore next */
      cov_223sw53j1y().s[45]++;
      return null;
    }
  }
  // Get or set cache value
  async getOrSet(key, factory, options =
  /* istanbul ignore next */
  (cov_223sw53j1y().b[16][0]++, {})) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[10]++;
    const cachedValue =
    /* istanbul ignore next */
    (cov_223sw53j1y().s[46]++, await this.get(key, options));
    /* istanbul ignore next */
    cov_223sw53j1y().s[47]++;
    if (cachedValue !== null) {
      /* istanbul ignore next */
      cov_223sw53j1y().b[17][0]++;
      cov_223sw53j1y().s[48]++;
      return cachedValue;
    } else
    /* istanbul ignore next */
    {
      cov_223sw53j1y().b[17][1]++;
    }
    // Generate new value
    const newValue =
    /* istanbul ignore next */
    (cov_223sw53j1y().s[49]++, await factory());
    // Cache the new value
    /* istanbul ignore next */
    cov_223sw53j1y().s[50]++;
    await this.set(key, newValue, options);
    /* istanbul ignore next */
    cov_223sw53j1y().s[51]++;
    return newValue;
  }
  // Delete cache value
  async delete(key, options =
  /* istanbul ignore next */
  (cov_223sw53j1y().b[18][0]++, {})) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[11]++;
    cov_223sw53j1y().s[52]++;
    try {
      const {
        prefix =
        /* istanbul ignore next */
        (cov_223sw53j1y().b[19][0]++, CACHE_PREFIXES.METRICS)
      } =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[53]++, options);
      const cacheKey =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[54]++, this.generateKey(prefix, key));
      /* istanbul ignore next */
      cov_223sw53j1y().s[55]++;
      await this.redis.del(cacheKey);
      /* istanbul ignore next */
      cov_223sw53j1y().s[56]++;
      logger.debug(`Cache deleted: ${cacheKey}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[57]++;
      logger.error('Failed to delete cache:', error);
    }
  }
  // Delete multiple cache values by pattern
  async deletePattern(pattern, options =
  /* istanbul ignore next */
  (cov_223sw53j1y().b[20][0]++, {})) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[12]++;
    cov_223sw53j1y().s[58]++;
    try {
      const {
        prefix =
        /* istanbul ignore next */
        (cov_223sw53j1y().b[21][0]++, CACHE_PREFIXES.METRICS)
      } =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[59]++, options);
      const searchPattern =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[60]++, this.generateKey(prefix, pattern));
      const keys =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[61]++, await this.redis.keys(searchPattern));
      /* istanbul ignore next */
      cov_223sw53j1y().s[62]++;
      if (keys.length === 0) {
        /* istanbul ignore next */
        cov_223sw53j1y().b[22][0]++;
        cov_223sw53j1y().s[63]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_223sw53j1y().b[22][1]++;
      }
      const deletedCount =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[64]++, await this.redis.del(...keys));
      /* istanbul ignore next */
      cov_223sw53j1y().s[65]++;
      logger.debug(`Cache pattern deleted: ${searchPattern} (${deletedCount} keys)`);
      /* istanbul ignore next */
      cov_223sw53j1y().s[66]++;
      return deletedCount;
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[67]++;
      logger.error('Failed to delete cache pattern:', error);
      /* istanbul ignore next */
      cov_223sw53j1y().s[68]++;
      return 0;
    }
  }
  // Invalidate organization cache
  async invalidateOrganization(organizationId) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[13]++;
    cov_223sw53j1y().s[69]++;
    try {
      const patterns =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[70]++, [`${CACHE_PREFIXES.METRICS}:org:${organizationId}:*`, `${CACHE_PREFIXES.CAMPAIGNS}:org:${organizationId}:*`, `${CACHE_PREFIXES.DASHBOARD}:org:${organizationId}:*`, `${CACHE_PREFIXES.FUNNEL}:org:${organizationId}:*`, `${CACHE_PREFIXES.COMPARISON}:org:${organizationId}:*`]);
      let totalDeleted =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[71]++, 0);
      /* istanbul ignore next */
      cov_223sw53j1y().s[72]++;
      for (const pattern of patterns) {
        const keys =
        /* istanbul ignore next */
        (cov_223sw53j1y().s[73]++, await this.redis.keys(`utmify:cache:${pattern}`));
        /* istanbul ignore next */
        cov_223sw53j1y().s[74]++;
        if (keys.length > 0) {
          /* istanbul ignore next */
          cov_223sw53j1y().b[23][0]++;
          const deleted =
          /* istanbul ignore next */
          (cov_223sw53j1y().s[75]++, await this.redis.del(...keys));
          /* istanbul ignore next */
          cov_223sw53j1y().s[76]++;
          totalDeleted += deleted;
        } else
        /* istanbul ignore next */
        {
          cov_223sw53j1y().b[23][1]++;
        }
      }
      /* istanbul ignore next */
      cov_223sw53j1y().s[77]++;
      logger.info(`Invalidated cache for organization ${organizationId}: ${totalDeleted} keys deleted`);
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[78]++;
      logger.error('Failed to invalidate organization cache:', error);
    }
  }
  // Invalidate campaign cache
  async invalidateCampaign(campaignId, organizationId) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[14]++;
    cov_223sw53j1y().s[79]++;
    try {
      const patterns =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[80]++, [`${CACHE_PREFIXES.METRICS}:*:campaign:${campaignId}:*`, `${CACHE_PREFIXES.DASHBOARD}:*:campaign:${campaignId}:*`, `${CACHE_PREFIXES.FUNNEL}:*:campaign:${campaignId}:*`]);
      /* istanbul ignore next */
      cov_223sw53j1y().s[81]++;
      if (organizationId) {
        /* istanbul ignore next */
        cov_223sw53j1y().b[24][0]++;
        cov_223sw53j1y().s[82]++;
        patterns.push(`${CACHE_PREFIXES.METRICS}:org:${organizationId}:*`, `${CACHE_PREFIXES.DASHBOARD}:org:${organizationId}:*`);
      } else
      /* istanbul ignore next */
      {
        cov_223sw53j1y().b[24][1]++;
      }
      let totalDeleted =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[83]++, 0);
      /* istanbul ignore next */
      cov_223sw53j1y().s[84]++;
      for (const pattern of patterns) {
        const keys =
        /* istanbul ignore next */
        (cov_223sw53j1y().s[85]++, await this.redis.keys(`utmify:cache:${pattern}`));
        /* istanbul ignore next */
        cov_223sw53j1y().s[86]++;
        if (keys.length > 0) {
          /* istanbul ignore next */
          cov_223sw53j1y().b[25][0]++;
          const deleted =
          /* istanbul ignore next */
          (cov_223sw53j1y().s[87]++, await this.redis.del(...keys));
          /* istanbul ignore next */
          cov_223sw53j1y().s[88]++;
          totalDeleted += deleted;
        } else
        /* istanbul ignore next */
        {
          cov_223sw53j1y().b[25][1]++;
        }
      }
      /* istanbul ignore next */
      cov_223sw53j1y().s[89]++;
      logger.info(`Invalidated cache for campaign ${campaignId}: ${totalDeleted} keys deleted`);
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[90]++;
      logger.error('Failed to invalidate campaign cache:', error);
    }
  }
  // Get cache metrics
  async getMetrics() {
    /* istanbul ignore next */
    cov_223sw53j1y().f[15]++;
    cov_223sw53j1y().s[91]++;
    try {
      const info =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[92]++, await this.redis.info('memory'));
      const memoryMatch =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[93]++, info.match(/used_memory:(\d+)/));
      const memoryUsage =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[94]++, memoryMatch ?
      /* istanbul ignore next */
      (cov_223sw53j1y().b[26][0]++, parseInt(memoryMatch[1])) :
      /* istanbul ignore next */
      (cov_223sw53j1y().b[26][1]++, 0));
      const totalKeys =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[95]++, await this.redis.dbsize());
      const hitRate =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[96]++, this.metrics.hits + this.metrics.misses > 0 ?
      /* istanbul ignore next */
      (cov_223sw53j1y().b[27][0]++, this.metrics.hits / (this.metrics.hits + this.metrics.misses) * 100) :
      /* istanbul ignore next */
      (cov_223sw53j1y().b[27][1]++, 0));
      /* istanbul ignore next */
      cov_223sw53j1y().s[97]++;
      return {
        hits: this.metrics.hits,
        misses: this.metrics.misses,
        hitRate: Math.round(hitRate * 100) / 100,
        totalKeys,
        memoryUsage
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[98]++;
      logger.error('Failed to get cache metrics:', error);
      /* istanbul ignore next */
      cov_223sw53j1y().s[99]++;
      return {
        hits: this.metrics.hits,
        misses: this.metrics.misses,
        hitRate: 0,
        totalKeys: 0,
        memoryUsage: 0
      };
    }
  }
  // Reset metrics
  resetMetrics() {
    /* istanbul ignore next */
    cov_223sw53j1y().f[16]++;
    cov_223sw53j1y().s[100]++;
    this.metrics.hits = 0;
    /* istanbul ignore next */
    cov_223sw53j1y().s[101]++;
    this.metrics.misses = 0;
  }
  // Health check
  async healthCheck() {
    /* istanbul ignore next */
    cov_223sw53j1y().f[17]++;
    cov_223sw53j1y().s[102]++;
    try {
      const start =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[103]++, Date.now());
      /* istanbul ignore next */
      cov_223sw53j1y().s[104]++;
      await this.redis.ping();
      const latency =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[105]++, Date.now() - start);
      /* istanbul ignore next */
      cov_223sw53j1y().s[106]++;
      return {
        status: 'healthy',
        latency
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[107]++;
      logger.error('Cache health check failed:', error);
      /* istanbul ignore next */
      cov_223sw53j1y().s[108]++;
      return {
        status: 'unhealthy'
      };
    }
  }
  // Flush all cache
  async flush() {
    /* istanbul ignore next */
    cov_223sw53j1y().f[18]++;
    cov_223sw53j1y().s[109]++;
    try {
      /* istanbul ignore next */
      cov_223sw53j1y().s[110]++;
      await this.redis.flushdb();
      /* istanbul ignore next */
      cov_223sw53j1y().s[111]++;
      this.resetMetrics();
      /* istanbul ignore next */
      cov_223sw53j1y().s[112]++;
      logger.info('Cache flushed successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[113]++;
      logger.error('Failed to flush cache:', error);
      /* istanbul ignore next */
      cov_223sw53j1y().s[114]++;
      throw error;
    }
  }
  // Close connection
  async close() {
    /* istanbul ignore next */
    cov_223sw53j1y().f[19]++;
    cov_223sw53j1y().s[115]++;
    try {
      /* istanbul ignore next */
      cov_223sw53j1y().s[116]++;
      await this.redis.quit();
      /* istanbul ignore next */
      cov_223sw53j1y().s[117]++;
      logger.info('Cache connection closed');
    } catch (error) {
      /* istanbul ignore next */
      cov_223sw53j1y().s[118]++;
      logger.error('Failed to close cache connection:', error);
    }
  }
}
// Export singleton getter
export function getCacheService() {
  /* istanbul ignore next */
  cov_223sw53j1y().f[20]++;
  cov_223sw53j1y().s[119]++;
  return CacheService.getInstance();
}
// Cache decorators for methods
export function Cached(options) {
  /* istanbul ignore next */
  cov_223sw53j1y().f[21]++;
  cov_223sw53j1y().s[120]++;
  return function (target, propertyName, descriptor) {
    /* istanbul ignore next */
    cov_223sw53j1y().f[22]++;
    const method =
    /* istanbul ignore next */
    (cov_223sw53j1y().s[121]++, descriptor.value);
    /* istanbul ignore next */
    cov_223sw53j1y().s[122]++;
    descriptor.value = async function (...args) {
      /* istanbul ignore next */
      cov_223sw53j1y().f[23]++;
      const cache =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[123]++, getCacheService());
      // Generate cache key
      const key =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[124]++, options.keyGenerator ?
      /* istanbul ignore next */
      (cov_223sw53j1y().b[28][0]++, options.keyGenerator(...args)) :
      /* istanbul ignore next */
      (cov_223sw53j1y().b[28][1]++, `${target.constructor.name}:${propertyName}:${JSON.stringify(args)}`));
      // Try to get from cache
      const cachedResult =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[125]++, await cache.get(key, options));
      /* istanbul ignore next */
      cov_223sw53j1y().s[126]++;
      if (cachedResult !== null) {
        /* istanbul ignore next */
        cov_223sw53j1y().b[29][0]++;
        cov_223sw53j1y().s[127]++;
        return cachedResult;
      } else
      /* istanbul ignore next */
      {
        cov_223sw53j1y().b[29][1]++;
      }
      // Execute method and cache result
      const result =
      /* istanbul ignore next */
      (cov_223sw53j1y().s[128]++, await method.apply(this, args));
      /* istanbul ignore next */
      cov_223sw53j1y().s[129]++;
      await cache.set(key, result, options);
      /* istanbul ignore next */
      cov_223sw53j1y().s[130]++;
      return result;
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,