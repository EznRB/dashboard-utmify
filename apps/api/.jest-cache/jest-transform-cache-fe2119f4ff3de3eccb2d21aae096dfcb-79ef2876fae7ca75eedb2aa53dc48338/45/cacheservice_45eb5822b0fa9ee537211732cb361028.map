{"version":3,"names":["cov_223sw53j1y","actualCoverage","Redis","env","logger","CACHE_PREFIXES","s","METRICS","CAMPAIGNS","DASHBOARD","FUNNEL","COMPARISON","EXPORT","CACHE_TTL","REAL_TIME","CacheService","instance","redis","metrics","hits","misses","constructor","f","host","b","REDIS_HOST","port","REDIS_PORT","password","REDIS_PASSWORD","db","REDIS_CACHE_DB","retryDelayOnFailover","enableReadyCheck","maxRetriesPerRequest","lazyConnect","keyPrefix","on","error","info","getInstance","generateKey","prefix","key","organizationId","parts","push","join","compressData","data","JSON","stringify","decompressData","parse","set","value","options","ttl","compress","cacheKey","serializedValue","setex","debug","get","cachedValue","getOrSet","factory","newValue","delete","del","deletePattern","pattern","searchPattern","keys","length","deletedCount","invalidateOrganization","patterns","totalDeleted","deleted","invalidateCampaign","campaignId","getMetrics","memoryMatch","match","memoryUsage","parseInt","totalKeys","dbsize","hitRate","Math","round","resetMetrics","healthCheck","start","Date","now","ping","latency","status","flush","flushdb","close","quit","getCacheService","Cached","target","propertyName","descriptor","method","args","cache","keyGenerator","name","cachedResult","result","apply"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\cache.service.ts"],"sourcesContent":["import { Redis } from 'ioredis';\nimport { env } from '../config/env';\nimport { logger } from '../utils/logger';\n\n// Cache key prefixes\nexport const CACHE_PREFIXES = {\n  METRICS: 'metrics',\n  CAMPAIGNS: 'campaigns',\n  DASHBOARD: 'dashboard',\n  FUNNEL: 'funnel',\n  COMPARISON: 'comparison',\n  EXPORT: 'export',\n} as const;\n\n// Cache TTL constants (in seconds)\nexport const CACHE_TTL = {\n  METRICS: 300, // 5 minutes\n  CAMPAIGNS: 600, // 10 minutes\n  DASHBOARD: 180, // 3 minutes\n  FUNNEL: 300, // 5 minutes\n  COMPARISON: 600, // 10 minutes\n  EXPORT: 1800, // 30 minutes\n  REAL_TIME: 30, // 30 seconds for real-time data\n} as const;\n\n// Cache service interface\nexport interface CacheMetrics {\n  hits: number;\n  misses: number;\n  hitRate: number;\n  totalKeys: number;\n  memoryUsage: number;\n}\n\nexport interface CacheOptions {\n  ttl?: number;\n  prefix?: string;\n  compress?: boolean;\n}\n\nexport class CacheService {\n  private static instance: CacheService;\n  private redis: Redis;\n  private metrics: {\n    hits: number;\n    misses: number;\n  } = { hits: 0, misses: 0 };\n\n  private constructor() {\n    this.redis = new Redis({\n      host: env.REDIS_HOST || 'localhost',\n      port: env.REDIS_PORT || 6379,\n      password: env.REDIS_PASSWORD,\n      db: env.REDIS_CACHE_DB || 1, // Use different DB for cache\n      retryDelayOnFailover: 100,\n      enableReadyCheck: false,\n      maxRetriesPerRequest: null,\n      lazyConnect: true,\n      keyPrefix: 'utmify:cache:',\n    });\n\n    this.redis.on('error', (error) => {\n      logger.error('Redis cache connection error:', error);\n    });\n\n    this.redis.on('connect', () => {\n      logger.info('Redis cache connected successfully');\n    });\n\n    this.redis.on('ready', () => {\n      logger.info('Redis cache ready');\n    });\n  }\n\n  public static getInstance(): CacheService {\n    if (!CacheService.instance) {\n      CacheService.instance = new CacheService();\n    }\n    return CacheService.instance;\n  }\n\n  // Generate cache key\n  private generateKey(prefix: string, key: string, organizationId?: string): string {\n    const parts = [prefix];\n    if (organizationId) {\n      parts.push(`org:${organizationId}`);\n    }\n    parts.push(key);\n    return parts.join(':');\n  }\n\n  // Compress data if needed\n  private compressData(data: any): string {\n    return JSON.stringify(data);\n  }\n\n  // Decompress data\n  private decompressData(data: string): any {\n    try {\n      return JSON.parse(data);\n    } catch (error) {\n      logger.error('Failed to decompress cache data:', error);\n      return null;\n    }\n  }\n\n  // Set cache value\n  public async set<T>(\n    key: string,\n    value: T,\n    options: CacheOptions = {}\n  ): Promise<void> {\n    try {\n      const {\n        ttl = CACHE_TTL.METRICS,\n        prefix = CACHE_PREFIXES.METRICS,\n        compress = true,\n      } = options;\n\n      const cacheKey = this.generateKey(prefix, key);\n      const serializedValue = compress ? this.compressData(value) : JSON.stringify(value);\n\n      if (ttl > 0) {\n        await this.redis.setex(cacheKey, ttl, serializedValue);\n      } else {\n        await this.redis.set(cacheKey, serializedValue);\n      }\n\n      logger.debug(`Cache set: ${cacheKey} (TTL: ${ttl}s)`);\n    } catch (error) {\n      logger.error('Failed to set cache:', error);\n      // Don't throw error to avoid breaking the application\n    }\n  }\n\n  // Get cache value\n  public async get<T>(\n    key: string,\n    options: CacheOptions = {}\n  ): Promise<T | null> {\n    try {\n      const {\n        prefix = CACHE_PREFIXES.METRICS,\n        compress = true,\n      } = options;\n\n      const cacheKey = this.generateKey(prefix, key);\n      const cachedValue = await this.redis.get(cacheKey);\n\n      if (cachedValue === null) {\n        this.metrics.misses++;\n        logger.debug(`Cache miss: ${cacheKey}`);\n        return null;\n      }\n\n      this.metrics.hits++;\n      logger.debug(`Cache hit: ${cacheKey}`);\n\n      return compress ? this.decompressData(cachedValue) : JSON.parse(cachedValue);\n    } catch (error) {\n      logger.error('Failed to get cache:', error);\n      this.metrics.misses++;\n      return null;\n    }\n  }\n\n  // Get or set cache value\n  public async getOrSet<T>(\n    key: string,\n    factory: () => Promise<T>,\n    options: CacheOptions = {}\n  ): Promise<T> {\n    const cachedValue = await this.get<T>(key, options);\n    \n    if (cachedValue !== null) {\n      return cachedValue;\n    }\n\n    // Generate new value\n    const newValue = await factory();\n    \n    // Cache the new value\n    await this.set(key, newValue, options);\n    \n    return newValue;\n  }\n\n  // Delete cache value\n  public async delete(key: string, options: { prefix?: string } = {}): Promise<void> {\n    try {\n      const { prefix = CACHE_PREFIXES.METRICS } = options;\n      const cacheKey = this.generateKey(prefix, key);\n      \n      await this.redis.del(cacheKey);\n      logger.debug(`Cache deleted: ${cacheKey}`);\n    } catch (error) {\n      logger.error('Failed to delete cache:', error);\n    }\n  }\n\n  // Delete multiple cache values by pattern\n  public async deletePattern(pattern: string, options: { prefix?: string } = {}): Promise<number> {\n    try {\n      const { prefix = CACHE_PREFIXES.METRICS } = options;\n      const searchPattern = this.generateKey(prefix, pattern);\n      \n      const keys = await this.redis.keys(searchPattern);\n      \n      if (keys.length === 0) {\n        return 0;\n      }\n\n      const deletedCount = await this.redis.del(...keys);\n      logger.debug(`Cache pattern deleted: ${searchPattern} (${deletedCount} keys)`);\n      \n      return deletedCount;\n    } catch (error) {\n      logger.error('Failed to delete cache pattern:', error);\n      return 0;\n    }\n  }\n\n  // Invalidate organization cache\n  public async invalidateOrganization(organizationId: string): Promise<void> {\n    try {\n      const patterns = [\n        `${CACHE_PREFIXES.METRICS}:org:${organizationId}:*`,\n        `${CACHE_PREFIXES.CAMPAIGNS}:org:${organizationId}:*`,\n        `${CACHE_PREFIXES.DASHBOARD}:org:${organizationId}:*`,\n        `${CACHE_PREFIXES.FUNNEL}:org:${organizationId}:*`,\n        `${CACHE_PREFIXES.COMPARISON}:org:${organizationId}:*`,\n      ];\n\n      let totalDeleted = 0;\n      for (const pattern of patterns) {\n        const keys = await this.redis.keys(`utmify:cache:${pattern}`);\n        if (keys.length > 0) {\n          const deleted = await this.redis.del(...keys);\n          totalDeleted += deleted;\n        }\n      }\n\n      logger.info(`Invalidated cache for organization ${organizationId}: ${totalDeleted} keys deleted`);\n    } catch (error) {\n      logger.error('Failed to invalidate organization cache:', error);\n    }\n  }\n\n  // Invalidate campaign cache\n  public async invalidateCampaign(campaignId: string, organizationId?: string): Promise<void> {\n    try {\n      const patterns = [\n        `${CACHE_PREFIXES.METRICS}:*:campaign:${campaignId}:*`,\n        `${CACHE_PREFIXES.DASHBOARD}:*:campaign:${campaignId}:*`,\n        `${CACHE_PREFIXES.FUNNEL}:*:campaign:${campaignId}:*`,\n      ];\n\n      if (organizationId) {\n        patterns.push(\n          `${CACHE_PREFIXES.METRICS}:org:${organizationId}:*`,\n          `${CACHE_PREFIXES.DASHBOARD}:org:${organizationId}:*`\n        );\n      }\n\n      let totalDeleted = 0;\n      for (const pattern of patterns) {\n        const keys = await this.redis.keys(`utmify:cache:${pattern}`);\n        if (keys.length > 0) {\n          const deleted = await this.redis.del(...keys);\n          totalDeleted += deleted;\n        }\n      }\n\n      logger.info(`Invalidated cache for campaign ${campaignId}: ${totalDeleted} keys deleted`);\n    } catch (error) {\n      logger.error('Failed to invalidate campaign cache:', error);\n    }\n  }\n\n  // Get cache metrics\n  public async getMetrics(): Promise<CacheMetrics> {\n    try {\n      const info = await this.redis.info('memory');\n      const memoryMatch = info.match(/used_memory:(\\d+)/);\n      const memoryUsage = memoryMatch ? parseInt(memoryMatch[1]) : 0;\n\n      const totalKeys = await this.redis.dbsize();\n      const hitRate = this.metrics.hits + this.metrics.misses > 0 \n        ? (this.metrics.hits / (this.metrics.hits + this.metrics.misses)) * 100 \n        : 0;\n\n      return {\n        hits: this.metrics.hits,\n        misses: this.metrics.misses,\n        hitRate: Math.round(hitRate * 100) / 100,\n        totalKeys,\n        memoryUsage,\n      };\n    } catch (error) {\n      logger.error('Failed to get cache metrics:', error);\n      return {\n        hits: this.metrics.hits,\n        misses: this.metrics.misses,\n        hitRate: 0,\n        totalKeys: 0,\n        memoryUsage: 0,\n      };\n    }\n  }\n\n  // Reset metrics\n  public resetMetrics(): void {\n    this.metrics.hits = 0;\n    this.metrics.misses = 0;\n  }\n\n  // Health check\n  public async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; latency?: number }> {\n    try {\n      const start = Date.now();\n      await this.redis.ping();\n      const latency = Date.now() - start;\n      \n      return { status: 'healthy', latency };\n    } catch (error) {\n      logger.error('Cache health check failed:', error);\n      return { status: 'unhealthy' };\n    }\n  }\n\n  // Flush all cache\n  public async flush(): Promise<void> {\n    try {\n      await this.redis.flushdb();\n      this.resetMetrics();\n      logger.info('Cache flushed successfully');\n    } catch (error) {\n      logger.error('Failed to flush cache:', error);\n      throw error;\n    }\n  }\n\n  // Close connection\n  public async close(): Promise<void> {\n    try {\n      await this.redis.quit();\n      logger.info('Cache connection closed');\n    } catch (error) {\n      logger.error('Failed to close cache connection:', error);\n    }\n  }\n}\n\n// Export singleton getter\nexport function getCacheService(): CacheService {\n  return CacheService.getInstance();\n}\n\n// Cache decorators for methods\nexport function Cached(options: CacheOptions & { keyGenerator?: (...args: any[]) => string }) {\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    \n    descriptor.value = async function (...args: any[]) {\n      const cache = getCacheService();\n      \n      // Generate cache key\n      const key = options.keyGenerator \n        ? options.keyGenerator(...args)\n        : `${target.constructor.name}:${propertyName}:${JSON.stringify(args)}`;\n      \n      // Try to get from cache\n      const cachedResult = await cache.get(key, options);\n      if (cachedResult !== null) {\n        return cachedResult;\n      }\n      \n      // Execute method and cache result\n      const result = await method.apply(this, args);\n      await cache.set(key, result, options);\n      \n      return result;\n    };\n  };\n}"],"mappingsiBE;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAjBF,SAASE,KAAK,QAAQ,SAAS;AAC/B,SAASC,GAAG,QAAQ,eAAe;AACnC,SAASC,MAAM,QAAQ,iBAAiB;AAExC;AACA,OAAO,MAAMC,cAAc;AAAA;AAAA,CAAAL,cAAA,GAAAM,CAAA,OAAG;EAC5BC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,WAAW;EACtBC,SAAS,EAAE,WAAW;EACtBC,MAAM,EAAE,QAAQ;EAChBC,UAAU,EAAE,YAAY;EACxBC,MAAM,EAAE;CACA;AAEV;AACA,OAAO,MAAMC,SAAS;AAAA;AAAA,CAAAb,cAAA,GAAAM,CAAA,OAAG;EACvBC,OAAO,EAAE,GAAG;EAAE;EACdC,SAAS,EAAE,GAAG;EAAE;EAChBC,SAAS,EAAE,GAAG;EAAE;EAChBC,MAAM,EAAE,GAAG;EAAE;EACbC,UAAU,EAAE,GAAG;EAAE;EACjBC,MAAM,EAAE,IAAI;EAAE;EACdE,SAAS,EAAE,EAAE,CAAE;CACP;AAiBV,OAAM,MAAOC,YAAY;EACf,OAAOC,QAAQ;EACfC,KAAK;EACLC,OAAO;EAAA;EAAA,CAAAlB,cAAA,GAAAM,CAAA,OAGX;IAAEa,IAAI,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAC,CAAE;EAE1BC,YAAA;IAAA;IAAArB,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IACE,IAAI,CAACW,KAAK,GAAG,IAAIf,KAAK,CAAC;MACrBqB,IAAI;MAAE;MAAA,CAAAvB,cAAA,GAAAwB,CAAA,UAAArB,GAAG,CAACsB,UAAU;MAAA;MAAA,CAAAzB,cAAA,GAAAwB,CAAA,UAAI,WAAW;MACnCE,IAAI;MAAE;MAAA,CAAA1B,cAAA,GAAAwB,CAAA,UAAArB,GAAG,CAACwB,UAAU;MAAA;MAAA,CAAA3B,cAAA,GAAAwB,CAAA,UAAI,IAAI;MAC5BI,QAAQ,EAAEzB,GAAG,CAAC0B,cAAc;MAC5BC,EAAE;MAAE;MAAA,CAAA9B,cAAA,GAAAwB,CAAA,UAAArB,GAAG,CAAC4B,cAAc;MAAA;MAAA,CAAA/B,cAAA,GAAAwB,CAAA,UAAI,CAAC;MAAE;MAC7BQ,oBAAoB,EAAE,GAAG;MACzBC,gBAAgB,EAAE,KAAK;MACvBC,oBAAoB,EAAE,IAAI;MAC1BC,WAAW,EAAE,IAAI;MACjBC,SAAS,EAAE;KACZ,CAAC;IAAC;IAAApC,cAAA,GAAAM,CAAA;IAEH,IAAI,CAACW,KAAK,CAACoB,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAI;MAAA;MAAAtC,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAM,CAAA;MAC/BF,MAAM,CAACkC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;IAAC;IAAAtC,cAAA,GAAAM,CAAA;IAEH,IAAI,CAACW,KAAK,CAACoB,EAAE,CAAC,SAAS,EAAE,MAAK;MAAA;MAAArC,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAM,CAAA;MAC5BF,MAAM,CAACmC,IAAI,CAAC,oCAAoC,CAAC;IACnD,CAAC,CAAC;IAAC;IAAAvC,cAAA,GAAAM,CAAA;IAEH,IAAI,CAACW,KAAK,CAACoB,EAAE,CAAC,OAAO,EAAE,MAAK;MAAA;MAAArC,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAM,CAAA;MAC1BF,MAAM,CAACmC,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC,CAAC;EACJ;EAEO,OAAOC,WAAWA,CAAA;IAAA;IAAAxC,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IACvB,IAAI,CAACS,YAAY,CAACC,QAAQ,EAAE;MAAA;MAAAhB,cAAA,GAAAwB,CAAA;MAAAxB,cAAA,GAAAM,CAAA;MAC1BS,YAAY,CAACC,QAAQ,GAAG,IAAID,YAAY,EAAE;IAC5C,CAAC;IAAA;IAAA;MAAAf,cAAA,GAAAwB,CAAA;IAAA;IAAAxB,cAAA,GAAAM,CAAA;IACD,OAAOS,YAAY,CAACC,QAAQ;EAC9B;EAEA;EACQyB,WAAWA,CAACC,MAAc,EAAEC,GAAW,EAAEC,cAAuB;IAAA;IAAA5C,cAAA,GAAAsB,CAAA;IACtE,MAAMuB,KAAK;IAAA;IAAA,CAAA7C,cAAA,GAAAM,CAAA,QAAG,CAACoC,MAAM,CAAC;IAAC;IAAA1C,cAAA,GAAAM,CAAA;IACvB,IAAIsC,cAAc,EAAE;MAAA;MAAA5C,cAAA,GAAAwB,CAAA;MAAAxB,cAAA,GAAAM,CAAA;MAClBuC,KAAK,CAACC,IAAI,CAAC,OAAOF,cAAc,EAAE,CAAC;IACrC,CAAC;IAAA;IAAA;MAAA5C,cAAA,GAAAwB,CAAA;IAAA;IAAAxB,cAAA,GAAAM,CAAA;IACDuC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC;IAAC;IAAA3C,cAAA,GAAAM,CAAA;IAChB,OAAOuC,KAAK,CAACE,IAAI,CAAC,GAAG,CAAC;EACxB;EAEA;EACQC,YAAYA,CAACC,IAAS;IAAA;IAAAjD,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IAC5B,OAAO4C,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC;EAC7B;EAEA;EACQG,cAAcA,CAACH,IAAY;IAAA;IAAAjD,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IACjC,IAAI;MAAA;MAAAN,cAAA,GAAAM,CAAA;MACF,OAAO4C,IAAI,CAACG,KAAK,CAACJ,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAAC;MAAAtC,cAAA,GAAAM,CAAA;MACxD,OAAO,IAAI;IACb;EACF;EAEA;EACO,MAAMgD,GAAGA,CACdX,GAAW,EACXY,KAAQ,EACRC,OAAA;EAAA;EAAA,CAAAxD,cAAA,GAAAwB,CAAA,UAAwB,EAAE;IAAA;IAAAxB,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IAE1B,IAAI;MACF,MAAM;QACJmD,GAAG;QAAA;QAAA,CAAAzD,cAAA,GAAAwB,CAAA,UAAGX,SAAS,CAACN,OAAO;QACvBmC,MAAM;QAAA;QAAA,CAAA1C,cAAA,GAAAwB,CAAA,UAAGnB,cAAc,CAACE,OAAO;QAC/BmD,QAAQ;QAAA;QAAA,CAAA1D,cAAA,GAAAwB,CAAA,UAAG,IAAI;MAAA,CAChB;MAAA;MAAA,CAAAxB,cAAA,GAAAM,CAAA,QAAGkD,OAAO;MAEX,MAAMG,QAAQ;MAAA;MAAA,CAAA3D,cAAA,GAAAM,CAAA,QAAG,IAAI,CAACmC,WAAW,CAACC,MAAM,EAAEC,GAAG,CAAC;MAC9C,MAAMiB,eAAe;MAAA;MAAA,CAAA5D,cAAA,GAAAM,CAAA,QAAGoD,QAAQ;MAAA;MAAA,CAAA1D,cAAA,GAAAwB,CAAA,UAAG,IAAI,CAACwB,YAAY,CAACO,KAAK,CAAC;MAAA;MAAA,CAAAvD,cAAA,GAAAwB,CAAA,UAAG0B,IAAI,CAACC,SAAS,CAACI,KAAK,CAAC;MAAC;MAAAvD,cAAA,GAAAM,CAAA;MAEpF,IAAImD,GAAG,GAAG,CAAC,EAAE;QAAA;QAAAzD,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAM,CAAA;QACX,MAAM,IAAI,CAACW,KAAK,CAAC4C,KAAK,CAACF,QAAQ,EAAEF,GAAG,EAAEG,eAAe,CAAC;MACxD,CAAC,MAAM;QAAA;QAAA5D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAM,CAAA;QACL,MAAM,IAAI,CAACW,KAAK,CAACqC,GAAG,CAACK,QAAQ,EAAEC,eAAe,CAAC;MACjD;MAAC;MAAA5D,cAAA,GAAAM,CAAA;MAEDF,MAAM,CAAC0D,KAAK,CAAC,cAAcH,QAAQ,UAAUF,GAAG,IAAI,CAAC;IACvD,CAAC,CAAC,OAAOnB,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC3C;IACF;EACF;EAEA;EACO,MAAMyB,GAAGA,CACdpB,GAAW,EACXa,OAAA;EAAA;EAAA,CAAAxD,cAAA,GAAAwB,CAAA,WAAwB,EAAE;IAAA;IAAAxB,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IAE1B,IAAI;MACF,MAAM;QACJoC,MAAM;QAAA;QAAA,CAAA1C,cAAA,GAAAwB,CAAA,WAAGnB,cAAc,CAACE,OAAO;QAC/BmD,QAAQ;QAAA;QAAA,CAAA1D,cAAA,GAAAwB,CAAA,WAAG,IAAI;MAAA,CAChB;MAAA;MAAA,CAAAxB,cAAA,GAAAM,CAAA,QAAGkD,OAAO;MAEX,MAAMG,QAAQ;MAAA;MAAA,CAAA3D,cAAA,GAAAM,CAAA,QAAG,IAAI,CAACmC,WAAW,CAACC,MAAM,EAAEC,GAAG,CAAC;MAC9C,MAAMqB,WAAW;MAAA;MAAA,CAAAhE,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACW,KAAK,CAAC8C,GAAG,CAACJ,QAAQ,CAAC;MAAC;MAAA3D,cAAA,GAAAM,CAAA;MAEnD,IAAI0D,WAAW,KAAK,IAAI,EAAE;QAAA;QAAAhE,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAM,CAAA;QACxB,IAAI,CAACY,OAAO,CAACE,MAAM,EAAE;QAAC;QAAApB,cAAA,GAAAM,CAAA;QACtBF,MAAM,CAAC0D,KAAK,CAAC,eAAeH,QAAQ,EAAE,CAAC;QAAC;QAAA3D,cAAA,GAAAM,CAAA;QACxC,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAN,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAM,CAAA;MAED,IAAI,CAACY,OAAO,CAACC,IAAI,EAAE;MAAC;MAAAnB,cAAA,GAAAM,CAAA;MACpBF,MAAM,CAAC0D,KAAK,CAAC,cAAcH,QAAQ,EAAE,CAAC;MAAC;MAAA3D,cAAA,GAAAM,CAAA;MAEvC,OAAOoD,QAAQ;MAAA;MAAA,CAAA1D,cAAA,GAAAwB,CAAA,WAAG,IAAI,CAAC4B,cAAc,CAACY,WAAW,CAAC;MAAA;MAAA,CAAAhE,cAAA,GAAAwB,CAAA,WAAG0B,IAAI,CAACG,KAAK,CAACW,WAAW,CAAC;IAC9E,CAAC,CAAC,OAAO1B,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAAC;MAAAtC,cAAA,GAAAM,CAAA;MAC5C,IAAI,CAACY,OAAO,CAACE,MAAM,EAAE;MAAC;MAAApB,cAAA,GAAAM,CAAA;MACtB,OAAO,IAAI;IACb;EACF;EAEA;EACO,MAAM2D,QAAQA,CACnBtB,GAAW,EACXuB,OAAyB,EACzBV,OAAA;EAAA;EAAA,CAAAxD,cAAA,GAAAwB,CAAA,WAAwB,EAAE;IAAA;IAAAxB,cAAA,GAAAsB,CAAA;IAE1B,MAAM0C,WAAW;IAAA;IAAA,CAAAhE,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACyD,GAAG,CAAIpB,GAAG,EAAEa,OAAO,CAAC;IAAC;IAAAxD,cAAA,GAAAM,CAAA;IAEpD,IAAI0D,WAAW,KAAK,IAAI,EAAE;MAAA;MAAAhE,cAAA,GAAAwB,CAAA;MAAAxB,cAAA,GAAAM,CAAA;MACxB,OAAO0D,WAAW;IACpB,CAAC;IAAA;IAAA;MAAAhE,cAAA,GAAAwB,CAAA;IAAA;IAED;IACA,MAAM2C,QAAQ;IAAA;IAAA,CAAAnE,cAAA,GAAAM,CAAA,QAAG,MAAM4D,OAAO,EAAE;IAEhC;IAAA;IAAAlE,cAAA,GAAAM,CAAA;IACA,MAAM,IAAI,CAACgD,GAAG,CAACX,GAAG,EAAEwB,QAAQ,EAAEX,OAAO,CAAC;IAAC;IAAAxD,cAAA,GAAAM,CAAA;IAEvC,OAAO6D,QAAQ;EACjB;EAEA;EACO,MAAMC,MAAMA,CAACzB,GAAW,EAAEa,OAAA;EAAA;EAAA,CAAAxD,cAAA,GAAAwB,CAAA,WAA+B,EAAE;IAAA;IAAAxB,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IAChE,IAAI;MACF,MAAM;QAAEoC,MAAM;QAAA;QAAA,CAAA1C,cAAA,GAAAwB,CAAA,WAAGnB,cAAc,CAACE,OAAO;MAAA,CAAE;MAAA;MAAA,CAAAP,cAAA,GAAAM,CAAA,QAAGkD,OAAO;MACnD,MAAMG,QAAQ;MAAA;MAAA,CAAA3D,cAAA,GAAAM,CAAA,QAAG,IAAI,CAACmC,WAAW,CAACC,MAAM,EAAEC,GAAG,CAAC;MAAC;MAAA3C,cAAA,GAAAM,CAAA;MAE/C,MAAM,IAAI,CAACW,KAAK,CAACoD,GAAG,CAACV,QAAQ,CAAC;MAAC;MAAA3D,cAAA,GAAAM,CAAA;MAC/BF,MAAM,CAAC0D,KAAK,CAAC,kBAAkBH,QAAQ,EAAE,CAAC;IAC5C,CAAC,CAAC,OAAOrB,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAChD;EACF;EAEA;EACO,MAAMgC,aAAaA,CAACC,OAAe,EAAEf,OAAA;EAAA;EAAA,CAAAxD,cAAA,GAAAwB,CAAA,WAA+B,EAAE;IAAA;IAAAxB,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IAC3E,IAAI;MACF,MAAM;QAAEoC,MAAM;QAAA;QAAA,CAAA1C,cAAA,GAAAwB,CAAA,WAAGnB,cAAc,CAACE,OAAO;MAAA,CAAE;MAAA;MAAA,CAAAP,cAAA,GAAAM,CAAA,QAAGkD,OAAO;MACnD,MAAMgB,aAAa;MAAA;MAAA,CAAAxE,cAAA,GAAAM,CAAA,QAAG,IAAI,CAACmC,WAAW,CAACC,MAAM,EAAE6B,OAAO,CAAC;MAEvD,MAAME,IAAI;MAAA;MAAA,CAAAzE,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACW,KAAK,CAACwD,IAAI,CAACD,aAAa,CAAC;MAAC;MAAAxE,cAAA,GAAAM,CAAA;MAElD,IAAImE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QAAA;QAAA1E,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAM,CAAA;QACrB,OAAO,CAAC;MACV,CAAC;MAAA;MAAA;QAAAN,cAAA,GAAAwB,CAAA;MAAA;MAED,MAAMmD,YAAY;MAAA;MAAA,CAAA3E,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACW,KAAK,CAACoD,GAAG,CAAC,GAAGI,IAAI,CAAC;MAAC;MAAAzE,cAAA,GAAAM,CAAA;MACnDF,MAAM,CAAC0D,KAAK,CAAC,0BAA0BU,aAAa,KAAKG,YAAY,QAAQ,CAAC;MAAC;MAAA3E,cAAA,GAAAM,CAAA;MAE/E,OAAOqE,YAAY;IACrB,CAAC,CAAC,OAAOrC,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAAC;MAAAtC,cAAA,GAAAM,CAAA;MACvD,OAAO,CAAC;IACV;EACF;EAEA;EACO,MAAMsE,sBAAsBA,CAAChC,cAAsB;IAAA;IAAA5C,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IACxD,IAAI;MACF,MAAMuE,QAAQ;MAAA;MAAA,CAAA7E,cAAA,GAAAM,CAAA,QAAG,CACf,GAAGD,cAAc,CAACE,OAAO,QAAQqC,cAAc,IAAI,EACnD,GAAGvC,cAAc,CAACG,SAAS,QAAQoC,cAAc,IAAI,EACrD,GAAGvC,cAAc,CAACI,SAAS,QAAQmC,cAAc,IAAI,EACrD,GAAGvC,cAAc,CAACK,MAAM,QAAQkC,cAAc,IAAI,EAClD,GAAGvC,cAAc,CAACM,UAAU,QAAQiC,cAAc,IAAI,CACvD;MAED,IAAIkC,YAAY;MAAA;MAAA,CAAA9E,cAAA,GAAAM,CAAA,QAAG,CAAC;MAAC;MAAAN,cAAA,GAAAM,CAAA;MACrB,KAAK,MAAMiE,OAAO,IAAIM,QAAQ,EAAE;QAC9B,MAAMJ,IAAI;QAAA;QAAA,CAAAzE,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACW,KAAK,CAACwD,IAAI,CAAC,gBAAgBF,OAAO,EAAE,CAAC;QAAC;QAAAvE,cAAA,GAAAM,CAAA;QAC9D,IAAImE,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;UAAA;UAAA1E,cAAA,GAAAwB,CAAA;UACnB,MAAMuD,OAAO;UAAA;UAAA,CAAA/E,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACW,KAAK,CAACoD,GAAG,CAAC,GAAGI,IAAI,CAAC;UAAC;UAAAzE,cAAA,GAAAM,CAAA;UAC9CwE,YAAY,IAAIC,OAAO;QACzB,CAAC;QAAA;QAAA;UAAA/E,cAAA,GAAAwB,CAAA;QAAA;MACH;MAAC;MAAAxB,cAAA,GAAAM,CAAA;MAEDF,MAAM,CAACmC,IAAI,CAAC,sCAAsCK,cAAc,KAAKkC,YAAY,eAAe,CAAC;IACnG,CAAC,CAAC,OAAOxC,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IACjE;EACF;EAEA;EACO,MAAM0C,kBAAkBA,CAACC,UAAkB,EAAErC,cAAuB;IAAA;IAAA5C,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IACzE,IAAI;MACF,MAAMuE,QAAQ;MAAA;MAAA,CAAA7E,cAAA,GAAAM,CAAA,QAAG,CACf,GAAGD,cAAc,CAACE,OAAO,eAAe0E,UAAU,IAAI,EACtD,GAAG5E,cAAc,CAACI,SAAS,eAAewE,UAAU,IAAI,EACxD,GAAG5E,cAAc,CAACK,MAAM,eAAeuE,UAAU,IAAI,CACtD;MAAC;MAAAjF,cAAA,GAAAM,CAAA;MAEF,IAAIsC,cAAc,EAAE;QAAA;QAAA5C,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAM,CAAA;QAClBuE,QAAQ,CAAC/B,IAAI,CACX,GAAGzC,cAAc,CAACE,OAAO,QAAQqC,cAAc,IAAI,EACnD,GAAGvC,cAAc,CAACI,SAAS,QAAQmC,cAAc,IAAI,CACtD;MACH,CAAC;MAAA;MAAA;QAAA5C,cAAA,GAAAwB,CAAA;MAAA;MAED,IAAIsD,YAAY;MAAA;MAAA,CAAA9E,cAAA,GAAAM,CAAA,QAAG,CAAC;MAAC;MAAAN,cAAA,GAAAM,CAAA;MACrB,KAAK,MAAMiE,OAAO,IAAIM,QAAQ,EAAE;QAC9B,MAAMJ,IAAI;QAAA;QAAA,CAAAzE,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACW,KAAK,CAACwD,IAAI,CAAC,gBAAgBF,OAAO,EAAE,CAAC;QAAC;QAAAvE,cAAA,GAAAM,CAAA;QAC9D,IAAImE,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;UAAA;UAAA1E,cAAA,GAAAwB,CAAA;UACnB,MAAMuD,OAAO;UAAA;UAAA,CAAA/E,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACW,KAAK,CAACoD,GAAG,CAAC,GAAGI,IAAI,CAAC;UAAC;UAAAzE,cAAA,GAAAM,CAAA;UAC9CwE,YAAY,IAAIC,OAAO;QACzB,CAAC;QAAA;QAAA;UAAA/E,cAAA,GAAAwB,CAAA;QAAA;MACH;MAAC;MAAAxB,cAAA,GAAAM,CAAA;MAEDF,MAAM,CAACmC,IAAI,CAAC,kCAAkC0C,UAAU,KAAKH,YAAY,eAAe,CAAC;IAC3F,CAAC,CAAC,OAAOxC,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC7D;EACF;EAEA;EACO,MAAM4C,UAAUA,CAAA;IAAA;IAAAlF,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IACrB,IAAI;MACF,MAAMiC,IAAI;MAAA;MAAA,CAAAvC,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACW,KAAK,CAACsB,IAAI,CAAC,QAAQ,CAAC;MAC5C,MAAM4C,WAAW;MAAA;MAAA,CAAAnF,cAAA,GAAAM,CAAA,QAAGiC,IAAI,CAAC6C,KAAK,CAAC,mBAAmB,CAAC;MACnD,MAAMC,WAAW;MAAA;MAAA,CAAArF,cAAA,GAAAM,CAAA,QAAG6E,WAAW;MAAA;MAAA,CAAAnF,cAAA,GAAAwB,CAAA,WAAG8D,QAAQ,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAA;MAAA,CAAAnF,cAAA,GAAAwB,CAAA,WAAG,CAAC;MAE9D,MAAM+D,SAAS;MAAA;MAAA,CAAAvF,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACW,KAAK,CAACuE,MAAM,EAAE;MAC3C,MAAMC,OAAO;MAAA;MAAA,CAAAzF,cAAA,GAAAM,CAAA,QAAG,IAAI,CAACY,OAAO,CAACC,IAAI,GAAG,IAAI,CAACD,OAAO,CAACE,MAAM,GAAG,CAAC;MAAA;MAAA,CAAApB,cAAA,GAAAwB,CAAA,WACtD,IAAI,CAACN,OAAO,CAACC,IAAI,IAAI,IAAI,CAACD,OAAO,CAACC,IAAI,GAAG,IAAI,CAACD,OAAO,CAACE,MAAM,CAAC,GAAI,GAAG;MAAA;MAAA,CAAApB,cAAA,GAAAwB,CAAA,WACrE,CAAC;MAAC;MAAAxB,cAAA,GAAAM,CAAA;MAEN,OAAO;QACLa,IAAI,EAAE,IAAI,CAACD,OAAO,CAACC,IAAI;QACvBC,MAAM,EAAE,IAAI,CAACF,OAAO,CAACE,MAAM;QAC3BqE,OAAO,EAAEC,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG;QACxCF,SAAS;QACTF;OACD;IACH,CAAC,CAAC,OAAO/C,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MAAC;MAAAtC,cAAA,GAAAM,CAAA;MACpD,OAAO;QACLa,IAAI,EAAE,IAAI,CAACD,OAAO,CAACC,IAAI;QACvBC,MAAM,EAAE,IAAI,CAACF,OAAO,CAACE,MAAM;QAC3BqE,OAAO,EAAE,CAAC;QACVF,SAAS,EAAE,CAAC;QACZF,WAAW,EAAE;OACd;IACH;EACF;EAEA;EACOO,YAAYA,CAAA;IAAA;IAAA5F,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IACjB,IAAI,CAACY,OAAO,CAACC,IAAI,GAAG,CAAC;IAAC;IAAAnB,cAAA,GAAAM,CAAA;IACtB,IAAI,CAACY,OAAO,CAACE,MAAM,GAAG,CAAC;EACzB;EAEA;EACO,MAAMyE,WAAWA,CAAA;IAAA;IAAA7F,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IACtB,IAAI;MACF,MAAMwF,KAAK;MAAA;MAAA,CAAA9F,cAAA,GAAAM,CAAA,SAAGyF,IAAI,CAACC,GAAG,EAAE;MAAC;MAAAhG,cAAA,GAAAM,CAAA;MACzB,MAAM,IAAI,CAACW,KAAK,CAACgF,IAAI,EAAE;MACvB,MAAMC,OAAO;MAAA;MAAA,CAAAlG,cAAA,GAAAM,CAAA,SAAGyF,IAAI,CAACC,GAAG,EAAE,GAAGF,KAAK;MAAC;MAAA9F,cAAA,GAAAM,CAAA;MAEnC,OAAO;QAAE6F,MAAM,EAAE,SAAS;QAAED;MAAO,CAAE;IACvC,CAAC,CAAC,OAAO5D,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAAC;MAAAtC,cAAA,GAAAM,CAAA;MAClD,OAAO;QAAE6F,MAAM,EAAE;MAAW,CAAE;IAChC;EACF;EAEA;EACO,MAAMC,KAAKA,CAAA;IAAA;IAAApG,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IAChB,IAAI;MAAA;MAAAN,cAAA,GAAAM,CAAA;MACF,MAAM,IAAI,CAACW,KAAK,CAACoF,OAAO,EAAE;MAAC;MAAArG,cAAA,GAAAM,CAAA;MAC3B,IAAI,CAACsF,YAAY,EAAE;MAAC;MAAA5F,cAAA,GAAAM,CAAA;MACpBF,MAAM,CAACmC,IAAI,CAAC,4BAA4B,CAAC;IAC3C,CAAC,CAAC,OAAOD,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAAtC,cAAA,GAAAM,CAAA;MAC9C,MAAMgC,KAAK;IACb;EACF;EAEA;EACO,MAAMgE,KAAKA,CAAA;IAAA;IAAAtG,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAM,CAAA;IAChB,IAAI;MAAA;MAAAN,cAAA,GAAAM,CAAA;MACF,MAAM,IAAI,CAACW,KAAK,CAACsF,IAAI,EAAE;MAAC;MAAAvG,cAAA,GAAAM,CAAA;MACxBF,MAAM,CAACmC,IAAI,CAAC,yBAAyB,CAAC;IACxC,CAAC,CAAC,OAAOD,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAM,CAAA;MACdF,MAAM,CAACkC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC1D;EACF;;AAGF;AACA,OAAM,SAAUkE,eAAeA,CAAA;EAAA;EAAAxG,cAAA,GAAAsB,CAAA;EAAAtB,cAAA,GAAAM,CAAA;EAC7B,OAAOS,YAAY,CAACyB,WAAW,EAAE;AACnC;AAEA;AACA,OAAM,SAAUiE,MAAMA,CAACjD,OAAqE;EAAA;EAAAxD,cAAA,GAAAsB,CAAA;EAAAtB,cAAA,GAAAM,CAAA;EAC1F,OAAO,UAAUoG,MAAW,EAAEC,YAAoB,EAAEC,UAA8B;IAAA;IAAA5G,cAAA,GAAAsB,CAAA;IAChF,MAAMuF,MAAM;IAAA;IAAA,CAAA7G,cAAA,GAAAM,CAAA,SAAGsG,UAAU,CAACrD,KAAK;IAAC;IAAAvD,cAAA,GAAAM,CAAA;IAEhCsG,UAAU,CAACrD,KAAK,GAAG,gBAAgB,GAAGuD,IAAW;MAAA;MAAA9G,cAAA,GAAAsB,CAAA;MAC/C,MAAMyF,KAAK;MAAA;MAAA,CAAA/G,cAAA,GAAAM,CAAA,SAAGkG,eAAe,EAAE;MAE/B;MACA,MAAM7D,GAAG;MAAA;MAAA,CAAA3C,cAAA,GAAAM,CAAA,SAAGkD,OAAO,CAACwD,YAAY;MAAA;MAAA,CAAAhH,cAAA,GAAAwB,CAAA,WAC5BgC,OAAO,CAACwD,YAAY,CAAC,GAAGF,IAAI,CAAC;MAAA;MAAA,CAAA9G,cAAA,GAAAwB,CAAA,WAC7B,GAAGkF,MAAM,CAACrF,WAAW,CAAC4F,IAAI,IAAIN,YAAY,IAAIzD,IAAI,CAACC,SAAS,CAAC2D,IAAI,CAAC,EAAE;MAExE;MACA,MAAMI,YAAY;MAAA;MAAA,CAAAlH,cAAA,GAAAM,CAAA,SAAG,MAAMyG,KAAK,CAAChD,GAAG,CAACpB,GAAG,EAAEa,OAAO,CAAC;MAAC;MAAAxD,cAAA,GAAAM,CAAA;MACnD,IAAI4G,YAAY,KAAK,IAAI,EAAE;QAAA;QAAAlH,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAM,CAAA;QACzB,OAAO4G,YAAY;MACrB,CAAC;MAAA;MAAA;QAAAlH,cAAA,GAAAwB,CAAA;MAAA;MAED;MACA,MAAM2F,MAAM;MAAA;MAAA,CAAAnH,cAAA,GAAAM,CAAA,SAAG,MAAMuG,MAAM,CAACO,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;MAAC;MAAA9G,cAAA,GAAAM,CAAA;MAC9C,MAAMyG,KAAK,CAACzD,GAAG,CAACX,GAAG,EAAEwE,MAAM,EAAE3D,OAAO,CAAC;MAAC;MAAAxD,cAAA,GAAAM,CAAA;MAEtC,OAAO6G,MAAM;IACf,CAAC;EACH,CAAC;AACH","ignoreList":[]}