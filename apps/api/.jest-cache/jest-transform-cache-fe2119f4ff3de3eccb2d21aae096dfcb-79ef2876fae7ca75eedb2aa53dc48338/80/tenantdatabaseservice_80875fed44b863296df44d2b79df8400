bb96c6753d9c9d21659a7d935a12ecb3
/* istanbul ignore next */
function cov_2e81lrzwpn() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-database.service.ts";
  var hash = "ddd2f0b826b71bcf83af3f7f92a356406dd805d8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-database.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 16,
          column: 28
        },
        end: {
          line: 257,
          column: 1
        }
      },
      "14": {
        start: {
          line: 18,
          column: 13
        },
        end: {
          line: 18,
          column: 53
        }
      },
      "15": {
        start: {
          line: 19,
          column: 24
        },
        end: {
          line: 19,
          column: 33
        }
      },
      "16": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 47
        }
      },
      "17": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 43
        }
      },
      "18": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 32,
          column: 11
        }
      },
      "19": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 48
        }
      },
      "20": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 64
        }
      },
      "21": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 51
        }
      },
      "22": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "23": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 43
        }
      },
      "24": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 72
        }
      },
      "25": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 39
        }
      },
      "26": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 69
        }
      },
      "27": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 45
        }
      },
      "28": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "29": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "30": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 50
        }
      },
      "31": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 45
        }
      },
      "32": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 30
        }
      },
      "33": {
        start: {
          line: 70,
          column: 24
        },
        end: {
          line: 70,
          column: 57
        }
      },
      "34": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "35": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 42
        }
      },
      "36": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 64
        }
      },
      "37": {
        start: {
          line: 81,
          column: 25
        },
        end: {
          line: 81,
          column: 59
        }
      },
      "38": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "39": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "40": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 59
        }
      },
      "41": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 76
        }
      },
      "42": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 26
        }
      },
      "43": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "44": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 102
        }
      },
      "45": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 50
        }
      },
      "46": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 82
        }
      },
      "47": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 24
        }
      },
      "48": {
        start: {
          line: 114,
          column: 27
        },
        end: {
          line: 114,
          column: 67
        }
      },
      "49": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "50": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 89
        }
      },
      "51": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 97
        }
      },
      "52": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 24
        }
      },
      "53": {
        start: {
          line: 127,
          column: 27
        },
        end: {
          line: 127,
          column: 67
        }
      },
      "54": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "55": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "56": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "57": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "58": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "59": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 80
        }
      },
      "60": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 93
        }
      },
      "61": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 24
        }
      },
      "62": {
        start: {
          line: 181,
          column: 23
        },
        end: {
          line: 181,
          column: 45
        }
      },
      "63": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 46
        }
      },
      "64": {
        start: {
          line: 183,
          column: 27
        },
        end: {
          line: 183,
          column: 67
        }
      },
      "65": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 41
        }
      },
      "66": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 33
        }
      },
      "67": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 49
        }
      },
      "68": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 54
        }
      },
      "69": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "70": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 74
        }
      },
      "71": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "72": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 118
        }
      },
      "73": {
        start: {
          line: 209,
          column: 28
        },
        end: {
          line: 209,
          column: 42
        }
      },
      "74": {
        start: {
          line: 210,
          column: 20
        },
        end: {
          line: 210,
          column: 30
        }
      },
      "75": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "76": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "77": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 52
        }
      },
      "78": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "79": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "80": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 80
        }
      },
      "81": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 102
        }
      },
      "82": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 24
        }
      },
      "83": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "84": {
        start: {
          line: 243,
          column: 31
        },
        end: {
          line: 243,
          column: 65
        }
      },
      "85": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "86": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 47
        }
      },
      "87": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 54
        }
      },
      "88": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 104
        }
      },
      "89": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 59
        }
      },
      "90": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 84
        }
      },
      "91": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 24
        }
      },
      "92": {
        start: {
          line: 258,
          column: 0
        },
        end: {
          line: 261,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 31
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 25
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 28
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 38
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 61
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 51
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 58,
            column: 51
          },
          end: {
            line: 58,
            column: 52
          }
        },
        loc: {
          start: {
            line: 58,
            column: 63
          },
          end: {
            line: 64,
            column: 9
          }
        },
        line: 58
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 26
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 69
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 40
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 80
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 37
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 99
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 32
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 113
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 37
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 126
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 52
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 180
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 30
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 190
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 44
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 196
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 39
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 208
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 58
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 220
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 35
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 240
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "14": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "15": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "16": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "17": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 201,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 201,
            column: 28
          }
        }, {
          start: {
            line: 201,
            column: 32
          },
          end: {
            line: 201,
            column: 69
          }
        }],
        line: 201
      },
      "18": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "19": {
        loc: {
          start: {
            line: 260,
            column: 37
          },
          end: {
            line: 260,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 260,
            column: 122
          },
          end: {
            line: 260,
            column: 124
          }
        }, {
          start: {
            line: 260,
            column: 127
          },
          end: {
            line: 260,
            column: 133
          }
        }],
        line: 260
      },
      "20": {
        loc: {
          start: {
            line: 260,
            column: 50
          },
          end: {
            line: 260,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 50
          },
          end: {
            line: 260,
            column: 86
          }
        }, {
          start: {
            line: 260,
            column: 90
          },
          end: {
            line: 260,
            column: 103
          }
        }],
        line: 260
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-database.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-database.service.ts"],
      sourcesContent: ["import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaClient } from '@prisma/client';\nimport { AsyncLocalStorage } from 'async_hooks';\n\nexport interface TenantContext {\n  tenantId: string;\n  tenantSlug: string;\n  schema: string;\n}\n\n@Injectable()\nexport class TenantDatabaseService implements OnModuleInit, OnModuleDestroy {\n  private readonly logger = new Logger(TenantDatabaseService.name);\n  private readonly tenantConnections = new Map<string, PrismaClient>();\n  private readonly asyncLocalStorage = new AsyncLocalStorage<TenantContext>();\n  private defaultConnection: PrismaClient;\n\n  constructor(private readonly configService: ConfigService) {\n    // Conex\xE3o padr\xE3o (schema public)\n    this.defaultConnection = new PrismaClient({\n      datasources: {\n        db: {\n          url: this.configService.get<string>('DATABASE_URL'),\n        },\n      },\n      log: ['error', 'warn'],\n    });\n  }\n\n  async onModuleInit() {\n    await this.defaultConnection.$connect();\n    this.logger.log('Conex\xE3o padr\xE3o do banco estabelecida');\n  }\n\n  async onModuleDestroy() {\n    // Fechar todas as conex\xF5es\n    await this.defaultConnection.$disconnect();\n    \n    for (const [schema, connection] of this.tenantConnections) {\n      await connection.$disconnect();\n      this.logger.debug(`Conex\xE3o fechada para schema: ${schema}`);\n    }\n    \n    this.tenantConnections.clear();\n    this.logger.log('Todas as conex\xF5es do banco foram fechadas');\n  }\n\n  /**\n   * Executa c\xF3digo no contexto de um tenant espec\xEDfico\n   */\n  async runInTenantContext<T>(\n    tenantId: string,\n    tenantSlug: string,\n    callback: () => Promise<T>\n  ): Promise<T> {\n    const schema = `tenant_${tenantSlug}`;\n    const context: TenantContext = {\n      tenantId,\n      tenantSlug,\n      schema,\n    };\n\n    return this.asyncLocalStorage.run(context, async () => {\n      // Garantir que o schema existe\n      await this.ensureSchemaExists(schema);\n      \n      // Configurar search_path para o tenant\n      await this.setSearchPath(schema);\n      \n      return callback();\n    });\n  }\n\n  /**\n   * Obt\xE9m a conex\xE3o do tenant atual ou a padr\xE3o\n   */\n  getTenantConnection(): PrismaClient {\n    const context = this.asyncLocalStorage.getStore();\n    \n    if (!context) {\n      // Retorna conex\xE3o padr\xE3o se n\xE3o estiver em contexto de tenant\n      return this.defaultConnection;\n    }\n\n    return this.getOrCreateTenantConnection(context.schema);\n  }\n\n  /**\n   * Obt\xE9m ou cria uma conex\xE3o para o tenant\n   */\n  private getOrCreateTenantConnection(schema: string): PrismaClient {\n    let connection = this.tenantConnections.get(schema);\n    \n    if (!connection) {\n      connection = new PrismaClient({\n        datasources: {\n          db: {\n            url: this.configService.get<string>('DATABASE_URL'),\n          },\n        },\n        log: ['error', 'warn'],\n      });\n      \n      this.tenantConnections.set(schema, connection);\n      this.logger.debug(`Nova conex\xE3o criada para schema: ${schema}`);\n    }\n    \n    return connection;\n  }\n\n  /**\n   * Garante que o schema do tenant existe\n   */\n  private async ensureSchemaExists(schema: string): Promise<void> {\n    try {\n      await this.defaultConnection.$executeRawUnsafe(\n        `CREATE SCHEMA IF NOT EXISTS \"${schema}\"`\n      );\n      \n      // Criar tabelas espec\xEDficas do tenant se necess\xE1rio\n      await this.createTenantTables(schema);\n      \n    } catch (error) {\n      this.logger.error(`Erro ao criar schema ${schema}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Configura o search_path para o schema do tenant\n   */\n  private async setSearchPath(schema: string): Promise<void> {\n    const connection = this.getOrCreateTenantConnection(schema);\n    \n    try {\n      await connection.$executeRawUnsafe(\n        `SET search_path TO \"${schema}\", public`\n      );\n    } catch (error) {\n      this.logger.error(`Erro ao configurar search_path para ${schema}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Cria tabelas espec\xEDficas do tenant\n   */\n  private async createTenantTables(schema: string): Promise<void> {\n    const connection = this.getOrCreateTenantConnection(schema);\n    \n    try {\n      // Tabela de logs de auditoria por tenant\n      await connection.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"${schema}\".audit_logs (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          user_id UUID NOT NULL,\n          action VARCHAR(100) NOT NULL,\n          resource_type VARCHAR(100) NOT NULL,\n          resource_id UUID,\n          old_values JSONB,\n          new_values JSONB,\n          ip_address INET,\n          user_agent TEXT,\n          created_at TIMESTAMPTZ DEFAULT NOW()\n        )\n      `);\n\n      // Tabela de configura\xE7\xF5es customizadas por tenant\n      await connection.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"${schema}\".tenant_settings (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          key VARCHAR(255) UNIQUE NOT NULL,\n          value JSONB NOT NULL,\n          created_at TIMESTAMPTZ DEFAULT NOW(),\n          updated_at TIMESTAMPTZ DEFAULT NOW()\n        )\n      `);\n\n      // Tabela de cache por tenant\n      await connection.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"${schema}\".tenant_cache (\n          key VARCHAR(255) PRIMARY KEY,\n          value JSONB NOT NULL,\n          expires_at TIMESTAMPTZ NOT NULL,\n          created_at TIMESTAMPTZ DEFAULT NOW()\n        )\n      `);\n\n      // \xCDndices para performance\n      await connection.$executeRawUnsafe(`\n        CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON \"${schema}\".audit_logs(user_id);\n        CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON \"${schema}\".audit_logs(created_at);\n        CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON \"${schema}\".audit_logs(action);\n        CREATE INDEX IF NOT EXISTS idx_tenant_cache_expires_at ON \"${schema}\".tenant_cache(expires_at);\n      `);\n\n      this.logger.debug(`Tabelas do tenant criadas no schema: ${schema}`);\n    } catch (error) {\n      this.logger.error(`Erro ao criar tabelas do tenant ${schema}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Executa query com isolamento de tenant\n   */\n  async executeInTenantContext<T>(\n    tenantSlug: string,\n    query: (prisma: PrismaClient) => Promise<T>\n  ): Promise<T> {\n    const schema = `tenant_${tenantSlug}`;\n    await this.ensureSchemaExists(schema);\n    \n    const connection = this.getOrCreateTenantConnection(schema);\n    await this.setSearchPath(schema);\n    \n    return query(connection);\n  }\n\n  /**\n   * Obt\xE9m contexto atual do tenant\n   */\n  getCurrentTenantContext(): TenantContext | undefined {\n    return this.asyncLocalStorage.getStore();\n  }\n\n  /**\n   * Valida se a query est\xE1 sendo executada no contexto correto\n   */\n  validateTenantContext(expectedTenantId?: string): void {\n    const context = this.getCurrentTenantContext();\n    \n    if (!context) {\n      throw new Error('Query executada fora do contexto de tenant');\n    }\n    \n    if (expectedTenantId && context.tenantId !== expectedTenantId) {\n      throw new Error(`Contexto de tenant inv\xE1lido. Esperado: ${expectedTenantId}, Atual: ${context.tenantId}`);\n    }\n  }\n\n  /**\n   * Limpa conex\xF5es inativas\n   */\n  async cleanupInactiveConnections(): Promise<void> {\n    const maxIdleTime = 30 * 60 * 1000; // 30 minutos\n    const now = Date.now();\n    \n    for (const [schema, connection] of this.tenantConnections) {\n      // Implementar l\xF3gica de verifica\xE7\xE3o de inatividade\n      // Por simplicidade, vamos manter todas as conex\xF5es ativas\n      // Em produ\xE7\xE3o, implementar controle de tempo de inatividade\n    }\n  }\n\n  /**\n   * Migra dados entre schemas (\xFAtil para mudan\xE7as de plano)\n   */\n  async migrateTenantData(\n    fromSchema: string,\n    toSchema: string,\n    tables: string[]\n  ): Promise<void> {\n    try {\n      await this.ensureSchemaExists(toSchema);\n      \n      for (const table of tables) {\n        await this.defaultConnection.$executeRawUnsafe(`\n          INSERT INTO \"${toSchema}\".\"${table}\"\n          SELECT * FROM \"${fromSchema}\".\"${table}\"\n          ON CONFLICT DO NOTHING\n        `);\n      }\n      \n      this.logger.log(`Dados migrados de ${fromSchema} para ${toSchema}`);\n    } catch (error) {\n      this.logger.error(`Erro na migra\xE7\xE3o de ${fromSchema} para ${toSchema}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Remove schema do tenant (cuidado!)\n   */\n  async dropTenantSchema(schema: string): Promise<void> {\n    try {\n      // Fechar conex\xE3o se existir\n      const connection = this.tenantConnections.get(schema);\n      if (connection) {\n        await connection.$disconnect();\n        this.tenantConnections.delete(schema);\n      }\n      \n      // Remover schema\n      await this.defaultConnection.$executeRawUnsafe(\n        `DROP SCHEMA IF EXISTS \"${schema}\" CASCADE`\n      );\n      \n      this.logger.warn(`Schema removido: ${schema}`);\n    } catch (error) {\n      this.logger.error(`Erro ao remover schema ${schema}: ${error.message}`);\n      throw error;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ddd2f0b826b71bcf83af3f7f92a356406dd805d8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2e81lrzwpn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2e81lrzwpn();
var __decorate =
/* istanbul ignore next */
(cov_2e81lrzwpn().s[0]++,
/* istanbul ignore next */
(cov_2e81lrzwpn().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2e81lrzwpn().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_2e81lrzwpn().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_2e81lrzwpn().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_2e81lrzwpn().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_2e81lrzwpn().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_2e81lrzwpn().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_2e81lrzwpn().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_2e81lrzwpn().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_2e81lrzwpn().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_2e81lrzwpn().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().b[3][0]++;
    cov_2e81lrzwpn().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_2e81lrzwpn().b[3][1]++;
    cov_2e81lrzwpn().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_2e81lrzwpn().b[5][0]++;
        cov_2e81lrzwpn().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_2e81lrzwpn().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_2e81lrzwpn().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_2e81lrzwpn().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_2e81lrzwpn().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_2e81lrzwpn().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_2e81lrzwpn().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_2e81lrzwpn().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_2e81lrzwpn().s[9]++;
  return /* istanbul ignore next */(cov_2e81lrzwpn().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_2e81lrzwpn().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_2e81lrzwpn().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_2e81lrzwpn().s[10]++,
/* istanbul ignore next */
(cov_2e81lrzwpn().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_2e81lrzwpn().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_2e81lrzwpn().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_2e81lrzwpn().f[1]++;
  cov_2e81lrzwpn().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_2e81lrzwpn().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_2e81lrzwpn().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().b[11][0]++;
    cov_2e81lrzwpn().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_2e81lrzwpn().b[11][1]++;
  }
}));
var TenantDatabaseService_1;
var _a;
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PrismaClient } from '@prisma/client';
import { AsyncLocalStorage } from 'async_hooks';
let TenantDatabaseService =
/* istanbul ignore next */
(cov_2e81lrzwpn().s[13]++, TenantDatabaseService_1 = class TenantDatabaseService {
  configService;
  logger =
  /* istanbul ignore next */
  (cov_2e81lrzwpn().s[14]++, new Logger(TenantDatabaseService_1.name));
  tenantConnections =
  /* istanbul ignore next */
  (cov_2e81lrzwpn().s[15]++, new Map());
  asyncLocalStorage =
  /* istanbul ignore next */
  (cov_2e81lrzwpn().s[16]++, new AsyncLocalStorage());
  defaultConnection;
  constructor(configService) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[2]++;
    cov_2e81lrzwpn().s[17]++;
    this.configService = configService;
    // Conexão padrão (schema public)
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[18]++;
    this.defaultConnection = new PrismaClient({
      datasources: {
        db: {
          url: this.configService.get('DATABASE_URL')
        }
      },
      log: ['error', 'warn']
    });
  }
  async onModuleInit() {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[3]++;
    cov_2e81lrzwpn().s[19]++;
    await this.defaultConnection.$connect();
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[20]++;
    this.logger.log('Conexão padrão do banco estabelecida');
  }
  async onModuleDestroy() {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[4]++;
    cov_2e81lrzwpn().s[21]++;
    // Fechar todas as conexões
    await this.defaultConnection.$disconnect();
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[22]++;
    for (const [schema, connection] of this.tenantConnections) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[23]++;
      await connection.$disconnect();
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[24]++;
      this.logger.debug(`Conexão fechada para schema: ${schema}`);
    }
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[25]++;
    this.tenantConnections.clear();
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[26]++;
    this.logger.log('Todas as conexões do banco foram fechadas');
  }
  /**
   * Executa código no contexto de um tenant específico
   */
  async runInTenantContext(tenantId, tenantSlug, callback) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[5]++;
    const schema =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[27]++, `tenant_${tenantSlug}`);
    const context =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[28]++, {
      tenantId,
      tenantSlug,
      schema
    });
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[29]++;
    return this.asyncLocalStorage.run(context, async () => {
      /* istanbul ignore next */
      cov_2e81lrzwpn().f[6]++;
      cov_2e81lrzwpn().s[30]++;
      // Garantir que o schema existe
      await this.ensureSchemaExists(schema);
      // Configurar search_path para o tenant
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[31]++;
      await this.setSearchPath(schema);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[32]++;
      return callback();
    });
  }
  /**
   * Obtém a conexão do tenant atual ou a padrão
   */
  getTenantConnection() {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[7]++;
    const context =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[33]++, this.asyncLocalStorage.getStore());
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[34]++;
    if (!context) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().b[13][0]++;
      cov_2e81lrzwpn().s[35]++;
      // Retorna conexão padrão se não estiver em contexto de tenant
      return this.defaultConnection;
    } else
    /* istanbul ignore next */
    {
      cov_2e81lrzwpn().b[13][1]++;
    }
    cov_2e81lrzwpn().s[36]++;
    return this.getOrCreateTenantConnection(context.schema);
  }
  /**
   * Obtém ou cria uma conexão para o tenant
   */
  getOrCreateTenantConnection(schema) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[8]++;
    let connection =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[37]++, this.tenantConnections.get(schema));
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[38]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().b[14][0]++;
      cov_2e81lrzwpn().s[39]++;
      connection = new PrismaClient({
        datasources: {
          db: {
            url: this.configService.get('DATABASE_URL')
          }
        },
        log: ['error', 'warn']
      });
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[40]++;
      this.tenantConnections.set(schema, connection);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[41]++;
      this.logger.debug(`Nova conexão criada para schema: ${schema}`);
    } else
    /* istanbul ignore next */
    {
      cov_2e81lrzwpn().b[14][1]++;
    }
    cov_2e81lrzwpn().s[42]++;
    return connection;
  }
  /**
   * Garante que o schema do tenant existe
   */
  async ensureSchemaExists(schema) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[9]++;
    cov_2e81lrzwpn().s[43]++;
    try {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[44]++;
      await this.defaultConnection.$executeRawUnsafe(`CREATE SCHEMA IF NOT EXISTS "${schema}"`);
      // Criar tabelas específicas do tenant se necessário
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[45]++;
      await this.createTenantTables(schema);
    } catch (error) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[46]++;
      this.logger.error(`Erro ao criar schema ${schema}: ${error.message}`);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[47]++;
      throw error;
    }
  }
  /**
   * Configura o search_path para o schema do tenant
   */
  async setSearchPath(schema) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[10]++;
    const connection =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[48]++, this.getOrCreateTenantConnection(schema));
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[49]++;
    try {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[50]++;
      await connection.$executeRawUnsafe(`SET search_path TO "${schema}", public`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[51]++;
      this.logger.error(`Erro ao configurar search_path para ${schema}: ${error.message}`);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[52]++;
      throw error;
    }
  }
  /**
   * Cria tabelas específicas do tenant
   */
  async createTenantTables(schema) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[11]++;
    const connection =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[53]++, this.getOrCreateTenantConnection(schema));
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[54]++;
    try {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[55]++;
      // Tabela de logs de auditoria por tenant
      await connection.$executeRawUnsafe(`
        CREATE TABLE IF NOT EXISTS "${schema}".audit_logs (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id UUID NOT NULL,
          action VARCHAR(100) NOT NULL,
          resource_type VARCHAR(100) NOT NULL,
          resource_id UUID,
          old_values JSONB,
          new_values JSONB,
          ip_address INET,
          user_agent TEXT,
          created_at TIMESTAMPTZ DEFAULT NOW()
        )
      `);
      // Tabela de configurações customizadas por tenant
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[56]++;
      await connection.$executeRawUnsafe(`
        CREATE TABLE IF NOT EXISTS "${schema}".tenant_settings (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          key VARCHAR(255) UNIQUE NOT NULL,
          value JSONB NOT NULL,
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW()
        )
      `);
      // Tabela de cache por tenant
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[57]++;
      await connection.$executeRawUnsafe(`
        CREATE TABLE IF NOT EXISTS "${schema}".tenant_cache (
          key VARCHAR(255) PRIMARY KEY,
          value JSONB NOT NULL,
          expires_at TIMESTAMPTZ NOT NULL,
          created_at TIMESTAMPTZ DEFAULT NOW()
        )
      `);
      // Índices para performance
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[58]++;
      await connection.$executeRawUnsafe(`
        CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON "${schema}".audit_logs(user_id);
        CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON "${schema}".audit_logs(created_at);
        CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON "${schema}".audit_logs(action);
        CREATE INDEX IF NOT EXISTS idx_tenant_cache_expires_at ON "${schema}".tenant_cache(expires_at);
      `);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[59]++;
      this.logger.debug(`Tabelas do tenant criadas no schema: ${schema}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[60]++;
      this.logger.error(`Erro ao criar tabelas do tenant ${schema}: ${error.message}`);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[61]++;
      throw error;
    }
  }
  /**
   * Executa query com isolamento de tenant
   */
  async executeInTenantContext(tenantSlug, query) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[12]++;
    const schema =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[62]++, `tenant_${tenantSlug}`);
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[63]++;
    await this.ensureSchemaExists(schema);
    const connection =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[64]++, this.getOrCreateTenantConnection(schema));
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[65]++;
    await this.setSearchPath(schema);
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[66]++;
    return query(connection);
  }
  /**
   * Obtém contexto atual do tenant
   */
  getCurrentTenantContext() {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[13]++;
    cov_2e81lrzwpn().s[67]++;
    return this.asyncLocalStorage.getStore();
  }
  /**
   * Valida se a query está sendo executada no contexto correto
   */
  validateTenantContext(expectedTenantId) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[14]++;
    const context =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[68]++, this.getCurrentTenantContext());
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[69]++;
    if (!context) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().b[15][0]++;
      cov_2e81lrzwpn().s[70]++;
      throw new Error('Query executada fora do contexto de tenant');
    } else
    /* istanbul ignore next */
    {
      cov_2e81lrzwpn().b[15][1]++;
    }
    cov_2e81lrzwpn().s[71]++;
    if (
    /* istanbul ignore next */
    (cov_2e81lrzwpn().b[17][0]++, expectedTenantId) &&
    /* istanbul ignore next */
    (cov_2e81lrzwpn().b[17][1]++, context.tenantId !== expectedTenantId)) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().b[16][0]++;
      cov_2e81lrzwpn().s[72]++;
      throw new Error(`Contexto de tenant inválido. Esperado: ${expectedTenantId}, Atual: ${context.tenantId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2e81lrzwpn().b[16][1]++;
    }
  }
  /**
   * Limpa conexões inativas
   */
  async cleanupInactiveConnections() {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[15]++;
    const maxIdleTime =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[73]++, 30 * 60 * 1000); // 30 minutos
    const now =
    /* istanbul ignore next */
    (cov_2e81lrzwpn().s[74]++, Date.now());
    /* istanbul ignore next */
    cov_2e81lrzwpn().s[75]++;
    for (const [schema, connection] of this.tenantConnections) {
      // Implementar lógica de verificação de inatividade
      // Por simplicidade, vamos manter todas as conexões ativas
      // Em produção, implementar controle de tempo de inatividade
    }
  }
  /**
   * Migra dados entre schemas (útil para mudanças de plano)
   */
  async migrateTenantData(fromSchema, toSchema, tables) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[16]++;
    cov_2e81lrzwpn().s[76]++;
    try {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[77]++;
      await this.ensureSchemaExists(toSchema);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[78]++;
      for (const table of tables) {
        /* istanbul ignore next */
        cov_2e81lrzwpn().s[79]++;
        await this.defaultConnection.$executeRawUnsafe(`
          INSERT INTO "${toSchema}"."${table}"
          SELECT * FROM "${fromSchema}"."${table}"
          ON CONFLICT DO NOTHING
        `);
      }
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[80]++;
      this.logger.log(`Dados migrados de ${fromSchema} para ${toSchema}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[81]++;
      this.logger.error(`Erro na migração de ${fromSchema} para ${toSchema}: ${error.message}`);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[82]++;
      throw error;
    }
  }
  /**
   * Remove schema do tenant (cuidado!)
   */
  async dropTenantSchema(schema) {
    /* istanbul ignore next */
    cov_2e81lrzwpn().f[17]++;
    cov_2e81lrzwpn().s[83]++;
    try {
      // Fechar conexão se existir
      const connection =
      /* istanbul ignore next */
      (cov_2e81lrzwpn().s[84]++, this.tenantConnections.get(schema));
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[85]++;
      if (connection) {
        /* istanbul ignore next */
        cov_2e81lrzwpn().b[18][0]++;
        cov_2e81lrzwpn().s[86]++;
        await connection.$disconnect();
        /* istanbul ignore next */
        cov_2e81lrzwpn().s[87]++;
        this.tenantConnections.delete(schema);
      } else
      /* istanbul ignore next */
      {
        cov_2e81lrzwpn().b[18][1]++;
      }
      // Remover schema
      cov_2e81lrzwpn().s[88]++;
      await this.defaultConnection.$executeRawUnsafe(`DROP SCHEMA IF EXISTS "${schema}" CASCADE`);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[89]++;
      this.logger.warn(`Schema removido: ${schema}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[90]++;
      this.logger.error(`Erro ao remover schema ${schema}: ${error.message}`);
      /* istanbul ignore next */
      cov_2e81lrzwpn().s[91]++;
      throw error;
    }
  }
});
/* istanbul ignore next */
cov_2e81lrzwpn().s[92]++;
TenantDatabaseService = TenantDatabaseService_1 = __decorate([Injectable(), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_2e81lrzwpn().b[20][0]++, typeof ConfigService !== "undefined") &&
/* istanbul ignore next */
(cov_2e81lrzwpn().b[20][1]++, ConfigService)) === "function" ?
/* istanbul ignore next */
(cov_2e81lrzwpn().b[19][0]++, _a) :
/* istanbul ignore next */
(cov_2e81lrzwpn().b[19][1]++, Object)])], TenantDatabaseService);
export { TenantDatabaseService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,