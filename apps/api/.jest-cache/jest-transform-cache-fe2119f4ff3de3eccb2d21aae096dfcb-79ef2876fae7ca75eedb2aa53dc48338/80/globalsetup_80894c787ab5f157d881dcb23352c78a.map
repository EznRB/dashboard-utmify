{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\global-setup.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\global-setup.ts"],"sourcesContent":["import { execSync } from 'child_process';\nimport { createClient } from 'redis';\nimport { Client } from 'pg';\n\nexport default async function globalSetup() {\n  console.log('üöÄ Setting up test environment...');\n  \n  try {\n    // Set test environment variables\n    process.env.NODE_ENV = 'test';\n    process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://test:test@localhost:5432/utmify_test';\n    process.env.REDIS_URL = process.env.TEST_REDIS_URL || 'redis://localhost:6379/1';\n    process.env.JWT_SECRET = 'test-jwt-secret-for-testing-only';\n    process.env.LOG_LEVEL = 'error';\n    \n    // Setup test database\n    await setupTestDatabase();\n    \n    // Setup test Redis\n    await setupTestRedis();\n    \n    // Run database migrations\n    await runDatabaseMigrations();\n    \n    // Install stored procedures\n    await installStoredProcedures();\n    \n    console.log('‚úÖ Test environment setup complete');\n  } catch (error) {\n    console.error('‚ùå Failed to setup test environment:', error);\n    process.exit(1);\n  }\n}\n\nasync function setupTestDatabase() {\n  console.log('üìä Setting up test database...');\n  \n  const databaseUrl = process.env.DATABASE_URL;\n  if (!databaseUrl) {\n    throw new Error('TEST_DATABASE_URL is not set');\n  }\n  \n  try {\n    // Parse database URL\n    const url = new URL(databaseUrl);\n    const dbName = url.pathname.slice(1);\n    \n    // Connect to PostgreSQL (without specific database)\n    const adminClient = new Client({\n      host: url.hostname,\n      port: parseInt(url.port) || 5432,\n      user: url.username,\n      password: url.password,\n      database: 'postgres', // Connect to default database\n    });\n    \n    await adminClient.connect();\n    \n    // Drop test database if exists\n    try {\n      await adminClient.query(`DROP DATABASE IF EXISTS \"${dbName}\"`);\n    } catch (error) {\n      // Ignore error if database doesn't exist\n    }\n    \n    // Create test database\n    await adminClient.query(`CREATE DATABASE \"${dbName}\"`);\n    \n    await adminClient.end();\n    \n    console.log('‚úÖ Test database created successfully');\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Could not setup test database (may already exist):', error.message);\n  }\n}\n\nasync function setupTestRedis() {\n  console.log('üî¥ Setting up test Redis...');\n  \n  const redisUrl = process.env.REDIS_URL;\n  if (!redisUrl) {\n    throw new Error('TEST_REDIS_URL is not set');\n  }\n  \n  try {\n    const client = createClient({ url: redisUrl });\n    await client.connect();\n    \n    // Clear test Redis database\n    await client.flushDb();\n    \n    await client.disconnect();\n    \n    console.log('‚úÖ Test Redis setup complete');\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Could not setup test Redis:', error.message);\n  }\n}\n\nasync function runDatabaseMigrations() {\n  console.log('üîÑ Running database migrations...');\n  \n  try {\n    // Run Prisma migrations\n    execSync('npx prisma migrate deploy', {\n      stdio: 'inherit',\n      env: {\n        ...process.env,\n        DATABASE_URL: process.env.DATABASE_URL,\n      },\n    });\n    \n    // Generate Prisma client\n    execSync('npx prisma generate', {\n      stdio: 'inherit',\n    });\n    \n    console.log('‚úÖ Database migrations completed');\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Could not run migrations:', error.message);\n  }\n}\n\nasync function installStoredProcedures() {\n  console.log('üîß Installing stored procedures...');\n  \n  try {\n    const client = new Client({ connectionString: process.env.DATABASE_URL });\n    await client.connect();\n    \n    // Read and execute stored procedures SQL\n    const fs = require('fs');\n    const path = require('path');\n    \n    const sqlPath = path.join(__dirname, '../../prisma/migrations/001_create_metrics_procedures.sql');\n    \n    if (fs.existsSync(sqlPath)) {\n      const sql = fs.readFileSync(sqlPath, 'utf8');\n      await client.query(sql);\n      console.log('‚úÖ Stored procedures installed');\n    } else {\n      console.warn('‚ö†Ô∏è Stored procedures SQL file not found');\n    }\n    \n    await client.end();\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Could not install stored procedures:', error.message);\n  }\n}\n\n// Health check functions\nexport async function checkDatabaseHealth(): Promise<boolean> {\n  try {\n    const client = new Client({ connectionString: process.env.DATABASE_URL });\n    await client.connect();\n    await client.query('SELECT 1');\n    await client.end();\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function checkRedisHealth(): Promise<boolean> {\n  try {\n    const client = createClient({ url: process.env.REDIS_URL });\n    await client.connect();\n    await client.ping();\n    await client.disconnect();\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// Utility functions for tests\nexport async function seedTestData() {\n  console.log('üå± Seeding test data...');\n  \n  try {\n    const { PrismaClient } = require('@prisma/client');\n    const prisma = new PrismaClient();\n    \n    // Create test organization\n    const organization = await prisma.organization.upsert({\n      where: { id: '123e4567-e89b-12d3-a456-426614174001' },\n      update: {},\n      create: {\n        id: '123e4567-e89b-12d3-a456-426614174001',\n        name: 'Test Organization',\n        slug: 'test-org',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n    \n    // Create test user\n    const user = await prisma.user.upsert({\n      where: { id: '123e4567-e89b-12d3-a456-426614174000' },\n      update: {},\n      create: {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'test@example.com',\n        name: 'Test User',\n        organizationId: organization.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n    \n    // Create test campaign\n    const campaign = await prisma.campaign.upsert({\n      where: { id: '123e4567-e89b-12d3-a456-426614174002' },\n      update: {},\n      create: {\n        id: '123e4567-e89b-12d3-a456-426614174002',\n        name: 'Test Campaign',\n        organizationId: organization.id,\n        status: 'ACTIVE',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n    \n    // Create test metrics data\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    await prisma.metricsDaily.upsert({\n      where: {\n        campaignId_date: {\n          campaignId: campaign.id,\n          date: today,\n        },\n      },\n      update: {},\n      create: {\n        campaignId: campaign.id,\n        date: today,\n        impressions: 10000,\n        clicks: 500,\n        conversions: 50,\n        revenue: 5000,\n        adSpend: 2000,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n    \n    await prisma.$disconnect();\n    \n    console.log('‚úÖ Test data seeded successfully');\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Could not seed test data:', error.message);\n  }\n}\n\nexport async function cleanupTestData() {\n  console.log('üßπ Cleaning up test data...');\n  \n  try {\n    const { PrismaClient } = require('@prisma/client');\n    const prisma = new PrismaClient();\n    \n    // Delete in reverse order of dependencies\n    await prisma.metricsDaily.deleteMany({});\n    await prisma.metricsHourly.deleteMany({});\n    await prisma.conversionEvent.deleteMany({});\n    await prisma.funnelStage.deleteMany({});\n    await prisma.campaign.deleteMany({});\n    await prisma.user.deleteMany({});\n    await prisma.organization.deleteMany({});\n    \n    await prisma.$disconnect();\n    \n    console.log('‚úÖ Test data cleaned up');\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Could not cleanup test data:', error.message);\n  }\n}\n\n// Export configuration\nexport const testEnvironmentConfig = {\n  database: {\n    url: process.env.DATABASE_URL,\n    maxConnections: 10,\n    timeout: 30000,\n  },\n  redis: {\n    url: process.env.REDIS_URL,\n    maxRetries: 3,\n    timeout: 5000,\n  },\n  api: {\n    port: process.env.TEST_PORT || 3001,\n    timeout: 30000,\n  },\n};"],"version":3}