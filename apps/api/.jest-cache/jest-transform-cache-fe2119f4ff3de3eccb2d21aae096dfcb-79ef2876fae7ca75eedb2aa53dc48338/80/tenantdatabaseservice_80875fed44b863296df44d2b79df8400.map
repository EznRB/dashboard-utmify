{"version":3,"names":["cov_2e81lrzwpn","actualCoverage","Injectable","Logger","ConfigService","PrismaClient","AsyncLocalStorage","TenantDatabaseService","s","TenantDatabaseService_1","configService","logger","name","tenantConnections","Map","asyncLocalStorage","defaultConnection","constructor","f","datasources","db","url","get","log","onModuleInit","$connect","onModuleDestroy","$disconnect","schema","connection","debug","clear","runInTenantContext","tenantId","tenantSlug","callback","context","run","ensureSchemaExists","setSearchPath","getTenantConnection","getStore","b","getOrCreateTenantConnection","set","$executeRawUnsafe","createTenantTables","error","message","executeInTenantContext","query","getCurrentTenantContext","validateTenantContext","expectedTenantId","Error","cleanupInactiveConnections","maxIdleTime","now","Date","migrateTenantData","fromSchema","toSchema","tables","table","dropTenantSchema","delete","warn","__decorate","_a","Object"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-database.service.ts"],"sourcesContent":["import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaClient } from '@prisma/client';\nimport { AsyncLocalStorage } from 'async_hooks';\n\nexport interface TenantContext {\n  tenantId: string;\n  tenantSlug: string;\n  schema: string;\n}\n\n@Injectable()\nexport class TenantDatabaseService implements OnModuleInit, OnModuleDestroy {\n  private readonly logger = new Logger(TenantDatabaseService.name);\n  private readonly tenantConnections = new Map<string, PrismaClient>();\n  private readonly asyncLocalStorage = new AsyncLocalStorage<TenantContext>();\n  private defaultConnection: PrismaClient;\n\n  constructor(private readonly configService: ConfigService) {\n    // Conexão padrão (schema public)\n    this.defaultConnection = new PrismaClient({\n      datasources: {\n        db: {\n          url: this.configService.get<string>('DATABASE_URL'),\n        },\n      },\n      log: ['error', 'warn'],\n    });\n  }\n\n  async onModuleInit() {\n    await this.defaultConnection.$connect();\n    this.logger.log('Conexão padrão do banco estabelecida');\n  }\n\n  async onModuleDestroy() {\n    // Fechar todas as conexões\n    await this.defaultConnection.$disconnect();\n    \n    for (const [schema, connection] of this.tenantConnections) {\n      await connection.$disconnect();\n      this.logger.debug(`Conexão fechada para schema: ${schema}`);\n    }\n    \n    this.tenantConnections.clear();\n    this.logger.log('Todas as conexões do banco foram fechadas');\n  }\n\n  /**\n   * Executa código no contexto de um tenant específico\n   */\n  async runInTenantContext<T>(\n    tenantId: string,\n    tenantSlug: string,\n    callback: () => Promise<T>\n  ): Promise<T> {\n    const schema = `tenant_${tenantSlug}`;\n    const context: TenantContext = {\n      tenantId,\n      tenantSlug,\n      schema,\n    };\n\n    return this.asyncLocalStorage.run(context, async () => {\n      // Garantir que o schema existe\n      await this.ensureSchemaExists(schema);\n      \n      // Configurar search_path para o tenant\n      await this.setSearchPath(schema);\n      \n      return callback();\n    });\n  }\n\n  /**\n   * Obtém a conexão do tenant atual ou a padrão\n   */\n  getTenantConnection(): PrismaClient {\n    const context = this.asyncLocalStorage.getStore();\n    \n    if (!context) {\n      // Retorna conexão padrão se não estiver em contexto de tenant\n      return this.defaultConnection;\n    }\n\n    return this.getOrCreateTenantConnection(context.schema);\n  }\n\n  /**\n   * Obtém ou cria uma conexão para o tenant\n   */\n  private getOrCreateTenantConnection(schema: string): PrismaClient {\n    let connection = this.tenantConnections.get(schema);\n    \n    if (!connection) {\n      connection = new PrismaClient({\n        datasources: {\n          db: {\n            url: this.configService.get<string>('DATABASE_URL'),\n          },\n        },\n        log: ['error', 'warn'],\n      });\n      \n      this.tenantConnections.set(schema, connection);\n      this.logger.debug(`Nova conexão criada para schema: ${schema}`);\n    }\n    \n    return connection;\n  }\n\n  /**\n   * Garante que o schema do tenant existe\n   */\n  private async ensureSchemaExists(schema: string): Promise<void> {\n    try {\n      await this.defaultConnection.$executeRawUnsafe(\n        `CREATE SCHEMA IF NOT EXISTS \"${schema}\"`\n      );\n      \n      // Criar tabelas específicas do tenant se necessário\n      await this.createTenantTables(schema);\n      \n    } catch (error) {\n      this.logger.error(`Erro ao criar schema ${schema}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Configura o search_path para o schema do tenant\n   */\n  private async setSearchPath(schema: string): Promise<void> {\n    const connection = this.getOrCreateTenantConnection(schema);\n    \n    try {\n      await connection.$executeRawUnsafe(\n        `SET search_path TO \"${schema}\", public`\n      );\n    } catch (error) {\n      this.logger.error(`Erro ao configurar search_path para ${schema}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Cria tabelas específicas do tenant\n   */\n  private async createTenantTables(schema: string): Promise<void> {\n    const connection = this.getOrCreateTenantConnection(schema);\n    \n    try {\n      // Tabela de logs de auditoria por tenant\n      await connection.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"${schema}\".audit_logs (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          user_id UUID NOT NULL,\n          action VARCHAR(100) NOT NULL,\n          resource_type VARCHAR(100) NOT NULL,\n          resource_id UUID,\n          old_values JSONB,\n          new_values JSONB,\n          ip_address INET,\n          user_agent TEXT,\n          created_at TIMESTAMPTZ DEFAULT NOW()\n        )\n      `);\n\n      // Tabela de configurações customizadas por tenant\n      await connection.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"${schema}\".tenant_settings (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          key VARCHAR(255) UNIQUE NOT NULL,\n          value JSONB NOT NULL,\n          created_at TIMESTAMPTZ DEFAULT NOW(),\n          updated_at TIMESTAMPTZ DEFAULT NOW()\n        )\n      `);\n\n      // Tabela de cache por tenant\n      await connection.$executeRawUnsafe(`\n        CREATE TABLE IF NOT EXISTS \"${schema}\".tenant_cache (\n          key VARCHAR(255) PRIMARY KEY,\n          value JSONB NOT NULL,\n          expires_at TIMESTAMPTZ NOT NULL,\n          created_at TIMESTAMPTZ DEFAULT NOW()\n        )\n      `);\n\n      // Índices para performance\n      await connection.$executeRawUnsafe(`\n        CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON \"${schema}\".audit_logs(user_id);\n        CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON \"${schema}\".audit_logs(created_at);\n        CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON \"${schema}\".audit_logs(action);\n        CREATE INDEX IF NOT EXISTS idx_tenant_cache_expires_at ON \"${schema}\".tenant_cache(expires_at);\n      `);\n\n      this.logger.debug(`Tabelas do tenant criadas no schema: ${schema}`);\n    } catch (error) {\n      this.logger.error(`Erro ao criar tabelas do tenant ${schema}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Executa query com isolamento de tenant\n   */\n  async executeInTenantContext<T>(\n    tenantSlug: string,\n    query: (prisma: PrismaClient) => Promise<T>\n  ): Promise<T> {\n    const schema = `tenant_${tenantSlug}`;\n    await this.ensureSchemaExists(schema);\n    \n    const connection = this.getOrCreateTenantConnection(schema);\n    await this.setSearchPath(schema);\n    \n    return query(connection);\n  }\n\n  /**\n   * Obtém contexto atual do tenant\n   */\n  getCurrentTenantContext(): TenantContext | undefined {\n    return this.asyncLocalStorage.getStore();\n  }\n\n  /**\n   * Valida se a query está sendo executada no contexto correto\n   */\n  validateTenantContext(expectedTenantId?: string): void {\n    const context = this.getCurrentTenantContext();\n    \n    if (!context) {\n      throw new Error('Query executada fora do contexto de tenant');\n    }\n    \n    if (expectedTenantId && context.tenantId !== expectedTenantId) {\n      throw new Error(`Contexto de tenant inválido. Esperado: ${expectedTenantId}, Atual: ${context.tenantId}`);\n    }\n  }\n\n  /**\n   * Limpa conexões inativas\n   */\n  async cleanupInactiveConnections(): Promise<void> {\n    const maxIdleTime = 30 * 60 * 1000; // 30 minutos\n    const now = Date.now();\n    \n    for (const [schema, connection] of this.tenantConnections) {\n      // Implementar lógica de verificação de inatividade\n      // Por simplicidade, vamos manter todas as conexões ativas\n      // Em produção, implementar controle de tempo de inatividade\n    }\n  }\n\n  /**\n   * Migra dados entre schemas (útil para mudanças de plano)\n   */\n  async migrateTenantData(\n    fromSchema: string,\n    toSchema: string,\n    tables: string[]\n  ): Promise<void> {\n    try {\n      await this.ensureSchemaExists(toSchema);\n      \n      for (const table of tables) {\n        await this.defaultConnection.$executeRawUnsafe(`\n          INSERT INTO \"${toSchema}\".\"${table}\"\n          SELECT * FROM \"${fromSchema}\".\"${table}\"\n          ON CONFLICT DO NOTHING\n        `);\n      }\n      \n      this.logger.log(`Dados migrados de ${fromSchema} para ${toSchema}`);\n    } catch (error) {\n      this.logger.error(`Erro na migração de ${fromSchema} para ${toSchema}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Remove schema do tenant (cuidado!)\n   */\n  async dropTenantSchema(schema: string): Promise<void> {\n    try {\n      // Fechar conexão se existir\n      const connection = this.tenantConnections.get(schema);\n      if (connection) {\n        await connection.$disconnect();\n        this.tenantConnections.delete(schema);\n      }\n      \n      // Remover schema\n      await this.defaultConnection.$executeRawUnsafe(\n        `DROP SCHEMA IF EXISTS \"${schema}\" CASCADE`\n      );\n      \n      this.logger.warn(`Schema removido: ${schema}`);\n    } catch (error) {\n      this.logger.error(`Erro ao remover schema ${schema}: ${error.message}`);\n      throw error;\n    }\n  }\n}"],"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","ignoreList":[]}