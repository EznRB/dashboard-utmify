{"version":3,"names":["cov_99pzqqwkf","actualCoverage","Sentry","ProfilingIntegration","SENTRY_DSN","s","process","env","ENVIRONMENT","b","NODE_ENV","RELEASE","APP_VERSION","init","dsn","environment","release","tracesSampleRate","profilesSampleRate","integrations","Integrations","Http","tracing","Express","app","undefined","beforeSend","event","hint","f","error","originalException","message","includes","debug","initialScope","tags","component","sentryPlugin","fastify","addHook","request","reply","transaction","startTransaction","name","method","url","op","sentryTransaction","user","setUser","id","email","setHttpStatus","statusCode","setTag","setStatus","finish","setErrorHandler","withScope","scope","setContext","headers","query","params","captureException","status","send","stack","reportError","context","reportMessage","level","captureMessage","setUserContext","addBreadcrumb","category","data","timestamp","Date","now","measurePerformance","operation","result","monitorDatabaseQuery","queryName","span","getCurrentHub","getScope","getTransaction","startChild","description"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\lib\\sentry.ts"],"sourcesContent":["import * as Sentry from '@sentry/node';\nimport { ProfilingIntegration } from '@sentry/profiling-node';\nimport type { FastifyInstance } from 'fastify';\n\nconst SENTRY_DSN = process.env.SENTRY_DSN;\nconst ENVIRONMENT = process.env.NODE_ENV || 'development';\nconst RELEASE = process.env.APP_VERSION || '1.0.0';\n\n// Initialize Sentry\nSentry.init({\n  dsn: SENTRY_DSN,\n  environment: ENVIRONMENT,\n  release: RELEASE,\n  \n  // Performance Monitoring\n  tracesSampleRate: ENVIRONMENT === 'production' ? 0.1 : 1.0,\n  \n  // Profiling\n  profilesSampleRate: ENVIRONMENT === 'production' ? 0.1 : 1.0,\n  \n  integrations: [\n    // Add profiling integration\n    new ProfilingIntegration(),\n    // Add HTTP integration\n    new Sentry.Integrations.Http({ tracing: true }),\n    // Add Express integration for better request tracking\n    new Sentry.Integrations.Express({ app: undefined }),\n  ],\n  \n  // Error Filtering\n  beforeSend(event, hint) {\n    // Filter out known non-critical errors\n    const error = hint.originalException;\n    \n    if (error && typeof error === 'object' && 'message' in error) {\n      const message = error.message as string;\n      \n      // Filter out connection errors that are not actionable\n      if (message.includes('ECONNRESET') || \n          message.includes('ENOTFOUND') ||\n          message.includes('ETIMEDOUT')) {\n        return null;\n      }\n    }\n    \n    return event;\n  },\n  \n  // Debug mode for development\n  debug: ENVIRONMENT === 'development',\n  \n  // Set initial scope\n  initialScope: {\n    tags: {\n      component: 'api-server',\n    },\n  },\n});\n\n// Fastify plugin for Sentry integration\nexport const sentryPlugin = async (fastify: FastifyInstance) => {\n  // Add request tracing\n  fastify.addHook('onRequest', async (request, reply) => {\n    const transaction = Sentry.startTransaction({\n      name: `${request.method} ${request.url}`,\n      op: 'http.server',\n    });\n    \n    // Store transaction in request context\n    request.sentryTransaction = transaction;\n    \n    // Set user context if available\n    if (request.user) {\n      Sentry.setUser({\n        id: request.user.id,\n        email: request.user.email,\n      });\n    }\n  });\n  \n  // Add response tracking\n  fastify.addHook('onResponse', async (request, reply) => {\n    const transaction = request.sentryTransaction;\n    if (transaction) {\n      transaction.setHttpStatus(reply.statusCode);\n      transaction.setTag('http.status_code', reply.statusCode);\n      \n      if (reply.statusCode >= 400) {\n        transaction.setStatus('internal_error');\n      } else {\n        transaction.setStatus('ok');\n      }\n      \n      transaction.finish();\n    }\n  });\n  \n  // Add error handling\n  fastify.setErrorHandler(async (error, request, reply) => {\n    // Report error to Sentry\n    Sentry.withScope((scope) => {\n      scope.setTag('component', 'api-error-handler');\n      scope.setContext('request', {\n        method: request.method,\n        url: request.url,\n        headers: request.headers,\n        query: request.query,\n        params: request.params,\n      });\n      \n      if (request.user) {\n        scope.setUser({\n          id: request.user.id,\n          email: request.user.email,\n        });\n      }\n      \n      Sentry.captureException(error);\n    });\n    \n    // Set transaction status\n    const transaction = request.sentryTransaction;\n    if (transaction) {\n      transaction.setStatus('internal_error');\n    }\n    \n    // Return appropriate error response\n    const statusCode = error.statusCode || 500;\n    const message = ENVIRONMENT === 'production' && statusCode === 500 \n      ? 'Internal Server Error' \n      : error.message;\n    \n    reply.status(statusCode).send({\n      error: true,\n      message,\n      statusCode,\n      ...(ENVIRONMENT === 'development' && { stack: error.stack }),\n    });\n  });\n};\n\n// Custom error reporting functions\nexport const reportError = (error: Error, context?: Record<string, any>) => {\n  Sentry.withScope((scope) => {\n    if (context) {\n      scope.setContext('additional_info', context);\n    }\n    Sentry.captureException(error);\n  });\n};\n\nexport const reportMessage = (message: string, level: 'info' | 'warning' | 'error' = 'info') => {\n  Sentry.captureMessage(message, level);\n};\n\nexport const setUserContext = (user: {\n  id: string;\n  email?: string;\n  username?: string;\n}) => {\n  Sentry.setUser(user);\n};\n\nexport const addBreadcrumb = (message: string, category?: string, data?: Record<string, any>) => {\n  Sentry.addBreadcrumb({\n    message,\n    category: category || 'custom',\n    data,\n    timestamp: Date.now() / 1000,\n  });\n};\n\n// Performance monitoring helpers\nexport const startTransaction = (name: string, op: string) => {\n  return Sentry.startTransaction({ name, op });\n};\n\nexport const measurePerformance = async <T>(\n  name: string,\n  operation: () => Promise<T>\n): Promise<T> => {\n  const transaction = Sentry.startTransaction({\n    name,\n    op: 'custom',\n  });\n  \n  try {\n    const result = await operation();\n    transaction.setStatus('ok');\n    return result;\n  } catch (error) {\n    transaction.setStatus('internal_error');\n    throw error;\n  } finally {\n    transaction.finish();\n  }\n};\n\n// Database query monitoring\nexport const monitorDatabaseQuery = async <T>(\n  queryName: string,\n  query: () => Promise<T>\n): Promise<T> => {\n  const span = Sentry.getCurrentHub().getScope()?.getTransaction()?.startChild({\n    op: 'db.query',\n    description: queryName,\n  });\n  \n  try {\n    const result = await query();\n    span?.setStatus('ok');\n    return result;\n  } catch (error) {\n    span?.setStatus('internal_error');\n    throw error;\n  } finally {\n    span?.finish();\n  }\n};\n\nexport default Sentry;\n\n// Extend Fastify request interface\ndeclare module 'fastify' {\n  interface FastifyRequest {\n    sentryTransaction?: any;\n  }\n}"],"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","ignoreList":[]}