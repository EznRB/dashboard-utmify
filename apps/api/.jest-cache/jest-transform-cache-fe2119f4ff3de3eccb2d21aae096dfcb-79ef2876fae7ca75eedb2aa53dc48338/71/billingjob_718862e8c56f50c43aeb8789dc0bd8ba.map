{"version":3,"names":["cov_dwccubu1a","actualCoverage","BillingAdvancedService","PrismaService","logger","SubscriptionStatus","InvoiceStatus","BillingJobProcessor","billingAdvancedService","prisma","constructor","f","s","process","job","type","organizationId","invoiceId","data","info","jobId","id","b","processExpiringTrials","processDunningForInvoice","processAllFailedInvoices","cleanupOldUsageRecords","Error","error","expiredTrials","subscription","findMany","where","status","TRIALING","trialEnd","lt","Date","deletedAt","include","organization","stripe","require","env","STRIPE_SECRET_KEY","stripeSubscription","subscriptions","retrieve","stripeSubscriptionId","update","mapStripeStatus","currentPeriodStart","current_period_start","currentPeriodEnd","current_period_end","subscriptionId","oldStatus","newStatus","processDunning","failedInvoices","invoice","FAILED","createdAt","gte","now","Promise","resolve","setTimeout","length","cutoffDate","setMonth","getMonth","result","usageRecord","deleteMany","timestamp","count","syncSubscriptionStatuses","activeSubscriptions","in","ACTIVE","PAST_DUE","syncedCount","errorCount","mappedStatus","cancelAtPeriodEnd","cancel_at_period_end","canceledAt","canceled_at","total","synced","errors","generateUsageReports","organizations","isActive","some","currentUsage","getUsageMetrics","previousUsage","current","metrics","previous","stripeStatus","statusMap","active","canceled","CANCELED","incomplete","INCOMPLETE","incomplete_expired","INCOMPLETE_EXPIRED","past_due","trialing","unpaid","UNPAID","processBillingJob","processor","processExpiringTrialsCron","processDunningCron","syncSubscriptionsCron","generateUsageReportsCron"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\billing.job.ts"],"sourcesContent":["import { Job } from 'bull';\nimport { BillingAdvancedService } from '../services/billing-advanced.service';\nimport { PrismaService } from '../database/prisma.service';\nimport { logger } from '../utils/logger';\nimport { SubscriptionStatus, InvoiceStatus } from '@prisma/client';\n\nexport interface BillingJobData {\n  type: 'process_expiring_trials' | 'process_dunning' | 'cleanup_usage_records';\n  organizationId?: string;\n  invoiceId?: string;\n}\n\nexport class BillingJobProcessor {\n  private billingAdvancedService: BillingAdvancedService;\n  private prisma: PrismaService;\n\n  constructor() {\n    this.billingAdvancedService = new BillingAdvancedService();\n    this.prisma = new PrismaService();\n  }\n\n  async process(job: Job<BillingJobData>): Promise<void> {\n    const { type, organizationId, invoiceId } = job.data;\n\n    logger.info(`Processing billing job: ${type}`, {\n      jobId: job.id,\n      organizationId,\n      invoiceId,\n    });\n\n    try {\n      switch (type) {\n        case 'process_expiring_trials':\n          await this.processExpiringTrials();\n          break;\n\n        case 'process_dunning':\n          if (invoiceId) {\n            await this.processDunningForInvoice(invoiceId);\n          } else {\n            await this.processAllFailedInvoices();\n          }\n          break;\n\n        case 'cleanup_usage_records':\n          await this.cleanupOldUsageRecords();\n          break;\n\n        default:\n          throw new Error(`Unknown billing job type: ${type}`);\n      }\n\n      logger.info(`Billing job completed: ${type}`, { jobId: job.id });\n    } catch (error) {\n      logger.error(`Billing job failed: ${type}`, error, { jobId: job.id });\n      throw error;\n    }\n  }\n\n  /**\n   * Process expiring trials\n   */\n  private async processExpiringTrials(): Promise<void> {\n    logger.info('Processing expiring trials...');\n    \n    await this.billingAdvancedService.processExpiringTrials();\n    \n    // Also check for trials that have already expired but subscription is still trialing\n    const expiredTrials = await this.prisma.subscription.findMany({\n      where: {\n        status: SubscriptionStatus.TRIALING,\n        trialEnd: {\n          lt: new Date(),\n        },\n        deletedAt: null,\n      },\n      include: { organization: true },\n    });\n\n    for (const subscription of expiredTrials) {\n      try {\n        // Check Stripe subscription status\n        const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n        const stripeSubscription = await stripe.subscriptions.retrieve(\n          subscription.stripeSubscriptionId\n        );\n\n        // Update local status to match Stripe\n        if (stripeSubscription.status !== 'trialing') {\n          await this.prisma.subscription.update({\n            where: { id: subscription.id },\n            data: {\n              status: this.mapStripeStatus(stripeSubscription.status),\n              currentPeriodStart: new Date(stripeSubscription.current_period_start * 1000),\n              currentPeriodEnd: new Date(stripeSubscription.current_period_end * 1000),\n            },\n          });\n\n          logger.info(`Updated expired trial subscription status`, {\n            subscriptionId: subscription.id,\n            oldStatus: 'TRIALING',\n            newStatus: stripeSubscription.status,\n          });\n        }\n      } catch (error) {\n        logger.error(`Error updating expired trial ${subscription.id}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Process dunning for a specific invoice\n   */\n  private async processDunningForInvoice(invoiceId: string): Promise<void> {\n    logger.info(`Processing dunning for invoice: ${invoiceId}`);\n    \n    await this.billingAdvancedService.processDunning(invoiceId);\n  }\n\n  /**\n   * Process dunning for all failed invoices\n   */\n  private async processAllFailedInvoices(): Promise<void> {\n    logger.info('Processing dunning for all failed invoices...');\n    \n    const failedInvoices = await this.prisma.invoice.findMany({\n      where: {\n        status: InvoiceStatus.FAILED,\n        createdAt: {\n          gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\n        },\n      },\n      include: {\n        subscription: {\n          include: { organization: true },\n        },\n      },\n    });\n\n    for (const invoice of failedInvoices) {\n      try {\n        await this.billingAdvancedService.processDunning(invoice.id);\n        \n        // Add delay between processing to avoid rate limits\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        logger.error(`Error processing dunning for invoice ${invoice.id}:`, error);\n      }\n    }\n\n    logger.info(`Processed dunning for ${failedInvoices.length} failed invoices`);\n  }\n\n  /**\n   * Cleanup old usage records (older than 12 months)\n   */\n  private async cleanupOldUsageRecords(): Promise<void> {\n    logger.info('Cleaning up old usage records...');\n    \n    const cutoffDate = new Date();\n    cutoffDate.setMonth(cutoffDate.getMonth() - 12);\n\n    const result = await this.prisma.usageRecord.deleteMany({\n      where: {\n        timestamp: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    logger.info(`Cleaned up ${result.count} old usage records`, {\n      cutoffDate,\n    });\n  }\n\n  /**\n   * Sync subscription statuses with Stripe\n   */\n  async syncSubscriptionStatuses(): Promise<void> {\n    logger.info('Syncing subscription statuses with Stripe...');\n    \n    const activeSubscriptions = await this.prisma.subscription.findMany({\n      where: {\n        status: {\n          in: [SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIALING, SubscriptionStatus.PAST_DUE],\n        },\n        deletedAt: null,\n      },\n    });\n\n    const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n    let syncedCount = 0;\n    let errorCount = 0;\n\n    for (const subscription of activeSubscriptions) {\n      try {\n        const stripeSubscription = await stripe.subscriptions.retrieve(\n          subscription.stripeSubscriptionId\n        );\n\n        const mappedStatus = this.mapStripeStatus(stripeSubscription.status);\n        \n        if (mappedStatus !== subscription.status) {\n          await this.prisma.subscription.update({\n            where: { id: subscription.id },\n            data: {\n              status: mappedStatus,\n              currentPeriodStart: new Date(stripeSubscription.current_period_start * 1000),\n              currentPeriodEnd: new Date(stripeSubscription.current_period_end * 1000),\n              cancelAtPeriodEnd: stripeSubscription.cancel_at_period_end,\n              canceledAt: stripeSubscription.canceled_at \n                ? new Date(stripeSubscription.canceled_at * 1000) \n                : null,\n            },\n          });\n\n          syncedCount++;\n          logger.info(`Synced subscription status`, {\n            subscriptionId: subscription.id,\n            oldStatus: subscription.status,\n            newStatus: mappedStatus,\n          });\n        }\n\n        // Add delay to avoid rate limits\n        await new Promise(resolve => setTimeout(resolve, 100));\n      } catch (error) {\n        errorCount++;\n        logger.error(`Error syncing subscription ${subscription.id}:`, error);\n      }\n    }\n\n    logger.info(`Subscription sync completed`, {\n      total: activeSubscriptions.length,\n      synced: syncedCount,\n      errors: errorCount,\n    });\n  }\n\n  /**\n   * Generate usage reports for organizations\n   */\n  async generateUsageReports(): Promise<void> {\n    logger.info('Generating usage reports...');\n    \n    const organizations = await this.prisma.organization.findMany({\n      where: {\n        isActive: true,\n        subscription: {\n          some: {\n            status: {\n              in: [SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIALING],\n            },\n            deletedAt: null,\n          },\n        },\n      },\n      include: {\n        subscription: {\n          where: {\n            status: {\n              in: [SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIALING],\n            },\n            deletedAt: null,\n          },\n        },\n      },\n    });\n\n    for (const organization of organizations) {\n      try {\n        const currentUsage = await this.billingAdvancedService.getUsageMetrics(\n          organization.id,\n          'current'\n        );\n        \n        const previousUsage = await this.billingAdvancedService.getUsageMetrics(\n          organization.id,\n          'previous'\n        );\n\n        // TODO: Send usage report email or store in database\n        logger.info(`Usage report generated for organization ${organization.id}`, {\n          current: currentUsage.metrics,\n          previous: previousUsage.metrics,\n        });\n      } catch (error) {\n        logger.error(`Error generating usage report for ${organization.id}:`, error);\n      }\n    }\n  }\n\n  private mapStripeStatus(stripeStatus: string): SubscriptionStatus {\n    const statusMap: Record<string, SubscriptionStatus> = {\n      active: SubscriptionStatus.ACTIVE,\n      canceled: SubscriptionStatus.CANCELED,\n      incomplete: SubscriptionStatus.INCOMPLETE,\n      incomplete_expired: SubscriptionStatus.INCOMPLETE_EXPIRED,\n      past_due: SubscriptionStatus.PAST_DUE,\n      trialing: SubscriptionStatus.TRIALING,\n      unpaid: SubscriptionStatus.UNPAID,\n    };\n\n    return statusMap[stripeStatus] || SubscriptionStatus.INCOMPLETE;\n  }\n}\n\n// Export job processor function for Bull queue\nexport async function processBillingJob(job: Job<BillingJobData>): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.process(job);\n}\n\n// Export cron job functions\nexport async function processExpiringTrialsCron(): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.processExpiringTrials();\n}\n\nexport async function processDunningCron(): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.processAllFailedInvoices();\n}\n\nexport async function syncSubscriptionsCron(): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.syncSubscriptionStatuses();\n}\n\nexport async function generateUsageReportsCron(): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.generateUsageReports();\n}"],"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","ignoreList":[]}