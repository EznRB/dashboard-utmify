10e75a7123fd24bb98efae45ae35cb98
/* istanbul ignore next */
function cov_dwccubu1a() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\billing.job.ts";
  var hash = "023fdd1eefc0a3ddc6ea3a7b076fd5b28fc5c551";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\billing.job.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "1": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "2": {
        start: {
          line: 13,
          column: 52
        },
        end: {
          line: 13,
          column: 60
        }
      },
      "3": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 18,
          column: 11
        }
      },
      "4": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "5": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "6": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 55
        }
      },
      "7": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 26
        }
      },
      "8": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 30,
          column: 21
        }
      },
      "9": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 71
        }
      },
      "10": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 62
        }
      },
      "11": {
        start: {
          line: 31,
          column: 20
        },
        end: {
          line: 31,
          column: 26
        }
      },
      "12": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 56
        }
      },
      "13": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 26
        }
      },
      "14": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 73
        }
      },
      "15": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 77
        }
      },
      "16": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 82
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 24
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 53
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 66
        }
      },
      "20": {
        start: {
          line: 52,
          column: 30
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "21": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "22": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "23": {
        start: {
          line: 65,
          column: 31
        },
        end: {
          line: 65,
          column: 79
        }
      },
      "24": {
        start: {
          line: 66,
          column: 43
        },
        end: {
          line: 66,
          column: 113
        }
      },
      "25": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 82,
          column: 17
        }
      },
      "26": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 76,
          column: 23
        }
      },
      "27": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 81,
          column: 23
        }
      },
      "28": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 88
        }
      },
      "29": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 68
        }
      },
      "30": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 68
        }
      },
      "31": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 69
        }
      },
      "32": {
        start: {
          line: 101,
          column: 31
        },
        end: {
          line: 113,
          column: 10
        }
      },
      "33": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "34": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "35": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 77
        }
      },
      "36": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 72
        }
      },
      "37": {
        start: {
          line: 118,
          column: 45
        },
        end: {
          line: 118,
          column: 70
        }
      },
      "38": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 91
        }
      },
      "39": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 86
        }
      },
      "40": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 56
        }
      },
      "41": {
        start: {
          line: 131,
          column: 27
        },
        end: {
          line: 131,
          column: 37
        }
      },
      "42": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "43": {
        start: {
          line: 133,
          column: 23
        },
        end: {
          line: 139,
          column: 10
        }
      },
      "44": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 11
        }
      },
      "45": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 68
        }
      },
      "46": {
        start: {
          line: 149,
          column: 36
        },
        end: {
          line: 156,
          column: 10
        }
      },
      "47": {
        start: {
          line: 157,
          column: 23
        },
        end: {
          line: 157,
          column: 71
        }
      },
      "48": {
        start: {
          line: 158,
          column: 26
        },
        end: {
          line: 158,
          column: 27
        }
      },
      "49": {
        start: {
          line: 159,
          column: 25
        },
        end: {
          line: 159,
          column: 26
        }
      },
      "50": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "51": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "52": {
        start: {
          line: 162,
          column: 43
        },
        end: {
          line: 162,
          column: 113
        }
      },
      "53": {
        start: {
          line: 163,
          column: 37
        },
        end: {
          line: 163,
          column: 84
        }
      },
      "54": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 183,
          column: 17
        }
      },
      "55": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 176,
          column: 23
        }
      },
      "56": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 34
        }
      },
      "57": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 182,
          column: 23
        }
      },
      "58": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 71
        }
      },
      "59": {
        start: {
          line: 185,
          column: 45
        },
        end: {
          line: 185,
          column: 69
        }
      },
      "60": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 29
        }
      },
      "61": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 86
        }
      },
      "62": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      },
      "63": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 51
        }
      },
      "64": {
        start: {
          line: 203,
          column: 30
        },
        end: {
          line: 225,
          column: 10
        }
      },
      "65": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "66": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "67": {
        start: {
          line: 228,
          column: 37
        },
        end: {
          line: 228,
          column: 114
        }
      },
      "68": {
        start: {
          line: 229,
          column: 38
        },
        end: {
          line: 229,
          column: 116
        }
      },
      "69": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 234,
          column: 19
        }
      },
      "70": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 93
        }
      },
      "71": {
        start: {
          line: 242,
          column: 26
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "72": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 72
        }
      },
      "73": {
        start: {
          line: 256,
          column: 22
        },
        end: {
          line: 256,
          column: 47
        }
      },
      "74": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 257,
          column: 33
        }
      },
      "75": {
        start: {
          line: 261,
          column: 22
        },
        end: {
          line: 261,
          column: 47
        }
      },
      "76": {
        start: {
          line: 262,
          column: 4
        },
        end: {
          line: 262,
          column: 44
        }
      },
      "77": {
        start: {
          line: 265,
          column: 22
        },
        end: {
          line: 265,
          column: 47
        }
      },
      "78": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 266,
          column: 47
        }
      },
      "79": {
        start: {
          line: 269,
          column: 22
        },
        end: {
          line: 269,
          column: 47
        }
      },
      "80": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 270,
          column: 47
        }
      },
      "81": {
        start: {
          line: 273,
          column: 22
        },
        end: {
          line: 273,
          column: 47
        }
      },
      "82": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 274,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 34
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 48
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 46
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 92
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 37
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 118,
            column: 34
          },
          end: {
            line: 118,
            column: 35
          }
        },
        loc: {
          start: {
            line: 118,
            column: 45
          },
          end: {
            line: 118,
            column: 70
          }
        },
        line: 118
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 35
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 129
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 37
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 147
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 185,
            column: 34
          },
          end: {
            line: 185,
            column: 35
          }
        },
        loc: {
          start: {
            line: 185,
            column: 45
          },
          end: {
            line: 185,
            column: 69
          }
        },
        line: 185
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 33
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 201
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 34
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 241
      },
      "11": {
        name: "processBillingJob",
        decl: {
          start: {
            line: 255,
            column: 22
          },
          end: {
            line: 255,
            column: 39
          }
        },
        loc: {
          start: {
            line: 255,
            column: 45
          },
          end: {
            line: 258,
            column: 1
          }
        },
        line: 255
      },
      "12": {
        name: "processExpiringTrialsCron",
        decl: {
          start: {
            line: 260,
            column: 22
          },
          end: {
            line: 260,
            column: 47
          }
        },
        loc: {
          start: {
            line: 260,
            column: 50
          },
          end: {
            line: 263,
            column: 1
          }
        },
        line: 260
      },
      "13": {
        name: "processDunningCron",
        decl: {
          start: {
            line: 264,
            column: 22
          },
          end: {
            line: 264,
            column: 40
          }
        },
        loc: {
          start: {
            line: 264,
            column: 43
          },
          end: {
            line: 267,
            column: 1
          }
        },
        line: 264
      },
      "14": {
        name: "syncSubscriptionsCron",
        decl: {
          start: {
            line: 268,
            column: 22
          },
          end: {
            line: 268,
            column: 43
          }
        },
        loc: {
          start: {
            line: 268,
            column: 46
          },
          end: {
            line: 271,
            column: 1
          }
        },
        line: 268
      },
      "15": {
        name: "generateUsageReportsCron",
        decl: {
          start: {
            line: 272,
            column: 22
          },
          end: {
            line: 272,
            column: 46
          }
        },
        loc: {
          start: {
            line: 272,
            column: 49
          },
          end: {
            line: 275,
            column: 1
          }
        },
        line: 272
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 23,
            column: 26
          }
        }, {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 31,
            column: 26
          }
        }, {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 34,
            column: 26
          }
        }, {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 36,
            column: 73
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 30,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 30,
            column: 21
          }
        }, {
          start: {
            line: 28,
            column: 25
          },
          end: {
            line: 30,
            column: 21
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "3": {
        loc: {
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 183,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 183,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "4": {
        loc: {
          start: {
            line: 172,
            column: 40
          },
          end: {
            line: 174,
            column: 38
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 34
          },
          end: {
            line: 173,
            column: 81
          }
        }, {
          start: {
            line: 174,
            column: 34
          },
          end: {
            line: 174,
            column: 38
          }
        }],
        line: 172
      },
      "5": {
        loc: {
          start: {
            line: 251,
            column: 15
          },
          end: {
            line: 251,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 15
          },
          end: {
            line: 251,
            column: 38
          }
        }, {
          start: {
            line: 251,
            column: 42
          },
          end: {
            line: 251,
            column: 71
          }
        }],
        line: 251
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\billing.job.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\billing.job.ts"],
      sourcesContent: ["import { Job } from 'bull';\nimport { BillingAdvancedService } from '../services/billing-advanced.service';\nimport { PrismaService } from '../database/prisma.service';\nimport { logger } from '../utils/logger';\nimport { SubscriptionStatus, InvoiceStatus } from '@prisma/client';\n\nexport interface BillingJobData {\n  type: 'process_expiring_trials' | 'process_dunning' | 'cleanup_usage_records';\n  organizationId?: string;\n  invoiceId?: string;\n}\n\nexport class BillingJobProcessor {\n  private billingAdvancedService: BillingAdvancedService;\n  private prisma: PrismaService;\n\n  constructor() {\n    this.billingAdvancedService = new BillingAdvancedService();\n    this.prisma = new PrismaService();\n  }\n\n  async process(job: Job<BillingJobData>): Promise<void> {\n    const { type, organizationId, invoiceId } = job.data;\n\n    logger.info(`Processing billing job: ${type}`, {\n      jobId: job.id,\n      organizationId,\n      invoiceId,\n    });\n\n    try {\n      switch (type) {\n        case 'process_expiring_trials':\n          await this.processExpiringTrials();\n          break;\n\n        case 'process_dunning':\n          if (invoiceId) {\n            await this.processDunningForInvoice(invoiceId);\n          } else {\n            await this.processAllFailedInvoices();\n          }\n          break;\n\n        case 'cleanup_usage_records':\n          await this.cleanupOldUsageRecords();\n          break;\n\n        default:\n          throw new Error(`Unknown billing job type: ${type}`);\n      }\n\n      logger.info(`Billing job completed: ${type}`, { jobId: job.id });\n    } catch (error) {\n      logger.error(`Billing job failed: ${type}`, error, { jobId: job.id });\n      throw error;\n    }\n  }\n\n  /**\n   * Process expiring trials\n   */\n  private async processExpiringTrials(): Promise<void> {\n    logger.info('Processing expiring trials...');\n    \n    await this.billingAdvancedService.processExpiringTrials();\n    \n    // Also check for trials that have already expired but subscription is still trialing\n    const expiredTrials = await this.prisma.subscription.findMany({\n      where: {\n        status: SubscriptionStatus.TRIALING,\n        trialEnd: {\n          lt: new Date(),\n        },\n        deletedAt: null,\n      },\n      include: { organization: true },\n    });\n\n    for (const subscription of expiredTrials) {\n      try {\n        // Check Stripe subscription status\n        const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n        const stripeSubscription = await stripe.subscriptions.retrieve(\n          subscription.stripeSubscriptionId\n        );\n\n        // Update local status to match Stripe\n        if (stripeSubscription.status !== 'trialing') {\n          await this.prisma.subscription.update({\n            where: { id: subscription.id },\n            data: {\n              status: this.mapStripeStatus(stripeSubscription.status),\n              currentPeriodStart: new Date(stripeSubscription.current_period_start * 1000),\n              currentPeriodEnd: new Date(stripeSubscription.current_period_end * 1000),\n            },\n          });\n\n          logger.info(`Updated expired trial subscription status`, {\n            subscriptionId: subscription.id,\n            oldStatus: 'TRIALING',\n            newStatus: stripeSubscription.status,\n          });\n        }\n      } catch (error) {\n        logger.error(`Error updating expired trial ${subscription.id}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Process dunning for a specific invoice\n   */\n  private async processDunningForInvoice(invoiceId: string): Promise<void> {\n    logger.info(`Processing dunning for invoice: ${invoiceId}`);\n    \n    await this.billingAdvancedService.processDunning(invoiceId);\n  }\n\n  /**\n   * Process dunning for all failed invoices\n   */\n  private async processAllFailedInvoices(): Promise<void> {\n    logger.info('Processing dunning for all failed invoices...');\n    \n    const failedInvoices = await this.prisma.invoice.findMany({\n      where: {\n        status: InvoiceStatus.FAILED,\n        createdAt: {\n          gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\n        },\n      },\n      include: {\n        subscription: {\n          include: { organization: true },\n        },\n      },\n    });\n\n    for (const invoice of failedInvoices) {\n      try {\n        await this.billingAdvancedService.processDunning(invoice.id);\n        \n        // Add delay between processing to avoid rate limits\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        logger.error(`Error processing dunning for invoice ${invoice.id}:`, error);\n      }\n    }\n\n    logger.info(`Processed dunning for ${failedInvoices.length} failed invoices`);\n  }\n\n  /**\n   * Cleanup old usage records (older than 12 months)\n   */\n  private async cleanupOldUsageRecords(): Promise<void> {\n    logger.info('Cleaning up old usage records...');\n    \n    const cutoffDate = new Date();\n    cutoffDate.setMonth(cutoffDate.getMonth() - 12);\n\n    const result = await this.prisma.usageRecord.deleteMany({\n      where: {\n        timestamp: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    logger.info(`Cleaned up ${result.count} old usage records`, {\n      cutoffDate,\n    });\n  }\n\n  /**\n   * Sync subscription statuses with Stripe\n   */\n  async syncSubscriptionStatuses(): Promise<void> {\n    logger.info('Syncing subscription statuses with Stripe...');\n    \n    const activeSubscriptions = await this.prisma.subscription.findMany({\n      where: {\n        status: {\n          in: [SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIALING, SubscriptionStatus.PAST_DUE],\n        },\n        deletedAt: null,\n      },\n    });\n\n    const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n    let syncedCount = 0;\n    let errorCount = 0;\n\n    for (const subscription of activeSubscriptions) {\n      try {\n        const stripeSubscription = await stripe.subscriptions.retrieve(\n          subscription.stripeSubscriptionId\n        );\n\n        const mappedStatus = this.mapStripeStatus(stripeSubscription.status);\n        \n        if (mappedStatus !== subscription.status) {\n          await this.prisma.subscription.update({\n            where: { id: subscription.id },\n            data: {\n              status: mappedStatus,\n              currentPeriodStart: new Date(stripeSubscription.current_period_start * 1000),\n              currentPeriodEnd: new Date(stripeSubscription.current_period_end * 1000),\n              cancelAtPeriodEnd: stripeSubscription.cancel_at_period_end,\n              canceledAt: stripeSubscription.canceled_at \n                ? new Date(stripeSubscription.canceled_at * 1000) \n                : null,\n            },\n          });\n\n          syncedCount++;\n          logger.info(`Synced subscription status`, {\n            subscriptionId: subscription.id,\n            oldStatus: subscription.status,\n            newStatus: mappedStatus,\n          });\n        }\n\n        // Add delay to avoid rate limits\n        await new Promise(resolve => setTimeout(resolve, 100));\n      } catch (error) {\n        errorCount++;\n        logger.error(`Error syncing subscription ${subscription.id}:`, error);\n      }\n    }\n\n    logger.info(`Subscription sync completed`, {\n      total: activeSubscriptions.length,\n      synced: syncedCount,\n      errors: errorCount,\n    });\n  }\n\n  /**\n   * Generate usage reports for organizations\n   */\n  async generateUsageReports(): Promise<void> {\n    logger.info('Generating usage reports...');\n    \n    const organizations = await this.prisma.organization.findMany({\n      where: {\n        isActive: true,\n        subscription: {\n          some: {\n            status: {\n              in: [SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIALING],\n            },\n            deletedAt: null,\n          },\n        },\n      },\n      include: {\n        subscription: {\n          where: {\n            status: {\n              in: [SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIALING],\n            },\n            deletedAt: null,\n          },\n        },\n      },\n    });\n\n    for (const organization of organizations) {\n      try {\n        const currentUsage = await this.billingAdvancedService.getUsageMetrics(\n          organization.id,\n          'current'\n        );\n        \n        const previousUsage = await this.billingAdvancedService.getUsageMetrics(\n          organization.id,\n          'previous'\n        );\n\n        // TODO: Send usage report email or store in database\n        logger.info(`Usage report generated for organization ${organization.id}`, {\n          current: currentUsage.metrics,\n          previous: previousUsage.metrics,\n        });\n      } catch (error) {\n        logger.error(`Error generating usage report for ${organization.id}:`, error);\n      }\n    }\n  }\n\n  private mapStripeStatus(stripeStatus: string): SubscriptionStatus {\n    const statusMap: Record<string, SubscriptionStatus> = {\n      active: SubscriptionStatus.ACTIVE,\n      canceled: SubscriptionStatus.CANCELED,\n      incomplete: SubscriptionStatus.INCOMPLETE,\n      incomplete_expired: SubscriptionStatus.INCOMPLETE_EXPIRED,\n      past_due: SubscriptionStatus.PAST_DUE,\n      trialing: SubscriptionStatus.TRIALING,\n      unpaid: SubscriptionStatus.UNPAID,\n    };\n\n    return statusMap[stripeStatus] || SubscriptionStatus.INCOMPLETE;\n  }\n}\n\n// Export job processor function for Bull queue\nexport async function processBillingJob(job: Job<BillingJobData>): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.process(job);\n}\n\n// Export cron job functions\nexport async function processExpiringTrialsCron(): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.processExpiringTrials();\n}\n\nexport async function processDunningCron(): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.processAllFailedInvoices();\n}\n\nexport async function syncSubscriptionsCron(): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.syncSubscriptionStatuses();\n}\n\nexport async function generateUsageReportsCron(): Promise<void> {\n  const processor = new BillingJobProcessor();\n  await processor.generateUsageReports();\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "023fdd1eefc0a3ddc6ea3a7b076fd5b28fc5c551"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dwccubu1a = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_dwccubu1a();
import { BillingAdvancedService } from '../services/billing-advanced.service';
import { PrismaService } from '../database/prisma.service';
import { logger } from '../utils/logger';
import { SubscriptionStatus, InvoiceStatus } from '@prisma/client';
export class BillingJobProcessor {
  billingAdvancedService;
  prisma;
  constructor() {
    /* istanbul ignore next */
    cov_dwccubu1a().f[0]++;
    cov_dwccubu1a().s[0]++;
    this.billingAdvancedService = new BillingAdvancedService();
    /* istanbul ignore next */
    cov_dwccubu1a().s[1]++;
    this.prisma = new PrismaService();
  }
  async process(job) {
    /* istanbul ignore next */
    cov_dwccubu1a().f[1]++;
    const {
      type,
      organizationId,
      invoiceId
    } =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[2]++, job.data);
    /* istanbul ignore next */
    cov_dwccubu1a().s[3]++;
    logger.info(`Processing billing job: ${type}`, {
      jobId: job.id,
      organizationId,
      invoiceId
    });
    /* istanbul ignore next */
    cov_dwccubu1a().s[4]++;
    try {
      /* istanbul ignore next */
      cov_dwccubu1a().s[5]++;
      switch (type) {
        case 'process_expiring_trials':
          /* istanbul ignore next */
          cov_dwccubu1a().b[0][0]++;
          cov_dwccubu1a().s[6]++;
          await this.processExpiringTrials();
          /* istanbul ignore next */
          cov_dwccubu1a().s[7]++;
          break;
        case 'process_dunning':
          /* istanbul ignore next */
          cov_dwccubu1a().b[0][1]++;
          cov_dwccubu1a().s[8]++;
          if (invoiceId) {
            /* istanbul ignore next */
            cov_dwccubu1a().b[1][0]++;
            cov_dwccubu1a().s[9]++;
            await this.processDunningForInvoice(invoiceId);
          } else {
            /* istanbul ignore next */
            cov_dwccubu1a().b[1][1]++;
            cov_dwccubu1a().s[10]++;
            await this.processAllFailedInvoices();
          }
          /* istanbul ignore next */
          cov_dwccubu1a().s[11]++;
          break;
        case 'cleanup_usage_records':
          /* istanbul ignore next */
          cov_dwccubu1a().b[0][2]++;
          cov_dwccubu1a().s[12]++;
          await this.cleanupOldUsageRecords();
          /* istanbul ignore next */
          cov_dwccubu1a().s[13]++;
          break;
        default:
          /* istanbul ignore next */
          cov_dwccubu1a().b[0][3]++;
          cov_dwccubu1a().s[14]++;
          throw new Error(`Unknown billing job type: ${type}`);
      }
      /* istanbul ignore next */
      cov_dwccubu1a().s[15]++;
      logger.info(`Billing job completed: ${type}`, {
        jobId: job.id
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_dwccubu1a().s[16]++;
      logger.error(`Billing job failed: ${type}`, error, {
        jobId: job.id
      });
      /* istanbul ignore next */
      cov_dwccubu1a().s[17]++;
      throw error;
    }
  }
  /**
   * Process expiring trials
   */
  async processExpiringTrials() {
    /* istanbul ignore next */
    cov_dwccubu1a().f[2]++;
    cov_dwccubu1a().s[18]++;
    logger.info('Processing expiring trials...');
    /* istanbul ignore next */
    cov_dwccubu1a().s[19]++;
    await this.billingAdvancedService.processExpiringTrials();
    // Also check for trials that have already expired but subscription is still trialing
    const expiredTrials =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[20]++, await this.prisma.subscription.findMany({
      where: {
        status: SubscriptionStatus.TRIALING,
        trialEnd: {
          lt: new Date()
        },
        deletedAt: null
      },
      include: {
        organization: true
      }
    }));
    /* istanbul ignore next */
    cov_dwccubu1a().s[21]++;
    for (const subscription of expiredTrials) {
      /* istanbul ignore next */
      cov_dwccubu1a().s[22]++;
      try {
        // Check Stripe subscription status
        const stripe =
        /* istanbul ignore next */
        (cov_dwccubu1a().s[23]++, require('stripe')(process.env.STRIPE_SECRET_KEY));
        const stripeSubscription =
        /* istanbul ignore next */
        (cov_dwccubu1a().s[24]++, await stripe.subscriptions.retrieve(subscription.stripeSubscriptionId));
        // Update local status to match Stripe
        /* istanbul ignore next */
        cov_dwccubu1a().s[25]++;
        if (stripeSubscription.status !== 'trialing') {
          /* istanbul ignore next */
          cov_dwccubu1a().b[2][0]++;
          cov_dwccubu1a().s[26]++;
          await this.prisma.subscription.update({
            where: {
              id: subscription.id
            },
            data: {
              status: this.mapStripeStatus(stripeSubscription.status),
              currentPeriodStart: new Date(stripeSubscription.current_period_start * 1000),
              currentPeriodEnd: new Date(stripeSubscription.current_period_end * 1000)
            }
          });
          /* istanbul ignore next */
          cov_dwccubu1a().s[27]++;
          logger.info(`Updated expired trial subscription status`, {
            subscriptionId: subscription.id,
            oldStatus: 'TRIALING',
            newStatus: stripeSubscription.status
          });
        } else
        /* istanbul ignore next */
        {
          cov_dwccubu1a().b[2][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_dwccubu1a().s[28]++;
        logger.error(`Error updating expired trial ${subscription.id}:`, error);
      }
    }
  }
  /**
   * Process dunning for a specific invoice
   */
  async processDunningForInvoice(invoiceId) {
    /* istanbul ignore next */
    cov_dwccubu1a().f[3]++;
    cov_dwccubu1a().s[29]++;
    logger.info(`Processing dunning for invoice: ${invoiceId}`);
    /* istanbul ignore next */
    cov_dwccubu1a().s[30]++;
    await this.billingAdvancedService.processDunning(invoiceId);
  }
  /**
   * Process dunning for all failed invoices
   */
  async processAllFailedInvoices() {
    /* istanbul ignore next */
    cov_dwccubu1a().f[4]++;
    cov_dwccubu1a().s[31]++;
    logger.info('Processing dunning for all failed invoices...');
    const failedInvoices =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[32]++, await this.prisma.invoice.findMany({
      where: {
        status: InvoiceStatus.FAILED,
        createdAt: {
          gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
        }
      },
      include: {
        subscription: {
          include: {
            organization: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_dwccubu1a().s[33]++;
    for (const invoice of failedInvoices) {
      /* istanbul ignore next */
      cov_dwccubu1a().s[34]++;
      try {
        /* istanbul ignore next */
        cov_dwccubu1a().s[35]++;
        await this.billingAdvancedService.processDunning(invoice.id);
        // Add delay between processing to avoid rate limits
        /* istanbul ignore next */
        cov_dwccubu1a().s[36]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_dwccubu1a().f[5]++;
          cov_dwccubu1a().s[37]++;
          return setTimeout(resolve, 1000);
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_dwccubu1a().s[38]++;
        logger.error(`Error processing dunning for invoice ${invoice.id}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_dwccubu1a().s[39]++;
    logger.info(`Processed dunning for ${failedInvoices.length} failed invoices`);
  }
  /**
   * Cleanup old usage records (older than 12 months)
   */
  async cleanupOldUsageRecords() {
    /* istanbul ignore next */
    cov_dwccubu1a().f[6]++;
    cov_dwccubu1a().s[40]++;
    logger.info('Cleaning up old usage records...');
    const cutoffDate =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[41]++, new Date());
    /* istanbul ignore next */
    cov_dwccubu1a().s[42]++;
    cutoffDate.setMonth(cutoffDate.getMonth() - 12);
    const result =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[43]++, await this.prisma.usageRecord.deleteMany({
      where: {
        timestamp: {
          lt: cutoffDate
        }
      }
    }));
    /* istanbul ignore next */
    cov_dwccubu1a().s[44]++;
    logger.info(`Cleaned up ${result.count} old usage records`, {
      cutoffDate
    });
  }
  /**
   * Sync subscription statuses with Stripe
   */
  async syncSubscriptionStatuses() {
    /* istanbul ignore next */
    cov_dwccubu1a().f[7]++;
    cov_dwccubu1a().s[45]++;
    logger.info('Syncing subscription statuses with Stripe...');
    const activeSubscriptions =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[46]++, await this.prisma.subscription.findMany({
      where: {
        status: {
          in: [SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIALING, SubscriptionStatus.PAST_DUE]
        },
        deletedAt: null
      }
    }));
    const stripe =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[47]++, require('stripe')(process.env.STRIPE_SECRET_KEY));
    let syncedCount =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[48]++, 0);
    let errorCount =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[49]++, 0);
    /* istanbul ignore next */
    cov_dwccubu1a().s[50]++;
    for (const subscription of activeSubscriptions) {
      /* istanbul ignore next */
      cov_dwccubu1a().s[51]++;
      try {
        const stripeSubscription =
        /* istanbul ignore next */
        (cov_dwccubu1a().s[52]++, await stripe.subscriptions.retrieve(subscription.stripeSubscriptionId));
        const mappedStatus =
        /* istanbul ignore next */
        (cov_dwccubu1a().s[53]++, this.mapStripeStatus(stripeSubscription.status));
        /* istanbul ignore next */
        cov_dwccubu1a().s[54]++;
        if (mappedStatus !== subscription.status) {
          /* istanbul ignore next */
          cov_dwccubu1a().b[3][0]++;
          cov_dwccubu1a().s[55]++;
          await this.prisma.subscription.update({
            where: {
              id: subscription.id
            },
            data: {
              status: mappedStatus,
              currentPeriodStart: new Date(stripeSubscription.current_period_start * 1000),
              currentPeriodEnd: new Date(stripeSubscription.current_period_end * 1000),
              cancelAtPeriodEnd: stripeSubscription.cancel_at_period_end,
              canceledAt: stripeSubscription.canceled_at ?
              /* istanbul ignore next */
              (cov_dwccubu1a().b[4][0]++, new Date(stripeSubscription.canceled_at * 1000)) :
              /* istanbul ignore next */
              (cov_dwccubu1a().b[4][1]++, null)
            }
          });
          /* istanbul ignore next */
          cov_dwccubu1a().s[56]++;
          syncedCount++;
          /* istanbul ignore next */
          cov_dwccubu1a().s[57]++;
          logger.info(`Synced subscription status`, {
            subscriptionId: subscription.id,
            oldStatus: subscription.status,
            newStatus: mappedStatus
          });
        } else
        /* istanbul ignore next */
        {
          cov_dwccubu1a().b[3][1]++;
        }
        // Add delay to avoid rate limits
        cov_dwccubu1a().s[58]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_dwccubu1a().f[8]++;
          cov_dwccubu1a().s[59]++;
          return setTimeout(resolve, 100);
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_dwccubu1a().s[60]++;
        errorCount++;
        /* istanbul ignore next */
        cov_dwccubu1a().s[61]++;
        logger.error(`Error syncing subscription ${subscription.id}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_dwccubu1a().s[62]++;
    logger.info(`Subscription sync completed`, {
      total: activeSubscriptions.length,
      synced: syncedCount,
      errors: errorCount
    });
  }
  /**
   * Generate usage reports for organizations
   */
  async generateUsageReports() {
    /* istanbul ignore next */
    cov_dwccubu1a().f[9]++;
    cov_dwccubu1a().s[63]++;
    logger.info('Generating usage reports...');
    const organizations =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[64]++, await this.prisma.organization.findMany({
      where: {
        isActive: true,
        subscription: {
          some: {
            status: {
              in: [SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIALING]
            },
            deletedAt: null
          }
        }
      },
      include: {
        subscription: {
          where: {
            status: {
              in: [SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIALING]
            },
            deletedAt: null
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_dwccubu1a().s[65]++;
    for (const organization of organizations) {
      /* istanbul ignore next */
      cov_dwccubu1a().s[66]++;
      try {
        const currentUsage =
        /* istanbul ignore next */
        (cov_dwccubu1a().s[67]++, await this.billingAdvancedService.getUsageMetrics(organization.id, 'current'));
        const previousUsage =
        /* istanbul ignore next */
        (cov_dwccubu1a().s[68]++, await this.billingAdvancedService.getUsageMetrics(organization.id, 'previous'));
        // TODO: Send usage report email or store in database
        /* istanbul ignore next */
        cov_dwccubu1a().s[69]++;
        logger.info(`Usage report generated for organization ${organization.id}`, {
          current: currentUsage.metrics,
          previous: previousUsage.metrics
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_dwccubu1a().s[70]++;
        logger.error(`Error generating usage report for ${organization.id}:`, error);
      }
    }
  }
  mapStripeStatus(stripeStatus) {
    /* istanbul ignore next */
    cov_dwccubu1a().f[10]++;
    const statusMap =
    /* istanbul ignore next */
    (cov_dwccubu1a().s[71]++, {
      active: SubscriptionStatus.ACTIVE,
      canceled: SubscriptionStatus.CANCELED,
      incomplete: SubscriptionStatus.INCOMPLETE,
      incomplete_expired: SubscriptionStatus.INCOMPLETE_EXPIRED,
      past_due: SubscriptionStatus.PAST_DUE,
      trialing: SubscriptionStatus.TRIALING,
      unpaid: SubscriptionStatus.UNPAID
    });
    /* istanbul ignore next */
    cov_dwccubu1a().s[72]++;
    return /* istanbul ignore next */(cov_dwccubu1a().b[5][0]++, statusMap[stripeStatus]) ||
    /* istanbul ignore next */
    (cov_dwccubu1a().b[5][1]++, SubscriptionStatus.INCOMPLETE);
  }
}
// Export job processor function for Bull queue
export async function processBillingJob(job) {
  /* istanbul ignore next */
  cov_dwccubu1a().f[11]++;
  const processor =
  /* istanbul ignore next */
  (cov_dwccubu1a().s[73]++, new BillingJobProcessor());
  /* istanbul ignore next */
  cov_dwccubu1a().s[74]++;
  await processor.process(job);
}
// Export cron job functions
export async function processExpiringTrialsCron() {
  /* istanbul ignore next */
  cov_dwccubu1a().f[12]++;
  const processor =
  /* istanbul ignore next */
  (cov_dwccubu1a().s[75]++, new BillingJobProcessor());
  /* istanbul ignore next */
  cov_dwccubu1a().s[76]++;
  await processor.processExpiringTrials();
}
export async function processDunningCron() {
  /* istanbul ignore next */
  cov_dwccubu1a().f[13]++;
  const processor =
  /* istanbul ignore next */
  (cov_dwccubu1a().s[77]++, new BillingJobProcessor());
  /* istanbul ignore next */
  cov_dwccubu1a().s[78]++;
  await processor.processAllFailedInvoices();
}
export async function syncSubscriptionsCron() {
  /* istanbul ignore next */
  cov_dwccubu1a().f[14]++;
  const processor =
  /* istanbul ignore next */
  (cov_dwccubu1a().s[79]++, new BillingJobProcessor());
  /* istanbul ignore next */
  cov_dwccubu1a().s[80]++;
  await processor.syncSubscriptionStatuses();
}
export async function generateUsageReportsCron() {
  /* istanbul ignore next */
  cov_dwccubu1a().f[15]++;
  const processor =
  /* istanbul ignore next */
  (cov_dwccubu1a().s[81]++, new BillingJobProcessor());
  /* istanbul ignore next */
  cov_dwccubu1a().s[82]++;
  await processor.generateUsageReports();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,