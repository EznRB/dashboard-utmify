{"version":3,"names":["cov_1cigxmaa37","actualCoverage","Injectable","Logger","Cron","CronExpression","AuditLogService","AuditLogCleanupScheduler","s","AuditLogCleanupScheduler_1","auditLogService","logger","name","constructor","f","handleDailyCleanup","log","deletedCount","cleanupOldLogs","error","message","stack","handleSuspiciousActivityCheck","sixHoursAgo","Date","setHours","getHours","suspiciousEvents","getAuditLogs","category","severity","startDate","limit","logs","length","b","warn","failedLogins","action","handleWeeklyReport","oneWeekAgo","setDate","getDate","weeklyLogs","orgStats","Map","forEach","orgId","organizationId","has","set","total","security","failed","critical","stats","get","success","size","totalSecurity","totalFailed","totalCritical","suspiciousOrgs","Array","from","entries","filter","_","suspiciousRatio","map","join","handleHealthCheck","oneHourAgo","recentLogs","systemErrors","handleMonthlyArchive","sixMonthsAgo","setMonth","getMonth","oldLogs","endDate","__decorate","EVERY_DAY_AT_3AM","_a","Object"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\schedulers\\audit-log-cleanup.scheduler.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { AuditLogService } from '../services/audit-log.service';\n\n@Injectable()\nexport class AuditLogCleanupScheduler {\n  private readonly logger = new Logger(AuditLogCleanupScheduler.name);\n\n  constructor(\n    private readonly auditLogService: AuditLogService,\n  ) {}\n\n  @Cron(CronExpression.EVERY_DAY_AT_3AM)\n  async handleDailyCleanup() {\n    this.logger.log('Starting daily audit log cleanup...');\n    \n    try {\n      // Limpar logs com mais de 90 dias (padrão)\n      const deletedCount = await this.auditLogService.cleanupOldLogs(90);\n      \n      this.logger.log(`Daily cleanup completed: ${deletedCount} old audit logs deleted`);\n    } catch (error) {\n      this.logger.error(\n        `Failed to perform daily audit log cleanup: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  @Cron('0 */6 * * *') // A cada 6 horas\n  async handleSuspiciousActivityCheck() {\n    this.logger.log('Starting suspicious activity check...');\n    \n    try {\n      // Verificar atividades suspeitas nas últimas 6 horas\n      const sixHoursAgo = new Date();\n      sixHoursAgo.setHours(sixHoursAgo.getHours() - 6);\n\n      // Buscar eventos de segurança críticos\n      const suspiciousEvents = await this.auditLogService.getAuditLogs({\n        category: 'SECURITY',\n        severity: 'CRITICAL',\n        startDate: sixHoursAgo,\n        limit: 100,\n      });\n\n      if (suspiciousEvents.logs.length > 0) {\n        this.logger.warn(\n          `Found ${suspiciousEvents.logs.length} critical security events in the last 6 hours`,\n        );\n        \n        // Aqui você pode implementar notificações adicionais\n        // como envio de emails para administradores\n      }\n\n      // Verificar tentativas de login falhadas\n      const failedLogins = await this.auditLogService.getAuditLogs({\n        action: 'LOGIN_FAILED',\n        startDate: sixHoursAgo,\n        limit: 100,\n      });\n\n      if (failedLogins.logs.length > 10) {\n        this.logger.warn(\n          `High number of failed login attempts detected: ${failedLogins.logs.length} in the last 6 hours`,\n        );\n      }\n\n      this.logger.log('Suspicious activity check completed');\n    } catch (error) {\n      this.logger.error(\n        `Failed to perform suspicious activity check: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  @Cron('0 0 * * 0') // Todo domingo à meia-noite\n  async handleWeeklyReport() {\n    this.logger.log('Generating weekly audit report...');\n    \n    try {\n      const oneWeekAgo = new Date();\n      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n      // Buscar estatísticas da semana\n      const weeklyLogs = await this.auditLogService.getAuditLogs({\n        startDate: oneWeekAgo,\n        limit: 10000,\n      });\n\n      // Agrupar por organização\n      const orgStats = new Map<string, {\n        total: number;\n        security: number;\n        failed: number;\n        critical: number;\n      }>();\n\n      weeklyLogs.logs.forEach(log => {\n        const orgId = log.organizationId;\n        if (!orgStats.has(orgId)) {\n          orgStats.set(orgId, { total: 0, security: 0, failed: 0, critical: 0 });\n        }\n        \n        const stats = orgStats.get(orgId)!;\n        stats.total++;\n        \n        if (log.category === 'SECURITY') stats.security++;\n        if (!log.success) stats.failed++;\n        if (log.severity === 'CRITICAL') stats.critical++;\n      });\n\n      // Log do relatório\n      this.logger.log(`Weekly Report Summary:`);\n      this.logger.log(`- Total organizations with activity: ${orgStats.size}`);\n      this.logger.log(`- Total audit logs: ${weeklyLogs.logs.length}`);\n      \n      let totalSecurity = 0;\n      let totalFailed = 0;\n      let totalCritical = 0;\n      \n      orgStats.forEach(stats => {\n        totalSecurity += stats.security;\n        totalFailed += stats.failed;\n        totalCritical += stats.critical;\n      });\n      \n      this.logger.log(`- Security events: ${totalSecurity}`);\n      this.logger.log(`- Failed operations: ${totalFailed}`);\n      this.logger.log(`- Critical events: ${totalCritical}`);\n\n      // Identificar organizações com alta atividade suspeita\n      const suspiciousOrgs = Array.from(orgStats.entries())\n        .filter(([_, stats]) => {\n          const suspiciousRatio = (stats.security + stats.failed + stats.critical) / stats.total;\n          return suspiciousRatio > 0.1; // Mais de 10% de eventos suspeitos\n        })\n        .map(([orgId]) => orgId);\n\n      if (suspiciousOrgs.length > 0) {\n        this.logger.warn(\n          `Organizations with high suspicious activity: ${suspiciousOrgs.join(', ')}`,\n        );\n      }\n\n      this.logger.log('Weekly audit report generated successfully');\n    } catch (error) {\n      this.logger.error(\n        `Failed to generate weekly audit report: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  @Cron('0 */1 * * *') // A cada hora\n  async handleHealthCheck() {\n    try {\n      // Verificar se o sistema de auditoria está funcionando\n      const oneHourAgo = new Date();\n      oneHourAgo.setHours(oneHourAgo.getHours() - 1);\n\n      const recentLogs = await this.auditLogService.getAuditLogs({\n        startDate: oneHourAgo,\n        limit: 1,\n      });\n\n      // Se não há logs na última hora, pode indicar um problema\n      if (recentLogs.logs.length === 0) {\n        this.logger.warn('No audit logs found in the last hour - system may not be logging properly');\n      }\n\n      // Verificar se há muitos erros de sistema\n      const systemErrors = await this.auditLogService.getAuditLogs({\n        category: 'SYSTEM',\n        severity: 'CRITICAL',\n        startDate: oneHourAgo,\n        limit: 10,\n      });\n\n      if (systemErrors.logs.length > 5) {\n        this.logger.error(\n          `High number of critical system errors detected: ${systemErrors.logs.length} in the last hour`,\n        );\n      }\n    } catch (error) {\n      this.logger.error(\n        `Audit log health check failed: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  @Cron('0 0 1 * *') // Todo dia 1 do mês à meia-noite\n  async handleMonthlyArchive() {\n    this.logger.log('Starting monthly audit log archiving...');\n    \n    try {\n      // Arquivar logs com mais de 6 meses\n      const sixMonthsAgo = new Date();\n      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n\n      const oldLogs = await this.auditLogService.getAuditLogs({\n        endDate: sixMonthsAgo,\n        limit: 1000,\n      });\n\n      if (oldLogs.logs.length > 0) {\n        this.logger.log(\n          `Found ${oldLogs.logs.length} logs older than 6 months for archiving`,\n        );\n        \n        // Aqui você pode implementar a lógica de arquivamento\n        // Por exemplo, exportar para um sistema de armazenamento externo\n        // antes de deletar os logs antigos\n        \n        // Por enquanto, apenas log da ação\n        this.logger.log('Monthly archiving process completed');\n      } else {\n        this.logger.log('No old logs found for archiving');\n      }\n    } catch (error) {\n      this.logger.error(\n        `Failed to perform monthly audit log archiving: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n}"],"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","ignoreList":[]}