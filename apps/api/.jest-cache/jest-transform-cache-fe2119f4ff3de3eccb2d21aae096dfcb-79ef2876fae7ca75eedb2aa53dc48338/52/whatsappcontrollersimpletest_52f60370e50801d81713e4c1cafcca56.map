{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\whatsapp.controller.simple.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\whatsapp.controller.simple.test.ts"],"sourcesContent":["/**\n * @jest-environment node\n */\n\n// Simple WhatsApp Controller Tests - Isolated from setup.ts\ndescribe('WhatsApp Controller - Simple Tests', () => {\n  // Mock WhatsApp Service\n  const mockWhatsAppService = {\n    getConfig: jest.fn(),\n    updateConfig: jest.fn(),\n    sendMessage: jest.fn(),\n    getMessages: jest.fn(),\n    getTemplates: jest.fn(),\n    createTemplate: jest.fn(),\n    updateTemplate: jest.fn(),\n    deleteTemplate: jest.fn(),\n    sendBroadcast: jest.fn(),\n    getMetrics: jest.fn(),\n    handleWebhook: jest.fn()\n  }\n\n  // Simple WhatsApp Controller implementation for testing\n  class TestWhatsAppController {\n    constructor(private whatsappService: any) {}\n\n    async getConfig(req: any, res: any) {\n      try {\n        const userId = req.user?.id\n        if (!userId) {\n          return res.status(401).json({ error: 'Usuário não autenticado' })\n        }\n\n        const config = await this.whatsappService.getConfig(userId)\n        return res.json({ config })\n      } catch (error) {\n        return res.status(500).json({ error: 'Erro interno do servidor' })\n      }\n    }\n\n    async updateConfig(req: any, res: any) {\n      try {\n        const userId = req.user?.id\n        if (!userId) {\n          return res.status(401).json({ error: 'Usuário não autenticado' })\n        }\n\n        const config = await this.whatsappService.updateConfig(userId, req.body)\n        return res.json({ config })\n      } catch (error) {\n        return res.status(500).json({ error: 'Erro interno do servidor' })\n      }\n    }\n\n    async sendMessage(req: any, res: any) {\n      try {\n        const userId = req.user?.id\n        if (!userId) {\n          return res.status(401).json({ error: 'Usuário não autenticado' })\n        }\n\n        const { to, message } = req.body\n        if (!to || !message) {\n          return res.status(400).json({ error: 'Destinatário e mensagem são obrigatórios' })\n        }\n\n        const result = await this.whatsappService.sendMessage(userId, { to, message })\n        return res.json({ message: result })\n      } catch (error) {\n        if (error.message.includes('não configurado') || \n            error.message.includes('desativado') || \n            error.message.includes('limite')) {\n          return res.status(400).json({ error: error.message })\n        }\n        return res.status(500).json({ error: 'Erro interno do servidor' })\n      }\n    }\n\n    async getMessages(req: any, res: any) {\n      try {\n        const userId = req.user?.id\n        if (!userId) {\n          return res.status(401).json({ error: 'Usuário não autenticado' })\n        }\n\n        const page = parseInt(req.query.page) || 1\n        const limit = parseInt(req.query.limit) || 20\n\n        const result = await this.whatsappService.getMessages(userId, page, limit)\n        return res.json(result)\n      } catch (error) {\n        return res.status(500).json({ error: 'Erro interno do servidor' })\n      }\n    }\n  }\n\n  let whatsappController: TestWhatsAppController\n  let mockReq: any\n  let mockRes: any\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks()\n    \n    // Create controller instance\n    whatsappController = new TestWhatsAppController(mockWhatsAppService)\n\n    // Mock request and response objects\n    mockReq = {\n      user: { id: 'user-1' },\n      body: {},\n      query: {}\n    }\n\n    mockRes = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis()\n    }\n  })\n\n  afterEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('getConfig', () => {\n    it('should return WhatsApp config successfully', async () => {\n      const mockConfig = {\n        id: 'config-1',\n        userId: 'user-1',\n        twilioAccountSid: 'test_sid',\n        twilioPhoneNumber: '+1234567890',\n        isActive: true,\n        dailyLimit: 1000\n      }\n\n      mockWhatsAppService.getConfig.mockResolvedValue(mockConfig)\n\n      await whatsappController.getConfig(mockReq, mockRes)\n\n      expect(mockWhatsAppService.getConfig).toHaveBeenCalledWith('user-1')\n      expect(mockRes.json).toHaveBeenCalledWith({ config: mockConfig })\n    })\n\n    it('should return 401 if user not authenticated', async () => {\n      mockReq.user = null\n\n      await whatsappController.getConfig(mockReq, mockRes)\n\n      expect(mockRes.status).toHaveBeenCalledWith(401)\n      expect(mockRes.json).toHaveBeenCalledWith({ error: 'Usuário não autenticado' })\n    })\n\n    it('should return 500 on service error', async () => {\n      mockWhatsAppService.getConfig.mockRejectedValue(new Error('Database error'))\n\n      await whatsappController.getConfig(mockReq, mockRes)\n\n      expect(mockRes.status).toHaveBeenCalledWith(500)\n      expect(mockRes.json).toHaveBeenCalledWith({ error: 'Erro interno do servidor' })\n    })\n  })\n\n  describe('updateConfig', () => {\n    it('should update WhatsApp config successfully', async () => {\n      const configData = {\n        twilioAccountSid: 'new_sid',\n        twilioAuthToken: 'new_token',\n        twilioPhoneNumber: '+1234567890'\n      }\n\n      const updatedConfig = {\n        id: 'config-1',\n        userId: 'user-1',\n        ...configData,\n        isActive: true\n      }\n\n      mockReq.body = configData\n      mockWhatsAppService.updateConfig.mockResolvedValue(updatedConfig)\n\n      await whatsappController.updateConfig(mockReq, mockRes)\n\n      expect(mockWhatsAppService.updateConfig).toHaveBeenCalledWith('user-1', configData)\n      expect(mockRes.json).toHaveBeenCalledWith({ config: updatedConfig })\n    })\n  })\n\n  describe('sendMessage', () => {\n    it('should send message successfully', async () => {\n      const messageData = {\n        to: '+1987654321',\n        message: 'Hello, World!'\n      }\n\n      const sentMessage = {\n        id: 'msg-1',\n        userId: 'user-1',\n        to: messageData.to,\n        body: messageData.message,\n        status: 'queued'\n      }\n\n      mockReq.body = messageData\n      mockWhatsAppService.sendMessage.mockResolvedValue(sentMessage)\n\n      await whatsappController.sendMessage(mockReq, mockRes)\n\n      expect(mockWhatsAppService.sendMessage).toHaveBeenCalledWith('user-1', messageData)\n      expect(mockRes.json).toHaveBeenCalledWith({ message: sentMessage })\n    })\n\n    it('should return 400 if to or message is missing', async () => {\n      mockReq.body = { to: '+1987654321' } // missing message\n\n      await whatsappController.sendMessage(mockReq, mockRes)\n\n      expect(mockRes.status).toHaveBeenCalledWith(400)\n      expect(mockRes.json).toHaveBeenCalledWith({ \n        error: 'Destinatário e mensagem são obrigatórios' \n      })\n    })\n\n    it('should return 400 for WhatsApp service errors', async () => {\n      mockReq.body = { to: '+1987654321', message: 'Hello' }\n      mockWhatsAppService.sendMessage.mockRejectedValue(\n        new Error('WhatsApp não configurado')\n      )\n\n      await whatsappController.sendMessage(mockReq, mockRes)\n\n      expect(mockRes.status).toHaveBeenCalledWith(400)\n      expect(mockRes.json).toHaveBeenCalledWith({ \n        error: 'WhatsApp não configurado' \n      })\n    })\n  })\n\n  describe('getMessages', () => {\n    it('should return paginated messages', async () => {\n      const mockResult = {\n        messages: [\n          {\n            id: 'msg-1',\n            userId: 'user-1',\n            to: '+1987654321',\n            body: 'Hello',\n            status: 'delivered'\n          }\n        ],\n        total: 1,\n        page: 1,\n        limit: 20,\n        totalPages: 1\n      }\n\n      mockWhatsAppService.getMessages.mockResolvedValue(mockResult)\n\n      await whatsappController.getMessages(mockReq, mockRes)\n\n      expect(mockWhatsAppService.getMessages).toHaveBeenCalledWith('user-1', 1, 20)\n      expect(mockRes.json).toHaveBeenCalledWith(mockResult)\n    })\n\n    it('should use custom page and limit from query', async () => {\n      mockReq.query = { page: '2', limit: '10' }\n      \n      const mockResult = {\n        messages: [],\n        total: 0,\n        page: 2,\n        limit: 10,\n        totalPages: 0\n      }\n\n      mockWhatsAppService.getMessages.mockResolvedValue(mockResult)\n\n      await whatsappController.getMessages(mockReq, mockRes)\n\n      expect(mockWhatsAppService.getMessages).toHaveBeenCalledWith('user-1', 2, 10)\n    })\n  })\n\n  // Basic functionality test\n  it('should have basic Jest functionality working', () => {\n    expect(1 + 1).toBe(2)\n    expect('controller').toBe('controller')\n    expect(true).toBeTruthy()\n  })\n\n  // Mock functionality test\n  it('should have Jest mocks working for controller', () => {\n    const mockFn = jest.fn()\n    mockFn('controller-test')\n    expect(mockFn).toHaveBeenCalledWith('controller-test')\n    expect(mockFn).toHaveBeenCalledTimes(1)\n  })\n})"],"version":3}