8162241b5fa492fc00f3a24e2b53ca3f
"use strict";
/**
 * @jest-environment node
 */
// Simple WhatsApp Controller Tests - Isolated from setup.ts
describe('WhatsApp Controller - Simple Tests', () => {
    // Mock WhatsApp Service
    const mockWhatsAppService = {
        getConfig: jest.fn(),
        updateConfig: jest.fn(),
        sendMessage: jest.fn(),
        getMessages: jest.fn(),
        getTemplates: jest.fn(),
        createTemplate: jest.fn(),
        updateTemplate: jest.fn(),
        deleteTemplate: jest.fn(),
        sendBroadcast: jest.fn(),
        getMetrics: jest.fn(),
        handleWebhook: jest.fn()
    };
    // Simple WhatsApp Controller implementation for testing
    class TestWhatsAppController {
        whatsappService;
        constructor(whatsappService) {
            this.whatsappService = whatsappService;
        }
        async getConfig(req, res) {
            try {
                const userId = req.user?.id;
                if (!userId) {
                    return res.status(401).json({ error: 'Usuário não autenticado' });
                }
                const config = await this.whatsappService.getConfig(userId);
                return res.json({ config });
            }
            catch (error) {
                return res.status(500).json({ error: 'Erro interno do servidor' });
            }
        }
        async updateConfig(req, res) {
            try {
                const userId = req.user?.id;
                if (!userId) {
                    return res.status(401).json({ error: 'Usuário não autenticado' });
                }
                const config = await this.whatsappService.updateConfig(userId, req.body);
                return res.json({ config });
            }
            catch (error) {
                return res.status(500).json({ error: 'Erro interno do servidor' });
            }
        }
        async sendMessage(req, res) {
            try {
                const userId = req.user?.id;
                if (!userId) {
                    return res.status(401).json({ error: 'Usuário não autenticado' });
                }
                const { to, message } = req.body;
                if (!to || !message) {
                    return res.status(400).json({ error: 'Destinatário e mensagem são obrigatórios' });
                }
                const result = await this.whatsappService.sendMessage(userId, { to, message });
                return res.json({ message: result });
            }
            catch (error) {
                if (error.message.includes('não configurado') ||
                    error.message.includes('desativado') ||
                    error.message.includes('limite')) {
                    return res.status(400).json({ error: error.message });
                }
                return res.status(500).json({ error: 'Erro interno do servidor' });
            }
        }
        async getMessages(req, res) {
            try {
                const userId = req.user?.id;
                if (!userId) {
                    return res.status(401).json({ error: 'Usuário não autenticado' });
                }
                const page = parseInt(req.query.page) || 1;
                const limit = parseInt(req.query.limit) || 20;
                const result = await this.whatsappService.getMessages(userId, page, limit);
                return res.json(result);
            }
            catch (error) {
                return res.status(500).json({ error: 'Erro interno do servidor' });
            }
        }
    }
    let whatsappController;
    let mockReq;
    let mockRes;
    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        // Create controller instance
        whatsappController = new TestWhatsAppController(mockWhatsAppService);
        // Mock request and response objects
        mockReq = {
            user: { id: 'user-1' },
            body: {},
            query: {}
        };
        mockRes = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis()
        };
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('getConfig', () => {
        it('should return WhatsApp config successfully', async () => {
            const mockConfig = {
                id: 'config-1',
                userId: 'user-1',
                twilioAccountSid: 'test_sid',
                twilioPhoneNumber: '+1234567890',
                isActive: true,
                dailyLimit: 1000
            };
            mockWhatsAppService.getConfig.mockResolvedValue(mockConfig);
            await whatsappController.getConfig(mockReq, mockRes);
            expect(mockWhatsAppService.getConfig).toHaveBeenCalledWith('user-1');
            expect(mockRes.json).toHaveBeenCalledWith({ config: mockConfig });
        });
        it('should return 401 if user not authenticated', async () => {
            mockReq.user = null;
            await whatsappController.getConfig(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(401);
            expect(mockRes.json).toHaveBeenCalledWith({ error: 'Usuário não autenticado' });
        });
        it('should return 500 on service error', async () => {
            mockWhatsAppService.getConfig.mockRejectedValue(new Error('Database error'));
            await whatsappController.getConfig(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({ error: 'Erro interno do servidor' });
        });
    });
    describe('updateConfig', () => {
        it('should update WhatsApp config successfully', async () => {
            const configData = {
                twilioAccountSid: 'new_sid',
                twilioAuthToken: 'new_token',
                twilioPhoneNumber: '+1234567890'
            };
            const updatedConfig = {
                id: 'config-1',
                userId: 'user-1',
                ...configData,
                isActive: true
            };
            mockReq.body = configData;
            mockWhatsAppService.updateConfig.mockResolvedValue(updatedConfig);
            await whatsappController.updateConfig(mockReq, mockRes);
            expect(mockWhatsAppService.updateConfig).toHaveBeenCalledWith('user-1', configData);
            expect(mockRes.json).toHaveBeenCalledWith({ config: updatedConfig });
        });
    });
    describe('sendMessage', () => {
        it('should send message successfully', async () => {
            const messageData = {
                to: '+1987654321',
                message: 'Hello, World!'
            };
            const sentMessage = {
                id: 'msg-1',
                userId: 'user-1',
                to: messageData.to,
                body: messageData.message,
                status: 'queued'
            };
            mockReq.body = messageData;
            mockWhatsAppService.sendMessage.mockResolvedValue(sentMessage);
            await whatsappController.sendMessage(mockReq, mockRes);
            expect(mockWhatsAppService.sendMessage).toHaveBeenCalledWith('user-1', messageData);
            expect(mockRes.json).toHaveBeenCalledWith({ message: sentMessage });
        });
        it('should return 400 if to or message is missing', async () => {
            mockReq.body = { to: '+1987654321' }; // missing message
            await whatsappController.sendMessage(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Destinatário e mensagem são obrigatórios'
            });
        });
        it('should return 400 for WhatsApp service errors', async () => {
            mockReq.body = { to: '+1987654321', message: 'Hello' };
            mockWhatsAppService.sendMessage.mockRejectedValue(new Error('WhatsApp não configurado'));
            await whatsappController.sendMessage(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'WhatsApp não configurado'
            });
        });
    });
    describe('getMessages', () => {
        it('should return paginated messages', async () => {
            const mockResult = {
                messages: [
                    {
                        id: 'msg-1',
                        userId: 'user-1',
                        to: '+1987654321',
                        body: 'Hello',
                        status: 'delivered'
                    }
                ],
                total: 1,
                page: 1,
                limit: 20,
                totalPages: 1
            };
            mockWhatsAppService.getMessages.mockResolvedValue(mockResult);
            await whatsappController.getMessages(mockReq, mockRes);
            expect(mockWhatsAppService.getMessages).toHaveBeenCalledWith('user-1', 1, 20);
            expect(mockRes.json).toHaveBeenCalledWith(mockResult);
        });
        it('should use custom page and limit from query', async () => {
            mockReq.query = { page: '2', limit: '10' };
            const mockResult = {
                messages: [],
                total: 0,
                page: 2,
                limit: 10,
                totalPages: 0
            };
            mockWhatsAppService.getMessages.mockResolvedValue(mockResult);
            await whatsappController.getMessages(mockReq, mockRes);
            expect(mockWhatsAppService.getMessages).toHaveBeenCalledWith('user-1', 2, 10);
        });
    });
    // Basic functionality test
    it('should have basic Jest functionality working', () => {
        expect(1 + 1).toBe(2);
        expect('controller').toBe('controller');
        expect(true).toBeTruthy();
    });
    // Mock functionality test
    it('should have Jest mocks working for controller', () => {
        const mockFn = jest.fn();
        mockFn('controller-test');
        expect(mockFn).toHaveBeenCalledWith('controller-test');
        expect(mockFn).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,