8176e044fa75920bd5b09cfa4440fbda
/* istanbul ignore next */
function cov_267kk8lzns() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\google-ads.routes.ts";
  var hash = "0c8afa879e2a04a8b5646bf2eccf694d7dcf1e6d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\google-ads.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 9,
          column: 2
        }
      },
      "1": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 15,
          column: 2
        }
      },
      "2": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 19,
          column: 2
        }
      },
      "3": {
        start: {
          line: 20,
          column: 28
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "4": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 26,
          column: 2
        }
      },
      "5": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 31,
          column: 2
        }
      },
      "6": {
        start: {
          line: 34,
          column: 26
        },
        end: {
          line: 34,
          column: 45
        }
      },
      "7": {
        start: {
          line: 35,
          column: 26
        },
        end: {
          line: 35,
          column: 45
        }
      },
      "8": {
        start: {
          line: 36,
          column: 29
        },
        end: {
          line: 36,
          column: 79
        }
      },
      "9": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 46
        }
      },
      "10": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 88,
          column: 7
        }
      },
      "11": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "12": {
        start: {
          line: 69,
          column: 37
        },
        end: {
          line: 69,
          column: 49
        }
      },
      "13": {
        start: {
          line: 70,
          column: 25
        },
        end: {
          line: 70,
          column: 37
        }
      },
      "14": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "15": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 71
        }
      },
      "16": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 74,
          column: 83
        }
      },
      "17": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 79
        }
      },
      "18": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 82,
          column: 14
        }
      },
      "19": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 72
        }
      },
      "20": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 76
        }
      },
      "21": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 133,
          column: 7
        }
      },
      "22": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "23": {
        start: {
          line: 106,
          column: 26
        },
        end: {
          line: 106,
          column: 39
        }
      },
      "24": {
        start: {
          line: 107,
          column: 32
        },
        end: {
          line: 107,
          column: 83
        }
      },
      "25": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "26": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 86
        }
      },
      "27": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 144
        }
      },
      "28": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "29": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 143
        }
      },
      "30": {
        start: {
          line: 116,
          column: 30
        },
        end: {
          line: 116,
          column: 76
        }
      },
      "31": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "32": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 131
        }
      },
      "33": {
        start: {
          line: 121,
          column: 27
        },
        end: {
          line: 121,
          column: 105
        }
      },
      "34": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 73
        }
      },
      "35": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 84
        }
      },
      "36": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 85
        }
      },
      "37": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 79
        }
      },
      "38": {
        start: {
          line: 130,
          column: 32
        },
        end: {
          line: 130,
          column: 83
        }
      },
      "39": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 124
        }
      },
      "40": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 165,
          column: 7
        }
      },
      "41": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "42": {
        start: {
          line: 151,
          column: 25
        },
        end: {
          line: 151,
          column: 37
        }
      },
      "43": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "44": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 71
        }
      },
      "45": {
        start: {
          line: 155,
          column: 29
        },
        end: {
          line: 155,
          column: 80
        }
      },
      "46": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 159,
          column: 14
        }
      },
      "47": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 79
        }
      },
      "48": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 76
        }
      },
      "49": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 205,
          column: 7
        }
      },
      "50": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "51": {
        start: {
          line: 190,
          column: 25
        },
        end: {
          line: 190,
          column: 37
        }
      },
      "52": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "53": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 71
        }
      },
      "54": {
        start: {
          line: 194,
          column: 36
        },
        end: {
          line: 194,
          column: 49
        }
      },
      "55": {
        start: {
          line: 195,
          column: 30
        },
        end: {
          line: 195,
          column: 87
        }
      },
      "56": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 199,
          column: 14
        }
      },
      "57": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 71
        }
      },
      "58": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 76
        }
      },
      "59": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 248,
          column: 7
        }
      },
      "60": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "61": {
        start: {
          line: 231,
          column: 25
        },
        end: {
          line: 231,
          column: 37
        }
      },
      "62": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "63": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 71
        }
      },
      "64": {
        start: {
          line: 235,
          column: 26
        },
        end: {
          line: 235,
          column: 39
        }
      },
      "65": {
        start: {
          line: 236,
          column: 32
        },
        end: {
          line: 237,
          column: 78
        }
      },
      "66": {
        start: {
          line: 237,
          column: 56
        },
        end: {
          line: 237,
          column: 65
        }
      },
      "67": {
        start: {
          line: 238,
          column: 29
        },
        end: {
          line: 238,
          column: 104
        }
      },
      "68": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 242,
          column: 14
        }
      },
      "69": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 70
        }
      },
      "70": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 76
        }
      },
      "71": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 294,
          column: 7
        }
      },
      "72": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "73": {
        start: {
          line: 275,
          column: 25
        },
        end: {
          line: 275,
          column: 37
        }
      },
      "74": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "75": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 71
        }
      },
      "76": {
        start: {
          line: 279,
          column: 26
        },
        end: {
          line: 279,
          column: 39
        }
      },
      "77": {
        start: {
          line: 280,
          column: 30
        },
        end: {
          line: 283,
          column: 25
        }
      },
      "78": {
        start: {
          line: 284,
          column: 28
        },
        end: {
          line: 284,
          column: 108
        }
      },
      "79": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 288,
          column: 14
        }
      },
      "80": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 69
        }
      },
      "81": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 76
        }
      },
      "82": {
        start: {
          line: 296,
          column: 4
        },
        end: {
          line: 340,
          column: 7
        }
      },
      "83": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "84": {
        start: {
          line: 321,
          column: 25
        },
        end: {
          line: 321,
          column: 37
        }
      },
      "85": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 324,
          column: 13
        }
      },
      "86": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 323,
          column: 71
        }
      },
      "87": {
        start: {
          line: 325,
          column: 26
        },
        end: {
          line: 325,
          column: 39
        }
      },
      "88": {
        start: {
          line: 326,
          column: 30
        },
        end: {
          line: 329,
          column: 25
        }
      },
      "89": {
        start: {
          line: 330,
          column: 32
        },
        end: {
          line: 330,
          column: 114
        }
      },
      "90": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 334,
          column: 14
        }
      },
      "91": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 74
        }
      },
      "92": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 76
        }
      },
      "93": {
        start: {
          line: 342,
          column: 4
        },
        end: {
          line: 389,
          column: 7
        }
      },
      "94": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "95": {
        start: {
          line: 370,
          column: 25
        },
        end: {
          line: 370,
          column: 37
        }
      },
      "96": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 373,
          column: 13
        }
      },
      "97": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 71
        }
      },
      "98": {
        start: {
          line: 374,
          column: 30
        },
        end: {
          line: 374,
          column: 42
        }
      },
      "99": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 64
        }
      },
      "100": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 81
        }
      },
      "101": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 383,
          column: 14
        }
      },
      "102": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 67
        }
      },
      "103": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 76
        }
      },
      "104": {
        start: {
          line: 391,
          column: 4
        },
        end: {
          line: 456,
          column: 7
        }
      },
      "105": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 455,
          column: 9
        }
      },
      "106": {
        start: {
          line: 416,
          column: 25
        },
        end: {
          line: 416,
          column: 37
        }
      },
      "107": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 419,
          column: 13
        }
      },
      "108": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 418,
          column: 71
        }
      },
      "109": {
        start: {
          line: 421,
          column: 32
        },
        end: {
          line: 428,
          column: 14
        }
      },
      "110": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 437,
          column: 13
        }
      },
      "111": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 436,
          column: 18
        }
      },
      "112": {
        start: {
          line: 438,
          column: 30
        },
        end: {
          line: 438,
          column: 90
        }
      },
      "113": {
        start: {
          line: 439,
          column: 27
        },
        end: {
          line: 440,
          column: 48
        }
      },
      "114": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 450,
          column: 14
        }
      },
      "115": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 453,
          column: 80
        }
      },
      "116": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 76
        }
      },
      "117": {
        start: {
          line: 458,
          column: 4
        },
        end: {
          line: 496,
          column: 7
        }
      },
      "118": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 495,
          column: 9
        }
      },
      "119": {
        start: {
          line: 479,
          column: 25
        },
        end: {
          line: 479,
          column: 37
        }
      },
      "120": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 482,
          column: 13
        }
      },
      "121": {
        start: {
          line: 481,
          column: 16
        },
        end: {
          line: 481,
          column: 71
        }
      },
      "122": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 66
        }
      },
      "123": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 84
        }
      },
      "124": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 490,
          column: 14
        }
      },
      "125": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 493,
          column: 80
        }
      },
      "126": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 494,
          column: 76
        }
      },
      "127": {
        start: {
          line: 498,
          column: 4
        },
        end: {
          line: 552,
          column: 7
        }
      },
      "128": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 551,
          column: 9
        }
      },
      "129": {
        start: {
          line: 522,
          column: 25
        },
        end: {
          line: 522,
          column: 37
        }
      },
      "130": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 525,
          column: 13
        }
      },
      "131": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 524,
          column: 71
        }
      },
      "132": {
        start: {
          line: 526,
          column: 26
        },
        end: {
          line: 526,
          column: 39
        }
      },
      "133": {
        start: {
          line: 527,
          column: 32
        },
        end: {
          line: 528,
          column: 78
        }
      },
      "134": {
        start: {
          line: 528,
          column: 56
        },
        end: {
          line: 528,
          column: 65
        }
      },
      "135": {
        start: {
          line: 530,
          column: 29
        },
        end: {
          line: 530,
          column: 104
        }
      },
      "136": {
        start: {
          line: 532,
          column: 34
        },
        end: {
          line: 542,
          column: 15
        }
      },
      "137": {
        start: {
          line: 533,
          column: 35
        },
        end: {
          line: 533,
          column: 70
        }
      },
      "138": {
        start: {
          line: 534,
          column: 33
        },
        end: {
          line: 542,
          column: 13
        }
      },
      "139": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 546,
          column: 14
        }
      },
      "140": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 549,
          column: 76
        }
      },
      "141": {
        start: {
          line: 550,
          column: 12
        },
        end: {
          line: 550,
          column: 76
        }
      }
    },
    fnMap: {
      "0": {
        name: "googleAdsRoutes",
        decl: {
          start: {
            line: 33,
            column: 22
          },
          end: {
            line: 33,
            column: 37
          }
        },
        loc: {
          start: {
            line: 33,
            column: 43
          },
          end: {
            line: 553,
            column: 1
          }
        },
        line: 33
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 67,
            column: 7
          },
          end: {
            line: 67,
            column: 8
          }
        },
        loc: {
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 67
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 104,
            column: 7
          },
          end: {
            line: 104,
            column: 8
          }
        },
        loc: {
          start: {
            line: 104,
            column: 33
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 104
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 149,
            column: 7
          },
          end: {
            line: 149,
            column: 8
          }
        },
        loc: {
          start: {
            line: 149,
            column: 33
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 149
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 188,
            column: 7
          },
          end: {
            line: 188,
            column: 8
          }
        },
        loc: {
          start: {
            line: 188,
            column: 33
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 188
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 229,
            column: 7
          },
          end: {
            line: 229,
            column: 8
          }
        },
        loc: {
          start: {
            line: 229,
            column: 33
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 229
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 237,
            column: 50
          },
          end: {
            line: 237,
            column: 51
          }
        },
        loc: {
          start: {
            line: 237,
            column: 56
          },
          end: {
            line: 237,
            column: 65
          }
        },
        line: 237
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 273,
            column: 7
          },
          end: {
            line: 273,
            column: 8
          }
        },
        loc: {
          start: {
            line: 273,
            column: 33
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 273
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 319,
            column: 7
          },
          end: {
            line: 319,
            column: 8
          }
        },
        loc: {
          start: {
            line: 319,
            column: 33
          },
          end: {
            line: 340,
            column: 5
          }
        },
        line: 319
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 368,
            column: 7
          },
          end: {
            line: 368,
            column: 8
          }
        },
        loc: {
          start: {
            line: 368,
            column: 33
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 368
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 414,
            column: 7
          },
          end: {
            line: 414,
            column: 8
          }
        },
        loc: {
          start: {
            line: 414,
            column: 33
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 414
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 477,
            column: 7
          },
          end: {
            line: 477,
            column: 8
          }
        },
        loc: {
          start: {
            line: 477,
            column: 33
          },
          end: {
            line: 496,
            column: 5
          }
        },
        line: 477
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 520,
            column: 7
          },
          end: {
            line: 520,
            column: 8
          }
        },
        loc: {
          start: {
            line: 520,
            column: 33
          },
          end: {
            line: 552,
            column: 5
          }
        },
        line: 520
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 528,
            column: 50
          },
          end: {
            line: 528,
            column: 51
          }
        },
        loc: {
          start: {
            line: 528,
            column: 56
          },
          end: {
            line: 528,
            column: 65
          }
        },
        line: 528
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 533,
            column: 24
          },
          end: {
            line: 533,
            column: 25
          }
        },
        loc: {
          start: {
            line: 533,
            column: 35
          },
          end: {
            line: 533,
            column: 70
          }
        },
        line: 533
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 534,
            column: 21
          },
          end: {
            line: 534,
            column: 22
          }
        },
        loc: {
          start: {
            line: 534,
            column: 33
          },
          end: {
            line: 542,
            column: 13
          }
        },
        line: 534
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "1": {
        loc: {
          start: {
            line: 107,
            column: 32
          },
          end: {
            line: 107,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 32
          },
          end: {
            line: 107,
            column: 56
          }
        }, {
          start: {
            line: 107,
            column: 60
          },
          end: {
            line: 107,
            column: 83
          }
        }],
        line: 107
      },
      "2": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "3": {
        loc: {
          start: {
            line: 109,
            column: 46
          },
          end: {
            line: 109,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 46
          },
          end: {
            line: 109,
            column: 69
          }
        }, {
          start: {
            line: 109,
            column: 73
          },
          end: {
            line: 109,
            column: 84
          }
        }],
        line: 109
      },
      "4": {
        loc: {
          start: {
            line: 110,
            column: 101
          },
          end: {
            line: 110,
            column: 139
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 101
          },
          end: {
            line: 110,
            column: 124
          }
        }, {
          start: {
            line: 110,
            column: 128
          },
          end: {
            line: 110,
            column: 139
          }
        }],
        line: 110
      },
      "5": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "6": {
        loc: {
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 112,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 112,
            column: 27
          }
        }, {
          start: {
            line: 112,
            column: 31
          },
          end: {
            line: 112,
            column: 43
          }
        }],
        line: 112
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "8": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 33
          }
        }, {
          start: {
            line: 117,
            column: 37
          },
          end: {
            line: 117,
            column: 59
          }
        }],
        line: 117
      },
      "9": {
        loc: {
          start: {
            line: 130,
            column: 32
          },
          end: {
            line: 130,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 32
          },
          end: {
            line: 130,
            column: 56
          }
        }, {
          start: {
            line: 130,
            column: 60
          },
          end: {
            line: 130,
            column: 83
          }
        }],
        line: 130
      },
      "10": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "11": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "12": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "13": {
        loc: {
          start: {
            line: 236,
            column: 32
          },
          end: {
            line: 237,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 16
          },
          end: {
            line: 237,
            column: 66
          }
        }, {
          start: {
            line: 237,
            column: 69
          },
          end: {
            line: 237,
            column: 78
          }
        }],
        line: 236
      },
      "14": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "15": {
        loc: {
          start: {
            line: 280,
            column: 30
          },
          end: {
            line: 283,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 67
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 283,
            column: 25
          }
        }],
        line: 280
      },
      "16": {
        loc: {
          start: {
            line: 280,
            column: 30
          },
          end: {
            line: 280,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 30
          },
          end: {
            line: 280,
            column: 46
          }
        }, {
          start: {
            line: 280,
            column: 50
          },
          end: {
            line: 280,
            column: 64
          }
        }],
        line: 280
      },
      "17": {
        loc: {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 324,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 324,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "18": {
        loc: {
          start: {
            line: 326,
            column: 30
          },
          end: {
            line: 329,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 326,
            column: 67
          },
          end: {
            line: 329,
            column: 13
          }
        }, {
          start: {
            line: 329,
            column: 16
          },
          end: {
            line: 329,
            column: 25
          }
        }],
        line: 326
      },
      "19": {
        loc: {
          start: {
            line: 326,
            column: 30
          },
          end: {
            line: 326,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 30
          },
          end: {
            line: 326,
            column: 46
          }
        }, {
          start: {
            line: 326,
            column: 50
          },
          end: {
            line: 326,
            column: 64
          }
        }],
        line: 326
      },
      "20": {
        loc: {
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "21": {
        loc: {
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "22": {
        loc: {
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 437,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 437,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "23": {
        loc: {
          start: {
            line: 438,
            column: 30
          },
          end: {
            line: 438,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 438,
            column: 30
          },
          end: {
            line: 438,
            column: 51
          }
        }, {
          start: {
            line: 438,
            column: 55
          },
          end: {
            line: 438,
            column: 90
          }
        }],
        line: 438
      },
      "24": {
        loc: {
          start: {
            line: 439,
            column: 27
          },
          end: {
            line: 440,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 439,
            column: 51
          },
          end: {
            line: 439,
            column: 61
          }
        }, {
          start: {
            line: 440,
            column: 16
          },
          end: {
            line: 440,
            column: 48
          }
        }],
        line: 439
      },
      "25": {
        loc: {
          start: {
            line: 440,
            column: 16
          },
          end: {
            line: 440,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 440,
            column: 28
          },
          end: {
            line: 440,
            column: 37
          }
        }, {
          start: {
            line: 440,
            column: 40
          },
          end: {
            line: 440,
            column: 48
          }
        }],
        line: 440
      },
      "26": {
        loc: {
          start: {
            line: 444,
            column: 31
          },
          end: {
            line: 444,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 31
          },
          end: {
            line: 444,
            column: 51
          }
        }, {
          start: {
            line: 444,
            column: 55
          },
          end: {
            line: 444,
            column: 65
          }
        }],
        line: 444
      },
      "27": {
        loc: {
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 482,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 482,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "28": {
        loc: {
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 525,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 525,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 523
      },
      "29": {
        loc: {
          start: {
            line: 527,
            column: 32
          },
          end: {
            line: 528,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 528,
            column: 16
          },
          end: {
            line: 528,
            column: 66
          }
        }, {
          start: {
            line: 528,
            column: 69
          },
          end: {
            line: 528,
            column: 78
          }
        }],
        line: 527
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\google-ads.routes.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\google-ads.routes.ts"],
      sourcesContent: ["import type { FastifyInstance } from 'fastify';\nimport { GoogleAdsService } from '../services/google-ads.service';\nimport { PrismaService } from '../database/prisma.service';\nimport { CryptoService } from '../services/crypto.service';\nimport { authMiddleware } from '../middleware/auth.middleware';\nimport { z } from 'zod';\n\n// Validation schemas\nconst AuthRequestSchema = z.object({\n  redirect_uri: z.string().url('Invalid redirect URI format'),\n});\n\nconst CallbackQuerySchema = z.object({\n  code: z.string().optional(),\n  state: z.string().optional(),\n  error: z.string().optional(),\n  error_description: z.string().optional(),\n});\n\nconst SyncRequestSchema = z.object({\n  force: z.boolean().optional().default(false),\n  customer_id: z.string().optional(),\n});\n\nconst CustomerQuerySchema = z.object({\n  customer_id: z.string().min(1, 'Customer ID is required'),\n});\n\nconst KeywordQuerySchema = z.object({\n  customer_id: z.string().min(1, 'Customer ID is required'),\n  campaign_ids: z.string().optional(),\n});\n\nconst MetricsQuerySchema = z.object({\n  customer_id: z.string().min(1, 'Customer ID is required'),\n  start_date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Invalid date format (YYYY-MM-DD)').optional(),\n  end_date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Invalid date format (YYYY-MM-DD)').optional(),\n});\n\n// Google Ads routes\nexport async function googleAdsRoutes(app: FastifyInstance) {\n  const prismaService = new PrismaService();\n  const cryptoService = new CryptoService();\n  const googleAdsService = new GoogleAdsService(prismaService, cryptoService);\n\n  // Apply auth middleware to all routes\n  app.addHook('preHandler', authMiddleware);\n\n  // POST /api/integrations/google/auth - Initiate OAuth flow\n  app.post('/auth', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Initiate Google Ads OAuth flow',\n      body: {\n        type: 'object',\n        properties: {\n          redirect_uri: { type: 'string', format: 'uri' }\n        },\n        required: ['redirect_uri']\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                authUrl: { type: 'string' },\n                message: { type: 'string' },\n              },\n            },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const { redirect_uri } = request.body as z.infer<typeof AuthRequestSchema>;\n      const user = request.user;\n\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      const authUrl = googleAdsService.generateAuthUrl(user.id, redirect_uri);\n      \n      app.log.info(`Generated Google Ads OAuth URL for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          authUrl,\n          message: 'Redirect user to this URL to complete authorization',\n        },\n      };\n    } catch (error) {\n      app.log.error('Failed to initiate Google Ads OAuth', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n\n  // GET /api/integrations/google/callback - Handle OAuth callback\n  app.get('/callback', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Handle Google Ads OAuth callback',\n      querystring: {\n        type: 'object',\n        properties: {\n          code: { type: 'string' },\n          state: { type: 'string' },\n          error: { type: 'string' },\n          error_description: { type: 'string' }\n        }\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const query = request.query as z.infer<typeof CallbackQuerySchema>;\n      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';\n\n      if (query.error) {\n        app.log.error('OAuth error:', query.error_description || query.error);\n        return reply.redirect(`${frontendUrl}/integrations/google?error=${encodeURIComponent(query.error_description || query.error)}`);\n      }\n\n      if (!query.code || !query.state) {\n        return reply.redirect(`${frontendUrl}/integrations/google?error=${encodeURIComponent('Missing authorization code or state')}`);\n      }\n\n      // Decrypt state to get user info\n      const stateData = JSON.parse(cryptoService.decrypt(query.state));\n      \n      if (!stateData.userId || !stateData.redirectUri) {\n        return reply.redirect(`${frontendUrl}/integrations/google?error=${encodeURIComponent('Invalid state parameter')}`);\n      }\n\n      // Exchange code for tokens\n      const tokens = await googleAdsService.exchangeCodeForToken(\n        query.code,\n        stateData.redirectUri\n      );\n\n      // Store tokens\n      await googleAdsService.storeTokens(stateData.userId, tokens);\n\n      app.log.info(`Google Ads OAuth completed for user ${stateData.userId}`);\n\n      // Redirect to success page\n      return reply.redirect(`${frontendUrl}/integrations/google?success=true`);\n    } catch (error) {\n      app.log.error('Failed to handle Google Ads OAuth callback', error);\n      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';\n      return reply.redirect(`${frontendUrl}/integrations/google?error=${encodeURIComponent('Authorization failed')}`);\n    }\n  });\n\n  // GET /api/integrations/google/accounts - Get customer accounts\n  app.get('/accounts', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Get user\\'s Google Ads customer accounts',\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: { type: 'array' },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const user = request.user;\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      const accounts = await googleAdsService.getCustomerAccounts(user.id);\n      \n      return {\n        success: true,\n        data: accounts,\n      };\n    } catch (error) {\n      app.log.error('Failed to get Google Ads customer accounts', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n\n  // GET /api/integrations/google/campaigns - Get campaigns\n  app.get('/campaigns', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Get campaigns for a customer account',\n      querystring: {\n        type: 'object',\n        properties: {\n          customer_id: { type: 'string' }\n        },\n        required: ['customer_id']\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: { type: 'array' },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const user = request.user;\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      const { customer_id } = request.query as z.infer<typeof CustomerQuerySchema>;\n      const campaigns = await googleAdsService.getCampaigns(user.id, customer_id);\n      \n      return {\n        success: true,\n        data: campaigns,\n      };\n    } catch (error) {\n      app.log.error('Failed to get Google Ads campaigns', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n\n  // GET /api/integrations/google/keywords - Get keywords\n  app.get('/keywords', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Get keywords for campaigns',\n      querystring: {\n        type: 'object',\n        properties: {\n          customer_id: { type: 'string' },\n          campaign_ids: { type: 'string' }\n        },\n        required: ['customer_id']\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: { type: 'array' },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const user = request.user;\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      const query = request.query as z.infer<typeof KeywordQuerySchema>;\n      const campaignIds = query.campaign_ids ? \n        query.campaign_ids.split(',').map(id => id.trim()) : undefined;\n\n      const keywords = await googleAdsService.getKeywords(\n        user.id,\n        query.customer_id,\n        campaignIds\n      );\n      \n      return {\n        success: true,\n        data: keywords,\n      };\n    } catch (error) {\n      app.log.error('Failed to get Google Ads keywords', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n\n  // GET /api/integrations/google/metrics - Get campaign metrics\n  app.get('/metrics', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Get campaign performance metrics',\n      querystring: {\n        type: 'object',\n        properties: {\n          customer_id: { type: 'string' },\n          start_date: { type: 'string', pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$' },\n          end_date: { type: 'string', pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$' }\n        },\n        required: ['customer_id']\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: { type: 'array' },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const user = request.user;\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      const query = request.query as z.infer<typeof MetricsQuerySchema>;\n      const dateRange = query.start_date && query.end_date ? {\n        startDate: query.start_date,\n        endDate: query.end_date,\n      } : undefined;\n\n      const metrics = await googleAdsService.getCampaignMetrics(\n        user.id,\n        query.customer_id,\n        dateRange\n      );\n      \n      return {\n        success: true,\n        data: metrics,\n      };\n    } catch (error) {\n      app.log.error('Failed to get Google Ads metrics', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n\n  // GET /api/integrations/google/search-terms - Get search terms report\n  app.get('/search-terms', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Get search terms report',\n      querystring: {\n        type: 'object',\n        properties: {\n          customer_id: { type: 'string' },\n          start_date: { type: 'string', pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$' },\n          end_date: { type: 'string', pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$' }\n        },\n        required: ['customer_id']\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: { type: 'array' },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const user = request.user;\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      const query = request.query as z.infer<typeof MetricsQuerySchema>;\n      const dateRange = query.start_date && query.end_date ? {\n        startDate: query.start_date,\n        endDate: query.end_date,\n      } : undefined;\n\n      const searchTerms = await googleAdsService.getSearchTermsReport(\n        user.id,\n        query.customer_id,\n        dateRange\n      );\n      \n      return {\n        success: true,\n        data: searchTerms,\n      };\n    } catch (error) {\n      app.log.error('Failed to get Google Ads search terms', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n\n  // POST /api/integrations/google/sync - Trigger manual sync\n  app.post('/sync', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Trigger manual data synchronization',\n      body: {\n        type: 'object',\n        properties: {\n          force: { type: 'boolean' }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                message: { type: 'string' },\n                timestamp: { type: 'string' },\n              },\n            },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const user = request.user;\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      const { force } = request.body as z.infer<typeof SyncRequestSchema>;\n      await googleAdsService.syncUserData(user.id, force);\n      \n      app.log.info(`Manual Google Ads sync completed for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          message: 'Data synchronization completed successfully',\n          timestamp: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      app.log.error('Failed to sync Google Ads data', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n\n  // GET /api/integrations/google/status - Get integration status\n  app.get('/status', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Get Google Ads integration status',\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                connected: { type: 'boolean' },\n                status: { type: 'string' },\n                connectedAt: { type: 'string', format: 'date-time' },\n                lastSync: { type: 'string', format: 'date-time' },\n                expiresAt: { type: 'string', format: 'date-time' },\n              },\n            },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const user = request.user;\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      // Get integration from database\n      const integration = await prismaService.integration.findUnique({\n        where: {\n          userId_platform: {\n            userId: user.id,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n      });\n\n      if (!integration) {\n        return {\n          success: true,\n          data: {\n            connected: false,\n            status: 'not_connected',\n          },\n        };\n      }\n\n      const isExpired = integration.expiresAt && integration.expiresAt <= new Date();\n      const status = !integration.isActive ? 'inactive' : \n                    isExpired ? 'expired' : 'active';\n\n      return {\n        success: true,\n        data: {\n          connected: integration.isActive && !isExpired,\n          status,\n          connectedAt: integration.createdAt,\n          lastSync: integration.lastSync,\n          expiresAt: integration.expiresAt,\n        },\n      };\n    } catch (error) {\n      app.log.error('Failed to get Google Ads integration status', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n\n  // POST /api/integrations/google/disconnect - Disconnect integration\n  app.post('/disconnect', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Disconnect Google Ads integration',\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                message: { type: 'string' },\n              },\n            },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const user = request.user;\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      await googleAdsService.disconnectIntegration(user.id);\n      \n      app.log.info(`Google Ads integration disconnected for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          message: 'Google Ads integration disconnected successfully',\n        },\n      };\n    } catch (error) {\n      app.log.error('Failed to disconnect Google Ads integration', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n\n  // GET /api/integrations/google/quality-scores - Get quality scores\n  app.get('/quality-scores', {\n    schema: {\n      tags: ['Google Ads Integration'],\n      summary: 'Get quality scores for keywords',\n      querystring: {\n        type: 'object',\n        properties: {\n          customer_id: { type: 'string' },\n          campaign_ids: { type: 'string' }\n        },\n        required: ['customer_id']\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: { type: 'array' },\n          },\n        },\n      },\n    },\n  }, async (request, reply) => {\n    try {\n      const user = request.user;\n      if (!user) {\n        return reply.code(401).send({ error: 'Unauthorized' });\n      }\n\n      const query = request.query as z.infer<typeof KeywordQuerySchema>;\n      const campaignIds = query.campaign_ids ? \n        query.campaign_ids.split(',').map(id => id.trim()) : undefined;\n\n      // Get keywords with quality scores\n      const keywords = await googleAdsService.getKeywords(\n        user.id,\n        query.customer_id,\n        campaignIds\n      );\n      \n      // Filter and format quality score data\n      const qualityScores = keywords\n        .filter(keyword => keyword.quality_score !== undefined)\n        .map(keyword => ({\n          keyword_id: keyword.id,\n          keyword_text: keyword.text,\n          quality_score: keyword.quality_score,\n          first_page_cpc: keyword.first_page_cpc,\n          top_of_page_cpc: keyword.top_of_page_cpc,\n          campaign_id: keyword.campaign_id,\n          ad_group_id: keyword.ad_group_id,\n        }));\n      \n      return {\n        success: true,\n        data: qualityScores,\n      };\n    } catch (error) {\n      app.log.error('Failed to get Google Ads quality scores', error);\n      return reply.code(500).send({ error: 'Internal server error' });\n    }\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0c8afa879e2a04a8b5646bf2eccf694d7dcf1e6d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_267kk8lzns = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_267kk8lzns();
import { GoogleAdsService } from '../services/google-ads.service';
import { PrismaService } from '../database/prisma.service';
import { CryptoService } from '../services/crypto.service';
import { authMiddleware } from '../middleware/auth.middleware';
import { z } from 'zod';
// Validation schemas
const AuthRequestSchema =
/* istanbul ignore next */
(cov_267kk8lzns().s[0]++, z.object({
  redirect_uri: z.string().url('Invalid redirect URI format')
}));
const CallbackQuerySchema =
/* istanbul ignore next */
(cov_267kk8lzns().s[1]++, z.object({
  code: z.string().optional(),
  state: z.string().optional(),
  error: z.string().optional(),
  error_description: z.string().optional()
}));
const SyncRequestSchema =
/* istanbul ignore next */
(cov_267kk8lzns().s[2]++, z.object({
  force: z.boolean().optional().default(false),
  customer_id: z.string().optional()
}));
const CustomerQuerySchema =
/* istanbul ignore next */
(cov_267kk8lzns().s[3]++, z.object({
  customer_id: z.string().min(1, 'Customer ID is required')
}));
const KeywordQuerySchema =
/* istanbul ignore next */
(cov_267kk8lzns().s[4]++, z.object({
  customer_id: z.string().min(1, 'Customer ID is required'),
  campaign_ids: z.string().optional()
}));
const MetricsQuerySchema =
/* istanbul ignore next */
(cov_267kk8lzns().s[5]++, z.object({
  customer_id: z.string().min(1, 'Customer ID is required'),
  start_date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, 'Invalid date format (YYYY-MM-DD)').optional(),
  end_date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, 'Invalid date format (YYYY-MM-DD)').optional()
}));
// Google Ads routes
export async function googleAdsRoutes(app) {
  /* istanbul ignore next */
  cov_267kk8lzns().f[0]++;
  const prismaService =
  /* istanbul ignore next */
  (cov_267kk8lzns().s[6]++, new PrismaService());
  const cryptoService =
  /* istanbul ignore next */
  (cov_267kk8lzns().s[7]++, new CryptoService());
  const googleAdsService =
  /* istanbul ignore next */
  (cov_267kk8lzns().s[8]++, new GoogleAdsService(prismaService, cryptoService));
  // Apply auth middleware to all routes
  /* istanbul ignore next */
  cov_267kk8lzns().s[9]++;
  app.addHook('preHandler', authMiddleware);
  // POST /api/integrations/google/auth - Initiate OAuth flow
  /* istanbul ignore next */
  cov_267kk8lzns().s[10]++;
  app.post('/auth', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Initiate Google Ads OAuth flow',
      body: {
        type: 'object',
        properties: {
          redirect_uri: {
            type: 'string',
            format: 'uri'
          }
        },
        required: ['redirect_uri']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                authUrl: {
                  type: 'string'
                },
                message: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[1]++;
    cov_267kk8lzns().s[11]++;
    try {
      const {
        redirect_uri
      } =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[12]++, request.body);
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[13]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[14]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[0][0]++;
        cov_267kk8lzns().s[15]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[0][1]++;
      }
      const authUrl =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[16]++, googleAdsService.generateAuthUrl(user.id, redirect_uri));
      /* istanbul ignore next */
      cov_267kk8lzns().s[17]++;
      app.log.info(`Generated Google Ads OAuth URL for user ${user.id}`);
      /* istanbul ignore next */
      cov_267kk8lzns().s[18]++;
      return {
        success: true,
        data: {
          authUrl,
          message: 'Redirect user to this URL to complete authorization'
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[19]++;
      app.log.error('Failed to initiate Google Ads OAuth', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[20]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
  // GET /api/integrations/google/callback - Handle OAuth callback
  /* istanbul ignore next */
  cov_267kk8lzns().s[21]++;
  app.get('/callback', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Handle Google Ads OAuth callback',
      querystring: {
        type: 'object',
        properties: {
          code: {
            type: 'string'
          },
          state: {
            type: 'string'
          },
          error: {
            type: 'string'
          },
          error_description: {
            type: 'string'
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[2]++;
    cov_267kk8lzns().s[22]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[23]++, request.query);
      const frontendUrl =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[24]++,
      /* istanbul ignore next */
      (cov_267kk8lzns().b[1][0]++, process.env.FRONTEND_URL) ||
      /* istanbul ignore next */
      (cov_267kk8lzns().b[1][1]++, 'http://localhost:3000'));
      /* istanbul ignore next */
      cov_267kk8lzns().s[25]++;
      if (query.error) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[2][0]++;
        cov_267kk8lzns().s[26]++;
        app.log.error('OAuth error:',
        /* istanbul ignore next */
        (cov_267kk8lzns().b[3][0]++, query.error_description) ||
        /* istanbul ignore next */
        (cov_267kk8lzns().b[3][1]++, query.error));
        /* istanbul ignore next */
        cov_267kk8lzns().s[27]++;
        return reply.redirect(`${frontendUrl}/integrations/google?error=${encodeURIComponent(
        /* istanbul ignore next */
        (cov_267kk8lzns().b[4][0]++, query.error_description) ||
        /* istanbul ignore next */
        (cov_267kk8lzns().b[4][1]++, query.error))}`);
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[2][1]++;
      }
      cov_267kk8lzns().s[28]++;
      if (
      /* istanbul ignore next */
      (cov_267kk8lzns().b[6][0]++, !query.code) ||
      /* istanbul ignore next */
      (cov_267kk8lzns().b[6][1]++, !query.state)) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[5][0]++;
        cov_267kk8lzns().s[29]++;
        return reply.redirect(`${frontendUrl}/integrations/google?error=${encodeURIComponent('Missing authorization code or state')}`);
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[5][1]++;
      }
      // Decrypt state to get user info
      const stateData =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[30]++, JSON.parse(cryptoService.decrypt(query.state)));
      /* istanbul ignore next */
      cov_267kk8lzns().s[31]++;
      if (
      /* istanbul ignore next */
      (cov_267kk8lzns().b[8][0]++, !stateData.userId) ||
      /* istanbul ignore next */
      (cov_267kk8lzns().b[8][1]++, !stateData.redirectUri)) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[7][0]++;
        cov_267kk8lzns().s[32]++;
        return reply.redirect(`${frontendUrl}/integrations/google?error=${encodeURIComponent('Invalid state parameter')}`);
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[7][1]++;
      }
      // Exchange code for tokens
      const tokens =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[33]++, await googleAdsService.exchangeCodeForToken(query.code, stateData.redirectUri));
      // Store tokens
      /* istanbul ignore next */
      cov_267kk8lzns().s[34]++;
      await googleAdsService.storeTokens(stateData.userId, tokens);
      /* istanbul ignore next */
      cov_267kk8lzns().s[35]++;
      app.log.info(`Google Ads OAuth completed for user ${stateData.userId}`);
      // Redirect to success page
      /* istanbul ignore next */
      cov_267kk8lzns().s[36]++;
      return reply.redirect(`${frontendUrl}/integrations/google?success=true`);
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[37]++;
      app.log.error('Failed to handle Google Ads OAuth callback', error);
      const frontendUrl =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[38]++,
      /* istanbul ignore next */
      (cov_267kk8lzns().b[9][0]++, process.env.FRONTEND_URL) ||
      /* istanbul ignore next */
      (cov_267kk8lzns().b[9][1]++, 'http://localhost:3000'));
      /* istanbul ignore next */
      cov_267kk8lzns().s[39]++;
      return reply.redirect(`${frontendUrl}/integrations/google?error=${encodeURIComponent('Authorization failed')}`);
    }
  });
  // GET /api/integrations/google/accounts - Get customer accounts
  /* istanbul ignore next */
  cov_267kk8lzns().s[40]++;
  app.get('/accounts', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Get user\'s Google Ads customer accounts',
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[3]++;
    cov_267kk8lzns().s[41]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[42]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[43]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[10][0]++;
        cov_267kk8lzns().s[44]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[10][1]++;
      }
      const accounts =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[45]++, await googleAdsService.getCustomerAccounts(user.id));
      /* istanbul ignore next */
      cov_267kk8lzns().s[46]++;
      return {
        success: true,
        data: accounts
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[47]++;
      app.log.error('Failed to get Google Ads customer accounts', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[48]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
  // GET /api/integrations/google/campaigns - Get campaigns
  /* istanbul ignore next */
  cov_267kk8lzns().s[49]++;
  app.get('/campaigns', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Get campaigns for a customer account',
      querystring: {
        type: 'object',
        properties: {
          customer_id: {
            type: 'string'
          }
        },
        required: ['customer_id']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[4]++;
    cov_267kk8lzns().s[50]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[51]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[52]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[11][0]++;
        cov_267kk8lzns().s[53]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[11][1]++;
      }
      const {
        customer_id
      } =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[54]++, request.query);
      const campaigns =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[55]++, await googleAdsService.getCampaigns(user.id, customer_id));
      /* istanbul ignore next */
      cov_267kk8lzns().s[56]++;
      return {
        success: true,
        data: campaigns
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[57]++;
      app.log.error('Failed to get Google Ads campaigns', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[58]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
  // GET /api/integrations/google/keywords - Get keywords
  /* istanbul ignore next */
  cov_267kk8lzns().s[59]++;
  app.get('/keywords', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Get keywords for campaigns',
      querystring: {
        type: 'object',
        properties: {
          customer_id: {
            type: 'string'
          },
          campaign_ids: {
            type: 'string'
          }
        },
        required: ['customer_id']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[5]++;
    cov_267kk8lzns().s[60]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[61]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[62]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[12][0]++;
        cov_267kk8lzns().s[63]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[12][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[64]++, request.query);
      const campaignIds =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[65]++, query.campaign_ids ?
      /* istanbul ignore next */
      (cov_267kk8lzns().b[13][0]++, query.campaign_ids.split(',').map(id => {
        /* istanbul ignore next */
        cov_267kk8lzns().f[6]++;
        cov_267kk8lzns().s[66]++;
        return id.trim();
      })) :
      /* istanbul ignore next */
      (cov_267kk8lzns().b[13][1]++, undefined));
      const keywords =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[67]++, await googleAdsService.getKeywords(user.id, query.customer_id, campaignIds));
      /* istanbul ignore next */
      cov_267kk8lzns().s[68]++;
      return {
        success: true,
        data: keywords
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[69]++;
      app.log.error('Failed to get Google Ads keywords', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[70]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
  // GET /api/integrations/google/metrics - Get campaign metrics
  /* istanbul ignore next */
  cov_267kk8lzns().s[71]++;
  app.get('/metrics', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Get campaign performance metrics',
      querystring: {
        type: 'object',
        properties: {
          customer_id: {
            type: 'string'
          },
          start_date: {
            type: 'string',
            pattern: '^\\d{4}-\\d{2}-\\d{2}$'
          },
          end_date: {
            type: 'string',
            pattern: '^\\d{4}-\\d{2}-\\d{2}$'
          }
        },
        required: ['customer_id']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[7]++;
    cov_267kk8lzns().s[72]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[73]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[74]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[14][0]++;
        cov_267kk8lzns().s[75]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[14][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[76]++, request.query);
      const dateRange =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[77]++,
      /* istanbul ignore next */
      (cov_267kk8lzns().b[16][0]++, query.start_date) &&
      /* istanbul ignore next */
      (cov_267kk8lzns().b[16][1]++, query.end_date) ?
      /* istanbul ignore next */
      (cov_267kk8lzns().b[15][0]++, {
        startDate: query.start_date,
        endDate: query.end_date
      }) :
      /* istanbul ignore next */
      (cov_267kk8lzns().b[15][1]++, undefined));
      const metrics =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[78]++, await googleAdsService.getCampaignMetrics(user.id, query.customer_id, dateRange));
      /* istanbul ignore next */
      cov_267kk8lzns().s[79]++;
      return {
        success: true,
        data: metrics
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[80]++;
      app.log.error('Failed to get Google Ads metrics', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[81]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
  // GET /api/integrations/google/search-terms - Get search terms report
  /* istanbul ignore next */
  cov_267kk8lzns().s[82]++;
  app.get('/search-terms', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Get search terms report',
      querystring: {
        type: 'object',
        properties: {
          customer_id: {
            type: 'string'
          },
          start_date: {
            type: 'string',
            pattern: '^\\d{4}-\\d{2}-\\d{2}$'
          },
          end_date: {
            type: 'string',
            pattern: '^\\d{4}-\\d{2}-\\d{2}$'
          }
        },
        required: ['customer_id']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[8]++;
    cov_267kk8lzns().s[83]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[84]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[85]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[17][0]++;
        cov_267kk8lzns().s[86]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[17][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[87]++, request.query);
      const dateRange =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[88]++,
      /* istanbul ignore next */
      (cov_267kk8lzns().b[19][0]++, query.start_date) &&
      /* istanbul ignore next */
      (cov_267kk8lzns().b[19][1]++, query.end_date) ?
      /* istanbul ignore next */
      (cov_267kk8lzns().b[18][0]++, {
        startDate: query.start_date,
        endDate: query.end_date
      }) :
      /* istanbul ignore next */
      (cov_267kk8lzns().b[18][1]++, undefined));
      const searchTerms =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[89]++, await googleAdsService.getSearchTermsReport(user.id, query.customer_id, dateRange));
      /* istanbul ignore next */
      cov_267kk8lzns().s[90]++;
      return {
        success: true,
        data: searchTerms
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[91]++;
      app.log.error('Failed to get Google Ads search terms', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[92]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
  // POST /api/integrations/google/sync - Trigger manual sync
  /* istanbul ignore next */
  cov_267kk8lzns().s[93]++;
  app.post('/sync', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Trigger manual data synchronization',
      body: {
        type: 'object',
        properties: {
          force: {
            type: 'boolean'
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                message: {
                  type: 'string'
                },
                timestamp: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[9]++;
    cov_267kk8lzns().s[94]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[95]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[96]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[20][0]++;
        cov_267kk8lzns().s[97]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[20][1]++;
      }
      const {
        force
      } =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[98]++, request.body);
      /* istanbul ignore next */
      cov_267kk8lzns().s[99]++;
      await googleAdsService.syncUserData(user.id, force);
      /* istanbul ignore next */
      cov_267kk8lzns().s[100]++;
      app.log.info(`Manual Google Ads sync completed for user ${user.id}`);
      /* istanbul ignore next */
      cov_267kk8lzns().s[101]++;
      return {
        success: true,
        data: {
          message: 'Data synchronization completed successfully',
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[102]++;
      app.log.error('Failed to sync Google Ads data', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[103]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
  // GET /api/integrations/google/status - Get integration status
  /* istanbul ignore next */
  cov_267kk8lzns().s[104]++;
  app.get('/status', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Get Google Ads integration status',
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                connected: {
                  type: 'boolean'
                },
                status: {
                  type: 'string'
                },
                connectedAt: {
                  type: 'string',
                  format: 'date-time'
                },
                lastSync: {
                  type: 'string',
                  format: 'date-time'
                },
                expiresAt: {
                  type: 'string',
                  format: 'date-time'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[10]++;
    cov_267kk8lzns().s[105]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[106]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[107]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[21][0]++;
        cov_267kk8lzns().s[108]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[21][1]++;
      }
      // Get integration from database
      const integration =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[109]++, await prismaService.integration.findUnique({
        where: {
          userId_platform: {
            userId: user.id,
            platform: 'GOOGLE_ADS'
          }
        }
      }));
      /* istanbul ignore next */
      cov_267kk8lzns().s[110]++;
      if (!integration) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[22][0]++;
        cov_267kk8lzns().s[111]++;
        return {
          success: true,
          data: {
            connected: false,
            status: 'not_connected'
          }
        };
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[22][1]++;
      }
      const isExpired =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[112]++,
      /* istanbul ignore next */
      (cov_267kk8lzns().b[23][0]++, integration.expiresAt) &&
      /* istanbul ignore next */
      (cov_267kk8lzns().b[23][1]++, integration.expiresAt <= new Date()));
      const status =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[113]++, !integration.isActive ?
      /* istanbul ignore next */
      (cov_267kk8lzns().b[24][0]++, 'inactive') :
      /* istanbul ignore next */
      (cov_267kk8lzns().b[24][1]++, isExpired ?
      /* istanbul ignore next */
      (cov_267kk8lzns().b[25][0]++, 'expired') :
      /* istanbul ignore next */
      (cov_267kk8lzns().b[25][1]++, 'active')));
      /* istanbul ignore next */
      cov_267kk8lzns().s[114]++;
      return {
        success: true,
        data: {
          connected:
          /* istanbul ignore next */
          (cov_267kk8lzns().b[26][0]++, integration.isActive) &&
          /* istanbul ignore next */
          (cov_267kk8lzns().b[26][1]++, !isExpired),
          status,
          connectedAt: integration.createdAt,
          lastSync: integration.lastSync,
          expiresAt: integration.expiresAt
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[115]++;
      app.log.error('Failed to get Google Ads integration status', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[116]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
  // POST /api/integrations/google/disconnect - Disconnect integration
  /* istanbul ignore next */
  cov_267kk8lzns().s[117]++;
  app.post('/disconnect', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Disconnect Google Ads integration',
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                message: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[11]++;
    cov_267kk8lzns().s[118]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[119]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[120]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[27][0]++;
        cov_267kk8lzns().s[121]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[27][1]++;
      }
      cov_267kk8lzns().s[122]++;
      await googleAdsService.disconnectIntegration(user.id);
      /* istanbul ignore next */
      cov_267kk8lzns().s[123]++;
      app.log.info(`Google Ads integration disconnected for user ${user.id}`);
      /* istanbul ignore next */
      cov_267kk8lzns().s[124]++;
      return {
        success: true,
        data: {
          message: 'Google Ads integration disconnected successfully'
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[125]++;
      app.log.error('Failed to disconnect Google Ads integration', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[126]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
  // GET /api/integrations/google/quality-scores - Get quality scores
  /* istanbul ignore next */
  cov_267kk8lzns().s[127]++;
  app.get('/quality-scores', {
    schema: {
      tags: ['Google Ads Integration'],
      summary: 'Get quality scores for keywords',
      querystring: {
        type: 'object',
        properties: {
          customer_id: {
            type: 'string'
          },
          campaign_ids: {
            type: 'string'
          }
        },
        required: ['customer_id']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_267kk8lzns().f[12]++;
    cov_267kk8lzns().s[128]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[129]++, request.user);
      /* istanbul ignore next */
      cov_267kk8lzns().s[130]++;
      if (!user) {
        /* istanbul ignore next */
        cov_267kk8lzns().b[28][0]++;
        cov_267kk8lzns().s[131]++;
        return reply.code(401).send({
          error: 'Unauthorized'
        });
      } else
      /* istanbul ignore next */
      {
        cov_267kk8lzns().b[28][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[132]++, request.query);
      const campaignIds =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[133]++, query.campaign_ids ?
      /* istanbul ignore next */
      (cov_267kk8lzns().b[29][0]++, query.campaign_ids.split(',').map(id => {
        /* istanbul ignore next */
        cov_267kk8lzns().f[13]++;
        cov_267kk8lzns().s[134]++;
        return id.trim();
      })) :
      /* istanbul ignore next */
      (cov_267kk8lzns().b[29][1]++, undefined));
      // Get keywords with quality scores
      const keywords =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[135]++, await googleAdsService.getKeywords(user.id, query.customer_id, campaignIds));
      // Filter and format quality score data
      const qualityScores =
      /* istanbul ignore next */
      (cov_267kk8lzns().s[136]++, keywords.filter(keyword => {
        /* istanbul ignore next */
        cov_267kk8lzns().f[14]++;
        cov_267kk8lzns().s[137]++;
        return keyword.quality_score !== undefined;
      }).map(keyword => {
        /* istanbul ignore next */
        cov_267kk8lzns().f[15]++;
        cov_267kk8lzns().s[138]++;
        return {
          keyword_id: keyword.id,
          keyword_text: keyword.text,
          quality_score: keyword.quality_score,
          first_page_cpc: keyword.first_page_cpc,
          top_of_page_cpc: keyword.top_of_page_cpc,
          campaign_id: keyword.campaign_id,
          ad_group_id: keyword.ad_group_id
        };
      }));
      /* istanbul ignore next */
      cov_267kk8lzns().s[139]++;
      return {
        success: true,
        data: qualityScores
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_267kk8lzns().s[140]++;
      app.log.error('Failed to get Google Ads quality scores', error);
      /* istanbul ignore next */
      cov_267kk8lzns().s[141]++;
      return reply.code(500).send({
        error: 'Internal server error'
      });
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjY3a2s4bHpucyIsImFjdHVhbENvdmVyYWdlIiwiR29vZ2xlQWRzU2VydmljZSIsIlByaXNtYVNlcnZpY2UiLCJDcnlwdG9TZXJ2aWNlIiwiYXV0aE1pZGRsZXdhcmUiLCJ6IiwiQXV0aFJlcXVlc3RTY2hlbWEiLCJzIiwib2JqZWN0IiwicmVkaXJlY3RfdXJpIiwic3RyaW5nIiwidXJsIiwiQ2FsbGJhY2tRdWVyeVNjaGVtYSIsImNvZGUiLCJvcHRpb25hbCIsInN0YXRlIiwiZXJyb3IiLCJlcnJvcl9kZXNjcmlwdGlvbiIsIlN5bmNSZXF1ZXN0U2NoZW1hIiwiZm9yY2UiLCJib29sZWFuIiwiZGVmYXVsdCIsImN1c3RvbWVyX2lkIiwiQ3VzdG9tZXJRdWVyeVNjaGVtYSIsIm1pbiIsIktleXdvcmRRdWVyeVNjaGVtYSIsImNhbXBhaWduX2lkcyIsIk1ldHJpY3NRdWVyeVNjaGVtYSIsInN0YXJ0X2RhdGUiLCJyZWdleCIsImVuZF9kYXRlIiwiZ29vZ2xlQWRzUm91dGVzIiwiYXBwIiwiZiIsInByaXNtYVNlcnZpY2UiLCJjcnlwdG9TZXJ2aWNlIiwiZ29vZ2xlQWRzU2VydmljZSIsImFkZEhvb2siLCJwb3N0Iiwic2NoZW1hIiwidGFncyIsInN1bW1hcnkiLCJib2R5IiwidHlwZSIsInByb3BlcnRpZXMiLCJmb3JtYXQiLCJyZXF1aXJlZCIsInJlc3BvbnNlIiwic3VjY2VzcyIsImRhdGEiLCJhdXRoVXJsIiwibWVzc2FnZSIsInJlcXVlc3QiLCJyZXBseSIsInVzZXIiLCJiIiwic2VuZCIsImdlbmVyYXRlQXV0aFVybCIsImlkIiwibG9nIiwiaW5mbyIsImdldCIsInF1ZXJ5c3RyaW5nIiwicXVlcnkiLCJmcm9udGVuZFVybCIsInByb2Nlc3MiLCJlbnYiLCJGUk9OVEVORF9VUkwiLCJyZWRpcmVjdCIsImVuY29kZVVSSUNvbXBvbmVudCIsInN0YXRlRGF0YSIsIkpTT04iLCJwYXJzZSIsImRlY3J5cHQiLCJ1c2VySWQiLCJyZWRpcmVjdFVyaSIsInRva2VucyIsImV4Y2hhbmdlQ29kZUZvclRva2VuIiwic3RvcmVUb2tlbnMiLCJhY2NvdW50cyIsImdldEN1c3RvbWVyQWNjb3VudHMiLCJjYW1wYWlnbnMiLCJnZXRDYW1wYWlnbnMiLCJjYW1wYWlnbklkcyIsInNwbGl0IiwibWFwIiwidHJpbSIsInVuZGVmaW5lZCIsImtleXdvcmRzIiwiZ2V0S2V5d29yZHMiLCJwYXR0ZXJuIiwiZGF0ZVJhbmdlIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsIm1ldHJpY3MiLCJnZXRDYW1wYWlnbk1ldHJpY3MiLCJzZWFyY2hUZXJtcyIsImdldFNlYXJjaFRlcm1zUmVwb3J0IiwidGltZXN0YW1wIiwic3luY1VzZXJEYXRhIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiY29ubmVjdGVkIiwic3RhdHVzIiwiY29ubmVjdGVkQXQiLCJsYXN0U3luYyIsImV4cGlyZXNBdCIsImludGVncmF0aW9uIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwidXNlcklkX3BsYXRmb3JtIiwicGxhdGZvcm0iLCJpc0V4cGlyZWQiLCJpc0FjdGl2ZSIsImNyZWF0ZWRBdCIsImRpc2Nvbm5lY3RJbnRlZ3JhdGlvbiIsInF1YWxpdHlTY29yZXMiLCJmaWx0ZXIiLCJrZXl3b3JkIiwicXVhbGl0eV9zY29yZSIsImtleXdvcmRfaWQiLCJrZXl3b3JkX3RleHQiLCJ0ZXh0IiwiZmlyc3RfcGFnZV9jcGMiLCJ0b3Bfb2ZfcGFnZV9jcGMiLCJjYW1wYWlnbl9pZCIsImFkX2dyb3VwX2lkIl0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxFbnpvIE1hcmNlbG9cXERlc2t0b3BcXFByb2pldG9zIEVtcHJlc2FcXFNhYXMgVXRtaWZ5XFx1dG1pZnktY2xvbmVcXGFwcHNcXGFwaVxcc3JjXFxyb3V0ZXNcXGdvb2dsZS1hZHMucm91dGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRmFzdGlmeUluc3RhbmNlIH0gZnJvbSAnZmFzdGlmeSc7XG5pbXBvcnQgeyBHb29nbGVBZHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZ29vZ2xlLWFkcy5zZXJ2aWNlJztcbmltcG9ydCB7IFByaXNtYVNlcnZpY2UgfSBmcm9tICcuLi9kYXRhYmFzZS9wcmlzbWEuc2VydmljZSc7XG5pbXBvcnQgeyBDcnlwdG9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY3J5cHRvLnNlcnZpY2UnO1xuaW1wb3J0IHsgYXV0aE1pZGRsZXdhcmUgfSBmcm9tICcuLi9taWRkbGV3YXJlL2F1dGgubWlkZGxld2FyZSc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcblxuLy8gVmFsaWRhdGlvbiBzY2hlbWFzXG5jb25zdCBBdXRoUmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgcmVkaXJlY3RfdXJpOiB6LnN0cmluZygpLnVybCgnSW52YWxpZCByZWRpcmVjdCBVUkkgZm9ybWF0JyksXG59KTtcblxuY29uc3QgQ2FsbGJhY2tRdWVyeVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgY29kZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBzdGF0ZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBlcnJvcjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBlcnJvcl9kZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IFN5bmNSZXF1ZXN0U2NoZW1hID0gei5vYmplY3Qoe1xuICBmb3JjZTogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgY3VzdG9tZXJfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBDdXN0b21lclF1ZXJ5U2NoZW1hID0gei5vYmplY3Qoe1xuICBjdXN0b21lcl9pZDogei5zdHJpbmcoKS5taW4oMSwgJ0N1c3RvbWVyIElEIGlzIHJlcXVpcmVkJyksXG59KTtcblxuY29uc3QgS2V5d29yZFF1ZXJ5U2NoZW1hID0gei5vYmplY3Qoe1xuICBjdXN0b21lcl9pZDogei5zdHJpbmcoKS5taW4oMSwgJ0N1c3RvbWVyIElEIGlzIHJlcXVpcmVkJyksXG4gIGNhbXBhaWduX2lkczogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IE1ldHJpY3NRdWVyeVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgY3VzdG9tZXJfaWQ6IHouc3RyaW5nKCkubWluKDEsICdDdXN0b21lciBJRCBpcyByZXF1aXJlZCcpLFxuICBzdGFydF9kYXRlOiB6LnN0cmluZygpLnJlZ2V4KC9eXFxkezR9LVxcZHsyfS1cXGR7Mn0kLywgJ0ludmFsaWQgZGF0ZSBmb3JtYXQgKFlZWVktTU0tREQpJykub3B0aW9uYWwoKSxcbiAgZW5kX2RhdGU6IHouc3RyaW5nKCkucmVnZXgoL15cXGR7NH0tXFxkezJ9LVxcZHsyfSQvLCAnSW52YWxpZCBkYXRlIGZvcm1hdCAoWVlZWS1NTS1ERCknKS5vcHRpb25hbCgpLFxufSk7XG5cbi8vIEdvb2dsZSBBZHMgcm91dGVzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ29vZ2xlQWRzUm91dGVzKGFwcDogRmFzdGlmeUluc3RhbmNlKSB7XG4gIGNvbnN0IHByaXNtYVNlcnZpY2UgPSBuZXcgUHJpc21hU2VydmljZSgpO1xuICBjb25zdCBjcnlwdG9TZXJ2aWNlID0gbmV3IENyeXB0b1NlcnZpY2UoKTtcbiAgY29uc3QgZ29vZ2xlQWRzU2VydmljZSA9IG5ldyBHb29nbGVBZHNTZXJ2aWNlKHByaXNtYVNlcnZpY2UsIGNyeXB0b1NlcnZpY2UpO1xuXG4gIC8vIEFwcGx5IGF1dGggbWlkZGxld2FyZSB0byBhbGwgcm91dGVzXG4gIGFwcC5hZGRIb29rKCdwcmVIYW5kbGVyJywgYXV0aE1pZGRsZXdhcmUpO1xuXG4gIC8vIFBPU1QgL2FwaS9pbnRlZ3JhdGlvbnMvZ29vZ2xlL2F1dGggLSBJbml0aWF0ZSBPQXV0aCBmbG93XG4gIGFwcC5wb3N0KCcvYXV0aCcsIHtcbiAgICBzY2hlbWE6IHtcbiAgICAgIHRhZ3M6IFsnR29vZ2xlIEFkcyBJbnRlZ3JhdGlvbiddLFxuICAgICAgc3VtbWFyeTogJ0luaXRpYXRlIEdvb2dsZSBBZHMgT0F1dGggZmxvdycsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgcmVkaXJlY3RfdXJpOiB7IHR5cGU6ICdzdHJpbmcnLCBmb3JtYXQ6ICd1cmknIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWlyZWQ6IFsncmVkaXJlY3RfdXJpJ11cbiAgICAgIH0sXG4gICAgICByZXNwb25zZToge1xuICAgICAgICAyMDA6IHtcbiAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7IHR5cGU6ICdib29sZWFuJyB9LFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGF1dGhVcmw6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0sIGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHJlZGlyZWN0X3VyaSB9ID0gcmVxdWVzdC5ib2R5IGFzIHouaW5mZXI8dHlwZW9mIEF1dGhSZXF1ZXN0U2NoZW1hPjtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXF1ZXN0LnVzZXI7XG5cbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICByZXR1cm4gcmVwbHkuY29kZSg0MDEpLnNlbmQoeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGF1dGhVcmwgPSBnb29nbGVBZHNTZXJ2aWNlLmdlbmVyYXRlQXV0aFVybCh1c2VyLmlkLCByZWRpcmVjdF91cmkpO1xuICAgICAgXG4gICAgICBhcHAubG9nLmluZm8oYEdlbmVyYXRlZCBHb29nbGUgQWRzIE9BdXRoIFVSTCBmb3IgdXNlciAke3VzZXIuaWR9YCk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBhdXRoVXJsLFxuICAgICAgICAgIG1lc3NhZ2U6ICdSZWRpcmVjdCB1c2VyIHRvIHRoaXMgVVJMIHRvIGNvbXBsZXRlIGF1dGhvcml6YXRpb24nLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYXBwLmxvZy5lcnJvcignRmFpbGVkIHRvIGluaXRpYXRlIEdvb2dsZSBBZHMgT0F1dGgnLCBlcnJvcik7XG4gICAgICByZXR1cm4gcmVwbHkuY29kZSg1MDApLnNlbmQoeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBHRVQgL2FwaS9pbnRlZ3JhdGlvbnMvZ29vZ2xlL2NhbGxiYWNrIC0gSGFuZGxlIE9BdXRoIGNhbGxiYWNrXG4gIGFwcC5nZXQoJy9jYWxsYmFjaycsIHtcbiAgICBzY2hlbWE6IHtcbiAgICAgIHRhZ3M6IFsnR29vZ2xlIEFkcyBJbnRlZ3JhdGlvbiddLFxuICAgICAgc3VtbWFyeTogJ0hhbmRsZSBHb29nbGUgQWRzIE9BdXRoIGNhbGxiYWNrJyxcbiAgICAgIHF1ZXJ5c3RyaW5nOiB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgY29kZTogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgIHN0YXRlOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgZXJyb3I6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogeyB0eXBlOiAnc3RyaW5nJyB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfSwgYXN5bmMgKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gcmVxdWVzdC5xdWVyeSBhcyB6LmluZmVyPHR5cGVvZiBDYWxsYmFja1F1ZXJ5U2NoZW1hPjtcbiAgICAgIGNvbnN0IGZyb250ZW5kVXJsID0gcHJvY2Vzcy5lbnYuRlJPTlRFTkRfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnO1xuXG4gICAgICBpZiAocXVlcnkuZXJyb3IpIHtcbiAgICAgICAgYXBwLmxvZy5lcnJvcignT0F1dGggZXJyb3I6JywgcXVlcnkuZXJyb3JfZGVzY3JpcHRpb24gfHwgcXVlcnkuZXJyb3IpO1xuICAgICAgICByZXR1cm4gcmVwbHkucmVkaXJlY3QoYCR7ZnJvbnRlbmRVcmx9L2ludGVncmF0aW9ucy9nb29nbGU/ZXJyb3I9JHtlbmNvZGVVUklDb21wb25lbnQocXVlcnkuZXJyb3JfZGVzY3JpcHRpb24gfHwgcXVlcnkuZXJyb3IpfWApO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXF1ZXJ5LmNvZGUgfHwgIXF1ZXJ5LnN0YXRlKSB7XG4gICAgICAgIHJldHVybiByZXBseS5yZWRpcmVjdChgJHtmcm9udGVuZFVybH0vaW50ZWdyYXRpb25zL2dvb2dsZT9lcnJvcj0ke2VuY29kZVVSSUNvbXBvbmVudCgnTWlzc2luZyBhdXRob3JpemF0aW9uIGNvZGUgb3Igc3RhdGUnKX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGVjcnlwdCBzdGF0ZSB0byBnZXQgdXNlciBpbmZvXG4gICAgICBjb25zdCBzdGF0ZURhdGEgPSBKU09OLnBhcnNlKGNyeXB0b1NlcnZpY2UuZGVjcnlwdChxdWVyeS5zdGF0ZSkpO1xuICAgICAgXG4gICAgICBpZiAoIXN0YXRlRGF0YS51c2VySWQgfHwgIXN0YXRlRGF0YS5yZWRpcmVjdFVyaSkge1xuICAgICAgICByZXR1cm4gcmVwbHkucmVkaXJlY3QoYCR7ZnJvbnRlbmRVcmx9L2ludGVncmF0aW9ucy9nb29nbGU/ZXJyb3I9JHtlbmNvZGVVUklDb21wb25lbnQoJ0ludmFsaWQgc3RhdGUgcGFyYW1ldGVyJyl9YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEV4Y2hhbmdlIGNvZGUgZm9yIHRva2Vuc1xuICAgICAgY29uc3QgdG9rZW5zID0gYXdhaXQgZ29vZ2xlQWRzU2VydmljZS5leGNoYW5nZUNvZGVGb3JUb2tlbihcbiAgICAgICAgcXVlcnkuY29kZSxcbiAgICAgICAgc3RhdGVEYXRhLnJlZGlyZWN0VXJpXG4gICAgICApO1xuXG4gICAgICAvLyBTdG9yZSB0b2tlbnNcbiAgICAgIGF3YWl0IGdvb2dsZUFkc1NlcnZpY2Uuc3RvcmVUb2tlbnMoc3RhdGVEYXRhLnVzZXJJZCwgdG9rZW5zKTtcblxuICAgICAgYXBwLmxvZy5pbmZvKGBHb29nbGUgQWRzIE9BdXRoIGNvbXBsZXRlZCBmb3IgdXNlciAke3N0YXRlRGF0YS51c2VySWR9YCk7XG5cbiAgICAgIC8vIFJlZGlyZWN0IHRvIHN1Y2Nlc3MgcGFnZVxuICAgICAgcmV0dXJuIHJlcGx5LnJlZGlyZWN0KGAke2Zyb250ZW5kVXJsfS9pbnRlZ3JhdGlvbnMvZ29vZ2xlP3N1Y2Nlc3M9dHJ1ZWApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhcHAubG9nLmVycm9yKCdGYWlsZWQgdG8gaGFuZGxlIEdvb2dsZSBBZHMgT0F1dGggY2FsbGJhY2snLCBlcnJvcik7XG4gICAgICBjb25zdCBmcm9udGVuZFVybCA9IHByb2Nlc3MuZW52LkZST05URU5EX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAwJztcbiAgICAgIHJldHVybiByZXBseS5yZWRpcmVjdChgJHtmcm9udGVuZFVybH0vaW50ZWdyYXRpb25zL2dvb2dsZT9lcnJvcj0ke2VuY29kZVVSSUNvbXBvbmVudCgnQXV0aG9yaXphdGlvbiBmYWlsZWQnKX1gKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEdFVCAvYXBpL2ludGVncmF0aW9ucy9nb29nbGUvYWNjb3VudHMgLSBHZXQgY3VzdG9tZXIgYWNjb3VudHNcbiAgYXBwLmdldCgnL2FjY291bnRzJywge1xuICAgIHNjaGVtYToge1xuICAgICAgdGFnczogWydHb29nbGUgQWRzIEludGVncmF0aW9uJ10sXG4gICAgICBzdW1tYXJ5OiAnR2V0IHVzZXJcXCdzIEdvb2dsZSBBZHMgY3VzdG9tZXIgYWNjb3VudHMnLFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgMjAwOiB7XG4gICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgc3VjY2VzczogeyB0eXBlOiAnYm9vbGVhbicgfSxcbiAgICAgICAgICAgIGRhdGE6IHsgdHlwZTogJ2FycmF5JyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0sIGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gcmVxdWVzdC51c2VyO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMSkuc2VuZCh7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBnb29nbGVBZHNTZXJ2aWNlLmdldEN1c3RvbWVyQWNjb3VudHModXNlci5pZCk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IGFjY291bnRzLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYXBwLmxvZy5lcnJvcignRmFpbGVkIHRvIGdldCBHb29nbGUgQWRzIGN1c3RvbWVyIGFjY291bnRzJywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHJlcGx5LmNvZGUoNTAwKS5zZW5kKHsgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gR0VUIC9hcGkvaW50ZWdyYXRpb25zL2dvb2dsZS9jYW1wYWlnbnMgLSBHZXQgY2FtcGFpZ25zXG4gIGFwcC5nZXQoJy9jYW1wYWlnbnMnLCB7XG4gICAgc2NoZW1hOiB7XG4gICAgICB0YWdzOiBbJ0dvb2dsZSBBZHMgSW50ZWdyYXRpb24nXSxcbiAgICAgIHN1bW1hcnk6ICdHZXQgY2FtcGFpZ25zIGZvciBhIGN1c3RvbWVyIGFjY291bnQnLFxuICAgICAgcXVlcnlzdHJpbmc6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBjdXN0b21lcl9pZDogeyB0eXBlOiAnc3RyaW5nJyB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVpcmVkOiBbJ2N1c3RvbWVyX2lkJ11cbiAgICAgIH0sXG4gICAgICByZXNwb25zZToge1xuICAgICAgICAyMDA6IHtcbiAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7IHR5cGU6ICdib29sZWFuJyB9LFxuICAgICAgICAgICAgZGF0YTogeyB0eXBlOiAnYXJyYXknIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSwgYXN5bmMgKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXF1ZXN0LnVzZXI7XG4gICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcGx5LmNvZGUoNDAxKS5zZW5kKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGN1c3RvbWVyX2lkIH0gPSByZXF1ZXN0LnF1ZXJ5IGFzIHouaW5mZXI8dHlwZW9mIEN1c3RvbWVyUXVlcnlTY2hlbWE+O1xuICAgICAgY29uc3QgY2FtcGFpZ25zID0gYXdhaXQgZ29vZ2xlQWRzU2VydmljZS5nZXRDYW1wYWlnbnModXNlci5pZCwgY3VzdG9tZXJfaWQpO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBjYW1wYWlnbnMsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhcHAubG9nLmVycm9yKCdGYWlsZWQgdG8gZ2V0IEdvb2dsZSBBZHMgY2FtcGFpZ25zJywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHJlcGx5LmNvZGUoNTAwKS5zZW5kKHsgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gR0VUIC9hcGkvaW50ZWdyYXRpb25zL2dvb2dsZS9rZXl3b3JkcyAtIEdldCBrZXl3b3Jkc1xuICBhcHAuZ2V0KCcva2V5d29yZHMnLCB7XG4gICAgc2NoZW1hOiB7XG4gICAgICB0YWdzOiBbJ0dvb2dsZSBBZHMgSW50ZWdyYXRpb24nXSxcbiAgICAgIHN1bW1hcnk6ICdHZXQga2V5d29yZHMgZm9yIGNhbXBhaWducycsXG4gICAgICBxdWVyeXN0cmluZzoge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGN1c3RvbWVyX2lkOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgY2FtcGFpZ25faWRzOiB7IHR5cGU6ICdzdHJpbmcnIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWlyZWQ6IFsnY3VzdG9tZXJfaWQnXVxuICAgICAgfSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIDIwMDoge1xuICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHsgdHlwZTogJ2Jvb2xlYW4nIH0sXG4gICAgICAgICAgICBkYXRhOiB7IHR5cGU6ICdhcnJheScgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9LCBhc3luYyAocmVxdWVzdCwgcmVwbHkpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IHJlcXVlc3QudXNlcjtcbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICByZXR1cm4gcmVwbHkuY29kZSg0MDEpLnNlbmQoeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHF1ZXJ5ID0gcmVxdWVzdC5xdWVyeSBhcyB6LmluZmVyPHR5cGVvZiBLZXl3b3JkUXVlcnlTY2hlbWE+O1xuICAgICAgY29uc3QgY2FtcGFpZ25JZHMgPSBxdWVyeS5jYW1wYWlnbl9pZHMgPyBcbiAgICAgICAgcXVlcnkuY2FtcGFpZ25faWRzLnNwbGl0KCcsJykubWFwKGlkID0+IGlkLnRyaW0oKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGNvbnN0IGtleXdvcmRzID0gYXdhaXQgZ29vZ2xlQWRzU2VydmljZS5nZXRLZXl3b3JkcyhcbiAgICAgICAgdXNlci5pZCxcbiAgICAgICAgcXVlcnkuY3VzdG9tZXJfaWQsXG4gICAgICAgIGNhbXBhaWduSWRzXG4gICAgICApO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBrZXl3b3JkcyxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGFwcC5sb2cuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgR29vZ2xlIEFkcyBrZXl3b3JkcycsIGVycm9yKTtcbiAgICAgIHJldHVybiByZXBseS5jb2RlKDUwMCkuc2VuZCh7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEdFVCAvYXBpL2ludGVncmF0aW9ucy9nb29nbGUvbWV0cmljcyAtIEdldCBjYW1wYWlnbiBtZXRyaWNzXG4gIGFwcC5nZXQoJy9tZXRyaWNzJywge1xuICAgIHNjaGVtYToge1xuICAgICAgdGFnczogWydHb29nbGUgQWRzIEludGVncmF0aW9uJ10sXG4gICAgICBzdW1tYXJ5OiAnR2V0IGNhbXBhaWduIHBlcmZvcm1hbmNlIG1ldHJpY3MnLFxuICAgICAgcXVlcnlzdHJpbmc6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBjdXN0b21lcl9pZDogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgIHN0YXJ0X2RhdGU6IHsgdHlwZTogJ3N0cmluZycsIHBhdHRlcm46ICdeXFxcXGR7NH0tXFxcXGR7Mn0tXFxcXGR7Mn0kJyB9LFxuICAgICAgICAgIGVuZF9kYXRlOiB7IHR5cGU6ICdzdHJpbmcnLCBwYXR0ZXJuOiAnXlxcXFxkezR9LVxcXFxkezJ9LVxcXFxkezJ9JCcgfVxuICAgICAgICB9LFxuICAgICAgICByZXF1aXJlZDogWydjdXN0b21lcl9pZCddXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgMjAwOiB7XG4gICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgc3VjY2VzczogeyB0eXBlOiAnYm9vbGVhbicgfSxcbiAgICAgICAgICAgIGRhdGE6IHsgdHlwZTogJ2FycmF5JyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0sIGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gcmVxdWVzdC51c2VyO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMSkuc2VuZCh7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcXVlcnkgPSByZXF1ZXN0LnF1ZXJ5IGFzIHouaW5mZXI8dHlwZW9mIE1ldHJpY3NRdWVyeVNjaGVtYT47XG4gICAgICBjb25zdCBkYXRlUmFuZ2UgPSBxdWVyeS5zdGFydF9kYXRlICYmIHF1ZXJ5LmVuZF9kYXRlID8ge1xuICAgICAgICBzdGFydERhdGU6IHF1ZXJ5LnN0YXJ0X2RhdGUsXG4gICAgICAgIGVuZERhdGU6IHF1ZXJ5LmVuZF9kYXRlLFxuICAgICAgfSA6IHVuZGVmaW5lZDtcblxuICAgICAgY29uc3QgbWV0cmljcyA9IGF3YWl0IGdvb2dsZUFkc1NlcnZpY2UuZ2V0Q2FtcGFpZ25NZXRyaWNzKFxuICAgICAgICB1c2VyLmlkLFxuICAgICAgICBxdWVyeS5jdXN0b21lcl9pZCxcbiAgICAgICAgZGF0ZVJhbmdlXG4gICAgICApO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBtZXRyaWNzLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYXBwLmxvZy5lcnJvcignRmFpbGVkIHRvIGdldCBHb29nbGUgQWRzIG1ldHJpY3MnLCBlcnJvcik7XG4gICAgICByZXR1cm4gcmVwbHkuY29kZSg1MDApLnNlbmQoeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBHRVQgL2FwaS9pbnRlZ3JhdGlvbnMvZ29vZ2xlL3NlYXJjaC10ZXJtcyAtIEdldCBzZWFyY2ggdGVybXMgcmVwb3J0XG4gIGFwcC5nZXQoJy9zZWFyY2gtdGVybXMnLCB7XG4gICAgc2NoZW1hOiB7XG4gICAgICB0YWdzOiBbJ0dvb2dsZSBBZHMgSW50ZWdyYXRpb24nXSxcbiAgICAgIHN1bW1hcnk6ICdHZXQgc2VhcmNoIHRlcm1zIHJlcG9ydCcsXG4gICAgICBxdWVyeXN0cmluZzoge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGN1c3RvbWVyX2lkOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgc3RhcnRfZGF0ZTogeyB0eXBlOiAnc3RyaW5nJywgcGF0dGVybjogJ15cXFxcZHs0fS1cXFxcZHsyfS1cXFxcZHsyfSQnIH0sXG4gICAgICAgICAgZW5kX2RhdGU6IHsgdHlwZTogJ3N0cmluZycsIHBhdHRlcm46ICdeXFxcXGR7NH0tXFxcXGR7Mn0tXFxcXGR7Mn0kJyB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVpcmVkOiBbJ2N1c3RvbWVyX2lkJ11cbiAgICAgIH0sXG4gICAgICByZXNwb25zZToge1xuICAgICAgICAyMDA6IHtcbiAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7IHR5cGU6ICdib29sZWFuJyB9LFxuICAgICAgICAgICAgZGF0YTogeyB0eXBlOiAnYXJyYXknIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSwgYXN5bmMgKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXF1ZXN0LnVzZXI7XG4gICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcGx5LmNvZGUoNDAxKS5zZW5kKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBxdWVyeSA9IHJlcXVlc3QucXVlcnkgYXMgei5pbmZlcjx0eXBlb2YgTWV0cmljc1F1ZXJ5U2NoZW1hPjtcbiAgICAgIGNvbnN0IGRhdGVSYW5nZSA9IHF1ZXJ5LnN0YXJ0X2RhdGUgJiYgcXVlcnkuZW5kX2RhdGUgPyB7XG4gICAgICAgIHN0YXJ0RGF0ZTogcXVlcnkuc3RhcnRfZGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogcXVlcnkuZW5kX2RhdGUsXG4gICAgICB9IDogdW5kZWZpbmVkO1xuXG4gICAgICBjb25zdCBzZWFyY2hUZXJtcyA9IGF3YWl0IGdvb2dsZUFkc1NlcnZpY2UuZ2V0U2VhcmNoVGVybXNSZXBvcnQoXG4gICAgICAgIHVzZXIuaWQsXG4gICAgICAgIHF1ZXJ5LmN1c3RvbWVyX2lkLFxuICAgICAgICBkYXRlUmFuZ2VcbiAgICAgICk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHNlYXJjaFRlcm1zLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYXBwLmxvZy5lcnJvcignRmFpbGVkIHRvIGdldCBHb29nbGUgQWRzIHNlYXJjaCB0ZXJtcycsIGVycm9yKTtcbiAgICAgIHJldHVybiByZXBseS5jb2RlKDUwMCkuc2VuZCh7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFBPU1QgL2FwaS9pbnRlZ3JhdGlvbnMvZ29vZ2xlL3N5bmMgLSBUcmlnZ2VyIG1hbnVhbCBzeW5jXG4gIGFwcC5wb3N0KCcvc3luYycsIHtcbiAgICBzY2hlbWE6IHtcbiAgICAgIHRhZ3M6IFsnR29vZ2xlIEFkcyBJbnRlZ3JhdGlvbiddLFxuICAgICAgc3VtbWFyeTogJ1RyaWdnZXIgbWFudWFsIGRhdGEgc3luY2hyb25pemF0aW9uJyxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBmb3JjZTogeyB0eXBlOiAnYm9vbGVhbicgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgMjAwOiB7XG4gICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgc3VjY2VzczogeyB0eXBlOiAnYm9vbGVhbicgfSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0sIGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gcmVxdWVzdC51c2VyO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMSkuc2VuZCh7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBmb3JjZSB9ID0gcmVxdWVzdC5ib2R5IGFzIHouaW5mZXI8dHlwZW9mIFN5bmNSZXF1ZXN0U2NoZW1hPjtcbiAgICAgIGF3YWl0IGdvb2dsZUFkc1NlcnZpY2Uuc3luY1VzZXJEYXRhKHVzZXIuaWQsIGZvcmNlKTtcbiAgICAgIFxuICAgICAgYXBwLmxvZy5pbmZvKGBNYW51YWwgR29vZ2xlIEFkcyBzeW5jIGNvbXBsZXRlZCBmb3IgdXNlciAke3VzZXIuaWR9YCk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBtZXNzYWdlOiAnRGF0YSBzeW5jaHJvbml6YXRpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhcHAubG9nLmVycm9yKCdGYWlsZWQgdG8gc3luYyBHb29nbGUgQWRzIGRhdGEnLCBlcnJvcik7XG4gICAgICByZXR1cm4gcmVwbHkuY29kZSg1MDApLnNlbmQoeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBHRVQgL2FwaS9pbnRlZ3JhdGlvbnMvZ29vZ2xlL3N0YXR1cyAtIEdldCBpbnRlZ3JhdGlvbiBzdGF0dXNcbiAgYXBwLmdldCgnL3N0YXR1cycsIHtcbiAgICBzY2hlbWE6IHtcbiAgICAgIHRhZ3M6IFsnR29vZ2xlIEFkcyBJbnRlZ3JhdGlvbiddLFxuICAgICAgc3VtbWFyeTogJ0dldCBHb29nbGUgQWRzIGludGVncmF0aW9uIHN0YXR1cycsXG4gICAgICByZXNwb25zZToge1xuICAgICAgICAyMDA6IHtcbiAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7IHR5cGU6ICdib29sZWFuJyB9LFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGNvbm5lY3RlZDogeyB0eXBlOiAnYm9vbGVhbicgfSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAgICAgICAgICBjb25uZWN0ZWRBdDogeyB0eXBlOiAnc3RyaW5nJywgZm9ybWF0OiAnZGF0ZS10aW1lJyB9LFxuICAgICAgICAgICAgICAgIGxhc3RTeW5jOiB7IHR5cGU6ICdzdHJpbmcnLCBmb3JtYXQ6ICdkYXRlLXRpbWUnIH0sXG4gICAgICAgICAgICAgICAgZXhwaXJlc0F0OiB7IHR5cGU6ICdzdHJpbmcnLCBmb3JtYXQ6ICdkYXRlLXRpbWUnIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0sIGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gcmVxdWVzdC51c2VyO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMSkuc2VuZCh7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IGludGVncmF0aW9uIGZyb20gZGF0YWJhc2VcbiAgICAgIGNvbnN0IGludGVncmF0aW9uID0gYXdhaXQgcHJpc21hU2VydmljZS5pbnRlZ3JhdGlvbi5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICB1c2VySWRfcGxhdGZvcm06IHtcbiAgICAgICAgICAgIHVzZXJJZDogdXNlci5pZCxcbiAgICAgICAgICAgIHBsYXRmb3JtOiAnR09PR0xFX0FEUycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWludGVncmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjb25uZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdHVzOiAnbm90X2Nvbm5lY3RlZCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaXNFeHBpcmVkID0gaW50ZWdyYXRpb24uZXhwaXJlc0F0ICYmIGludGVncmF0aW9uLmV4cGlyZXNBdCA8PSBuZXcgRGF0ZSgpO1xuICAgICAgY29uc3Qgc3RhdHVzID0gIWludGVncmF0aW9uLmlzQWN0aXZlID8gJ2luYWN0aXZlJyA6IFxuICAgICAgICAgICAgICAgICAgICBpc0V4cGlyZWQgPyAnZXhwaXJlZCcgOiAnYWN0aXZlJztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGNvbm5lY3RlZDogaW50ZWdyYXRpb24uaXNBY3RpdmUgJiYgIWlzRXhwaXJlZCxcbiAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgY29ubmVjdGVkQXQ6IGludGVncmF0aW9uLmNyZWF0ZWRBdCxcbiAgICAgICAgICBsYXN0U3luYzogaW50ZWdyYXRpb24ubGFzdFN5bmMsXG4gICAgICAgICAgZXhwaXJlc0F0OiBpbnRlZ3JhdGlvbi5leHBpcmVzQXQsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhcHAubG9nLmVycm9yKCdGYWlsZWQgdG8gZ2V0IEdvb2dsZSBBZHMgaW50ZWdyYXRpb24gc3RhdHVzJywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHJlcGx5LmNvZGUoNTAwKS5zZW5kKHsgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gUE9TVCAvYXBpL2ludGVncmF0aW9ucy9nb29nbGUvZGlzY29ubmVjdCAtIERpc2Nvbm5lY3QgaW50ZWdyYXRpb25cbiAgYXBwLnBvc3QoJy9kaXNjb25uZWN0Jywge1xuICAgIHNjaGVtYToge1xuICAgICAgdGFnczogWydHb29nbGUgQWRzIEludGVncmF0aW9uJ10sXG4gICAgICBzdW1tYXJ5OiAnRGlzY29ubmVjdCBHb29nbGUgQWRzIGludGVncmF0aW9uJyxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIDIwMDoge1xuICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHsgdHlwZTogJ2Jvb2xlYW4nIH0sXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9LCBhc3luYyAocmVxdWVzdCwgcmVwbHkpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IHJlcXVlc3QudXNlcjtcbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICByZXR1cm4gcmVwbHkuY29kZSg0MDEpLnNlbmQoeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IGdvb2dsZUFkc1NlcnZpY2UuZGlzY29ubmVjdEludGVncmF0aW9uKHVzZXIuaWQpO1xuICAgICAgXG4gICAgICBhcHAubG9nLmluZm8oYEdvb2dsZSBBZHMgaW50ZWdyYXRpb24gZGlzY29ubmVjdGVkIGZvciB1c2VyICR7dXNlci5pZH1gKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG1lc3NhZ2U6ICdHb29nbGUgQWRzIGludGVncmF0aW9uIGRpc2Nvbm5lY3RlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYXBwLmxvZy5lcnJvcignRmFpbGVkIHRvIGRpc2Nvbm5lY3QgR29vZ2xlIEFkcyBpbnRlZ3JhdGlvbicsIGVycm9yKTtcbiAgICAgIHJldHVybiByZXBseS5jb2RlKDUwMCkuc2VuZCh7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEdFVCAvYXBpL2ludGVncmF0aW9ucy9nb29nbGUvcXVhbGl0eS1zY29yZXMgLSBHZXQgcXVhbGl0eSBzY29yZXNcbiAgYXBwLmdldCgnL3F1YWxpdHktc2NvcmVzJywge1xuICAgIHNjaGVtYToge1xuICAgICAgdGFnczogWydHb29nbGUgQWRzIEludGVncmF0aW9uJ10sXG4gICAgICBzdW1tYXJ5OiAnR2V0IHF1YWxpdHkgc2NvcmVzIGZvciBrZXl3b3JkcycsXG4gICAgICBxdWVyeXN0cmluZzoge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGN1c3RvbWVyX2lkOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgY2FtcGFpZ25faWRzOiB7IHR5cGU6ICdzdHJpbmcnIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWlyZWQ6IFsnY3VzdG9tZXJfaWQnXVxuICAgICAgfSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIDIwMDoge1xuICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHsgdHlwZTogJ2Jvb2xlYW4nIH0sXG4gICAgICAgICAgICBkYXRhOiB7IHR5cGU6ICdhcnJheScgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9LCBhc3luYyAocmVxdWVzdCwgcmVwbHkpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IHJlcXVlc3QudXNlcjtcbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICByZXR1cm4gcmVwbHkuY29kZSg0MDEpLnNlbmQoeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHF1ZXJ5ID0gcmVxdWVzdC5xdWVyeSBhcyB6LmluZmVyPHR5cGVvZiBLZXl3b3JkUXVlcnlTY2hlbWE+O1xuICAgICAgY29uc3QgY2FtcGFpZ25JZHMgPSBxdWVyeS5jYW1wYWlnbl9pZHMgPyBcbiAgICAgICAgcXVlcnkuY2FtcGFpZ25faWRzLnNwbGl0KCcsJykubWFwKGlkID0+IGlkLnRyaW0oKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAgIC8vIEdldCBrZXl3b3JkcyB3aXRoIHF1YWxpdHkgc2NvcmVzXG4gICAgICBjb25zdCBrZXl3b3JkcyA9IGF3YWl0IGdvb2dsZUFkc1NlcnZpY2UuZ2V0S2V5d29yZHMoXG4gICAgICAgIHVzZXIuaWQsXG4gICAgICAgIHF1ZXJ5LmN1c3RvbWVyX2lkLFxuICAgICAgICBjYW1wYWlnbklkc1xuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gRmlsdGVyIGFuZCBmb3JtYXQgcXVhbGl0eSBzY29yZSBkYXRhXG4gICAgICBjb25zdCBxdWFsaXR5U2NvcmVzID0ga2V5d29yZHNcbiAgICAgICAgLmZpbHRlcihrZXl3b3JkID0+IGtleXdvcmQucXVhbGl0eV9zY29yZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAubWFwKGtleXdvcmQgPT4gKHtcbiAgICAgICAgICBrZXl3b3JkX2lkOiBrZXl3b3JkLmlkLFxuICAgICAgICAgIGtleXdvcmRfdGV4dDoga2V5d29yZC50ZXh0LFxuICAgICAgICAgIHF1YWxpdHlfc2NvcmU6IGtleXdvcmQucXVhbGl0eV9zY29yZSxcbiAgICAgICAgICBmaXJzdF9wYWdlX2NwYzoga2V5d29yZC5maXJzdF9wYWdlX2NwYyxcbiAgICAgICAgICB0b3Bfb2ZfcGFnZV9jcGM6IGtleXdvcmQudG9wX29mX3BhZ2VfY3BjLFxuICAgICAgICAgIGNhbXBhaWduX2lkOiBrZXl3b3JkLmNhbXBhaWduX2lkLFxuICAgICAgICAgIGFkX2dyb3VwX2lkOiBrZXl3b3JkLmFkX2dyb3VwX2lkLFxuICAgICAgICB9KSk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHF1YWxpdHlTY29yZXMsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhcHAubG9nLmVycm9yKCdGYWlsZWQgdG8gZ2V0IEdvb2dsZSBBZHMgcXVhbGl0eSBzY29yZXMnLCBlcnJvcik7XG4gICAgICByZXR1cm4gcmVwbHkuY29kZSg1MDApLnNlbmQoeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSk7XG4gICAgfVxuICB9KTtcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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