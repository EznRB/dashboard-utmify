a12feb10a8f8c37c1600b477c02d153a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContextLogger = exports.logQueue = exports.logWebhook = exports.logPerformance = exports.logSecurity = exports.logAuth = exports.logDatabase = exports.logResponse = exports.logRequest = exports.logError = exports.logLevels = exports.logger = void 0;
const pino_1 = __importDefault(require("pino"));
const env_1 = require("@/config/env");
// Create logger instance
exports.logger = (0, pino_1.default)({
    level: env_1.config.LOG_LEVEL,
    transport: env_1.config.NODE_ENV === 'development' ? {
        target: 'pino-pretty',
        options: {
            colorize: true,
            translateTime: 'HH:MM:ss Z',
            ignore: 'pid,hostname',
            messageFormat: '{levelLabel} - {msg}',
        },
    } : undefined,
    formatters: {
        level: (label) => {
            return { level: label };
        },
    },
    timestamp: pino_1.default.stdTimeFunctions.isoTime,
    base: {
        pid: process.pid,
        hostname: process.env.HOSTNAME || 'unknown',
        service: 'utmify-api',
        version: process.env.npm_package_version || '0.1.0',
    },
});
// Log levels for different scenarios
exports.logLevels = {
    fatal: 60,
    error: 50,
    warn: 40,
    info: 30,
    debug: 20,
    trace: 10,
};
// Helper functions for structured logging
const logError = (error, message, context) => {
    exports.logger.error({
        error: {
            name: error.name,
            message: error.message,
            stack: error.stack,
        },
        ...context,
    }, message || error.message);
};
exports.logError = logError;
const logRequest = (request, message) => {
    exports.logger.info({
        request: {
            method: request.method,
            url: request.url,
            ip: request.ip,
            userAgent: request.userAgent,
            // Don't log sensitive headers
            headers: request.headers ? {
                'content-type': request.headers['content-type'],
                'accept': request.headers['accept'],
                'origin': request.headers['origin'],
            } : undefined,
        },
    }, message || 'Request received');
};
exports.logRequest = logRequest;
const logResponse = (response, message) => {
    const level = response.statusCode >= 500 ? 'error' :
        response.statusCode >= 400 ? 'warn' : 'info';
    exports.logger[level]({
        response: {
            statusCode: response.statusCode,
            responseTime: response.responseTime,
        },
    }, message || 'Request completed');
};
exports.logResponse = logResponse;
const logDatabase = (operation, table, duration, error) => {
    if (error) {
        exports.logger.error({
            database: {
                operation,
                table,
                duration,
                error: {
                    name: error.name,
                    message: error.message,
                },
            },
        }, `Database operation failed: ${operation}`);
    }
    else {
        exports.logger.debug({
            database: {
                operation,
                table,
                duration,
            },
        }, `Database operation: ${operation}`);
    }
};
exports.logDatabase = logDatabase;
const logAuth = (event, userId, email, ip, success = true) => {
    const level = success ? 'info' : 'warn';
    exports.logger[level]({
        auth: {
            event,
            userId,
            email,
            ip,
            success,
        },
    }, `Auth event: ${event}`);
};
exports.logAuth = logAuth;
const logSecurity = (event, details, severity = 'medium') => {
    const level = severity === 'high' ? 'error' : severity === 'medium' ? 'warn' : 'info';
    exports.logger[level]({
        security: {
            event,
            severity,
            ...details,
        },
    }, `Security event: ${event}`);
};
exports.logSecurity = logSecurity;
const logPerformance = (operation, duration, metadata) => {
    const level = duration > 5000 ? 'warn' : duration > 1000 ? 'info' : 'debug';
    exports.logger[level]({
        performance: {
            operation,
            duration,
            ...metadata,
        },
    }, `Performance: ${operation} took ${duration}ms`);
};
exports.logPerformance = logPerformance;
const logWebhook = (event, webhookId, url, success, responseTime, error) => {
    const level = success ? 'info' : 'error';
    exports.logger[level]({
        webhook: {
            event,
            webhookId,
            url,
            success,
            responseTime,
            error: error ? {
                name: error.name,
                message: error.message,
            } : undefined,
        },
    }, `Webhook ${success ? 'delivered' : 'failed'}: ${event}`);
};
exports.logWebhook = logWebhook;
const logQueue = (jobName, jobId, status, duration, error) => {
    const level = status === 'failed' ? 'error' : 'info';
    exports.logger[level]({
        queue: {
            jobName,
            jobId,
            status,
            duration,
            error: error ? {
                name: error.name,
                message: error.message,
            } : undefined,
        },
    }, `Queue job ${status}: ${jobName}`);
};
exports.logQueue = logQueue;
// Create child logger with context
const createContextLogger = (context) => {
    return exports.logger.child(context);
};
exports.createContextLogger = createContextLogger;
// Export default logger
exports.default = exports.logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,