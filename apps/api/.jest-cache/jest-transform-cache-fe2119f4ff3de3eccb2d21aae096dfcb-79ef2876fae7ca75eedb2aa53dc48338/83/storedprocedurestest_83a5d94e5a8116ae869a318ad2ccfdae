e0b3d530c7bb4cf9ce4693f649e6126e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('../database/prisma.service');
const stored_procedures_service_1 = require("../services/stored-procedures.service");
(0, globals_1.describe)('StoredProceduresService', () => {
    let storedProceduresService;
    let mockPrisma;
    const mockOrganizationId = '123e4567-e89b-12d3-a456-426614174000';
    const mockCampaignId = '123e4567-e89b-12d3-a456-426614174001';
    const mockStartDate = new Date('2024-01-01');
    const mockEndDate = new Date('2024-01-31');
    const mockKPIResult = [
        {
            revenue: 5000,
            roas: 250,
            roi: 150,
            ad_spend: 2000,
            cpc: 4,
            cpm: 200,
            cac: 40,
            impressions: 10000,
            clicks: 500,
            conversions: 50,
            ctr: 5,
            conversion_rate: 10,
            ltv: 250,
            arpu: 100,
            margin: 60,
            profit: 3000,
        },
    ];
    const mockTopCampaignsResult = [
        {
            campaign_id: mockCampaignId,
            campaign_name: 'Test Campaign',
            revenue: 5000,
            roas: 250,
            conversions: 50,
            rank: 1,
        },
    ];
    const mockFunnelResult = [
        {
            stage_name: 'Awareness',
            stage_order: 1,
            users: 1000,
            conversion_rate: 50,
            drop_off_rate: 50,
        },
        {
            stage_name: 'Interest',
            stage_order: 2,
            users: 500,
            conversion_rate: 60,
            drop_off_rate: 40,
        },
    ];
    (0, globals_1.beforeEach)(() => {
        // Reset mocks
        globals_1.jest.clearAllMocks();
        // Setup mock implementations
        mockPrisma = {
            $queryRaw: globals_1.jest.fn(),
            $queryRawUnsafe: globals_1.jest.fn(),
            $executeRaw: globals_1.jest.fn(),
            $executeRawUnsafe: globals_1.jest.fn(),
        };
        // Create service instance
        storedProceduresService = new stored_procedures_service_1.StoredProceduresService(mockPrisma);
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.restoreAllMocks();
    });
    (0, globals_1.describe)('calculateKPIMetrics', () => {
        (0, globals_1.it)('should execute KPI calculation stored procedure successfully', async () => {
            mockPrisma.$queryRaw.mockResolvedValue(mockKPIResult);
            const result = await storedProceduresService.calculateKPIMetrics(mockOrganizationId, mockStartDate, mockEndDate);
            (0, globals_1.expect)(mockPrisma.$queryRaw).toHaveBeenCalledWith(globals_1.expect.anything(), // SQL template
            mockOrganizationId, mockStartDate, mockEndDate);
            (0, globals_1.expect)(result).toEqual(mockKPIResult[0]);
        });
        (0, globals_1.it)('should handle empty results gracefully', async () => {
            mockPrisma.$queryRaw.mockResolvedValue([]);
            const result = await storedProceduresService.calculateKPIMetrics(mockOrganizationId, mockStartDate, mockEndDate);
            (0, globals_1.expect)(result).toBeNull();
        });
        (0, globals_1.it)('should handle database errors', async () => {
            mockPrisma.$queryRaw.mockRejectedValue(new Error('Database connection failed'));
            await (0, globals_1.expect)(storedProceduresService.calculateKPIMetrics(mockOrganizationId, mockStartDate, mockEndDate)).rejects.toThrow('Database connection failed');
        });
        (0, globals_1.it)('should validate input parameters', async () => {
            await (0, globals_1.expect)(storedProceduresService.calculateKPIMetrics('', mockStartDate, mockEndDate)).rejects.toThrow('Organization ID is required');
            await (0, globals_1.expect)(storedProceduresService.calculateKPIMetrics(mockOrganizationId, null, mockEndDate)).rejects.toThrow('Start date is required');
            await (0, globals_1.expect)(storedProceduresService.calculateKPIMetrics(mockOrganizationId, mockStartDate, null)).rejects.toThrow('End date is required');
        });
        (0, globals_1.it)('should validate date range', async () => {
            const invalidEndDate = new Date('2023-12-31'); // Before start date
            await (0, globals_1.expect)(storedProceduresService.calculateKPIMetrics(mockOrganizationId, mockStartDate, invalidEndDate)).rejects.toThrow('End date must be after start date');
        });
    });
    (0, globals_1.describe)('getTopCampaigns', () => {
        (0, globals_1.it)('should execute top campaigns stored procedure successfully', async () => {
            mockPrisma.$queryRaw.mockResolvedValue(mockTopCampaignsResult);
            const result = await storedProceduresService.getTopCampaigns(mockOrganizationId, mockStartDate, mockEndDate, 'revenue', 10);
            (0, globals_1.expect)(mockPrisma.$queryRaw).toHaveBeenCalledWith(globals_1.expect.anything(), mockOrganizationId, mockStartDate, mockEndDate, 'revenue', 10);
            (0, globals_1.expect)(result).toEqual(mockTopCampaignsResult);
        });
        (0, globals_1.it)('should use default parameters when not provided', async () => {
            mockPrisma.$queryRaw.mockResolvedValue(mockTopCampaignsResult);
            await storedProceduresService.getTopCampaigns(mockOrganizationId, mockStartDate, mockEndDate);
            (0, globals_1.expect)(mockPrisma.$queryRaw).toHaveBeenCalledWith(globals_1.expect.anything(), mockOrganizationId, mockStartDate, mockEndDate, 'revenue', // default metric
            5 // default limit
            );
        });
        (0, globals_1.it)('should validate metric parameter', async () => {
            await (0, globals_1.expect)(storedProceduresService.getTopCampaigns(mockOrganizationId, mockStartDate, mockEndDate, 'invalid_metric')).rejects.toThrow('Invalid metric');
        });
        (0, globals_1.it)('should validate limit parameter', async () => {
            await (0, globals_1.expect)(storedProceduresService.getTopCampaigns(mockOrganizationId, mockStartDate, mockEndDate, 'revenue', 0)).rejects.toThrow('Limit must be greater than 0');
            await (0, globals_1.expect)(storedProceduresService.getTopCampaigns(mockOrganizationId, mockStartDate, mockEndDate, 'revenue', 101)).rejects.toThrow('Limit cannot exceed 100');
        });
    });
    (0, globals_1.describe)('calculateFunnelMetrics', () => {
        (0, globals_1.it)('should execute funnel calculation stored procedure successfully', async () => {
            mockPrisma.$queryRaw.mockResolvedValue(mockFunnelResult);
            const result = await storedProceduresService.calculateFunnelMetrics(mockOrganizationId, mockStartDate, mockEndDate);
            (0, globals_1.expect)(mockPrisma.$queryRaw).toHaveBeenCalledWith(globals_1.expect.anything(), mockOrganizationId, mockStartDate, mockEndDate);
            (0, globals_1.expect)(result).toEqual(mockFunnelResult);
        });
        (0, globals_1.it)('should handle empty funnel results', async () => {
            mockPrisma.$queryRaw.mockResolvedValue([]);
            const result = await storedProceduresService.calculateFunnelMetrics(mockOrganizationId, mockStartDate, mockEndDate);
            (0, globals_1.expect)(result).toEqual([]);
        });
        (0, globals_1.it)('should calculate funnel conversion rates correctly', async () => {
            const result = await storedProceduresService.calculateFunnelMetrics(mockOrganizationId, mockStartDate, mockEndDate);
            mockPrisma.$queryRaw.mockResolvedValue(mockFunnelResult);
            if (result && result.length > 1) {
                (0, globals_1.expect)(result[0].conversion_rate).toBe(50);
                (0, globals_1.expect)(result[1].conversion_rate).toBe(60);
            }
        });
    });
    (0, globals_1.describe)('updateRealTimeMetrics', () => {
        (0, globals_1.it)('should execute real-time metrics update successfully', async () => {
            mockPrisma.$executeRaw.mockResolvedValue(1);
            await storedProceduresService.updateRealTimeMetrics(mockCampaignId, 'CLICK', { source: 'google' });
            (0, globals_1.expect)(mockPrisma.$executeRaw).toHaveBeenCalledWith(globals_1.expect.anything(), mockCampaignId, 'CLICK', JSON.stringify({ source: 'google' }));
        });
        (0, globals_1.it)('should handle different event types', async () => {
            mockPrisma.$executeRaw.mockResolvedValue(1);
            // Test IMPRESSION event
            await storedProceduresService.updateRealTimeMetrics(mockCampaignId, 'IMPRESSION', {});
            // Test CONVERSION event
            await storedProceduresService.updateRealTimeMetrics(mockCampaignId, 'CONVERSION', { value: 100, orderId: 'order123' });
            (0, globals_1.expect)(mockPrisma.$executeRaw).toHaveBeenCalledTimes(2);
        });
        (0, globals_1.it)('should validate event type', async () => {
            await (0, globals_1.expect)(storedProceduresService.updateRealTimeMetrics(mockCampaignId, 'INVALID_EVENT', {})).rejects.toThrow('Invalid event type');
        });
    });
    (0, globals_1.describe)('aggregateHourlyToDaily', () => {
        (0, globals_1.it)('should execute hourly to daily aggregation successfully', async () => {
            mockPrisma.$executeRaw.mockResolvedValue(10); // 10 records processed
            const targetDate = new Date('2024-01-15');
            const result = await storedProceduresService.aggregateHourlyToDaily(targetDate);
            (0, globals_1.expect)(mockPrisma.$executeRaw).toHaveBeenCalledWith(globals_1.expect.anything(), targetDate);
            (0, globals_1.expect)(result).toBe(10);
        });
        (0, globals_1.it)('should handle no data to aggregate', async () => {
            mockPrisma.$executeRaw.mockResolvedValue(0);
            const targetDate = new Date('2024-01-15');
            const result = await storedProceduresService.aggregateHourlyToDaily(targetDate);
            (0, globals_1.expect)(result).toBe(0);
        });
        (0, globals_1.it)('should validate target date', async () => {
            await (0, globals_1.expect)(storedProceduresService.aggregateHourlyToDaily(null)).rejects.toThrow('Target date is required');
            // Future date validation
            const futureDate = new Date(Date.now() + 24 * 60 * 60 * 1000);
            await (0, globals_1.expect)(storedProceduresService.aggregateHourlyToDaily(futureDate)).rejects.toThrow('Cannot aggregate future dates');
        });
    });
    (0, globals_1.describe)('cleanupOldData', () => {
        (0, globals_1.it)('should execute data cleanup successfully', async () => {
            mockPrisma.$executeRaw.mockResolvedValue(100); // 100 records deleted
            const result = await storedProceduresService.cleanupOldData(90); // 90 days
            (0, globals_1.expect)(mockPrisma.$executeRaw).toHaveBeenCalledWith(globals_1.expect.anything(), 90);
            (0, globals_1.expect)(result).toBe(100);
        });
        (0, globals_1.it)('should use default retention period', async () => {
            mockPrisma.$executeRaw.mockResolvedValue(50);
            await storedProceduresService.cleanupOldData();
            (0, globals_1.expect)(mockPrisma.$executeRaw).toHaveBeenCalledWith(globals_1.expect.anything(), 365 // default retention period
            );
        });
        (0, globals_1.it)('should validate retention period', async () => {
            await (0, globals_1.expect)(storedProceduresService.cleanupOldData(0)).rejects.toThrow('Retention period must be greater than 0');
            await (0, globals_1.expect)(storedProceduresService.cleanupOldData(-1)).rejects.toThrow('Retention period must be greater than 0');
        });
    });
    (0, globals_1.describe)('checkStoredProceduresHealth', () => {
        (0, globals_1.it)('should return healthy status when all procedures exist', async () => {
            const mockHealthResult = [
                {
                    procedure_name: 'calculate_kpi_metrics',
                    exists: true,
                    last_executed: new Date(),
                    execution_count: 100,
                    avg_execution_time: 250,
                },
            ];
            mockPrisma.$queryRaw.mockResolvedValue(mockHealthResult);
            const result = await storedProceduresService.checkStoredProceduresHealth();
            (0, globals_1.expect)(result).toHaveProperty('status', 'healthy');
            (0, globals_1.expect)(result).toHaveProperty('procedures');
            (0, globals_1.expect)(result.procedures).toHaveLength(1);
            (0, globals_1.expect)(result.procedures[0]).toHaveProperty('name', 'calculate_kpi_metrics');
            (0, globals_1.expect)(result.procedures[0]).toHaveProperty('exists', true);
        });
        (0, globals_1.it)('should return unhealthy status when procedures are missing', async () => {
            const mockHealthResult = [
                {
                    procedure_name: 'calculate_kpi_metrics',
                    exists: false,
                    last_executed: null,
                    execution_count: 0,
                    avg_execution_time: 0,
                },
            ];
            mockPrisma.$queryRaw.mockResolvedValue(mockHealthResult);
            const result = await storedProceduresService.checkStoredProceduresHealth();
            (0, globals_1.expect)(result).toHaveProperty('status', 'unhealthy');
            (0, globals_1.expect)(result.procedures[0]).toHaveProperty('exists', false);
        });
        (0, globals_1.it)('should handle database errors during health check', async () => {
            mockPrisma.$queryRaw.mockRejectedValue(new Error('Database error'));
            const result = await storedProceduresService.checkStoredProceduresHealth();
            (0, globals_1.expect)(result).toHaveProperty('status', 'error');
            (0, globals_1.expect)(result).toHaveProperty('error', 'Database error');
        });
    });
    (0, globals_1.describe)('installStoredProcedures', () => {
        (0, globals_1.it)('should install stored procedures successfully', async () => {
            mockPrisma.$executeRawUnsafe.mockResolvedValue(undefined);
            await storedProceduresService.installStoredProcedures();
            // Should execute multiple SQL statements for each procedure
            (0, globals_1.expect)(mockPrisma.$executeRawUnsafe).toHaveBeenCalledTimes(6); // 6 procedures
        });
        (0, globals_1.it)('should handle installation errors gracefully', async () => {
            mockPrisma.$executeRawUnsafe.mockRejectedValue(new Error('SQL syntax error'));
            await (0, globals_1.expect)(storedProceduresService.installStoredProcedures()).rejects.toThrow('SQL syntax error');
        });
    });
    (0, globals_1.describe)('getPerformanceStats', () => {
        (0, globals_1.it)('should return performance statistics', async () => {
            const mockStatsResult = [
                {
                    procedure_name: 'calculate_kpi_metrics',
                    total_executions: 1000,
                    avg_execution_time: 250,
                    min_execution_time: 100,
                    max_execution_time: 500,
                    last_executed: new Date(),
                },
            ];
            mockPrisma.$queryRaw.mockResolvedValue(mockStatsResult);
            const result = await storedProceduresService.getPerformanceStats();
            (0, globals_1.expect)(result).toHaveLength(1);
            (0, globals_1.expect)(result[0]).toHaveProperty('procedureName', 'calculate_kpi_metrics');
            (0, globals_1.expect)(result[0]).toHaveProperty('totalExecutions', 1000);
            (0, globals_1.expect)(result[0]).toHaveProperty('avgExecutionTime', 250);
        });
        (0, globals_1.it)('should handle empty performance stats', async () => {
            mockPrisma.$queryRaw.mockResolvedValue([]);
            const result = await storedProceduresService.getPerformanceStats();
            (0, globals_1.expect)(result).toEqual([]);
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle SQL injection attempts', async () => {
            const maliciousInput = "'; DROP TABLE campaigns; --";
            // The service should use parameterized queries, so this should be safe
            mockPrisma.$queryRaw.mockResolvedValue([]);
            await (0, globals_1.expect)(storedProceduresService.calculateKPIMetrics(maliciousInput, mockStartDate, mockEndDate)).rejects.toThrow('Organization ID is required'); // Should fail validation
        });
        (0, globals_1.it)('should handle connection timeouts', async () => {
            mockPrisma.$queryRaw.mockRejectedValue(new Error('Connection timeout'));
            await (0, globals_1.expect)(storedProceduresService.calculateKPIMetrics(mockOrganizationId, mockStartDate, mockEndDate)).rejects.toThrow('Connection timeout');
        });
        (0, globals_1.it)('should handle memory errors for large datasets', async () => {
            mockPrisma.$queryRaw.mockRejectedValue(new Error('Out of memory'));
            await (0, globals_1.expect)(storedProceduresService.getTopCampaigns(mockOrganizationId, mockStartDate, mockEndDate, 'revenue', 100)).rejects.toThrow('Out of memory');
        });
    });
    (0, globals_1.describe)('Performance', () => {
        (0, globals_1.it)('should complete KPI calculation within reasonable time', async () => {
            mockPrisma.$queryRaw.mockResolvedValue(mockKPIResult);
            const startTime = Date.now();
            await storedProceduresService.calculateKPIMetrics(mockOrganizationId, mockStartDate, mockEndDate);
            const endTime = Date.now();
            // Should complete within 2 seconds (generous for testing)
            (0, globals_1.expect)(endTime - startTime).toBeLessThan(2000);
        });
        (0, globals_1.it)('should handle concurrent procedure calls', async () => {
            mockPrisma.$queryRaw.mockResolvedValue(mockKPIResult);
            const concurrentCalls = 10;
            const promises = Array.from({ length: concurrentCalls }, () => storedProceduresService.calculateKPIMetrics(mockOrganizationId, mockStartDate, mockEndDate));
            const results = await Promise.all(promises);
            (0, globals_1.expect)(results).toHaveLength(concurrentCalls);
            results.forEach(result => {
                (0, globals_1.expect)(result).toEqual(mockKPIResult[0]);
            });
        });
    });
    (0, globals_1.describe)('Data Validation', () => {
        (0, globals_1.it)('should validate UUID format for organization ID', async () => {
            const invalidUUID = 'not-a-uuid';
            await (0, globals_1.expect)(storedProceduresService.calculateKPIMetrics(invalidUUID, mockStartDate, mockEndDate)).rejects.toThrow('Invalid organization ID format');
        });
        (0, globals_1.it)('should validate UUID format for campaign ID', async () => {
            const invalidUUID = 'not-a-uuid';
            await (0, globals_1.expect)(storedProceduresService.updateRealTimeMetrics(invalidUUID, 'CLICK', {})).rejects.toThrow('Invalid campaign ID format');
        });
        (0, globals_1.it)('should validate date objects', async () => {
            const invalidDate = 'not-a-date';
            await (0, globals_1.expect)(storedProceduresService.calculateKPIMetrics(mockOrganizationId, invalidDate, mockEndDate)).rejects.toThrow('Invalid start date');
        });
    });
});
// Integration tests
(0, globals_1.describe)('StoredProceduresService Integration', () => {
    // These tests would require a real database connection
    // and should be run in a separate test environment
    globals_1.it.skip('should integrate with real PostgreSQL database', async () => {
        // Integration test implementation
    });
    globals_1.it.skip('should handle database migrations correctly', async () => {
        // Integration test implementation
    });
    globals_1.it.skip('should maintain data consistency under concurrent load', async () => {
        // Integration test implementation
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,