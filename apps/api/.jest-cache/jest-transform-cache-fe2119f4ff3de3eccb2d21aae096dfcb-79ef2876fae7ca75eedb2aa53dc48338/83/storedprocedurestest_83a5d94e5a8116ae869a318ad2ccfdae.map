{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\stored-procedures.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\stored-procedures.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { PrismaService } from '../database/prisma.service';\nimport { StoredProceduresService } from '../services/stored-procedures.service';\n\n// Mock dependencies\njest.mock('../database/prisma.service');\n\ndescribe('StoredProceduresService', () => {\n  let storedProceduresService: StoredProceduresService;\n  let mockPrisma: jest.Mocked<PrismaService>;\n\n  const mockOrganizationId = '123e4567-e89b-12d3-a456-426614174000';\n  const mockCampaignId = '123e4567-e89b-12d3-a456-426614174001';\n  const mockStartDate = new Date('2024-01-01');\n  const mockEndDate = new Date('2024-01-31');\n\n  const mockKPIResult = [\n    {\n      revenue: 5000,\n      roas: 250,\n      roi: 150,\n      ad_spend: 2000,\n      cpc: 4,\n      cpm: 200,\n      cac: 40,\n      impressions: 10000,\n      clicks: 500,\n      conversions: 50,\n      ctr: 5,\n      conversion_rate: 10,\n      ltv: 250,\n      arpu: 100,\n      margin: 60,\n      profit: 3000,\n    },\n  ];\n\n  const mockTopCampaignsResult = [\n    {\n      campaign_id: mockCampaignId,\n      campaign_name: 'Test Campaign',\n      revenue: 5000,\n      roas: 250,\n      conversions: 50,\n      rank: 1,\n    },\n  ];\n\n  const mockFunnelResult = [\n    {\n      stage_name: 'Awareness',\n      stage_order: 1,\n      users: 1000,\n      conversion_rate: 50,\n      drop_off_rate: 50,\n    },\n    {\n      stage_name: 'Interest',\n      stage_order: 2,\n      users: 500,\n      conversion_rate: 60,\n      drop_off_rate: 40,\n    },\n  ];\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Setup mock implementations\n    mockPrisma = {\n      $queryRaw: jest.fn(),\n      $queryRawUnsafe: jest.fn(),\n      $executeRaw: jest.fn(),\n      $executeRawUnsafe: jest.fn(),\n    } as any;\n\n    // Create service instance\n    storedProceduresService = new StoredProceduresService(mockPrisma);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('calculateKPIMetrics', () => {\n    it('should execute KPI calculation stored procedure successfully', async () => {\n      mockPrisma.$queryRaw.mockResolvedValue(mockKPIResult);\n\n      const result = await storedProceduresService.calculateKPIMetrics(\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate\n      );\n\n      expect(mockPrisma.$queryRaw).toHaveBeenCalledWith(\n        expect.anything(), // SQL template\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate\n      );\n      expect(result).toEqual(mockKPIResult[0]);\n    });\n\n    it('should handle empty results gracefully', async () => {\n      mockPrisma.$queryRaw.mockResolvedValue([]);\n\n      const result = await storedProceduresService.calculateKPIMetrics(\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate\n      );\n\n      expect(result).toBeNull();\n    });\n\n    it('should handle database errors', async () => {\n      mockPrisma.$queryRaw.mockRejectedValue(new Error('Database connection failed'));\n\n      await expect(\n        storedProceduresService.calculateKPIMetrics(\n          mockOrganizationId,\n          mockStartDate,\n          mockEndDate\n        )\n      ).rejects.toThrow('Database connection failed');\n    });\n\n    it('should validate input parameters', async () => {\n      await expect(\n        storedProceduresService.calculateKPIMetrics('', mockStartDate, mockEndDate)\n      ).rejects.toThrow('Organization ID is required');\n\n      await expect(\n        storedProceduresService.calculateKPIMetrics(mockOrganizationId, null as any, mockEndDate)\n      ).rejects.toThrow('Start date is required');\n\n      await expect(\n        storedProceduresService.calculateKPIMetrics(mockOrganizationId, mockStartDate, null as any)\n      ).rejects.toThrow('End date is required');\n    });\n\n    it('should validate date range', async () => {\n      const invalidEndDate = new Date('2023-12-31'); // Before start date\n\n      await expect(\n        storedProceduresService.calculateKPIMetrics(\n          mockOrganizationId,\n          mockStartDate,\n          invalidEndDate\n        )\n      ).rejects.toThrow('End date must be after start date');\n    });\n  });\n\n  describe('getTopCampaigns', () => {\n    it('should execute top campaigns stored procedure successfully', async () => {\n      mockPrisma.$queryRaw.mockResolvedValue(mockTopCampaignsResult);\n\n      const result = await storedProceduresService.getTopCampaigns(\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate,\n        'revenue',\n        10\n      );\n\n      expect(mockPrisma.$queryRaw).toHaveBeenCalledWith(\n        expect.anything(),\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate,\n        'revenue',\n        10\n      );\n      expect(result).toEqual(mockTopCampaignsResult);\n    });\n\n    it('should use default parameters when not provided', async () => {\n      mockPrisma.$queryRaw.mockResolvedValue(mockTopCampaignsResult);\n\n      await storedProceduresService.getTopCampaigns(\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate\n      );\n\n      expect(mockPrisma.$queryRaw).toHaveBeenCalledWith(\n        expect.anything(),\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate,\n        'revenue', // default metric\n        5 // default limit\n      );\n    });\n\n    it('should validate metric parameter', async () => {\n      await expect(\n        storedProceduresService.getTopCampaigns(\n          mockOrganizationId,\n          mockStartDate,\n          mockEndDate,\n          'invalid_metric' as any\n        )\n      ).rejects.toThrow('Invalid metric');\n    });\n\n    it('should validate limit parameter', async () => {\n      await expect(\n        storedProceduresService.getTopCampaigns(\n          mockOrganizationId,\n          mockStartDate,\n          mockEndDate,\n          'revenue',\n          0\n        )\n      ).rejects.toThrow('Limit must be greater than 0');\n\n      await expect(\n        storedProceduresService.getTopCampaigns(\n          mockOrganizationId,\n          mockStartDate,\n          mockEndDate,\n          'revenue',\n          101\n        )\n      ).rejects.toThrow('Limit cannot exceed 100');\n    });\n  });\n\n  describe('calculateFunnelMetrics', () => {\n    it('should execute funnel calculation stored procedure successfully', async () => {\n      mockPrisma.$queryRaw.mockResolvedValue(mockFunnelResult);\n\n      const result = await storedProceduresService.calculateFunnelMetrics(\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate\n      );\n\n      expect(mockPrisma.$queryRaw).toHaveBeenCalledWith(\n        expect.anything(),\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate\n      );\n      expect(result).toEqual(mockFunnelResult);\n    });\n\n    it('should handle empty funnel results', async () => {\n      mockPrisma.$queryRaw.mockResolvedValue([]);\n\n      const result = await storedProceduresService.calculateFunnelMetrics(\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate\n      );\n\n      expect(result).toEqual([]);\n    });\n\n    it('should calculate funnel conversion rates correctly', async () => {\n      const result = await storedProceduresService.calculateFunnelMetrics(\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate\n      );\n\n      mockPrisma.$queryRaw.mockResolvedValue(mockFunnelResult);\n\n      if (result && result.length > 1) {\n        expect(result[0].conversion_rate).toBe(50);\n        expect(result[1].conversion_rate).toBe(60);\n      }\n    });\n  });\n\n  describe('updateRealTimeMetrics', () => {\n    it('should execute real-time metrics update successfully', async () => {\n      mockPrisma.$executeRaw.mockResolvedValue(1);\n\n      await storedProceduresService.updateRealTimeMetrics(\n        mockCampaignId,\n        'CLICK',\n        { source: 'google' }\n      );\n\n      expect(mockPrisma.$executeRaw).toHaveBeenCalledWith(\n        expect.anything(),\n        mockCampaignId,\n        'CLICK',\n        JSON.stringify({ source: 'google' })\n      );\n    });\n\n    it('should handle different event types', async () => {\n      mockPrisma.$executeRaw.mockResolvedValue(1);\n\n      // Test IMPRESSION event\n      await storedProceduresService.updateRealTimeMetrics(\n        mockCampaignId,\n        'IMPRESSION',\n        {}\n      );\n\n      // Test CONVERSION event\n      await storedProceduresService.updateRealTimeMetrics(\n        mockCampaignId,\n        'CONVERSION',\n        { value: 100, orderId: 'order123' }\n      );\n\n      expect(mockPrisma.$executeRaw).toHaveBeenCalledTimes(2);\n    });\n\n    it('should validate event type', async () => {\n      await expect(\n        storedProceduresService.updateRealTimeMetrics(\n          mockCampaignId,\n          'INVALID_EVENT' as any,\n          {}\n        )\n      ).rejects.toThrow('Invalid event type');\n    });\n  });\n\n  describe('aggregateHourlyToDaily', () => {\n    it('should execute hourly to daily aggregation successfully', async () => {\n      mockPrisma.$executeRaw.mockResolvedValue(10); // 10 records processed\n\n      const targetDate = new Date('2024-01-15');\n      const result = await storedProceduresService.aggregateHourlyToDaily(targetDate);\n\n      expect(mockPrisma.$executeRaw).toHaveBeenCalledWith(\n        expect.anything(),\n        targetDate\n      );\n      expect(result).toBe(10);\n    });\n\n    it('should handle no data to aggregate', async () => {\n      mockPrisma.$executeRaw.mockResolvedValue(0);\n\n      const targetDate = new Date('2024-01-15');\n      const result = await storedProceduresService.aggregateHourlyToDaily(targetDate);\n\n      expect(result).toBe(0);\n    });\n\n    it('should validate target date', async () => {\n      await expect(\n        storedProceduresService.aggregateHourlyToDaily(null as any)\n      ).rejects.toThrow('Target date is required');\n\n      // Future date validation\n      const futureDate = new Date(Date.now() + 24 * 60 * 60 * 1000);\n      await expect(\n        storedProceduresService.aggregateHourlyToDaily(futureDate)\n      ).rejects.toThrow('Cannot aggregate future dates');\n    });\n  });\n\n  describe('cleanupOldData', () => {\n    it('should execute data cleanup successfully', async () => {\n      mockPrisma.$executeRaw.mockResolvedValue(100); // 100 records deleted\n\n      const result = await storedProceduresService.cleanupOldData(90); // 90 days\n\n      expect(mockPrisma.$executeRaw).toHaveBeenCalledWith(\n        expect.anything(),\n        90\n      );\n      expect(result).toBe(100);\n    });\n\n    it('should use default retention period', async () => {\n      mockPrisma.$executeRaw.mockResolvedValue(50);\n\n      await storedProceduresService.cleanupOldData();\n\n      expect(mockPrisma.$executeRaw).toHaveBeenCalledWith(\n        expect.anything(),\n        365 // default retention period\n      );\n    });\n\n    it('should validate retention period', async () => {\n      await expect(\n        storedProceduresService.cleanupOldData(0)\n      ).rejects.toThrow('Retention period must be greater than 0');\n\n      await expect(\n        storedProceduresService.cleanupOldData(-1)\n      ).rejects.toThrow('Retention period must be greater than 0');\n    });\n  });\n\n  describe('checkStoredProceduresHealth', () => {\n    it('should return healthy status when all procedures exist', async () => {\n      const mockHealthResult = [\n        {\n          procedure_name: 'calculate_kpi_metrics',\n          exists: true,\n          last_executed: new Date(),\n          execution_count: 100,\n          avg_execution_time: 250,\n        },\n      ];\n\n      mockPrisma.$queryRaw.mockResolvedValue(mockHealthResult);\n\n      const result = await storedProceduresService.checkStoredProceduresHealth();\n\n      expect(result).toHaveProperty('status', 'healthy');\n      expect(result).toHaveProperty('procedures');\n      expect(result.procedures).toHaveLength(1);\n      expect(result.procedures[0]).toHaveProperty('name', 'calculate_kpi_metrics');\n      expect(result.procedures[0]).toHaveProperty('exists', true);\n    });\n\n    it('should return unhealthy status when procedures are missing', async () => {\n      const mockHealthResult = [\n        {\n          procedure_name: 'calculate_kpi_metrics',\n          exists: false,\n          last_executed: null,\n          execution_count: 0,\n          avg_execution_time: 0,\n        },\n      ];\n\n      mockPrisma.$queryRaw.mockResolvedValue(mockHealthResult);\n\n      const result = await storedProceduresService.checkStoredProceduresHealth();\n\n      expect(result).toHaveProperty('status', 'unhealthy');\n      expect(result.procedures[0]).toHaveProperty('exists', false);\n    });\n\n    it('should handle database errors during health check', async () => {\n      mockPrisma.$queryRaw.mockRejectedValue(new Error('Database error'));\n\n      const result = await storedProceduresService.checkStoredProceduresHealth();\n\n      expect(result).toHaveProperty('status', 'error');\n      expect(result).toHaveProperty('error', 'Database error');\n    });\n  });\n\n  describe('installStoredProcedures', () => {\n    it('should install stored procedures successfully', async () => {\n      mockPrisma.$executeRawUnsafe.mockResolvedValue(undefined);\n\n      await storedProceduresService.installStoredProcedures();\n\n      // Should execute multiple SQL statements for each procedure\n      expect(mockPrisma.$executeRawUnsafe).toHaveBeenCalledTimes(6); // 6 procedures\n    });\n\n    it('should handle installation errors gracefully', async () => {\n      mockPrisma.$executeRawUnsafe.mockRejectedValue(new Error('SQL syntax error'));\n\n      await expect(storedProceduresService.installStoredProcedures()).rejects.toThrow(\n        'SQL syntax error'\n      );\n    });\n  });\n\n  describe('getPerformanceStats', () => {\n    it('should return performance statistics', async () => {\n      const mockStatsResult = [\n        {\n          procedure_name: 'calculate_kpi_metrics',\n          total_executions: 1000,\n          avg_execution_time: 250,\n          min_execution_time: 100,\n          max_execution_time: 500,\n          last_executed: new Date(),\n        },\n      ];\n\n      mockPrisma.$queryRaw.mockResolvedValue(mockStatsResult);\n\n      const result = await storedProceduresService.getPerformanceStats();\n\n      expect(result).toHaveLength(1);\n      expect(result[0]).toHaveProperty('procedureName', 'calculate_kpi_metrics');\n      expect(result[0]).toHaveProperty('totalExecutions', 1000);\n      expect(result[0]).toHaveProperty('avgExecutionTime', 250);\n    });\n\n    it('should handle empty performance stats', async () => {\n      mockPrisma.$queryRaw.mockResolvedValue([]);\n\n      const result = await storedProceduresService.getPerformanceStats();\n\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle SQL injection attempts', async () => {\n      const maliciousInput = \"'; DROP TABLE campaigns; --\";\n\n      // The service should use parameterized queries, so this should be safe\n      mockPrisma.$queryRaw.mockResolvedValue([]);\n\n      await expect(\n        storedProceduresService.calculateKPIMetrics(\n          maliciousInput,\n          mockStartDate,\n          mockEndDate\n        )\n      ).rejects.toThrow('Organization ID is required'); // Should fail validation\n    });\n\n    it('should handle connection timeouts', async () => {\n      mockPrisma.$queryRaw.mockRejectedValue(new Error('Connection timeout'));\n\n      await expect(\n        storedProceduresService.calculateKPIMetrics(\n          mockOrganizationId,\n          mockStartDate,\n          mockEndDate\n        )\n      ).rejects.toThrow('Connection timeout');\n    });\n\n    it('should handle memory errors for large datasets', async () => {\n      mockPrisma.$queryRaw.mockRejectedValue(new Error('Out of memory'));\n\n      await expect(\n        storedProceduresService.getTopCampaigns(\n          mockOrganizationId,\n          mockStartDate,\n          mockEndDate,\n          'revenue',\n          100\n        )\n      ).rejects.toThrow('Out of memory');\n    });\n  });\n\n  describe('Performance', () => {\n    it('should complete KPI calculation within reasonable time', async () => {\n      mockPrisma.$queryRaw.mockResolvedValue(mockKPIResult);\n\n      const startTime = Date.now();\n      await storedProceduresService.calculateKPIMetrics(\n        mockOrganizationId,\n        mockStartDate,\n        mockEndDate\n      );\n      const endTime = Date.now();\n\n      // Should complete within 2 seconds (generous for testing)\n      expect(endTime - startTime).toBeLessThan(2000);\n    });\n\n    it('should handle concurrent procedure calls', async () => {\n      mockPrisma.$queryRaw.mockResolvedValue(mockKPIResult);\n\n      const concurrentCalls = 10;\n      const promises = Array.from({ length: concurrentCalls }, () =>\n        storedProceduresService.calculateKPIMetrics(\n          mockOrganizationId,\n          mockStartDate,\n          mockEndDate\n        )\n      );\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(concurrentCalls);\n      results.forEach(result => {\n        expect(result).toEqual(mockKPIResult[0]);\n      });\n    });\n  });\n\n  describe('Data Validation', () => {\n    it('should validate UUID format for organization ID', async () => {\n      const invalidUUID = 'not-a-uuid';\n\n      await expect(\n        storedProceduresService.calculateKPIMetrics(\n          invalidUUID,\n          mockStartDate,\n          mockEndDate\n        )\n      ).rejects.toThrow('Invalid organization ID format');\n    });\n\n    it('should validate UUID format for campaign ID', async () => {\n      const invalidUUID = 'not-a-uuid';\n\n      await expect(\n        storedProceduresService.updateRealTimeMetrics(\n          invalidUUID,\n          'CLICK',\n          {}\n        )\n      ).rejects.toThrow('Invalid campaign ID format');\n    });\n\n    it('should validate date objects', async () => {\n      const invalidDate = 'not-a-date' as any;\n\n      await expect(\n        storedProceduresService.calculateKPIMetrics(\n          mockOrganizationId,\n          invalidDate,\n          mockEndDate\n        )\n      ).rejects.toThrow('Invalid start date');\n    });\n  });\n});\n\n// Integration tests\ndescribe('StoredProceduresService Integration', () => {\n  // These tests would require a real database connection\n  // and should be run in a separate test environment\n  \n  it.skip('should integrate with real PostgreSQL database', async () => {\n    // Integration test implementation\n  });\n\n  it.skip('should handle database migrations correctly', async () => {\n    // Integration test implementation\n  });\n\n  it.skip('should maintain data consistency under concurrent load', async () => {\n    // Integration test implementation\n  });\n});"],"version":3}