{"version":3,"names":["cov_e2lc91ak6","actualCoverage","Injectable","Logger","Cron","PrismaService","ReportsService","EmailService","addDays","addWeeks","addMonths","parseISO","format","ptBR","SchedulerService","s","SchedulerService_1","prisma","reportsService","emailService","logger","name","executionHistory","Map","constructor","f","processScheduledReports","log","activeSchedules","getActiveSchedules","length","results","schedule","shouldExecuteSchedule","b","result","executeSchedule","push","logExecutionResults","error","reportSchedule","findMany","where","isActive","OR","endDate","gte","Date","include","template","user","select","id","email","firstName","lastName","organization","now","lastExecution","get","timeSinceLastExecution","getTime","minimumInterval","getMinimumInterval","frequency","isTimeToExecute","scheduleTime","currentHour","getHours","scheduleHour","dayOfWeek","getDay","scheduleDays","includes","dayOfMonth","getDate","scheduleDay","executedAt","set","reportData","generateReport","templateId","locale","filters","userId","organizationId","update","data","lastExecutedAt","executionCount","increment","emailRecipients","sendScheduledReportEmail","scheduleId","success","reportId","errorCount","lastError","message","recipients","subject","emailContent","getNextExecutionDate","Object","entries","summary","map","key","value","join","process","env","FRONTEND_URL","sendEmail","to","html","nextExecution","successful","filter","r","failed","forEach","createSchedule","create","updateSchedule","deleteSchedule","delete","getSchedulesByUser","type","orderBy","createdAt","getSchedulesByOrganization","executeScheduleManually","findUnique","Error","validateCronExpression","expression","parts","split","getExecutionStats","totalExecutions","successfulExecutions","failedExecutions","calculateNextExecution","hours","minutes","Number","setHours","__decorate","Promise","_d","_a","_b","_c"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\scheduler.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { PrismaService } from './prisma.service';\nimport { ReportsService } from './reports.service';\nimport { EmailService } from './email.service';\nimport { ReportSchedule, ReportStatus, ScheduleFrequency } from '@prisma/client';\nimport { addDays, addWeeks, addMonths, isAfter, parseISO } from 'date-fns';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\ninterface ScheduleExecutionResult {\n  scheduleId: string;\n  success: boolean;\n  reportId?: string;\n  error?: string;\n  executedAt: Date;\n}\n\n@Injectable()\nexport class SchedulerService {\n  private readonly logger = new Logger(SchedulerService.name);\n  private readonly executionHistory = new Map<string, Date>();\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly reportsService: ReportsService,\n    private readonly emailService: EmailService\n  ) {}\n\n  // Main cron job that runs every hour to check for scheduled reports\n  @Cron('0 * * * *') // Every hour at minute 0\n  async processScheduledReports(): Promise<void> {\n    this.logger.log('Processing scheduled reports...');\n\n    try {\n      const activeSchedules = await this.getActiveSchedules();\n      this.logger.log(`Found ${activeSchedules.length} active schedules`);\n\n      const results: ScheduleExecutionResult[] = [];\n\n      for (const schedule of activeSchedules) {\n        if (this.shouldExecuteSchedule(schedule)) {\n          const result = await this.executeSchedule(schedule);\n          results.push(result);\n        }\n      }\n\n      if (results.length > 0) {\n        this.logger.log(`Executed ${results.length} scheduled reports`);\n        await this.logExecutionResults(results);\n      }\n    } catch (error) {\n      this.logger.error('Error processing scheduled reports:', error);\n    }\n  }\n\n  private async getActiveSchedules(): Promise<ReportSchedule[]> {\n    return await this.prisma.reportSchedule.findMany({\n      where: {\n        isActive: true,\n        OR: [\n          { endDate: null },\n          { endDate: { gte: new Date() } }\n        ]\n      },\n      include: {\n        template: true,\n        user: {\n          select: {\n            id: true,\n            email: true,\n            firstName: true,\n            lastName: true\n          }\n        },\n        organization: {\n          select: {\n            id: true,\n            name: true\n          }\n        }\n      }\n    });\n  }\n\n  private shouldExecuteSchedule(schedule: ReportSchedule): boolean {\n    const now = new Date();\n    const lastExecution = this.executionHistory.get(schedule.id);\n\n    // Check if we've already executed this schedule recently\n    if (lastExecution) {\n      const timeSinceLastExecution = now.getTime() - lastExecution.getTime();\n      const minimumInterval = this.getMinimumInterval(schedule.frequency);\n      \n      if (timeSinceLastExecution < minimumInterval) {\n        return false;\n      }\n    }\n\n    // Check if it's time to execute based on frequency and schedule time\n    return this.isTimeToExecute(schedule, now);\n  }\n\n  private getMinimumInterval(frequency: ScheduleFrequency): number {\n    switch (frequency) {\n      case 'DAILY':\n        return 23 * 60 * 60 * 1000; // 23 hours\n      case 'WEEKLY':\n        return 6 * 24 * 60 * 60 * 1000; // 6 days\n      case 'MONTHLY':\n        return 29 * 24 * 60 * 60 * 1000; // 29 days\n      default:\n        return 60 * 60 * 1000; // 1 hour\n    }\n  }\n\n  private isTimeToExecute(schedule: ReportSchedule, now: Date): boolean {\n    const scheduleTime = parseISO(`${format(now, 'yyyy-MM-dd')}T${schedule.scheduleTime}`);\n    const currentHour = now.getHours();\n    const scheduleHour = scheduleTime.getHours();\n\n    // Only execute if we're in the correct hour\n    if (currentHour !== scheduleHour) {\n      return false;\n    }\n\n    switch (schedule.frequency) {\n      case 'DAILY':\n        return true;\n      \n      case 'WEEKLY':\n        const dayOfWeek = now.getDay();\n        const scheduleDays = schedule.scheduleDays || [1]; // Default to Monday\n        return scheduleDays.includes(dayOfWeek);\n      \n      case 'MONTHLY':\n        const dayOfMonth = now.getDate();\n        const scheduleDay = schedule.scheduleDay || 1; // Default to 1st of month\n        return dayOfMonth === scheduleDay;\n      \n      default:\n        return false;\n    }\n  }\n\n  private async executeSchedule(schedule: ReportSchedule): Promise<ScheduleExecutionResult> {\n    const executedAt = new Date();\n    this.executionHistory.set(schedule.id, executedAt);\n\n    try {\n      this.logger.log(`Executing schedule: ${schedule.id} - ${schedule.name}`);\n\n      // Generate the report\n      const reportData = await this.reportsService.generateReport({\n        templateId: schedule.templateId,\n        name: `${schedule.name} - ${format(executedAt, 'dd/MM/yyyy HH:mm', { locale: ptBR })}`,\n        filters: schedule.filters as any,\n        userId: schedule.userId,\n        organizationId: schedule.organizationId\n      });\n\n      // Update last execution time\n      await this.prisma.reportSchedule.update({\n        where: { id: schedule.id },\n        data: {\n          lastExecutedAt: executedAt,\n          executionCount: { increment: 1 }\n        }\n      });\n\n      // Send email if configured\n      if (schedule.emailRecipients && schedule.emailRecipients.length > 0) {\n        await this.sendScheduledReportEmail(schedule, reportData, executedAt);\n      }\n\n      return {\n        scheduleId: schedule.id,\n        success: true,\n        reportId: reportData.id,\n        executedAt\n      };\n    } catch (error) {\n      this.logger.error(`Failed to execute schedule ${schedule.id}:`, error);\n      \n      // Update error count\n      await this.prisma.reportSchedule.update({\n        where: { id: schedule.id },\n        data: {\n          errorCount: { increment: 1 },\n          lastError: error.message\n        }\n      });\n\n      return {\n        scheduleId: schedule.id,\n        success: false,\n        error: error.message,\n        executedAt\n      };\n    }\n  }\n\n  private async sendScheduledReportEmail(\n    schedule: ReportSchedule & { user: any; organization: any },\n    reportData: any,\n    executedAt: Date\n  ): Promise<void> {\n    try {\n      const recipients = schedule.emailRecipients as string[];\n      const subject = `Relatório Agendado: ${schedule.name}`;\n      \n      const emailContent = `\n        <h2>Relatório Agendado Gerado</h2>\n        <p><strong>Nome:</strong> ${schedule.name}</p>\n        <p><strong>Organização:</strong> ${schedule.organization.name}</p>\n        <p><strong>Gerado em:</strong> ${format(executedAt, 'dd/MM/yyyy HH:mm', { locale: ptBR })}</p>\n        <p><strong>Próxima execução:</strong> ${this.getNextExecutionDate(schedule)}</p>\n        \n        <h3>Resumo do Relatório</h3>\n        <ul>\n          ${Object.entries(reportData.data.summary).map(([key, value]) => \n            `<li><strong>${key}:</strong> ${value}</li>`\n          ).join('')}\n        </ul>\n        \n        <p>\n          <a href=\"${process.env.FRONTEND_URL}/reports/${reportData.id}\" \n             style=\"background-color: #3b82f6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n            Ver Relatório Completo\n          </a>\n        </p>\n        \n        <hr>\n        <p style=\"color: #666; font-size: 12px;\">\n          Este é um relatório automático gerado pelo Utmify. \n          Para cancelar ou modificar este agendamento, acesse sua conta.\n        </p>\n      `;\n\n      await this.emailService.sendEmail({\n        to: recipients,\n        subject,\n        html: emailContent\n      });\n\n      this.logger.log(`Scheduled report email sent to ${recipients.length} recipients`);\n    } catch (error) {\n      this.logger.error('Failed to send scheduled report email:', error);\n    }\n  }\n\n  private getNextExecutionDate(schedule: ReportSchedule): string {\n    const now = new Date();\n    let nextExecution: Date;\n\n    switch (schedule.frequency) {\n      case 'DAILY':\n        nextExecution = addDays(now, 1);\n        break;\n      case 'WEEKLY':\n        nextExecution = addWeeks(now, 1);\n        break;\n      case 'MONTHLY':\n        nextExecution = addMonths(now, 1);\n        break;\n      default:\n        nextExecution = addDays(now, 1);\n    }\n\n    return format(nextExecution, 'dd/MM/yyyy HH:mm', { locale: ptBR });\n  }\n\n  private async logExecutionResults(results: ScheduleExecutionResult[]): Promise<void> {\n    const successful = results.filter(r => r.success).length;\n    const failed = results.filter(r => !r.success).length;\n\n    this.logger.log(`Execution summary: ${successful} successful, ${failed} failed`);\n\n    // Log failed executions\n    results.filter(r => !r.success).forEach(result => {\n      this.logger.error(`Schedule ${result.scheduleId} failed: ${result.error}`);\n    });\n  }\n\n  // Public methods for managing schedules\n  async createSchedule(data: {\n    name: string;\n    templateId: string;\n    frequency: ScheduleFrequency;\n    scheduleTime: string;\n    scheduleDays?: number[];\n    scheduleDay?: number;\n    filters?: Record<string, any>;\n    emailRecipients?: string[];\n    startDate?: Date;\n    endDate?: Date;\n    userId: string;\n    organizationId: string;\n  }): Promise<ReportSchedule> {\n    return await this.prisma.reportSchedule.create({\n      data: {\n        ...data,\n        isActive: true,\n        executionCount: 0,\n        errorCount: 0\n      }\n    });\n  }\n\n  async updateSchedule(\n    id: string,\n    data: Partial<{\n      name: string;\n      frequency: ScheduleFrequency;\n      scheduleTime: string;\n      scheduleDays: number[];\n      scheduleDay: number;\n      filters: Record<string, any>;\n      emailRecipients: string[];\n      isActive: boolean;\n      startDate: Date;\n      endDate: Date;\n    }>\n  ): Promise<ReportSchedule> {\n    return await this.prisma.reportSchedule.update({\n      where: { id },\n      data\n    });\n  }\n\n  async deleteSchedule(id: string): Promise<void> {\n    await this.prisma.reportSchedule.delete({\n      where: { id }\n    });\n    \n    // Remove from execution history\n    this.executionHistory.delete(id);\n  }\n\n  async getSchedulesByUser(userId: string): Promise<ReportSchedule[]> {\n    return await this.prisma.reportSchedule.findMany({\n      where: { userId },\n      include: {\n        template: {\n          select: {\n            id: true,\n            name: true,\n            type: true\n          }\n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    });\n  }\n\n  async getSchedulesByOrganization(organizationId: string): Promise<ReportSchedule[]> {\n    return await this.prisma.reportSchedule.findMany({\n      where: { organizationId },\n      include: {\n        template: {\n          select: {\n            id: true,\n            name: true,\n            type: true\n          }\n        },\n        user: {\n          select: {\n            id: true,\n            firstName: true,\n            lastName: true,\n            email: true\n          }\n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    });\n  }\n\n  // Manual execution for testing\n  async executeScheduleManually(scheduleId: string): Promise<ScheduleExecutionResult> {\n    const schedule = await this.prisma.reportSchedule.findUnique({\n      where: { id: scheduleId },\n      include: {\n        template: true,\n        user: {\n          select: {\n            id: true,\n            email: true,\n            firstName: true,\n            lastName: true\n          }\n        },\n        organization: {\n          select: {\n            id: true,\n            name: true\n          }\n        }\n      }\n    });\n\n    if (!schedule) {\n      throw new Error('Schedule not found');\n    }\n\n    return await this.executeSchedule(schedule);\n  }\n\n  // Utility method to validate cron expressions\n  validateCronExpression(expression: string): boolean {\n    try {\n      // Basic validation for common patterns\n      const parts = expression.split(' ');\n      return parts.length === 5 || parts.length === 6;\n    } catch {\n      return false;\n    }\n  }\n\n  // Get execution statistics\n  async getExecutionStats(scheduleId: string): Promise<{\n    totalExecutions: number;\n    successfulExecutions: number;\n    failedExecutions: number;\n    lastExecution?: Date;\n    nextExecution?: Date;\n    averageExecutionTime?: number;\n  }> {\n    const schedule = await this.prisma.reportSchedule.findUnique({\n      where: { id: scheduleId }\n    });\n\n    if (!schedule) {\n      throw new Error('Schedule not found');\n    }\n\n    return {\n      totalExecutions: schedule.executionCount,\n      successfulExecutions: schedule.executionCount - schedule.errorCount,\n      failedExecutions: schedule.errorCount,\n      lastExecution: schedule.lastExecutedAt,\n      nextExecution: this.calculateNextExecution(schedule)\n    };\n  }\n\n  private calculateNextExecution(schedule: ReportSchedule): Date {\n    const now = new Date();\n    const [hours, minutes] = schedule.scheduleTime.split(':').map(Number);\n    \n    let nextExecution = new Date(now);\n    nextExecution.setHours(hours, minutes, 0, 0);\n\n    // If the time has passed today, move to next occurrence\n    if (nextExecution <= now) {\n      switch (schedule.frequency) {\n        case 'DAILY':\n          nextExecution = addDays(nextExecution, 1);\n          break;\n        case 'WEEKLY':\n          nextExecution = addWeeks(nextExecution, 1);\n          break;\n        case 'MONTHLY':\n          nextExecution = addMonths(nextExecution, 1);\n          break;\n      }\n    }\n\n    return nextExecution;\n  }\n}"],"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","ignoreList":[]}