{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\setup.ts","mappings":";;;AAAA,2CAAqC;AAiHrC,oCAAoC;AACpC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE;IACxB,OAAO,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;QACzC,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;QACd,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;QACd,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;QAChB,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;QACd,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,QAAQ,EAAE,cAAI,CAAC,EAAE,EAAE;QACnB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC;QACzC,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;QACjB,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;QAClB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;QACjB,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;QACd,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;QACjB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;QAClB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;QACjB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;QAChB,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;KACtB,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,kBAAkB;AAClB,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;IACrB,OAAO,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;QACzC,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;QACd,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;QAClB,EAAE,EAAE,cAAI,CAAC,EAAE,EAAE;QACb,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;QAClB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;QAChB,YAAY,EAAE,cAAI,CAAC,EAAE,EAAE;QACvB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;QAChB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;QACjB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;KACjB,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,sBAAsB;AACtB,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;IAC1B,YAAY,EAAE,cAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QAC3B,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;QAChB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;QAChB,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;KACf,CAAC,CAAC;IACH,MAAM,EAAE;QACN,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;QAClB,SAAS,EAAE,cAAI,CAAC,EAAE,EAAE;QACpB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;QACjB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;QACf,QAAQ,EAAE,cAAI,CAAC,EAAE,EAAE;QACnB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;QACjB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;KAClB;IACD,UAAU,EAAE;QACV,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;QAClB,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;KAChB;CACF,CAAC,CAAC,CAAC;AAlLJ,oBAAoB;AACpB,SAAS,CAAC,KAAK,IAAI,EAAE;IACnB,iCAAiC;IACjC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;IAC9B,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,mDAAmD,CAAC;IAChH,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,0BAA0B,CAAC;IACjF,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,iBAAiB,CAAC;IAC3C,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC,gCAAgC;IAEjE,2CAA2C;IAC3C,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,CAAC;AACzB,CAAC,CAAC,CAAC;AAEH,uBAAuB;AACvB,QAAQ,CAAC,KAAK,IAAI,EAAE;IAClB,gCAAgC;IAChC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC;AAEH,oDAAoD;AACpD,MAAM,eAAe,GAAG,EAAE,GAAG,OAAO,EAAE,CAAC;AAEvC,UAAU,CAAC,GAAG,EAAE;IACd,oDAAoD;IACpD,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,MAAM,EAAE,CAAC;QACjC,cAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QACxD,cAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QACzD,cAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QACzD,cAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,GAAG,EAAE;IACb,0BAA0B;IAC1B,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,MAAM,EAAE,CAAC;QACjC,cAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,8CAA8C;AAC9C,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;IACnD,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,KAAK,EAAE,EAAE;IACxC,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC;AAEH,uBAAuB;AACvB,MAAM,CAAC,MAAM,CAAC;IACZ,aAAa,CAAC,QAAgB;QAC5B,MAAM,SAAS,GAAG,4EAA4E,CAAC;QAC/F,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEtC,IAAI,IAAI,EAAE,CAAC;YACT,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,yBAAyB;gBAC5D,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,qBAAqB;gBACxD,IAAI,EAAE,KAAK;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;IAED,aAAa,CAAC,QAAa;QACzB,MAAM,IAAI,GAAG,QAAQ,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;QAEpE,IAAI,IAAI,EAAE,CAAC;YACT,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,yBAAyB;gBAC5D,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,qBAAqB;gBACxD,IAAI,EAAE,KAAK;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;IAED,eAAe,CAAC,QAAgB,EAAE,KAAa,EAAE,OAAe;QAC9D,MAAM,IAAI,GAAG,QAAQ,IAAI,KAAK,IAAI,QAAQ,IAAI,OAAO,CAAC;QAEtD,IAAI,IAAI,EAAE,CAAC;YACT,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,2BAA2B,KAAK,MAAM,OAAO,EAAE;gBAClF,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,uBAAuB,KAAK,MAAM,OAAO,EAAE;gBAC9E,IAAI,EAAE,KAAK;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAC,CAAC;AAkFH,iBAAiB;AACV,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,CAAC;IACnC,EAAE,EAAE,sCAAsC;IAC1C,cAAc,EAAE,sCAAsC;IACtD,KAAK,EAAE,kBAAkB;IACzB,IAAI,EAAE,WAAW;CAClB,CAAC,CAAC;AALU,QAAA,cAAc,kBAKxB;AAEI,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAAC,CAAC;IACvC,EAAE,EAAE,sCAAsC;IAC1C,IAAI,EAAE,eAAe;IACrB,cAAc,EAAE,sCAAsC;IACtD,MAAM,EAAE,QAAQ;IAChB,SAAS,EAAE,IAAI,IAAI,EAAE;IACrB,SAAS,EAAE,IAAI,IAAI,EAAE;CACtB,CAAC,CAAC;AAPU,QAAA,kBAAkB,sBAO5B;AAEI,MAAM,iBAAiB,GAAG,GAAG,EAAE,CAAC,CAAC;IACtC,OAAO,EAAE,IAAI;IACb,IAAI,EAAE,GAAG;IACT,GAAG,EAAE,GAAG;IACR,OAAO,EAAE,IAAI;IACb,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,EAAE;IACP,WAAW,EAAE,KAAK;IAClB,MAAM,EAAE,GAAG;IACX,WAAW,EAAE,EAAE;IACf,GAAG,EAAE,CAAC;IACN,cAAc,EAAE,EAAE;IAClB,GAAG,EAAE,GAAG;IACR,IAAI,EAAE,GAAG;IACT,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,IAAI;CACb,CAAC,CAAC;AAjBU,QAAA,iBAAiB,qBAiB3B;AAEI,MAAM,OAAO,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AAA1E,QAAA,OAAO,WAAmE;AAEhF,MAAM,QAAQ,GAAG,CAAC,IAAmB,EAAE,EAAE;IAC9C,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,cAAI,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,QAAe,CAAC,CAAC;IACrE,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAJW,QAAA,QAAQ,YAInB;AAEK,MAAM,WAAW,GAAG,GAAG,EAAE;IAC9B,cAAI,CAAC,eAAe,EAAE,CAAC;AACzB,CAAC,CAAC;AAFW,QAAA,WAAW,eAEtB;AAEF,0BAA0B;AACnB,MAAM,kBAAkB,GAAG,KAAK,IAAI,EAAE;IAC3C,yDAAyD;IACzD,oCAAoC;IACpC,OAAO;QACL,OAAO,EAAE,KAAK,IAAI,EAAE,GAAE,CAAC;QACvB,IAAI,EAAE,KAAK,IAAI,EAAE,GAAE,CAAC;KACrB,CAAC;AACJ,CAAC,CAAC;AAPW,QAAA,kBAAkB,sBAO7B;AAEF,uBAAuB;AAChB,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;IACxC,sDAAsD;IACtD,OAAO;QACL,OAAO,EAAE,KAAK,IAAI,EAAE,GAAE,CAAC;QACvB,KAAK,EAAE,KAAK,IAAI,EAAE,GAAE,CAAC;KACtB,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,eAAe,mBAM1B;AAEF,gCAAgC;AACzB,MAAM,kBAAkB,GAAG,KAAK,EAAE,EAAsB,EAAE,EAAE;IACjE,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IACtC,MAAM,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;IAC1B,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,0BAA0B;IAE1E,OAAO;QACL,MAAM;QACN,QAAQ;KACT,CAAC;AACJ,CAAC,CAAC;AAVW,QAAA,kBAAkB,sBAU7B;AAEF,yBAAyB;AAClB,MAAM,cAAc,GAAG,GAAG,EAAE;IACjC,MAAM,KAAK,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IACpC,OAAO;QACL,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,KAAK;QAC3D,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,KAAK;QACvE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,KAAK;QACrE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,KAAK;KACtE,CAAC;AACJ,CAAC,CAAC;AARW,QAAA,cAAc,kBAQzB;AAEF,uBAAuB;AAChB,MAAM,WAAW,GAAG,KAAK,EAAE,OAAqB,EAAE,EAAE;IACzD,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC;QAC7B,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;IACxB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;AACH,CAAC,CAAC;AAPW,QAAA,WAAW,eAOtB;AAEF,iDAAiD;AACjD,MAAa,WAAW;IACtB,MAAM,CAAC,oBAAoB,CAAC,YAAiB,EAAE;QAC7C,OAAO;YACL,cAAc,EAAE,sCAAsC;YACtD,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;YACjC,OAAO,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;YAC/B,GAAG,SAAS;SACb,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,YAAiB,EAAE;QACzC,OAAO;YACL,GAAG,IAAA,yBAAiB,GAAE;YACtB,GAAG,SAAS;SACb,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,sBAAsB,CAAC,YAAiB,EAAE;QAC/C,MAAM,WAAW,GAAG,IAAA,yBAAiB,GAAE,CAAC;QACxC,OAAO;YACL,OAAO,EAAE,WAAW;YACpB,MAAM,EAAE;gBACN,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE;gBAC9C,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE;aAC/C;YACD,YAAY,EAAE;gBACZ;oBACE,UAAU,EAAE,sCAAsC;oBAClD,YAAY,EAAE,eAAe;oBAC7B,OAAO,EAAE,WAAW;iBACrB;aACF;YACD,MAAM,EAAE,EAAE;YACV,GAAG,SAAS;SACb,CAAC;IACJ,CAAC;CACF;AApCD,kCAoCC;AAED,4BAA4B;AACf,QAAA,UAAU,GAAG;IACxB,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,CAAC;IACV,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,MAAM;CACtC,CAAC","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\setup.ts"],"sourcesContent":["import { jest } from '@jest/globals';\n\n// Global test setup\nbeforeAll(async () => {\n  // Set test environment variables\n  process.env.NODE_ENV = 'test';\n  process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://test:test@localhost:5432/utmify_test';\n  process.env.REDIS_URL = process.env.TEST_REDIS_URL || 'redis://localhost:6379/1';\n  process.env.JWT_SECRET = 'test-jwt-secret';\n  process.env.LOG_LEVEL = 'error'; // Reduce log noise during tests\n  \n  // Set timezone for consistent date testing\n  process.env.TZ = 'UTC';\n});\n\n// Global test teardown\nafterAll(async () => {\n  // Clean up any global resources\n  await new Promise(resolve => setTimeout(resolve, 100));\n});\n\n// Mock console methods to reduce noise during tests\nconst originalConsole = { ...console };\n\nbeforeEach(() => {\n  // Mock console methods but allow them in debug mode\n  if (process.env.DEBUG !== 'true') {\n    jest.spyOn(console, 'log').mockImplementation(() => {});\n    jest.spyOn(console, 'info').mockImplementation(() => {});\n    jest.spyOn(console, 'warn').mockImplementation(() => {});\n    jest.spyOn(console, 'debug').mockImplementation(() => {});\n  }\n});\n\nafterEach(() => {\n  // Restore console methods\n  if (process.env.DEBUG !== 'true') {\n    jest.restoreAllMocks();\n  }\n});\n\n// Global error handler for unhandled promises\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n});\n\n// Extend Jest matchers\nexpect.extend({\n  toBeValidUUID(received: string) {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    const pass = uuidRegex.test(received);\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid UUID`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid UUID`,\n        pass: false,\n      };\n    }\n  },\n  \n  toBeValidDate(received: any) {\n    const pass = received instanceof Date && !isNaN(received.getTime());\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid Date`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid Date`,\n        pass: false,\n      };\n    }\n  },\n  \n  toBeWithinRange(received: number, floor: number, ceiling: number) {\n    const pass = received >= floor && received <= ceiling;\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be within range ${floor} - ${ceiling}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be within range ${floor} - ${ceiling}`,\n        pass: false,\n      };\n    }\n  },\n});\n\n// Declare custom matchers for TypeScript\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toBeValidUUID(): R;\n      toBeValidDate(): R;\n      toBeWithinRange(floor: number, ceiling: number): R;\n    }\n  }\n}\n\n// Mock external services by default\njest.mock('ioredis', () => {\n  return jest.fn().mockImplementation(() => ({\n    get: jest.fn(),\n    set: jest.fn(),\n    setex: jest.fn(),\n    del: jest.fn(),\n    keys: jest.fn(),\n    pipeline: jest.fn(),\n    ping: jest.fn().mockResolvedValue('PONG'),\n    info: jest.fn(),\n    dbsize: jest.fn(),\n    flushdb: jest.fn(),\n    exists: jest.fn(),\n    ttl: jest.fn(),\n    expire: jest.fn(),\n    incr: jest.fn(),\n    decr: jest.fn(),\n    hget: jest.fn(),\n    hset: jest.fn(),\n    hdel: jest.fn(),\n    hgetall: jest.fn(),\n    zadd: jest.fn(),\n    zrange: jest.fn(),\n    zrem: jest.fn(),\n    zcard: jest.fn(),\n    disconnect: jest.fn(),\n  }));\n});\n\n// Mock Bull queue\njest.mock('bull', () => {\n  return jest.fn().mockImplementation(() => ({\n    add: jest.fn(),\n    process: jest.fn(),\n    on: jest.fn(),\n    getJobs: jest.fn(),\n    clean: jest.fn(),\n    getJobCounts: jest.fn(),\n    pause: jest.fn(),\n    resume: jest.fn(),\n    close: jest.fn(),\n  }));\n});\n\n// Mock Winston logger\njest.mock('winston', () => ({\n  createLogger: jest.fn(() => ({\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n    log: jest.fn(),\n  })),\n  format: {\n    combine: jest.fn(),\n    timestamp: jest.fn(),\n    errors: jest.fn(),\n    json: jest.fn(),\n    colorize: jest.fn(),\n    simple: jest.fn(),\n    printf: jest.fn(),\n  },\n  transports: {\n    Console: jest.fn(),\n    File: jest.fn(),\n  },\n}));\n\n// Test utilities\nexport const createMockUser = () => ({\n  id: '123e4567-e89b-12d3-a456-426614174000',\n  organizationId: '123e4567-e89b-12d3-a456-426614174001',\n  email: 'test@example.com',\n  name: 'Test User',\n});\n\nexport const createMockCampaign = () => ({\n  id: '123e4567-e89b-12d3-a456-426614174002',\n  name: 'Test Campaign',\n  organizationId: '123e4567-e89b-12d3-a456-426614174001',\n  status: 'ACTIVE',\n  createdAt: new Date(),\n  updatedAt: new Date(),\n});\n\nexport const createMockMetrics = () => ({\n  revenue: 5000,\n  roas: 250,\n  roi: 150,\n  adSpend: 2000,\n  cpc: 4,\n  cpm: 200,\n  cac: 40,\n  impressions: 10000,\n  clicks: 500,\n  conversions: 50,\n  ctr: 5,\n  conversionRate: 10,\n  ltv: 250,\n  arpu: 100,\n  margin: 60,\n  profit: 3000,\n});\n\nexport const waitFor = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const mockDate = (date: string | Date) => {\n  const mockDate = new Date(date);\n  jest.spyOn(global, 'Date').mockImplementation(() => mockDate as any);\n  return mockDate;\n};\n\nexport const restoreDate = () => {\n  jest.restoreAllMocks();\n};\n\n// Database test utilities\nexport const createTestDatabase = async () => {\n  // This would be implemented based on your database setup\n  // For now, we'll just return a mock\n  return {\n    cleanup: async () => {},\n    seed: async () => {},\n  };\n};\n\n// Redis test utilities\nexport const createTestRedis = async () => {\n  // This would be implemented based on your Redis setup\n  return {\n    cleanup: async () => {},\n    flush: async () => {},\n  };\n};\n\n// Performance testing utilities\nexport const measurePerformance = async (fn: () => Promise<any>) => {\n  const start = process.hrtime.bigint();\n  const result = await fn();\n  const end = process.hrtime.bigint();\n  const duration = Number(end - start) / 1000000; // Convert to milliseconds\n  \n  return {\n    result,\n    duration,\n  };\n};\n\n// Memory usage utilities\nexport const getMemoryUsage = () => {\n  const usage = process.memoryUsage();\n  return {\n    rss: Math.round(usage.rss / 1024 / 1024 * 100) / 100, // MB\n    heapTotal: Math.round(usage.heapTotal / 1024 / 1024 * 100) / 100, // MB\n    heapUsed: Math.round(usage.heapUsed / 1024 / 1024 * 100) / 100, // MB\n    external: Math.round(usage.external / 1024 / 1024 * 100) / 100, // MB\n  };\n};\n\n// Async test utilities\nexport const expectAsync = async (promise: Promise<any>) => {\n  try {\n    const result = await promise;\n    return expect(result);\n  } catch (error) {\n    return expect(error);\n  }\n};\n\n// Mock factory for creating consistent test data\nexport class MockFactory {\n  static createMetricsFilters(overrides: any = {}) {\n    return {\n      organizationId: '123e4567-e89b-12d3-a456-426614174001',\n      startDate: new Date('2024-01-01'),\n      endDate: new Date('2024-01-31'),\n      ...overrides,\n    };\n  }\n  \n  static createKPIMetrics(overrides: any = {}) {\n    return {\n      ...createMockMetrics(),\n      ...overrides,\n    };\n  }\n  \n  static createDashboardMetrics(overrides: any = {}) {\n    const baseMetrics = createMockMetrics();\n    return {\n      summary: baseMetrics,\n      trends: [\n        { period: '2024-01-01', metrics: baseMetrics },\n        { period: '2024-01-02', metrics: baseMetrics },\n      ],\n      topCampaigns: [\n        {\n          campaignId: '123e4567-e89b-12d3-a456-426614174002',\n          campaignName: 'Test Campaign',\n          metrics: baseMetrics,\n        },\n      ],\n      alerts: [],\n      ...overrides,\n    };\n  }\n}\n\n// Export test configuration\nexport const testConfig = {\n  timeout: 30000,\n  retries: 3,\n  parallel: true,\n  coverage: true,\n  verbose: process.env.DEBUG === 'true',\n};"],"version":3}