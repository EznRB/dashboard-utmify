f326ebf1744009c7b9d0875d083cf849
/* istanbul ignore next */
function cov_11rkocrdr3() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\reports\\cache.service.ts";
  var hash = "0410fec88b61fb719fa52b6a19d7da8e419abfe2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\reports\\cache.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 16,
          column: 19
        },
        end: {
          line: 349,
          column: 1
        }
      },
      "14": {
        start: {
          line: 18,
          column: 13
        },
        end: {
          line: 18,
          column: 44
        }
      },
      "15": {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 20,
          column: 21
        }
      },
      "16": {
        start: {
          line: 21,
          column: 19
        },
        end: {
          line: 21,
          column: 36
        }
      },
      "17": {
        start: {
          line: 22,
          column: 27
        },
        end: {
          line: 22,
          column: 31
        }
      },
      "18": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "19": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 31
        }
      },
      "20": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 60
        }
      },
      "21": {
        start: {
          line: 29,
          column: 26
        },
        end: {
          line: 29,
          column: 75
        }
      },
      "22": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 68
        }
      },
      "23": {
        start: {
          line: 31,
          column: 30
        },
        end: {
          line: 31,
          column: 70
        }
      },
      "24": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "25": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "26": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 49
        }
      },
      "27": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "28": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "29": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 54
        }
      },
      "30": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "31": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 68
        }
      },
      "32": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "33": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 50
        }
      },
      "34": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 68
        }
      },
      "35": {
        start: {
          line: 64,
          column: 26
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "36": {
        start: {
          line: 76,
          column: 21
        },
        end: {
          line: 76,
          column: 73
        }
      },
      "37": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 35
        }
      },
      "38": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "39": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 59
        }
      },
      "40": {
        start: {
          line: 85,
          column: 27
        },
        end: {
          line: 85,
          column: 57
        }
      },
      "41": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "42": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 69
        }
      },
      "43": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 28
        }
      },
      "44": {
        start: {
          line: 90,
          column: 27
        },
        end: {
          line: 90,
          column: 45
        }
      },
      "45": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 42
        }
      },
      "46": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 86
        }
      },
      "47": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 64
        }
      },
      "48": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 26
        }
      },
      "49": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 69
        }
      },
      "50": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 24
        }
      },
      "51": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "52": {
        start: {
          line: 107,
          column: 29
        },
        end: {
          line: 107,
          column: 59
        }
      },
      "53": {
        start: {
          line: 108,
          column: 24
        },
        end: {
          line: 108,
          column: 54
        }
      },
      "54": {
        start: {
          line: 109,
          column: 33
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "55": {
        start: {
          line: 124,
          column: 30
        },
        end: {
          line: 124,
          column: 58
        }
      },
      "56": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "57": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 88
        }
      },
      "58": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "59": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 96
        }
      },
      "60": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 23
        }
      },
      "61": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 63
        }
      },
      "62": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 89
        }
      },
      "63": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 83
        }
      },
      "64": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 62
        }
      },
      "65": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "66": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 149,
          column: 67
        }
      },
      "67": {
        start: {
          line: 150,
          column: 33
        },
        end: {
          line: 150,
          column: 61
        }
      },
      "68": {
        start: {
          line: 151,
          column: 35
        },
        end: {
          line: 151,
          column: 55
        }
      },
      "69": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 158,
          column: 15
        }
      },
      "70": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 69
        }
      },
      "71": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "72": {
        start: {
          line: 169,
          column: 29
        },
        end: {
          line: 169,
          column: 64
        }
      },
      "73": {
        start: {
          line: 170,
          column: 30
        },
        end: {
          line: 170,
          column: 65
        }
      },
      "74": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "75": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 51
        }
      },
      "76": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 47
        }
      },
      "77": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 117
        }
      },
      "78": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 79
        }
      },
      "79": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "80": {
        start: {
          line: 186,
          column: 29
        },
        end: {
          line: 186,
          column: 57
        }
      },
      "81": {
        start: {
          line: 187,
          column: 30
        },
        end: {
          line: 187,
          column: 65
        }
      },
      "82": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "83": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 51
        }
      },
      "84": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 47
        }
      },
      "85": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 101
        }
      },
      "86": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 71
        }
      },
      "87": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "88": {
        start: {
          line: 203,
          column: 25
        },
        end: {
          line: 203,
          column: 55
        }
      },
      "89": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "90": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 46
        }
      },
      "91": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 105
        }
      },
      "92": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 77
        }
      },
      "93": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "94": {
        start: {
          line: 218,
          column: 25
        },
        end: {
          line: 218,
          column: 56
        }
      },
      "95": {
        start: {
          line: 219,
          column: 31
        },
        end: {
          line: 219,
          column: 78
        }
      },
      "96": {
        start: {
          line: 220,
          column: 28
        },
        end: {
          line: 220,
          column: 29
        }
      },
      "97": {
        start: {
          line: 221,
          column: 32
        },
        end: {
          line: 221,
          column: 33
        }
      },
      "98": {
        start: {
          line: 222,
          column: 32
        },
        end: {
          line: 222,
          column: 34
        }
      },
      "99": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "100": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 240,
          column: 17
        }
      },
      "101": {
        start: {
          line: 226,
          column: 35
        },
        end: {
          line: 226,
          column: 60
        }
      },
      "102": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 236,
          column: 21
        }
      },
      "103": {
        start: {
          line: 228,
          column: 39
        },
        end: {
          line: 228,
          column: 57
        }
      },
      "104": {
        start: {
          line: 229,
          column: 24
        },
        end: {
          line: 229,
          column: 62
        }
      },
      "105": {
        start: {
          line: 230,
          column: 24
        },
        end: {
          line: 230,
          column: 70
        }
      },
      "106": {
        start: {
          line: 231,
          column: 24
        },
        end: {
          line: 235,
          column: 27
        }
      },
      "107": {
        start: {
          line: 243,
          column: 31
        },
        end: {
          line: 245,
          column: 29
        }
      },
      "108": {
        start: {
          line: 244,
          column: 32
        },
        end: {
          line: 244,
          column: 47
        }
      },
      "109": {
        start: {
          line: 246,
          column: 32
        },
        end: {
          line: 246,
          column: 74
        }
      },
      "110": {
        start: {
          line: 247,
          column: 32
        },
        end: {
          line: 247,
          column: 72
        }
      },
      "111": {
        start: {
          line: 248,
          column: 28
        },
        end: {
          line: 248,
          column: 85
        }
      },
      "112": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 254,
          column: 14
        }
      },
      "113": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 67
        }
      },
      "114": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 263,
          column: 14
        }
      },
      "115": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 86
        }
      },
      "116": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "117": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "118": {
        start: {
          line: 274,
          column: 33
        },
        end: {
          line: 274,
          column: 67
        }
      },
      "119": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 279,
          column: 17
        }
      },
      "120": {
        start: {
          line: 278,
          column: 20
        },
        end: {
          line: 278,
          column: 112
        }
      },
      "121": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 72
        }
      },
      "122": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "123": {
        start: {
          line: 291,
          column: 31
        },
        end: {
          line: 291,
          column: 78
        }
      },
      "124": {
        start: {
          line: 292,
          column: 31
        },
        end: {
          line: 292,
          column: 32
        }
      },
      "125": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "126": {
        start: {
          line: 294,
          column: 31
        },
        end: {
          line: 294,
          column: 59
        }
      },
      "127": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 299,
          column: 17
        }
      },
      "128": {
        start: {
          line: 297,
          column: 20
        },
        end: {
          line: 297,
          column: 69
        }
      },
      "129": {
        start: {
          line: 298,
          column: 20
        },
        end: {
          line: 298,
          column: 35
        }
      },
      "130": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "131": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 84
        }
      },
      "132": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 73
        }
      },
      "133": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "134": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 36
        }
      },
      "135": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 24
        }
      },
      "136": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 61
        }
      },
      "137": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 25
        }
      },
      "138": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 46
        }
      },
      "139": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "140": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 40
        }
      },
      "141": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 64
        }
      },
      "142": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 62
        }
      },
      "143": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "144": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 36
        }
      },
      "145": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 55
        }
      },
      "146": {
        start: {
          line: 350,
          column: 0
        },
        end: {
          line: 353,
          column: 17
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 31
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 22
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 46,
            column: 37
          },
          end: {
            line: 46,
            column: 38
          }
        },
        loc: {
          start: {
            line: 46,
            column: 43
          },
          end: {
            line: 48,
            column: 13
          }
        },
        line: 46
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 49,
            column: 35
          },
          end: {
            line: 49,
            column: 36
          }
        },
        loc: {
          start: {
            line: 49,
            column: 46
          },
          end: {
            line: 51,
            column: 13
          }
        },
        line: 49
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 52,
            column: 35
          },
          end: {
            line: 52,
            column: 36
          }
        },
        loc: {
          start: {
            line: 52,
            column: 41
          },
          end: {
            line: 54,
            column: 13
          }
        },
        line: 52
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 49
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 63
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 35
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 82
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 57
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 105
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 60
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 147
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 54
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 167
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 38
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 184
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 44
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 201
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 26
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 216
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 244,
            column: 22
          },
          end: {
            line: 244,
            column: 23
          }
        },
        loc: {
          start: {
            line: 244,
            column: 32
          },
          end: {
            line: 244,
            column: 47
          }
        },
        line: 244
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 59
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 269
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 32
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 289
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 24
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 312
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 37
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 325
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 21
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 331
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 28
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 343
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 45,
            column: 13
          }
        }],
        line: 33
      },
      "14": {
        loc: {
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 63,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 39
          },
          end: {
            line: 63,
            column: 47
          }
        }],
        line: 63
      },
      "15": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "16": {
        loc: {
          start: {
            line: 105,
            column: 43
          },
          end: {
            line: 105,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 105,
            column: 53
          },
          end: {
            line: 105,
            column: 55
          }
        }],
        line: 105
      },
      "17": {
        loc: {
          start: {
            line: 108,
            column: 24
          },
          end: {
            line: 108,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 24
          },
          end: {
            line: 108,
            column: 35
          }
        }, {
          start: {
            line: 108,
            column: 39
          },
          end: {
            line: 108,
            column: 54
          }
        }],
        line: 108
      },
      "18": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "19": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 125,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 125,
            column: 32
          }
        }, {
          start: {
            line: 125,
            column: 36
          },
          end: {
            line: 125,
            column: 82
          }
        }],
        line: 125
      },
      "20": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "21": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "22": {
        loc: {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "23": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "24": {
        loc: {
          start: {
            line: 227,
            column: 20
          },
          end: {
            line: 236,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 20
          },
          end: {
            line: 236,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "25": {
        loc: {
          start: {
            line: 247,
            column: 32
          },
          end: {
            line: 247,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 46
          },
          end: {
            line: 247,
            column: 60
          }
        }, {
          start: {
            line: 247,
            column: 63
          },
          end: {
            line: 247,
            column: 72
          }
        }],
        line: 247
      },
      "26": {
        loc: {
          start: {
            line: 248,
            column: 28
          },
          end: {
            line: 248,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 48
          },
          end: {
            line: 248,
            column: 81
          }
        }, {
          start: {
            line: 248,
            column: 84
          },
          end: {
            line: 248,
            column: 85
          }
        }],
        line: 248
      },
      "27": {
        loc: {
          start: {
            line: 275,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "28": {
        loc: {
          start: {
            line: 295,
            column: 16
          },
          end: {
            line: 299,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 16
          },
          end: {
            line: 299,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "29": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "30": {
        loc: {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "31": {
        loc: {
          start: {
            line: 352,
            column: 37
          },
          end: {
            line: 352,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 352,
            column: 122
          },
          end: {
            line: 352,
            column: 124
          }
        }, {
          start: {
            line: 352,
            column: 127
          },
          end: {
            line: 352,
            column: 133
          }
        }],
        line: 352
      },
      "32": {
        loc: {
          start: {
            line: 352,
            column: 50
          },
          end: {
            line: 352,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 50
          },
          end: {
            line: 352,
            column: 86
          }
        }, {
          start: {
            line: 352,
            column: 90
          },
          end: {
            line: 352,
            column: 103
          }
        }],
        line: 352
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\reports\\cache.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\reports\\cache.service.ts"],
      sourcesContent: ["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\nimport { createHash } from 'crypto';\n\nexport interface CacheConfig {\n  ttl: number; // Time to live in seconds\n  prefix: string;\n  compress?: boolean;\n}\n\nexport interface ReportCacheKey {\n  templateId?: string;\n  userId: string;\n  organizationId: string;\n  filters: any;\n  dateRange: {\n    start: Date;\n    end: Date;\n  };\n  metrics: string[];\n  dimensions: string[];\n}\n\nexport interface CachedReport {\n  id: string;\n  data: any;\n  metadata: {\n    generatedAt: Date;\n    templateId?: string;\n    userId: string;\n    organizationId: string;\n    size: number;\n    hitCount: number;\n  };\n  charts?: any[];\n  summary?: any;\n}\n\n@Injectable()\nexport class CacheService {\n  private readonly logger = new Logger(CacheService.name);\n  private redis: Redis;\n  private readonly defaultTTL = 3600; // 1 hour\n  private readonly maxCacheSize = 100 * 1024 * 1024; // 100MB\n  private readonly compressionThreshold = 1024; // 1KB\n\n  constructor(private configService: ConfigService) {\n    this.initializeRedis();\n  }\n\n  private initializeRedis() {\n    const redisUrl = this.configService.get<string>('REDIS_URL');\n    const redisHost = this.configService.get<string>('REDIS_HOST', 'localhost');\n    const redisPort = this.configService.get<number>('REDIS_PORT', 6379);\n    const redisPassword = this.configService.get<string>('REDIS_PASSWORD');\n\n    try {\n      if (redisUrl) {\n        this.redis = new Redis(redisUrl);\n      } else {\n        this.redis = new Redis({\n          host: redisHost,\n          port: redisPort,\n          password: redisPassword,\n          retryDelayOnFailover: 100,\n          maxRetriesPerRequest: 3,\n          lazyConnect: true,\n        });\n      }\n\n      this.redis.on('connect', () => {\n        this.logger.log('Connected to Redis');\n      });\n\n      this.redis.on('error', (error) => {\n        this.logger.error('Redis connection error:', error);\n      });\n\n      this.redis.on('ready', () => {\n        this.logger.log('Redis is ready');\n      });\n    } catch (error) {\n      this.logger.error('Failed to initialize Redis:', error);\n    }\n  }\n\n  /**\n   * Generate cache key from report parameters\n   */\n  private generateCacheKey(keyData: ReportCacheKey, prefix = 'report'): string {\n    const keyString = JSON.stringify({\n      templateId: keyData.templateId,\n      userId: keyData.userId,\n      organizationId: keyData.organizationId,\n      filters: keyData.filters,\n      dateRange: {\n        start: keyData.dateRange.start.toISOString(),\n        end: keyData.dateRange.end.toISOString(),\n      },\n      metrics: keyData.metrics.sort(),\n      dimensions: keyData.dimensions.sort(),\n    });\n\n    const hash = createHash('sha256').update(keyString).digest('hex');\n    return `${prefix}:${hash}`;\n  }\n\n  /**\n   * Get cached report\n   */\n  async getCachedReport(keyData: ReportCacheKey): Promise<CachedReport | null> {\n    try {\n      const cacheKey = this.generateCacheKey(keyData);\n      const cached = await this.redis.get(cacheKey);\n      \n      if (!cached) {\n        this.logger.debug(`Cache miss for key: ${cacheKey}`);\n        return null;\n      }\n\n      const report: CachedReport = JSON.parse(cached);\n      \n      // Update hit count\n      report.metadata.hitCount += 1;\n      await this.redis.setex(cacheKey, this.defaultTTL, JSON.stringify(report));\n      \n      this.logger.debug(`Cache hit for key: ${cacheKey}`);\n      return report;\n    } catch (error) {\n      this.logger.error('Error getting cached report:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Cache report data\n   */\n  async cacheReport(\n    keyData: ReportCacheKey,\n    reportData: any,\n    options: Partial<CacheConfig> = {}\n  ): Promise<void> {\n    try {\n      const cacheKey = this.generateCacheKey(keyData);\n      const ttl = options.ttl || this.defaultTTL;\n      \n      const cachedReport: CachedReport = {\n        id: cacheKey,\n        data: reportData.data,\n        metadata: {\n          generatedAt: new Date(),\n          templateId: keyData.templateId,\n          userId: keyData.userId,\n          organizationId: keyData.organizationId,\n          size: JSON.stringify(reportData).length,\n          hitCount: 0,\n        },\n        charts: reportData.charts,\n        summary: reportData.summary,\n      };\n\n      // Check if data should be compressed\n      let dataToCache = JSON.stringify(cachedReport);\n      if (options.compress && dataToCache.length > this.compressionThreshold) {\n        // In a real implementation, you would use compression here\n        // For now, we'll just log that compression would happen\n        this.logger.debug(`Would compress data of size: ${dataToCache.length}`);\n      }\n\n      // Check cache size limits\n      if (dataToCache.length > this.maxCacheSize) {\n        this.logger.warn(`Report data too large to cache: ${dataToCache.length} bytes`);\n        return;\n      }\n\n      await this.redis.setex(cacheKey, ttl, dataToCache);\n      \n      // Add to cache index for management\n      await this.addToCacheIndex(cacheKey, keyData.organizationId, keyData.userId);\n      \n      this.logger.debug(`Cached report with key: ${cacheKey}, TTL: ${ttl}s`);\n    } catch (error) {\n      this.logger.error('Error caching report:', error);\n    }\n  }\n\n  /**\n   * Add cache key to index for management\n   */\n  private async addToCacheIndex(\n    cacheKey: string,\n    organizationId: string,\n    userId: string\n  ): Promise<void> {\n    try {\n      const orgIndexKey = `cache_index:org:${organizationId}`;\n      const userIndexKey = `cache_index:user:${userId}`;\n      const globalIndexKey = 'cache_index:global';\n\n      await Promise.all([\n        this.redis.sadd(orgIndexKey, cacheKey),\n        this.redis.sadd(userIndexKey, cacheKey),\n        this.redis.sadd(globalIndexKey, cacheKey),\n        this.redis.expire(orgIndexKey, this.defaultTTL * 2),\n        this.redis.expire(userIndexKey, this.defaultTTL * 2),\n      ]);\n    } catch (error) {\n      this.logger.error('Error adding to cache index:', error);\n    }\n  }\n\n  /**\n   * Invalidate cache for specific organization\n   */\n  async invalidateOrganizationCache(organizationId: string): Promise<void> {\n    try {\n      const indexKey = `cache_index:org:${organizationId}`;\n      const cacheKeys = await this.redis.smembers(indexKey);\n      \n      if (cacheKeys.length > 0) {\n        await this.redis.del(...cacheKeys);\n        await this.redis.del(indexKey);\n        this.logger.log(`Invalidated ${cacheKeys.length} cache entries for organization: ${organizationId}`);\n      }\n    } catch (error) {\n      this.logger.error('Error invalidating organization cache:', error);\n    }\n  }\n\n  /**\n   * Invalidate cache for specific user\n   */\n  async invalidateUserCache(userId: string): Promise<void> {\n    try {\n      const indexKey = `cache_index:user:${userId}`;\n      const cacheKeys = await this.redis.smembers(indexKey);\n      \n      if (cacheKeys.length > 0) {\n        await this.redis.del(...cacheKeys);\n        await this.redis.del(indexKey);\n        this.logger.log(`Invalidated ${cacheKeys.length} cache entries for user: ${userId}`);\n      }\n    } catch (error) {\n      this.logger.error('Error invalidating user cache:', error);\n    }\n  }\n\n  /**\n   * Invalidate cache by pattern\n   */\n  async invalidateCacheByPattern(pattern: string): Promise<void> {\n    try {\n      const keys = await this.redis.keys(pattern);\n      if (keys.length > 0) {\n        await this.redis.del(...keys);\n        this.logger.log(`Invalidated ${keys.length} cache entries matching pattern: ${pattern}`);\n      }\n    } catch (error) {\n      this.logger.error('Error invalidating cache by pattern:', error);\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  async getCacheStats(): Promise<{\n    totalKeys: number;\n    memoryUsage: string;\n    hitRate: number;\n    topReports: Array<{ key: string; hits: number; size: number }>;\n  }> {\n    try {\n      const info = await this.redis.info('memory');\n      const globalKeys = await this.redis.smembers('cache_index:global');\n      \n      let totalHits = 0;\n      let totalRequests = 0;\n      const reportStats: Array<{ key: string; hits: number; size: number }> = [];\n\n      // Get stats for each cached report\n      for (const key of globalKeys.slice(0, 100)) { // Limit to avoid performance issues\n        try {\n          const cached = await this.redis.get(key);\n          if (cached) {\n            const report: CachedReport = JSON.parse(cached);\n            totalHits += report.metadata.hitCount;\n            totalRequests += report.metadata.hitCount + 1; // +1 for initial cache\n            \n            reportStats.push({\n              key,\n              hits: report.metadata.hitCount,\n              size: report.metadata.size,\n            });\n          }\n        } catch (error) {\n          // Skip invalid cache entries\n        }\n      }\n\n      // Sort by hits and get top 10\n      const topReports = reportStats\n        .sort((a, b) => b.hits - a.hits)\n        .slice(0, 10);\n\n      const memoryMatch = info.match(/used_memory_human:([^\\r\\n]+)/);\n      const memoryUsage = memoryMatch ? memoryMatch[1] : 'Unknown';\n      \n      const hitRate = totalRequests > 0 ? (totalHits / totalRequests) * 100 : 0;\n\n      return {\n        totalKeys: globalKeys.length,\n        memoryUsage,\n        hitRate: Math.round(hitRate * 100) / 100,\n        topReports,\n      };\n    } catch (error) {\n      this.logger.error('Error getting cache stats:', error);\n      return {\n        totalKeys: 0,\n        memoryUsage: 'Unknown',\n        hitRate: 0,\n        topReports: [],\n      };\n    }\n  }\n\n  /**\n   * Warm up cache with frequently requested reports\n   */\n  async warmUpCache(\n    organizationId: string,\n    commonReportConfigs: ReportCacheKey[]\n  ): Promise<void> {\n    this.logger.log(`Starting cache warm-up for organization: ${organizationId}`);\n    \n    for (const config of commonReportConfigs) {\n      try {\n        // Check if already cached\n        const existing = await this.getCachedReport(config);\n        if (!existing) {\n          // Generate and cache the report\n          // This would typically call your report generation service\n          this.logger.debug(`Would generate and cache report for warm-up: ${JSON.stringify(config)}`);\n        }\n      } catch (error) {\n        this.logger.error('Error during cache warm-up:', error);\n      }\n    }\n  }\n\n  /**\n   * Clean up expired cache entries\n   */\n  async cleanupExpiredCache(): Promise<void> {\n    try {\n      const globalKeys = await this.redis.smembers('cache_index:global');\n      let cleanedCount = 0;\n\n      for (const key of globalKeys) {\n        const exists = await this.redis.exists(key);\n        if (!exists) {\n          // Remove from indexes\n          await this.redis.srem('cache_index:global', key);\n          cleanedCount++;\n        }\n      }\n\n      if (cleanedCount > 0) {\n        this.logger.log(`Cleaned up ${cleanedCount} expired cache entries`);\n      }\n    } catch (error) {\n      this.logger.error('Error cleaning up expired cache:', error);\n    }\n  }\n\n  /**\n   * Check if cache is available\n   */\n  async isAvailable(): Promise<boolean> {\n    try {\n      await this.redis.ping();\n      return true;\n    } catch (error) {\n      this.logger.error('Cache not available:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get cache key for debugging\n   */\n  getCacheKeyForDebugging(keyData: ReportCacheKey): string {\n    return this.generateCacheKey(keyData);\n  }\n\n  /**\n   * Flush all cache (use with caution)\n   */\n  async flushAll(): Promise<void> {\n    try {\n      await this.redis.flushall();\n      this.logger.warn('All cache data has been flushed');\n    } catch (error) {\n      this.logger.error('Error flushing cache:', error);\n    }\n  }\n\n  /**\n   * Close Redis connection\n   */\n  async onModuleDestroy() {\n    if (this.redis) {\n      await this.redis.quit();\n      this.logger.log('Redis connection closed');\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0410fec88b61fb719fa52b6a19d7da8e419abfe2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11rkocrdr3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11rkocrdr3();
var __decorate =
/* istanbul ignore next */
(cov_11rkocrdr3().s[0]++,
/* istanbul ignore next */
(cov_11rkocrdr3().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_11rkocrdr3().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_11rkocrdr3().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_11rkocrdr3().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_11rkocrdr3().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_11rkocrdr3().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_11rkocrdr3().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_11rkocrdr3().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_11rkocrdr3().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_11rkocrdr3().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_11rkocrdr3().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_11rkocrdr3().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_11rkocrdr3().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_11rkocrdr3().b[3][0]++;
    cov_11rkocrdr3().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_11rkocrdr3().b[3][1]++;
    cov_11rkocrdr3().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_11rkocrdr3().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[5][0]++;
        cov_11rkocrdr3().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_11rkocrdr3().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_11rkocrdr3().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_11rkocrdr3().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_11rkocrdr3().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_11rkocrdr3().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_11rkocrdr3().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_11rkocrdr3().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_11rkocrdr3().s[9]++;
  return /* istanbul ignore next */(cov_11rkocrdr3().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_11rkocrdr3().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_11rkocrdr3().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_11rkocrdr3().s[10]++,
/* istanbul ignore next */
(cov_11rkocrdr3().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_11rkocrdr3().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_11rkocrdr3().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_11rkocrdr3().f[1]++;
  cov_11rkocrdr3().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_11rkocrdr3().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_11rkocrdr3().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_11rkocrdr3().b[11][0]++;
    cov_11rkocrdr3().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_11rkocrdr3().b[11][1]++;
  }
}));
var CacheService_1;
var _a;
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import Redis from 'ioredis';
import { createHash } from 'crypto';
let CacheService =
/* istanbul ignore next */
(cov_11rkocrdr3().s[13]++, CacheService_1 = class CacheService {
  configService;
  logger =
  /* istanbul ignore next */
  (cov_11rkocrdr3().s[14]++, new Logger(CacheService_1.name));
  redis;
  defaultTTL =
  /* istanbul ignore next */
  (cov_11rkocrdr3().s[15]++, 3600); // 1 hour
  maxCacheSize =
  /* istanbul ignore next */
  (cov_11rkocrdr3().s[16]++, 100 * 1024 * 1024); // 100MB
  compressionThreshold =
  /* istanbul ignore next */
  (cov_11rkocrdr3().s[17]++, 1024); // 1KB
  constructor(configService) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[2]++;
    cov_11rkocrdr3().s[18]++;
    this.configService = configService;
    /* istanbul ignore next */
    cov_11rkocrdr3().s[19]++;
    this.initializeRedis();
  }
  initializeRedis() {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[3]++;
    const redisUrl =
    /* istanbul ignore next */
    (cov_11rkocrdr3().s[20]++, this.configService.get('REDIS_URL'));
    const redisHost =
    /* istanbul ignore next */
    (cov_11rkocrdr3().s[21]++, this.configService.get('REDIS_HOST', 'localhost'));
    const redisPort =
    /* istanbul ignore next */
    (cov_11rkocrdr3().s[22]++, this.configService.get('REDIS_PORT', 6379));
    const redisPassword =
    /* istanbul ignore next */
    (cov_11rkocrdr3().s[23]++, this.configService.get('REDIS_PASSWORD'));
    /* istanbul ignore next */
    cov_11rkocrdr3().s[24]++;
    try {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[25]++;
      if (redisUrl) {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[13][0]++;
        cov_11rkocrdr3().s[26]++;
        this.redis = new Redis(redisUrl);
      } else {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[13][1]++;
        cov_11rkocrdr3().s[27]++;
        this.redis = new Redis({
          host: redisHost,
          port: redisPort,
          password: redisPassword,
          retryDelayOnFailover: 100,
          maxRetriesPerRequest: 3,
          lazyConnect: true
        });
      }
      /* istanbul ignore next */
      cov_11rkocrdr3().s[28]++;
      this.redis.on('connect', () => {
        /* istanbul ignore next */
        cov_11rkocrdr3().f[4]++;
        cov_11rkocrdr3().s[29]++;
        this.logger.log('Connected to Redis');
      });
      /* istanbul ignore next */
      cov_11rkocrdr3().s[30]++;
      this.redis.on('error', error => {
        /* istanbul ignore next */
        cov_11rkocrdr3().f[5]++;
        cov_11rkocrdr3().s[31]++;
        this.logger.error('Redis connection error:', error);
      });
      /* istanbul ignore next */
      cov_11rkocrdr3().s[32]++;
      this.redis.on('ready', () => {
        /* istanbul ignore next */
        cov_11rkocrdr3().f[6]++;
        cov_11rkocrdr3().s[33]++;
        this.logger.log('Redis is ready');
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[34]++;
      this.logger.error('Failed to initialize Redis:', error);
    }
  }
  /**
   * Generate cache key from report parameters
   */
  generateCacheKey(keyData, prefix =
  /* istanbul ignore next */
  (cov_11rkocrdr3().b[14][0]++, 'report')) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[7]++;
    const keyString =
    /* istanbul ignore next */
    (cov_11rkocrdr3().s[35]++, JSON.stringify({
      templateId: keyData.templateId,
      userId: keyData.userId,
      organizationId: keyData.organizationId,
      filters: keyData.filters,
      dateRange: {
        start: keyData.dateRange.start.toISOString(),
        end: keyData.dateRange.end.toISOString()
      },
      metrics: keyData.metrics.sort(),
      dimensions: keyData.dimensions.sort()
    }));
    const hash =
    /* istanbul ignore next */
    (cov_11rkocrdr3().s[36]++, createHash('sha256').update(keyString).digest('hex'));
    /* istanbul ignore next */
    cov_11rkocrdr3().s[37]++;
    return `${prefix}:${hash}`;
  }
  /**
   * Get cached report
   */
  async getCachedReport(keyData) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[8]++;
    cov_11rkocrdr3().s[38]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[39]++, this.generateCacheKey(keyData));
      const cached =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[40]++, await this.redis.get(cacheKey));
      /* istanbul ignore next */
      cov_11rkocrdr3().s[41]++;
      if (!cached) {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[15][0]++;
        cov_11rkocrdr3().s[42]++;
        this.logger.debug(`Cache miss for key: ${cacheKey}`);
        /* istanbul ignore next */
        cov_11rkocrdr3().s[43]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_11rkocrdr3().b[15][1]++;
      }
      const report =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[44]++, JSON.parse(cached));
      // Update hit count
      /* istanbul ignore next */
      cov_11rkocrdr3().s[45]++;
      report.metadata.hitCount += 1;
      /* istanbul ignore next */
      cov_11rkocrdr3().s[46]++;
      await this.redis.setex(cacheKey, this.defaultTTL, JSON.stringify(report));
      /* istanbul ignore next */
      cov_11rkocrdr3().s[47]++;
      this.logger.debug(`Cache hit for key: ${cacheKey}`);
      /* istanbul ignore next */
      cov_11rkocrdr3().s[48]++;
      return report;
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[49]++;
      this.logger.error('Error getting cached report:', error);
      /* istanbul ignore next */
      cov_11rkocrdr3().s[50]++;
      return null;
    }
  }
  /**
   * Cache report data
   */
  async cacheReport(keyData, reportData, options =
  /* istanbul ignore next */
  (cov_11rkocrdr3().b[16][0]++, {})) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[9]++;
    cov_11rkocrdr3().s[51]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[52]++, this.generateCacheKey(keyData));
      const ttl =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[53]++,
      /* istanbul ignore next */
      (cov_11rkocrdr3().b[17][0]++, options.ttl) ||
      /* istanbul ignore next */
      (cov_11rkocrdr3().b[17][1]++, this.defaultTTL));
      const cachedReport =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[54]++, {
        id: cacheKey,
        data: reportData.data,
        metadata: {
          generatedAt: new Date(),
          templateId: keyData.templateId,
          userId: keyData.userId,
          organizationId: keyData.organizationId,
          size: JSON.stringify(reportData).length,
          hitCount: 0
        },
        charts: reportData.charts,
        summary: reportData.summary
      });
      // Check if data should be compressed
      let dataToCache =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[55]++, JSON.stringify(cachedReport));
      /* istanbul ignore next */
      cov_11rkocrdr3().s[56]++;
      if (
      /* istanbul ignore next */
      (cov_11rkocrdr3().b[19][0]++, options.compress) &&
      /* istanbul ignore next */
      (cov_11rkocrdr3().b[19][1]++, dataToCache.length > this.compressionThreshold)) {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[18][0]++;
        cov_11rkocrdr3().s[57]++;
        // In a real implementation, you would use compression here
        // For now, we'll just log that compression would happen
        this.logger.debug(`Would compress data of size: ${dataToCache.length}`);
      } else
      /* istanbul ignore next */
      {
        cov_11rkocrdr3().b[18][1]++;
      }
      // Check cache size limits
      cov_11rkocrdr3().s[58]++;
      if (dataToCache.length > this.maxCacheSize) {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[20][0]++;
        cov_11rkocrdr3().s[59]++;
        this.logger.warn(`Report data too large to cache: ${dataToCache.length} bytes`);
        /* istanbul ignore next */
        cov_11rkocrdr3().s[60]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_11rkocrdr3().b[20][1]++;
      }
      cov_11rkocrdr3().s[61]++;
      await this.redis.setex(cacheKey, ttl, dataToCache);
      // Add to cache index for management
      /* istanbul ignore next */
      cov_11rkocrdr3().s[62]++;
      await this.addToCacheIndex(cacheKey, keyData.organizationId, keyData.userId);
      /* istanbul ignore next */
      cov_11rkocrdr3().s[63]++;
      this.logger.debug(`Cached report with key: ${cacheKey}, TTL: ${ttl}s`);
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[64]++;
      this.logger.error('Error caching report:', error);
    }
  }
  /**
   * Add cache key to index for management
   */
  async addToCacheIndex(cacheKey, organizationId, userId) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[10]++;
    cov_11rkocrdr3().s[65]++;
    try {
      const orgIndexKey =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[66]++, `cache_index:org:${organizationId}`);
      const userIndexKey =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[67]++, `cache_index:user:${userId}`);
      const globalIndexKey =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[68]++, 'cache_index:global');
      /* istanbul ignore next */
      cov_11rkocrdr3().s[69]++;
      await Promise.all([this.redis.sadd(orgIndexKey, cacheKey), this.redis.sadd(userIndexKey, cacheKey), this.redis.sadd(globalIndexKey, cacheKey), this.redis.expire(orgIndexKey, this.defaultTTL * 2), this.redis.expire(userIndexKey, this.defaultTTL * 2)]);
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[70]++;
      this.logger.error('Error adding to cache index:', error);
    }
  }
  /**
   * Invalidate cache for specific organization
   */
  async invalidateOrganizationCache(organizationId) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[11]++;
    cov_11rkocrdr3().s[71]++;
    try {
      const indexKey =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[72]++, `cache_index:org:${organizationId}`);
      const cacheKeys =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[73]++, await this.redis.smembers(indexKey));
      /* istanbul ignore next */
      cov_11rkocrdr3().s[74]++;
      if (cacheKeys.length > 0) {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[21][0]++;
        cov_11rkocrdr3().s[75]++;
        await this.redis.del(...cacheKeys);
        /* istanbul ignore next */
        cov_11rkocrdr3().s[76]++;
        await this.redis.del(indexKey);
        /* istanbul ignore next */
        cov_11rkocrdr3().s[77]++;
        this.logger.log(`Invalidated ${cacheKeys.length} cache entries for organization: ${organizationId}`);
      } else
      /* istanbul ignore next */
      {
        cov_11rkocrdr3().b[21][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[78]++;
      this.logger.error('Error invalidating organization cache:', error);
    }
  }
  /**
   * Invalidate cache for specific user
   */
  async invalidateUserCache(userId) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[12]++;
    cov_11rkocrdr3().s[79]++;
    try {
      const indexKey =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[80]++, `cache_index:user:${userId}`);
      const cacheKeys =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[81]++, await this.redis.smembers(indexKey));
      /* istanbul ignore next */
      cov_11rkocrdr3().s[82]++;
      if (cacheKeys.length > 0) {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[22][0]++;
        cov_11rkocrdr3().s[83]++;
        await this.redis.del(...cacheKeys);
        /* istanbul ignore next */
        cov_11rkocrdr3().s[84]++;
        await this.redis.del(indexKey);
        /* istanbul ignore next */
        cov_11rkocrdr3().s[85]++;
        this.logger.log(`Invalidated ${cacheKeys.length} cache entries for user: ${userId}`);
      } else
      /* istanbul ignore next */
      {
        cov_11rkocrdr3().b[22][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[86]++;
      this.logger.error('Error invalidating user cache:', error);
    }
  }
  /**
   * Invalidate cache by pattern
   */
  async invalidateCacheByPattern(pattern) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[13]++;
    cov_11rkocrdr3().s[87]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[88]++, await this.redis.keys(pattern));
      /* istanbul ignore next */
      cov_11rkocrdr3().s[89]++;
      if (keys.length > 0) {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[23][0]++;
        cov_11rkocrdr3().s[90]++;
        await this.redis.del(...keys);
        /* istanbul ignore next */
        cov_11rkocrdr3().s[91]++;
        this.logger.log(`Invalidated ${keys.length} cache entries matching pattern: ${pattern}`);
      } else
      /* istanbul ignore next */
      {
        cov_11rkocrdr3().b[23][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[92]++;
      this.logger.error('Error invalidating cache by pattern:', error);
    }
  }
  /**
   * Get cache statistics
   */
  async getCacheStats() {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[14]++;
    cov_11rkocrdr3().s[93]++;
    try {
      const info =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[94]++, await this.redis.info('memory'));
      const globalKeys =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[95]++, await this.redis.smembers('cache_index:global'));
      let totalHits =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[96]++, 0);
      let totalRequests =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[97]++, 0);
      const reportStats =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[98]++, []);
      // Get stats for each cached report
      /* istanbul ignore next */
      cov_11rkocrdr3().s[99]++;
      for (const key of globalKeys.slice(0, 100)) {
        /* istanbul ignore next */
        cov_11rkocrdr3().s[100]++;
        // Limit to avoid performance issues
        try {
          const cached =
          /* istanbul ignore next */
          (cov_11rkocrdr3().s[101]++, await this.redis.get(key));
          /* istanbul ignore next */
          cov_11rkocrdr3().s[102]++;
          if (cached) {
            /* istanbul ignore next */
            cov_11rkocrdr3().b[24][0]++;
            const report =
            /* istanbul ignore next */
            (cov_11rkocrdr3().s[103]++, JSON.parse(cached));
            /* istanbul ignore next */
            cov_11rkocrdr3().s[104]++;
            totalHits += report.metadata.hitCount;
            /* istanbul ignore next */
            cov_11rkocrdr3().s[105]++;
            totalRequests += report.metadata.hitCount + 1; // +1 for initial cache
            /* istanbul ignore next */
            cov_11rkocrdr3().s[106]++;
            reportStats.push({
              key,
              hits: report.metadata.hitCount,
              size: report.metadata.size
            });
          } else
          /* istanbul ignore next */
          {
            cov_11rkocrdr3().b[24][1]++;
          }
        } catch (error) {
          // Skip invalid cache entries
        }
      }
      // Sort by hits and get top 10
      const topReports =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[107]++, reportStats.sort((a, b) => {
        /* istanbul ignore next */
        cov_11rkocrdr3().f[15]++;
        cov_11rkocrdr3().s[108]++;
        return b.hits - a.hits;
      }).slice(0, 10));
      const memoryMatch =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[109]++, info.match(/used_memory_human:([^\r\n]+)/));
      const memoryUsage =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[110]++, memoryMatch ?
      /* istanbul ignore next */
      (cov_11rkocrdr3().b[25][0]++, memoryMatch[1]) :
      /* istanbul ignore next */
      (cov_11rkocrdr3().b[25][1]++, 'Unknown'));
      const hitRate =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[111]++, totalRequests > 0 ?
      /* istanbul ignore next */
      (cov_11rkocrdr3().b[26][0]++, totalHits / totalRequests * 100) :
      /* istanbul ignore next */
      (cov_11rkocrdr3().b[26][1]++, 0));
      /* istanbul ignore next */
      cov_11rkocrdr3().s[112]++;
      return {
        totalKeys: globalKeys.length,
        memoryUsage,
        hitRate: Math.round(hitRate * 100) / 100,
        topReports
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[113]++;
      this.logger.error('Error getting cache stats:', error);
      /* istanbul ignore next */
      cov_11rkocrdr3().s[114]++;
      return {
        totalKeys: 0,
        memoryUsage: 'Unknown',
        hitRate: 0,
        topReports: []
      };
    }
  }
  /**
   * Warm up cache with frequently requested reports
   */
  async warmUpCache(organizationId, commonReportConfigs) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[16]++;
    cov_11rkocrdr3().s[115]++;
    this.logger.log(`Starting cache warm-up for organization: ${organizationId}`);
    /* istanbul ignore next */
    cov_11rkocrdr3().s[116]++;
    for (const config of commonReportConfigs) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[117]++;
      try {
        // Check if already cached
        const existing =
        /* istanbul ignore next */
        (cov_11rkocrdr3().s[118]++, await this.getCachedReport(config));
        /* istanbul ignore next */
        cov_11rkocrdr3().s[119]++;
        if (!existing) {
          /* istanbul ignore next */
          cov_11rkocrdr3().b[27][0]++;
          cov_11rkocrdr3().s[120]++;
          // Generate and cache the report
          // This would typically call your report generation service
          this.logger.debug(`Would generate and cache report for warm-up: ${JSON.stringify(config)}`);
        } else
        /* istanbul ignore next */
        {
          cov_11rkocrdr3().b[27][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_11rkocrdr3().s[121]++;
        this.logger.error('Error during cache warm-up:', error);
      }
    }
  }
  /**
   * Clean up expired cache entries
   */
  async cleanupExpiredCache() {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[17]++;
    cov_11rkocrdr3().s[122]++;
    try {
      const globalKeys =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[123]++, await this.redis.smembers('cache_index:global'));
      let cleanedCount =
      /* istanbul ignore next */
      (cov_11rkocrdr3().s[124]++, 0);
      /* istanbul ignore next */
      cov_11rkocrdr3().s[125]++;
      for (const key of globalKeys) {
        const exists =
        /* istanbul ignore next */
        (cov_11rkocrdr3().s[126]++, await this.redis.exists(key));
        /* istanbul ignore next */
        cov_11rkocrdr3().s[127]++;
        if (!exists) {
          /* istanbul ignore next */
          cov_11rkocrdr3().b[28][0]++;
          cov_11rkocrdr3().s[128]++;
          // Remove from indexes
          await this.redis.srem('cache_index:global', key);
          /* istanbul ignore next */
          cov_11rkocrdr3().s[129]++;
          cleanedCount++;
        } else
        /* istanbul ignore next */
        {
          cov_11rkocrdr3().b[28][1]++;
        }
      }
      /* istanbul ignore next */
      cov_11rkocrdr3().s[130]++;
      if (cleanedCount > 0) {
        /* istanbul ignore next */
        cov_11rkocrdr3().b[29][0]++;
        cov_11rkocrdr3().s[131]++;
        this.logger.log(`Cleaned up ${cleanedCount} expired cache entries`);
      } else
      /* istanbul ignore next */
      {
        cov_11rkocrdr3().b[29][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[132]++;
      this.logger.error('Error cleaning up expired cache:', error);
    }
  }
  /**
   * Check if cache is available
   */
  async isAvailable() {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[18]++;
    cov_11rkocrdr3().s[133]++;
    try {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[134]++;
      await this.redis.ping();
      /* istanbul ignore next */
      cov_11rkocrdr3().s[135]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[136]++;
      this.logger.error('Cache not available:', error);
      /* istanbul ignore next */
      cov_11rkocrdr3().s[137]++;
      return false;
    }
  }
  /**
   * Get cache key for debugging
   */
  getCacheKeyForDebugging(keyData) {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[19]++;
    cov_11rkocrdr3().s[138]++;
    return this.generateCacheKey(keyData);
  }
  /**
   * Flush all cache (use with caution)
   */
  async flushAll() {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[20]++;
    cov_11rkocrdr3().s[139]++;
    try {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[140]++;
      await this.redis.flushall();
      /* istanbul ignore next */
      cov_11rkocrdr3().s[141]++;
      this.logger.warn('All cache data has been flushed');
    } catch (error) {
      /* istanbul ignore next */
      cov_11rkocrdr3().s[142]++;
      this.logger.error('Error flushing cache:', error);
    }
  }
  /**
   * Close Redis connection
   */
  async onModuleDestroy() {
    /* istanbul ignore next */
    cov_11rkocrdr3().f[21]++;
    cov_11rkocrdr3().s[143]++;
    if (this.redis) {
      /* istanbul ignore next */
      cov_11rkocrdr3().b[30][0]++;
      cov_11rkocrdr3().s[144]++;
      await this.redis.quit();
      /* istanbul ignore next */
      cov_11rkocrdr3().s[145]++;
      this.logger.log('Redis connection closed');
    } else
    /* istanbul ignore next */
    {
      cov_11rkocrdr3().b[30][1]++;
    }
  }
});
/* istanbul ignore next */
cov_11rkocrdr3().s[146]++;
CacheService = CacheService_1 = __decorate([Injectable(), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_11rkocrdr3().b[32][0]++, typeof ConfigService !== "undefined") &&
/* istanbul ignore next */
(cov_11rkocrdr3().b[32][1]++, ConfigService)) === "function" ?
/* istanbul ignore next */
(cov_11rkocrdr3().b[31][0]++, _a) :
/* istanbul ignore next */
(cov_11rkocrdr3().b[31][1]++, Object)])], CacheService);
export { CacheService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,