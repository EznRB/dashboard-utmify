19036f07ed15997363ae4830bc1c9aa1
/* istanbul ignore next */
function cov_4dvdc1maj() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\workers.routes.ts";
  var hash = "54f1386986ba60f0e228ba209d1e9c49248fd3c5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\workers.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 30
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "1": {
        start: {
          line: 22,
          column: 36
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "2": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 50
        }
      },
      "3": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 58
        }
      },
      "4": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 77,
          column: 7
        }
      },
      "5": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "6": {
        start: {
          line: 66,
          column: 34
        },
        end: {
          line: 66,
          column: 52
        }
      },
      "7": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 64
        }
      },
      "8": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "9": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 64
        }
      },
      "10": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 90
        }
      },
      "11": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 141,
          column: 7
        }
      },
      "12": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "13": {
        start: {
          line: 102,
          column: 25
        },
        end: {
          line: 102,
          column: 37
        }
      },
      "14": {
        start: {
          line: 103,
          column: 34
        },
        end: {
          line: 103,
          column: 52
        }
      },
      "15": {
        start: {
          line: 104,
          column: 26
        },
        end: {
          line: 104,
          column: 66
        }
      },
      "16": {
        start: {
          line: 106,
          column: 29
        },
        end: {
          line: 111,
          column: 14
        }
      },
      "17": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "18": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 84
        }
      },
      "19": {
        start: {
          line: 115,
          column: 30
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "20": {
        start: {
          line: 119,
          column: 24
        },
        end: {
          line: 119,
          column: 65
        }
      },
      "21": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "22": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "23": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "24": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 28
        }
      },
      "25": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 70
        }
      },
      "26": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 100
        }
      },
      "27": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 219,
          column: 7
        }
      },
      "28": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "29": {
        start: {
          line: 170,
          column: 25
        },
        end: {
          line: 170,
          column: 37
        }
      },
      "30": {
        start: {
          line: 171,
          column: 34
        },
        end: {
          line: 171,
          column: 52
        }
      },
      "31": {
        start: {
          line: 172,
          column: 26
        },
        end: {
          line: 172,
          column: 66
        }
      },
      "32": {
        start: {
          line: 174,
          column: 32
        },
        end: {
          line: 174,
          column: 88
        }
      },
      "33": {
        start: {
          line: 174,
          column: 69
        },
        end: {
          line: 174,
          column: 85
        }
      },
      "34": {
        start: {
          line: 176,
          column: 30
        },
        end: {
          line: 182,
          column: 14
        }
      },
      "35": {
        start: {
          line: 183,
          column: 37
        },
        end: {
          line: 183,
          column: 70
        }
      },
      "36": {
        start: {
          line: 183,
          column: 64
        },
        end: {
          line: 183,
          column: 68
        }
      },
      "37": {
        start: {
          line: 184,
          column: 32
        },
        end: {
          line: 184,
          column: 99
        }
      },
      "38": {
        start: {
          line: 184,
          column: 60
        },
        end: {
          line: 184,
          column: 98
        }
      },
      "39": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "40": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 90
        }
      },
      "41": {
        start: {
          line: 189,
          column: 25
        },
        end: {
          line: 195,
          column: 15
        }
      },
      "42": {
        start: {
          line: 190,
          column: 34
        },
        end: {
          line: 193,
          column: 17
        }
      },
      "43": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 59
        }
      },
      "44": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 196,
          column: 50
        }
      },
      "45": {
        start: {
          line: 196,
          column: 43
        },
        end: {
          line: 196,
          column: 49
        }
      },
      "46": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 202,
          column: 15
        }
      },
      "47": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 210,
          column: 15
        }
      },
      "48": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "49": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 28
        }
      },
      "50": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 77
        }
      },
      "51": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 107
        }
      },
      "52": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 287,
          column: 7
        }
      },
      "53": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "54": {
        start: {
          line: 257,
          column: 30
        },
        end: {
          line: 257,
          column: 44
        }
      },
      "55": {
        start: {
          line: 258,
          column: 34
        },
        end: {
          line: 258,
          column: 52
        }
      },
      "56": {
        start: {
          line: 259,
          column: 26
        },
        end: {
          line: 259,
          column: 83
        }
      },
      "57": {
        start: {
          line: 260,
          column: 24
        },
        end: {
          line: 260,
          column: 49
        }
      },
      "58": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "59": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 74
        }
      },
      "60": {
        start: {
          line: 264,
          column: 28
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "61": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 278,
          column: 15
        }
      },
      "62": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "63": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 28
        }
      },
      "64": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 61
        }
      },
      "65": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 84
        }
      },
      "66": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 364,
          column: 7
        }
      },
      "67": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "68": {
        start: {
          line: 314,
          column: 27
        },
        end: {
          line: 314,
          column: 55
        }
      },
      "69": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 317,
          column: 13
        }
      },
      "70": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 316,
          column: 79
        }
      },
      "71": {
        start: {
          line: 319,
          column: 33
        },
        end: {
          line: 324,
          column: 14
        }
      },
      "72": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 327,
          column: 13
        }
      },
      "73": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 78
        }
      },
      "74": {
        start: {
          line: 328,
          column: 25
        },
        end: {
          line: 328,
          column: 37
        }
      },
      "75": {
        start: {
          line: 330,
          column: 29
        },
        end: {
          line: 335,
          column: 14
        }
      },
      "76": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "77": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 84
        }
      },
      "78": {
        start: {
          line: 339,
          column: 34
        },
        end: {
          line: 339,
          column: 52
        }
      },
      "79": {
        start: {
          line: 340,
          column: 26
        },
        end: {
          line: 340,
          column: 66
        }
      },
      "80": {
        start: {
          line: 341,
          column: 30
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "81": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 54
        }
      },
      "82": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 351,
          column: 15
        }
      },
      "83": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 355,
          column: 15
        }
      },
      "84": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 360,
          column: 13
        }
      },
      "85": {
        start: {
          line: 359,
          column: 16
        },
        end: {
          line: 359,
          column: 28
        }
      },
      "86": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 78
        }
      },
      "87": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 99
        }
      }
    },
    fnMap: {
      "0": {
        name: "workersRoutes",
        decl: {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 35
          }
        },
        loc: {
          start: {
            line: 25,
            column: 45
          },
          end: {
            line: 365,
            column: 1
          }
        },
        line: 25
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 64,
            column: 7
          },
          end: {
            line: 64,
            column: 8
          }
        },
        loc: {
          start: {
            line: 64,
            column: 33
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 64
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 100,
            column: 7
          },
          end: {
            line: 100,
            column: 8
          }
        },
        loc: {
          start: {
            line: 100,
            column: 33
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 100
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 168,
            column: 7
          },
          end: {
            line: 168,
            column: 8
          }
        },
        loc: {
          start: {
            line: 168,
            column: 33
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 168
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 174,
            column: 60
          },
          end: {
            line: 174,
            column: 61
          }
        },
        loc: {
          start: {
            line: 174,
            column: 69
          },
          end: {
            line: 174,
            column: 85
          }
        },
        line: 174
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 183,
            column: 59
          },
          end: {
            line: 183,
            column: 60
          }
        },
        loc: {
          start: {
            line: 183,
            column: 64
          },
          end: {
            line: 183,
            column: 68
          }
        },
        line: 183
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 184,
            column: 51
          },
          end: {
            line: 184,
            column: 52
          }
        },
        loc: {
          start: {
            line: 184,
            column: 60
          },
          end: {
            line: 184,
            column: 98
          }
        },
        line: 184
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 189,
            column: 59
          },
          end: {
            line: 189,
            column: 60
          }
        },
        loc: {
          start: {
            line: 189,
            column: 76
          },
          end: {
            line: 195,
            column: 13
          }
        },
        line: 189
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 196,
            column: 36
          },
          end: {
            line: 196,
            column: 37
          }
        },
        loc: {
          start: {
            line: 196,
            column: 43
          },
          end: {
            line: 196,
            column: 49
          }
        },
        line: 196
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 255,
            column: 7
          },
          end: {
            line: 255,
            column: 8
          }
        },
        loc: {
          start: {
            line: 255,
            column: 33
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 255
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 312,
            column: 7
          },
          end: {
            line: 312,
            column: 8
          }
        },
        loc: {
          start: {
            line: 312,
            column: 33
          },
          end: {
            line: 364,
            column: 5
          }
        },
        line: 312
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "1": {
        loc: {
          start: {
            line: 117,
            column: 27
          },
          end: {
            line: 117,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 44
          },
          end: {
            line: 117,
            column: 68
          }
        }, {
          start: {
            line: 117,
            column: 71
          },
          end: {
            line: 117,
            column: 81
          }
        }],
        line: 117
      },
      "2": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "3": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "4": {
        loc: {
          start: {
            line: 192,
            column: 31
          },
          end: {
            line: 192,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 49
          },
          end: {
            line: 192,
            column: 74
          }
        }, {
          start: {
            line: 192,
            column: 77
          },
          end: {
            line: 192,
            column: 87
          }
        }],
        line: 192
      },
      "5": {
        loc: {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 215,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 215,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "6": {
        loc: {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "7": {
        loc: {
          start: {
            line: 272,
            column: 29
          },
          end: {
            line: 272,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 47
          },
          end: {
            line: 272,
            column: 86
          }
        }, {
          start: {
            line: 272,
            column: 89
          },
          end: {
            line: 272,
            column: 93
          }
        }],
        line: 272
      },
      "8": {
        loc: {
          start: {
            line: 273,
            column: 28
          },
          end: {
            line: 273,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 273,
            column: 45
          },
          end: {
            line: 273,
            column: 83
          }
        }, {
          start: {
            line: 273,
            column: 86
          },
          end: {
            line: 273,
            column: 90
          }
        }],
        line: 273
      },
      "9": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "10": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "11": {
        loc: {
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 327,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 327,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "12": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "13": {
        loc: {
          start: {
            line: 343,
            column: 27
          },
          end: {
            line: 343,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 343,
            column: 44
          },
          end: {
            line: 343,
            column: 68
          }
        }, {
          start: {
            line: 343,
            column: 71
          },
          end: {
            line: 343,
            column: 81
          }
        }],
        line: 343
      },
      "14": {
        loc: {
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\workers.routes.ts",
      mappings: "AACA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,gBAAgB,EAAuB,MAAM,YAAY,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,sBAAsB,EAAE,MAAM,+BAA+B,CAAC;AACvF,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAEzC,qBAAqB;AACrB,MAAM,qBAAqB,GAAG,CAAC,CAAC,MAAM,CAAC;IACrC,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC;IAClD,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;IAChF,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IACnC,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;IACxD,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC7B,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAChC,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAChC,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAChC,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAClC,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACjC,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC9B,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE;IACtC,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;CAC5C,CAAC,CAAC;AAEH,MAAM,2BAA2B,GAAG,CAAC,CAAC,MAAM,CAAC;IAC3C,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;CACvD,CAAC,CAAC;AAEH,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,OAAwB;IAC1D,iBAAiB;IACjB,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IAC9C,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;IAEtD,2BAA2B;IAC3B,OAAO,CAAC,GAAG,CACT,SAAS,EACT;QACE,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,SAAS,CAAC;YACjB,OAAO,EAAE,0BAA0B;YACnC,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC,EAAE;gCAC1D,OAAO,EAAE;oCACP,IAAI,EAAE,QAAQ;oCACd,UAAU,EAAE;wCACV,gBAAgB,EAAE;4CAChB,IAAI,EAAE,QAAQ;4CACd,UAAU,EAAE;gDACV,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;gDACxD,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gDAC7B,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gDAC9B,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gDAC7B,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6CAC3B;yCACF;qCACF;iCACF;6BACF;yBACF;qBACF;iBACF;aACF;SACF;KACF,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;YACzC,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,eAAe,EAAE,CAAC;YAErD,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,MAAM;aACb,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,IAAI,QAAQ,CAAC,6BAA6B,EAAE,qBAAqB,EAAE,GAAG,CAAC,CAAC;QAChF,CAAC;IACH,CAAC,CACF,CAAC;IAEF,kCAAkC;IAClC,OAAO,CAAC,IAAI,CACV,oBAAoB,EACpB;QACE,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,SAAS,CAAC;YACjB,OAAO,EAAE,4BAA4B;YACrC,IAAI,EAAE,qBAAqB;YAC3B,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACzB,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6BAC5B;yBACF;qBACF;iBACF;aACF;SACF;KACF,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,OAAO,CAAC,IAA6C,CAAC;YACnE,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;YACzC,MAAM,KAAK,GAAG,aAAa,CAAC,wBAAwB,EAAE,CAAC;YAEvD,4CAA4C;YAC5C,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAC1D,KAAK,EAAE;oBACL,EAAE,EAAE,IAAI,CAAC,UAAU;oBACnB,cAAc,EAAE,OAAO,CAAC,YAAa,CAAC,EAAE;iBACzC;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,QAAQ,CAAC,oBAAoB,EAAE,oBAAoB,EAAE,GAAG,CAAC,CAAC;YACtE,CAAC;YAED,MAAM,SAAS,GAAwB;gBACrC,GAAG,IAAI;gBACP,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;aAClE,CAAC;YAEF,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAEtD,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE;gBACrC,KAAK,EAAE,GAAG,CAAC,EAAE;gBACb,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,cAAc,EAAE,OAAO,CAAC,YAAa,CAAC,EAAE;aACzC,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,KAAK,EAAE,GAAG,CAAC,EAAE;oBACb,OAAO,EAAE,wCAAwC;iBAClD;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;gBAC9B,MAAM,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC1D,MAAM,IAAI,QAAQ,CAAC,oCAAoC,EAAE,wBAAwB,EAAE,GAAG,CAAC,CAAC;QAC1F,CAAC;IACH,CAAC,CACF,CAAC;IAEF,kCAAkC;IAClC,OAAO,CAAC,IAAI,CACV,0BAA0B,EAC1B;QACE,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,SAAS,CAAC;YACjB,OAAO,EAAE,oCAAoC;YAC7C,IAAI,EAAE,2BAA2B;YACjC,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,MAAM,EAAE;oCACN,IAAI,EAAE,OAAO;oCACb,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;iCAC1B;gCACD,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC7B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6BAC5B;yBACF;qBACF;iBACF;aACF;SACF;KACF,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,OAAO,CAAC,IAAmD,CAAC;YACzE,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;YACzC,MAAM,KAAK,GAAG,aAAa,CAAC,wBAAwB,EAAE,CAAC;YAEvD,8BAA8B;YAC9B,MAAM,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAE7E,gDAAgD;YAChD,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAC1D,KAAK,EAAE;oBACL,EAAE,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE;oBACvB,cAAc,EAAE,OAAO,CAAC,YAAa,CAAC,EAAE;iBACzC;gBACD,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;aACrB,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3D,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAC7C,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CACvC,CAAC;YAEF,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7B,MAAM,IAAI,QAAQ,CAAC,0BAA0B,EAAE,oBAAoB,EAAE,GAAG,CAAC,CAAC;YAC5E,CAAC;YAED,yBAAyB;YACzB,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,GAAG,CAC5B,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;gBAC9B,MAAM,SAAS,GAAwB;oBACrC,GAAG,KAAK;oBACR,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;iBACpE,CAAC;gBACF,OAAO,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAC7C,CAAC,CAAC,CACH,CAAC;YAEF,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAG,CAAC,CAAC;YAExC,MAAM,CAAC,IAAI,CAAC,gCAAgC,EAAE;gBAC5C,MAAM;gBACN,SAAS,EAAE,WAAW,CAAC,MAAM;gBAC7B,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;gBACzB,cAAc,EAAE,OAAO,CAAC,YAAa,CAAC,EAAE;aACzC,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,MAAM;oBACN,SAAS,EAAE,WAAW,CAAC,MAAM;oBAC7B,OAAO,EAAE,GAAG,WAAW,CAAC,MAAM,0CAA0C;iBACzE;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;gBAC9B,MAAM,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;YACjE,MAAM,IAAI,QAAQ,CAAC,2CAA2C,EAAE,wBAAwB,EAAE,GAAG,CAAC,CAAC;QACjG,CAAC;IACH,CAAC,CACF,CAAC;IAEF,kCAAkC;IAClC,OAAO,CAAC,GAAG,CACT,gCAAgC,EAChC;QACE,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,SAAS,CAAC;YACjB,OAAO,EAAE,iCAAiC;YAC1C,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;iBAC1B;gBACD,QAAQ,EAAE,CAAC,OAAO,CAAC;aACpB;YACD,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACtB,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC5B,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACxB,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC1B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACzB,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC7B,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC/B,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6BAC/B;yBACF;qBACF;iBACF;aACF;SACF;KACF,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,MAA2B,CAAC;YACtD,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;YACzC,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,wBAAwB,EAAE,CAAC,QAAQ,EAAE,CAAC;YAExE,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,CAAC,GAAG,EAAE,CAAC;gBACT,MAAM,IAAI,QAAQ,CAAC,eAAe,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YAC5D,CAAC;YAED,MAAM,OAAO,GAAG;gBACd,EAAE,EAAE,GAAG,CAAC,EAAE;gBACV,MAAM,EAAE,MAAM,GAAG,CAAC,QAAQ,EAAE;gBAC5B,QAAQ,EAAE,GAAG,CAAC,QAAQ;gBACtB,IAAI,EAAE,GAAG,CAAC,IAAI;gBACd,MAAM,EAAE,GAAG,CAAC,WAAW;gBACvB,KAAK,EAAE,GAAG,CAAC,YAAY;gBACvB,SAAS,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE;gBAChD,WAAW,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI;gBAC7E,UAAU,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI;aAC3E,CAAC;YAEF,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,OAAO;aACd,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;gBAC9B,MAAM,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,IAAI,QAAQ,CAAC,0BAA0B,EAAE,kBAAkB,EAAE,GAAG,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC,CACF,CAAC;IAEF,qEAAqE;IACrE,OAAO,CAAC,IAAI,CACV,6BAA6B,EAC7B;QACE,UAAU,EAAE,EAAE,EAAE,kCAAkC;QAClD,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,UAAU,CAAC;YAClB,OAAO,EAAE,wCAAwC;YACjD,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;iBAChC;gBACD,QAAQ,EAAE,CAAC,WAAW,CAAC;aACxB;YACD,IAAI,EAAE,qBAAqB;YAC3B,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;qBAC5B;iBACF;aACF;SACF;KACF,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAW,CAAC;YACtD,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,QAAQ,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,GAAG,CAAC,CAAC;YACjE,CAAC;YAED,+BAA+B;YAC/B,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC;gBAClE,KAAK,EAAE;oBACL,MAAM;oBACN,QAAQ,EAAE,IAAI;iBACf;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,MAAM,IAAI,QAAQ,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAChE,CAAC;YAED,MAAM,IAAI,GAAG,OAAO,CAAC,IAA6C,CAAC;YAEnE,4CAA4C;YAC5C,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAC1D,KAAK,EAAE;oBACL,EAAE,EAAE,IAAI,CAAC,UAAU;oBACnB,cAAc,EAAE,YAAY,CAAC,EAAE;iBAChC;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,QAAQ,CAAC,oBAAoB,EAAE,oBAAoB,EAAE,GAAG,CAAC,CAAC;YACtE,CAAC;YAED,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;YACzC,MAAM,KAAK,GAAG,aAAa,CAAC,wBAAwB,EAAE,CAAC;YAEvD,MAAM,SAAS,GAAwB;gBACrC,GAAG,IAAI;gBACP,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;aAClE,CAAC;YAEF,MAAM,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAE1C,MAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE;gBAC7C,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,cAAc,EAAE,YAAY,CAAC,EAAE;gBAC/B,MAAM,EAAE,SAAS;aAClB,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qDAAqD;aAC/D,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;gBAC9B,MAAM,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;YAClE,MAAM,IAAI,QAAQ,CAAC,4CAA4C,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;QACzF,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\workers.routes.ts"],
      sourcesContent: ["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { z } from 'zod';\nimport { getWorkerManager, ConversionEventData } from '../workers';\nimport { authMiddleware, organizationMiddleware } from '../middleware/auth.middleware';\nimport { ApiError } from '../utils/errors';\nimport { logger } from '../utils/logger';\n\n// Validation schemas\nconst ConversionEventSchema = z.object({\n  campaignId: z.string().uuid('Invalid campaign ID'),\n  eventType: z.enum(['purchase', 'lead', 'signup', 'add_to_cart', 'view_content']),\n  value: z.number().min(0).optional(),\n  currency: z.string().length(3).optional().default('BRL'),\n  userId: z.string().optional(),\n  sessionId: z.string().optional(),\n  utmSource: z.string().optional(),\n  utmMedium: z.string().optional(),\n  utmCampaign: z.string().optional(),\n  utmContent: z.string().optional(),\n  utmTerm: z.string().optional(),\n  metadata: z.record(z.any()).optional(),\n  timestamp: z.string().datetime().optional(),\n});\n\nconst BatchConversionEventsSchema = z.object({\n  events: z.array(ConversionEventSchema).min(1).max(100),\n});\n\nexport async function workersRoutes(fastify: FastifyInstance) {\n  // Add middleware\n  fastify.addHook('preHandler', authMiddleware);\n  fastify.addHook('preHandler', organizationMiddleware);\n\n  // Health check for workers\n  fastify.get(\n    '/health',\n    {\n      schema: {\n        tags: ['Workers'],\n        summary: 'Get worker health status',\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  status: { type: 'string', enum: ['healthy', 'unhealthy'] },\n                  workers: {\n                    type: 'object',\n                    properties: {\n                      conversionEvents: {\n                        type: 'object',\n                        properties: {\n                          status: { type: 'string', enum: ['running', 'stopped'] },\n                          queueSize: { type: 'number' },\n                          processing: { type: 'number' },\n                          completed: { type: 'number' },\n                          failed: { type: 'number' },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const workerManager = getWorkerManager();\n        const health = await workerManager.getWorkerHealth();\n\n        return reply.status(200).send({\n          success: true,\n          data: health,\n        });\n      } catch (error) {\n        logger.error('Error getting worker health:', error);\n        throw new ApiError('Failed to get worker health', 'WORKER_HEALTH_ERROR', 500);\n      }\n    }\n  );\n\n  // Process single conversion event\n  fastify.post(\n    '/conversion-events',\n    {\n      schema: {\n        tags: ['Workers'],\n        summary: 'Process a conversion event',\n        body: ConversionEventSchema,\n        response: {\n          202: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  jobId: { type: 'string' },\n                  message: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const body = request.body as z.infer<typeof ConversionEventSchema>;\n        const workerManager = getWorkerManager();\n        const queue = workerManager.getConversionEventsQueue();\n\n        // Validate campaign belongs to organization\n        const campaign = await request.server.db.campaign.findFirst({\n          where: {\n            id: body.campaignId,\n            organizationId: request.organization!.id,\n          },\n        });\n\n        if (!campaign) {\n          throw new ApiError('Campaign not found', 'CAMPAIGN_NOT_FOUND', 404);\n        }\n\n        const eventData: ConversionEventData = {\n          ...body,\n          timestamp: body.timestamp ? new Date(body.timestamp) : new Date(),\n        };\n\n        const job = await queue.addConversionEvent(eventData);\n\n        logger.info('Conversion event queued', {\n          jobId: job.id,\n          campaignId: body.campaignId,\n          eventType: body.eventType,\n          organizationId: request.organization!.id,\n        });\n\n        return reply.status(202).send({\n          success: true,\n          data: {\n            jobId: job.id,\n            message: 'Conversion event queued for processing',\n          },\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error processing conversion event:', error);\n        throw new ApiError('Failed to process conversion event', 'CONVERSION_EVENT_ERROR', 500);\n      }\n    }\n  );\n\n  // Process batch conversion events\n  fastify.post(\n    '/conversion-events/batch',\n    {\n      schema: {\n        tags: ['Workers'],\n        summary: 'Process multiple conversion events',\n        body: BatchConversionEventsSchema,\n        response: {\n          202: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  jobIds: {\n                    type: 'array',\n                    items: { type: 'string' },\n                  },\n                  processed: { type: 'number' },\n                  message: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const body = request.body as z.infer<typeof BatchConversionEventsSchema>;\n        const workerManager = getWorkerManager();\n        const queue = workerManager.getConversionEventsQueue();\n\n        // Get all unique campaign IDs\n        const campaignIds = [...new Set(body.events.map(event => event.campaignId))];\n\n        // Validate all campaigns belong to organization\n        const campaigns = await request.server.db.campaign.findMany({\n          where: {\n            id: { in: campaignIds },\n            organizationId: request.organization!.id,\n          },\n          select: { id: true },\n        });\n\n        const validCampaignIds = new Set(campaigns.map(c => c.id));\n        const validEvents = body.events.filter(event => \n          validCampaignIds.has(event.campaignId)\n        );\n\n        if (validEvents.length === 0) {\n          throw new ApiError('No valid campaigns found', 'NO_VALID_CAMPAIGNS', 400);\n        }\n\n        // Queue all valid events\n        const jobs = await Promise.all(\n          validEvents.map(async (event) => {\n            const eventData: ConversionEventData = {\n              ...event,\n              timestamp: event.timestamp ? new Date(event.timestamp) : new Date(),\n            };\n            return queue.addConversionEvent(eventData);\n          })\n        );\n\n        const jobIds = jobs.map(job => job.id!);\n\n        logger.info('Batch conversion events queued', {\n          jobIds,\n          processed: validEvents.length,\n          total: body.events.length,\n          organizationId: request.organization!.id,\n        });\n\n        return reply.status(202).send({\n          success: true,\n          data: {\n            jobIds,\n            processed: validEvents.length,\n            message: `${validEvents.length} conversion events queued for processing`,\n          },\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error processing batch conversion events:', error);\n        throw new ApiError('Failed to process batch conversion events', 'BATCH_CONVERSION_ERROR', 500);\n      }\n    }\n  );\n\n  // Get conversion event job status\n  fastify.get(\n    '/conversion-events/jobs/:jobId',\n    {\n      schema: {\n        tags: ['Workers'],\n        summary: 'Get conversion event job status',\n        params: {\n          type: 'object',\n          properties: {\n            jobId: { type: 'string' },\n          },\n          required: ['jobId'],\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  id: { type: 'string' },\n                  status: { type: 'string' },\n                  progress: { type: 'number' },\n                  data: { type: 'object' },\n                  result: { type: 'object' },\n                  error: { type: 'string' },\n                  createdAt: { type: 'string' },\n                  processedAt: { type: 'string' },\n                  finishedAt: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const { jobId } = request.params as { jobId: string };\n        const workerManager = getWorkerManager();\n        const queue = await workerManager.getConversionEventsQueue().getQueue();\n\n        const job = await queue.getJob(jobId);\n        if (!job) {\n          throw new ApiError('Job not found', 'JOB_NOT_FOUND', 404);\n        }\n\n        const jobData = {\n          id: job.id,\n          status: await job.getState(),\n          progress: job.progress,\n          data: job.data,\n          result: job.returnvalue,\n          error: job.failedReason,\n          createdAt: new Date(job.timestamp).toISOString(),\n          processedAt: job.processedOn ? new Date(job.processedOn).toISOString() : null,\n          finishedAt: job.finishedOn ? new Date(job.finishedOn).toISOString() : null,\n        };\n\n        return reply.status(200).send({\n          success: true,\n          data: jobData,\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error getting job status:', error);\n        throw new ApiError('Failed to get job status', 'JOB_STATUS_ERROR', 500);\n      }\n    }\n  );\n\n  // Webhook endpoint for external conversion events (no auth required)\n  fastify.post(\n    '/webhooks/conversion-events',\n    {\n      preHandler: [], // No auth middleware for webhooks\n      schema: {\n        tags: ['Webhooks'],\n        summary: 'Webhook for external conversion events',\n        headers: {\n          type: 'object',\n          properties: {\n            'x-api-key': { type: 'string' },\n          },\n          required: ['x-api-key'],\n        },\n        body: ConversionEventSchema,\n        response: {\n          202: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const apiKey = request.headers['x-api-key'] as string;\n        if (!apiKey) {\n          throw new ApiError('API key required', 'MISSING_API_KEY', 401);\n        }\n\n        // Find organization by API key\n        const organization = await request.server.db.organization.findFirst({\n          where: {\n            apiKey,\n            isActive: true,\n          },\n        });\n\n        if (!organization) {\n          throw new ApiError('Invalid API key', 'INVALID_API_KEY', 401);\n        }\n\n        const body = request.body as z.infer<typeof ConversionEventSchema>;\n        \n        // Validate campaign belongs to organization\n        const campaign = await request.server.db.campaign.findFirst({\n          where: {\n            id: body.campaignId,\n            organizationId: organization.id,\n          },\n        });\n\n        if (!campaign) {\n          throw new ApiError('Campaign not found', 'CAMPAIGN_NOT_FOUND', 404);\n        }\n\n        const workerManager = getWorkerManager();\n        const queue = workerManager.getConversionEventsQueue();\n\n        const eventData: ConversionEventData = {\n          ...body,\n          timestamp: body.timestamp ? new Date(body.timestamp) : new Date(),\n        };\n\n        await queue.addConversionEvent(eventData);\n\n        logger.info('Webhook conversion event queued', {\n          campaignId: body.campaignId,\n          eventType: body.eventType,\n          organizationId: organization.id,\n          source: 'webhook',\n        });\n\n        return reply.status(202).send({\n          success: true,\n          message: 'Conversion event received and queued for processing',\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error processing webhook conversion event:', error);\n        throw new ApiError('Failed to process webhook conversion event', 'WEBHOOK_ERROR', 500);\n      }\n    }\n  );\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "54f1386986ba60f0e228ba209d1e9c49248fd3c5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_4dvdc1maj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_4dvdc1maj();
import { z } from 'zod';
import { getWorkerManager } from '../workers';
import { authMiddleware, organizationMiddleware } from '../middleware/auth.middleware';
import { ApiError } from '../utils/errors';
import { logger } from '../utils/logger';
// Validation schemas
const ConversionEventSchema =
/* istanbul ignore next */
(cov_4dvdc1maj().s[0]++, z.object({
  campaignId: z.string().uuid('Invalid campaign ID'),
  eventType: z.enum(['purchase', 'lead', 'signup', 'add_to_cart', 'view_content']),
  value: z.number().min(0).optional(),
  currency: z.string().length(3).optional().default('BRL'),
  userId: z.string().optional(),
  sessionId: z.string().optional(),
  utmSource: z.string().optional(),
  utmMedium: z.string().optional(),
  utmCampaign: z.string().optional(),
  utmContent: z.string().optional(),
  utmTerm: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  timestamp: z.string().datetime().optional()
}));
const BatchConversionEventsSchema =
/* istanbul ignore next */
(cov_4dvdc1maj().s[1]++, z.object({
  events: z.array(ConversionEventSchema).min(1).max(100)
}));
export async function workersRoutes(fastify) {
  /* istanbul ignore next */
  cov_4dvdc1maj().f[0]++;
  cov_4dvdc1maj().s[2]++;
  // Add middleware
  fastify.addHook('preHandler', authMiddleware);
  /* istanbul ignore next */
  cov_4dvdc1maj().s[3]++;
  fastify.addHook('preHandler', organizationMiddleware);
  // Health check for workers
  /* istanbul ignore next */
  cov_4dvdc1maj().s[4]++;
  fastify.get('/health', {
    schema: {
      tags: ['Workers'],
      summary: 'Get worker health status',
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                status: {
                  type: 'string',
                  enum: ['healthy', 'unhealthy']
                },
                workers: {
                  type: 'object',
                  properties: {
                    conversionEvents: {
                      type: 'object',
                      properties: {
                        status: {
                          type: 'string',
                          enum: ['running', 'stopped']
                        },
                        queueSize: {
                          type: 'number'
                        },
                        processing: {
                          type: 'number'
                        },
                        completed: {
                          type: 'number'
                        },
                        failed: {
                          type: 'number'
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_4dvdc1maj().f[1]++;
    cov_4dvdc1maj().s[5]++;
    try {
      const workerManager =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[6]++, getWorkerManager());
      const health =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[7]++, await workerManager.getWorkerHealth());
      /* istanbul ignore next */
      cov_4dvdc1maj().s[8]++;
      return reply.status(200).send({
        success: true,
        data: health
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_4dvdc1maj().s[9]++;
      logger.error('Error getting worker health:', error);
      /* istanbul ignore next */
      cov_4dvdc1maj().s[10]++;
      throw new ApiError('Failed to get worker health', 'WORKER_HEALTH_ERROR', 500);
    }
  });
  // Process single conversion event
  /* istanbul ignore next */
  cov_4dvdc1maj().s[11]++;
  fastify.post('/conversion-events', {
    schema: {
      tags: ['Workers'],
      summary: 'Process a conversion event',
      body: ConversionEventSchema,
      response: {
        202: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                jobId: {
                  type: 'string'
                },
                message: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_4dvdc1maj().f[2]++;
    cov_4dvdc1maj().s[12]++;
    try {
      const body =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[13]++, request.body);
      const workerManager =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[14]++, getWorkerManager());
      const queue =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[15]++, workerManager.getConversionEventsQueue());
      // Validate campaign belongs to organization
      const campaign =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[16]++, await request.server.db.campaign.findFirst({
        where: {
          id: body.campaignId,
          organizationId: request.organization.id
        }
      }));
      /* istanbul ignore next */
      cov_4dvdc1maj().s[17]++;
      if (!campaign) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[0][0]++;
        cov_4dvdc1maj().s[18]++;
        throw new ApiError('Campaign not found', 'CAMPAIGN_NOT_FOUND', 404);
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[0][1]++;
      }
      const eventData =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[19]++, {
        ...body,
        timestamp: body.timestamp ?
        /* istanbul ignore next */
        (cov_4dvdc1maj().b[1][0]++, new Date(body.timestamp)) :
        /* istanbul ignore next */
        (cov_4dvdc1maj().b[1][1]++, new Date())
      });
      const job =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[20]++, await queue.addConversionEvent(eventData));
      /* istanbul ignore next */
      cov_4dvdc1maj().s[21]++;
      logger.info('Conversion event queued', {
        jobId: job.id,
        campaignId: body.campaignId,
        eventType: body.eventType,
        organizationId: request.organization.id
      });
      /* istanbul ignore next */
      cov_4dvdc1maj().s[22]++;
      return reply.status(202).send({
        success: true,
        data: {
          jobId: job.id,
          message: 'Conversion event queued for processing'
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_4dvdc1maj().s[23]++;
      if (error instanceof ApiError) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[2][0]++;
        cov_4dvdc1maj().s[24]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[2][1]++;
      }
      cov_4dvdc1maj().s[25]++;
      logger.error('Error processing conversion event:', error);
      /* istanbul ignore next */
      cov_4dvdc1maj().s[26]++;
      throw new ApiError('Failed to process conversion event', 'CONVERSION_EVENT_ERROR', 500);
    }
  });
  // Process batch conversion events
  /* istanbul ignore next */
  cov_4dvdc1maj().s[27]++;
  fastify.post('/conversion-events/batch', {
    schema: {
      tags: ['Workers'],
      summary: 'Process multiple conversion events',
      body: BatchConversionEventsSchema,
      response: {
        202: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                jobIds: {
                  type: 'array',
                  items: {
                    type: 'string'
                  }
                },
                processed: {
                  type: 'number'
                },
                message: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_4dvdc1maj().f[3]++;
    cov_4dvdc1maj().s[28]++;
    try {
      const body =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[29]++, request.body);
      const workerManager =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[30]++, getWorkerManager());
      const queue =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[31]++, workerManager.getConversionEventsQueue());
      // Get all unique campaign IDs
      const campaignIds =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[32]++, [...new Set(body.events.map(event => {
        /* istanbul ignore next */
        cov_4dvdc1maj().f[4]++;
        cov_4dvdc1maj().s[33]++;
        return event.campaignId;
      }))]);
      // Validate all campaigns belong to organization
      const campaigns =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[34]++, await request.server.db.campaign.findMany({
        where: {
          id: {
            in: campaignIds
          },
          organizationId: request.organization.id
        },
        select: {
          id: true
        }
      }));
      const validCampaignIds =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[35]++, new Set(campaigns.map(c => {
        /* istanbul ignore next */
        cov_4dvdc1maj().f[5]++;
        cov_4dvdc1maj().s[36]++;
        return c.id;
      })));
      const validEvents =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[37]++, body.events.filter(event => {
        /* istanbul ignore next */
        cov_4dvdc1maj().f[6]++;
        cov_4dvdc1maj().s[38]++;
        return validCampaignIds.has(event.campaignId);
      }));
      /* istanbul ignore next */
      cov_4dvdc1maj().s[39]++;
      if (validEvents.length === 0) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[3][0]++;
        cov_4dvdc1maj().s[40]++;
        throw new ApiError('No valid campaigns found', 'NO_VALID_CAMPAIGNS', 400);
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[3][1]++;
      }
      // Queue all valid events
      const jobs =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[41]++, await Promise.all(validEvents.map(async event => {
        /* istanbul ignore next */
        cov_4dvdc1maj().f[7]++;
        const eventData =
        /* istanbul ignore next */
        (cov_4dvdc1maj().s[42]++, {
          ...event,
          timestamp: event.timestamp ?
          /* istanbul ignore next */
          (cov_4dvdc1maj().b[4][0]++, new Date(event.timestamp)) :
          /* istanbul ignore next */
          (cov_4dvdc1maj().b[4][1]++, new Date())
        });
        /* istanbul ignore next */
        cov_4dvdc1maj().s[43]++;
        return queue.addConversionEvent(eventData);
      })));
      const jobIds =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[44]++, jobs.map(job => {
        /* istanbul ignore next */
        cov_4dvdc1maj().f[8]++;
        cov_4dvdc1maj().s[45]++;
        return job.id;
      }));
      /* istanbul ignore next */
      cov_4dvdc1maj().s[46]++;
      logger.info('Batch conversion events queued', {
        jobIds,
        processed: validEvents.length,
        total: body.events.length,
        organizationId: request.organization.id
      });
      /* istanbul ignore next */
      cov_4dvdc1maj().s[47]++;
      return reply.status(202).send({
        success: true,
        data: {
          jobIds,
          processed: validEvents.length,
          message: `${validEvents.length} conversion events queued for processing`
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_4dvdc1maj().s[48]++;
      if (error instanceof ApiError) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[5][0]++;
        cov_4dvdc1maj().s[49]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[5][1]++;
      }
      cov_4dvdc1maj().s[50]++;
      logger.error('Error processing batch conversion events:', error);
      /* istanbul ignore next */
      cov_4dvdc1maj().s[51]++;
      throw new ApiError('Failed to process batch conversion events', 'BATCH_CONVERSION_ERROR', 500);
    }
  });
  // Get conversion event job status
  /* istanbul ignore next */
  cov_4dvdc1maj().s[52]++;
  fastify.get('/conversion-events/jobs/:jobId', {
    schema: {
      tags: ['Workers'],
      summary: 'Get conversion event job status',
      params: {
        type: 'object',
        properties: {
          jobId: {
            type: 'string'
          }
        },
        required: ['jobId']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                id: {
                  type: 'string'
                },
                status: {
                  type: 'string'
                },
                progress: {
                  type: 'number'
                },
                data: {
                  type: 'object'
                },
                result: {
                  type: 'object'
                },
                error: {
                  type: 'string'
                },
                createdAt: {
                  type: 'string'
                },
                processedAt: {
                  type: 'string'
                },
                finishedAt: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_4dvdc1maj().f[9]++;
    cov_4dvdc1maj().s[53]++;
    try {
      const {
        jobId
      } =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[54]++, request.params);
      const workerManager =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[55]++, getWorkerManager());
      const queue =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[56]++, await workerManager.getConversionEventsQueue().getQueue());
      const job =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[57]++, await queue.getJob(jobId));
      /* istanbul ignore next */
      cov_4dvdc1maj().s[58]++;
      if (!job) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[6][0]++;
        cov_4dvdc1maj().s[59]++;
        throw new ApiError('Job not found', 'JOB_NOT_FOUND', 404);
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[6][1]++;
      }
      const jobData =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[60]++, {
        id: job.id,
        status: await job.getState(),
        progress: job.progress,
        data: job.data,
        result: job.returnvalue,
        error: job.failedReason,
        createdAt: new Date(job.timestamp).toISOString(),
        processedAt: job.processedOn ?
        /* istanbul ignore next */
        (cov_4dvdc1maj().b[7][0]++, new Date(job.processedOn).toISOString()) :
        /* istanbul ignore next */
        (cov_4dvdc1maj().b[7][1]++, null),
        finishedAt: job.finishedOn ?
        /* istanbul ignore next */
        (cov_4dvdc1maj().b[8][0]++, new Date(job.finishedOn).toISOString()) :
        /* istanbul ignore next */
        (cov_4dvdc1maj().b[8][1]++, null)
      });
      /* istanbul ignore next */
      cov_4dvdc1maj().s[61]++;
      return reply.status(200).send({
        success: true,
        data: jobData
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_4dvdc1maj().s[62]++;
      if (error instanceof ApiError) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[9][0]++;
        cov_4dvdc1maj().s[63]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[9][1]++;
      }
      cov_4dvdc1maj().s[64]++;
      logger.error('Error getting job status:', error);
      /* istanbul ignore next */
      cov_4dvdc1maj().s[65]++;
      throw new ApiError('Failed to get job status', 'JOB_STATUS_ERROR', 500);
    }
  });
  // Webhook endpoint for external conversion events (no auth required)
  /* istanbul ignore next */
  cov_4dvdc1maj().s[66]++;
  fastify.post('/webhooks/conversion-events', {
    preHandler: [],
    // No auth middleware for webhooks
    schema: {
      tags: ['Webhooks'],
      summary: 'Webhook for external conversion events',
      headers: {
        type: 'object',
        properties: {
          'x-api-key': {
            type: 'string'
          }
        },
        required: ['x-api-key']
      },
      body: ConversionEventSchema,
      response: {
        202: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            message: {
              type: 'string'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_4dvdc1maj().f[10]++;
    cov_4dvdc1maj().s[67]++;
    try {
      const apiKey =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[68]++, request.headers['x-api-key']);
      /* istanbul ignore next */
      cov_4dvdc1maj().s[69]++;
      if (!apiKey) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[10][0]++;
        cov_4dvdc1maj().s[70]++;
        throw new ApiError('API key required', 'MISSING_API_KEY', 401);
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[10][1]++;
      }
      // Find organization by API key
      const organization =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[71]++, await request.server.db.organization.findFirst({
        where: {
          apiKey,
          isActive: true
        }
      }));
      /* istanbul ignore next */
      cov_4dvdc1maj().s[72]++;
      if (!organization) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[11][0]++;
        cov_4dvdc1maj().s[73]++;
        throw new ApiError('Invalid API key', 'INVALID_API_KEY', 401);
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[11][1]++;
      }
      const body =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[74]++, request.body);
      // Validate campaign belongs to organization
      const campaign =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[75]++, await request.server.db.campaign.findFirst({
        where: {
          id: body.campaignId,
          organizationId: organization.id
        }
      }));
      /* istanbul ignore next */
      cov_4dvdc1maj().s[76]++;
      if (!campaign) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[12][0]++;
        cov_4dvdc1maj().s[77]++;
        throw new ApiError('Campaign not found', 'CAMPAIGN_NOT_FOUND', 404);
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[12][1]++;
      }
      const workerManager =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[78]++, getWorkerManager());
      const queue =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[79]++, workerManager.getConversionEventsQueue());
      const eventData =
      /* istanbul ignore next */
      (cov_4dvdc1maj().s[80]++, {
        ...body,
        timestamp: body.timestamp ?
        /* istanbul ignore next */
        (cov_4dvdc1maj().b[13][0]++, new Date(body.timestamp)) :
        /* istanbul ignore next */
        (cov_4dvdc1maj().b[13][1]++, new Date())
      });
      /* istanbul ignore next */
      cov_4dvdc1maj().s[81]++;
      await queue.addConversionEvent(eventData);
      /* istanbul ignore next */
      cov_4dvdc1maj().s[82]++;
      logger.info('Webhook conversion event queued', {
        campaignId: body.campaignId,
        eventType: body.eventType,
        organizationId: organization.id,
        source: 'webhook'
      });
      /* istanbul ignore next */
      cov_4dvdc1maj().s[83]++;
      return reply.status(202).send({
        success: true,
        message: 'Conversion event received and queued for processing'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_4dvdc1maj().s[84]++;
      if (error instanceof ApiError) {
        /* istanbul ignore next */
        cov_4dvdc1maj().b[14][0]++;
        cov_4dvdc1maj().s[85]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_4dvdc1maj().b[14][1]++;
      }
      cov_4dvdc1maj().s[86]++;
      logger.error('Error processing webhook conversion event:', error);
      /* istanbul ignore next */
      cov_4dvdc1maj().s[87]++;
      throw new ApiError('Failed to process webhook conversion event', 'WEBHOOK_ERROR', 500);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,