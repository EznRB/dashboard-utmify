{"version":3,"names":["cov_4dvdc1maj","actualCoverage","z","getWorkerManager","authMiddleware","organizationMiddleware","ApiError","logger","ConversionEventSchema","s","object","campaignId","string","uuid","eventType","enum","value","number","min","optional","currency","length","default","userId","sessionId","utmSource","utmMedium","utmCampaign","utmContent","utmTerm","metadata","record","any","timestamp","datetime","BatchConversionEventsSchema","events","array","max","workersRoutes","fastify","f","addHook","get","schema","tags","summary","response","type","properties","success","data","status","workers","conversionEvents","queueSize","processing","completed","failed","request","reply","workerManager","health","getWorkerHealth","send","error","post","body","jobId","message","queue","getConversionEventsQueue","campaign","server","db","findFirst","where","id","organizationId","organization","b","eventData","Date","job","addConversionEvent","info","jobIds","items","processed","campaignIds","Set","map","event","campaigns","findMany","in","select","validCampaignIds","c","validEvents","filter","has","jobs","Promise","all","total","params","required","progress","result","createdAt","processedAt","finishedAt","getQueue","getJob","jobData","getState","returnvalue","failedReason","toISOString","processedOn","finishedOn","preHandler","headers","apiKey","isActive","source"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\workers.routes.ts"],"sourcesContent":["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { z } from 'zod';\nimport { getWorkerManager, ConversionEventData } from '../workers';\nimport { authMiddleware, organizationMiddleware } from '../middleware/auth.middleware';\nimport { ApiError } from '../utils/errors';\nimport { logger } from '../utils/logger';\n\n// Validation schemas\nconst ConversionEventSchema = z.object({\n  campaignId: z.string().uuid('Invalid campaign ID'),\n  eventType: z.enum(['purchase', 'lead', 'signup', 'add_to_cart', 'view_content']),\n  value: z.number().min(0).optional(),\n  currency: z.string().length(3).optional().default('BRL'),\n  userId: z.string().optional(),\n  sessionId: z.string().optional(),\n  utmSource: z.string().optional(),\n  utmMedium: z.string().optional(),\n  utmCampaign: z.string().optional(),\n  utmContent: z.string().optional(),\n  utmTerm: z.string().optional(),\n  metadata: z.record(z.any()).optional(),\n  timestamp: z.string().datetime().optional(),\n});\n\nconst BatchConversionEventsSchema = z.object({\n  events: z.array(ConversionEventSchema).min(1).max(100),\n});\n\nexport async function workersRoutes(fastify: FastifyInstance) {\n  // Add middleware\n  fastify.addHook('preHandler', authMiddleware);\n  fastify.addHook('preHandler', organizationMiddleware);\n\n  // Health check for workers\n  fastify.get(\n    '/health',\n    {\n      schema: {\n        tags: ['Workers'],\n        summary: 'Get worker health status',\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  status: { type: 'string', enum: ['healthy', 'unhealthy'] },\n                  workers: {\n                    type: 'object',\n                    properties: {\n                      conversionEvents: {\n                        type: 'object',\n                        properties: {\n                          status: { type: 'string', enum: ['running', 'stopped'] },\n                          queueSize: { type: 'number' },\n                          processing: { type: 'number' },\n                          completed: { type: 'number' },\n                          failed: { type: 'number' },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const workerManager = getWorkerManager();\n        const health = await workerManager.getWorkerHealth();\n\n        return reply.status(200).send({\n          success: true,\n          data: health,\n        });\n      } catch (error) {\n        logger.error('Error getting worker health:', error);\n        throw new ApiError('Failed to get worker health', 'WORKER_HEALTH_ERROR', 500);\n      }\n    }\n  );\n\n  // Process single conversion event\n  fastify.post(\n    '/conversion-events',\n    {\n      schema: {\n        tags: ['Workers'],\n        summary: 'Process a conversion event',\n        body: ConversionEventSchema,\n        response: {\n          202: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  jobId: { type: 'string' },\n                  message: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const body = request.body as z.infer<typeof ConversionEventSchema>;\n        const workerManager = getWorkerManager();\n        const queue = workerManager.getConversionEventsQueue();\n\n        // Validate campaign belongs to organization\n        const campaign = await request.server.db.campaign.findFirst({\n          where: {\n            id: body.campaignId,\n            organizationId: request.organization!.id,\n          },\n        });\n\n        if (!campaign) {\n          throw new ApiError('Campaign not found', 'CAMPAIGN_NOT_FOUND', 404);\n        }\n\n        const eventData: ConversionEventData = {\n          ...body,\n          timestamp: body.timestamp ? new Date(body.timestamp) : new Date(),\n        };\n\n        const job = await queue.addConversionEvent(eventData);\n\n        logger.info('Conversion event queued', {\n          jobId: job.id,\n          campaignId: body.campaignId,\n          eventType: body.eventType,\n          organizationId: request.organization!.id,\n        });\n\n        return reply.status(202).send({\n          success: true,\n          data: {\n            jobId: job.id,\n            message: 'Conversion event queued for processing',\n          },\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error processing conversion event:', error);\n        throw new ApiError('Failed to process conversion event', 'CONVERSION_EVENT_ERROR', 500);\n      }\n    }\n  );\n\n  // Process batch conversion events\n  fastify.post(\n    '/conversion-events/batch',\n    {\n      schema: {\n        tags: ['Workers'],\n        summary: 'Process multiple conversion events',\n        body: BatchConversionEventsSchema,\n        response: {\n          202: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  jobIds: {\n                    type: 'array',\n                    items: { type: 'string' },\n                  },\n                  processed: { type: 'number' },\n                  message: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const body = request.body as z.infer<typeof BatchConversionEventsSchema>;\n        const workerManager = getWorkerManager();\n        const queue = workerManager.getConversionEventsQueue();\n\n        // Get all unique campaign IDs\n        const campaignIds = [...new Set(body.events.map(event => event.campaignId))];\n\n        // Validate all campaigns belong to organization\n        const campaigns = await request.server.db.campaign.findMany({\n          where: {\n            id: { in: campaignIds },\n            organizationId: request.organization!.id,\n          },\n          select: { id: true },\n        });\n\n        const validCampaignIds = new Set(campaigns.map(c => c.id));\n        const validEvents = body.events.filter(event => \n          validCampaignIds.has(event.campaignId)\n        );\n\n        if (validEvents.length === 0) {\n          throw new ApiError('No valid campaigns found', 'NO_VALID_CAMPAIGNS', 400);\n        }\n\n        // Queue all valid events\n        const jobs = await Promise.all(\n          validEvents.map(async (event) => {\n            const eventData: ConversionEventData = {\n              ...event,\n              timestamp: event.timestamp ? new Date(event.timestamp) : new Date(),\n            };\n            return queue.addConversionEvent(eventData);\n          })\n        );\n\n        const jobIds = jobs.map(job => job.id!);\n\n        logger.info('Batch conversion events queued', {\n          jobIds,\n          processed: validEvents.length,\n          total: body.events.length,\n          organizationId: request.organization!.id,\n        });\n\n        return reply.status(202).send({\n          success: true,\n          data: {\n            jobIds,\n            processed: validEvents.length,\n            message: `${validEvents.length} conversion events queued for processing`,\n          },\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error processing batch conversion events:', error);\n        throw new ApiError('Failed to process batch conversion events', 'BATCH_CONVERSION_ERROR', 500);\n      }\n    }\n  );\n\n  // Get conversion event job status\n  fastify.get(\n    '/conversion-events/jobs/:jobId',\n    {\n      schema: {\n        tags: ['Workers'],\n        summary: 'Get conversion event job status',\n        params: {\n          type: 'object',\n          properties: {\n            jobId: { type: 'string' },\n          },\n          required: ['jobId'],\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  id: { type: 'string' },\n                  status: { type: 'string' },\n                  progress: { type: 'number' },\n                  data: { type: 'object' },\n                  result: { type: 'object' },\n                  error: { type: 'string' },\n                  createdAt: { type: 'string' },\n                  processedAt: { type: 'string' },\n                  finishedAt: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const { jobId } = request.params as { jobId: string };\n        const workerManager = getWorkerManager();\n        const queue = await workerManager.getConversionEventsQueue().getQueue();\n\n        const job = await queue.getJob(jobId);\n        if (!job) {\n          throw new ApiError('Job not found', 'JOB_NOT_FOUND', 404);\n        }\n\n        const jobData = {\n          id: job.id,\n          status: await job.getState(),\n          progress: job.progress,\n          data: job.data,\n          result: job.returnvalue,\n          error: job.failedReason,\n          createdAt: new Date(job.timestamp).toISOString(),\n          processedAt: job.processedOn ? new Date(job.processedOn).toISOString() : null,\n          finishedAt: job.finishedOn ? new Date(job.finishedOn).toISOString() : null,\n        };\n\n        return reply.status(200).send({\n          success: true,\n          data: jobData,\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error getting job status:', error);\n        throw new ApiError('Failed to get job status', 'JOB_STATUS_ERROR', 500);\n      }\n    }\n  );\n\n  // Webhook endpoint for external conversion events (no auth required)\n  fastify.post(\n    '/webhooks/conversion-events',\n    {\n      preHandler: [], // No auth middleware for webhooks\n      schema: {\n        tags: ['Webhooks'],\n        summary: 'Webhook for external conversion events',\n        headers: {\n          type: 'object',\n          properties: {\n            'x-api-key': { type: 'string' },\n          },\n          required: ['x-api-key'],\n        },\n        body: ConversionEventSchema,\n        response: {\n          202: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const apiKey = request.headers['x-api-key'] as string;\n        if (!apiKey) {\n          throw new ApiError('API key required', 'MISSING_API_KEY', 401);\n        }\n\n        // Find organization by API key\n        const organization = await request.server.db.organization.findFirst({\n          where: {\n            apiKey,\n            isActive: true,\n          },\n        });\n\n        if (!organization) {\n          throw new ApiError('Invalid API key', 'INVALID_API_KEY', 401);\n        }\n\n        const body = request.body as z.infer<typeof ConversionEventSchema>;\n        \n        // Validate campaign belongs to organization\n        const campaign = await request.server.db.campaign.findFirst({\n          where: {\n            id: body.campaignId,\n            organizationId: organization.id,\n          },\n        });\n\n        if (!campaign) {\n          throw new ApiError('Campaign not found', 'CAMPAIGN_NOT_FOUND', 404);\n        }\n\n        const workerManager = getWorkerManager();\n        const queue = workerManager.getConversionEventsQueue();\n\n        const eventData: ConversionEventData = {\n          ...body,\n          timestamp: body.timestamp ? new Date(body.timestamp) : new Date(),\n        };\n\n        await queue.addConversionEvent(eventData);\n\n        logger.info('Webhook conversion event queued', {\n          campaignId: body.campaignId,\n          eventType: body.eventType,\n          organizationId: organization.id,\n          source: 'webhook',\n        });\n\n        return reply.status(202).send({\n          success: true,\n          message: 'Conversion event received and queued for processing',\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error processing webhook conversion event:', error);\n        throw new ApiError('Failed to process webhook conversion event', 'WEBHOOK_ERROR', 500);\n      }\n    }\n  );\n}"],"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","ignoreList":[]}