{"version":3,"names":["cov_2jwjb6ov4f","actualCoverage","CronJob","Logger","GoogleAdsService","CryptoService","GoogleAdsSyncJob","logger","prisma","googleAdsService","job","s","isRunning","constructor","options","f","b","name","cryptoService","start","warn","executeSync","log","stop","executeManualSync","startTime","Date","now","integrations","integration","findMany","where","platform","isActive","OR","lastSync","lt","include","user","select","id","email","length","batchSize","batches","i","push","slice","totalSynced","totalErrors","batch","batchPromises","map","isExpired","expiresAt","refreshToken","decrypt","newTokens","refreshAccessToken","storeTokens","userId","refreshError","error","update","data","lastError","syncUserData","Error","message","catch","updateError","Promise","allSettled","indexOf","resolve","setTimeout","duration","avgTimePerSync","toFixed","getStatus","isScheduled","running","nextRun","nextDate","toDate","getSyncStats","total","active","recentlysynced","withErrors","all","count","gte","not","syncTimes","orderBy","take","avgSyncInterval","intervals","current","getTime","previous","reduce","sum","interval","totalIntegrations","activeIntegrations","lastSyncedIntegrations","errorIntegrations","createGoogleAdsSyncJob"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\google-ads-sync.job.ts"],"sourcesContent":["import { CronJob } from 'cron';\nimport { Logger } from '@nestjs/common';\nimport { PrismaService } from '../database/prisma.service';\nimport { GoogleAdsService } from '../services/google-ads.service';\nimport { CryptoService } from '../services/crypto.service';\n\ninterface GoogleAdsSyncJobOptions {\n  prisma: PrismaService;\n  logger?: Logger;\n}\n\nexport class GoogleAdsSyncJob {\n  private readonly logger: Logger;\n  private readonly prisma: PrismaService;\n  private readonly googleAdsService: GoogleAdsService;\n  private job: CronJob | null = null;\n  private isRunning = false;\n\n  constructor(options: GoogleAdsSyncJobOptions) {\n    this.logger = options.logger || new Logger(GoogleAdsSyncJob.name);\n    this.prisma = options.prisma;\n    \n    const cryptoService = new CryptoService();\n    this.googleAdsService = new GoogleAdsService(this.prisma, cryptoService);\n  }\n\n  /**\n   * Start the Google Ads sync job\n   * Runs every 30 minutes\n   */\n  start(): void {\n    if (this.job) {\n      this.logger.warn('Google Ads sync job is already running');\n      return;\n    }\n\n    // Run every 30 minutes: '0 */30 * * * *'\n    this.job = new CronJob(\n      '0 */30 * * * *',\n      () => this.executeSync(),\n      null,\n      true,\n      'UTC'\n    );\n\n    this.logger.log('Google Ads sync job started - runs every 30 minutes');\n  }\n\n  /**\n   * Stop the Google Ads sync job\n   */\n  stop(): void {\n    if (this.job) {\n      this.job.stop();\n      this.job = null;\n      this.logger.log('Google Ads sync job stopped');\n    }\n  }\n\n  /**\n   * Execute manual sync for all active integrations\n   */\n  async executeManualSync(): Promise<void> {\n    if (this.isRunning) {\n      this.logger.warn('Google Ads sync is already running, skipping manual execution');\n      return;\n    }\n\n    await this.executeSync();\n  }\n\n  /**\n   * Execute the sync process\n   */\n  private async executeSync(): Promise<void> {\n    if (this.isRunning) {\n      this.logger.warn('Google Ads sync is already running, skipping this execution');\n      return;\n    }\n\n    this.isRunning = true;\n    const startTime = Date.now();\n    \n    try {\n      this.logger.log('Starting Google Ads sync job execution');\n\n      // Get all active Google Ads integrations\n      const integrations = await this.prisma.integration.findMany({\n        where: {\n          platform: 'GOOGLE_ADS',\n          isActive: true,\n          // Only sync integrations that haven't been synced in the last 25 minutes\n          // This prevents overlapping syncs\n          OR: [\n            { lastSync: null },\n            {\n              lastSync: {\n                lt: new Date(Date.now() - 25 * 60 * 1000), // 25 minutes ago\n              },\n            },\n          ],\n        },\n        include: {\n          user: {\n            select: {\n              id: true,\n              email: true,\n            },\n          },\n        },\n      });\n\n      if (integrations.length === 0) {\n        this.logger.log('No Google Ads integrations found for sync');\n        return;\n      }\n\n      this.logger.log(`Found ${integrations.length} Google Ads integrations to sync`);\n\n      // Process integrations in batches to avoid overwhelming the API\n      const batchSize = 5;\n      const batches = [];\n      \n      for (let i = 0; i < integrations.length; i += batchSize) {\n        batches.push(integrations.slice(i, i + batchSize));\n      }\n\n      let totalSynced = 0;\n      let totalErrors = 0;\n\n      for (const batch of batches) {\n        const batchPromises = batch.map(async (integration) => {\n          try {\n            this.logger.log(`Syncing Google Ads data for user ${integration.user.email}`);\n            \n            // Check if tokens are still valid\n            const isExpired = integration.expiresAt && integration.expiresAt <= new Date();\n            \n            if (isExpired && integration.refreshToken) {\n              this.logger.log(`Refreshing expired token for user ${integration.user.email}`);\n              \n              try {\n                const cryptoService = new CryptoService();\n                const refreshToken = cryptoService.decrypt(integration.refreshToken);\n                const newTokens = await this.googleAdsService.refreshAccessToken(refreshToken);\n                await this.googleAdsService.storeTokens(integration.userId, newTokens);\n                \n                this.logger.log(`Token refreshed successfully for user ${integration.user.email}`);\n              } catch (refreshError) {\n                this.logger.error(`Failed to refresh token for user ${integration.user.email}:`, refreshError);\n                \n                // Mark integration as inactive if refresh fails\n                await this.prisma.integration.update({\n                  where: { id: integration.id },\n                  data: { \n                    isActive: false,\n                    lastError: 'Token refresh failed',\n                    lastSync: new Date(),\n                  },\n                });\n                \n                throw refreshError;\n              }\n            }\n\n            // Perform the sync with change detection\n            await this.googleAdsService.syncUserData(integration.userId, false);\n            \n            // Update last sync timestamp\n            await this.prisma.integration.update({\n              where: { id: integration.id },\n              data: { \n                lastSync: new Date(),\n                lastError: null,\n              },\n            });\n            \n            totalSynced++;\n            this.logger.log(`Successfully synced Google Ads data for user ${integration.user.email}`);\n            \n          } catch (error) {\n            totalErrors++;\n            this.logger.error(`Failed to sync Google Ads data for user ${integration.user.email}:`, error);\n            \n            // Update integration with error info\n            await this.prisma.integration.update({\n              where: { id: integration.id },\n              data: { \n                lastSync: new Date(),\n                lastError: error instanceof Error ? error.message : 'Unknown error',\n              },\n            }).catch(updateError => {\n              this.logger.error('Failed to update integration error status:', updateError);\n            });\n          }\n        });\n\n        // Wait for current batch to complete before processing next batch\n        await Promise.allSettled(batchPromises);\n        \n        // Add a small delay between batches to be respectful to the API\n        if (batches.indexOf(batch) < batches.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay\n        }\n      }\n\n      const duration = Date.now() - startTime;\n      this.logger.log(\n        `Google Ads sync job completed in ${duration}ms. ` +\n        `Synced: ${totalSynced}, Errors: ${totalErrors}, Total: ${integrations.length}`\n      );\n\n      // Log performance metrics\n      if (totalSynced > 0) {\n        const avgTimePerSync = duration / totalSynced;\n        this.logger.log(`Average sync time per integration: ${avgTimePerSync.toFixed(2)}ms`);\n      }\n\n    } catch (error) {\n      this.logger.error('Google Ads sync job failed:', error);\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Get job status\n   */\n  getStatus(): {\n    isRunning: boolean;\n    isScheduled: boolean;\n    nextRun: Date | null;\n  } {\n    return {\n      isRunning: this.isRunning,\n      isScheduled: this.job !== null && this.job.running,\n      nextRun: this.job?.nextDate()?.toDate() || null,\n    };\n  }\n\n  /**\n   * Get sync statistics\n   */\n  async getSyncStats(): Promise<{\n    totalIntegrations: number;\n    activeIntegrations: number;\n    lastSyncedIntegrations: number;\n    errorIntegrations: number;\n    avgSyncInterval: number | null;\n  }> {\n    try {\n      const [total, active, recentlysynced, withErrors] = await Promise.all([\n        // Total Google Ads integrations\n        this.prisma.integration.count({\n          where: { platform: 'GOOGLE_ADS' },\n        }),\n        \n        // Active integrations\n        this.prisma.integration.count({\n          where: { \n            platform: 'GOOGLE_ADS',\n            isActive: true,\n          },\n        }),\n        \n        // Recently synced (last 24 hours)\n        this.prisma.integration.count({\n          where: {\n            platform: 'GOOGLE_ADS',\n            lastSync: {\n              gte: new Date(Date.now() - 24 * 60 * 60 * 1000),\n            },\n          },\n        }),\n        \n        // Integrations with errors\n        this.prisma.integration.count({\n          where: {\n            platform: 'GOOGLE_ADS',\n            lastError: { not: null },\n          },\n        }),\n      ]);\n\n      // Calculate average sync interval\n      const syncTimes = await this.prisma.integration.findMany({\n        where: {\n          platform: 'GOOGLE_ADS',\n          lastSync: { not: null },\n        },\n        select: { lastSync: true },\n        orderBy: { lastSync: 'desc' },\n        take: 10, // Last 10 syncs\n      });\n\n      let avgSyncInterval: number | null = null;\n      if (syncTimes.length > 1) {\n        const intervals = [];\n        for (let i = 0; i < syncTimes.length - 1; i++) {\n          const current = syncTimes[i].lastSync!.getTime();\n          const previous = syncTimes[i + 1].lastSync!.getTime();\n          intervals.push(current - previous);\n        }\n        avgSyncInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n      }\n\n      return {\n        totalIntegrations: total,\n        activeIntegrations: active,\n        lastSyncedIntegrations: recentlysynced,\n        errorIntegrations: withErrors,\n        avgSyncInterval,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get sync stats:', error);\n      return {\n        totalIntegrations: 0,\n        activeIntegrations: 0,\n        lastSyncedIntegrations: 0,\n        errorIntegrations: 0,\n        avgSyncInterval: null,\n      };\n    }\n  }\n}\n\n// Export factory function for easy instantiation\nexport function createGoogleAdsSyncJob(prisma: PrismaService, logger?: Logger): GoogleAdsSyncJob {\n  return new GoogleAdsSyncJob({ prisma, logger });\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwBG;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAxBH,SAASE,OAAO,QAAQ,MAAM;AAC9B,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAASC,aAAa,QAAQ,4BAA4B;AAO1D,OAAM,MAAOC,gBAAgB;EACVC,MAAM;EACNC,MAAM;EACNC,gBAAgB;EACzBC,GAAG;EAAA;EAAA,CAAAV,cAAA,GAAAW,CAAA,OAAmB,IAAI;EAC1BC,SAAS;EAAA;EAAA,CAAAZ,cAAA,GAAAW,CAAA,OAAG,KAAK;EAEzBE,YAAYC,OAAgC;IAAA;IAAAd,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAW,CAAA;IAC1C,IAAI,CAACJ,MAAM;IAAG;IAAA,CAAAP,cAAA,GAAAgB,CAAA,UAAAF,OAAO,CAACP,MAAM;IAAA;IAAA,CAAAP,cAAA,GAAAgB,CAAA,UAAI,IAAIb,MAAM,CAACG,gBAAgB,CAACW,IAAI,CAAC;IAAC;IAAAjB,cAAA,GAAAW,CAAA;IAClE,IAAI,CAACH,MAAM,GAAGM,OAAO,CAACN,MAAM;IAE5B,MAAMU,aAAa;IAAA;IAAA,CAAAlB,cAAA,GAAAW,CAAA,OAAG,IAAIN,aAAa,EAAE;IAAC;IAAAL,cAAA,GAAAW,CAAA;IAC1C,IAAI,CAACF,gBAAgB,GAAG,IAAIL,gBAAgB,CAAC,IAAI,CAACI,MAAM,EAAEU,aAAa,CAAC;EAC1E;EAEA;;;;EAIAC,KAAKA,CAAA;IAAA;IAAAnB,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAW,CAAA;IACH,IAAI,IAAI,CAACD,GAAG,EAAE;MAAA;MAAAV,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAW,CAAA;MACZ,IAAI,CAACJ,MAAM,CAACa,IAAI,CAAC,wCAAwC,CAAC;MAAC;MAAApB,cAAA,GAAAW,CAAA;MAC3D;IACF,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAgB,CAAA;IAAA;IAED;IAAAhB,cAAA,GAAAW,CAAA;IACA,IAAI,CAACD,GAAG,GAAG,IAAIR,OAAO,CACpB,gBAAgB,EAChB,MAAM;MAAA;MAAAF,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAW,CAAA;MAAA,WAAI,CAACU,WAAW,EAAE;IAAF,CAAE,EACxB,IAAI,EACJ,IAAI,EACJ,KAAK,CACN;IAAC;IAAArB,cAAA,GAAAW,CAAA;IAEF,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,qDAAqD,CAAC;EACxE;EAEA;;;EAGAC,IAAIA,CAAA;IAAA;IAAAvB,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAW,CAAA;IACF,IAAI,IAAI,CAACD,GAAG,EAAE;MAAA;MAAAV,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAW,CAAA;MACZ,IAAI,CAACD,GAAG,CAACa,IAAI,EAAE;MAAC;MAAAvB,cAAA,GAAAW,CAAA;MAChB,IAAI,CAACD,GAAG,GAAG,IAAI;MAAC;MAAAV,cAAA,GAAAW,CAAA;MAChB,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,6BAA6B,CAAC;IAChD,CAAC;IAAA;IAAA;MAAAtB,cAAA,GAAAgB,CAAA;IAAA;EACH;EAEA;;;EAGA,MAAMQ,iBAAiBA,CAAA;IAAA;IAAAxB,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAW,CAAA;IACrB,IAAI,IAAI,CAACC,SAAS,EAAE;MAAA;MAAAZ,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAW,CAAA;MAClB,IAAI,CAACJ,MAAM,CAACa,IAAI,CAAC,+DAA+D,CAAC;MAAC;MAAApB,cAAA,GAAAW,CAAA;MAClF;IACF,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAW,CAAA;IAED,MAAM,IAAI,CAACU,WAAW,EAAE;EAC1B;EAEA;;;EAGQ,MAAMA,WAAWA,CAAA;IAAA;IAAArB,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAW,CAAA;IACvB,IAAI,IAAI,CAACC,SAAS,EAAE;MAAA;MAAAZ,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAW,CAAA;MAClB,IAAI,CAACJ,MAAM,CAACa,IAAI,CAAC,6DAA6D,CAAC;MAAC;MAAApB,cAAA,GAAAW,CAAA;MAChF;IACF,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAW,CAAA;IAED,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,MAAMa,SAAS;IAAA;IAAA,CAAAzB,cAAA,GAAAW,CAAA,QAAGe,IAAI,CAACC,GAAG,EAAE;IAAC;IAAA3B,cAAA,GAAAW,CAAA;IAE7B,IAAI;MAAA;MAAAX,cAAA,GAAAW,CAAA;MACF,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,wCAAwC,CAAC;MAEzD;MACA,MAAMM,YAAY;MAAA;MAAA,CAAA5B,cAAA,GAAAW,CAAA,QAAG,MAAM,IAAI,CAACH,MAAM,CAACqB,WAAW,CAACC,QAAQ,CAAC;QAC1DC,KAAK,EAAE;UACLC,QAAQ,EAAE,YAAY;UACtBC,QAAQ,EAAE,IAAI;UACd;UACA;UACAC,EAAE,EAAE,CACF;YAAEC,QAAQ,EAAE;UAAI,CAAE,EAClB;YACEA,QAAQ,EAAE;cACRC,EAAE,EAAE,IAAIV,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAE;;WAE9C;SAEJ;QACDU,OAAO,EAAE;UACPC,IAAI,EAAE;YACJC,MAAM,EAAE;cACNC,EAAE,EAAE,IAAI;cACRC,KAAK,EAAE;;;;OAId,CAAC;MAAC;MAAAzC,cAAA,GAAAW,CAAA;MAEH,IAAIiB,YAAY,CAACc,MAAM,KAAK,CAAC,EAAE;QAAA;QAAA1C,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAW,CAAA;QAC7B,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,2CAA2C,CAAC;QAAC;QAAAtB,cAAA,GAAAW,CAAA;QAC7D;MACF,CAAC;MAAA;MAAA;QAAAX,cAAA,GAAAgB,CAAA;MAAA;MAAAhB,cAAA,GAAAW,CAAA;MAED,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,SAASM,YAAY,CAACc,MAAM,kCAAkC,CAAC;MAE/E;MACA,MAAMC,SAAS;MAAA;MAAA,CAAA3C,cAAA,GAAAW,CAAA,QAAG,CAAC;MACnB,MAAMiC,OAAO;MAAA;MAAA,CAAA5C,cAAA,GAAAW,CAAA,QAAG,EAAE;MAAC;MAAAX,cAAA,GAAAW,CAAA;MAEnB,KAAK,IAAIkC,CAAC;MAAA;MAAA,CAAA7C,cAAA,GAAAW,CAAA,QAAG,CAAC,GAAEkC,CAAC,GAAGjB,YAAY,CAACc,MAAM,EAAEG,CAAC,IAAIF,SAAS,EAAE;QAAA;QAAA3C,cAAA,GAAAW,CAAA;QACvDiC,OAAO,CAACE,IAAI,CAAClB,YAAY,CAACmB,KAAK,CAACF,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAAC,CAAC;MACpD;MAEA,IAAIK,WAAW;MAAA;MAAA,CAAAhD,cAAA,GAAAW,CAAA,QAAG,CAAC;MACnB,IAAIsC,WAAW;MAAA;MAAA,CAAAjD,cAAA,GAAAW,CAAA,QAAG,CAAC;MAAC;MAAAX,cAAA,GAAAW,CAAA;MAEpB,KAAK,MAAMuC,KAAK,IAAIN,OAAO,EAAE;QAC3B,MAAMO,aAAa;QAAA;QAAA,CAAAnD,cAAA,GAAAW,CAAA,QAAGuC,KAAK,CAACE,GAAG,CAAC,MAAOvB,WAAW,IAAI;UAAA;UAAA7B,cAAA,GAAAe,CAAA;UAAAf,cAAA,GAAAW,CAAA;UACpD,IAAI;YAAA;YAAAX,cAAA,GAAAW,CAAA;YACF,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,oCAAoCO,WAAW,CAACS,IAAI,CAACG,KAAK,EAAE,CAAC;YAE7E;YACA,MAAMY,SAAS;YAAA;YAAA,CAAArD,cAAA,GAAAW,CAAA;YAAG;YAAA,CAAAX,cAAA,GAAAgB,CAAA,UAAAa,WAAW,CAACyB,SAAS;YAAA;YAAA,CAAAtD,cAAA,GAAAgB,CAAA,UAAIa,WAAW,CAACyB,SAAS,IAAI,IAAI5B,IAAI,EAAE;YAAC;YAAA1B,cAAA,GAAAW,CAAA;YAE/E;YAAI;YAAA,CAAAX,cAAA,GAAAgB,CAAA,UAAAqC,SAAS;YAAA;YAAA,CAAArD,cAAA,GAAAgB,CAAA,UAAIa,WAAW,CAAC0B,YAAY,GAAE;cAAA;cAAAvD,cAAA,GAAAgB,CAAA;cAAAhB,cAAA,GAAAW,CAAA;cACzC,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,qCAAqCO,WAAW,CAACS,IAAI,CAACG,KAAK,EAAE,CAAC;cAAC;cAAAzC,cAAA,GAAAW,CAAA;cAE/E,IAAI;gBACF,MAAMO,aAAa;gBAAA;gBAAA,CAAAlB,cAAA,GAAAW,CAAA,QAAG,IAAIN,aAAa,EAAE;gBACzC,MAAMkD,YAAY;gBAAA;gBAAA,CAAAvD,cAAA,GAAAW,CAAA,QAAGO,aAAa,CAACsC,OAAO,CAAC3B,WAAW,CAAC0B,YAAY,CAAC;gBACpE,MAAME,SAAS;gBAAA;gBAAA,CAAAzD,cAAA,GAAAW,CAAA,QAAG,MAAM,IAAI,CAACF,gBAAgB,CAACiD,kBAAkB,CAACH,YAAY,CAAC;gBAAC;gBAAAvD,cAAA,GAAAW,CAAA;gBAC/E,MAAM,IAAI,CAACF,gBAAgB,CAACkD,WAAW,CAAC9B,WAAW,CAAC+B,MAAM,EAAEH,SAAS,CAAC;gBAAC;gBAAAzD,cAAA,GAAAW,CAAA;gBAEvE,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,yCAAyCO,WAAW,CAACS,IAAI,CAACG,KAAK,EAAE,CAAC;cACpF,CAAC,CAAC,OAAOoB,YAAY,EAAE;gBAAA;gBAAA7D,cAAA,GAAAW,CAAA;gBACrB,IAAI,CAACJ,MAAM,CAACuD,KAAK,CAAC,oCAAoCjC,WAAW,CAACS,IAAI,CAACG,KAAK,GAAG,EAAEoB,YAAY,CAAC;gBAE9F;gBAAA;gBAAA7D,cAAA,GAAAW,CAAA;gBACA,MAAM,IAAI,CAACH,MAAM,CAACqB,WAAW,CAACkC,MAAM,CAAC;kBACnChC,KAAK,EAAE;oBAAES,EAAE,EAAEX,WAAW,CAACW;kBAAE,CAAE;kBAC7BwB,IAAI,EAAE;oBACJ/B,QAAQ,EAAE,KAAK;oBACfgC,SAAS,EAAE,sBAAsB;oBACjC9B,QAAQ,EAAE,IAAIT,IAAI;;iBAErB,CAAC;gBAAC;gBAAA1B,cAAA,GAAAW,CAAA;gBAEH,MAAMkD,YAAY;cACpB;YACF,CAAC;YAAA;YAAA;cAAA7D,cAAA,GAAAgB,CAAA;YAAA;YAED;YAAAhB,cAAA,GAAAW,CAAA;YACA,MAAM,IAAI,CAACF,gBAAgB,CAACyD,YAAY,CAACrC,WAAW,CAAC+B,MAAM,EAAE,KAAK,CAAC;YAEnE;YAAA;YAAA5D,cAAA,GAAAW,CAAA;YACA,MAAM,IAAI,CAACH,MAAM,CAACqB,WAAW,CAACkC,MAAM,CAAC;cACnChC,KAAK,EAAE;gBAAES,EAAE,EAAEX,WAAW,CAACW;cAAE,CAAE;cAC7BwB,IAAI,EAAE;gBACJ7B,QAAQ,EAAE,IAAIT,IAAI,EAAE;gBACpBuC,SAAS,EAAE;;aAEd,CAAC;YAAC;YAAAjE,cAAA,GAAAW,CAAA;YAEHqC,WAAW,EAAE;YAAC;YAAAhD,cAAA,GAAAW,CAAA;YACd,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,gDAAgDO,WAAW,CAACS,IAAI,CAACG,KAAK,EAAE,CAAC;UAE3F,CAAC,CAAC,OAAOqB,KAAK,EAAE;YAAA;YAAA9D,cAAA,GAAAW,CAAA;YACdsC,WAAW,EAAE;YAAC;YAAAjD,cAAA,GAAAW,CAAA;YACd,IAAI,CAACJ,MAAM,CAACuD,KAAK,CAAC,2CAA2CjC,WAAW,CAACS,IAAI,CAACG,KAAK,GAAG,EAAEqB,KAAK,CAAC;YAE9F;YAAA;YAAA9D,cAAA,GAAAW,CAAA;YACA,MAAM,IAAI,CAACH,MAAM,CAACqB,WAAW,CAACkC,MAAM,CAAC;cACnChC,KAAK,EAAE;gBAAES,EAAE,EAAEX,WAAW,CAACW;cAAE,CAAE;cAC7BwB,IAAI,EAAE;gBACJ7B,QAAQ,EAAE,IAAIT,IAAI,EAAE;gBACpBuC,SAAS,EAAEH,KAAK,YAAYK,KAAK;gBAAA;gBAAA,CAAAnE,cAAA,GAAAgB,CAAA,UAAG8C,KAAK,CAACM,OAAO;gBAAA;gBAAA,CAAApE,cAAA,GAAAgB,CAAA,UAAG,eAAe;;aAEtE,CAAC,CAACqD,KAAK,CAACC,WAAW,IAAG;cAAA;cAAAtE,cAAA,GAAAe,CAAA;cAAAf,cAAA,GAAAW,CAAA;cACrB,IAAI,CAACJ,MAAM,CAACuD,KAAK,CAAC,4CAA4C,EAAEQ,WAAW,CAAC;YAC9E,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;QAEF;QAAA;QAAAtE,cAAA,GAAAW,CAAA;QACA,MAAM4D,OAAO,CAACC,UAAU,CAACrB,aAAa,CAAC;QAEvC;QAAA;QAAAnD,cAAA,GAAAW,CAAA;QACA,IAAIiC,OAAO,CAAC6B,OAAO,CAACvB,KAAK,CAAC,GAAGN,OAAO,CAACF,MAAM,GAAG,CAAC,EAAE;UAAA;UAAA1C,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAW,CAAA;UAC/C,MAAM,IAAI4D,OAAO,CAACG,OAAO,IAAI;YAAA;YAAA1E,cAAA,GAAAe,CAAA;YAAAf,cAAA,GAAAW,CAAA;YAAA,OAAAgE,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC;UAAD,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC;QAAA;QAAA;UAAA1E,cAAA,GAAAgB,CAAA;QAAA;MACH;MAEA,MAAM4D,QAAQ;MAAA;MAAA,CAAA5E,cAAA,GAAAW,CAAA,QAAGe,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS;MAAC;MAAAzB,cAAA,GAAAW,CAAA;MACxC,IAAI,CAACJ,MAAM,CAACe,GAAG,CACb,oCAAoCsD,QAAQ,MAAM,GAClD,WAAW5B,WAAW,aAAaC,WAAW,YAAYrB,YAAY,CAACc,MAAM,EAAE,CAChF;MAED;MAAA;MAAA1C,cAAA,GAAAW,CAAA;MACA,IAAIqC,WAAW,GAAG,CAAC,EAAE;QAAA;QAAAhD,cAAA,GAAAgB,CAAA;QACnB,MAAM6D,cAAc;QAAA;QAAA,CAAA7E,cAAA,GAAAW,CAAA,QAAGiE,QAAQ,GAAG5B,WAAW;QAAC;QAAAhD,cAAA,GAAAW,CAAA;QAC9C,IAAI,CAACJ,MAAM,CAACe,GAAG,CAAC,sCAAsCuD,cAAc,CAACC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;MACtF,CAAC;MAAA;MAAA;QAAA9E,cAAA,GAAAgB,CAAA;MAAA;IAEH,CAAC,CAAC,OAAO8C,KAAK,EAAE;MAAA;MAAA9D,cAAA,GAAAW,CAAA;MACd,IAAI,CAACJ,MAAM,CAACuD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACzD,CAAC,SAAS;MAAA;MAAA9D,cAAA,GAAAW,CAAA;MACR,IAAI,CAACC,SAAS,GAAG,KAAK;IACxB;EACF;EAEA;;;EAGAmE,SAASA,CAAA;IAAA;IAAA/E,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAW,CAAA;IAKP,OAAO;MACLC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBoE,WAAW;MAAE;MAAA,CAAAhF,cAAA,GAAAgB,CAAA,eAAI,CAACN,GAAG,KAAK,IAAI;MAAA;MAAA,CAAAV,cAAA,GAAAgB,CAAA,WAAI,IAAI,CAACN,GAAG,CAACuE,OAAO;MAClDC,OAAO;MAAE;MAAA,CAAAlF,cAAA,GAAAgB,CAAA,eAAI,CAACN,GAAG,EAAEyE,QAAQ,EAAE,EAAEC,MAAM,EAAE;MAAA;MAAA,CAAApF,cAAA,GAAAgB,CAAA,WAAI,IAAI;KAChD;EACH;EAEA;;;EAGA,MAAMqE,YAAYA,CAAA;IAAA;IAAArF,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAW,CAAA;IAOhB,IAAI;MACF,MAAM,CAAC2E,KAAK,EAAEC,MAAM,EAAEC,cAAc,EAAEC,UAAU,CAAC;MAAA;MAAA,CAAAzF,cAAA,GAAAW,CAAA,QAAG,MAAM4D,OAAO,CAACmB,GAAG,CAAC;MACpE;MACA,IAAI,CAAClF,MAAM,CAACqB,WAAW,CAAC8D,KAAK,CAAC;QAC5B5D,KAAK,EAAE;UAAEC,QAAQ,EAAE;QAAY;OAChC,CAAC;MAEF;MACA,IAAI,CAACxB,MAAM,CAACqB,WAAW,CAAC8D,KAAK,CAAC;QAC5B5D,KAAK,EAAE;UACLC,QAAQ,EAAE,YAAY;UACtBC,QAAQ,EAAE;;OAEb,CAAC;MAEF;MACA,IAAI,CAACzB,MAAM,CAACqB,WAAW,CAAC8D,KAAK,CAAC;QAC5B5D,KAAK,EAAE;UACLC,QAAQ,EAAE,YAAY;UACtBG,QAAQ,EAAE;YACRyD,GAAG,EAAE,IAAIlE,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;;;OAGnD,CAAC;MAEF;MACA,IAAI,CAACnB,MAAM,CAACqB,WAAW,CAAC8D,KAAK,CAAC;QAC5B5D,KAAK,EAAE;UACLC,QAAQ,EAAE,YAAY;UACtBiC,SAAS,EAAE;YAAE4B,GAAG,EAAE;UAAI;;OAEzB,CAAC,CACH,CAAC;MAEF;MACA,MAAMC,SAAS;MAAA;MAAA,CAAA9F,cAAA,GAAAW,CAAA,QAAG,MAAM,IAAI,CAACH,MAAM,CAACqB,WAAW,CAACC,QAAQ,CAAC;QACvDC,KAAK,EAAE;UACLC,QAAQ,EAAE,YAAY;UACtBG,QAAQ,EAAE;YAAE0D,GAAG,EAAE;UAAI;SACtB;QACDtD,MAAM,EAAE;UAAEJ,QAAQ,EAAE;QAAI,CAAE;QAC1B4D,OAAO,EAAE;UAAE5D,QAAQ,EAAE;QAAM,CAAE;QAC7B6D,IAAI,EAAE,EAAE,CAAE;OACX,CAAC;MAEF,IAAIC,eAAe;MAAA;MAAA,CAAAjG,cAAA,GAAAW,CAAA,QAAkB,IAAI;MAAC;MAAAX,cAAA,GAAAW,CAAA;MAC1C,IAAImF,SAAS,CAACpD,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA1C,cAAA,GAAAgB,CAAA;QACxB,MAAMkF,SAAS;QAAA;QAAA,CAAAlG,cAAA,GAAAW,CAAA,QAAG,EAAE;QAAC;QAAAX,cAAA,GAAAW,CAAA;QACrB,KAAK,IAAIkC,CAAC;QAAA;QAAA,CAAA7C,cAAA,GAAAW,CAAA,QAAG,CAAC,GAAEkC,CAAC,GAAGiD,SAAS,CAACpD,MAAM,GAAG,CAAC,EAAEG,CAAC,EAAE,EAAE;UAC7C,MAAMsD,OAAO;UAAA;UAAA,CAAAnG,cAAA,GAAAW,CAAA,QAAGmF,SAAS,CAACjD,CAAC,CAAC,CAACV,QAAS,CAACiE,OAAO,EAAE;UAChD,MAAMC,QAAQ;UAAA;UAAA,CAAArG,cAAA,GAAAW,CAAA,QAAGmF,SAAS,CAACjD,CAAC,GAAG,CAAC,CAAC,CAACV,QAAS,CAACiE,OAAO,EAAE;UAAC;UAAApG,cAAA,GAAAW,CAAA;UACtDuF,SAAS,CAACpD,IAAI,CAACqD,OAAO,GAAGE,QAAQ,CAAC;QACpC;QAAC;QAAArG,cAAA,GAAAW,CAAA;QACDsF,eAAe,GAAGC,SAAS,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,QAAQ,KAAK;UAAA;UAAAxG,cAAA,GAAAe,CAAA;UAAAf,cAAA,GAAAW,CAAA;UAAA,OAAA4F,GAAG,GAAGC,QAAQ;QAAR,CAAQ,EAAE,CAAC,CAAC,GAAGN,SAAS,CAACxD,MAAM;MAC7F,CAAC;MAAA;MAAA;QAAA1C,cAAA,GAAAgB,CAAA;MAAA;MAAAhB,cAAA,GAAAW,CAAA;MAED,OAAO;QACL8F,iBAAiB,EAAEnB,KAAK;QACxBoB,kBAAkB,EAAEnB,MAAM;QAC1BoB,sBAAsB,EAAEnB,cAAc;QACtCoB,iBAAiB,EAAEnB,UAAU;QAC7BQ;OACD;IACH,CAAC,CAAC,OAAOnC,KAAK,EAAE;MAAA;MAAA9D,cAAA,GAAAW,CAAA;MACd,IAAI,CAACJ,MAAM,CAACuD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAAC;MAAA9D,cAAA,GAAAW,CAAA;MACtD,OAAO;QACL8F,iBAAiB,EAAE,CAAC;QACpBC,kBAAkB,EAAE,CAAC;QACrBC,sBAAsB,EAAE,CAAC;QACzBC,iBAAiB,EAAE,CAAC;QACpBX,eAAe,EAAE;OAClB;IACH;EACF;;AAGF;AACA,OAAM,SAAUY,sBAAsBA,CAACrG,MAAqB,EAAED,MAAe;EAAA;EAAAP,cAAA,GAAAe,CAAA;EAAAf,cAAA,GAAAW,CAAA;EAC3E,OAAO,IAAIL,gBAAgB,CAAC;IAAEE,MAAM;IAAED;EAAM,CAAE,CAAC;AACjD","ignoreList":[]}