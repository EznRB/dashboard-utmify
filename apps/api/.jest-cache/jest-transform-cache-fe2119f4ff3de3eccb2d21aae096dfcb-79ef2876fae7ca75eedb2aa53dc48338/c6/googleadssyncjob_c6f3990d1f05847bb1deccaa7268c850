9789d487b7eda61d39585bb8bb24d7e0
/* istanbul ignore next */
function cov_2jwjb6ov4f() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\google-ads-sync.job.ts";
  var hash = "4638eec21df4d94fafc04823a19a66f5b340b398";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\google-ads-sync.job.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 10
        },
        end: {
          line: 9,
          column: 14
        }
      },
      "1": {
        start: {
          line: 10,
          column: 16
        },
        end: {
          line: 10,
          column: 21
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 74
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 37
        }
      },
      "4": {
        start: {
          line: 14,
          column: 30
        },
        end: {
          line: 14,
          column: 49
        }
      },
      "5": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 81
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "7": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 71
        }
      },
      "8": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "9": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 94
        }
      },
      "10": {
        start: {
          line: 27,
          column: 55
        },
        end: {
          line: 27,
          column: 73
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 79
        }
      },
      "12": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "13": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 28
        }
      },
      "14": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 28
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 59
        }
      },
      "16": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "17": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 94
        }
      },
      "18": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 19
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 33
        }
      },
      "20": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "21": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 92
        }
      },
      "22": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 19
        }
      },
      "23": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 30
        }
      },
      "24": {
        start: {
          line: 59,
          column: 26
        },
        end: {
          line: 59,
          column: 36
        }
      },
      "25": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "26": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 70
        }
      },
      "27": {
        start: {
          line: 63,
          column: 33
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "28": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "29": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 77
        }
      },
      "30": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 23
        }
      },
      "31": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 92
        }
      },
      "32": {
        start: {
          line: 93,
          column: 30
        },
        end: {
          line: 93,
          column: 31
        }
      },
      "33": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 94,
          column: 30
        }
      },
      "34": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "35": {
        start: {
          line: 95,
          column: 25
        },
        end: {
          line: 95,
          column: 26
        }
      },
      "36": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 67
        }
      },
      "37": {
        start: {
          line: 98,
          column: 30
        },
        end: {
          line: 98,
          column: 31
        }
      },
      "38": {
        start: {
          line: 99,
          column: 30
        },
        end: {
          line: 99,
          column: 31
        }
      },
      "39": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "40": {
        start: {
          line: 101,
          column: 38
        },
        end: {
          line: 156,
          column: 18
        }
      },
      "41": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 155,
          column: 21
        }
      },
      "42": {
        start: {
          line: 103,
          column: 24
        },
        end: {
          line: 103,
          column: 102
        }
      },
      "43": {
        start: {
          line: 105,
          column: 42
        },
        end: {
          line: 105,
          column: 102
        }
      },
      "44": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 128,
          column: 25
        }
      },
      "45": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 107
        }
      },
      "46": {
        start: {
          line: 108,
          column: 28
        },
        end: {
          line: 127,
          column: 29
        }
      },
      "47": {
        start: {
          line: 109,
          column: 54
        },
        end: {
          line: 109,
          column: 73
        }
      },
      "48": {
        start: {
          line: 110,
          column: 53
        },
        end: {
          line: 110,
          column: 100
        }
      },
      "49": {
        start: {
          line: 111,
          column: 50
        },
        end: {
          line: 111,
          column: 110
        }
      },
      "50": {
        start: {
          line: 112,
          column: 32
        },
        end: {
          line: 112,
          column: 103
        }
      },
      "51": {
        start: {
          line: 113,
          column: 32
        },
        end: {
          line: 113,
          column: 115
        }
      },
      "52": {
        start: {
          line: 116,
          column: 32
        },
        end: {
          line: 116,
          column: 127
        }
      },
      "53": {
        start: {
          line: 118,
          column: 32
        },
        end: {
          line: 125,
          column: 35
        }
      },
      "54": {
        start: {
          line: 126,
          column: 32
        },
        end: {
          line: 126,
          column: 51
        }
      },
      "55": {
        start: {
          line: 130,
          column: 24
        },
        end: {
          line: 130,
          column: 92
        }
      },
      "56": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 138,
          column: 27
        }
      },
      "57": {
        start: {
          line: 139,
          column: 24
        },
        end: {
          line: 139,
          column: 38
        }
      },
      "58": {
        start: {
          line: 140,
          column: 24
        },
        end: {
          line: 140,
          column: 114
        }
      },
      "59": {
        start: {
          line: 143,
          column: 24
        },
        end: {
          line: 143,
          column: 38
        }
      },
      "60": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 144,
          column: 119
        }
      },
      "61": {
        start: {
          line: 146,
          column: 24
        },
        end: {
          line: 154,
          column: 27
        }
      },
      "62": {
        start: {
          line: 153,
          column: 28
        },
        end: {
          line: 153,
          column: 105
        }
      },
      "63": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 56
        }
      },
      "64": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 162,
          column: 17
        }
      },
      "65": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 161,
          column: 76
        }
      },
      "66": {
        start: {
          line: 161,
          column: 49
        },
        end: {
          line: 161,
          column: 74
        }
      },
      "67": {
        start: {
          line: 164,
          column: 29
        },
        end: {
          line: 164,
          column: 51
        }
      },
      "68": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 166,
          column: 97
        }
      },
      "69": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "70": {
        start: {
          line: 169,
          column: 39
        },
        end: {
          line: 169,
          column: 61
        }
      },
      "71": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 101
        }
      },
      "72": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 68
        }
      },
      "73": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 35
        }
      },
      "74": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 188,
          column: 10
        }
      },
      "75": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "76": {
        start: {
          line: 195,
          column: 64
        },
        end: {
          line: 223,
          column: 14
        }
      },
      "77": {
        start: {
          line: 225,
          column: 30
        },
        end: {
          line: 233,
          column: 14
        }
      },
      "78": {
        start: {
          line: 234,
          column: 34
        },
        end: {
          line: 234,
          column: 38
        }
      },
      "79": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "80": {
        start: {
          line: 236,
          column: 34
        },
        end: {
          line: 236,
          column: 36
        }
      },
      "81": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 241,
          column: 17
        }
      },
      "82": {
        start: {
          line: 237,
          column: 29
        },
        end: {
          line: 237,
          column: 30
        }
      },
      "83": {
        start: {
          line: 238,
          column: 36
        },
        end: {
          line: 238,
          column: 67
        }
      },
      "84": {
        start: {
          line: 239,
          column: 37
        },
        end: {
          line: 239,
          column: 72
        }
      },
      "85": {
        start: {
          line: 240,
          column: 20
        },
        end: {
          line: 240,
          column: 55
        }
      },
      "86": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 108
        }
      },
      "87": {
        start: {
          line: 242,
          column: 70
        },
        end: {
          line: 242,
          column: 84
        }
      },
      "88": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 250,
          column: 14
        }
      },
      "89": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 66
        }
      },
      "90": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 260,
          column: 14
        }
      },
      "91": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 266,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 25
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 49
          },
          end: {
            line: 27,
            column: 50
          }
        },
        loc: {
          start: {
            line: 27,
            column: 55
          },
          end: {
            line: 27,
            column: 73
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 11
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 33
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 43
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 24
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 53
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 101,
            column: 48
          },
          end: {
            line: 101,
            column: 49
          }
        },
        loc: {
          start: {
            line: 101,
            column: 71
          },
          end: {
            line: 156,
            column: 17
          }
        },
        line: 101
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 152,
            column: 33
          },
          end: {
            line: 152,
            column: 34
          }
        },
        loc: {
          start: {
            line: 152,
            column: 48
          },
          end: {
            line: 154,
            column: 25
          }
        },
        line: 152
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 161,
            column: 38
          },
          end: {
            line: 161,
            column: 39
          }
        },
        loc: {
          start: {
            line: 161,
            column: 49
          },
          end: {
            line: 161,
            column: 74
          }
        },
        line: 161
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 183
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 193,
            column: 5
          }
        },
        loc: {
          start: {
            line: 193,
            column: 25
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 193
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 242,
            column: 51
          },
          end: {
            line: 242,
            column: 52
          }
        },
        loc: {
          start: {
            line: 242,
            column: 70
          },
          end: {
            line: 242,
            column: 84
          }
        },
        line: 242
      },
      "12": {
        name: "createGoogleAdsSyncJob",
        decl: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 38
          }
        },
        loc: {
          start: {
            line: 265,
            column: 55
          },
          end: {
            line: 267,
            column: 1
          }
        },
        line: 265
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 36
          }
        }, {
          start: {
            line: 12,
            column: 40
          },
          end: {
            line: 12,
            column: 73
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "5": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "6": {
        loc: {
          start: {
            line: 105,
            column: 42
          },
          end: {
            line: 105,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 42
          },
          end: {
            line: 105,
            column: 63
          }
        }, {
          start: {
            line: 105,
            column: 67
          },
          end: {
            line: 105,
            column: 102
          }
        }],
        line: 105
      },
      "7": {
        loc: {
          start: {
            line: 106,
            column: 24
          },
          end: {
            line: 128,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 24
          },
          end: {
            line: 128,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "8": {
        loc: {
          start: {
            line: 106,
            column: 28
          },
          end: {
            line: 106,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 28
          },
          end: {
            line: 106,
            column: 37
          }
        }, {
          start: {
            line: 106,
            column: 41
          },
          end: {
            line: 106,
            column: 65
          }
        }],
        line: 106
      },
      "9": {
        loc: {
          start: {
            line: 150,
            column: 43
          },
          end: {
            line: 150,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 68
          },
          end: {
            line: 150,
            column: 81
          }
        }, {
          start: {
            line: 150,
            column: 84
          },
          end: {
            line: 150,
            column: 99
          }
        }],
        line: 150
      },
      "10": {
        loc: {
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 162,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 162,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "11": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "12": {
        loc: {
          start: {
            line: 186,
            column: 25
          },
          end: {
            line: 186,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 25
          },
          end: {
            line: 186,
            column: 42
          }
        }, {
          start: {
            line: 186,
            column: 46
          },
          end: {
            line: 186,
            column: 62
          }
        }],
        line: 186
      },
      "13": {
        loc: {
          start: {
            line: 187,
            column: 21
          },
          end: {
            line: 187,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 21
          },
          end: {
            line: 187,
            column: 51
          }
        }, {
          start: {
            line: 187,
            column: 55
          },
          end: {
            line: 187,
            column: 59
          }
        }],
        line: 187
      },
      "14": {
        loc: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\google-ads-sync.job.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\google-ads-sync.job.ts"],
      sourcesContent: ["import { CronJob } from 'cron';\nimport { Logger } from '@nestjs/common';\nimport { PrismaService } from '../database/prisma.service';\nimport { GoogleAdsService } from '../services/google-ads.service';\nimport { CryptoService } from '../services/crypto.service';\n\ninterface GoogleAdsSyncJobOptions {\n  prisma: PrismaService;\n  logger?: Logger;\n}\n\nexport class GoogleAdsSyncJob {\n  private readonly logger: Logger;\n  private readonly prisma: PrismaService;\n  private readonly googleAdsService: GoogleAdsService;\n  private job: CronJob | null = null;\n  private isRunning = false;\n\n  constructor(options: GoogleAdsSyncJobOptions) {\n    this.logger = options.logger || new Logger(GoogleAdsSyncJob.name);\n    this.prisma = options.prisma;\n    \n    const cryptoService = new CryptoService();\n    this.googleAdsService = new GoogleAdsService(this.prisma, cryptoService);\n  }\n\n  /**\n   * Start the Google Ads sync job\n   * Runs every 30 minutes\n   */\n  start(): void {\n    if (this.job) {\n      this.logger.warn('Google Ads sync job is already running');\n      return;\n    }\n\n    // Run every 30 minutes: '0 */30 * * * *'\n    this.job = new CronJob(\n      '0 */30 * * * *',\n      () => this.executeSync(),\n      null,\n      true,\n      'UTC'\n    );\n\n    this.logger.log('Google Ads sync job started - runs every 30 minutes');\n  }\n\n  /**\n   * Stop the Google Ads sync job\n   */\n  stop(): void {\n    if (this.job) {\n      this.job.stop();\n      this.job = null;\n      this.logger.log('Google Ads sync job stopped');\n    }\n  }\n\n  /**\n   * Execute manual sync for all active integrations\n   */\n  async executeManualSync(): Promise<void> {\n    if (this.isRunning) {\n      this.logger.warn('Google Ads sync is already running, skipping manual execution');\n      return;\n    }\n\n    await this.executeSync();\n  }\n\n  /**\n   * Execute the sync process\n   */\n  private async executeSync(): Promise<void> {\n    if (this.isRunning) {\n      this.logger.warn('Google Ads sync is already running, skipping this execution');\n      return;\n    }\n\n    this.isRunning = true;\n    const startTime = Date.now();\n    \n    try {\n      this.logger.log('Starting Google Ads sync job execution');\n\n      // Get all active Google Ads integrations\n      const integrations = await this.prisma.integration.findMany({\n        where: {\n          platform: 'GOOGLE_ADS',\n          isActive: true,\n          // Only sync integrations that haven't been synced in the last 25 minutes\n          // This prevents overlapping syncs\n          OR: [\n            { lastSync: null },\n            {\n              lastSync: {\n                lt: new Date(Date.now() - 25 * 60 * 1000), // 25 minutes ago\n              },\n            },\n          ],\n        },\n        include: {\n          user: {\n            select: {\n              id: true,\n              email: true,\n            },\n          },\n        },\n      });\n\n      if (integrations.length === 0) {\n        this.logger.log('No Google Ads integrations found for sync');\n        return;\n      }\n\n      this.logger.log(`Found ${integrations.length} Google Ads integrations to sync`);\n\n      // Process integrations in batches to avoid overwhelming the API\n      const batchSize = 5;\n      const batches = [];\n      \n      for (let i = 0; i < integrations.length; i += batchSize) {\n        batches.push(integrations.slice(i, i + batchSize));\n      }\n\n      let totalSynced = 0;\n      let totalErrors = 0;\n\n      for (const batch of batches) {\n        const batchPromises = batch.map(async (integration) => {\n          try {\n            this.logger.log(`Syncing Google Ads data for user ${integration.user.email}`);\n            \n            // Check if tokens are still valid\n            const isExpired = integration.expiresAt && integration.expiresAt <= new Date();\n            \n            if (isExpired && integration.refreshToken) {\n              this.logger.log(`Refreshing expired token for user ${integration.user.email}`);\n              \n              try {\n                const cryptoService = new CryptoService();\n                const refreshToken = cryptoService.decrypt(integration.refreshToken);\n                const newTokens = await this.googleAdsService.refreshAccessToken(refreshToken);\n                await this.googleAdsService.storeTokens(integration.userId, newTokens);\n                \n                this.logger.log(`Token refreshed successfully for user ${integration.user.email}`);\n              } catch (refreshError) {\n                this.logger.error(`Failed to refresh token for user ${integration.user.email}:`, refreshError);\n                \n                // Mark integration as inactive if refresh fails\n                await this.prisma.integration.update({\n                  where: { id: integration.id },\n                  data: { \n                    isActive: false,\n                    lastError: 'Token refresh failed',\n                    lastSync: new Date(),\n                  },\n                });\n                \n                throw refreshError;\n              }\n            }\n\n            // Perform the sync with change detection\n            await this.googleAdsService.syncUserData(integration.userId, false);\n            \n            // Update last sync timestamp\n            await this.prisma.integration.update({\n              where: { id: integration.id },\n              data: { \n                lastSync: new Date(),\n                lastError: null,\n              },\n            });\n            \n            totalSynced++;\n            this.logger.log(`Successfully synced Google Ads data for user ${integration.user.email}`);\n            \n          } catch (error) {\n            totalErrors++;\n            this.logger.error(`Failed to sync Google Ads data for user ${integration.user.email}:`, error);\n            \n            // Update integration with error info\n            await this.prisma.integration.update({\n              where: { id: integration.id },\n              data: { \n                lastSync: new Date(),\n                lastError: error instanceof Error ? error.message : 'Unknown error',\n              },\n            }).catch(updateError => {\n              this.logger.error('Failed to update integration error status:', updateError);\n            });\n          }\n        });\n\n        // Wait for current batch to complete before processing next batch\n        await Promise.allSettled(batchPromises);\n        \n        // Add a small delay between batches to be respectful to the API\n        if (batches.indexOf(batch) < batches.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay\n        }\n      }\n\n      const duration = Date.now() - startTime;\n      this.logger.log(\n        `Google Ads sync job completed in ${duration}ms. ` +\n        `Synced: ${totalSynced}, Errors: ${totalErrors}, Total: ${integrations.length}`\n      );\n\n      // Log performance metrics\n      if (totalSynced > 0) {\n        const avgTimePerSync = duration / totalSynced;\n        this.logger.log(`Average sync time per integration: ${avgTimePerSync.toFixed(2)}ms`);\n      }\n\n    } catch (error) {\n      this.logger.error('Google Ads sync job failed:', error);\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Get job status\n   */\n  getStatus(): {\n    isRunning: boolean;\n    isScheduled: boolean;\n    nextRun: Date | null;\n  } {\n    return {\n      isRunning: this.isRunning,\n      isScheduled: this.job !== null && this.job.running,\n      nextRun: this.job?.nextDate()?.toDate() || null,\n    };\n  }\n\n  /**\n   * Get sync statistics\n   */\n  async getSyncStats(): Promise<{\n    totalIntegrations: number;\n    activeIntegrations: number;\n    lastSyncedIntegrations: number;\n    errorIntegrations: number;\n    avgSyncInterval: number | null;\n  }> {\n    try {\n      const [total, active, recentlysynced, withErrors] = await Promise.all([\n        // Total Google Ads integrations\n        this.prisma.integration.count({\n          where: { platform: 'GOOGLE_ADS' },\n        }),\n        \n        // Active integrations\n        this.prisma.integration.count({\n          where: { \n            platform: 'GOOGLE_ADS',\n            isActive: true,\n          },\n        }),\n        \n        // Recently synced (last 24 hours)\n        this.prisma.integration.count({\n          where: {\n            platform: 'GOOGLE_ADS',\n            lastSync: {\n              gte: new Date(Date.now() - 24 * 60 * 60 * 1000),\n            },\n          },\n        }),\n        \n        // Integrations with errors\n        this.prisma.integration.count({\n          where: {\n            platform: 'GOOGLE_ADS',\n            lastError: { not: null },\n          },\n        }),\n      ]);\n\n      // Calculate average sync interval\n      const syncTimes = await this.prisma.integration.findMany({\n        where: {\n          platform: 'GOOGLE_ADS',\n          lastSync: { not: null },\n        },\n        select: { lastSync: true },\n        orderBy: { lastSync: 'desc' },\n        take: 10, // Last 10 syncs\n      });\n\n      let avgSyncInterval: number | null = null;\n      if (syncTimes.length > 1) {\n        const intervals = [];\n        for (let i = 0; i < syncTimes.length - 1; i++) {\n          const current = syncTimes[i].lastSync!.getTime();\n          const previous = syncTimes[i + 1].lastSync!.getTime();\n          intervals.push(current - previous);\n        }\n        avgSyncInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n      }\n\n      return {\n        totalIntegrations: total,\n        activeIntegrations: active,\n        lastSyncedIntegrations: recentlysynced,\n        errorIntegrations: withErrors,\n        avgSyncInterval,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get sync stats:', error);\n      return {\n        totalIntegrations: 0,\n        activeIntegrations: 0,\n        lastSyncedIntegrations: 0,\n        errorIntegrations: 0,\n        avgSyncInterval: null,\n      };\n    }\n  }\n}\n\n// Export factory function for easy instantiation\nexport function createGoogleAdsSyncJob(prisma: PrismaService, logger?: Logger): GoogleAdsSyncJob {\n  return new GoogleAdsSyncJob({ prisma, logger });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4638eec21df4d94fafc04823a19a66f5b340b398"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jwjb6ov4f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jwjb6ov4f();
import { CronJob } from 'cron';
import { Logger } from '@nestjs/common';
import { GoogleAdsService } from '../services/google-ads.service';
import { CryptoService } from '../services/crypto.service';
export class GoogleAdsSyncJob {
  logger;
  prisma;
  googleAdsService;
  job =
  /* istanbul ignore next */
  (cov_2jwjb6ov4f().s[0]++, null);
  isRunning =
  /* istanbul ignore next */
  (cov_2jwjb6ov4f().s[1]++, false);
  constructor(options) {
    /* istanbul ignore next */
    cov_2jwjb6ov4f().f[0]++;
    cov_2jwjb6ov4f().s[2]++;
    this.logger =
    /* istanbul ignore next */
    (cov_2jwjb6ov4f().b[0][0]++, options.logger) ||
    /* istanbul ignore next */
    (cov_2jwjb6ov4f().b[0][1]++, new Logger(GoogleAdsSyncJob.name));
    /* istanbul ignore next */
    cov_2jwjb6ov4f().s[3]++;
    this.prisma = options.prisma;
    const cryptoService =
    /* istanbul ignore next */
    (cov_2jwjb6ov4f().s[4]++, new CryptoService());
    /* istanbul ignore next */
    cov_2jwjb6ov4f().s[5]++;
    this.googleAdsService = new GoogleAdsService(this.prisma, cryptoService);
  }
  /**
   * Start the Google Ads sync job
   * Runs every 30 minutes
   */
  start() {
    /* istanbul ignore next */
    cov_2jwjb6ov4f().f[1]++;
    cov_2jwjb6ov4f().s[6]++;
    if (this.job) {
      /* istanbul ignore next */
      cov_2jwjb6ov4f().b[1][0]++;
      cov_2jwjb6ov4f().s[7]++;
      this.logger.warn('Google Ads sync job is already running');
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[8]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2jwjb6ov4f().b[1][1]++;
    }
    // Run every 30 minutes: '0 */30 * * * *'
    cov_2jwjb6ov4f().s[9]++;
    this.job = new CronJob('0 */30 * * * *', () => {
      /* istanbul ignore next */
      cov_2jwjb6ov4f().f[2]++;
      cov_2jwjb6ov4f().s[10]++;
      return this.executeSync();
    }, null, true, 'UTC');
    /* istanbul ignore next */
    cov_2jwjb6ov4f().s[11]++;
    this.logger.log('Google Ads sync job started - runs every 30 minutes');
  }
  /**
   * Stop the Google Ads sync job
   */
  stop() {
    /* istanbul ignore next */
    cov_2jwjb6ov4f().f[3]++;
    cov_2jwjb6ov4f().s[12]++;
    if (this.job) {
      /* istanbul ignore next */
      cov_2jwjb6ov4f().b[2][0]++;
      cov_2jwjb6ov4f().s[13]++;
      this.job.stop();
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[14]++;
      this.job = null;
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[15]++;
      this.logger.log('Google Ads sync job stopped');
    } else
    /* istanbul ignore next */
    {
      cov_2jwjb6ov4f().b[2][1]++;
    }
  }
  /**
   * Execute manual sync for all active integrations
   */
  async executeManualSync() {
    /* istanbul ignore next */
    cov_2jwjb6ov4f().f[4]++;
    cov_2jwjb6ov4f().s[16]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_2jwjb6ov4f().b[3][0]++;
      cov_2jwjb6ov4f().s[17]++;
      this.logger.warn('Google Ads sync is already running, skipping manual execution');
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[18]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2jwjb6ov4f().b[3][1]++;
    }
    cov_2jwjb6ov4f().s[19]++;
    await this.executeSync();
  }
  /**
   * Execute the sync process
   */
  async executeSync() {
    /* istanbul ignore next */
    cov_2jwjb6ov4f().f[5]++;
    cov_2jwjb6ov4f().s[20]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_2jwjb6ov4f().b[4][0]++;
      cov_2jwjb6ov4f().s[21]++;
      this.logger.warn('Google Ads sync is already running, skipping this execution');
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[22]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2jwjb6ov4f().b[4][1]++;
    }
    cov_2jwjb6ov4f().s[23]++;
    this.isRunning = true;
    const startTime =
    /* istanbul ignore next */
    (cov_2jwjb6ov4f().s[24]++, Date.now());
    /* istanbul ignore next */
    cov_2jwjb6ov4f().s[25]++;
    try {
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[26]++;
      this.logger.log('Starting Google Ads sync job execution');
      // Get all active Google Ads integrations
      const integrations =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[27]++, await this.prisma.integration.findMany({
        where: {
          platform: 'GOOGLE_ADS',
          isActive: true,
          // Only sync integrations that haven't been synced in the last 25 minutes
          // This prevents overlapping syncs
          OR: [{
            lastSync: null
          }, {
            lastSync: {
              lt: new Date(Date.now() - 25 * 60 * 1000) // 25 minutes ago
            }
          }]
        },
        include: {
          user: {
            select: {
              id: true,
              email: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[28]++;
      if (integrations.length === 0) {
        /* istanbul ignore next */
        cov_2jwjb6ov4f().b[5][0]++;
        cov_2jwjb6ov4f().s[29]++;
        this.logger.log('No Google Ads integrations found for sync');
        /* istanbul ignore next */
        cov_2jwjb6ov4f().s[30]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2jwjb6ov4f().b[5][1]++;
      }
      cov_2jwjb6ov4f().s[31]++;
      this.logger.log(`Found ${integrations.length} Google Ads integrations to sync`);
      // Process integrations in batches to avoid overwhelming the API
      const batchSize =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[32]++, 5);
      const batches =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[33]++, []);
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[34]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[35]++, 0); i < integrations.length; i += batchSize) {
        /* istanbul ignore next */
        cov_2jwjb6ov4f().s[36]++;
        batches.push(integrations.slice(i, i + batchSize));
      }
      let totalSynced =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[37]++, 0);
      let totalErrors =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[38]++, 0);
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[39]++;
      for (const batch of batches) {
        const batchPromises =
        /* istanbul ignore next */
        (cov_2jwjb6ov4f().s[40]++, batch.map(async integration => {
          /* istanbul ignore next */
          cov_2jwjb6ov4f().f[6]++;
          cov_2jwjb6ov4f().s[41]++;
          try {
            /* istanbul ignore next */
            cov_2jwjb6ov4f().s[42]++;
            this.logger.log(`Syncing Google Ads data for user ${integration.user.email}`);
            // Check if tokens are still valid
            const isExpired =
            /* istanbul ignore next */
            (cov_2jwjb6ov4f().s[43]++,
            /* istanbul ignore next */
            (cov_2jwjb6ov4f().b[6][0]++, integration.expiresAt) &&
            /* istanbul ignore next */
            (cov_2jwjb6ov4f().b[6][1]++, integration.expiresAt <= new Date()));
            /* istanbul ignore next */
            cov_2jwjb6ov4f().s[44]++;
            if (
            /* istanbul ignore next */
            (cov_2jwjb6ov4f().b[8][0]++, isExpired) &&
            /* istanbul ignore next */
            (cov_2jwjb6ov4f().b[8][1]++, integration.refreshToken)) {
              /* istanbul ignore next */
              cov_2jwjb6ov4f().b[7][0]++;
              cov_2jwjb6ov4f().s[45]++;
              this.logger.log(`Refreshing expired token for user ${integration.user.email}`);
              /* istanbul ignore next */
              cov_2jwjb6ov4f().s[46]++;
              try {
                const cryptoService =
                /* istanbul ignore next */
                (cov_2jwjb6ov4f().s[47]++, new CryptoService());
                const refreshToken =
                /* istanbul ignore next */
                (cov_2jwjb6ov4f().s[48]++, cryptoService.decrypt(integration.refreshToken));
                const newTokens =
                /* istanbul ignore next */
                (cov_2jwjb6ov4f().s[49]++, await this.googleAdsService.refreshAccessToken(refreshToken));
                /* istanbul ignore next */
                cov_2jwjb6ov4f().s[50]++;
                await this.googleAdsService.storeTokens(integration.userId, newTokens);
                /* istanbul ignore next */
                cov_2jwjb6ov4f().s[51]++;
                this.logger.log(`Token refreshed successfully for user ${integration.user.email}`);
              } catch (refreshError) {
                /* istanbul ignore next */
                cov_2jwjb6ov4f().s[52]++;
                this.logger.error(`Failed to refresh token for user ${integration.user.email}:`, refreshError);
                // Mark integration as inactive if refresh fails
                /* istanbul ignore next */
                cov_2jwjb6ov4f().s[53]++;
                await this.prisma.integration.update({
                  where: {
                    id: integration.id
                  },
                  data: {
                    isActive: false,
                    lastError: 'Token refresh failed',
                    lastSync: new Date()
                  }
                });
                /* istanbul ignore next */
                cov_2jwjb6ov4f().s[54]++;
                throw refreshError;
              }
            } else
            /* istanbul ignore next */
            {
              cov_2jwjb6ov4f().b[7][1]++;
            }
            // Perform the sync with change detection
            cov_2jwjb6ov4f().s[55]++;
            await this.googleAdsService.syncUserData(integration.userId, false);
            // Update last sync timestamp
            /* istanbul ignore next */
            cov_2jwjb6ov4f().s[56]++;
            await this.prisma.integration.update({
              where: {
                id: integration.id
              },
              data: {
                lastSync: new Date(),
                lastError: null
              }
            });
            /* istanbul ignore next */
            cov_2jwjb6ov4f().s[57]++;
            totalSynced++;
            /* istanbul ignore next */
            cov_2jwjb6ov4f().s[58]++;
            this.logger.log(`Successfully synced Google Ads data for user ${integration.user.email}`);
          } catch (error) {
            /* istanbul ignore next */
            cov_2jwjb6ov4f().s[59]++;
            totalErrors++;
            /* istanbul ignore next */
            cov_2jwjb6ov4f().s[60]++;
            this.logger.error(`Failed to sync Google Ads data for user ${integration.user.email}:`, error);
            // Update integration with error info
            /* istanbul ignore next */
            cov_2jwjb6ov4f().s[61]++;
            await this.prisma.integration.update({
              where: {
                id: integration.id
              },
              data: {
                lastSync: new Date(),
                lastError: error instanceof Error ?
                /* istanbul ignore next */
                (cov_2jwjb6ov4f().b[9][0]++, error.message) :
                /* istanbul ignore next */
                (cov_2jwjb6ov4f().b[9][1]++, 'Unknown error')
              }
            }).catch(updateError => {
              /* istanbul ignore next */
              cov_2jwjb6ov4f().f[7]++;
              cov_2jwjb6ov4f().s[62]++;
              this.logger.error('Failed to update integration error status:', updateError);
            });
          }
        }));
        // Wait for current batch to complete before processing next batch
        /* istanbul ignore next */
        cov_2jwjb6ov4f().s[63]++;
        await Promise.allSettled(batchPromises);
        // Add a small delay between batches to be respectful to the API
        /* istanbul ignore next */
        cov_2jwjb6ov4f().s[64]++;
        if (batches.indexOf(batch) < batches.length - 1) {
          /* istanbul ignore next */
          cov_2jwjb6ov4f().b[10][0]++;
          cov_2jwjb6ov4f().s[65]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_2jwjb6ov4f().f[8]++;
            cov_2jwjb6ov4f().s[66]++;
            return setTimeout(resolve, 2000);
          }); // 2 second delay
        } else
        /* istanbul ignore next */
        {
          cov_2jwjb6ov4f().b[10][1]++;
        }
      }
      const duration =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[67]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[68]++;
      this.logger.log(`Google Ads sync job completed in ${duration}ms. ` + `Synced: ${totalSynced}, Errors: ${totalErrors}, Total: ${integrations.length}`);
      // Log performance metrics
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[69]++;
      if (totalSynced > 0) {
        /* istanbul ignore next */
        cov_2jwjb6ov4f().b[11][0]++;
        const avgTimePerSync =
        /* istanbul ignore next */
        (cov_2jwjb6ov4f().s[70]++, duration / totalSynced);
        /* istanbul ignore next */
        cov_2jwjb6ov4f().s[71]++;
        this.logger.log(`Average sync time per integration: ${avgTimePerSync.toFixed(2)}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_2jwjb6ov4f().b[11][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[72]++;
      this.logger.error('Google Ads sync job failed:', error);
    } finally {
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[73]++;
      this.isRunning = false;
    }
  }
  /**
   * Get job status
   */
  getStatus() {
    /* istanbul ignore next */
    cov_2jwjb6ov4f().f[9]++;
    cov_2jwjb6ov4f().s[74]++;
    return {
      isRunning: this.isRunning,
      isScheduled:
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().b[12][0]++, this.job !== null) &&
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().b[12][1]++, this.job.running),
      nextRun:
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().b[13][0]++, this.job?.nextDate()?.toDate()) ||
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().b[13][1]++, null)
    };
  }
  /**
   * Get sync statistics
   */
  async getSyncStats() {
    /* istanbul ignore next */
    cov_2jwjb6ov4f().f[10]++;
    cov_2jwjb6ov4f().s[75]++;
    try {
      const [total, active, recentlysynced, withErrors] =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[76]++, await Promise.all([
      // Total Google Ads integrations
      this.prisma.integration.count({
        where: {
          platform: 'GOOGLE_ADS'
        }
      }),
      // Active integrations
      this.prisma.integration.count({
        where: {
          platform: 'GOOGLE_ADS',
          isActive: true
        }
      }),
      // Recently synced (last 24 hours)
      this.prisma.integration.count({
        where: {
          platform: 'GOOGLE_ADS',
          lastSync: {
            gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
          }
        }
      }),
      // Integrations with errors
      this.prisma.integration.count({
        where: {
          platform: 'GOOGLE_ADS',
          lastError: {
            not: null
          }
        }
      })]));
      // Calculate average sync interval
      const syncTimes =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[77]++, await this.prisma.integration.findMany({
        where: {
          platform: 'GOOGLE_ADS',
          lastSync: {
            not: null
          }
        },
        select: {
          lastSync: true
        },
        orderBy: {
          lastSync: 'desc'
        },
        take: 10 // Last 10 syncs
      }));
      let avgSyncInterval =
      /* istanbul ignore next */
      (cov_2jwjb6ov4f().s[78]++, null);
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[79]++;
      if (syncTimes.length > 1) {
        /* istanbul ignore next */
        cov_2jwjb6ov4f().b[14][0]++;
        const intervals =
        /* istanbul ignore next */
        (cov_2jwjb6ov4f().s[80]++, []);
        /* istanbul ignore next */
        cov_2jwjb6ov4f().s[81]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2jwjb6ov4f().s[82]++, 0); i < syncTimes.length - 1; i++) {
          const current =
          /* istanbul ignore next */
          (cov_2jwjb6ov4f().s[83]++, syncTimes[i].lastSync.getTime());
          const previous =
          /* istanbul ignore next */
          (cov_2jwjb6ov4f().s[84]++, syncTimes[i + 1].lastSync.getTime());
          /* istanbul ignore next */
          cov_2jwjb6ov4f().s[85]++;
          intervals.push(current - previous);
        }
        /* istanbul ignore next */
        cov_2jwjb6ov4f().s[86]++;
        avgSyncInterval = intervals.reduce((sum, interval) => {
          /* istanbul ignore next */
          cov_2jwjb6ov4f().f[11]++;
          cov_2jwjb6ov4f().s[87]++;
          return sum + interval;
        }, 0) / intervals.length;
      } else
      /* istanbul ignore next */
      {
        cov_2jwjb6ov4f().b[14][1]++;
      }
      cov_2jwjb6ov4f().s[88]++;
      return {
        totalIntegrations: total,
        activeIntegrations: active,
        lastSyncedIntegrations: recentlysynced,
        errorIntegrations: withErrors,
        avgSyncInterval
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[89]++;
      this.logger.error('Failed to get sync stats:', error);
      /* istanbul ignore next */
      cov_2jwjb6ov4f().s[90]++;
      return {
        totalIntegrations: 0,
        activeIntegrations: 0,
        lastSyncedIntegrations: 0,
        errorIntegrations: 0,
        avgSyncInterval: null
      };
    }
  }
}
// Export factory function for easy instantiation
export function createGoogleAdsSyncJob(prisma, logger) {
  /* istanbul ignore next */
  cov_2jwjb6ov4f().f[12]++;
  cov_2jwjb6ov4f().s[91]++;
  return new GoogleAdsSyncJob({
    prisma,
    logger
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,