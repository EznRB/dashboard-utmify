{"version":3,"names":["cov_2a41pbrpvj","actualCoverage","logger","ERROR_CODES","s","INVALID_CREDENTIALS","INVALID_TOKEN","INVALID_REFRESH_TOKEN","MISSING_AUTH_HEADER","MISSING_ACCESS_TOKEN","SESSION_EXPIRED","AUTH_FAILED","AUTH_REQUIRED","INSUFFICIENT_PERMISSIONS","ORGANIZATION_REQUIRED","ORGANIZATION_DISABLED","ACCOUNT_DISABLED","VALIDATION_ERROR","INVALID_INPUT","MISSING_REQUIRED_FIELD","INVALID_EMAIL","INVALID_PASSWORD","NOT_FOUND","ALREADY_EXISTS","EMAIL_ALREADY_EXISTS","SLUG_ALREADY_EXISTS","RATE_LIMIT_EXCEEDED","TOO_MANY_REQUESTS","MISSING_API_KEY","INVALID_API_KEY","MISSING_WEBHOOK_SIGNATURE","INVALID_WEBHOOK_SIGNATURE","INVALID_WEBHOOK_TIMESTAMP","PLAN_LIMIT_EXCEEDED","FEATURE_NOT_AVAILABLE","QUOTA_EXCEEDED","EXTERNAL_SERVICE_ERROR","FACEBOOK_API_ERROR","GOOGLE_API_ERROR","FILE_TOO_LARGE","INVALID_FILE_TYPE","UPLOAD_FAILED","DATABASE_ERROR","TRANSACTION_FAILED","INTERNAL_ERROR","SERVICE_UNAVAILABLE","LOGOUT_FAILED","ApiError","Error","code","statusCode","details","timestamp","constructor","message","b","f","name","Date","toISOString","captureStackTrace","toJSON","error","badRequest","unauthorized","forbidden","notFound","conflict","tooManyRequests","internalError","serviceUnavailable","ValidationError","fromZodError","errors","map","err","field","path","join","DatabaseError","originalError","stack","fromPrismaError","prismaCode","meta","ExternalServiceError","service","facebook","google","errorHandler","request","reply","method","url","headers","ip","userId","user","id","organizationId","organization","status","send","validation","validationError","rateLimitError","apiError","process","env","NODE_ENV","undefined","notFoundHandler","notFoundError","asyncHandler","fn","Promise","resolve","catch"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\utils\\errors.ts"],"sourcesContent":["import type { FastifyError } from 'fastify'\nimport { logger } from './logger'\n\n// Custom error codes\nexport const ERROR_CODES = {\n  // Authentication errors\n  INVALID_CREDENTIALS: 'INVALID_CREDENTIALS',\n  INVALID_TOKEN: 'INVALID_TOKEN',\n  INVALID_REFRESH_TOKEN: 'INVALID_REFRESH_TOKEN',\n  MISSING_AUTH_HEADER: 'MISSING_AUTH_HEADER',\n  MISSING_ACCESS_TOKEN: 'MISSING_ACCESS_TOKEN',\n  SESSION_EXPIRED: 'SESSION_EXPIRED',\n  AUTH_FAILED: 'AUTH_FAILED',\n  AUTH_REQUIRED: 'AUTH_REQUIRED',\n  \n  // Authorization errors\n  INSUFFICIENT_PERMISSIONS: 'INSUFFICIENT_PERMISSIONS',\n  ORGANIZATION_REQUIRED: 'ORGANIZATION_REQUIRED',\n  ORGANIZATION_DISABLED: 'ORGANIZATION_DISABLED',\n  ACCOUNT_DISABLED: 'ACCOUNT_DISABLED',\n  \n  // Validation errors\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  INVALID_INPUT: 'INVALID_INPUT',\n  MISSING_REQUIRED_FIELD: 'MISSING_REQUIRED_FIELD',\n  INVALID_EMAIL: 'INVALID_EMAIL',\n  INVALID_PASSWORD: 'INVALID_PASSWORD',\n  \n  // Resource errors\n  NOT_FOUND: 'NOT_FOUND',\n  ALREADY_EXISTS: 'ALREADY_EXISTS',\n  EMAIL_ALREADY_EXISTS: 'EMAIL_ALREADY_EXISTS',\n  SLUG_ALREADY_EXISTS: 'SLUG_ALREADY_EXISTS',\n  \n  // Rate limiting\n  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',\n  TOO_MANY_REQUESTS: 'TOO_MANY_REQUESTS',\n  \n  // API errors\n  MISSING_API_KEY: 'MISSING_API_KEY',\n  INVALID_API_KEY: 'INVALID_API_KEY',\n  \n  // Webhook errors\n  MISSING_WEBHOOK_SIGNATURE: 'MISSING_WEBHOOK_SIGNATURE',\n  INVALID_WEBHOOK_SIGNATURE: 'INVALID_WEBHOOK_SIGNATURE',\n  INVALID_WEBHOOK_TIMESTAMP: 'INVALID_WEBHOOK_TIMESTAMP',\n  \n  // Business logic errors\n  PLAN_LIMIT_EXCEEDED: 'PLAN_LIMIT_EXCEEDED',\n  FEATURE_NOT_AVAILABLE: 'FEATURE_NOT_AVAILABLE',\n  QUOTA_EXCEEDED: 'QUOTA_EXCEEDED',\n  \n  // External service errors\n  EXTERNAL_SERVICE_ERROR: 'EXTERNAL_SERVICE_ERROR',\n  FACEBOOK_API_ERROR: 'FACEBOOK_API_ERROR',\n  GOOGLE_API_ERROR: 'GOOGLE_API_ERROR',\n  \n  // File upload errors\n  FILE_TOO_LARGE: 'FILE_TOO_LARGE',\n  INVALID_FILE_TYPE: 'INVALID_FILE_TYPE',\n  UPLOAD_FAILED: 'UPLOAD_FAILED',\n  \n  // Database errors\n  DATABASE_ERROR: 'DATABASE_ERROR',\n  TRANSACTION_FAILED: 'TRANSACTION_FAILED',\n  \n  // Generic errors\n  INTERNAL_ERROR: 'INTERNAL_ERROR',\n  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',\n  LOGOUT_FAILED: 'LOGOUT_FAILED',\n} as const\n\nexport type ErrorCode = keyof typeof ERROR_CODES\n\n// Custom API Error class\nexport class ApiError extends Error {\n  public readonly code: string\n  public readonly statusCode: number\n  public readonly details?: any\n  public readonly timestamp: string\n\n  constructor(\n    message: string,\n    code: string = ERROR_CODES.INTERNAL_ERROR,\n    statusCode: number = 500,\n    details?: any\n  ) {\n    super(message)\n    this.name = 'ApiError'\n    this.code = code\n    this.statusCode = statusCode\n    this.details = details\n    this.timestamp = new Date().toISOString()\n\n    // Maintain proper stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ApiError)\n    }\n  }\n\n  // Convert to JSON for API responses\n  toJSON() {\n    return {\n      error: {\n        message: this.message,\n        code: this.code,\n        statusCode: this.statusCode,\n        timestamp: this.timestamp,\n        ...(this.details && { details: this.details }),\n      },\n    }\n  }\n\n  // Static factory methods for common errors\n  static badRequest(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.INVALID_INPUT, 400, details)\n  }\n\n  static unauthorized(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.AUTH_REQUIRED, 401, details)\n  }\n\n  static forbidden(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.INSUFFICIENT_PERMISSIONS, 403, details)\n  }\n\n  static notFound(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.NOT_FOUND, 404, details)\n  }\n\n  static conflict(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.ALREADY_EXISTS, 409, details)\n  }\n\n  static tooManyRequests(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.RATE_LIMIT_EXCEEDED, 429, details)\n  }\n\n  static internalError(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.INTERNAL_ERROR, 500, details)\n  }\n\n  static serviceUnavailable(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.SERVICE_UNAVAILABLE, 503, details)\n  }\n}\n\n// Validation Error class\nexport class ValidationError extends ApiError {\n  constructor(message: string, details?: any) {\n    super(message, ERROR_CODES.VALIDATION_ERROR, 400, details)\n    this.name = 'ValidationError'\n  }\n\n  static fromZodError(error: any) {\n    const details = error.errors?.map((err: any) => ({\n      field: err.path.join('.'),\n      message: err.message,\n      code: err.code,\n    }))\n\n    return new ValidationError('Validation failed', details)\n  }\n}\n\n// Database Error class\nexport class DatabaseError extends ApiError {\n  constructor(message: string, originalError?: Error, details?: any) {\n    super(message, ERROR_CODES.DATABASE_ERROR, 500, details)\n    this.name = 'DatabaseError'\n    \n    if (originalError) {\n      this.stack = originalError.stack\n    }\n  }\n\n  static fromPrismaError(error: any) {\n    let message = 'Database operation failed'\n    let code = ERROR_CODES.DATABASE_ERROR\n    let statusCode = 500\n\n    // Handle specific Prisma error codes\n    switch (error.code) {\n      case 'P2002':\n        message = 'A record with this value already exists'\n        code = ERROR_CODES.ALREADY_EXISTS\n        statusCode = 409\n        break\n      case 'P2025':\n        message = 'Record not found'\n        code = ERROR_CODES.NOT_FOUND\n        statusCode = 404\n        break\n      case 'P2003':\n        message = 'Foreign key constraint failed'\n        code = ERROR_CODES.VALIDATION_ERROR\n        statusCode = 400\n        break\n      case 'P2014':\n        message = 'Invalid ID provided'\n        code = ERROR_CODES.INVALID_INPUT\n        statusCode = 400\n        break\n      default:\n        logger.error(error, 'Unhandled Prisma error')\n    }\n\n    return new DatabaseError(message, error, {\n      prismaCode: error.code,\n      meta: error.meta,\n    })\n  }\n}\n\n// External Service Error class\nexport class ExternalServiceError extends ApiError {\n  public readonly service: string\n\n  constructor(service: string, message: string, originalError?: Error, details?: any) {\n    super(message, ERROR_CODES.EXTERNAL_SERVICE_ERROR, 502, details)\n    this.name = 'ExternalServiceError'\n    this.service = service\n    \n    if (originalError) {\n      this.stack = originalError.stack\n    }\n  }\n\n  static facebook(message: string, error?: Error, details?: any) {\n    return new ExternalServiceError('Facebook', message, error, {\n      ...details,\n      code: ERROR_CODES.FACEBOOK_API_ERROR,\n    })\n  }\n\n  static google(message: string, error?: Error, details?: any) {\n    return new ExternalServiceError('Google', message, error, {\n      ...details,\n      code: ERROR_CODES.GOOGLE_API_ERROR,\n    })\n  }\n}\n\n// Error handler for Fastify\nexport function errorHandler(error: FastifyError, request: any, reply: any) {\n  // Log error\n  logger.error({\n    error: {\n      message: error.message,\n      stack: error.stack,\n      code: (error as any).code,\n      statusCode: error.statusCode,\n    },\n    request: {\n      method: request.method,\n      url: request.url,\n      headers: request.headers,\n      ip: request.ip,\n      userId: request.user?.id,\n      organizationId: request.organization?.id,\n    },\n  }, 'Request error')\n\n  // Handle different error types\n  if (error instanceof ApiError) {\n    return reply.status(error.statusCode).send(error.toJSON())\n  }\n\n  if (error instanceof ValidationError) {\n    return reply.status(error.statusCode).send(error.toJSON())\n  }\n\n  if (error instanceof DatabaseError) {\n    return reply.status(error.statusCode).send(error.toJSON())\n  }\n\n  if (error instanceof ExternalServiceError) {\n    return reply.status(error.statusCode).send(error.toJSON())\n  }\n\n  // Handle Fastify validation errors\n  if (error.validation) {\n    const validationError = ValidationError.fromZodError(error)\n    return reply.status(validationError.statusCode).send(validationError.toJSON())\n  }\n\n  // Handle rate limiting errors\n  if (error.statusCode === 429) {\n    const rateLimitError = ApiError.tooManyRequests(\n      'Too many requests, please try again later',\n      ERROR_CODES.RATE_LIMIT_EXCEEDED\n    )\n    return reply.status(429).send(rateLimitError.toJSON())\n  }\n\n  // Handle generic HTTP errors\n  if (error.statusCode && error.statusCode < 500) {\n    const apiError = new ApiError(\n      error.message || 'Bad request',\n      ERROR_CODES.INVALID_INPUT,\n      error.statusCode\n    )\n    return reply.status(error.statusCode).send(apiError.toJSON())\n  }\n\n  // Handle unexpected errors\n  const internalError = ApiError.internalError(\n    'An unexpected error occurred',\n    ERROR_CODES.INTERNAL_ERROR,\n    process.env.NODE_ENV === 'development' ? { originalError: error.message } : undefined\n  )\n\n  return reply.status(500).send(internalError.toJSON())\n}\n\n// Not found handler\nexport function notFoundHandler(request: any, reply: any) {\n  const notFoundError = ApiError.notFound(\n    `Route ${request.method} ${request.url} not found`,\n    ERROR_CODES.NOT_FOUND\n  )\n\n  return reply.status(404).send(notFoundError.toJSON())\n}\n\n// Async error wrapper for route handlers\nexport function asyncHandler(fn: Function) {\n  return (request: any, reply: any) => {\n    return Promise.resolve(fn(request, reply)).catch((error) => {\n      throw error\n    })\n  }\n}"],"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","ignoreList":[]}