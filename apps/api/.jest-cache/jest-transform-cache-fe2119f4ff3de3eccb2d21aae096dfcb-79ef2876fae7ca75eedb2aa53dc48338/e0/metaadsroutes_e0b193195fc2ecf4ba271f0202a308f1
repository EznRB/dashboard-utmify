c5b3aad483da253d282ea0bf2d163ec9
/* istanbul ignore next */
function cov_21zn87rdzk() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\meta-ads.routes.ts";
  var hash = "9a6eb210a31cc2a204226f17f2aa1934552aeeb2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\meta-ads.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 7,
          column: 2
        }
      },
      "1": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "2": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 16,
          column: 2
        }
      },
      "3": {
        start: {
          line: 17,
          column: 29
        },
        end: {
          line: 19,
          column: 2
        }
      },
      "4": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 59,
          column: 8
        }
      },
      "5": {
        start: {
          line: 46,
          column: 21
        },
        end: {
          line: 46,
          column: 33
        }
      },
      "6": {
        start: {
          line: 47,
          column: 33
        },
        end: {
          line: 47,
          column: 45
        }
      },
      "7": {
        start: {
          line: 49,
          column: 22
        },
        end: {
          line: 49,
          column: 112
        }
      },
      "8": {
        start: {
          line: 50,
          column: 24
        },
        end: {
          line: 50,
          column: 239
        }
      },
      "9": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "10": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 108,
          column: 8
        }
      },
      "11": {
        start: {
          line: 77,
          column: 58
        },
        end: {
          line: 77,
          column: 71
        }
      },
      "12": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "13": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 81
        }
      },
      "14": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "15": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "16": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "17": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "18": {
        start: {
          line: 93,
          column: 30
        },
        end: {
          line: 93,
          column: 81
        }
      },
      "19": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 97
        }
      },
      "20": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 99,
          column: 14
        }
      },
      "21": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 72
        }
      },
      "22": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "23": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 158,
          column: 8
        }
      },
      "24": {
        start: {
          line: 127,
          column: 21
        },
        end: {
          line: 127,
          column: 33
        }
      },
      "25": {
        start: {
          line: 129,
          column: 29
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "26": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 157,
          column: 10
        }
      },
      "27": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 228,
          column: 8
        }
      },
      "28": {
        start: {
          line: 178,
          column: 21
        },
        end: {
          line: 178,
          column: 33
        }
      },
      "29": {
        start: {
          line: 179,
          column: 34
        },
        end: {
          line: 179,
          column: 47
        }
      },
      "30": {
        start: {
          line: 181,
          column: 30
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "31": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 227,
          column: 10
        }
      },
      "32": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 258,
          column: 8
        }
      },
      "33": {
        start: {
          line: 248,
          column: 21
        },
        end: {
          line: 248,
          column: 33
        }
      },
      "34": {
        start: {
          line: 249,
          column: 26
        },
        end: {
          line: 249,
          column: 38
        }
      },
      "35": {
        start: {
          line: 251,
          column: 23
        },
        end: {
          line: 251,
          column: 54
        }
      },
      "36": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 84
        }
      },
      "37": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 257,
          column: 10
        }
      },
      "38": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 298,
          column: 8
        }
      },
      "39": {
        start: {
          line: 285,
          column: 21
        },
        end: {
          line: 285,
          column: 33
        }
      },
      "40": {
        start: {
          line: 287,
          column: 27
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "41": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 297,
          column: 10
        }
      },
      "42": {
        start: {
          line: 300,
          column: 4
        },
        end: {
          line: 322,
          column: 8
        }
      },
      "43": {
        start: {
          line: 316,
          column: 21
        },
        end: {
          line: 316,
          column: 33
        }
      },
      "44": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 79
        }
      },
      "45": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 321,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "metaAdsRoutes",
        decl: {
          start: {
            line: 20,
            column: 22
          },
          end: {
            line: 20,
            column: 35
          }
        },
        loc: {
          start: {
            line: 20,
            column: 41
          },
          end: {
            line: 323,
            column: 1
          }
        },
        line: 20
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 45,
            column: 21
          }
        },
        loc: {
          start: {
            line: 45,
            column: 46
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 45
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 76,
            column: 20
          },
          end: {
            line: 76,
            column: 21
          }
        },
        loc: {
          start: {
            line: 76,
            column: 46
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 76
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 126,
            column: 20
          },
          end: {
            line: 126,
            column: 21
          }
        },
        loc: {
          start: {
            line: 126,
            column: 46
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 126
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 177,
            column: 20
          },
          end: {
            line: 177,
            column: 21
          }
        },
        loc: {
          start: {
            line: 177,
            column: 46
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 177
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 247,
            column: 20
          },
          end: {
            line: 247,
            column: 21
          }
        },
        loc: {
          start: {
            line: 247,
            column: 46
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 247
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 284,
            column: 21
          }
        },
        loc: {
          start: {
            line: 284,
            column: 46
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 284
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 315,
            column: 20
          },
          end: {
            line: 315,
            column: 21
          }
        },
        loc: {
          start: {
            line: 315,
            column: 46
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 315
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "1": {
        loc: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 82,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 82,
            column: 40
          }
        }, {
          start: {
            line: 82,
            column: 44
          },
          end: {
            line: 82,
            column: 49
          }
        }],
        line: 82
      },
      "2": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "3": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 85,
            column: 27
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 85,
            column: 17
          }
        }, {
          start: {
            line: 85,
            column: 21
          },
          end: {
            line: 85,
            column: 27
          }
        }],
        line: 85
      },
      "4": {
        loc: {
          start: {
            line: 255,
            column: 21
          },
          end: {
            line: 255,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 255,
            column: 29
          },
          end: {
            line: 255,
            column: 56
          }
        }, {
          start: {
            line: 255,
            column: 59
          },
          end: {
            line: 255,
            column: 98
          }
        }],
        line: 255
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\meta-ads.routes.ts",
      mappings: "AACA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAA;AACvB,OAAO,EAAE,WAAW,EAAE,MAAM,+BAA+B,CAAA;AAC3D,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAA;AAE9C,yBAAyB;AACzB,MAAM,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC;IACjC,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,sBAAsB,CAAC;CACrD,CAAC,CAAA;AAEF,MAAM,mBAAmB,GAAG,CAAC,CAAC,MAAM,CAAC;IACnC,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B,iBAAiB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACzC,CAAC,CAAA;AAEF,MAAM,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC;IACjC,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;CAC7C,CAAC,CAAA;AAEF,MAAM,oBAAoB,GAAG,CAAC,CAAC,MAAM,CAAC;IACpC,aAAa,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,2BAA2B,CAAC;CAC9D,CAAC,CAAA;AAEF,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,GAAoB;IACtD,4DAA4D;IAC5D,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;QAChB,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,sBAAsB,CAAC;YAC9B,OAAO,EAAE,8BAA8B;YACvC,IAAI,EAAE,iBAAiB;YACvB,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC3B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCACzB,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6BAC5B;yBACF;qBACF;iBACF;aACF;SACF;QACD,UAAU,EAAE,WAAW;KACxB,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACvC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACzB,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC,IAAyC,CAAA;QAE1E,6DAA6D;QAC7D,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;QACxG,MAAM,OAAO,GAAG,yDAAyD,OAAO,CAAC,GAAG,CAAC,WAAW,iBAAiB,kBAAkB,CAAC,YAAY,CAAC,+EAA+E,KAAK,EAAE,CAAA;QAEvO,OAAO;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE;gBACJ,OAAO;gBACP,KAAK;gBACL,OAAO,EAAE,qDAAqD;aAC/D;SACF,CAAA;IACH,CAAC,CAAC,CAAC,CAAA;IAEH,iEAAiE;IACjE,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE;QACnB,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,sBAAsB,CAAC;YAC9B,OAAO,EAAE,gCAAgC;YACzC,WAAW,EAAE,mBAAmB;YAChC,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;qBAC5B;iBACF;aACF;SACF;KACF,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACvC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,iBAAiB,EAAE,GAAG,OAAO,CAAC,KAA4C,CAAA;QAEtG,IAAI,KAAK,EAAE,CAAC;YACV,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,uBAAuB,EAAE,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAA;YACpE,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,iBAAiB,IAAI,KAAK;aAClC,CAAC,CAAA;QACJ,CAAC;QAED,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACpB,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,qCAAqC;aAC7C,CAAC,CAAA;QACJ,CAAC;QAED,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;YAErE,2DAA2D;YAC3D,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,kCAAkC,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,CAAA;YAEpF,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,6CAA6C;aACvD,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAA;YAC3D,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,0CAA0C;aAClD,CAAC,CAAA;QACJ,CAAC;IACH,CAAC,CAAC,CAAC,CAAA;IAEH,2DAA2D;IAC3D,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE;QACnB,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,sBAAsB,CAAC;YAC9B,OAAO,EAAE,8BAA8B;YACvC,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;wBACvB,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;qBAC1B;iBACF;aACF;SACF;QACD,UAAU,EAAE,WAAW;KACxB,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACvC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QAEzB,oDAAoD;QACpD,MAAM,YAAY,GAAG;YACnB;gBACE,EAAE,EAAE,eAAe;gBACnB,IAAI,EAAE,yBAAyB;gBAC/B,cAAc,EAAE,CAAC;gBACjB,QAAQ,EAAE,KAAK;gBACf,aAAa,EAAE,mBAAmB;gBAClC,QAAQ,EAAE;oBACR,EAAE,EAAE,WAAW;oBACf,IAAI,EAAE,eAAe;iBACtB;aACF;YACD;gBACE,EAAE,EAAE,eAAe;gBACnB,IAAI,EAAE,kBAAkB;gBACxB,cAAc,EAAE,CAAC;gBACjB,QAAQ,EAAE,KAAK;gBACf,aAAa,EAAE,mBAAmB;gBAClC,QAAQ,EAAE;oBACR,EAAE,EAAE,WAAW;oBACf,IAAI,EAAE,oBAAoB;iBAC3B;aACF;SACF,CAAA;QAED,OAAO;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,YAAY;YAClB,KAAK,EAAE,YAAY,CAAC,MAAM;SAC3B,CAAA;IACH,CAAC,CAAC,CAAC,CAAA;IAEH,0DAA0D;IAC1D,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE;QACpB,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,sBAAsB,CAAC;YAC9B,OAAO,EAAE,iCAAiC;YAC1C,WAAW,EAAE,oBAAoB;YACjC,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;wBACvB,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;qBAC1B;iBACF;aACF;SACF;QACD,UAAU,EAAE,WAAW;KACxB,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACvC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACzB,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC,KAA6C,CAAA;QAE/E,oDAAoD;QACpD,MAAM,aAAa,GAAG;YACpB;gBACE,EAAE,EAAE,mBAAmB;gBACvB,IAAI,EAAE,sCAAsC;gBAC5C,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,aAAa;gBACxB,YAAY,EAAE,0BAA0B;gBACxC,YAAY,EAAE,0BAA0B;gBACxC,UAAU,EAAE,0BAA0B;gBACtC,YAAY,EAAE,OAAO;gBACrB,UAAU,EAAE,aAAa;gBACzB,QAAQ,EAAE;oBACR,WAAW,EAAE,QAAQ;oBACrB,MAAM,EAAE,MAAM;oBACd,KAAK,EAAE,OAAO;oBACd,GAAG,EAAE,MAAM;oBACX,GAAG,EAAE,MAAM;oBACX,WAAW,EAAE,IAAI;oBACjB,mBAAmB,EAAE,MAAM;iBAC5B;aACF;YACD;gBACE,EAAE,EAAE,mBAAmB;gBACvB,IAAI,EAAE,sCAAsC;gBAC5C,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,aAAa;gBACxB,YAAY,EAAE,0BAA0B;gBACxC,YAAY,EAAE,0BAA0B;gBACxC,UAAU,EAAE,0BAA0B;gBACtC,YAAY,EAAE,MAAM;gBACpB,UAAU,EAAE,aAAa;gBACzB,QAAQ,EAAE;oBACR,WAAW,EAAE,OAAO;oBACpB,MAAM,EAAE,MAAM;oBACd,KAAK,EAAE,OAAO;oBACd,GAAG,EAAE,MAAM;oBACX,GAAG,EAAE,MAAM;oBACX,WAAW,EAAE,IAAI;oBACjB,mBAAmB,EAAE,MAAM;iBAC5B;aACF;SACF,CAAA;QAED,OAAO;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,aAAa;YACnB,KAAK,EAAE,aAAa,CAAC,MAAM;SAC5B,CAAA;IACH,CAAC,CAAC,CAAC,CAAA;IAEH,qDAAqD;IACrD,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;QAChB,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,sBAAsB,CAAC;YAC9B,OAAO,EAAE,uCAAuC;YAChD,IAAI,EAAE,iBAAiB;YACvB,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC3B,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;qBAC3B;iBACF;aACF;SACF;QACD,UAAU,EAAE,WAAW;KACxB,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACvC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACzB,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,IAAyC,CAAA;QAEnE,2BAA2B;QAC3B,MAAM,MAAM,GAAG,QAAQ,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,EAAE,EAAE,CAAA;QAE9C,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAA;QAE3E,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,uCAAuC;YACtF,MAAM;SACP,CAAA;IACH,CAAC,CAAC,CAAC,CAAA;IAEH,gEAAgE;IAChE,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE;QACjB,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,sBAAsB,CAAC;YAC9B,OAAO,EAAE,iCAAiC;YAC1C,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;gCAC9B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE;gCACjD,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE;gCACpD,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE;gCAClD,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6BAC3B;yBACF;qBACF;iBACF;aACF;SACF;QACD,UAAU,EAAE,WAAW;KACxB,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACvC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QAEzB,mDAAmD;QACnD,MAAM,UAAU,GAAG;YACjB,SAAS,EAAE,IAAI;YACf,QAAQ,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,iBAAiB;YAChF,WAAW,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,aAAa;YACxF,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,mBAAmB;YAC7F,MAAM,EAAE,QAAQ;SACjB,CAAA;QAED,OAAO;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,UAAU;SACjB,CAAA;IACH,CAAC,CAAC,CAAC,CAAA;IAEH,qEAAqE;IACrE,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE;QACtB,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,sBAAsB,CAAC;YAC9B,OAAO,EAAE,iCAAiC;YAC1C,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;qBAC5B;iBACF;aACF;SACF;QACD,UAAU,EAAE,WAAW;KACxB,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACvC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QAEzB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,mCAAmC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;QAEtE,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,gDAAgD;SAC1D,CAAA;IACH,CAAC,CAAC,CAAC,CAAA;AACL,CAAC",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\meta-ads.routes.ts"],
      sourcesContent: ["import type { FastifyInstance } from 'fastify'\nimport { z } from 'zod'\nimport { requireAuth } from '../middleware/auth.middleware'\nimport { asyncHandler } from '../utils/errors'\n\n// Schemas for validation\nconst AuthRequestSchema = z.object({\n  redirect_uri: z.string().url('Invalid redirect URI'),\n})\n\nconst CallbackQuerySchema = z.object({\n  code: z.string().optional(),\n  state: z.string().optional(),\n  error: z.string().optional(),\n  error_description: z.string().optional(),\n})\n\nconst SyncRequestSchema = z.object({\n  force: z.boolean().optional().default(false),\n})\n\nconst CampaignsQuerySchema = z.object({\n  ad_account_id: z.string().min(1, 'Ad account ID is required'),\n})\n\nexport async function metaAdsRoutes(app: FastifyInstance) {\n  // POST /api/v1/integrations/meta/auth - Initiate OAuth flow\n  app.post('/auth', {\n    schema: {\n      tags: ['Meta Ads Integration'],\n      summary: 'Initiate Meta Ads OAuth flow',\n      body: AuthRequestSchema,\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                authUrl: { type: 'string' },\n                state: { type: 'string' },\n                message: { type: 'string' },\n              },\n            },\n          },\n        },\n      },\n    },\n    preHandler: requireAuth,\n  }, asyncHandler(async (request, reply) => {\n    const user = request.user\n    const { redirect_uri } = request.body as z.infer<typeof AuthRequestSchema>\n\n    // Mock implementation - replace with actual Meta Ads service\n    const state = Buffer.from(JSON.stringify({ userId: user.id, timestamp: Date.now() })).toString('base64')\n    const authUrl = `https://www.facebook.com/v18.0/dialog/oauth?client_id=${process.env.META_APP_ID}&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=ads_management,ads_read,business_management&response_type=code&state=${state}`\n\n    return {\n      success: true,\n      data: {\n        authUrl,\n        state,\n        message: 'Redirect user to this URL to complete authorization',\n      },\n    }\n  }))\n\n  // GET /api/v1/integrations/meta/callback - Handle OAuth callback\n  app.get('/callback', {\n    schema: {\n      tags: ['Meta Ads Integration'],\n      summary: 'Handle Meta Ads OAuth callback',\n      querystring: CallbackQuerySchema,\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            message: { type: 'string' },\n          },\n        },\n      },\n    },\n  }, asyncHandler(async (request, reply) => {\n    const { code, state, error, error_description } = request.query as z.infer<typeof CallbackQuerySchema>\n\n    if (error) {\n      app.log.error('Meta Ads OAuth error:', { error, error_description })\n      return reply.code(400).send({\n        success: false,\n        error: error_description || error,\n      })\n    }\n\n    if (!code || !state) {\n      return reply.code(400).send({\n        success: false,\n        error: 'Missing authorization code or state',\n      })\n    }\n\n    try {\n      // Decode state to get user info\n      const stateData = JSON.parse(Buffer.from(state, 'base64').toString())\n      \n      // Mock implementation - replace with actual token exchange\n      app.log.info('Meta Ads OAuth callback received', { code, userId: stateData.userId })\n      \n      return {\n        success: true,\n        message: 'Meta Ads integration completed successfully',\n      }\n    } catch (error) {\n      app.log.error('Failed to process Meta Ads callback', error)\n      return reply.code(500).send({\n        success: false,\n        error: 'Failed to process authorization callback',\n      })\n    }\n  }))\n\n  // GET /api/v1/integrations/meta/accounts - Get ad accounts\n  app.get('/accounts', {\n    schema: {\n      tags: ['Meta Ads Integration'],\n      summary: 'Get user\\'s Meta ad accounts',\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: { type: 'array' },\n            count: { type: 'number' },\n          },\n        },\n      },\n    },\n    preHandler: requireAuth,\n  }, asyncHandler(async (request, reply) => {\n    const user = request.user\n\n    // Mock data - replace with actual Meta Ads API call\n    const mockAccounts = [\n      {\n        id: 'act_123456789',\n        name: 'Minha Conta de An\xFAncios',\n        account_status: 1,\n        currency: 'BRL',\n        timezone_name: 'America/Sao_Paulo',\n        business: {\n          id: '123456789',\n          name: 'Minha Empresa',\n        },\n      },\n      {\n        id: 'act_987654321',\n        name: 'Conta Secund\xE1ria',\n        account_status: 1,\n        currency: 'BRL',\n        timezone_name: 'America/Sao_Paulo',\n        business: {\n          id: '987654321',\n          name: 'Empresa Secund\xE1ria',\n        },\n      },\n    ]\n\n    return {\n      success: true,\n      data: mockAccounts,\n      count: mockAccounts.length,\n    }\n  }))\n\n  // GET /api/v1/integrations/meta/campaigns - Get campaigns\n  app.get('/campaigns', {\n    schema: {\n      tags: ['Meta Ads Integration'],\n      summary: 'Get campaigns for an ad account',\n      querystring: CampaignsQuerySchema,\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: { type: 'array' },\n            count: { type: 'number' },\n          },\n        },\n      },\n    },\n    preHandler: requireAuth,\n  }, asyncHandler(async (request, reply) => {\n    const user = request.user\n    const { ad_account_id } = request.query as z.infer<typeof CampaignsQuerySchema>\n\n    // Mock data - replace with actual Meta Ads API call\n    const mockCampaigns = [\n      {\n        id: '23847110158250637',\n        name: 'Campanha de Convers\xE3o - Black Friday',\n        status: 'ACTIVE',\n        objective: 'CONVERSIONS',\n        created_time: '2024-01-15T10:30:00+0000',\n        updated_time: '2024-01-20T14:22:00+0000',\n        start_time: '2024-01-15T10:30:00+0000',\n        daily_budget: '10000',\n        account_id: ad_account_id,\n        insights: {\n          impressions: '125430',\n          clicks: '3247',\n          spend: '89.47',\n          ctr: '2.59',\n          cpc: '0.28',\n          conversions: '47',\n          cost_per_conversion: '1.90',\n        },\n      },\n      {\n        id: '23847110158250638',\n        name: 'Campanha de Tr\xE1fego - Produtos Novos',\n        status: 'ACTIVE',\n        objective: 'LINK_CLICKS',\n        created_time: '2024-01-10T08:15:00+0000',\n        updated_time: '2024-01-20T16:45:00+0000',\n        start_time: '2024-01-10T08:15:00+0000',\n        daily_budget: '5000',\n        account_id: ad_account_id,\n        insights: {\n          impressions: '89234',\n          clicks: '2156',\n          spend: '45.23',\n          ctr: '2.42',\n          cpc: '0.21',\n          conversions: '23',\n          cost_per_conversion: '1.97',\n        },\n      },\n    ]\n\n    return {\n      success: true,\n      data: mockCampaigns,\n      count: mockCampaigns.length,\n    }\n  }))\n\n  // POST /api/v1/integrations/meta/sync - Trigger sync\n  app.post('/sync', {\n    schema: {\n      tags: ['Meta Ads Integration'],\n      summary: 'Trigger Meta Ads data synchronization',\n      body: SyncRequestSchema,\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            message: { type: 'string' },\n            syncId: { type: 'string' },\n          },\n        },\n      },\n    },\n    preHandler: requireAuth,\n  }, asyncHandler(async (request, reply) => {\n    const user = request.user\n    const { force } = request.body as z.infer<typeof SyncRequestSchema>\n\n    // Mock sync implementation\n    const syncId = `sync_${Date.now()}_${user.id}`\n    \n    app.log.info('Meta Ads sync triggered', { userId: user.id, force, syncId })\n\n    return {\n      success: true,\n      message: force ? 'Synchronization completed' : 'Synchronization started in background',\n      syncId,\n    }\n  }))\n\n  // GET /api/v1/integrations/meta/status - Get integration status\n  app.get('/status', {\n    schema: {\n      tags: ['Meta Ads Integration'],\n      summary: 'Get Meta Ads integration status',\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                connected: { type: 'boolean' },\n                lastSync: { type: 'string', format: 'date-time' },\n                connectedAt: { type: 'string', format: 'date-time' },\n                expiresAt: { type: 'string', format: 'date-time' },\n                status: { type: 'string' },\n              },\n            },\n          },\n        },\n      },\n    },\n    preHandler: requireAuth,\n  }, asyncHandler(async (request, reply) => {\n    const user = request.user\n\n    // Mock status - replace with actual database query\n    const mockStatus = {\n      connected: true,\n      lastSync: new Date(Date.now() - 15 * 60 * 1000).toISOString(), // 15 minutes ago\n      connectedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n      expiresAt: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString(), // 60 days from now\n      status: 'active',\n    }\n\n    return {\n      success: true,\n      data: mockStatus,\n    }\n  }))\n\n  // POST /api/v1/integrations/meta/disconnect - Disconnect integration\n  app.post('/disconnect', {\n    schema: {\n      tags: ['Meta Ads Integration'],\n      summary: 'Disconnect Meta Ads integration',\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            message: { type: 'string' },\n          },\n        },\n      },\n    },\n    preHandler: requireAuth,\n  }, asyncHandler(async (request, reply) => {\n    const user = request.user\n\n    app.log.info('Meta Ads integration disconnected', { userId: user.id })\n\n    return {\n      success: true,\n      message: 'Meta Ads integration disconnected successfully',\n    }\n  }))\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9a6eb210a31cc2a204226f17f2aa1934552aeeb2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_21zn87rdzk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_21zn87rdzk();
import { z } from 'zod';
import { requireAuth } from '../middleware/auth.middleware';
import { asyncHandler } from '../utils/errors';
// Schemas for validation
const AuthRequestSchema =
/* istanbul ignore next */
(cov_21zn87rdzk().s[0]++, z.object({
  redirect_uri: z.string().url('Invalid redirect URI')
}));
const CallbackQuerySchema =
/* istanbul ignore next */
(cov_21zn87rdzk().s[1]++, z.object({
  code: z.string().optional(),
  state: z.string().optional(),
  error: z.string().optional(),
  error_description: z.string().optional()
}));
const SyncRequestSchema =
/* istanbul ignore next */
(cov_21zn87rdzk().s[2]++, z.object({
  force: z.boolean().optional().default(false)
}));
const CampaignsQuerySchema =
/* istanbul ignore next */
(cov_21zn87rdzk().s[3]++, z.object({
  ad_account_id: z.string().min(1, 'Ad account ID is required')
}));
export async function metaAdsRoutes(app) {
  /* istanbul ignore next */
  cov_21zn87rdzk().f[0]++;
  cov_21zn87rdzk().s[4]++;
  // POST /api/v1/integrations/meta/auth - Initiate OAuth flow
  app.post('/auth', {
    schema: {
      tags: ['Meta Ads Integration'],
      summary: 'Initiate Meta Ads OAuth flow',
      body: AuthRequestSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                authUrl: {
                  type: 'string'
                },
                state: {
                  type: 'string'
                },
                message: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    },
    preHandler: requireAuth
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_21zn87rdzk().f[1]++;
    const user =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[5]++, request.user);
    const {
      redirect_uri
    } =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[6]++, request.body);
    // Mock implementation - replace with actual Meta Ads service
    const state =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[7]++, Buffer.from(JSON.stringify({
      userId: user.id,
      timestamp: Date.now()
    })).toString('base64'));
    const authUrl =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[8]++, `https://www.facebook.com/v18.0/dialog/oauth?client_id=${process.env.META_APP_ID}&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=ads_management,ads_read,business_management&response_type=code&state=${state}`);
    /* istanbul ignore next */
    cov_21zn87rdzk().s[9]++;
    return {
      success: true,
      data: {
        authUrl,
        state,
        message: 'Redirect user to this URL to complete authorization'
      }
    };
  }));
  // GET /api/v1/integrations/meta/callback - Handle OAuth callback
  /* istanbul ignore next */
  cov_21zn87rdzk().s[10]++;
  app.get('/callback', {
    schema: {
      tags: ['Meta Ads Integration'],
      summary: 'Handle Meta Ads OAuth callback',
      querystring: CallbackQuerySchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            message: {
              type: 'string'
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_21zn87rdzk().f[2]++;
    const {
      code,
      state,
      error,
      error_description
    } =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[11]++, request.query);
    /* istanbul ignore next */
    cov_21zn87rdzk().s[12]++;
    if (error) {
      /* istanbul ignore next */
      cov_21zn87rdzk().b[0][0]++;
      cov_21zn87rdzk().s[13]++;
      app.log.error('Meta Ads OAuth error:', {
        error,
        error_description
      });
      /* istanbul ignore next */
      cov_21zn87rdzk().s[14]++;
      return reply.code(400).send({
        success: false,
        error:
        /* istanbul ignore next */
        (cov_21zn87rdzk().b[1][0]++, error_description) ||
        /* istanbul ignore next */
        (cov_21zn87rdzk().b[1][1]++, error)
      });
    } else
    /* istanbul ignore next */
    {
      cov_21zn87rdzk().b[0][1]++;
    }
    cov_21zn87rdzk().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_21zn87rdzk().b[3][0]++, !code) ||
    /* istanbul ignore next */
    (cov_21zn87rdzk().b[3][1]++, !state)) {
      /* istanbul ignore next */
      cov_21zn87rdzk().b[2][0]++;
      cov_21zn87rdzk().s[16]++;
      return reply.code(400).send({
        success: false,
        error: 'Missing authorization code or state'
      });
    } else
    /* istanbul ignore next */
    {
      cov_21zn87rdzk().b[2][1]++;
    }
    cov_21zn87rdzk().s[17]++;
    try {
      // Decode state to get user info
      const stateData =
      /* istanbul ignore next */
      (cov_21zn87rdzk().s[18]++, JSON.parse(Buffer.from(state, 'base64').toString()));
      // Mock implementation - replace with actual token exchange
      /* istanbul ignore next */
      cov_21zn87rdzk().s[19]++;
      app.log.info('Meta Ads OAuth callback received', {
        code,
        userId: stateData.userId
      });
      /* istanbul ignore next */
      cov_21zn87rdzk().s[20]++;
      return {
        success: true,
        message: 'Meta Ads integration completed successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_21zn87rdzk().s[21]++;
      app.log.error('Failed to process Meta Ads callback', error);
      /* istanbul ignore next */
      cov_21zn87rdzk().s[22]++;
      return reply.code(500).send({
        success: false,
        error: 'Failed to process authorization callback'
      });
    }
  }));
  // GET /api/v1/integrations/meta/accounts - Get ad accounts
  /* istanbul ignore next */
  cov_21zn87rdzk().s[23]++;
  app.get('/accounts', {
    schema: {
      tags: ['Meta Ads Integration'],
      summary: 'Get user\'s Meta ad accounts',
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array'
            },
            count: {
              type: 'number'
            }
          }
        }
      }
    },
    preHandler: requireAuth
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_21zn87rdzk().f[3]++;
    const user =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[24]++, request.user);
    // Mock data - replace with actual Meta Ads API call
    const mockAccounts =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[25]++, [{
      id: 'act_123456789',
      name: 'Minha Conta de Anúncios',
      account_status: 1,
      currency: 'BRL',
      timezone_name: 'America/Sao_Paulo',
      business: {
        id: '123456789',
        name: 'Minha Empresa'
      }
    }, {
      id: 'act_987654321',
      name: 'Conta Secundária',
      account_status: 1,
      currency: 'BRL',
      timezone_name: 'America/Sao_Paulo',
      business: {
        id: '987654321',
        name: 'Empresa Secundária'
      }
    }]);
    /* istanbul ignore next */
    cov_21zn87rdzk().s[26]++;
    return {
      success: true,
      data: mockAccounts,
      count: mockAccounts.length
    };
  }));
  // GET /api/v1/integrations/meta/campaigns - Get campaigns
  /* istanbul ignore next */
  cov_21zn87rdzk().s[27]++;
  app.get('/campaigns', {
    schema: {
      tags: ['Meta Ads Integration'],
      summary: 'Get campaigns for an ad account',
      querystring: CampaignsQuerySchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array'
            },
            count: {
              type: 'number'
            }
          }
        }
      }
    },
    preHandler: requireAuth
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_21zn87rdzk().f[4]++;
    const user =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[28]++, request.user);
    const {
      ad_account_id
    } =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[29]++, request.query);
    // Mock data - replace with actual Meta Ads API call
    const mockCampaigns =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[30]++, [{
      id: '23847110158250637',
      name: 'Campanha de Conversão - Black Friday',
      status: 'ACTIVE',
      objective: 'CONVERSIONS',
      created_time: '2024-01-15T10:30:00+0000',
      updated_time: '2024-01-20T14:22:00+0000',
      start_time: '2024-01-15T10:30:00+0000',
      daily_budget: '10000',
      account_id: ad_account_id,
      insights: {
        impressions: '125430',
        clicks: '3247',
        spend: '89.47',
        ctr: '2.59',
        cpc: '0.28',
        conversions: '47',
        cost_per_conversion: '1.90'
      }
    }, {
      id: '23847110158250638',
      name: 'Campanha de Tráfego - Produtos Novos',
      status: 'ACTIVE',
      objective: 'LINK_CLICKS',
      created_time: '2024-01-10T08:15:00+0000',
      updated_time: '2024-01-20T16:45:00+0000',
      start_time: '2024-01-10T08:15:00+0000',
      daily_budget: '5000',
      account_id: ad_account_id,
      insights: {
        impressions: '89234',
        clicks: '2156',
        spend: '45.23',
        ctr: '2.42',
        cpc: '0.21',
        conversions: '23',
        cost_per_conversion: '1.97'
      }
    }]);
    /* istanbul ignore next */
    cov_21zn87rdzk().s[31]++;
    return {
      success: true,
      data: mockCampaigns,
      count: mockCampaigns.length
    };
  }));
  // POST /api/v1/integrations/meta/sync - Trigger sync
  /* istanbul ignore next */
  cov_21zn87rdzk().s[32]++;
  app.post('/sync', {
    schema: {
      tags: ['Meta Ads Integration'],
      summary: 'Trigger Meta Ads data synchronization',
      body: SyncRequestSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            message: {
              type: 'string'
            },
            syncId: {
              type: 'string'
            }
          }
        }
      }
    },
    preHandler: requireAuth
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_21zn87rdzk().f[5]++;
    const user =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[33]++, request.user);
    const {
      force
    } =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[34]++, request.body);
    // Mock sync implementation
    const syncId =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[35]++, `sync_${Date.now()}_${user.id}`);
    /* istanbul ignore next */
    cov_21zn87rdzk().s[36]++;
    app.log.info('Meta Ads sync triggered', {
      userId: user.id,
      force,
      syncId
    });
    /* istanbul ignore next */
    cov_21zn87rdzk().s[37]++;
    return {
      success: true,
      message: force ?
      /* istanbul ignore next */
      (cov_21zn87rdzk().b[4][0]++, 'Synchronization completed') :
      /* istanbul ignore next */
      (cov_21zn87rdzk().b[4][1]++, 'Synchronization started in background'),
      syncId
    };
  }));
  // GET /api/v1/integrations/meta/status - Get integration status
  /* istanbul ignore next */
  cov_21zn87rdzk().s[38]++;
  app.get('/status', {
    schema: {
      tags: ['Meta Ads Integration'],
      summary: 'Get Meta Ads integration status',
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                connected: {
                  type: 'boolean'
                },
                lastSync: {
                  type: 'string',
                  format: 'date-time'
                },
                connectedAt: {
                  type: 'string',
                  format: 'date-time'
                },
                expiresAt: {
                  type: 'string',
                  format: 'date-time'
                },
                status: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    },
    preHandler: requireAuth
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_21zn87rdzk().f[6]++;
    const user =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[39]++, request.user);
    // Mock status - replace with actual database query
    const mockStatus =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[40]++, {
      connected: true,
      lastSync: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
      // 15 minutes ago
      connectedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
      // 7 days ago
      expiresAt: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString(),
      // 60 days from now
      status: 'active'
    });
    /* istanbul ignore next */
    cov_21zn87rdzk().s[41]++;
    return {
      success: true,
      data: mockStatus
    };
  }));
  // POST /api/v1/integrations/meta/disconnect - Disconnect integration
  /* istanbul ignore next */
  cov_21zn87rdzk().s[42]++;
  app.post('/disconnect', {
    schema: {
      tags: ['Meta Ads Integration'],
      summary: 'Disconnect Meta Ads integration',
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            message: {
              type: 'string'
            }
          }
        }
      }
    },
    preHandler: requireAuth
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_21zn87rdzk().f[7]++;
    const user =
    /* istanbul ignore next */
    (cov_21zn87rdzk().s[43]++, request.user);
    /* istanbul ignore next */
    cov_21zn87rdzk().s[44]++;
    app.log.info('Meta Ads integration disconnected', {
      userId: user.id
    });
    /* istanbul ignore next */
    cov_21zn87rdzk().s[45]++;
    return {
      success: true,
      message: 'Meta Ads integration disconnected successfully'
    };
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,