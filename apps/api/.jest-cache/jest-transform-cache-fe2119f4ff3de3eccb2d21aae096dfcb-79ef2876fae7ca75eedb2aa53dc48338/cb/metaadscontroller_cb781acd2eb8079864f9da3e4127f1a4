4ee4b8876749c681aabbbe385da1b88e
/* istanbul ignore next */
function cov_1x8hkok9l7() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\meta-ads.controller.ts";
  var hash = "4d458e03bf62d59513f23077f6caee11f5851934";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\meta-ads.controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "14": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 73
        }
      },
      "15": {
        start: {
          line: 11,
          column: 36
        },
        end: {
          line: 11,
          column: 71
        }
      },
      "16": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 226,
          column: 1
        }
      },
      "17": {
        start: {
          line: 23,
          column: 13
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "18": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "19": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "20": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "21": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 74
        }
      },
      "22": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "23": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 43
        }
      },
      "24": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 77
        }
      },
      "25": {
        start: {
          line: 39,
          column: 28
        },
        end: {
          line: 39,
          column: 91
        }
      },
      "26": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 71
        }
      },
      "27": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 47,
          column: 14
        }
      },
      "28": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 65
        }
      },
      "29": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 24
        }
      },
      "30": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "31": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "32": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 94
        }
      },
      "33": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 63,
          column: 19
        }
      },
      "34": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "35": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 85
        }
      },
      "36": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "37": {
        start: {
          line: 71,
          column: 39
        },
        end: {
          line: 71,
          column: 96
        }
      },
      "38": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 55
        }
      },
      "39": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 73
        }
      },
      "40": {
        start: {
          line: 78,
          column: 29
        },
        end: {
          line: 78,
          column: 61
        }
      },
      "41": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "42": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 73
        }
      },
      "43": {
        start: {
          line: 83,
          column: 32
        },
        end: {
          line: 83,
          column: 88
        }
      },
      "44": {
        start: {
          line: 84,
          column: 37
        },
        end: {
          line: 84,
          column: 108
        }
      },
      "45": {
        start: {
          line: 86,
          column: 36
        },
        end: {
          line: 86,
          column: 110
        }
      },
      "46": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 85
        }
      },
      "47": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "48": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 93
        }
      },
      "49": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 89
        }
      },
      "50": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 94
        }
      },
      "51": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 62
        }
      },
      "52": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 124
        }
      },
      "53": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "54": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 104,
          column: 77
        }
      },
      "55": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "56": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 88
        }
      },
      "57": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 24
        }
      },
      "58": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "59": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "60": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 91
        }
      },
      "61": {
        start: {
          line: 121,
          column: 30
        },
        end: {
          line: 121,
          column: 90
        }
      },
      "62": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "63": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 86
        }
      },
      "64": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 24
        }
      },
      "65": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "66": {
        start: {
          line: 136,
          column: 32
        },
        end: {
          line: 136,
          column: 73
        }
      },
      "67": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "68": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 34
        }
      },
      "69": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 143,
          column: 18
        }
      },
      "70": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 149,
          column: 19
        }
      },
      "71": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 91
        }
      },
      "72": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 153,
          column: 18
        }
      },
      "73": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 72
        }
      },
      "74": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 24
        }
      },
      "75": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "76": {
        start: {
          line: 164,
          column: 32
        },
        end: {
          line: 177,
          column: 14
        }
      },
      "77": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "78": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 185,
          column: 18
        }
      },
      "79": {
        start: {
          line: 187,
          column: 30
        },
        end: {
          line: 187,
          column: 89
        }
      },
      "80": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 197,
          column: 14
        }
      },
      "81": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 93
        }
      },
      "82": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 24
        }
      },
      "83": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "84": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "85": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 85
        }
      },
      "86": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 219,
          column: 14
        }
      },
      "87": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 93
        }
      },
      "88": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 24
        }
      },
      "89": {
        start: {
          line: 227,
          column: 0
        },
        end: {
          line: 239,
          column: 54
        }
      },
      "90": {
        start: {
          line: 240,
          column: 0
        },
        end: {
          line: 250,
          column: 56
        }
      },
      "91": {
        start: {
          line: 251,
          column: 0
        },
        end: {
          line: 262,
          column: 55
        }
      },
      "92": {
        start: {
          line: 263,
          column: 0
        },
        end: {
          line: 275,
          column: 54
        }
      },
      "93": {
        start: {
          line: 276,
          column: 0
        },
        end: {
          line: 288,
          column: 50
        }
      },
      "94": {
        start: {
          line: 289,
          column: 0
        },
        end: {
          line: 299,
          column: 62
        }
      },
      "95": {
        start: {
          line: 300,
          column: 0
        },
        end: {
          line: 310,
          column: 63
        }
      },
      "96": {
        start: {
          line: 311,
          column: 0
        },
        end: {
          line: 315,
          column: 22
        }
      },
      "97": {
        start: {
          line: 317,
          column: 28
        },
        end: {
          line: 355,
          column: 1
        }
      },
      "98": {
        start: {
          line: 319,
          column: 13
        },
        end: {
          line: 319,
          column: 53
        }
      },
      "99": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 45
        }
      },
      "100": {
        start: {
          line: 324,
          column: 30
        },
        end: {
          line: 324,
          column: 67
        }
      },
      "101": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "102": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 66
        }
      },
      "103": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 29
        }
      },
      "104": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 66
        }
      },
      "105": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 75
        }
      },
      "106": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "107": {
        start: {
          line: 337,
          column: 28
        },
        end: {
          line: 337,
          column: 48
        }
      },
      "108": {
        start: {
          line: 338,
          column: 28
        },
        end: {
          line: 338,
          column: 90
        }
      },
      "109": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "110": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 63
        }
      },
      "111": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 77
        }
      },
      "112": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "113": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 345,
          column: 69
        }
      },
      "114": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 86
        }
      },
      "115": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 37
        }
      },
      "116": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 66
        }
      },
      "117": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 24
        }
      },
      "118": {
        start: {
          line: 356,
          column: 0
        },
        end: {
          line: 366,
          column: 59
        }
      },
      "119": {
        start: {
          line: 367,
          column: 0
        },
        end: {
          line: 377,
          column: 60
        }
      },
      "120": {
        start: {
          line: 378,
          column: 0
        },
        end: {
          line: 382,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 10,
            column: 41
          }
        },
        loc: {
          start: {
            line: 10,
            column: 73
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 10
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 11,
            column: 11
          },
          end: {
            line: 11,
            column: 12
          }
        },
        loc: {
          start: {
            line: 11,
            column: 34
          },
          end: {
            line: 11,
            column: 73
          }
        },
        line: 11
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 32
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 54
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 90,
            column: 69
          },
          end: {
            line: 90,
            column: 70
          }
        },
        loc: {
          start: {
            line: 90,
            column: 80
          },
          end: {
            line: 92,
            column: 13
          }
        },
        line: 90
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 30
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 102
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 42
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 116
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 31
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 133
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 147,
            column: 34
          },
          end: {
            line: 147,
            column: 35
          }
        },
        loc: {
          start: {
            line: 147,
            column: 45
          },
          end: {
            line: 149,
            column: 17
          }
        },
        line: 147
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 37
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 161
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 38
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 204
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 32
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 320
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 48
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 323
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 47
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 334
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 10,
            column: 14
          },
          end: {
            line: 12,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 19
          }
        }, {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 35
          }
        }, {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 10
      },
      "14": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "15": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "16": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "17": {
        loc: {
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 65,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 65,
            column: 27
          }
        }, {
          start: {
            line: 65,
            column: 31
          },
          end: {
            line: 65,
            column: 43
          }
        }],
        line: 65
      },
      "18": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "19": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "20": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: 145,
            column: 17
          },
          end: {
            line: 154,
            column: 13
          }
        }],
        line: 137
      },
      "21": {
        loc: {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "22": {
        loc: {
          start: {
            line: 187,
            column: 30
          },
          end: {
            line: 187,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 30
          },
          end: {
            line: 187,
            column: 51
          }
        }, {
          start: {
            line: 187,
            column: 55
          },
          end: {
            line: 187,
            column: 89
          }
        }],
        line: 187
      },
      "23": {
        loc: {
          start: {
            line: 191,
            column: 31
          },
          end: {
            line: 191,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 31
          },
          end: {
            line: 191,
            column: 51
          }
        }, {
          start: {
            line: 191,
            column: 55
          },
          end: {
            line: 191,
            column: 65
          }
        }],
        line: 191
      },
      "24": {
        loc: {
          start: {
            line: 195,
            column: 28
          },
          end: {
            line: 195,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 40
          },
          end: {
            line: 195,
            column: 49
          }
        }, {
          start: {
            line: 195,
            column: 52
          },
          end: {
            line: 195,
            column: 96
          }
        }],
        line: 195
      },
      "25": {
        loc: {
          start: {
            line: 195,
            column: 52
          },
          end: {
            line: 195,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 75
          },
          end: {
            line: 195,
            column: 83
          }
        }, {
          start: {
            line: 195,
            column: 86
          },
          end: {
            line: 195,
            column: 96
          }
        }],
        line: 195
      },
      "26": {
        loc: {
          start: {
            line: 248,
            column: 45
          },
          end: {
            line: 248,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 120
          },
          end: {
            line: 248,
            column: 122
          }
        }, {
          start: {
            line: 248,
            column: 125
          },
          end: {
            line: 248,
            column: 131
          }
        }],
        line: 248
      },
      "27": {
        loc: {
          start: {
            line: 248,
            column: 58
          },
          end: {
            line: 248,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 58
          },
          end: {
            line: 248,
            column: 89
          }
        }, {
          start: {
            line: 248,
            column: 93
          },
          end: {
            line: 248,
            column: 101
          }
        }],
        line: 248
      },
      "28": {
        loc: {
          start: {
            line: 314,
            column: 37
          },
          end: {
            line: 314,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 314,
            column: 124
          },
          end: {
            line: 314,
            column: 126
          }
        }, {
          start: {
            line: 314,
            column: 129
          },
          end: {
            line: 314,
            column: 135
          }
        }],
        line: 314
      },
      "29": {
        loc: {
          start: {
            line: 314,
            column: 50
          },
          end: {
            line: 314,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 314,
            column: 50
          },
          end: {
            line: 314,
            column: 87
          }
        }, {
          start: {
            line: 314,
            column: 91
          },
          end: {
            line: 314,
            column: 105
          }
        }],
        line: 314
      },
      "30": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: 329,
            column: 13
          },
          end: {
            line: 332,
            column: 9
          }
        }],
        line: 325
      },
      "31": {
        loc: {
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 325,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 325,
            column: 32
          }
        }, {
          start: {
            line: 325,
            column: 36
          },
          end: {
            line: 325,
            column: 65
          }
        }],
        line: 325
      },
      "32": {
        loc: {
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "33": {
        loc: {
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "34": {
        loc: {
          start: {
            line: 375,
            column: 53
          },
          end: {
            line: 375,
            column: 137
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 375,
            column: 126
          },
          end: {
            line: 375,
            column: 128
          }
        }, {
          start: {
            line: 375,
            column: 131
          },
          end: {
            line: 375,
            column: 137
          }
        }],
        line: 375
      },
      "35": {
        loc: {
          start: {
            line: 375,
            column: 66
          },
          end: {
            line: 375,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 66
          },
          end: {
            line: 375,
            column: 96
          }
        }, {
          start: {
            line: 375,
            column: 100
          },
          end: {
            line: 375,
            column: 107
          }
        }],
        line: 375
      },
      "36": {
        loc: {
          start: {
            line: 381,
            column: 37
          },
          end: {
            line: 381,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 381,
            column: 124
          },
          end: {
            line: 381,
            column: 126
          }
        }, {
          start: {
            line: 381,
            column: 129
          },
          end: {
            line: 381,
            column: 135
          }
        }],
        line: 381
      },
      "37": {
        loc: {
          start: {
            line: 381,
            column: 50
          },
          end: {
            line: 381,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 50
          },
          end: {
            line: 381,
            column: 87
          }
        }, {
          start: {
            line: 381,
            column: 91
          },
          end: {
            line: 381,
            column: 105
          }
        }],
        line: 381
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\meta-ads.controller.ts",
      mappings: ";;;;;;;;;;;;;;AAAA,OAAO,EACL,UAAU,EACV,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,GAAG,EACH,GAAG,EACH,OAAO,EACP,UAAU,EACV,SAAS,EACT,MAAM,EACN,mBAAmB,EACnB,qBAAqB,GACtB,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAC;AAC9D,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,OAAO,EAAE,MAAM,kCAAkC,CAAC;AAC3D,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAoC7E,IAAM,iBAAiB,yBAAvB,MAAM,iBAAiB;IAGC;IAFZ,MAAM,GAAG,IAAI,MAAM,CAAC,mBAAiB,CAAC,IAAI,CAAC,CAAC;IAE7D,YAA6B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAQzD,AAAN,KAAK,CAAC,YAAY,CACL,IAAc,EACjB,IAAkB;QAE1B,IAAI,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACvB,MAAM,IAAI,mBAAmB,CAAC,0BAA0B,CAAC,CAAC;YAC5D,CAAC;YAED,+BAA+B;YAC/B,IAAI,CAAC;gBACH,IAAI,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7B,CAAC;YAAC,MAAM,CAAC;gBACP,MAAM,IAAI,mBAAmB,CAAC,6BAA6B,CAAC,CAAC;YAC/D,CAAC;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAEhF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,gCAAgC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAE3D,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,OAAO;oBACP,OAAO,EAAE,qDAAqD;iBAC/D;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YACrD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAMK,AAAN,KAAK,CAAC,cAAc,CACT,KAAuB,EACzB,GAAa;QAEpB,IAAI,CAAC;YACH,sBAAsB;YACtB,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;gBAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,KAAK,CAAC,KAAK,MAAM,KAAK,CAAC,iBAAiB,EAAE,CAAC,CAAC;gBAC9E,OAAO,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;oBAC7C,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,KAAK,CAAC,KAAK;oBAClB,iBAAiB,EAAE,KAAK,CAAC,iBAAiB;iBAC3C,CAAC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBAChC,MAAM,IAAI,mBAAmB,CAAC,qCAAqC,CAAC,CAAC;YACvE,CAAC;YAED,6BAA6B;YAC7B,IAAI,SAAgD,CAAC;YACrD,IAAI,CAAC;gBACH,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACjF,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACzC,CAAC;YAAC,MAAM,CAAC;gBACP,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,CAAC,CAAC;YAC3D,CAAC;YAED,+CAA+C;YAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC;YAClD,IAAI,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,CAAC;gBAC9B,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,CAAC,CAAC;YAC3D,CAAC;YAED,2BAA2B;YAC3B,MAAM,WAAW,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,6BAA6B,CAAC;YAC7E,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,oBAAoB,CACrE,KAAK,CAAC,IAAI,EACV,WAAW,CACZ,CAAC;YAEF,uBAAuB;YACvB,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CACjE,gBAAgB,CAAC,YAAY,CAC9B,CAAC;YAEF,eAAe;YACf,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;YAEzE,uBAAuB;YACvB,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBACjE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,SAAS,CAAC,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,yCAAyC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;YAE7E,2BAA2B;YAC3B,OAAO,GAAG,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,iCAAiC,CAAC,CAAC;QACpF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO,GAAG,CAAC,QAAQ,CACjB,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,4BAA4B,kBAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAC3F,CAAC;QACJ,CAAC;IACH,CAAC;IAQK,AAAN,KAAK,CAAC,aAAa,CAAY,IAAc;QAC3C,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAElE,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,QAAQ,CAAC,MAAM;aACvB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wCAAwC,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC5E,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAQK,AAAN,KAAK,CAAC,YAAY,CACL,IAAc,EACD,WAAmB;QAE3C,IAAI,CAAC;YACH,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,MAAM,IAAI,mBAAmB,CAAC,2CAA2C,CAAC,CAAC;YAC7E,CAAC;YAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAE/E,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS,CAAC,MAAM;aACxB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sCAAsC,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC1E,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAQK,AAAN,KAAK,CAAC,QAAQ,CACD,IAAc,EACjB,IAAoB;QAE5B,IAAI,CAAC;YACH,2BAA2B;YAC3B,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAE9D,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACf,6CAA6C;gBAC7C,MAAM,WAAW,CAAC;gBAClB,OAAO;oBACL,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,gCAAgC;iBAC1C,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,4CAA4C;gBAC5C,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;oBAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;gBAEH,OAAO;oBACL,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,gCAAgC;iBAC1C,CAAC;YACJ,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wBAAwB,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAOK,AAAN,KAAK,CAAC,oBAAoB,CAAY,IAAc;QAClD,IAAI,CAAC;YACH,iEAAiE;YACjE,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC7E,KAAK,EAAE;oBACL,eAAe,EAAE;wBACf,MAAM,EAAE,IAAI,CAAC,EAAE;wBACf,QAAQ,EAAE,UAAU;qBACrB;iBACF;gBACD,MAAM,EAAE;oBACN,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,IAAI;oBAChB,SAAS,EAAE,IAAI;oBACf,SAAS,EAAE,IAAI;iBAChB;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO;oBACL,OAAO,EAAE,IAAI;oBACb,IAAI,EAAE;wBACJ,SAAS,EAAE,KAAK;wBAChB,OAAO,EAAE,qCAAqC;qBAC/C;iBACF,CAAC;YACJ,CAAC;YAED,MAAM,SAAS,GAAG,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YAE9E,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,SAAS,EAAE,WAAW,CAAC,QAAQ,IAAI,CAAC,SAAS;oBAC7C,QAAQ,EAAE,WAAW,CAAC,UAAU;oBAChC,WAAW,EAAE,WAAW,CAAC,SAAS;oBAClC,SAAS,EAAE,WAAW,CAAC,SAAS;oBAChC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU;iBAC7E;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6CAA6C,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACjF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAOK,AAAN,KAAK,CAAC,qBAAqB,CAAY,IAAc;QACnD,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC;gBACzD,KAAK,EAAE;oBACL,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,QAAQ,EAAE,UAAU;iBACrB;gBACD,IAAI,EAAE;oBACJ,QAAQ,EAAE,KAAK;iBAChB;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,8CAA8C,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAEzE,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,gDAAgD;aAC1D,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6CAA6C,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACjF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF,CAAA;AA7QO;IANL,IAAI,CAAC,MAAM,CAAC;IACZ,SAAS,CAAC,YAAY,CAAC;IACvB,aAAa,EAAE;IACf,YAAY,CAAC,EAAE,OAAO,EAAE,8BAA8B,EAAE,CAAC;IACzD,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,kCAAkC,EAAE,CAAC;IAC7E,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;IAE/D,WAAA,OAAO,EAAE,CAAA;IACT,WAAA,IAAI,EAAE,CAAA;;;;qDA6BR;AAMK;IAJL,GAAG,CAAC,UAAU,CAAC;IACf,YAAY,CAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC;IAC3D,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,sCAAsC,EAAE,CAAC;IACjF,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;IAE/D,WAAA,KAAK,EAAE,CAAA;IACP,WAAA,GAAG,EAAE,CAAA;;iEAAM,QAAQ,oBAAR,QAAQ;;uDA8DrB;AAQK;IANL,GAAG,CAAC,UAAU,CAAC;IACf,SAAS,CAAC,YAAY,CAAC;IACvB,aAAa,EAAE;IACf,YAAY,CAAC,EAAE,OAAO,EAAE,8BAA8B,EAAE,CAAC;IACzD,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,oCAAoC,EAAE,CAAC;IAC/E,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,mCAAmC,EAAE,CAAC;IAC1D,WAAA,OAAO,EAAE,CAAA;;;;sDAa7B;AAQK;IANL,GAAG,CAAC,WAAW,CAAC;IAChB,SAAS,CAAC,YAAY,CAAC;IACvB,aAAa,EAAE;IACf,YAAY,CAAC,EAAE,OAAO,EAAE,iCAAiC,EAAE,CAAC;IAC5D,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,kCAAkC,EAAE,CAAC;IAC7E,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IAEpE,WAAA,OAAO,EAAE,CAAA;IACT,WAAA,KAAK,CAAC,eAAe,CAAC,CAAA;;;;qDAkBxB;AAQK;IANL,IAAI,CAAC,MAAM,CAAC;IACZ,SAAS,CAAC,YAAY,CAAC;IACvB,aAAa,EAAE;IACf,YAAY,CAAC,EAAE,OAAO,EAAE,qCAAqC,EAAE,CAAC;IAChE,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,6BAA6B,EAAE,CAAC;IACxE,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,mCAAmC,EAAE,CAAC;IAE5E,WAAA,OAAO,EAAE,CAAA;IACT,WAAA,IAAI,EAAE,CAAA;;;;iDA4BR;AAOK;IALL,GAAG,CAAC,QAAQ,CAAC;IACb,SAAS,CAAC,YAAY,CAAC;IACvB,aAAa,EAAE;IACf,YAAY,CAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACnD,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,+BAA+B,EAAE,CAAC;IAC/C,WAAA,OAAO,EAAE,CAAA;;;;6DA4CpC;AAOK;IALL,IAAI,CAAC,YAAY,CAAC;IAClB,SAAS,CAAC,YAAY,CAAC;IACvB,aAAa,EAAE;IACf,YAAY,CAAC,EAAE,OAAO,EAAE,iCAAiC,EAAE,CAAC;IAC5D,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,uCAAuC,EAAE,CAAC;IACtD,WAAA,OAAO,EAAE,CAAA;;;;8DAsBrC;AAvRU,iBAAiB;IAF7B,OAAO,CAAC,sBAAsB,CAAC;IAC/B,UAAU,CAAC,uBAAuB,CAAC;yDAIW,cAAc,oBAAd,cAAc;GAHhD,iBAAiB,CAwR7B;;AAIM,IAAM,qBAAqB,6BAA3B,MAAM,qBAAqB;IAGH;IAFZ,MAAM,GAAG,IAAI,MAAM,CAAC,uBAAqB,CAAC,IAAI,CAAC,CAAC;IAEjE,YAA6B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAK/D,aAAa,CACQ,IAAY,EACP,SAAiB,EACd,WAAmB;QAE9C,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;QAE5D,IAAI,IAAI,KAAK,WAAW,IAAI,WAAW,KAAK,aAAa,EAAE,CAAC;YAC1D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;YACtD,OAAO,SAAS,CAAC;QACnB,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACtD,MAAM,IAAI,qBAAqB,CAAC,6BAA6B,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IAKK,AAAN,KAAK,CAAC,cAAc,CACV,IAAgB,EACQ,SAAiB,EAC1C,GAAY;QAEnB,IAAI,CAAC;YACH,2BAA2B;YAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrC,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAE/E,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBAC/C,MAAM,IAAI,qBAAqB,CAAC,2BAA2B,CAAC,CAAC;YAC/D,CAAC;YAED,uBAAuB;YACvB,IAAI,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;gBAChC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACrD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,yBAAyB,IAAI,CAAC,KAAK,CAAC,MAAM,UAAU,CAAC,CAAC;YACxE,CAAC;YAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF,CAAA;AA9CC;IAHC,GAAG,CAAC,MAAM,CAAC;IACX,YAAY,CAAC,EAAE,OAAO,EAAE,kCAAkC,EAAE,CAAC;IAC7D,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,+BAA+B,EAAE,CAAC;IAExE,WAAA,KAAK,CAAC,UAAU,CAAC,CAAA;IACjB,WAAA,KAAK,CAAC,eAAe,CAAC,CAAA;IACtB,WAAA,KAAK,CAAC,kBAAkB,CAAC,CAAA;;;;0DAW3B;AAKK;IAHL,IAAI,CAAC,MAAM,CAAC;IACZ,YAAY,CAAC,EAAE,OAAO,EAAE,oCAAoC,EAAE,CAAC;IAC/D,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,gCAAgC,EAAE,CAAC;IAEzE,WAAA,IAAI,EAAE,CAAA;IACN,WAAA,OAAO,CAAC,qBAAqB,CAAC,CAAA;IAC9B,WAAA,GAAG,EAAE,CAAA;;yEAAM,OAAO,oBAAP,OAAO;;2DAuBpB;AArDU,qBAAqB;IAFjC,UAAU,CAAC,cAAc,CAAC;IAC1B,OAAO,CAAC,UAAU,CAAC;yDAI2B,cAAc,oBAAd,cAAc;GAHhD,qBAAqB,CAsDjC",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\meta-ads.controller.ts"],
      sourcesContent: ["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Query,\n  Req,\n  Res,\n  Headers,\n  HttpStatus,\n  UseGuards,\n  Logger,\n  BadRequestException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { MetaAdsService } from '../services/meta-ads.service';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { GetUser } from '../decorators/get-user.decorator';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';\n\ninterface AuthUser {\n  id: string;\n  email: string;\n}\n\ninterface AuthQueryDto {\n  redirect_uri: string;\n}\n\ninterface CallbackQueryDto {\n  code?: string;\n  state?: string;\n  error?: string;\n  error_description?: string;\n}\n\ninterface SyncRequestDto {\n  force?: boolean;\n}\n\ninterface WebhookDto {\n  object: string;\n  entry: Array<{\n    id: string;\n    time: number;\n    changes: Array<{\n      field: string;\n      value: any;\n    }>;\n  }>;\n}\n\n@ApiTags('Meta Ads Integration')\n@Controller('api/integrations/meta')\nexport class MetaAdsController {\n  private readonly logger = new Logger(MetaAdsController.name);\n\n  constructor(private readonly metaAdsService: MetaAdsService) {}\n\n  @Post('auth')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Initiate Meta Ads OAuth flow' })\n  @ApiResponse({ status: 200, description: 'OAuth URL generated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid redirect URI' })\n  async initiateAuth(\n    @GetUser() user: AuthUser,\n    @Body() body: AuthQueryDto,\n  ) {\n    try {\n      if (!body.redirect_uri) {\n        throw new BadRequestException('redirect_uri is required');\n      }\n\n      // Validate redirect URI format\n      try {\n        new URL(body.redirect_uri);\n      } catch {\n        throw new BadRequestException('Invalid redirect_uri format');\n      }\n\n      const authUrl = this.metaAdsService.generateAuthUrl(user.id, body.redirect_uri);\n      \n      this.logger.log(`Generated OAuth URL for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          authUrl,\n          message: 'Redirect user to this URL to complete authorization',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to initiate OAuth', error);\n      throw error;\n    }\n  }\n\n  @Get('callback')\n  @ApiOperation({ summary: 'Handle Meta Ads OAuth callback' })\n  @ApiResponse({ status: 200, description: 'Authorization completed successfully' })\n  @ApiResponse({ status: 400, description: 'Authorization failed' })\n  async handleCallback(\n    @Query() query: CallbackQueryDto,\n    @Res() res: Response,\n  ) {\n    try {\n      // Handle OAuth errors\n      if (query.error) {\n        this.logger.error(`OAuth error: ${query.error} - ${query.error_description}`);\n        return res.status(HttpStatus.BAD_REQUEST).json({\n          success: false,\n          error: query.error,\n          error_description: query.error_description,\n        });\n      }\n\n      if (!query.code || !query.state) {\n        throw new BadRequestException('Missing authorization code or state');\n      }\n\n      // Decrypt and validate state\n      let stateData: { userId: string; timestamp: number };\n      try {\n        const decryptedState = this.metaAdsService['cryptoService'].decrypt(query.state);\n        stateData = JSON.parse(decryptedState);\n      } catch {\n        throw new BadRequestException('Invalid state parameter');\n      }\n\n      // Check state timestamp (valid for 10 minutes)\n      const stateAge = Date.now() - stateData.timestamp;\n      if (stateAge > 10 * 60 * 1000) {\n        throw new BadRequestException('State parameter expired');\n      }\n\n      // Exchange code for tokens\n      const redirectUri = `${process.env.FRONTEND_URL}/integrations/meta/callback`;\n      const shortLivedTokens = await this.metaAdsService.exchangeCodeForToken(\n        query.code,\n        redirectUri,\n      );\n\n      // Get long-lived token\n      const longLivedTokens = await this.metaAdsService.getLongLivedToken(\n        shortLivedTokens.access_token,\n      );\n\n      // Store tokens\n      await this.metaAdsService.storeTokens(stateData.userId, longLivedTokens);\n\n      // Trigger initial sync\n      this.metaAdsService.syncUserData(stateData.userId).catch((error) => {\n        this.logger.error(`Initial sync failed for user ${stateData.userId}`, error);\n      });\n\n      this.logger.log(`OAuth completed successfully for user ${stateData.userId}`);\n\n      // Redirect to success page\n      return res.redirect(`${process.env.FRONTEND_URL}/integrations/meta?success=true`);\n    } catch (error) {\n      this.logger.error('OAuth callback failed', error);\n      return res.redirect(\n        `${process.env.FRONTEND_URL}/integrations/meta?error=${encodeURIComponent(error.message)}`,\n      );\n    }\n  }\n\n  @Get('accounts')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get user\\'s Meta ad accounts' })\n  @ApiResponse({ status: 200, description: 'Ad accounts retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Integration not found or inactive' })\n  async getAdAccounts(@GetUser() user: AuthUser) {\n    try {\n      const accounts = await this.metaAdsService.getAdAccounts(user.id);\n      \n      return {\n        success: true,\n        data: accounts,\n        count: accounts.length,\n      };\n    } catch (error) {\n      this.logger.error(`Failed to fetch ad accounts for user ${user.id}`, error);\n      throw error;\n    }\n  }\n\n  @Get('campaigns')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get campaigns for an ad account' })\n  @ApiResponse({ status: 200, description: 'Campaigns retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Ad account ID is required' })\n  async getCampaigns(\n    @GetUser() user: AuthUser,\n    @Query('ad_account_id') adAccountId: string,\n  ) {\n    try {\n      if (!adAccountId) {\n        throw new BadRequestException('ad_account_id query parameter is required');\n      }\n\n      const campaigns = await this.metaAdsService.getCampaigns(user.id, adAccountId);\n      \n      return {\n        success: true,\n        data: campaigns,\n        count: campaigns.length,\n      };\n    } catch (error) {\n      this.logger.error(`Failed to fetch campaigns for user ${user.id}`, error);\n      throw error;\n    }\n  }\n\n  @Post('sync')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Trigger manual data synchronization' })\n  @ApiResponse({ status: 200, description: 'Sync initiated successfully' })\n  @ApiResponse({ status: 401, description: 'Integration not found or inactive' })\n  async syncData(\n    @GetUser() user: AuthUser,\n    @Body() body: SyncRequestDto,\n  ) {\n    try {\n      // Start sync in background\n      const syncPromise = this.metaAdsService.syncUserData(user.id);\n      \n      if (body.force) {\n        // Wait for sync to complete if force is true\n        await syncPromise;\n        return {\n          success: true,\n          message: 'Data synchronized successfully',\n        };\n      } else {\n        // Return immediately and sync in background\n        syncPromise.catch((error) => {\n          this.logger.error(`Background sync failed for user ${user.id}`, error);\n        });\n        \n        return {\n          success: true,\n          message: 'Data synchronization initiated',\n        };\n      }\n    } catch (error) {\n      this.logger.error(`Sync failed for user ${user.id}`, error);\n      throw error;\n    }\n  }\n\n  @Get('status')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get integration status' })\n  @ApiResponse({ status: 200, description: 'Status retrieved successfully' })\n  async getIntegrationStatus(@GetUser() user: AuthUser) {\n    try {\n      // This would typically query the database for integration status\n      const integration = await this.metaAdsService['prisma'].integration.findUnique({\n        where: {\n          userId_provider: {\n            userId: user.id,\n            provider: 'META_ADS',\n          },\n        },\n        select: {\n          isActive: true,\n          lastSyncAt: true,\n          createdAt: true,\n          expiresAt: true,\n        },\n      });\n\n      if (!integration) {\n        return {\n          success: true,\n          data: {\n            connected: false,\n            message: 'Meta Ads integration not configured',\n          },\n        };\n      }\n\n      const isExpired = integration.expiresAt && integration.expiresAt < new Date();\n      \n      return {\n        success: true,\n        data: {\n          connected: integration.isActive && !isExpired,\n          lastSync: integration.lastSyncAt,\n          connectedAt: integration.createdAt,\n          expiresAt: integration.expiresAt,\n          status: isExpired ? 'expired' : integration.isActive ? 'active' : 'inactive',\n        },\n      };\n    } catch (error) {\n      this.logger.error(`Failed to get integration status for user ${user.id}`, error);\n      throw error;\n    }\n  }\n\n  @Post('disconnect')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Disconnect Meta Ads integration' })\n  @ApiResponse({ status: 200, description: 'Integration disconnected successfully' })\n  async disconnectIntegration(@GetUser() user: AuthUser) {\n    try {\n      await this.metaAdsService['prisma'].integration.updateMany({\n        where: {\n          userId: user.id,\n          provider: 'META_ADS',\n        },\n        data: {\n          isActive: false,\n        },\n      });\n\n      this.logger.log(`Meta Ads integration disconnected for user ${user.id}`);\n      \n      return {\n        success: true,\n        message: 'Meta Ads integration disconnected successfully',\n      };\n    } catch (error) {\n      this.logger.error(`Failed to disconnect integration for user ${user.id}`, error);\n      throw error;\n    }\n  }\n}\n\n@Controller('api/webhooks')\n@ApiTags('Webhooks')\nexport class MetaWebhookController {\n  private readonly logger = new Logger(MetaWebhookController.name);\n\n  constructor(private readonly metaAdsService: MetaAdsService) {}\n\n  @Get('meta')\n  @ApiOperation({ summary: 'Verify Meta webhook subscription' })\n  @ApiResponse({ status: 200, description: 'Webhook verified successfully' })\n  verifyWebhook(\n    @Query('hub.mode') mode: string,\n    @Query('hub.challenge') challenge: string,\n    @Query('hub.verify_token') verifyToken: string,\n  ) {\n    const expectedToken = process.env.META_WEBHOOK_VERIFY_TOKEN;\n    \n    if (mode === 'subscribe' && verifyToken === expectedToken) {\n      this.logger.log('Meta webhook verified successfully');\n      return challenge;\n    } else {\n      this.logger.error('Meta webhook verification failed');\n      throw new UnauthorizedException('Webhook verification failed');\n    }\n  }\n\n  @Post('meta')\n  @ApiOperation({ summary: 'Receive Meta webhook notifications' })\n  @ApiResponse({ status: 200, description: 'Webhook processed successfully' })\n  async receiveWebhook(\n    @Body() body: WebhookDto,\n    @Headers('x-hub-signature-256') signature: string,\n    @Req() req: Request,\n  ) {\n    try {\n      // Verify webhook signature\n      const payload = JSON.stringify(body);\n      const isValid = this.metaAdsService.verifyWebhookSignature(payload, signature);\n      \n      if (!isValid) {\n        this.logger.error('Invalid webhook signature');\n        throw new UnauthorizedException('Invalid webhook signature');\n      }\n\n      // Process webhook data\n      if (body.object === 'adaccount') {\n        await this.metaAdsService.processWebhook(body.entry);\n        this.logger.log(`Processed webhook for ${body.entry.length} entries`);\n      }\n\n      return { success: true };\n    } catch (error) {\n      this.logger.error('Webhook processing failed', error);\n      throw error;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4d458e03bf62d59513f23077f6caee11f5851934"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1x8hkok9l7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1x8hkok9l7();
var __decorate =
/* istanbul ignore next */
(cov_1x8hkok9l7().s[0]++,
/* istanbul ignore next */
(cov_1x8hkok9l7().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1x8hkok9l7().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_1x8hkok9l7().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_1x8hkok9l7().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_1x8hkok9l7().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_1x8hkok9l7().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_1x8hkok9l7().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_1x8hkok9l7().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_1x8hkok9l7().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_1x8hkok9l7().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_1x8hkok9l7().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_1x8hkok9l7().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1x8hkok9l7().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().b[3][0]++;
    cov_1x8hkok9l7().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_1x8hkok9l7().b[3][1]++;
    cov_1x8hkok9l7().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_1x8hkok9l7().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[5][0]++;
        cov_1x8hkok9l7().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_1x8hkok9l7().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_1x8hkok9l7().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_1x8hkok9l7().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_1x8hkok9l7().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_1x8hkok9l7().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_1x8hkok9l7().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_1x8hkok9l7().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_1x8hkok9l7().s[9]++;
  return /* istanbul ignore next */(cov_1x8hkok9l7().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_1x8hkok9l7().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_1x8hkok9l7().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_1x8hkok9l7().s[10]++,
/* istanbul ignore next */
(cov_1x8hkok9l7().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1x8hkok9l7().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_1x8hkok9l7().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_1x8hkok9l7().f[1]++;
  cov_1x8hkok9l7().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_1x8hkok9l7().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1x8hkok9l7().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().b[11][0]++;
    cov_1x8hkok9l7().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_1x8hkok9l7().b[11][1]++;
  }
}));
var __param =
/* istanbul ignore next */
(cov_1x8hkok9l7().s[13]++,
/* istanbul ignore next */
(cov_1x8hkok9l7().b[13][0]++, this) &&
/* istanbul ignore next */
(cov_1x8hkok9l7().b[13][1]++, this.__param) ||
/* istanbul ignore next */
(cov_1x8hkok9l7().b[13][2]++, function (paramIndex, decorator) {
  /* istanbul ignore next */
  cov_1x8hkok9l7().f[2]++;
  cov_1x8hkok9l7().s[14]++;
  return function (target, key) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[3]++;
    cov_1x8hkok9l7().s[15]++;
    decorator(target, key, paramIndex);
  };
}));
var MetaAdsController_1, MetaWebhookController_1;
var _a, _b, _c, _d;
import { Controller, Get, Post, Body, Query, Req, Res, Headers, HttpStatus, UseGuards, Logger, BadRequestException, UnauthorizedException } from '@nestjs/common';
import { Request, Response } from 'express';
import { MetaAdsService } from '../services/meta-ads.service';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { GetUser } from '../decorators/get-user.decorator';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
let MetaAdsController =
/* istanbul ignore next */
(cov_1x8hkok9l7().s[16]++, MetaAdsController_1 = class MetaAdsController {
  metaAdsService;
  logger =
  /* istanbul ignore next */
  (cov_1x8hkok9l7().s[17]++, new Logger(MetaAdsController_1.name));
  constructor(metaAdsService) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[4]++;
    cov_1x8hkok9l7().s[18]++;
    this.metaAdsService = metaAdsService;
  }
  async initiateAuth(user, body) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[5]++;
    cov_1x8hkok9l7().s[19]++;
    try {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[20]++;
      if (!body.redirect_uri) {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[14][0]++;
        cov_1x8hkok9l7().s[21]++;
        throw new BadRequestException('redirect_uri is required');
      } else
      /* istanbul ignore next */
      {
        cov_1x8hkok9l7().b[14][1]++;
      }
      // Validate redirect URI format
      cov_1x8hkok9l7().s[22]++;
      try {
        /* istanbul ignore next */
        cov_1x8hkok9l7().s[23]++;
        new URL(body.redirect_uri);
      } catch {
        /* istanbul ignore next */
        cov_1x8hkok9l7().s[24]++;
        throw new BadRequestException('Invalid redirect_uri format');
      }
      const authUrl =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[25]++, this.metaAdsService.generateAuthUrl(user.id, body.redirect_uri));
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[26]++;
      this.logger.log(`Generated OAuth URL for user ${user.id}`);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[27]++;
      return {
        success: true,
        data: {
          authUrl,
          message: 'Redirect user to this URL to complete authorization'
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[28]++;
      this.logger.error('Failed to initiate OAuth', error);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[29]++;
      throw error;
    }
  }
  async handleCallback(query, res) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[6]++;
    cov_1x8hkok9l7().s[30]++;
    try {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[31]++;
      // Handle OAuth errors
      if (query.error) {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[15][0]++;
        cov_1x8hkok9l7().s[32]++;
        this.logger.error(`OAuth error: ${query.error} - ${query.error_description}`);
        /* istanbul ignore next */
        cov_1x8hkok9l7().s[33]++;
        return res.status(HttpStatus.BAD_REQUEST).json({
          success: false,
          error: query.error,
          error_description: query.error_description
        });
      } else
      /* istanbul ignore next */
      {
        cov_1x8hkok9l7().b[15][1]++;
      }
      cov_1x8hkok9l7().s[34]++;
      if (
      /* istanbul ignore next */
      (cov_1x8hkok9l7().b[17][0]++, !query.code) ||
      /* istanbul ignore next */
      (cov_1x8hkok9l7().b[17][1]++, !query.state)) {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[16][0]++;
        cov_1x8hkok9l7().s[35]++;
        throw new BadRequestException('Missing authorization code or state');
      } else
      /* istanbul ignore next */
      {
        cov_1x8hkok9l7().b[16][1]++;
      }
      // Decrypt and validate state
      let stateData;
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[36]++;
      try {
        const decryptedState =
        /* istanbul ignore next */
        (cov_1x8hkok9l7().s[37]++, this.metaAdsService['cryptoService'].decrypt(query.state));
        /* istanbul ignore next */
        cov_1x8hkok9l7().s[38]++;
        stateData = JSON.parse(decryptedState);
      } catch {
        /* istanbul ignore next */
        cov_1x8hkok9l7().s[39]++;
        throw new BadRequestException('Invalid state parameter');
      }
      // Check state timestamp (valid for 10 minutes)
      const stateAge =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[40]++, Date.now() - stateData.timestamp);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[41]++;
      if (stateAge > 10 * 60 * 1000) {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[18][0]++;
        cov_1x8hkok9l7().s[42]++;
        throw new BadRequestException('State parameter expired');
      } else
      /* istanbul ignore next */
      {
        cov_1x8hkok9l7().b[18][1]++;
      }
      // Exchange code for tokens
      const redirectUri =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[43]++, `${process.env.FRONTEND_URL}/integrations/meta/callback`);
      const shortLivedTokens =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[44]++, await this.metaAdsService.exchangeCodeForToken(query.code, redirectUri));
      // Get long-lived token
      const longLivedTokens =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[45]++, await this.metaAdsService.getLongLivedToken(shortLivedTokens.access_token));
      // Store tokens
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[46]++;
      await this.metaAdsService.storeTokens(stateData.userId, longLivedTokens);
      // Trigger initial sync
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[47]++;
      this.metaAdsService.syncUserData(stateData.userId).catch(error => {
        /* istanbul ignore next */
        cov_1x8hkok9l7().f[7]++;
        cov_1x8hkok9l7().s[48]++;
        this.logger.error(`Initial sync failed for user ${stateData.userId}`, error);
      });
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[49]++;
      this.logger.log(`OAuth completed successfully for user ${stateData.userId}`);
      // Redirect to success page
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[50]++;
      return res.redirect(`${process.env.FRONTEND_URL}/integrations/meta?success=true`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[51]++;
      this.logger.error('OAuth callback failed', error);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[52]++;
      return res.redirect(`${process.env.FRONTEND_URL}/integrations/meta?error=${encodeURIComponent(error.message)}`);
    }
  }
  async getAdAccounts(user) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[8]++;
    cov_1x8hkok9l7().s[53]++;
    try {
      const accounts =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[54]++, await this.metaAdsService.getAdAccounts(user.id));
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[55]++;
      return {
        success: true,
        data: accounts,
        count: accounts.length
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[56]++;
      this.logger.error(`Failed to fetch ad accounts for user ${user.id}`, error);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[57]++;
      throw error;
    }
  }
  async getCampaigns(user, adAccountId) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[9]++;
    cov_1x8hkok9l7().s[58]++;
    try {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[59]++;
      if (!adAccountId) {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[19][0]++;
        cov_1x8hkok9l7().s[60]++;
        throw new BadRequestException('ad_account_id query parameter is required');
      } else
      /* istanbul ignore next */
      {
        cov_1x8hkok9l7().b[19][1]++;
      }
      const campaigns =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[61]++, await this.metaAdsService.getCampaigns(user.id, adAccountId));
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[62]++;
      return {
        success: true,
        data: campaigns,
        count: campaigns.length
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[63]++;
      this.logger.error(`Failed to fetch campaigns for user ${user.id}`, error);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[64]++;
      throw error;
    }
  }
  async syncData(user, body) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[10]++;
    cov_1x8hkok9l7().s[65]++;
    try {
      // Start sync in background
      const syncPromise =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[66]++, this.metaAdsService.syncUserData(user.id));
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[67]++;
      if (body.force) {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[20][0]++;
        cov_1x8hkok9l7().s[68]++;
        // Wait for sync to complete if force is true
        await syncPromise;
        /* istanbul ignore next */
        cov_1x8hkok9l7().s[69]++;
        return {
          success: true,
          message: 'Data synchronized successfully'
        };
      } else {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[20][1]++;
        cov_1x8hkok9l7().s[70]++;
        // Return immediately and sync in background
        syncPromise.catch(error => {
          /* istanbul ignore next */
          cov_1x8hkok9l7().f[11]++;
          cov_1x8hkok9l7().s[71]++;
          this.logger.error(`Background sync failed for user ${user.id}`, error);
        });
        /* istanbul ignore next */
        cov_1x8hkok9l7().s[72]++;
        return {
          success: true,
          message: 'Data synchronization initiated'
        };
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[73]++;
      this.logger.error(`Sync failed for user ${user.id}`, error);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[74]++;
      throw error;
    }
  }
  async getIntegrationStatus(user) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[12]++;
    cov_1x8hkok9l7().s[75]++;
    try {
      // This would typically query the database for integration status
      const integration =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[76]++, await this.metaAdsService['prisma'].integration.findUnique({
        where: {
          userId_provider: {
            userId: user.id,
            provider: 'META_ADS'
          }
        },
        select: {
          isActive: true,
          lastSyncAt: true,
          createdAt: true,
          expiresAt: true
        }
      }));
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[77]++;
      if (!integration) {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[21][0]++;
        cov_1x8hkok9l7().s[78]++;
        return {
          success: true,
          data: {
            connected: false,
            message: 'Meta Ads integration not configured'
          }
        };
      } else
      /* istanbul ignore next */
      {
        cov_1x8hkok9l7().b[21][1]++;
      }
      const isExpired =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[79]++,
      /* istanbul ignore next */
      (cov_1x8hkok9l7().b[22][0]++, integration.expiresAt) &&
      /* istanbul ignore next */
      (cov_1x8hkok9l7().b[22][1]++, integration.expiresAt < new Date()));
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[80]++;
      return {
        success: true,
        data: {
          connected:
          /* istanbul ignore next */
          (cov_1x8hkok9l7().b[23][0]++, integration.isActive) &&
          /* istanbul ignore next */
          (cov_1x8hkok9l7().b[23][1]++, !isExpired),
          lastSync: integration.lastSyncAt,
          connectedAt: integration.createdAt,
          expiresAt: integration.expiresAt,
          status: isExpired ?
          /* istanbul ignore next */
          (cov_1x8hkok9l7().b[24][0]++, 'expired') :
          /* istanbul ignore next */
          (cov_1x8hkok9l7().b[24][1]++, integration.isActive ?
          /* istanbul ignore next */
          (cov_1x8hkok9l7().b[25][0]++, 'active') :
          /* istanbul ignore next */
          (cov_1x8hkok9l7().b[25][1]++, 'inactive'))
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[81]++;
      this.logger.error(`Failed to get integration status for user ${user.id}`, error);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[82]++;
      throw error;
    }
  }
  async disconnectIntegration(user) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[13]++;
    cov_1x8hkok9l7().s[83]++;
    try {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[84]++;
      await this.metaAdsService['prisma'].integration.updateMany({
        where: {
          userId: user.id,
          provider: 'META_ADS'
        },
        data: {
          isActive: false
        }
      });
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[85]++;
      this.logger.log(`Meta Ads integration disconnected for user ${user.id}`);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[86]++;
      return {
        success: true,
        message: 'Meta Ads integration disconnected successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[87]++;
      this.logger.error(`Failed to disconnect integration for user ${user.id}`, error);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[88]++;
      throw error;
    }
  }
});
/* istanbul ignore next */
cov_1x8hkok9l7().s[89]++;
__decorate([Post('auth'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Initiate Meta Ads OAuth flow'
}), ApiResponse({
  status: 200,
  description: 'OAuth URL generated successfully'
}), ApiResponse({
  status: 400,
  description: 'Invalid redirect URI'
}), __param(0, GetUser()), __param(1, Body()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], MetaAdsController.prototype, "initiateAuth", null);
/* istanbul ignore next */
cov_1x8hkok9l7().s[90]++;
__decorate([Get('callback'), ApiOperation({
  summary: 'Handle Meta Ads OAuth callback'
}), ApiResponse({
  status: 200,
  description: 'Authorization completed successfully'
}), ApiResponse({
  status: 400,
  description: 'Authorization failed'
}), __param(0, Query()), __param(1, Res()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, typeof (_b =
/* istanbul ignore next */
(cov_1x8hkok9l7().b[27][0]++, typeof Response !== "undefined") &&
/* istanbul ignore next */
(cov_1x8hkok9l7().b[27][1]++, Response)) === "function" ?
/* istanbul ignore next */
(cov_1x8hkok9l7().b[26][0]++, _b) :
/* istanbul ignore next */
(cov_1x8hkok9l7().b[26][1]++, Object)]), __metadata("design:returntype", Promise)], MetaAdsController.prototype, "handleCallback", null);
/* istanbul ignore next */
cov_1x8hkok9l7().s[91]++;
__decorate([Get('accounts'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get user\'s Meta ad accounts'
}), ApiResponse({
  status: 200,
  description: 'Ad accounts retrieved successfully'
}), ApiResponse({
  status: 401,
  description: 'Integration not found or inactive'
}), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], MetaAdsController.prototype, "getAdAccounts", null);
/* istanbul ignore next */
cov_1x8hkok9l7().s[92]++;
__decorate([Get('campaigns'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get campaigns for an ad account'
}), ApiResponse({
  status: 200,
  description: 'Campaigns retrieved successfully'
}), ApiResponse({
  status: 400,
  description: 'Ad account ID is required'
}), __param(0, GetUser()), __param(1, Query('ad_account_id')), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String]), __metadata("design:returntype", Promise)], MetaAdsController.prototype, "getCampaigns", null);
/* istanbul ignore next */
cov_1x8hkok9l7().s[93]++;
__decorate([Post('sync'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Trigger manual data synchronization'
}), ApiResponse({
  status: 200,
  description: 'Sync initiated successfully'
}), ApiResponse({
  status: 401,
  description: 'Integration not found or inactive'
}), __param(0, GetUser()), __param(1, Body()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], MetaAdsController.prototype, "syncData", null);
/* istanbul ignore next */
cov_1x8hkok9l7().s[94]++;
__decorate([Get('status'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get integration status'
}), ApiResponse({
  status: 200,
  description: 'Status retrieved successfully'
}), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], MetaAdsController.prototype, "getIntegrationStatus", null);
/* istanbul ignore next */
cov_1x8hkok9l7().s[95]++;
__decorate([Post('disconnect'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Disconnect Meta Ads integration'
}), ApiResponse({
  status: 200,
  description: 'Integration disconnected successfully'
}), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], MetaAdsController.prototype, "disconnectIntegration", null);
/* istanbul ignore next */
cov_1x8hkok9l7().s[96]++;
MetaAdsController = MetaAdsController_1 = __decorate([ApiTags('Meta Ads Integration'), Controller('api/integrations/meta'), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_1x8hkok9l7().b[29][0]++, typeof MetaAdsService !== "undefined") &&
/* istanbul ignore next */
(cov_1x8hkok9l7().b[29][1]++, MetaAdsService)) === "function" ?
/* istanbul ignore next */
(cov_1x8hkok9l7().b[28][0]++, _a) :
/* istanbul ignore next */
(cov_1x8hkok9l7().b[28][1]++, Object)])], MetaAdsController);
export { MetaAdsController };
let MetaWebhookController =
/* istanbul ignore next */
(cov_1x8hkok9l7().s[97]++, MetaWebhookController_1 = class MetaWebhookController {
  metaAdsService;
  logger =
  /* istanbul ignore next */
  (cov_1x8hkok9l7().s[98]++, new Logger(MetaWebhookController_1.name));
  constructor(metaAdsService) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[14]++;
    cov_1x8hkok9l7().s[99]++;
    this.metaAdsService = metaAdsService;
  }
  verifyWebhook(mode, challenge, verifyToken) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[15]++;
    const expectedToken =
    /* istanbul ignore next */
    (cov_1x8hkok9l7().s[100]++, process.env.META_WEBHOOK_VERIFY_TOKEN);
    /* istanbul ignore next */
    cov_1x8hkok9l7().s[101]++;
    if (
    /* istanbul ignore next */
    (cov_1x8hkok9l7().b[31][0]++, mode === 'subscribe') &&
    /* istanbul ignore next */
    (cov_1x8hkok9l7().b[31][1]++, verifyToken === expectedToken)) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().b[30][0]++;
      cov_1x8hkok9l7().s[102]++;
      this.logger.log('Meta webhook verified successfully');
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[103]++;
      return challenge;
    } else {
      /* istanbul ignore next */
      cov_1x8hkok9l7().b[30][1]++;
      cov_1x8hkok9l7().s[104]++;
      this.logger.error('Meta webhook verification failed');
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[105]++;
      throw new UnauthorizedException('Webhook verification failed');
    }
  }
  async receiveWebhook(body, signature, req) {
    /* istanbul ignore next */
    cov_1x8hkok9l7().f[16]++;
    cov_1x8hkok9l7().s[106]++;
    try {
      // Verify webhook signature
      const payload =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[107]++, JSON.stringify(body));
      const isValid =
      /* istanbul ignore next */
      (cov_1x8hkok9l7().s[108]++, this.metaAdsService.verifyWebhookSignature(payload, signature));
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[109]++;
      if (!isValid) {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[32][0]++;
        cov_1x8hkok9l7().s[110]++;
        this.logger.error('Invalid webhook signature');
        /* istanbul ignore next */
        cov_1x8hkok9l7().s[111]++;
        throw new UnauthorizedException('Invalid webhook signature');
      } else
      /* istanbul ignore next */
      {
        cov_1x8hkok9l7().b[32][1]++;
      }
      // Process webhook data
      cov_1x8hkok9l7().s[112]++;
      if (body.object === 'adaccount') {
        /* istanbul ignore next */
        cov_1x8hkok9l7().b[33][0]++;
        cov_1x8hkok9l7().s[113]++;
        await this.metaAdsService.processWebhook(body.entry);
        /* istanbul ignore next */
        cov_1x8hkok9l7().s[114]++;
        this.logger.log(`Processed webhook for ${body.entry.length} entries`);
      } else
      /* istanbul ignore next */
      {
        cov_1x8hkok9l7().b[33][1]++;
      }
      cov_1x8hkok9l7().s[115]++;
      return {
        success: true
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[116]++;
      this.logger.error('Webhook processing failed', error);
      /* istanbul ignore next */
      cov_1x8hkok9l7().s[117]++;
      throw error;
    }
  }
});
/* istanbul ignore next */
cov_1x8hkok9l7().s[118]++;
__decorate([Get('meta'), ApiOperation({
  summary: 'Verify Meta webhook subscription'
}), ApiResponse({
  status: 200,
  description: 'Webhook verified successfully'
}), __param(0, Query('hub.mode')), __param(1, Query('hub.challenge')), __param(2, Query('hub.verify_token')), __metadata("design:type", Function), __metadata("design:paramtypes", [String, String, String]), __metadata("design:returntype", void 0)], MetaWebhookController.prototype, "verifyWebhook", null);
/* istanbul ignore next */
cov_1x8hkok9l7().s[119]++;
__decorate([Post('meta'), ApiOperation({
  summary: 'Receive Meta webhook notifications'
}), ApiResponse({
  status: 200,
  description: 'Webhook processed successfully'
}), __param(0, Body()), __param(1, Headers('x-hub-signature-256')), __param(2, Req()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String, typeof (_d =
/* istanbul ignore next */
(cov_1x8hkok9l7().b[35][0]++, typeof Request !== "undefined") &&
/* istanbul ignore next */
(cov_1x8hkok9l7().b[35][1]++, Request)) === "function" ?
/* istanbul ignore next */
(cov_1x8hkok9l7().b[34][0]++, _d) :
/* istanbul ignore next */
(cov_1x8hkok9l7().b[34][1]++, Object)]), __metadata("design:returntype", Promise)], MetaWebhookController.prototype, "receiveWebhook", null);
/* istanbul ignore next */
cov_1x8hkok9l7().s[120]++;
MetaWebhookController = MetaWebhookController_1 = __decorate([Controller('api/webhooks'), ApiTags('Webhooks'), __metadata("design:paramtypes", [typeof (_c =
/* istanbul ignore next */
(cov_1x8hkok9l7().b[37][0]++, typeof MetaAdsService !== "undefined") &&
/* istanbul ignore next */
(cov_1x8hkok9l7().b[37][1]++, MetaAdsService)) === "function" ?
/* istanbul ignore next */
(cov_1x8hkok9l7().b[36][0]++, _c) :
/* istanbul ignore next */
(cov_1x8hkok9l7().b[36][1]++, Object)])], MetaWebhookController);
export { MetaWebhookController };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,