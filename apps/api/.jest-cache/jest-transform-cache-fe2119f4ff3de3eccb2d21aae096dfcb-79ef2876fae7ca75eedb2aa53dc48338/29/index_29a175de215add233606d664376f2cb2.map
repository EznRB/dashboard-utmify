{"version":3,"names":["cov_1e8a0gbxo4","actualCoverage","Fastify","gracefulShutdown","logger","registerPlugins","registerRoutes","errorHandler","notFoundHandler","env","getWorkerManager","getJobManager","getQueueManager","app","s","trustProxy","requestIdLogLabel","requestIdHeader","addHook","request","f","info","method","url","headers","ip","setErrorHandler","setNotFoundHandler","start","workerManager","db","jobManager","queueManager","initialize","address","listen","port","PORT","host","HOST","NODE_ENV","DATABASE_URL","b","REDIS_URL","error","process","exit","on","reason","promise"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\index.ts"],"sourcesContent":["import Fastify from 'fastify'\nimport { gracefulShutdown } from './utils/graceful-shutdown'\nimport { logger } from './utils/logger'\nimport { registerPlugins } from './config/plugins'\nimport { registerRoutes } from './routes'\nimport { errorHandler, notFoundHandler } from './utils/errors'\nimport { env } from './config/env'\nimport { getWorkerManager } from './workers'\nimport { getJobManager } from './jobs'\nimport { getQueueManager } from './queue'\n\n// Create Fastify instance\nconst app = Fastify({\n  logger: false, // We use our custom logger\n  trustProxy: true,\n  requestIdLogLabel: 'requestId',\n  requestIdHeader: 'x-request-id',\n})\n\n// Add request logging\napp.addHook('onRequest', async (request) => {\n  logger.info({\n    request: {\n      method: request.method,\n      url: request.url,\n      headers: request.headers,\n      ip: request.ip,\n    },\n  }, 'Incoming request')\n})\n\n// Global error handler\napp.setErrorHandler(errorHandler)\n\n// 404 handler\napp.setNotFoundHandler(notFoundHandler)\n\n// Register plugins\nawait registerPlugins(app)\n\n// Register routes\nawait registerRoutes(app)\n\n// Start server\nconst start = async () => {\n  try {\n    // Initialize workers\n    const workerManager = getWorkerManager(app.db)\n    await workerManager.start()\n    logger.info('Workers initialized successfully')\n    \n    // Initialize scheduled jobs\n    const jobManager = getJobManager(app.db)\n    await jobManager.start()\n    logger.info('Scheduled jobs initialized successfully')\n    \n    // Initialize queue system\n    const queueManager = getQueueManager(app.db)\n    await queueManager.initialize()\n    logger.info('Queue system initialized successfully')\n    \n    const address = await app.listen({\n      port: env.PORT,\n      host: env.HOST,\n    })\n    \n    logger.info(`Server listening on ${address}`)\n    logger.info(`Environment: ${env.NODE_ENV}`)\n    logger.info(`Database URL: ${env.DATABASE_URL ? 'Connected' : 'Not configured'}`)\n    logger.info(`Redis URL: ${env.REDIS_URL ? 'Connected' : 'Not configured'}`)\n  } catch (error) {\n    logger.error(error, 'Error starting server')\n    process.exit(1)\n  }\n}\n\n// Setup graceful shutdown\ngracefulShutdown(app)\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error({\n    reason,\n    promise,\n  }, 'Unhandled promise rejection')\n  process.exit(1)\n})\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  logger.error(error, 'Uncaught exception')\n  process.exit(1)\n})\n\n// Start the server\nstart()"],"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","ignoreList":[]}