{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\whatsapp.service.simple.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\whatsapp.service.simple.test.ts"],"sourcesContent":["/**\n * @jest-environment node\n */\n\n// Simple WhatsApp Service Tests - Isolated from setup.ts\ndescribe('WhatsApp Service - Simple Tests', () => {\n  // Mock implementations\n  const mockPrismaService = {\n    whatsAppConfig: {\n      findUnique: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn()\n    },\n    whatsAppMessage: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n      count: jest.fn(),\n      update: jest.fn()\n    }\n  }\n\n  const mockCryptoService = {\n    encrypt: jest.fn().mockReturnValue('encrypted_token'),\n    decrypt: jest.fn().mockReturnValue('decrypted_token')\n  }\n\n  const mockQueue = {\n    add: jest.fn().mockResolvedValue({ id: 'job-1' })\n  }\n\n  // Simple WhatsApp Service implementation for testing\n  class TestWhatsAppService {\n    constructor(\n      private prisma: any,\n      private queue: any,\n      private crypto: any\n    ) {}\n\n    async getConfig(userId: string) {\n      const config = await this.prisma.whatsAppConfig.findUnique({\n        where: { userId }\n      })\n      \n      if (!config) return null\n      \n      return {\n        ...config,\n        twilioAuthToken: this.crypto.decrypt(config.twilioAuthToken)\n      }\n    }\n\n    async sendMessage(userId: string, messageData: { to: string; message: string }) {\n      const config = await this.getConfig(userId)\n      \n      if (!config) {\n        throw new Error('WhatsApp não configurado')\n      }\n      \n      if (!config.isActive) {\n        throw new Error('WhatsApp está desativado')\n      }\n      \n      if (config.messagesUsedToday >= config.dailyLimit) {\n        throw new Error('Limite diário de mensagens atingido')\n      }\n\n      // Add to queue\n      await this.queue.add('send-message', {\n        userId,\n        to: messageData.to,\n        message: messageData.message\n      })\n\n      // Create message record\n      const message = await this.prisma.whatsAppMessage.create({\n        data: {\n          userId,\n          to: messageData.to,\n          from: config.twilioPhoneNumber,\n          body: messageData.message,\n          status: 'queued',\n          messageType: 'text'\n        }\n      })\n\n      return message\n    }\n  }\n\n  let whatsappService: TestWhatsAppService\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks()\n    \n    // Create service instance\n    whatsappService = new TestWhatsAppService(\n      mockPrismaService,\n      mockQueue,\n      mockCryptoService\n    )\n  })\n\n  afterEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('getConfig', () => {\n    it('should return WhatsApp config for user', async () => {\n      const mockConfig = {\n        id: 'config-1',\n        userId: 'user-1',\n        twilioAccountSid: 'test_sid',\n        twilioAuthToken: 'encrypted_token',\n        twilioPhoneNumber: '+1234567890',\n        isActive: true,\n        dailyLimit: 1000,\n        messagesUsedToday: 50\n      }\n\n      mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(mockConfig)\n      mockCryptoService.decrypt.mockReturnValue('decrypted_token')\n\n      const result = await whatsappService.getConfig('user-1')\n\n      expect(result).toEqual({\n        ...mockConfig,\n        twilioAuthToken: 'decrypted_token'\n      })\n      expect(mockPrismaService.whatsAppConfig.findUnique).toHaveBeenCalledWith({\n        where: { userId: 'user-1' }\n      })\n    })\n\n    it('should return null if config not found', async () => {\n      mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(null)\n\n      const result = await whatsappService.getConfig('user-1')\n\n      expect(result).toBeNull()\n    })\n  })\n\n  describe('sendMessage', () => {\n    it('should send message successfully', async () => {\n      const mockConfig = {\n        id: 'config-1',\n        userId: 'user-1',\n        twilioAccountSid: 'test_sid',\n        twilioAuthToken: 'encrypted_token',\n        twilioPhoneNumber: '+1234567890',\n        isActive: true,\n        dailyLimit: 1000,\n        messagesUsedToday: 50\n      }\n\n      const messageData = {\n        to: '+1987654321',\n        message: 'Hello, World!'\n      }\n\n      const mockCreatedMessage = {\n        id: 'msg-1',\n        userId: 'user-1',\n        to: messageData.to,\n        from: mockConfig.twilioPhoneNumber,\n        body: messageData.message,\n        status: 'queued',\n        messageType: 'text'\n      }\n\n      // Mock getConfig to return valid config\n      mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue({\n        ...mockConfig,\n        twilioAuthToken: 'encrypted_token'\n      })\n      mockCryptoService.decrypt.mockReturnValue('decrypted_token')\n      mockPrismaService.whatsAppMessage.create.mockResolvedValue(mockCreatedMessage)\n      mockQueue.add.mockResolvedValue({ id: 'job-1' })\n\n      const result = await whatsappService.sendMessage('user-1', messageData)\n\n      expect(mockQueue.add).toHaveBeenCalledWith('send-message', {\n        userId: 'user-1',\n        to: messageData.to,\n        message: messageData.message\n      })\n      expect(result).toEqual(mockCreatedMessage)\n    })\n\n    it('should throw error if config not found', async () => {\n      mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(null)\n\n      await expect(\n        whatsappService.sendMessage('user-1', {\n          to: '+1987654321',\n          message: 'Hello'\n        })\n      ).rejects.toThrow('WhatsApp não configurado')\n    })\n\n    it('should throw error if config is inactive', async () => {\n      const inactiveConfig = {\n        id: 'config-1',\n        userId: 'user-1',\n        twilioAuthToken: 'encrypted_token',\n        isActive: false,\n        dailyLimit: 1000,\n        messagesUsedToday: 50\n      }\n\n      mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(inactiveConfig)\n      mockCryptoService.decrypt.mockReturnValue('decrypted_token')\n\n      await expect(\n        whatsappService.sendMessage('user-1', {\n          to: '+1987654321',\n          message: 'Hello'\n        })\n      ).rejects.toThrow('WhatsApp está desativado')\n    })\n\n    it('should throw error if daily limit exceeded', async () => {\n      const limitExceededConfig = {\n        id: 'config-1',\n        userId: 'user-1',\n        twilioAuthToken: 'encrypted_token',\n        isActive: true,\n        dailyLimit: 1000,\n        messagesUsedToday: 1000\n      }\n\n      mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(limitExceededConfig)\n      mockCryptoService.decrypt.mockReturnValue('decrypted_token')\n\n      await expect(\n        whatsappService.sendMessage('user-1', {\n          to: '+1987654321',\n          message: 'Hello'\n        })\n      ).rejects.toThrow('Limite diário de mensagens atingido')\n    })\n  })\n\n  // Basic functionality test\n  it('should have basic Jest functionality working', () => {\n    expect(1 + 1).toBe(2)\n    expect('hello').toBe('hello')\n    expect(true).toBeTruthy()\n  })\n\n  // Mock functionality test\n  it('should have Jest mocks working', () => {\n    const mockFn = jest.fn()\n    mockFn('test')\n    expect(mockFn).toHaveBeenCalledWith('test')\n    expect(mockFn).toHaveBeenCalledTimes(1)\n  })\n})"],"version":3}