1606b4d4c3b875e2228c2e7a07725865
"use strict";
/**
 * @jest-environment node
 */
// Simple WhatsApp Service Tests - Isolated from setup.ts
describe('WhatsApp Service - Simple Tests', () => {
    // Mock implementations
    const mockPrismaService = {
        whatsAppConfig: {
            findUnique: jest.fn(),
            create: jest.fn(),
            update: jest.fn()
        },
        whatsAppMessage: {
            create: jest.fn(),
            findMany: jest.fn(),
            count: jest.fn(),
            update: jest.fn()
        }
    };
    const mockCryptoService = {
        encrypt: jest.fn().mockReturnValue('encrypted_token'),
        decrypt: jest.fn().mockReturnValue('decrypted_token')
    };
    const mockQueue = {
        add: jest.fn().mockResolvedValue({ id: 'job-1' })
    };
    // Simple WhatsApp Service implementation for testing
    class TestWhatsAppService {
        prisma;
        queue;
        crypto;
        constructor(prisma, queue, crypto) {
            this.prisma = prisma;
            this.queue = queue;
            this.crypto = crypto;
        }
        async getConfig(userId) {
            const config = await this.prisma.whatsAppConfig.findUnique({
                where: { userId }
            });
            if (!config)
                return null;
            return {
                ...config,
                twilioAuthToken: this.crypto.decrypt(config.twilioAuthToken)
            };
        }
        async sendMessage(userId, messageData) {
            const config = await this.getConfig(userId);
            if (!config) {
                throw new Error('WhatsApp não configurado');
            }
            if (!config.isActive) {
                throw new Error('WhatsApp está desativado');
            }
            if (config.messagesUsedToday >= config.dailyLimit) {
                throw new Error('Limite diário de mensagens atingido');
            }
            // Add to queue
            await this.queue.add('send-message', {
                userId,
                to: messageData.to,
                message: messageData.message
            });
            // Create message record
            const message = await this.prisma.whatsAppMessage.create({
                data: {
                    userId,
                    to: messageData.to,
                    from: config.twilioPhoneNumber,
                    body: messageData.message,
                    status: 'queued',
                    messageType: 'text'
                }
            });
            return message;
        }
    }
    let whatsappService;
    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        // Create service instance
        whatsappService = new TestWhatsAppService(mockPrismaService, mockQueue, mockCryptoService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('getConfig', () => {
        it('should return WhatsApp config for user', async () => {
            const mockConfig = {
                id: 'config-1',
                userId: 'user-1',
                twilioAccountSid: 'test_sid',
                twilioAuthToken: 'encrypted_token',
                twilioPhoneNumber: '+1234567890',
                isActive: true,
                dailyLimit: 1000,
                messagesUsedToday: 50
            };
            mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(mockConfig);
            mockCryptoService.decrypt.mockReturnValue('decrypted_token');
            const result = await whatsappService.getConfig('user-1');
            expect(result).toEqual({
                ...mockConfig,
                twilioAuthToken: 'decrypted_token'
            });
            expect(mockPrismaService.whatsAppConfig.findUnique).toHaveBeenCalledWith({
                where: { userId: 'user-1' }
            });
        });
        it('should return null if config not found', async () => {
            mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(null);
            const result = await whatsappService.getConfig('user-1');
            expect(result).toBeNull();
        });
    });
    describe('sendMessage', () => {
        it('should send message successfully', async () => {
            const mockConfig = {
                id: 'config-1',
                userId: 'user-1',
                twilioAccountSid: 'test_sid',
                twilioAuthToken: 'encrypted_token',
                twilioPhoneNumber: '+1234567890',
                isActive: true,
                dailyLimit: 1000,
                messagesUsedToday: 50
            };
            const messageData = {
                to: '+1987654321',
                message: 'Hello, World!'
            };
            const mockCreatedMessage = {
                id: 'msg-1',
                userId: 'user-1',
                to: messageData.to,
                from: mockConfig.twilioPhoneNumber,
                body: messageData.message,
                status: 'queued',
                messageType: 'text'
            };
            // Mock getConfig to return valid config
            mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue({
                ...mockConfig,
                twilioAuthToken: 'encrypted_token'
            });
            mockCryptoService.decrypt.mockReturnValue('decrypted_token');
            mockPrismaService.whatsAppMessage.create.mockResolvedValue(mockCreatedMessage);
            mockQueue.add.mockResolvedValue({ id: 'job-1' });
            const result = await whatsappService.sendMessage('user-1', messageData);
            expect(mockQueue.add).toHaveBeenCalledWith('send-message', {
                userId: 'user-1',
                to: messageData.to,
                message: messageData.message
            });
            expect(result).toEqual(mockCreatedMessage);
        });
        it('should throw error if config not found', async () => {
            mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(null);
            await expect(whatsappService.sendMessage('user-1', {
                to: '+1987654321',
                message: 'Hello'
            })).rejects.toThrow('WhatsApp não configurado');
        });
        it('should throw error if config is inactive', async () => {
            const inactiveConfig = {
                id: 'config-1',
                userId: 'user-1',
                twilioAuthToken: 'encrypted_token',
                isActive: false,
                dailyLimit: 1000,
                messagesUsedToday: 50
            };
            mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(inactiveConfig);
            mockCryptoService.decrypt.mockReturnValue('decrypted_token');
            await expect(whatsappService.sendMessage('user-1', {
                to: '+1987654321',
                message: 'Hello'
            })).rejects.toThrow('WhatsApp está desativado');
        });
        it('should throw error if daily limit exceeded', async () => {
            const limitExceededConfig = {
                id: 'config-1',
                userId: 'user-1',
                twilioAuthToken: 'encrypted_token',
                isActive: true,
                dailyLimit: 1000,
                messagesUsedToday: 1000
            };
            mockPrismaService.whatsAppConfig.findUnique.mockResolvedValue(limitExceededConfig);
            mockCryptoService.decrypt.mockReturnValue('decrypted_token');
            await expect(whatsappService.sendMessage('user-1', {
                to: '+1987654321',
                message: 'Hello'
            })).rejects.toThrow('Limite diário de mensagens atingido');
        });
    });
    // Basic functionality test
    it('should have basic Jest functionality working', () => {
        expect(1 + 1).toBe(2);
        expect('hello').toBe('hello');
        expect(true).toBeTruthy();
    });
    // Mock functionality test
    it('should have Jest mocks working', () => {
        const mockFn = jest.fn();
        mockFn('test');
        expect(mockFn).toHaveBeenCalledWith('test');
        expect(mockFn).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,