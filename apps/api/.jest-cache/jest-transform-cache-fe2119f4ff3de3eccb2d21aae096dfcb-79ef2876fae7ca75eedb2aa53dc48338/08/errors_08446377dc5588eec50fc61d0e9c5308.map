{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\utils\\errors.ts","mappings":";;;AAoPA,oCAqEC;AAGD,0CAOC;AAGD,oCAMC;AA3UD,qCAAiC;AAEjC,qBAAqB;AACR,QAAA,WAAW,GAAG;IACzB,wBAAwB;IACxB,mBAAmB,EAAE,qBAAqB;IAC1C,aAAa,EAAE,eAAe;IAC9B,qBAAqB,EAAE,uBAAuB;IAC9C,mBAAmB,EAAE,qBAAqB;IAC1C,oBAAoB,EAAE,sBAAsB;IAC5C,eAAe,EAAE,iBAAiB;IAClC,WAAW,EAAE,aAAa;IAC1B,aAAa,EAAE,eAAe;IAE9B,uBAAuB;IACvB,wBAAwB,EAAE,0BAA0B;IACpD,qBAAqB,EAAE,uBAAuB;IAC9C,qBAAqB,EAAE,uBAAuB;IAC9C,gBAAgB,EAAE,kBAAkB;IAEpC,oBAAoB;IACpB,gBAAgB,EAAE,kBAAkB;IACpC,aAAa,EAAE,eAAe;IAC9B,sBAAsB,EAAE,wBAAwB;IAChD,aAAa,EAAE,eAAe;IAC9B,gBAAgB,EAAE,kBAAkB;IAEpC,kBAAkB;IAClB,SAAS,EAAE,WAAW;IACtB,cAAc,EAAE,gBAAgB;IAChC,oBAAoB,EAAE,sBAAsB;IAC5C,mBAAmB,EAAE,qBAAqB;IAE1C,gBAAgB;IAChB,mBAAmB,EAAE,qBAAqB;IAC1C,iBAAiB,EAAE,mBAAmB;IAEtC,aAAa;IACb,eAAe,EAAE,iBAAiB;IAClC,eAAe,EAAE,iBAAiB;IAElC,iBAAiB;IACjB,yBAAyB,EAAE,2BAA2B;IACtD,yBAAyB,EAAE,2BAA2B;IACtD,yBAAyB,EAAE,2BAA2B;IAEtD,wBAAwB;IACxB,mBAAmB,EAAE,qBAAqB;IAC1C,qBAAqB,EAAE,uBAAuB;IAC9C,cAAc,EAAE,gBAAgB;IAEhC,0BAA0B;IAC1B,sBAAsB,EAAE,wBAAwB;IAChD,kBAAkB,EAAE,oBAAoB;IACxC,gBAAgB,EAAE,kBAAkB;IAEpC,qBAAqB;IACrB,cAAc,EAAE,gBAAgB;IAChC,iBAAiB,EAAE,mBAAmB;IACtC,aAAa,EAAE,eAAe;IAE9B,kBAAkB;IAClB,cAAc,EAAE,gBAAgB;IAChC,kBAAkB,EAAE,oBAAoB;IAExC,iBAAiB;IACjB,cAAc,EAAE,gBAAgB;IAChC,mBAAmB,EAAE,qBAAqB;IAC1C,aAAa,EAAE,eAAe;CACtB,CAAA;AAIV,yBAAyB;AACzB,MAAa,QAAS,SAAQ,KAAK;IACjB,IAAI,CAAQ;IACZ,UAAU,CAAQ;IAClB,OAAO,CAAM;IACb,SAAS,CAAQ;IAEjC,YACE,OAAe,EACf,OAAe,mBAAW,CAAC,cAAc,EACzC,aAAqB,GAAG,EACxB,OAAa;QAEb,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,UAAU,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAA;QAEzC,8BAA8B;QAC9B,IAAI,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAC5B,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;QACzC,CAAC;IACH,CAAC;IAED,oCAAoC;IACpC,MAAM;QACJ,OAAO;YACL,KAAK,EAAE;gBACL,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,GAAG,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;aAC/C;SACF,CAAA;IACH,CAAC;IAED,2CAA2C;IAC3C,MAAM,CAAC,UAAU,CAAC,OAAe,EAAE,IAAa,EAAE,OAAa;QAC7D,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,mBAAW,CAAC,aAAa,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IAC/E,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,OAAe,EAAE,IAAa,EAAE,OAAa;QAC/D,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,mBAAW,CAAC,aAAa,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IAC/E,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,OAAe,EAAE,IAAa,EAAE,OAAa;QAC5D,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,mBAAW,CAAC,wBAAwB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IAC1F,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAAe,EAAE,IAAa,EAAE,OAAa;QAC3D,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,mBAAW,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IAC3E,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAAe,EAAE,IAAa,EAAE,OAAa;QAC3D,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,mBAAW,CAAC,cAAc,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IAChF,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,OAAe,EAAE,IAAa,EAAE,OAAa;QAClE,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,mBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IACrF,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,OAAe,EAAE,IAAa,EAAE,OAAa;QAChE,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,mBAAW,CAAC,cAAc,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IAChF,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,OAAe,EAAE,IAAa,EAAE,OAAa;QACrE,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,mBAAW,CAAC,mBAAmB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IACrF,CAAC;CACF;AAtED,4BAsEC;AAED,yBAAyB;AACzB,MAAa,eAAgB,SAAQ,QAAQ;IAC3C,YAAY,OAAe,EAAE,OAAa;QACxC,KAAK,CAAC,OAAO,EAAE,mBAAW,CAAC,gBAAgB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;QAC1D,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAA;IAC/B,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,KAAU;QAC5B,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC;YAC/C,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YACzB,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,IAAI,EAAE,GAAG,CAAC,IAAI;SACf,CAAC,CAAC,CAAA;QAEH,OAAO,IAAI,eAAe,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAA;IAC1D,CAAC;CACF;AAfD,0CAeC;AAED,uBAAuB;AACvB,MAAa,aAAc,SAAQ,QAAQ;IACzC,YAAY,OAAe,EAAE,aAAqB,EAAE,OAAa;QAC/D,KAAK,CAAC,OAAO,EAAE,mBAAW,CAAC,cAAc,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;QACxD,IAAI,CAAC,IAAI,GAAG,eAAe,CAAA;QAE3B,IAAI,aAAa,EAAE,CAAC;YAClB,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAA;QAClC,CAAC;IACH,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,KAAU;QAC/B,IAAI,OAAO,GAAG,2BAA2B,CAAA;QACzC,IAAI,IAAI,GAAG,mBAAW,CAAC,cAAc,CAAA;QACrC,IAAI,UAAU,GAAG,GAAG,CAAA;QAEpB,qCAAqC;QACrC,QAAQ,KAAK,CAAC,IAAI,EAAE,CAAC;YACnB,KAAK,OAAO;gBACV,OAAO,GAAG,yCAAyC,CAAA;gBACnD,IAAI,GAAG,mBAAW,CAAC,cAAc,CAAA;gBACjC,UAAU,GAAG,GAAG,CAAA;gBAChB,MAAK;YACP,KAAK,OAAO;gBACV,OAAO,GAAG,kBAAkB,CAAA;gBAC5B,IAAI,GAAG,mBAAW,CAAC,SAAS,CAAA;gBAC5B,UAAU,GAAG,GAAG,CAAA;gBAChB,MAAK;YACP,KAAK,OAAO;gBACV,OAAO,GAAG,+BAA+B,CAAA;gBACzC,IAAI,GAAG,mBAAW,CAAC,gBAAgB,CAAA;gBACnC,UAAU,GAAG,GAAG,CAAA;gBAChB,MAAK;YACP,KAAK,OAAO;gBACV,OAAO,GAAG,qBAAqB,CAAA;gBAC/B,IAAI,GAAG,mBAAW,CAAC,aAAa,CAAA;gBAChC,UAAU,GAAG,GAAG,CAAA;gBAChB,MAAK;YACP;gBACE,eAAM,CAAC,KAAK,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAA;QACjD,CAAC;QAED,OAAO,IAAI,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE;YACvC,UAAU,EAAE,KAAK,CAAC,IAAI;YACtB,IAAI,EAAE,KAAK,CAAC,IAAI;SACjB,CAAC,CAAA;IACJ,CAAC;CACF;AA9CD,sCA8CC;AAED,+BAA+B;AAC/B,MAAa,oBAAqB,SAAQ,QAAQ;IAChC,OAAO,CAAQ;IAE/B,YAAY,OAAe,EAAE,OAAe,EAAE,aAAqB,EAAE,OAAa;QAChF,KAAK,CAAC,OAAO,EAAE,mBAAW,CAAC,sBAAsB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;QAChE,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAA;QAClC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QAEtB,IAAI,aAAa,EAAE,CAAC;YAClB,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAA;QAClC,CAAC;IACH,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAAe,EAAE,KAAa,EAAE,OAAa;QAC3D,OAAO,IAAI,oBAAoB,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE;YAC1D,GAAG,OAAO;YACV,IAAI,EAAE,mBAAW,CAAC,kBAAkB;SACrC,CAAC,CAAA;IACJ,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,OAAe,EAAE,KAAa,EAAE,OAAa;QACzD,OAAO,IAAI,oBAAoB,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YACxD,GAAG,OAAO;YACV,IAAI,EAAE,mBAAW,CAAC,gBAAgB;SACnC,CAAC,CAAA;IACJ,CAAC;CACF;AA1BD,oDA0BC;AAED,4BAA4B;AAC5B,SAAgB,YAAY,CAAC,KAAmB,EAAE,OAAY,EAAE,KAAU;IACxE,YAAY;IACZ,eAAM,CAAC,KAAK,CAAC;QACX,KAAK,EAAE;YACL,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,IAAI,EAAG,KAAa,CAAC,IAAI;YACzB,UAAU,EAAE,KAAK,CAAC,UAAU;SAC7B;QACD,OAAO,EAAE;YACP,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,GAAG,EAAE,OAAO,CAAC,GAAG;YAChB,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,EAAE,EAAE,OAAO,CAAC,EAAE;YACd,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,EAAE;YACxB,cAAc,EAAE,OAAO,CAAC,YAAY,EAAE,EAAE;SACzC;KACF,EAAE,eAAe,CAAC,CAAA;IAEnB,+BAA+B;IAC/B,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;QAC9B,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAA;IAC5D,CAAC;IAED,IAAI,KAAK,YAAY,eAAe,EAAE,CAAC;QACrC,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAA;IAC5D,CAAC;IAED,IAAI,KAAK,YAAY,aAAa,EAAE,CAAC;QACnC,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAA;IAC5D,CAAC;IAED,IAAI,KAAK,YAAY,oBAAoB,EAAE,CAAC;QAC1C,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAA;IAC5D,CAAC;IAED,mCAAmC;IACnC,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;QACrB,MAAM,eAAe,GAAG,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;QAC3D,OAAO,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAA;IAChF,CAAC;IAED,8BAA8B;IAC9B,IAAI,KAAK,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;QAC7B,MAAM,cAAc,GAAG,QAAQ,CAAC,eAAe,CAC7C,2CAA2C,EAC3C,mBAAW,CAAC,mBAAmB,CAChC,CAAA;QACD,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAA;IACxD,CAAC;IAED,6BAA6B;IAC7B,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC;QAC/C,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAC3B,KAAK,CAAC,OAAO,IAAI,aAAa,EAC9B,mBAAW,CAAC,aAAa,EACzB,KAAK,CAAC,UAAU,CACjB,CAAA;QACD,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAA;IAC/D,CAAC;IAED,2BAA2B;IAC3B,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAC1C,8BAA8B,EAC9B,mBAAW,CAAC,cAAc,EAC1B,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,SAAS,CACtF,CAAA;IAED,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAA;AACvD,CAAC;AAED,oBAAoB;AACpB,SAAgB,eAAe,CAAC,OAAY,EAAE,KAAU;IACtD,MAAM,aAAa,GAAG,QAAQ,CAAC,QAAQ,CACrC,SAAS,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,GAAG,YAAY,EAClD,mBAAW,CAAC,SAAS,CACtB,CAAA;IAED,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAA;AACvD,CAAC;AAED,yCAAyC;AACzC,SAAgB,YAAY,CAAC,EAAY;IACvC,OAAO,CAAC,OAAY,EAAE,KAAU,EAAE,EAAE;QAClC,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACzD,MAAM,KAAK,CAAA;QACb,CAAC,CAAC,CAAA;IACJ,CAAC,CAAA;AACH,CAAC","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\utils\\errors.ts"],"sourcesContent":["import type { FastifyError } from 'fastify'\nimport { logger } from './logger'\n\n// Custom error codes\nexport const ERROR_CODES = {\n  // Authentication errors\n  INVALID_CREDENTIALS: 'INVALID_CREDENTIALS',\n  INVALID_TOKEN: 'INVALID_TOKEN',\n  INVALID_REFRESH_TOKEN: 'INVALID_REFRESH_TOKEN',\n  MISSING_AUTH_HEADER: 'MISSING_AUTH_HEADER',\n  MISSING_ACCESS_TOKEN: 'MISSING_ACCESS_TOKEN',\n  SESSION_EXPIRED: 'SESSION_EXPIRED',\n  AUTH_FAILED: 'AUTH_FAILED',\n  AUTH_REQUIRED: 'AUTH_REQUIRED',\n  \n  // Authorization errors\n  INSUFFICIENT_PERMISSIONS: 'INSUFFICIENT_PERMISSIONS',\n  ORGANIZATION_REQUIRED: 'ORGANIZATION_REQUIRED',\n  ORGANIZATION_DISABLED: 'ORGANIZATION_DISABLED',\n  ACCOUNT_DISABLED: 'ACCOUNT_DISABLED',\n  \n  // Validation errors\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  INVALID_INPUT: 'INVALID_INPUT',\n  MISSING_REQUIRED_FIELD: 'MISSING_REQUIRED_FIELD',\n  INVALID_EMAIL: 'INVALID_EMAIL',\n  INVALID_PASSWORD: 'INVALID_PASSWORD',\n  \n  // Resource errors\n  NOT_FOUND: 'NOT_FOUND',\n  ALREADY_EXISTS: 'ALREADY_EXISTS',\n  EMAIL_ALREADY_EXISTS: 'EMAIL_ALREADY_EXISTS',\n  SLUG_ALREADY_EXISTS: 'SLUG_ALREADY_EXISTS',\n  \n  // Rate limiting\n  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',\n  TOO_MANY_REQUESTS: 'TOO_MANY_REQUESTS',\n  \n  // API errors\n  MISSING_API_KEY: 'MISSING_API_KEY',\n  INVALID_API_KEY: 'INVALID_API_KEY',\n  \n  // Webhook errors\n  MISSING_WEBHOOK_SIGNATURE: 'MISSING_WEBHOOK_SIGNATURE',\n  INVALID_WEBHOOK_SIGNATURE: 'INVALID_WEBHOOK_SIGNATURE',\n  INVALID_WEBHOOK_TIMESTAMP: 'INVALID_WEBHOOK_TIMESTAMP',\n  \n  // Business logic errors\n  PLAN_LIMIT_EXCEEDED: 'PLAN_LIMIT_EXCEEDED',\n  FEATURE_NOT_AVAILABLE: 'FEATURE_NOT_AVAILABLE',\n  QUOTA_EXCEEDED: 'QUOTA_EXCEEDED',\n  \n  // External service errors\n  EXTERNAL_SERVICE_ERROR: 'EXTERNAL_SERVICE_ERROR',\n  FACEBOOK_API_ERROR: 'FACEBOOK_API_ERROR',\n  GOOGLE_API_ERROR: 'GOOGLE_API_ERROR',\n  \n  // File upload errors\n  FILE_TOO_LARGE: 'FILE_TOO_LARGE',\n  INVALID_FILE_TYPE: 'INVALID_FILE_TYPE',\n  UPLOAD_FAILED: 'UPLOAD_FAILED',\n  \n  // Database errors\n  DATABASE_ERROR: 'DATABASE_ERROR',\n  TRANSACTION_FAILED: 'TRANSACTION_FAILED',\n  \n  // Generic errors\n  INTERNAL_ERROR: 'INTERNAL_ERROR',\n  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',\n  LOGOUT_FAILED: 'LOGOUT_FAILED',\n} as const\n\nexport type ErrorCode = keyof typeof ERROR_CODES\n\n// Custom API Error class\nexport class ApiError extends Error {\n  public readonly code: string\n  public readonly statusCode: number\n  public readonly details?: any\n  public readonly timestamp: string\n\n  constructor(\n    message: string,\n    code: string = ERROR_CODES.INTERNAL_ERROR,\n    statusCode: number = 500,\n    details?: any\n  ) {\n    super(message)\n    this.name = 'ApiError'\n    this.code = code\n    this.statusCode = statusCode\n    this.details = details\n    this.timestamp = new Date().toISOString()\n\n    // Maintain proper stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ApiError)\n    }\n  }\n\n  // Convert to JSON for API responses\n  toJSON() {\n    return {\n      error: {\n        message: this.message,\n        code: this.code,\n        statusCode: this.statusCode,\n        timestamp: this.timestamp,\n        ...(this.details && { details: this.details }),\n      },\n    }\n  }\n\n  // Static factory methods for common errors\n  static badRequest(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.INVALID_INPUT, 400, details)\n  }\n\n  static unauthorized(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.AUTH_REQUIRED, 401, details)\n  }\n\n  static forbidden(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.INSUFFICIENT_PERMISSIONS, 403, details)\n  }\n\n  static notFound(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.NOT_FOUND, 404, details)\n  }\n\n  static conflict(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.ALREADY_EXISTS, 409, details)\n  }\n\n  static tooManyRequests(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.RATE_LIMIT_EXCEEDED, 429, details)\n  }\n\n  static internalError(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.INTERNAL_ERROR, 500, details)\n  }\n\n  static serviceUnavailable(message: string, code?: string, details?: any) {\n    return new ApiError(message, code || ERROR_CODES.SERVICE_UNAVAILABLE, 503, details)\n  }\n}\n\n// Validation Error class\nexport class ValidationError extends ApiError {\n  constructor(message: string, details?: any) {\n    super(message, ERROR_CODES.VALIDATION_ERROR, 400, details)\n    this.name = 'ValidationError'\n  }\n\n  static fromZodError(error: any) {\n    const details = error.errors?.map((err: any) => ({\n      field: err.path.join('.'),\n      message: err.message,\n      code: err.code,\n    }))\n\n    return new ValidationError('Validation failed', details)\n  }\n}\n\n// Database Error class\nexport class DatabaseError extends ApiError {\n  constructor(message: string, originalError?: Error, details?: any) {\n    super(message, ERROR_CODES.DATABASE_ERROR, 500, details)\n    this.name = 'DatabaseError'\n    \n    if (originalError) {\n      this.stack = originalError.stack\n    }\n  }\n\n  static fromPrismaError(error: any) {\n    let message = 'Database operation failed'\n    let code = ERROR_CODES.DATABASE_ERROR\n    let statusCode = 500\n\n    // Handle specific Prisma error codes\n    switch (error.code) {\n      case 'P2002':\n        message = 'A record with this value already exists'\n        code = ERROR_CODES.ALREADY_EXISTS\n        statusCode = 409\n        break\n      case 'P2025':\n        message = 'Record not found'\n        code = ERROR_CODES.NOT_FOUND\n        statusCode = 404\n        break\n      case 'P2003':\n        message = 'Foreign key constraint failed'\n        code = ERROR_CODES.VALIDATION_ERROR\n        statusCode = 400\n        break\n      case 'P2014':\n        message = 'Invalid ID provided'\n        code = ERROR_CODES.INVALID_INPUT\n        statusCode = 400\n        break\n      default:\n        logger.error(error, 'Unhandled Prisma error')\n    }\n\n    return new DatabaseError(message, error, {\n      prismaCode: error.code,\n      meta: error.meta,\n    })\n  }\n}\n\n// External Service Error class\nexport class ExternalServiceError extends ApiError {\n  public readonly service: string\n\n  constructor(service: string, message: string, originalError?: Error, details?: any) {\n    super(message, ERROR_CODES.EXTERNAL_SERVICE_ERROR, 502, details)\n    this.name = 'ExternalServiceError'\n    this.service = service\n    \n    if (originalError) {\n      this.stack = originalError.stack\n    }\n  }\n\n  static facebook(message: string, error?: Error, details?: any) {\n    return new ExternalServiceError('Facebook', message, error, {\n      ...details,\n      code: ERROR_CODES.FACEBOOK_API_ERROR,\n    })\n  }\n\n  static google(message: string, error?: Error, details?: any) {\n    return new ExternalServiceError('Google', message, error, {\n      ...details,\n      code: ERROR_CODES.GOOGLE_API_ERROR,\n    })\n  }\n}\n\n// Error handler for Fastify\nexport function errorHandler(error: FastifyError, request: any, reply: any) {\n  // Log error\n  logger.error({\n    error: {\n      message: error.message,\n      stack: error.stack,\n      code: (error as any).code,\n      statusCode: error.statusCode,\n    },\n    request: {\n      method: request.method,\n      url: request.url,\n      headers: request.headers,\n      ip: request.ip,\n      userId: request.user?.id,\n      organizationId: request.organization?.id,\n    },\n  }, 'Request error')\n\n  // Handle different error types\n  if (error instanceof ApiError) {\n    return reply.status(error.statusCode).send(error.toJSON())\n  }\n\n  if (error instanceof ValidationError) {\n    return reply.status(error.statusCode).send(error.toJSON())\n  }\n\n  if (error instanceof DatabaseError) {\n    return reply.status(error.statusCode).send(error.toJSON())\n  }\n\n  if (error instanceof ExternalServiceError) {\n    return reply.status(error.statusCode).send(error.toJSON())\n  }\n\n  // Handle Fastify validation errors\n  if (error.validation) {\n    const validationError = ValidationError.fromZodError(error)\n    return reply.status(validationError.statusCode).send(validationError.toJSON())\n  }\n\n  // Handle rate limiting errors\n  if (error.statusCode === 429) {\n    const rateLimitError = ApiError.tooManyRequests(\n      'Too many requests, please try again later',\n      ERROR_CODES.RATE_LIMIT_EXCEEDED\n    )\n    return reply.status(429).send(rateLimitError.toJSON())\n  }\n\n  // Handle generic HTTP errors\n  if (error.statusCode && error.statusCode < 500) {\n    const apiError = new ApiError(\n      error.message || 'Bad request',\n      ERROR_CODES.INVALID_INPUT,\n      error.statusCode\n    )\n    return reply.status(error.statusCode).send(apiError.toJSON())\n  }\n\n  // Handle unexpected errors\n  const internalError = ApiError.internalError(\n    'An unexpected error occurred',\n    ERROR_CODES.INTERNAL_ERROR,\n    process.env.NODE_ENV === 'development' ? { originalError: error.message } : undefined\n  )\n\n  return reply.status(500).send(internalError.toJSON())\n}\n\n// Not found handler\nexport function notFoundHandler(request: any, reply: any) {\n  const notFoundError = ApiError.notFound(\n    `Route ${request.method} ${request.url} not found`,\n    ERROR_CODES.NOT_FOUND\n  )\n\n  return reply.status(404).send(notFoundError.toJSON())\n}\n\n// Async error wrapper for route handlers\nexport function asyncHandler(fn: Function) {\n  return (request: any, reply: any) => {\n    return Promise.resolve(fn(request, reply)).catch((error) => {\n      throw error\n    })\n  }\n}"],"version":3}