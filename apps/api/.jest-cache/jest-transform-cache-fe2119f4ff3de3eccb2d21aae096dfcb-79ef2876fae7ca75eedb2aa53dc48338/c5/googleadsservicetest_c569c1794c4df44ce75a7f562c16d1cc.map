{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\__tests__\\google-ads.service.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\__tests__\\google-ads.service.test.ts"],"sourcesContent":["import { GoogleAdsService } from '../google-ads.service';\nimport { PrismaService } from '../../database/prisma.service';\nimport { CryptoService } from '../crypto.service';\nimport { GoogleAdsApi } from 'google-ads-api';\nimport axios from 'axios';\n\n// Mock logger to avoid env import\njest.mock('../../utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n  }\n}));\n\n// Mock dependencies\njest.mock('axios');\njest.mock('google-ads-api');\njest.mock('../../database/prisma.service');\njest.mock('../crypto.service');\n\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\nconst MockedGoogleAdsApi = GoogleAdsApi as jest.MockedClass<typeof GoogleAdsApi>;\n\ndescribe('GoogleAdsService', () => {\n  let service: GoogleAdsService;\n  let mockPrismaService: jest.Mocked<PrismaService>;\n  let mockCryptoService: jest.Mocked<CryptoService>;\n  let mockGoogleAdsClient: any;\n\n  const mockUser = {\n    id: 'user-1',\n    email: 'test@example.com',\n    organizationId: 'org-1',\n  };\n\n  const mockIntegration = {\n    id: 'integration-1',\n    organizationId: 'org-1',\n    platform: 'google_ads',\n    isActive: true,\n    accessToken: 'encrypted-access-token',\n    refreshToken: 'encrypted-refresh-token',\n    expiresAt: new Date(Date.now() + 3600000), // 1 hour from now\n    settings: {\n      customerId: '123-456-7890',\n      developerToken: 'test-developer-token',\n    },\n  };\n\n  const mockGoogleAdsAccount = {\n    customer: {\n      resource_name: 'customers/1234567890',\n      id: '1234567890',\n      descriptive_name: 'Test Account',\n      currency_code: 'USD',\n      time_zone: 'America/New_York',\n      status: 'ENABLED',\n      type: 'STANDARD',\n    },\n  };\n\n  const mockCampaign = {\n    campaign: {\n      resource_name: 'customers/1234567890/campaigns/987654321',\n      id: '987654321',\n      name: 'Test Campaign',\n      status: 'ENABLED',\n      advertising_channel_type: 'SEARCH',\n      start_date: '2024-01-01',\n      end_date: '2024-12-31',\n    },\n    campaign_budget: {\n      amount_micros: '10000000', // $10 in micros\n      delivery_method: 'STANDARD',\n    },\n    metrics: {\n      impressions: '1000',\n      clicks: '50',\n      cost_micros: '5000000', // $5 in micros\n      conversions: '5',\n      ctr: '0.05',\n      average_cpc: '100000', // $0.10 in micros\n    },\n  };\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Mock PrismaService\n    mockPrismaService = {\n      integration: {\n        findFirst: jest.fn(),\n        findUnique: jest.fn(),\n        create: jest.fn(),\n        update: jest.fn(),\n        delete: jest.fn(),\n        upsert: jest.fn(),\n        findMany: jest.fn(),\n      },\n      googleAdsAccount: {\n        findMany: jest.fn(),\n        create: jest.fn(),\n        update: jest.fn(),\n      },\n      googleAdsCampaign: {\n        findMany: jest.fn(),\n        create: jest.fn(),\n        createMany: jest.fn(),\n        update: jest.fn(),\n        upsert: jest.fn(),\n      },\n      googleAdsKeyword: {\n        findMany: jest.fn(),\n        create: jest.fn(),\n        createMany: jest.fn(),\n        update: jest.fn(),\n        upsert: jest.fn(),\n      },\n      googleAdsDailyMetrics: {\n        findMany: jest.fn(),\n        create: jest.fn(),\n        createMany: jest.fn(),\n        upsert: jest.fn(),\n      },\n      googleAdsSyncLog: {\n        create: jest.fn(),\n        findMany: jest.fn(),\n      },\n      campaign: {\n        upsert: jest.fn(),\n      },\n      keyword: {\n        upsert: jest.fn(),\n      },\n      campaignMetrics: {\n        upsert: jest.fn(),\n      },\n      $transaction: jest.fn(),\n    } as any;\n\n    // Mock CryptoService\n    mockCryptoService = {\n      encrypt: jest.fn().mockReturnValue('encrypted-token'),\n      decrypt: jest.fn().mockReturnValue('decrypted-token'),\n    } as any;\n\n    // Mock Google Ads API client\n    mockGoogleAdsClient = {\n      Customer: jest.fn().mockReturnValue({\n        query: jest.fn(),\n        listAccessibleCustomers: jest.fn(),\n      }),\n    };\n\n    MockedGoogleAdsApi.mockImplementation(() => mockGoogleAdsClient);\n\n\n\n    // Mock Google Ads config\n    const mockGoogleAdsConfig = {\n      clientId: 'test-client-id',\n      clientSecret: 'test-client-secret',\n      developerToken: 'test-developer-token',\n      loginCustomerId: 'test-login-customer-id',\n      scopes: ['https://www.googleapis.com/auth/adwords']\n    };\n\n    // Create service instance\n    service = new GoogleAdsService(\n      mockPrismaService,\n      mockCryptoService,\n      mockGoogleAdsConfig\n    );\n  });\n\n  describe('generateAuthUrl', () => {\n    it('should generate a valid OAuth URL', () => {\n      const userId = 'test-user-id';\n      const redirectUri = 'http://localhost:3000/callback';\n      const result = service.generateAuthUrl(userId, redirectUri);\n\n      expect(typeof result).toBe('string');\n      expect(result).toContain('accounts.google.com/o/oauth2/v2/auth');\n      expect(result).toContain('client_id=test-client-id');\n      expect(result).toContain('redirect_uri=' + encodeURIComponent(redirectUri));\n      expect(result).toContain('scope=' + encodeURIComponent('https://www.googleapis.com/auth/adwords'));\n    });\n  });\n\n  describe('exchangeCodeForToken', () => {\n    const mockTokenResponse = {\n      data: {\n        access_token: 'new-access-token',\n        refresh_token: 'new-refresh-token',\n        expires_in: 3600,\n        token_type: 'Bearer',\n        scope: 'https://www.googleapis.com/auth/adwords'\n      },\n    };\n\n    beforeEach(() => {\n      mockedAxios.post.mockResolvedValue(mockTokenResponse);\n    });\n\n    it('should exchange authorization code for tokens', async () => {\n      const code = 'auth-code';\n      const redirectUri = 'http://localhost:3000/callback';\n\n      const result = await service.exchangeCodeForToken(code, redirectUri);\n\n      expect(mockedAxios.post).toHaveBeenCalledWith(\n        'https://oauth2.googleapis.com/token',\n        expect.objectContaining({\n          client_id: 'test-client-id',\n          client_secret: 'test-client-secret',\n          code,\n          grant_type: 'authorization_code',\n          redirect_uri: redirectUri,\n        })\n      );\n\n      expect(result).toEqual({\n        access_token: 'new-access-token',\n        refresh_token: 'new-refresh-token',\n        expires_in: 3600,\n        token_type: 'Bearer',\n        scope: 'https://www.googleapis.com/auth/adwords'\n      });\n    });\n\n    it('should throw error for invalid authorization code', async () => {\n      mockedAxios.post.mockRejectedValue(new Error('Invalid authorization code'));\n\n      await expect(\n        service.exchangeCodeForToken('invalid-code', 'redirect-uri')\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('getCustomerAccounts', () => {\n    it('should fetch Google Ads customer accounts', async () => {\n      const accessToken = 'test-access-token';\n      \n      // Mock the getGoogleAdsClient method\n      const mockReport = jest.fn().mockResolvedValue([{\n        customer: {\n          id: '1234567890',\n          descriptive_name: 'Test Account',\n          currency_code: 'USD',\n          time_zone: 'America/New_York',\n          status: 'ENABLED',\n          manager: false,\n        }\n      }]);\n      const mockCustomer = jest.fn().mockReturnValue({ report: mockReport });\n      const mockClient = { Customer: mockCustomer };\n      \n      jest.spyOn(service as any, 'getGoogleAdsClient').mockResolvedValue(mockClient);\n      \n      const result = await service.getCustomerAccounts(accessToken);\n\n      expect(mockCustomer).toHaveBeenCalled();\n      expect(mockReport).toHaveBeenCalled();\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        id: '1234567890',\n        name: 'Test Account',\n        currency: 'USD',\n        timezone: 'America/New_York',\n        status: 'ENABLED',\n        type: 'CLIENT',\n      });\n    });\n  });\n\n\n\n\n});"],"version":3}