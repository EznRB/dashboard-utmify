c47c283da2dd4def24ba62c646f97e97
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.googleAdsConfig = exports.uploadConfig = exports.rateLimitConfig = exports.corsConfig = exports.smtpConfig = exports.jwtConfig = exports.redisConfig = exports.dbConfig = exports.isTest = exports.isProduction = exports.isDevelopment = exports.config = void 0;
const zod_1 = require("zod");
// Environment variables schema
const envSchema = zod_1.z.object({
    // Server
    NODE_ENV: zod_1.z.enum(['development', 'production', 'test']).default('development'),
    PORT: zod_1.z.coerce.number().default(3001),
    HOST: zod_1.z.string().default('0.0.0.0'),
    LOG_LEVEL: zod_1.z.enum(['fatal', 'error', 'warn', 'info', 'debug', 'trace']).default('info'),
    // Database
    DATABASE_URL: zod_1.z.string().min(1, 'DATABASE_URL is required'),
    // Redis
    REDIS_URL: zod_1.z.string().default('redis://localhost:6379'),
    // JWT
    JWT_SECRET: zod_1.z.string().min(32, 'JWT_SECRET must be at least 32 characters'),
    JWT_REFRESH_SECRET: zod_1.z.string().min(32, 'JWT_REFRESH_SECRET must be at least 32 characters'),
    JWT_ACCESS_EXPIRES_IN: zod_1.z.string().default('15m'),
    JWT_REFRESH_EXPIRES_IN: zod_1.z.string().default('7d'),
    // Email
    SMTP_HOST: zod_1.z.string().optional(),
    SMTP_PORT: zod_1.z.coerce.number().optional(),
    SMTP_USER: zod_1.z.string().optional(),
    SMTP_PASS: zod_1.z.string().optional(),
    SMTP_FROM: zod_1.z.string().email().optional(),
    // External APIs
    GOOGLE_ADS_CLIENT_ID: zod_1.z.string().optional(),
    GOOGLE_ADS_CLIENT_SECRET: zod_1.z.string().optional(),
    GOOGLE_ADS_DEVELOPER_TOKEN: zod_1.z.string().optional(),
    GOOGLE_ADS_LOGIN_CUSTOMER_ID: zod_1.z.string().optional(),
    FACEBOOK_APP_ID: zod_1.z.string().optional(),
    FACEBOOK_APP_SECRET: zod_1.z.string().optional(),
    // Rate Limiting
    RATE_LIMIT_MAX: zod_1.z.coerce.number().default(100),
    RATE_LIMIT_WINDOW: zod_1.z.coerce.number().default(60000), // 1 minute
    // CORS
    CORS_ORIGIN: zod_1.z.string().default('http://localhost:3000'),
    // File Upload
    MAX_FILE_SIZE: zod_1.z.coerce.number().default(5242880), // 5MB
    UPLOAD_DIR: zod_1.z.string().default('./uploads'),
    // Webhooks
    WEBHOOK_SECRET: zod_1.z.string().optional(),
    // Monitoring
    SENTRY_DSN: zod_1.z.string().optional(),
    // Feature Flags
    ENABLE_SWAGGER: zod_1.z.coerce.boolean().default(true),
    ENABLE_METRICS: zod_1.z.coerce.boolean().default(true),
    ENABLE_RATE_LIMITING: zod_1.z.coerce.boolean().default(true),
});
// Parse and validate environment variables
const parseEnv = () => {
    try {
        return envSchema.parse(process.env);
    }
    catch (error) {
        if (error instanceof zod_1.z.ZodError) {
            const missingVars = error.errors
                .map(err => `${err.path.join('.')}: ${err.message}`)
                .join('\n');
            console.error('❌ Invalid environment variables:');
            console.error(missingVars);
            process.exit(1);
        }
        throw error;
    }
};
exports.config = parseEnv();
// Helper to check if we're in development
exports.isDevelopment = exports.config.NODE_ENV === 'development';
exports.isProduction = exports.config.NODE_ENV === 'production';
exports.isTest = exports.config.NODE_ENV === 'test';
// Database configuration
exports.dbConfig = {
    url: exports.config.DATABASE_URL,
    // Add connection pool settings for production
    ...(exports.isProduction && {
        pool: {
            min: 2,
            max: 10,
            acquireTimeoutMillis: 30000,
            createTimeoutMillis: 30000,
            destroyTimeoutMillis: 5000,
            idleTimeoutMillis: 30000,
            reapIntervalMillis: 1000,
            createRetryIntervalMillis: 200,
        },
    }),
};
// Redis configuration
exports.redisConfig = {
    url: exports.config.REDIS_URL,
    retryDelayOnFailover: 100,
    enableReadyCheck: false,
    maxRetriesPerRequest: 3,
    lazyConnect: true,
    ...(exports.isProduction && {
        family: 4,
        keepAlive: true,
        connectTimeout: 10000,
        commandTimeout: 5000,
    }),
};
// JWT configuration
exports.jwtConfig = {
    secret: exports.config.JWT_SECRET,
    refreshSecret: exports.config.JWT_REFRESH_SECRET,
    accessExpiresIn: exports.config.JWT_ACCESS_EXPIRES_IN,
    refreshExpiresIn: exports.config.JWT_REFRESH_EXPIRES_IN,
    algorithm: 'HS256',
    issuer: 'utmify-api',
    audience: 'utmify-app',
};
// SMTP configuration
exports.smtpConfig = exports.config.SMTP_HOST ? {
    host: exports.config.SMTP_HOST,
    port: exports.config.SMTP_PORT || 587,
    secure: exports.config.SMTP_PORT === 465,
    auth: {
        user: exports.config.SMTP_USER,
        pass: exports.config.SMTP_PASS,
    },
    from: exports.config.SMTP_FROM,
} : null;
// CORS configuration
exports.corsConfig = {
    origin: exports.config.CORS_ORIGIN.split(',').map(origin => origin.trim()),
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
};
// Rate limiting configuration
exports.rateLimitConfig = {
    max: exports.config.RATE_LIMIT_MAX,
    timeWindow: exports.config.RATE_LIMIT_WINDOW,
    skipSuccessfulRequests: false,
    skipOnError: true,
    keyGenerator: (request) => {
        return request.ip || 'anonymous';
    },
};
// File upload configuration
exports.uploadConfig = {
    maxFileSize: exports.config.MAX_FILE_SIZE,
    uploadDir: exports.config.UPLOAD_DIR,
    allowedMimeTypes: [
        'image/jpeg',
        'image/png',
        'image/webp',
        'image/svg+xml',
        'text/csv',
        'application/json',
    ],
};
// Google Ads API Configuration
exports.googleAdsConfig = exports.config.GOOGLE_ADS_CLIENT_ID ? {
    clientId: exports.config.GOOGLE_ADS_CLIENT_ID,
    clientSecret: exports.config.GOOGLE_ADS_CLIENT_SECRET,
    developerToken: exports.config.GOOGLE_ADS_DEVELOPER_TOKEN,
    loginCustomerId: exports.config.GOOGLE_ADS_LOGIN_CUSTOMER_ID,
    apiVersion: 'v15',
} : null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,