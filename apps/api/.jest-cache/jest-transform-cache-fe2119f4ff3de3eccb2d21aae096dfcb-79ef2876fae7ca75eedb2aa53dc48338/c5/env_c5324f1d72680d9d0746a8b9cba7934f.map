{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\config\\env.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\config\\env.ts"],"sourcesContent":["import { z } from 'zod'\n\n// Environment variables schema\nconst envSchema = z.object({\n  // Server\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n  PORT: z.coerce.number().default(3001),\n  HOST: z.string().default('0.0.0.0'),\n  LOG_LEVEL: z.enum(['fatal', 'error', 'warn', 'info', 'debug', 'trace']).default('info'),\n  \n  // Database\n  DATABASE_URL: z.string().min(1, 'DATABASE_URL is required'),\n  \n  // Redis\n  REDIS_URL: z.string().default('redis://localhost:6379'),\n  \n  // JWT\n  JWT_SECRET: z.string().min(32, 'JWT_SECRET must be at least 32 characters'),\n  JWT_REFRESH_SECRET: z.string().min(32, 'JWT_REFRESH_SECRET must be at least 32 characters'),\n  JWT_ACCESS_EXPIRES_IN: z.string().default('15m'),\n  JWT_REFRESH_EXPIRES_IN: z.string().default('7d'),\n  \n  // Email\n  SMTP_HOST: z.string().optional(),\n  SMTP_PORT: z.coerce.number().optional(),\n  SMTP_USER: z.string().optional(),\n  SMTP_PASS: z.string().optional(),\n  SMTP_FROM: z.string().email().optional(),\n  \n  // External APIs\n  GOOGLE_ADS_CLIENT_ID: z.string().optional(),\n  GOOGLE_ADS_CLIENT_SECRET: z.string().optional(),\n  GOOGLE_ADS_DEVELOPER_TOKEN: z.string().optional(),\n  GOOGLE_ADS_LOGIN_CUSTOMER_ID: z.string().optional(),\n  FACEBOOK_APP_ID: z.string().optional(),\n  FACEBOOK_APP_SECRET: z.string().optional(),\n  \n  // Rate Limiting\n  RATE_LIMIT_MAX: z.coerce.number().default(100),\n  RATE_LIMIT_WINDOW: z.coerce.number().default(60000), // 1 minute\n  \n  // CORS\n  CORS_ORIGIN: z.string().default('http://localhost:3000'),\n  \n  // File Upload\n  MAX_FILE_SIZE: z.coerce.number().default(5242880), // 5MB\n  UPLOAD_DIR: z.string().default('./uploads'),\n  \n  // Webhooks\n  WEBHOOK_SECRET: z.string().optional(),\n  \n  // Monitoring\n  SENTRY_DSN: z.string().optional(),\n  \n  // Feature Flags\n  ENABLE_SWAGGER: z.coerce.boolean().default(true),\n  ENABLE_METRICS: z.coerce.boolean().default(true),\n  ENABLE_RATE_LIMITING: z.coerce.boolean().default(true),\n})\n\n// Parse and validate environment variables\nconst parseEnv = () => {\n  try {\n    return envSchema.parse(process.env)\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const missingVars = error.errors\n        .map(err => `${err.path.join('.')}: ${err.message}`)\n        .join('\\n')\n      \n      console.error('❌ Invalid environment variables:')\n      console.error(missingVars)\n      process.exit(1)\n    }\n    throw error\n  }\n}\n\nexport const config = parseEnv()\n\n// Type for environment config\nexport type Config = typeof config\n\n// Helper to check if we're in development\nexport const isDevelopment = config.NODE_ENV === 'development'\nexport const isProduction = config.NODE_ENV === 'production'\nexport const isTest = config.NODE_ENV === 'test'\n\n// Database configuration\nexport const dbConfig = {\n  url: config.DATABASE_URL,\n  // Add connection pool settings for production\n  ...(isProduction && {\n    pool: {\n      min: 2,\n      max: 10,\n      acquireTimeoutMillis: 30000,\n      createTimeoutMillis: 30000,\n      destroyTimeoutMillis: 5000,\n      idleTimeoutMillis: 30000,\n      reapIntervalMillis: 1000,\n      createRetryIntervalMillis: 200,\n    },\n  }),\n}\n\n// Redis configuration\nexport const redisConfig = {\n  url: config.REDIS_URL,\n  retryDelayOnFailover: 100,\n  enableReadyCheck: false,\n  maxRetriesPerRequest: 3,\n  lazyConnect: true,\n  ...(isProduction && {\n    family: 4,\n    keepAlive: true,\n    connectTimeout: 10000,\n    commandTimeout: 5000,\n  }),\n}\n\n// JWT configuration\nexport const jwtConfig = {\n  secret: config.JWT_SECRET,\n  refreshSecret: config.JWT_REFRESH_SECRET,\n  accessExpiresIn: config.JWT_ACCESS_EXPIRES_IN,\n  refreshExpiresIn: config.JWT_REFRESH_EXPIRES_IN,\n  algorithm: 'HS256' as const,\n  issuer: 'utmify-api',\n  audience: 'utmify-app',\n}\n\n// SMTP configuration\nexport const smtpConfig = config.SMTP_HOST ? {\n  host: config.SMTP_HOST,\n  port: config.SMTP_PORT || 587,\n  secure: config.SMTP_PORT === 465,\n  auth: {\n    user: config.SMTP_USER!,\n    pass: config.SMTP_PASS!,\n  },\n  from: config.SMTP_FROM!,\n} : null\n\n// CORS configuration\nexport const corsConfig = {\n  origin: config.CORS_ORIGIN.split(',').map(origin => origin.trim()),\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\n}\n\n// Rate limiting configuration\nexport const rateLimitConfig = {\n  max: config.RATE_LIMIT_MAX,\n  timeWindow: config.RATE_LIMIT_WINDOW,\n  skipSuccessfulRequests: false,\n  skipOnError: true,\n  keyGenerator: (request: any) => {\n    return request.ip || 'anonymous'\n  },\n}\n\n// File upload configuration\nexport const uploadConfig = {\n  maxFileSize: config.MAX_FILE_SIZE,\n  uploadDir: config.UPLOAD_DIR,\n  allowedMimeTypes: [\n    'image/jpeg',\n    'image/png',\n    'image/webp',\n    'image/svg+xml',\n    'text/csv',\n    'application/json',\n  ],\n}\n\n// Google Ads API Configuration\nexport const googleAdsConfig = config.GOOGLE_ADS_CLIENT_ID ? {\n  clientId: config.GOOGLE_ADS_CLIENT_ID!,\n  clientSecret: config.GOOGLE_ADS_CLIENT_SECRET!,\n  developerToken: config.GOOGLE_ADS_DEVELOPER_TOKEN!,\n  loginCustomerId: config.GOOGLE_ADS_LOGIN_CUSTOMER_ID,\n  apiVersion: 'v15',\n} : null"],"version":3}