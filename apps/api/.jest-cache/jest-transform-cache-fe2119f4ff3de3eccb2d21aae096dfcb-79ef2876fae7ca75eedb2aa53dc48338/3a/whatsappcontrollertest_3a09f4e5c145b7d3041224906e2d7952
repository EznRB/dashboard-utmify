de349b3293406fc162a4392936c12f57
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const index_1 = require("../index");
const whatsapp_controller_1 = require("../controllers/whatsapp.controller");
// Mock WhatsApp Service
const mockWhatsAppService = {
    getConfig: globals_1.jest.fn(),
    updateConfig: globals_1.jest.fn(),
    testConnection: globals_1.jest.fn(),
    sendMessage: globals_1.jest.fn(),
    broadcastMessage: globals_1.jest.fn(),
    getMessages: globals_1.jest.fn(),
    getTemplates: globals_1.jest.fn(),
    createTemplate: globals_1.jest.fn(),
    updateTemplate: globals_1.jest.fn(),
    deleteTemplate: globals_1.jest.fn(),
    getConversations: globals_1.jest.fn(),
    getAutomations: globals_1.jest.fn(),
    createAutomation: globals_1.jest.fn(),
    updateAutomation: globals_1.jest.fn(),
    toggleAutomation: globals_1.jest.fn(),
    deleteAutomation: globals_1.jest.fn(),
    getMetrics: globals_1.jest.fn(),
    getDashboardStats: globals_1.jest.fn(),
    handleWebhook: globals_1.jest.fn()
};
(0, globals_1.describe)('WhatsAppController', () => {
    let app;
    let controller;
    (0, globals_1.beforeEach)(async () => {
        controller = new whatsapp_controller_1.WhatsAppController(mockWhatsAppService);
        // Build Fastify app for integration tests
        app = (0, index_1.build)({ logger: false });
        // Register test routes
        app.get('/test/config', async (request, reply) => {
            const userId = 'test-user-1';
            return controller.getConfig({ user: { id: userId } }, reply);
        });
        app.post('/test/config', async (request, reply) => {
            const userId = 'test-user-1';
            return controller.updateConfig({ user: { id: userId }, body: request.body }, reply);
        });
        app.post('/test/send', async (request, reply) => {
            const userId = 'test-user-1';
            return controller.sendMessage({ user: { id: userId }, body: request.body }, reply);
        });
        app.get('/test/messages', async (request, reply) => {
            const userId = 'test-user-1';
            return controller.getMessages({ user: { id: userId }, query: request.query }, reply);
        });
        app.get('/test/stats', async (request, reply) => {
            const userId = 'test-user-1';
            return controller.getDashboardStats({ user: { id: userId } }, reply);
        });
        await app.ready();
    });
    (0, globals_1.afterEach)(async () => {
        globals_1.jest.clearAllMocks();
        await app.close();
    });
    (0, globals_1.describe)('GET /config', () => {
        (0, globals_1.it)('should return WhatsApp config', async () => {
            const mockConfig = {
                id: 'config-1',
                userId: 'test-user-1',
                twilioAccountSid: 'test_sid',
                twilioAuthToken: 'test_token',
                twilioPhoneNumber: '+1234567890',
                isActive: true,
                dailyLimit: 1000,
                messagesUsedToday: 50
            };
            mockWhatsAppService.getConfig.mockResolvedValue(mockConfig);
            const response = await app.inject({
                method: 'GET',
                url: '/test/config'
            });
            (0, globals_1.expect)(response.statusCode).toBe(200);
            (0, globals_1.expect)(JSON.parse(response.payload)).toEqual(mockConfig);
            (0, globals_1.expect)(mockWhatsAppService.getConfig).toHaveBeenCalledWith('test-user-1');
        });
        (0, globals_1.it)('should return 404 if config not found', async () => {
            mockWhatsAppService.getConfig.mockResolvedValue(null);
            const response = await app.inject({
                method: 'GET',
                url: '/test/config'
            });
            (0, globals_1.expect)(response.statusCode).toBe(404);
            (0, globals_1.expect)(JSON.parse(response.payload)).toEqual({
                error: 'Configuração do WhatsApp não encontrada'
            });
        });
    });
    (0, globals_1.describe)('POST /config', () => {
        (0, globals_1.it)('should update WhatsApp config', async () => {
            const configData = {
                twilioAccountSid: 'new_sid',
                twilioAuthToken: 'new_token',
                twilioPhoneNumber: '+1234567890',
                dailyLimit: 1000
            };
            const updatedConfig = {
                id: 'config-1',
                userId: 'test-user-1',
                ...configData,
                isActive: true,
                messagesUsedToday: 0
            };
            mockWhatsAppService.updateConfig.mockResolvedValue(updatedConfig);
            const response = await app.inject({
                method: 'POST',
                url: '/test/config',
                payload: configData
            });
            (0, globals_1.expect)(response.statusCode).toBe(200);
            (0, globals_1.expect)(JSON.parse(response.payload)).toEqual(updatedConfig);
            (0, globals_1.expect)(mockWhatsAppService.updateConfig).toHaveBeenCalledWith('test-user-1', configData);
        });
        (0, globals_1.it)('should handle validation errors', async () => {
            const invalidData = {
                twilioAccountSid: '', // Invalid empty string
                twilioAuthToken: 'token'
            };
            const response = await app.inject({
                method: 'POST',
                url: '/test/config',
                payload: invalidData
            });
            (0, globals_1.expect)(response.statusCode).toBe(400);
        });
    });
    (0, globals_1.describe)('POST /send', () => {
        (0, globals_1.it)('should send message successfully', async () => {
            const messageData = {
                to: '+1987654321',
                message: 'Hello, World!'
            };
            const sentMessage = {
                id: 'msg-1',
                userId: 'test-user-1',
                to: messageData.to,
                from: '+1234567890',
                body: messageData.message,
                status: 'queued',
                messageType: 'text',
                twilioSid: 'test_message_sid',
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockWhatsAppService.sendMessage.mockResolvedValue(sentMessage);
            const response = await app.inject({
                method: 'POST',
                url: '/test/send',
                payload: messageData
            });
            (0, globals_1.expect)(response.statusCode).toBe(200);
            (0, globals_1.expect)(JSON.parse(response.payload)).toEqual(sentMessage);
            (0, globals_1.expect)(mockWhatsAppService.sendMessage).toHaveBeenCalledWith('test-user-1', messageData);
        });
        (0, globals_1.it)('should handle send message errors', async () => {
            const messageData = {
                to: '+1987654321',
                message: 'Hello'
            };
            mockWhatsAppService.sendMessage.mockRejectedValue(new Error('WhatsApp não configurado'));
            const response = await app.inject({
                method: 'POST',
                url: '/test/send',
                payload: messageData
            });
            (0, globals_1.expect)(response.statusCode).toBe(400);
            (0, globals_1.expect)(JSON.parse(response.payload)).toEqual({
                error: 'WhatsApp não configurado'
            });
        });
        (0, globals_1.it)('should validate phone number format', async () => {
            const invalidData = {
                to: 'invalid-phone', // Invalid phone format
                message: 'Hello'
            };
            const response = await app.inject({
                method: 'POST',
                url: '/test/send',
                payload: invalidData
            });
            (0, globals_1.expect)(response.statusCode).toBe(400);
        });
    });
    (0, globals_1.describe)('GET /messages', () => {
        (0, globals_1.it)('should return paginated messages', async () => {
            const mockMessages = {
                messages: [
                    {
                        id: 'msg-1',
                        userId: 'test-user-1',
                        to: '+1987654321',
                        from: '+1234567890',
                        body: 'Hello',
                        status: 'delivered',
                        messageType: 'text',
                        createdAt: new Date(),
                        updatedAt: new Date()
                    }
                ],
                total: 1,
                page: 1,
                limit: 10,
                totalPages: 1
            };
            mockWhatsAppService.getMessages.mockResolvedValue(mockMessages);
            const response = await app.inject({
                method: 'GET',
                url: '/test/messages?page=1&limit=10'
            });
            (0, globals_1.expect)(response.statusCode).toBe(200);
            (0, globals_1.expect)(JSON.parse(response.payload)).toEqual(mockMessages);
            (0, globals_1.expect)(mockWhatsAppService.getMessages).toHaveBeenCalledWith('test-user-1', 1, 10);
        });
        (0, globals_1.it)('should use default pagination values', async () => {
            const mockMessages = {
                messages: [],
                total: 0,
                page: 1,
                limit: 20,
                totalPages: 0
            };
            mockWhatsAppService.getMessages.mockResolvedValue(mockMessages);
            const response = await app.inject({
                method: 'GET',
                url: '/test/messages'
            });
            (0, globals_1.expect)(response.statusCode).toBe(200);
            (0, globals_1.expect)(mockWhatsAppService.getMessages).toHaveBeenCalledWith('test-user-1', 1, 20);
        });
    });
    (0, globals_1.describe)('GET /stats', () => {
        (0, globals_1.it)('should return dashboard statistics', async () => {
            const mockStats = {
                totalMessages: 500,
                messagesThisMonth: 300,
                deliveryRate: 90,
                activeConversations: 5,
                activeAutomations: 3,
                dailyUsage: 150,
                dailyLimit: 1000
            };
            mockWhatsAppService.getDashboardStats.mockResolvedValue(mockStats);
            const response = await app.inject({
                method: 'GET',
                url: '/test/stats'
            });
            (0, globals_1.expect)(response.statusCode).toBe(200);
            (0, globals_1.expect)(JSON.parse(response.payload)).toEqual(mockStats);
            (0, globals_1.expect)(mockWhatsAppService.getDashboardStats).toHaveBeenCalledWith('test-user-1');
        });
        (0, globals_1.it)('should handle stats errors', async () => {
            mockWhatsAppService.getDashboardStats.mockRejectedValue(new Error('Database error'));
            const response = await app.inject({
                method: 'GET',
                url: '/test/stats'
            });
            (0, globals_1.expect)(response.statusCode).toBe(500);
            (0, globals_1.expect)(JSON.parse(response.payload)).toEqual({
                error: 'Erro interno do servidor'
            });
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle service errors gracefully', async () => {
            mockWhatsAppService.getConfig.mockRejectedValue(new Error('Database connection failed'));
            const response = await app.inject({
                method: 'GET',
                url: '/test/config'
            });
            (0, globals_1.expect)(response.statusCode).toBe(500);
            (0, globals_1.expect)(JSON.parse(response.payload)).toEqual({
                error: 'Erro interno do servidor'
            });
        });
        (0, globals_1.it)('should handle invalid JSON payload', async () => {
            const response = await app.inject({
                method: 'POST',
                url: '/test/config',
                payload: 'invalid-json',
                headers: {
                    'content-type': 'application/json'
                }
            });
            (0, globals_1.expect)(response.statusCode).toBe(400);
        });
    });
    (0, globals_1.describe)('Authentication', () => {
        (0, globals_1.it)('should require authentication for all endpoints', async () => {
            // This test would verify that endpoints require proper authentication
            // In a real scenario, you would test without auth headers
            // For now, we assume authentication is handled by middleware
            // and focus on controller logic
            (0, globals_1.expect)(true).toBe(true);
        });
    });
    (0, globals_1.describe)('Rate Limiting', () => {
        (0, globals_1.it)('should respect rate limits', async () => {
            // This test would verify rate limiting behavior
            // In a real scenario, you would make multiple rapid requests
            // For now, we assume rate limiting is handled by middleware
            (0, globals_1.expect)(true).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,