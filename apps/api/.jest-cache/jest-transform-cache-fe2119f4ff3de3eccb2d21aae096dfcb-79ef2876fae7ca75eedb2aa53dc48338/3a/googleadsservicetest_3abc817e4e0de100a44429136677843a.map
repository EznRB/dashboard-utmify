{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\__tests__\\google-ads.service.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\__tests__\\google-ads.service.test.ts"],"sourcesContent":["import { GoogleAdsService } from '../google-ads.service';\nimport { PrismaService } from '../../database/prisma.service';\nimport { CryptoService } from '../crypto.service';\nimport { GoogleAdsApi } from 'google-ads-api';\nimport axios from 'axios';\n\n// Mock dependencies\njest.mock('axios');\njest.mock('google-ads-api');\njest.mock('../../database/prisma.service');\njest.mock('../crypto.service');\n\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\nconst MockedGoogleAdsApi = GoogleAdsApi as jest.MockedClass<typeof GoogleAdsApi>;\n\ndescribe('GoogleAdsService', () => {\n  let service: GoogleAdsService;\n  let mockPrismaService: jest.Mocked<PrismaService>;\n  let mockCryptoService: jest.Mocked<CryptoService>;\n  let mockGoogleAdsClient: any;\n\n  const mockUser = {\n    id: 'user-1',\n    email: 'test@example.com',\n    organizationId: 'org-1',\n  };\n\n  const mockIntegration = {\n    id: 'integration-1',\n    organizationId: 'org-1',\n    platform: 'google_ads',\n    isActive: true,\n    accessToken: 'encrypted-access-token',\n    refreshToken: 'encrypted-refresh-token',\n    expiresAt: new Date(Date.now() + 3600000), // 1 hour from now\n    settings: {\n      customerId: '123-456-7890',\n      developerToken: 'test-developer-token',\n    },\n  };\n\n  const mockGoogleAdsAccount = {\n    customer: {\n      resource_name: 'customers/1234567890',\n      id: '1234567890',\n      descriptive_name: 'Test Account',\n      currency_code: 'USD',\n      time_zone: 'America/New_York',\n      status: 'ENABLED',\n      type: 'STANDARD',\n    },\n  };\n\n  const mockCampaign = {\n    campaign: {\n      resource_name: 'customers/1234567890/campaigns/987654321',\n      id: '987654321',\n      name: 'Test Campaign',\n      status: 'ENABLED',\n      advertising_channel_type: 'SEARCH',\n      start_date: '2024-01-01',\n      end_date: '2024-12-31',\n    },\n    campaign_budget: {\n      amount_micros: '10000000', // $10 in micros\n      delivery_method: 'STANDARD',\n    },\n    metrics: {\n      impressions: '1000',\n      clicks: '50',\n      cost_micros: '5000000', // $5 in micros\n      conversions: '5',\n      ctr: '0.05',\n      average_cpc: '100000', // $0.10 in micros\n    },\n  };\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Mock PrismaService\n    mockPrismaService = {\n      integration: {\n        findFirst: jest.fn(),\n        create: jest.fn(),\n        update: jest.fn(),\n        delete: jest.fn(),\n      },\n      googleAdsAccount: {\n        findMany: jest.fn(),\n        create: jest.fn(),\n        update: jest.fn(),\n      },\n      googleAdsCampaign: {\n        findMany: jest.fn(),\n        create: jest.fn(),\n        createMany: jest.fn(),\n        update: jest.fn(),\n        upsert: jest.fn(),\n      },\n      googleAdsKeyword: {\n        findMany: jest.fn(),\n        create: jest.fn(),\n        createMany: jest.fn(),\n        update: jest.fn(),\n        upsert: jest.fn(),\n      },\n      googleAdsDailyMetrics: {\n        findMany: jest.fn(),\n        create: jest.fn(),\n        createMany: jest.fn(),\n        upsert: jest.fn(),\n      },\n      googleAdsSyncLog: {\n        create: jest.fn(),\n        findMany: jest.fn(),\n      },\n      $transaction: jest.fn(),\n    } as any;\n\n    // Mock CryptoService\n    mockCryptoService = {\n      encrypt: jest.fn().mockReturnValue('encrypted-token'),\n      decrypt: jest.fn().mockReturnValue('decrypted-token'),\n    } as any;\n\n    // Mock Google Ads API client\n    mockGoogleAdsClient = {\n      Customer: jest.fn().mockReturnValue({\n        query: jest.fn(),\n        listAccessibleCustomers: jest.fn(),\n      }),\n    };\n\n    MockedGoogleAdsApi.mockImplementation(() => mockGoogleAdsClient);\n\n    // Mock config service\n    const mockConfigService = {\n      get: jest.fn().mockImplementation((key: string) => {\n        const config = {\n          'GOOGLE_ADS_CLIENT_ID': 'test-client-id',\n          'GOOGLE_ADS_CLIENT_SECRET': 'test-client-secret',\n          'GOOGLE_ADS_DEVELOPER_TOKEN': 'test-developer-token',\n        };\n        return config[key];\n      }),\n    } as any;\n\n    // Create service instance\n    service = new GoogleAdsService(mockConfigService, mockPrismaService, mockCryptoService);\n  });\n\n  describe('generateAuthUrl', () => {\n    it('should generate a valid OAuth URL', async () => {\n      const redirectUri = 'http://localhost:3000/callback';\n      const result = await service.generateAuthUrl(mockUser, redirectUri);\n\n      expect(result).toHaveProperty('authUrl');\n      expect(result).toHaveProperty('state');\n      expect(result.authUrl).toContain('accounts.google.com/oauth/authorize');\n      expect(result.authUrl).toContain('client_id=test-client-id');\n      expect(result.authUrl).toContain('redirect_uri=' + encodeURIComponent(redirectUri));\n      expect(result.authUrl).toContain('scope=' + encodeURIComponent('https://www.googleapis.com/auth/adwords'));\n    });\n  });\n\n  describe('handleCallback', () => {\n    const mockTokenResponse = {\n      data: {\n        access_token: 'new-access-token',\n        refresh_token: 'new-refresh-token',\n        expires_in: 3600,\n        token_type: 'Bearer',\n      },\n    };\n\n    beforeEach(() => {\n      mockAxios.post.mockResolvedValue(mockTokenResponse);\n      mockPrismaService.integration.findFirst.mockResolvedValue(null);\n      mockPrismaService.integration.create.mockResolvedValue(mockIntegration as any);\n    });\n\n    it('should handle OAuth callback and create integration', async () => {\n      const code = 'auth-code';\n      const state = 'valid-state';\n      const redirectUri = 'http://localhost:3000/callback';\n\n      const result = await service.handleCallback(mockUser, code, state, redirectUri);\n\n      expect(mockAxios.post).toHaveBeenCalledWith(\n        'https://oauth2.googleapis.com/token',\n        expect.objectContaining({\n          client_id: 'test-client-id',\n          client_secret: 'test-client-secret',\n          code,\n          grant_type: 'authorization_code',\n          redirect_uri: redirectUri,\n        })\n      );\n\n      expect(mockCryptoService.encrypt).toHaveBeenCalledWith('new-access-token');\n      expect(mockCryptoService.encrypt).toHaveBeenCalledWith('new-refresh-token');\n      expect(mockPrismaService.integration.create).toHaveBeenCalled();\n      expect(result).toEqual(mockIntegration);\n    });\n\n    it('should update existing integration', async () => {\n      mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration as any);\n      mockPrismaService.integration.update.mockResolvedValue(mockIntegration as any);\n\n      const code = 'auth-code';\n      const state = 'valid-state';\n      const redirectUri = 'http://localhost:3000/callback';\n\n      const result = await service.handleCallback(mockUser, code, state, redirectUri);\n\n      expect(mockPrismaService.integration.update).toHaveBeenCalled();\n      expect(result).toEqual(mockIntegration);\n    });\n\n    it('should throw error for invalid authorization code', async () => {\n      mockAxios.post.mockRejectedValue(new Error('Invalid authorization code'));\n\n      await expect(\n        service.handleCallback(mockUser, 'invalid-code', 'state', 'redirect-uri')\n      ).rejects.toThrow('Invalid authorization code');\n    });\n  });\n\n  describe('getAccounts', () => {\n    beforeEach(() => {\n      mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration as any);\n      mockCryptoService.decrypt.mockReturnValue('decrypted-access-token');\n    });\n\n    it('should fetch Google Ads accounts', async () => {\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockResolvedValue([mockGoogleAdsAccount]),\n      });\n\n      const result = await service.getAccounts(mockUser);\n\n      expect(mockPrismaService.integration.findFirst).toHaveBeenCalledWith({\n        where: {\n          organizationId: mockUser.organizationId,\n          platform: 'google_ads',\n          isActive: true,\n        },\n      });\n\n      expect(mockCustomer.query).toHaveBeenCalled();\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        id: '1234567890',\n        name: 'Test Account',\n        currency: 'USD',\n        timezone: 'America/New_York',\n        status: 'ENABLED',\n        type: 'STANDARD',\n      });\n    });\n\n    it('should throw error when integration not found', async () => {\n      mockPrismaService.integration.findFirst.mockResolvedValue(null);\n\n      await expect(service.getAccounts(mockUser)).rejects.toThrow(\n        'Google Ads integration not found or inactive'\n      );\n    });\n  });\n\n  describe('getCampaigns', () => {\n    beforeEach(() => {\n      mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration as any);\n      mockCryptoService.decrypt.mockReturnValue('decrypted-access-token');\n    });\n\n    it('should fetch campaigns for a customer', async () => {\n      const customerId = '1234567890';\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockResolvedValue([mockCampaign]),\n      });\n\n      const result = await service.getCampaigns(mockUser, customerId);\n\n      expect(mockCustomer.query).toHaveBeenCalled();\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        id: '987654321',\n        name: 'Test Campaign',\n        status: 'ENABLED',\n        type: 'SEARCH',\n        budget_amount: 10000000,\n        budget_type: 'STANDARD',\n        impressions: 1000,\n        clicks: 50,\n        cost: 5000000,\n        conversions: 5,\n        customer_id: customerId,\n      });\n    });\n\n    it('should handle empty campaigns result', async () => {\n      const customerId = '1234567890';\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockResolvedValue([]),\n      });\n\n      const result = await service.getCampaigns(mockUser, customerId);\n\n      expect(result).toHaveLength(0);\n    });\n  });\n\n  describe('syncData', () => {\n    beforeEach(() => {\n      mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration as any);\n      mockCryptoService.decrypt.mockReturnValue('decrypted-access-token');\n      mockPrismaService.$transaction.mockImplementation((callback) => callback(mockPrismaService));\n    });\n\n    it('should sync campaigns and metrics data', async () => {\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockResolvedValue([mockCampaign]),\n      });\n\n      mockPrismaService.googleAdsCampaign.upsert.mockResolvedValue({} as any);\n      mockPrismaService.googleAdsDailyMetrics.upsert.mockResolvedValue({} as any);\n\n      const result = await service.syncData(mockUser, { force: true });\n\n      expect(mockCustomer.query).toHaveBeenCalled();\n      expect(mockPrismaService.googleAdsCampaign.upsert).toHaveBeenCalled();\n      expect(mockPrismaService.googleAdsDailyMetrics.upsert).toHaveBeenCalled();\n      expect(result).toEqual({\n        success: true,\n        message: 'Sincronização concluída com sucesso',\n        stats: {\n          campaigns: 1,\n          keywords: 0,\n          metrics: 1,\n        },\n      });\n    });\n\n    it('should handle sync errors gracefully', async () => {\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockRejectedValue(new Error('API Error')),\n      });\n\n      await expect(service.syncData(mockUser, { force: true })).rejects.toThrow('API Error');\n    });\n  });\n\n  describe('disconnect', () => {\n    beforeEach(() => {\n      mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration as any);\n      mockPrismaService.integration.update.mockResolvedValue({ ...mockIntegration, isActive: false } as any);\n    });\n\n    it('should disconnect integration', async () => {\n      const result = await service.disconnect(mockUser);\n\n      expect(mockPrismaService.integration.update).toHaveBeenCalledWith({\n        where: { id: mockIntegration.id },\n        data: {\n          isActive: false,\n          accessToken: null,\n          refreshToken: null,\n          expiresAt: null,\n        },\n      });\n\n      expect(result).toEqual({\n        success: true,\n        message: 'Google Ads desconectado com sucesso',\n      });\n    });\n\n    it('should throw error when integration not found', async () => {\n      mockPrismaService.integration.findFirst.mockResolvedValue(null);\n\n      await expect(service.disconnect(mockUser)).rejects.toThrow(\n        'Google Ads integration not found'\n      );\n    });\n  });\n\n  describe('refreshAccessToken', () => {\n    const mockRefreshResponse = {\n      data: {\n        access_token: 'new-access-token',\n        expires_in: 3600,\n        token_type: 'Bearer',\n      },\n    };\n\n    beforeEach(() => {\n      mockAxios.post.mockResolvedValue(mockRefreshResponse);\n      mockPrismaService.integration.update.mockResolvedValue(mockIntegration as any);\n    });\n\n    it('should refresh access token', async () => {\n      const result = await (service as any).refreshAccessToken(mockIntegration);\n\n      expect(mockAxios.post).toHaveBeenCalledWith(\n        'https://oauth2.googleapis.com/token',\n        expect.objectContaining({\n          client_id: 'test-client-id',\n          client_secret: 'test-client-secret',\n          refresh_token: 'decrypted-token',\n          grant_type: 'refresh_token',\n        })\n      );\n\n      expect(mockCryptoService.encrypt).toHaveBeenCalledWith('new-access-token');\n      expect(mockPrismaService.integration.update).toHaveBeenCalled();\n      expect(result).toBe('new-access-token');\n    });\n\n    it('should handle refresh token errors', async () => {\n      mockAxios.post.mockRejectedValue(new Error('Invalid refresh token'));\n\n      await expect((service as any).refreshAccessToken(mockIntegration)).rejects.toThrow(\n        'Invalid refresh token'\n      );\n    });\n  });\n\n  describe('getIntegrationStatus', () => {\n    it('should return integration status when active', async () => {\n      mockPrismaService.integration.findFirst.mockResolvedValue(mockIntegration as any);\n\n      const result = await service.getIntegrationStatus(mockUser);\n\n      expect(result).toEqual({\n        connected: true,\n        lastSync: undefined,\n        connectedAt: mockIntegration.createdAt,\n        expiresAt: mockIntegration.expiresAt,\n        status: 'active',\n      });\n    });\n\n    it('should return disconnected status when integration not found', async () => {\n      mockPrismaService.integration.findFirst.mockResolvedValue(null);\n\n      const result = await service.getIntegrationStatus(mockUser);\n\n      expect(result).toEqual({\n        connected: false,\n        status: 'not_connected',\n      });\n    });\n\n    it('should return expired status when token is expired', async () => {\n      const expiredIntegration = {\n        ...mockIntegration,\n        expiresAt: new Date(Date.now() - 3600000), // 1 hour ago\n      };\n      mockPrismaService.integration.findFirst.mockResolvedValue(expiredIntegration as any);\n\n      const result = await service.getIntegrationStatus(mockUser);\n\n      expect(result.status).toBe('expired');\n    });\n  });\n});"],"version":3}