{"version":3,"names":["cov_jsew5uwg2","actualCoverage","Injectable","Logger","PrismaService","TenantCacheService","TenantDatabaseService","AuditLogService","s","AuditLogService_1","prisma","tenantCacheService","tenantDatabaseService","logger","name","criticalActions","auditedResources","constructor","f","createAuditLog","entry","validateOrganization","organizationId","auditLog","create","data","userId","action","resource","resourceId","details","b","ipAddress","userAgent","timestamp","Date","severity","category","success","errorMessage","updateAuditStats","includes","warn","detectSuspiciousActivity","error","message","stack","logAction","options","determineSeverity","determineCategory","logSecurityEvent","event","type","triggerSecurityAlert","getAuditLogs","query","where","contains","startDate","endDate","gte","lte","limit","Math","min","offset","logs","total","Promise","all","findMany","orderBy","take","skip","include","user","select","id","email","count","hasMore","getAuditStats","days","setDate","getDate","categoryStats","severityStats","recentCount","securityCount","groupBy","by","_count","now","logsByCategory","forEach","stat","logsBySeverity","totalLogs","recentActivity","securityEvents","validateCrossTenantAccess","userOrganizationId","targetOrganizationId","blocked","recentWindow","recentTime","recentFailures","reason","timeWindow","recentActions","exists","organization","findUnique","Error","key","stats","get","categories","severities","lastUpdate","set","alertKey","cleanupOldLogs","retentionDays","cutoffDate","result","deleteMany","lt","not","log","__decorate","_a","Object","_b","_c"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\audit-log.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { TenantCacheService } from './tenant-cache.service';\nimport { TenantDatabaseService } from './tenant-database.service';\n\ninterface AuditLogEntry {\n  id?: string;\n  organizationId: string;\n  userId: string;\n  action: string;\n  resource: string;\n  resourceId?: string;\n  details?: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n  timestamp: Date;\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  category: 'AUTH' | 'DATA' | 'ADMIN' | 'SECURITY' | 'SYSTEM';\n  success: boolean;\n  errorMessage?: string;\n}\n\ninterface SecurityEvent {\n  type: 'CROSS_TENANT_ACCESS' | 'UNAUTHORIZED_ACCESS' | 'SUSPICIOUS_ACTIVITY' | 'DATA_BREACH' | 'PRIVILEGE_ESCALATION';\n  organizationId: string;\n  userId?: string;\n  details: Record<string, any>;\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  ipAddress?: string;\n  userAgent?: string;\n}\n\ninterface AuditLogQuery {\n  organizationId: string;\n  userId?: string;\n  action?: string;\n  resource?: string;\n  category?: string;\n  severity?: string;\n  startDate?: Date;\n  endDate?: Date;\n  limit?: number;\n  offset?: number;\n}\n\ninterface AuditLogStats {\n  totalLogs: number;\n  logsByCategory: Record<string, number>;\n  logsBySeverity: Record<string, number>;\n  recentActivity: number;\n  securityEvents: number;\n}\n\n@Injectable()\nexport class AuditLogService {\n  private readonly logger = new Logger(AuditLogService.name);\n\n  // Ações sensíveis que sempre devem ser logadas\n  private readonly criticalActions = [\n    'USER_LOGIN',\n    'USER_LOGOUT',\n    'PASSWORD_CHANGE',\n    'ROLE_CHANGE',\n    'ORGANIZATION_CREATE',\n    'ORGANIZATION_DELETE',\n    'INVITATION_SEND',\n    'DATA_EXPORT',\n    'SETTINGS_CHANGE',\n    'CROSS_TENANT_ACCESS',\n  ];\n\n  // Recursos que requerem auditoria\n  private readonly auditedResources = [\n    'User',\n    'Organization',\n    'Campaign',\n    'Contact',\n    'Message',\n    'Webhook',\n    'Integration',\n    'Settings',\n  ];\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly tenantCacheService: TenantCacheService,\n    private readonly tenantDatabaseService: TenantDatabaseService,\n  ) {}\n\n  // Criar entrada de audit log\n  async createAuditLog(entry: Omit<AuditLogEntry, 'id' | 'timestamp'>): Promise<void> {\n    try {\n      // Validar se a organização existe\n      await this.validateOrganization(entry.organizationId);\n\n      // Criar entrada no banco\n      await this.prisma.auditLog.create({\n        data: {\n          organizationId: entry.organizationId,\n          userId: entry.userId,\n          action: entry.action,\n          resource: entry.resource,\n          resourceId: entry.resourceId,\n          details: entry.details || {},\n          ipAddress: entry.ipAddress,\n          userAgent: entry.userAgent,\n          timestamp: new Date(),\n          severity: entry.severity,\n          category: entry.category,\n          success: entry.success,\n          errorMessage: entry.errorMessage,\n        },\n      });\n\n      // Cache para estatísticas rápidas\n      await this.updateAuditStats(entry.organizationId, entry.category, entry.severity);\n\n      // Log crítico no sistema\n      if (entry.severity === 'CRITICAL' || this.criticalActions.includes(entry.action)) {\n        this.logger.warn(\n          `CRITICAL AUDIT: ${entry.action} by user ${entry.userId} in org ${entry.organizationId}`,\n          { entry },\n        );\n      }\n\n      // Detectar atividade suspeita\n      await this.detectSuspiciousActivity(entry);\n\n    } catch (error) {\n      this.logger.error(\n        `Failed to create audit log: ${error.message}`,\n        error.stack,\n      );\n      \n      // Não falhar a operação principal por causa do audit log\n      // Mas registrar o erro para investigação\n    }\n  }\n\n  // Log de ação com contexto automático\n  async logAction(\n    organizationId: string,\n    userId: string,\n    action: string,\n    resource: string,\n    options: {\n      resourceId?: string;\n      details?: Record<string, any>;\n      ipAddress?: string;\n      userAgent?: string;\n      success?: boolean;\n      errorMessage?: string;\n    } = {},\n  ): Promise<void> {\n    const severity = this.determineSeverity(action, resource);\n    const category = this.determineCategory(action, resource);\n\n    await this.createAuditLog({\n      organizationId,\n      userId,\n      action,\n      resource,\n      resourceId: options.resourceId,\n      details: options.details,\n      ipAddress: options.ipAddress,\n      userAgent: options.userAgent,\n      severity,\n      category,\n      success: options.success ?? true,\n      errorMessage: options.errorMessage,\n    });\n  }\n\n  // Log de evento de segurança\n  async logSecurityEvent(event: SecurityEvent): Promise<void> {\n    try {\n      await this.createAuditLog({\n        organizationId: event.organizationId,\n        userId: event.userId || 'SYSTEM',\n        action: `SECURITY_EVENT_${event.type}`,\n        resource: 'Security',\n        details: event.details,\n        ipAddress: event.ipAddress,\n        userAgent: event.userAgent,\n        severity: event.severity,\n        category: 'SECURITY',\n        success: false, // Eventos de segurança são sempre falhas\n      });\n\n      // Alertar para eventos críticos\n      if (event.severity === 'CRITICAL') {\n        await this.triggerSecurityAlert(event);\n      }\n\n    } catch (error) {\n      this.logger.error(\n        `Failed to log security event: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  // Buscar logs de auditoria\n  async getAuditLogs(query: AuditLogQuery): Promise<{\n    logs: AuditLogEntry[];\n    total: number;\n    hasMore: boolean;\n  }> {\n    try {\n      // Validar acesso à organização\n      await this.validateOrganization(query.organizationId);\n\n      const where: any = {\n        organizationId: query.organizationId,\n      };\n\n      if (query.userId) where.userId = query.userId;\n      if (query.action) where.action = { contains: query.action };\n      if (query.resource) where.resource = query.resource;\n      if (query.category) where.category = query.category;\n      if (query.severity) where.severity = query.severity;\n      \n      if (query.startDate || query.endDate) {\n        where.timestamp = {};\n        if (query.startDate) where.timestamp.gte = query.startDate;\n        if (query.endDate) where.timestamp.lte = query.endDate;\n      }\n\n      const limit = Math.min(query.limit || 50, 1000); // Máximo 1000\n      const offset = query.offset || 0;\n\n      const [logs, total] = await Promise.all([\n        this.prisma.auditLog.findMany({\n          where,\n          orderBy: { timestamp: 'desc' },\n          take: limit,\n          skip: offset,\n          include: {\n            user: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n              },\n            },\n          },\n        }),\n        this.prisma.auditLog.count({ where }),\n      ]);\n\n      return {\n        logs: logs as AuditLogEntry[],\n        total,\n        hasMore: offset + limit < total,\n      };\n\n    } catch (error) {\n      this.logger.error(\n        `Failed to get audit logs: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  // Obter estatísticas de auditoria\n  async getAuditStats(organizationId: string, days: number = 30): Promise<AuditLogStats> {\n    try {\n      await this.validateOrganization(organizationId);\n\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n\n      const where = {\n        organizationId,\n        timestamp: { gte: startDate },\n      };\n\n      const [total, categoryStats, severityStats, recentCount, securityCount] = await Promise.all([\n        this.prisma.auditLog.count({ where }),\n        this.prisma.auditLog.groupBy({\n          by: ['category'],\n          where,\n          _count: { category: true },\n        }),\n        this.prisma.auditLog.groupBy({\n          by: ['severity'],\n          where,\n          _count: { severity: true },\n        }),\n        this.prisma.auditLog.count({\n          where: {\n            ...where,\n            timestamp: { gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }, // Últimas 24h\n          },\n        }),\n        this.prisma.auditLog.count({\n          where: {\n            ...where,\n            category: 'SECURITY',\n          },\n        }),\n      ]);\n\n      const logsByCategory: Record<string, number> = {};\n      categoryStats.forEach(stat => {\n        logsByCategory[stat.category] = stat._count.category;\n      });\n\n      const logsBySeverity: Record<string, number> = {};\n      severityStats.forEach(stat => {\n        logsBySeverity[stat.severity] = stat._count.severity;\n      });\n\n      return {\n        totalLogs: total,\n        logsByCategory,\n        logsBySeverity,\n        recentActivity: recentCount,\n        securityEvents: securityCount,\n      };\n\n    } catch (error) {\n      this.logger.error(\n        `Failed to get audit stats: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  // Verificar acesso cross-tenant\n  async validateCrossTenantAccess(\n    userId: string,\n    userOrganizationId: string,\n    targetOrganizationId: string,\n    resource: string,\n    action: string,\n  ): Promise<boolean> {\n    try {\n      // Se é a mesma organização, permitir\n      if (userOrganizationId === targetOrganizationId) {\n        return true;\n      }\n\n      // Log da tentativa de acesso cross-tenant\n      await this.logSecurityEvent({\n        type: 'CROSS_TENANT_ACCESS',\n        organizationId: userOrganizationId,\n        userId,\n        details: {\n          targetOrganizationId,\n          resource,\n          action,\n          blocked: true,\n        },\n        severity: 'HIGH',\n      });\n\n      this.logger.warn(\n        `Cross-tenant access attempt blocked: User ${userId} from org ${userOrganizationId} tried to access ${resource} in org ${targetOrganizationId}`,\n      );\n\n      return false;\n\n    } catch (error) {\n      this.logger.error(\n        `Failed to validate cross-tenant access: ${error.message}`,\n        error.stack,\n      );\n      \n      // Em caso de erro, bloquear por segurança\n      return false;\n    }\n  }\n\n  // Detectar atividade suspeita\n  private async detectSuspiciousActivity(entry: AuditLogEntry): Promise<void> {\n    try {\n      const recentWindow = 5 * 60 * 1000; // 5 minutos\n      const recentTime = new Date(Date.now() - recentWindow);\n\n      // Verificar múltiplas tentativas de login falhadas\n      if (entry.action === 'USER_LOGIN' && !entry.success) {\n        const recentFailures = await this.prisma.auditLog.count({\n          where: {\n            userId: entry.userId,\n            action: 'USER_LOGIN',\n            success: false,\n            timestamp: { gte: recentTime },\n          },\n        });\n\n        if (recentFailures >= 5) {\n          await this.logSecurityEvent({\n            type: 'SUSPICIOUS_ACTIVITY',\n            organizationId: entry.organizationId,\n            userId: entry.userId,\n            details: {\n              reason: 'Multiple failed login attempts',\n              count: recentFailures,\n              timeWindow: '5 minutes',\n            },\n            severity: 'HIGH',\n            ipAddress: entry.ipAddress,\n            userAgent: entry.userAgent,\n          });\n        }\n      }\n\n      // Verificar atividade anômala (muitas ações em pouco tempo)\n      const recentActions = await this.prisma.auditLog.count({\n        where: {\n          userId: entry.userId,\n          organizationId: entry.organizationId,\n          timestamp: { gte: recentTime },\n        },\n      });\n\n      if (recentActions >= 50) { // 50 ações em 5 minutos\n        await this.logSecurityEvent({\n          type: 'SUSPICIOUS_ACTIVITY',\n          organizationId: entry.organizationId,\n          userId: entry.userId,\n          details: {\n            reason: 'Unusually high activity',\n            count: recentActions,\n            timeWindow: '5 minutes',\n          },\n          severity: 'MEDIUM',\n          ipAddress: entry.ipAddress,\n          userAgent: entry.userAgent,\n        });\n      }\n\n    } catch (error) {\n      this.logger.error(\n        `Failed to detect suspicious activity: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  // Métodos auxiliares\n  private determineSeverity(action: string, resource: string): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    if (this.criticalActions.includes(action)) {\n      return 'CRITICAL';\n    }\n\n    if (action.includes('DELETE') || action.includes('DESTROY')) {\n      return 'HIGH';\n    }\n\n    if (action.includes('UPDATE') || action.includes('MODIFY')) {\n      return 'MEDIUM';\n    }\n\n    return 'LOW';\n  }\n\n  private determineCategory(action: string, resource: string): 'AUTH' | 'DATA' | 'ADMIN' | 'SECURITY' | 'SYSTEM' {\n    if (action.includes('LOGIN') || action.includes('AUTH') || action.includes('PASSWORD')) {\n      return 'AUTH';\n    }\n\n    if (action.includes('SECURITY') || action.includes('PERMISSION')) {\n      return 'SECURITY';\n    }\n\n    if (resource === 'Organization' || action.includes('ADMIN')) {\n      return 'ADMIN';\n    }\n\n    if (action.includes('SYSTEM') || resource === 'System') {\n      return 'SYSTEM';\n    }\n\n    return 'DATA';\n  }\n\n  private async validateOrganization(organizationId: string): Promise<void> {\n    const exists = await this.prisma.organization.findUnique({\n      where: { id: organizationId },\n      select: { id: true },\n    });\n\n    if (!exists) {\n      throw new Error(`Organization ${organizationId} not found`);\n    }\n  }\n\n  private async updateAuditStats(\n    organizationId: string,\n    category: string,\n    severity: string,\n  ): Promise<void> {\n    try {\n      const key = `audit_stats:${organizationId}`;\n      const stats = await this.tenantCacheService.get(key) || {\n        categories: {},\n        severities: {},\n        lastUpdate: Date.now(),\n      };\n\n      stats.categories[category] = (stats.categories[category] || 0) + 1;\n      stats.severities[severity] = (stats.severities[severity] || 0) + 1;\n      stats.lastUpdate = Date.now();\n\n      await this.tenantCacheService.set(key, stats, 3600); // 1 hora\n    } catch (error) {\n      this.logger.error(\n        `Failed to update audit stats: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  private async triggerSecurityAlert(event: SecurityEvent): Promise<void> {\n    try {\n      // Aqui poderia integrar com sistemas de alerta\n      // Como Slack, email, SMS, etc.\n      \n      this.logger.error(\n        `SECURITY ALERT: ${event.type} in organization ${event.organizationId}`,\n        { event },\n      );\n\n      // Salvar alerta para dashboard\n      const alertKey = `security_alert:${event.organizationId}:${Date.now()}`;\n      await this.tenantCacheService.set(alertKey, event, 86400); // 24 horas\n\n    } catch (error) {\n      this.logger.error(\n        `Failed to trigger security alert: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  // Limpeza de logs antigos\n  async cleanupOldLogs(retentionDays: number = 90): Promise<number> {\n    try {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n\n      const result = await this.prisma.auditLog.deleteMany({\n        where: {\n          timestamp: { lt: cutoffDate },\n          severity: { not: 'CRITICAL' }, // Manter logs críticos por mais tempo\n        },\n      });\n\n      this.logger.log(\n        `Cleaned up ${result.count} audit logs older than ${retentionDays} days`,\n      );\n\n      return result.count;\n\n    } catch (error) {\n      this.logger.error(\n        `Failed to cleanup old logs: ${error.message}`,\n        error.stack,\n      );\n      return 0;\n    }\n  }\n}"],"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","ignoreList":[]}