{"version":3,"names":["exports","authRoutes","auth_service_1","cov_14t0d8qzba","s","require","auth_middleware_1","errors_1","logger_1","shared_1","app","f","authService","AuthService","post","schema","body","loginSchema","response","type","properties","success","data","user","id","name","email","role","isActive","createdAt","updatedAt","organization","slug","planType","tokens","accessToken","refreshToken","expiresIn","asyncHandler","request","reply","password","ip","userAgent","headers","result","login","status","send","registerSchema","organizationName","register","refreshTokenSchema","preHandler","requireAuth","message","sessionId","logout","get","lastLoginAt","nullable","settings","changePasswordSchema","currentPassword","newPassword","userId","db","findUnique","where","select","b","ApiError","notFound","bcrypt","Promise","resolve","then","__importStar","isValidPassword","compare","badRequest","hashedNewPassword","hash","update","userSession","updateMany","not","expiresAt","Date","logAuth","items","ipAddress","isCurrent","currentSessionId","sessions","getUserSessions","sessionsWithCurrent","map","session","delete","params","required","revokeSession","revokeAllSessions","optionalAuth","valid","isValid"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\auth.routes.ts"],"sourcesContent":["import type { FastifyInstance } from 'fastify'\nimport { AuthService } from '@/services/auth.service'\nimport { requireAuth, optionalAuth } from '@/middleware/auth.middleware'\nimport { ApiError, ValidationError, asyncHandler } from '@/utils/errors'\nimport { logAuth } from '@/utils/logger'\nimport {\n  loginSchema,\n  registerSchema,\n  refreshTokenSchema,\n  changePasswordSchema,\n  type LoginRequest,\n  type RegisterRequest,\n  type RefreshTokenRequest,\n  type ChangePasswordRequest,\n} from '@utmify/shared'\n\n// Auth routes\nexport async function authRoutes(app: FastifyInstance) {\n  const authService = new AuthService(app)\n\n  // Login route\n  app.post<{ Body: LoginRequest }>(\n    '/login',\n    {\n      schema: {\n        body: loginSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  user: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                    },\n                  },\n                  tokens: {\n                    type: 'object',\n                    properties: {\n                      accessToken: { type: 'string' },\n                      refreshToken: { type: 'string' },\n                      expiresIn: { type: 'number' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { email, password } = request.body\n      const ip = request.ip\n      const userAgent = request.headers['user-agent']\n\n      const result = await authService.login(email, password, ip, userAgent)\n\n      return reply.status(200).send({\n        success: true,\n        data: result,\n      })\n    })\n  )\n\n  // Register route\n  app.post<{ Body: RegisterRequest }>(\n    '/register',\n    {\n      schema: {\n        body: registerSchema,\n        response: {\n          201: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  user: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                    },\n                  },\n                  tokens: {\n                    type: 'object',\n                    properties: {\n                      accessToken: { type: 'string' },\n                      refreshToken: { type: 'string' },\n                      expiresIn: { type: 'number' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { name, email, password, organizationName } = request.body\n      const ip = request.ip\n\n      const result = await authService.register(\n        { name, email, password, organizationName },\n        ip\n      )\n\n      return reply.status(201).send({\n        success: true,\n        data: result,\n      })\n    })\n  )\n\n  // Refresh token route\n  app.post<{ Body: RefreshTokenRequest }>(\n    '/refresh',\n    {\n      schema: {\n        body: refreshTokenSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  accessToken: { type: 'string' },\n                  refreshToken: { type: 'string' },\n                  expiresIn: { type: 'number' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { refreshToken } = request.body\n\n      const tokens = await authService.refreshToken(refreshToken)\n\n      return reply.status(200).send({\n        success: true,\n        data: tokens,\n      })\n    })\n  )\n\n  // Logout route\n  app.post(\n    '/logout',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const sessionId = request.sessionId!\n      const refreshToken = request.headers['x-refresh-token'] as string\n\n      await authService.logout(sessionId, refreshToken)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'Logged out successfully',\n      })\n    })\n  )\n\n  // Get current user route\n  app.get(\n    '/me',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  user: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      lastLoginAt: { type: 'string', nullable: true },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                      isActive: { type: 'boolean' },\n                      settings: { type: 'object' },\n                      createdAt: { type: 'string' },\n                      updatedAt: { type: 'string' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      return reply.status(200).send({\n        success: true,\n        data: {\n          user: request.user!,\n          organization: request.organization!,\n        },\n      })\n    })\n  )\n\n  // Change password route\n  app.post<{ Body: ChangePasswordRequest }>(\n    '/change-password',\n    {\n      preHandler: requireAuth,\n      schema: {\n        body: changePasswordSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { currentPassword, newPassword } = request.body\n      const userId = request.user!.id\n\n      // Get user with password\n      const user = await app.db.user.findUnique({\n        where: { id: userId },\n        select: { id: true, password: true },\n      })\n\n      if (!user) {\n        throw ApiError.notFound('User not found')\n      }\n\n      // Verify current password\n      const bcrypt = await import('bcryptjs')\n      const isValidPassword = await bcrypt.compare(currentPassword, user.password)\n      \n      if (!isValidPassword) {\n        throw ApiError.badRequest('Current password is incorrect', 'INVALID_CURRENT_PASSWORD')\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 12)\n\n      // Update password\n      await app.db.user.update({\n        where: { id: userId },\n        data: { password: hashedNewPassword },\n      })\n\n      // Revoke all sessions except current one\n      await app.db.userSession.updateMany({\n        where: {\n          userId,\n          id: { not: request.sessionId! },\n        },\n        data: { expiresAt: new Date() },\n      })\n\n      logAuth('password_changed', userId, request.user!.email, request.ip)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'Password changed successfully',\n      })\n    })\n  )\n\n  // Get user sessions route\n  app.get(\n    '/sessions',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    id: { type: 'string' },\n                    ipAddress: { type: 'string', nullable: true },\n                    userAgent: { type: 'string', nullable: true },\n                    createdAt: { type: 'string' },\n                    expiresAt: { type: 'string' },\n                    isCurrent: { type: 'boolean' },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const userId = request.user!.id\n      const currentSessionId = request.sessionId!\n\n      const sessions = await authService.getUserSessions(userId)\n      \n      // Mark current session\n      const sessionsWithCurrent = sessions.map(session => ({\n        ...session,\n        isCurrent: session.id === currentSessionId,\n      }))\n\n      return reply.status(200).send({\n        success: true,\n        data: sessionsWithCurrent,\n      })\n    })\n  )\n\n  // Revoke session route\n  app.delete(\n    '/sessions/:sessionId',\n    {\n      preHandler: requireAuth,\n      schema: {\n        params: {\n          type: 'object',\n          properties: {\n            sessionId: { type: 'string' },\n          },\n          required: ['sessionId'],\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const { sessionId } = request.params as { sessionId: string }\n      const userId = request.user!.id\n      const currentSessionId = request.sessionId!\n\n      if (sessionId === currentSessionId) {\n        throw ApiError.badRequest('Cannot revoke current session', 'CANNOT_REVOKE_CURRENT_SESSION')\n      }\n\n      await authService.revokeSession(sessionId, userId)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'Session revoked successfully',\n      })\n    })\n  )\n\n  // Revoke all sessions route\n  app.delete(\n    '/sessions',\n    {\n      preHandler: requireAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const userId = request.user!.id\n\n      await authService.revokeAllSessions(userId)\n\n      return reply.status(200).send({\n        success: true,\n        message: 'All sessions revoked successfully',\n      })\n    })\n  )\n\n  // Verify token route (for client-side token validation)\n  app.post(\n    '/verify',\n    {\n      preHandler: optionalAuth,\n      schema: {\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  valid: { type: 'boolean' },\n                  user: {\n                    type: 'object',\n                    nullable: true,\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      email: { type: 'string' },\n                      role: { type: 'string' },\n                    },\n                  },\n                  organization: {\n                    type: 'object',\n                    nullable: true,\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      slug: { type: 'string' },\n                      planType: { type: 'string' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    asyncHandler(async (request, reply) => {\n      const isValid = !!request.user\n\n      return reply.status(200).send({\n        success: true,\n        data: {\n          valid: isValid,\n          user: request.user || null,\n          organization: request.organization || null,\n        },\n      })\n    })\n  )\n}"],"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","ignoreList":[]}