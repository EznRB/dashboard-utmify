{"version":3,"names":["cov_r9zfrkqas","actualCoverage","nanoid_1","s","require","bcryptjs_1","__importDefault","database_1","env_1","logger_1","errors_1","AuthService","app","constructor","f","generateTokens","user","sessionId","payload","userId","id","organizationId","role","email","refreshTokenId","nanoid","refreshPayload","tokenId","accessToken","jwt","sign","expiresIn","jwtConfig","accessExpiresIn","refreshToken","secret","refreshSecret","refreshExpiresIn","verify","db","findUnique","where","include","organization","b","isActive","ApiError","session","userSession","expiresAt","Date","newTokens","redis","del","refreshTokenKey","logAuth","error","login","password","ip","userAgent","toLowerCase","undefined","isValidPassword","default","compare","setDate","getDate","create","data","token","update","lastLoginAt","tokens","_","safeUser","register","name","organizationName","existingUser","baseSlug","replace","substring","slug","counter","hashedPassword","hash","result","$transaction","tx","settings","JSON","stringify","timezone","currency","dateFormat","allowPublicDashboard","requireTwoFactor","maxUsers","customBranding","logout","logger","verifyToken","getUserSessions","findMany","gt","orderBy","createdAt","select","ipAddress","revokeSession","updateMany","revokeAllSessions","exports"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts"],"sourcesContent":["import { nanoid } from 'nanoid'\nimport bcrypt from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport { db } from '@utmify/database'\nimport type { User, Organization, UserRole } from '@utmify/shared'\nimport { jwtConfig } from '@/config/env'\nimport { logger, logAuth } from '@/utils/logger'\nimport { ApiError } from '@/utils/errors'\n\nexport interface AuthTokens {\n  accessToken: string\n  refreshToken: string\n  expiresIn: number\n}\n\nexport interface JWTPayload {\n  userId: string\n  organizationId: string\n  role: UserRole\n  email: string\n  sessionId: string\n}\n\nexport interface RefreshTokenPayload {\n  userId: string\n  sessionId: string\n  tokenId: string\n}\n\nexport class AuthService {\n  constructor(private app: FastifyInstance) {}\n\n  // Generate JWT tokens\n  async generateTokens(user: User, sessionId: string): Promise<AuthTokens> {\n    const payload: JWTPayload = {\n      userId: user.id,\n      organizationId: user.organizationId,\n      role: user.role,\n      email: user.email,\n      sessionId,\n    }\n\n    const refreshTokenId = nanoid()\n    const refreshPayload: RefreshTokenPayload = {\n      userId: user.id,\n      sessionId,\n      tokenId: refreshTokenId,\n    }\n\n    // Generate access token\n    const accessToken = this.app.jwt.sign(payload, {\n      expiresIn: jwtConfig.accessExpiresIn,\n    })\n\n    // Generate refresh token with different secret\n    const refreshToken = this.app.jwt.sign(refreshPayload, {\n      secret: jwtConfig.refreshSecret,\n      expiresIn: jwtConfig.refreshExpiresIn,\n    })\n\n    // Store refresh token in Redis (temporarily disabled)\n    // const refreshTokenKey = `refresh_token:${refreshTokenId}`\n    // const refreshTokenData = {\n    //   userId: user.id,\n    //   sessionId,\n    //   createdAt: new Date().toISOString(),\n    // }\n\n    // await this.app.redis.setex(\n    //   refreshTokenKey,\n    //   7 * 24 * 60 * 60, // 7 days in seconds\n    //   JSON.stringify(refreshTokenData)\n    // )\n\n    // Calculate expiration time\n    const expiresIn = 15 * 60 // 15 minutes in seconds\n\n    return {\n      accessToken,\n      refreshToken,\n      expiresIn,\n    }\n  }\n\n  // Verify and refresh access token\n  async refreshToken(refreshToken: string): Promise<AuthTokens> {\n    try {\n      // Verify refresh token\n      const payload = this.app.jwt.verify(refreshToken, {\n        secret: jwtConfig.refreshSecret,\n      }) as RefreshTokenPayload\n\n      // Check if refresh token exists in Redis (temporarily disabled)\n      // const refreshTokenKey = `refresh_token:${payload.tokenId}`\n      // const tokenData = await this.app.redis.get(refreshTokenKey)\n\n      // if (!tokenData) {\n      //   throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n      // }\n\n      // const parsedTokenData = JSON.parse(tokenData)\n      // if (parsedTokenData.userId !== payload.userId || parsedTokenData.sessionId !== payload.sessionId) {\n      //   throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n      // }\n\n      // Get user from database\n      const user = await db.user.findUnique({\n        where: { id: payload.userId },\n        include: { organization: true },\n      })\n\n      if (!user || !user.isActive) {\n        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401)\n      }\n\n      // Check if session is still valid\n      const session = await db.userSession.findUnique({\n        where: { id: payload.sessionId },\n      })\n\n      if (!session || session.expiresAt < new Date()) {\n        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401)\n      }\n\n      // Generate new tokens\n      const newTokens = await this.generateTokens(user, payload.sessionId)\n\n      // Remove old refresh token\n      await this.app.redis.del(refreshTokenKey)\n\n      logAuth('token_refreshed', user.id, user.email)\n\n      return newTokens\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error\n      }\n      throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n    }\n  }\n\n  // Login user\n  async login(email: string, password: string, ip?: string, userAgent?: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    tokens: AuthTokens\n  }> {\n    // Find user with organization\n    const user = await db.user.findUnique({\n      where: { email: email.toLowerCase() },\n      include: { organization: true },\n    })\n\n    if (!user) {\n      logAuth('login_failed', undefined, email, ip, false)\n      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401)\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      logAuth('login_failed_inactive', user.id, email, ip, false)\n      throw new ApiError('Account is disabled', 'ACCOUNT_DISABLED', 401)\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password)\n    if (!isValidPassword) {\n      logAuth('login_failed', user.id, email, ip, false)\n      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401)\n    }\n\n    // Check if organization is active\n    if (!user.organization.isActive) {\n      logAuth('login_failed_org_inactive', user.id, email, ip, false)\n      throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401)\n    }\n\n    // Create user session\n    const sessionId = nanoid()\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 7) // 7 days\n\n    await db.userSession.create({\n      data: {\n        id: sessionId,\n        token: sessionId,\n        userId: user.id,\n        expiresAt,\n      },\n    })\n\n    // Update last login\n    await db.user.update({\n      where: { id: user.id },\n      data: { lastLoginAt: new Date() },\n    })\n\n    // Generate tokens\n    const tokens = await this.generateTokens(user, sessionId)\n\n    logAuth('login_success', user.id, email, ip)\n\n    // Remove password from response\n    const { password: _, ...safeUser } = user\n\n    return {\n      user: safeUser,\n      organization: user.organization,\n      tokens,\n    }\n  }\n\n  // Register new user and organization\n  async register(data: {\n    name: string\n    email: string\n    password: string\n    organizationName: string\n  }, ip?: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    tokens: AuthTokens\n  }> {\n    const { name, email, password, organizationName } = data\n\n    // Check if user already exists\n    const existingUser = await db.user.findUnique({\n      where: { email: email.toLowerCase() },\n    })\n\n    if (existingUser) {\n      throw new ApiError('Email already exists', 'EMAIL_ALREADY_EXISTS', 409)\n    }\n\n    // Generate organization slug\n    const baseSlug = organizationName\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/(^-|-$)/g, '')\n      .substring(0, 50)\n\n    let slug = baseSlug\n    let counter = 1\n\n    // Ensure unique slug\n    while (await db.organization.findUnique({ where: { slug } })) {\n      slug = `${baseSlug}-${counter}`\n      counter++\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12)\n\n    // Create organization and user in transaction\n    const result = await db.$transaction(async (tx) => {\n      // Create organization\n      const organization = await tx.organization.create({\n        data: {\n          name: organizationName,\n          slug,\n          settings: JSON.stringify({\n            timezone: 'UTC',\n            currency: 'USD',\n            dateFormat: 'MM/DD/YYYY',\n            allowPublicDashboard: false,\n            requireTwoFactor: false,\n            maxUsers: 2,\n            customBranding: false,\n          }),\n        },\n      })\n\n      // Create user as organization owner\n      const user = await tx.user.create({\n        data: {\n          name,\n          email: email.toLowerCase(),\n          password: hashedPassword,\n          role: 'OWNER',\n          isActive: true,\n          organizationId: organization.id,\n        },\n      })\n\n      return { user, organization }\n    })\n\n    // Create user session\n    const sessionId = nanoid()\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 7) // 7 days\n\n    await db.userSession.create({\n      data: {\n        id: sessionId,\n        token: sessionId,\n        userId: result.user.id,\n        expiresAt,\n      },\n    })\n\n    // Generate tokens\n    const tokens = await this.generateTokens(result.user, sessionId)\n\n    logAuth('register_success', result.user.id, email, ip)\n\n    // Remove password from response\n    const { password: _, ...safeUser } = result.user\n\n    return {\n      user: safeUser,\n      organization: result.organization,\n      tokens,\n    }\n  }\n\n  // Logout user\n  async logout(sessionId: string, refreshToken?: string): Promise<void> {\n    try {\n      // Invalidate session\n      await db.userSession.update({\n        where: { id: sessionId },\n        data: { expiresAt: new Date() },\n      })\n\n      // Remove refresh token from Redis if provided (temporarily disabled)\n      // if (refreshToken) {\n      //   try {\n      //     const payload = this.app.jwt.verify(refreshToken, {\n      //       secret: jwtConfig.refreshSecret,\n      //     }) as RefreshTokenPayload\n\n      //     const refreshTokenKey = `refresh_token:${payload.tokenId}`\n      //     await this.app.redis.del(refreshTokenKey)\n      //   } catch {\n      //     // Ignore errors when removing refresh token\n      //   }\n      // }\n\n      logAuth('logout_success')\n    } catch (error) {\n      logger.error(error, 'Error during logout')\n      throw new ApiError('Logout failed', 'LOGOUT_FAILED', 500)\n    }\n  }\n\n  // Verify JWT token and get user\n  async verifyToken(token: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    sessionId: string\n  }> {\n    try {\n      // Verify token\n      const payload = this.app.jwt.verify(token) as JWTPayload\n\n      // Check if session is still valid\n      const session = await db.userSession.findUnique({\n        where: { id: payload.sessionId },\n      })\n\n      if (!session || session.expiresAt < new Date()) {\n        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401)\n      }\n\n      // Get user with organization\n      const user = await db.user.findUnique({\n        where: { id: payload.userId },\n        include: { organization: true },\n      })\n\n      if (!user || !user.isActive) {\n        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401)\n      }\n\n      if (!user.organization.isActive) {\n        throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401)\n      }\n\n      // Remove password from response\n      const { password: _, ...safeUser } = user\n\n      return {\n        user: safeUser,\n        organization: user.organization,\n        sessionId: payload.sessionId,\n      }\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error\n      }\n      throw new ApiError('Invalid token', 'INVALID_TOKEN', 401)\n    }\n  }\n\n  // Get all active sessions for a user\n  async getUserSessions(userId: string): Promise<any[]> {\n    return db.userSession.findMany({\n      where: {\n        userId,\n        expiresAt: { gt: new Date() },\n      },\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        ipAddress: true,\n        userAgent: true,\n        createdAt: true,\n        expiresAt: true,\n      },\n    })\n  }\n\n  // Revoke a specific session\n  async revokeSession(sessionId: string, userId: string): Promise<void> {\n    await db.userSession.updateMany({\n      where: {\n        id: sessionId,\n        userId,\n      },\n      data: {\n        expiresAt: new Date(),\n      },\n    })\n\n    logAuth('session_revoked', userId)\n  }\n\n  // Revoke all sessions for a user\n  async revokeAllSessions(userId: string): Promise<void> {\n    await db.userSession.updateMany({\n      where: { userId },\n      data: { expiresAt: new Date() },\n    })\n\n    logAuth('all_sessions_revoked', userId)\n  }\n}"],"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","ignoreList":[]}