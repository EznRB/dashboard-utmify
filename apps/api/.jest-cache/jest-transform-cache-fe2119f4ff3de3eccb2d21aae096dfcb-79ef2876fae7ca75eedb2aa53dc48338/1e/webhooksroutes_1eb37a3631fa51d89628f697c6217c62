aa9d5189b8fd9782b54531ecab8bb02e
/* istanbul ignore next */
function cov_1tgt7ebh6e() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\webhooks.routes.ts";
  var hash = "cd8b4c62c54778fc95575c393700b4eb17a20732";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\webhooks.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "1": {
        start: {
          line: 18,
          column: 28
        },
        end: {
          line: 25,
          column: 2
        }
      },
      "2": {
        start: {
          line: 26,
          column: 28
        },
        end: {
          line: 35,
          column: 2
        }
      },
      "3": {
        start: {
          line: 36,
          column: 30
        },
        end: {
          line: 45,
          column: 2
        }
      },
      "4": {
        start: {
          line: 46,
          column: 28
        },
        end: {
          line: 54,
          column: 2
        }
      },
      "5": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 57
        }
      },
      "6": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 99,
          column: 7
        }
      },
      "7": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "8": {
        start: {
          line: 82,
          column: 30
        },
        end: {
          line: 82,
          column: 68
        }
      },
      "9": {
        start: {
          line: 83,
          column: 25
        },
        end: {
          line: 83,
          column: 37
        }
      },
      "10": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "11": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 61
        }
      },
      "12": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 66
        }
      },
      "13": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 61
        }
      },
      "14": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 132,
          column: 7
        }
      },
      "15": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "16": {
        start: {
          line: 118,
          column: 25
        },
        end: {
          line: 118,
          column: 37
        }
      },
      "17": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "18": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 61
        }
      },
      "19": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 68
        }
      },
      "20": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 61
        }
      },
      "21": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 173,
          column: 7
        }
      },
      "22": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "23": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 157,
          column: 65
        }
      },
      "24": {
        start: {
          line: 158,
          column: 25
        },
        end: {
          line: 158,
          column: 37
        }
      },
      "25": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "26": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 61
        }
      },
      "27": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 68
        }
      },
      "28": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 61
        }
      },
      "29": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 214,
          column: 7
        }
      },
      "30": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "31": {
        start: {
          line: 198,
          column: 30
        },
        end: {
          line: 198,
          column: 68
        }
      },
      "32": {
        start: {
          line: 199,
          column: 25
        },
        end: {
          line: 199,
          column: 37
        }
      },
      "33": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "34": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 61
        }
      },
      "35": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 70
        }
      },
      "36": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 61
        }
      },
      "37": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 236,
          column: 7
        }
      },
      "38": {
        start: {
          line: 231,
          column: 98
        },
        end: {
          line: 231,
          column: 111
        }
      },
      "39": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "40": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 53
        }
      },
      "41": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 51
        }
      },
      "42": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 257,
          column: 7
        }
      },
      "43": {
        start: {
          line: 252,
          column: 98
        },
        end: {
          line: 252,
          column: 111
        }
      },
      "44": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "45": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 53
        }
      },
      "46": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 51
        }
      },
      "47": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 587,
          column: 7
        }
      },
      "48": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 54
        }
      },
      "49": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 62
        }
      },
      "50": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 303,
          column: 11
        }
      },
      "51": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 302,
          column: 13
        }
      },
      "52": {
        start: {
          line: 291,
          column: 29
        },
        end: {
          line: 291,
          column: 41
        }
      },
      "53": {
        start: {
          line: 292,
          column: 39
        },
        end: {
          line: 292,
          column: 62
        }
      },
      "54": {
        start: {
          line: 293,
          column: 31
        },
        end: {
          line: 293,
          column: 93
        }
      },
      "55": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 297,
          column: 19
        }
      },
      "56": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 70
        }
      },
      "57": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 106
        }
      },
      "58": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "59": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "60": {
        start: {
          line: 337,
          column: 39
        },
        end: {
          line: 337,
          column: 62
        }
      },
      "61": {
        start: {
          line: 338,
          column: 32
        },
        end: {
          line: 338,
          column: 86
        }
      },
      "62": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 342,
          column: 19
        }
      },
      "63": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 345,
          column: 70
        }
      },
      "64": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 105
        }
      },
      "65": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 411,
          column: 11
        }
      },
      "66": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 410,
          column: 13
        }
      },
      "67": {
        start: {
          line: 399,
          column: 39
        },
        end: {
          line: 399,
          column: 62
        }
      },
      "68": {
        start: {
          line: 400,
          column: 32
        },
        end: {
          line: 400,
          column: 45
        }
      },
      "69": {
        start: {
          line: 401,
          column: 31
        },
        end: {
          line: 401,
          column: 91
        }
      },
      "70": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 405,
          column: 19
        }
      },
      "71": {
        start: {
          line: 408,
          column: 16
        },
        end: {
          line: 408,
          column: 67
        }
      },
      "72": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 92
        }
      },
      "73": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 457,
          column: 11
        }
      },
      "74": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 456,
          column: 13
        }
      },
      "75": {
        start: {
          line: 445,
          column: 48
        },
        end: {
          line: 445,
          column: 60
        }
      },
      "76": {
        start: {
          line: 446,
          column: 39
        },
        end: {
          line: 446,
          column: 62
        }
      },
      "77": {
        start: {
          line: 447,
          column: 31
        },
        end: {
          line: 447,
          column: 104
        }
      },
      "78": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 451,
          column: 19
        }
      },
      "79": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 454,
          column: 67
        }
      },
      "80": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 455,
          column: 93
        }
      },
      "81": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 502,
          column: 11
        }
      },
      "82": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 501,
          column: 13
        }
      },
      "83": {
        start: {
          line: 490,
          column: 34
        },
        end: {
          line: 490,
          column: 46
        }
      },
      "84": {
        start: {
          line: 491,
          column: 39
        },
        end: {
          line: 491,
          column: 62
        }
      },
      "85": {
        start: {
          line: 492,
          column: 31
        },
        end: {
          line: 492,
          column: 87
        }
      },
      "86": {
        start: {
          line: 493,
          column: 16
        },
        end: {
          line: 496,
          column: 19
        }
      },
      "87": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 499,
          column: 63
        }
      },
      "88": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 500,
          column: 90
        }
      },
      "89": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 551,
          column: 11
        }
      },
      "90": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 550,
          column: 13
        }
      },
      "91": {
        start: {
          line: 538,
          column: 37
        },
        end: {
          line: 538,
          column: 51
        }
      },
      "92": {
        start: {
          line: 539,
          column: 29
        },
        end: {
          line: 539,
          column: 41
        }
      },
      "93": {
        start: {
          line: 540,
          column: 39
        },
        end: {
          line: 540,
          column: 62
        }
      },
      "94": {
        start: {
          line: 541,
          column: 31
        },
        end: {
          line: 541,
          column: 103
        }
      },
      "95": {
        start: {
          line: 542,
          column: 16
        },
        end: {
          line: 545,
          column: 19
        }
      },
      "96": {
        start: {
          line: 548,
          column: 16
        },
        end: {
          line: 548,
          column: 70
        }
      },
      "97": {
        start: {
          line: 549,
          column: 16
        },
        end: {
          line: 549,
          column: 106
        }
      },
      "98": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 586,
          column: 11
        }
      },
      "99": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 585,
          column: 13
        }
      },
      "100": {
        start: {
          line: 575,
          column: 37
        },
        end: {
          line: 575,
          column: 51
        }
      },
      "101": {
        start: {
          line: 576,
          column: 39
        },
        end: {
          line: 576,
          column: 62
        }
      },
      "102": {
        start: {
          line: 577,
          column: 16
        },
        end: {
          line: 577,
          column: 83
        }
      },
      "103": {
        start: {
          line: 578,
          column: 16
        },
        end: {
          line: 580,
          column: 19
        }
      },
      "104": {
        start: {
          line: 583,
          column: 16
        },
        end: {
          line: 583,
          column: 70
        }
      },
      "105": {
        start: {
          line: 584,
          column: 16
        },
        end: {
          line: 584,
          column: 106
        }
      }
    },
    fnMap: {
      "0": {
        name: "webhooksRoutes",
        decl: {
          start: {
            line: 55,
            column: 22
          },
          end: {
            line: 55,
            column: 36
          }
        },
        loc: {
          start: {
            line: 55,
            column: 46
          },
          end: {
            line: 588,
            column: 1
          }
        },
        line: 55
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 80,
            column: 7
          },
          end: {
            line: 80,
            column: 8
          }
        },
        loc: {
          start: {
            line: 80,
            column: 33
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 80
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 116,
            column: 7
          },
          end: {
            line: 116,
            column: 8
          }
        },
        loc: {
          start: {
            line: 116,
            column: 33
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 116
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 155,
            column: 7
          },
          end: {
            line: 155,
            column: 8
          }
        },
        loc: {
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 155
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 196,
            column: 7
          },
          end: {
            line: 196,
            column: 8
          }
        },
        loc: {
          start: {
            line: 196,
            column: 33
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 196
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 230,
            column: 7
          },
          end: {
            line: 230,
            column: 8
          }
        },
        loc: {
          start: {
            line: 230,
            column: 33
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 230
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 251,
            column: 7
          },
          end: {
            line: 251,
            column: 8
          }
        },
        loc: {
          start: {
            line: 251,
            column: 33
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 251
      },
      "7": {
        name: "authenticatedWebhookRoutes",
        decl: {
          start: {
            line: 259,
            column: 36
          },
          end: {
            line: 259,
            column: 62
          }
        },
        loc: {
          start: {
            line: 259,
            column: 72
          },
          end: {
            line: 587,
            column: 5
          }
        },
        line: 259
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 289,
            column: 11
          },
          end: {
            line: 289,
            column: 12
          }
        },
        loc: {
          start: {
            line: 289,
            column: 37
          },
          end: {
            line: 303,
            column: 9
          }
        },
        line: 289
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 335,
            column: 11
          },
          end: {
            line: 335,
            column: 12
          }
        },
        loc: {
          start: {
            line: 335,
            column: 37
          },
          end: {
            line: 348,
            column: 9
          }
        },
        line: 335
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 397,
            column: 11
          },
          end: {
            line: 397,
            column: 12
          }
        },
        loc: {
          start: {
            line: 397,
            column: 37
          },
          end: {
            line: 411,
            column: 9
          }
        },
        line: 397
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 443,
            column: 11
          },
          end: {
            line: 443,
            column: 12
          }
        },
        loc: {
          start: {
            line: 443,
            column: 37
          },
          end: {
            line: 457,
            column: 9
          }
        },
        line: 443
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 488,
            column: 11
          },
          end: {
            line: 488,
            column: 12
          }
        },
        loc: {
          start: {
            line: 488,
            column: 37
          },
          end: {
            line: 502,
            column: 9
          }
        },
        line: 488
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 536,
            column: 11
          },
          end: {
            line: 536,
            column: 12
          }
        },
        loc: {
          start: {
            line: 536,
            column: 37
          },
          end: {
            line: 551,
            column: 9
          }
        },
        line: 536
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 573,
            column: 11
          },
          end: {
            line: 573,
            column: 12
          }
        },
        loc: {
          start: {
            line: 573,
            column: 37
          },
          end: {
            line: 586,
            column: 9
          }
        },
        line: 573
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "1": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 32
          }
        }, {
          start: {
            line: 232,
            column: 36
          },
          end: {
            line: 232,
            column: 89
          }
        }],
        line: 232
      },
      "2": {
        loc: {
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "3": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 253,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 253,
            column: 32
          }
        }, {
          start: {
            line: 253,
            column: 36
          },
          end: {
            line: 253,
            column: 93
          }
        }],
        line: 253
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\webhooks.routes.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\webhooks.routes.ts"],
      sourcesContent: ["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { authMiddleware, organizationMiddleware, apiKeyMiddleware } from '../middleware/auth.middleware';\nimport { WebhookService } from '../services/webhook.service';\nimport { ApiError } from '../utils/errors';\nimport { logger } from '../utils/logger';\nimport { z } from 'zod';\n\n// Webhook payload schemas\nconst MetaWebhookSchema = z.object({\n  object: z.string(),\n  entry: z.array(z.object({\n    id: z.string(),\n    time: z.number(),\n    changes: z.array(z.object({\n      field: z.string(),\n      value: z.any(),\n    })),\n  })),\n});\n\nconst GoogleWebhookSchema = z.object({\n  message: z.object({\n    data: z.string(), // Base64 encoded\n    messageId: z.string(),\n    publishTime: z.string(),\n  }),\n  subscription: z.string(),\n});\n\nconst StripeWebhookSchema = z.object({\n  id: z.string(),\n  object: z.literal('event'),\n  type: z.string(),\n  data: z.object({\n    object: z.any(),\n  }),\n  created: z.number(),\n  livemode: z.boolean(),\n});\n\nconst WhatsAppWebhookSchema = z.object({\n  object: z.string(),\n  entry: z.array(z.object({\n    id: z.string(),\n    changes: z.array(z.object({\n      field: z.string(),\n      value: z.any(),\n    })),\n  })),\n});\n\nconst WebhookConfigSchema = z.object({\n  name: z.string().min(1).max(255),\n  url: z.string().url(),\n  eventTypes: z.array(z.enum(['NEW_CONVERSION', 'GOAL_REACHED', 'BUDGET_EXCEEDED', 'CAMPAIGN_PAUSED'])),\n  secret: z.string().optional(),\n  headers: z.record(z.string()).optional(),\n  timeout: z.number().min(1).max(300).default(30),\n  isActive: z.boolean().default(true),\n});\n\nexport async function webhooksRoutes(fastify: FastifyInstance) {\n  const webhookService = new WebhookService(fastify.db);\n\n  // Incoming webhook endpoints (no auth required, but signature validation)\n  \n  // Meta Ads webhook\n  fastify.post(\n    '/meta',\n    {\n      preHandler: [], // No auth middleware for incoming webhooks\n      schema: {\n        tags: ['Webhooks'],\n        summary: 'Receive Meta Ads webhook',\n        headers: {\n          type: 'object',\n          properties: {\n            'x-hub-signature-256': { type: 'string' },\n          },\n        },\n        body: MetaWebhookSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const signature = request.headers['x-hub-signature-256'] as string;\n        const body = request.body as z.infer<typeof MetaWebhookSchema>;\n        \n        // Process webhook asynchronously\n        await webhookService.processIncomingWebhook({\n          provider: 'META_ADS',\n          signature,\n          payload: body,\n          headers: request.headers,\n          sourceIp: request.ip,\n          userAgent: request.headers['user-agent'],\n        });\n\n        return reply.status(200).send({ success: true });\n      } catch (error) {\n        logger.error('Error processing Meta webhook:', error);\n        return reply.status(200).send({ success: true }); // Always return 200 for webhooks\n      }\n    }\n  );\n\n  // Google Ads webhook\n  fastify.post(\n    '/google',\n    {\n      preHandler: [],\n      schema: {\n        tags: ['Webhooks'],\n        summary: 'Receive Google Ads webhook',\n        body: GoogleWebhookSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const body = request.body as z.infer<typeof GoogleWebhookSchema>;\n        \n        await webhookService.processIncomingWebhook({\n          provider: 'GOOGLE_ADS',\n          payload: body,\n          headers: request.headers,\n          sourceIp: request.ip,\n          userAgent: request.headers['user-agent'],\n        });\n\n        return reply.status(200).send({ success: true });\n      } catch (error) {\n        logger.error('Error processing Google webhook:', error);\n        return reply.status(200).send({ success: true });\n      }\n    }\n  );\n\n  // Stripe webhook\n  fastify.post(\n    '/stripe',\n    {\n      preHandler: [],\n      schema: {\n        tags: ['Webhooks'],\n        summary: 'Receive Stripe webhook',\n        headers: {\n          type: 'object',\n          properties: {\n            'stripe-signature': { type: 'string' },\n          },\n        },\n        body: StripeWebhookSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const signature = request.headers['stripe-signature'] as string;\n        const body = request.body as z.infer<typeof StripeWebhookSchema>;\n        \n        await webhookService.processIncomingWebhook({\n          provider: 'STRIPE',\n          signature,\n          payload: body,\n          headers: request.headers,\n          sourceIp: request.ip,\n          userAgent: request.headers['user-agent'],\n        });\n\n        return reply.status(200).send({ success: true });\n      } catch (error) {\n        logger.error('Error processing Stripe webhook:', error);\n        return reply.status(200).send({ success: true });\n      }\n    }\n  );\n\n  // WhatsApp webhook\n  fastify.post(\n    '/whatsapp',\n    {\n      preHandler: [],\n      schema: {\n        tags: ['Webhooks'],\n        summary: 'Receive WhatsApp webhook',\n        headers: {\n          type: 'object',\n          properties: {\n            'x-hub-signature-256': { type: 'string' },\n          },\n        },\n        body: WhatsAppWebhookSchema,\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const signature = request.headers['x-hub-signature-256'] as string;\n        const body = request.body as z.infer<typeof WhatsAppWebhookSchema>;\n        \n        await webhookService.processIncomingWebhook({\n          provider: 'WHATSAPP',\n          signature,\n          payload: body,\n          headers: request.headers,\n          sourceIp: request.ip,\n          userAgent: request.headers['user-agent'],\n        });\n\n        return reply.status(200).send({ success: true });\n      } catch (error) {\n        logger.error('Error processing WhatsApp webhook:', error);\n        return reply.status(200).send({ success: true });\n      }\n    }\n  );\n\n  // Webhook verification endpoints (for Meta and WhatsApp)\n  fastify.get(\n    '/meta',\n    {\n      schema: {\n        tags: ['Webhooks'],\n        summary: 'Verify Meta webhook',\n        querystring: {\n          type: 'object',\n          properties: {\n            'hub.mode': { type: 'string' },\n            'hub.challenge': { type: 'string' },\n            'hub.verify_token': { type: 'string' },\n          },\n          required: ['hub.mode', 'hub.challenge', 'hub.verify_token'],\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      const { 'hub.mode': mode, 'hub.challenge': challenge, 'hub.verify_token': verifyToken } = request.query as any;\n      \n      if (mode === 'subscribe' && verifyToken === process.env.META_WEBHOOK_VERIFY_TOKEN) {\n        return reply.status(200).send(challenge);\n      }\n      \n      return reply.status(403).send('Forbidden');\n    }\n  );\n\n  fastify.get(\n    '/whatsapp',\n    {\n      schema: {\n        tags: ['Webhooks'],\n        summary: 'Verify WhatsApp webhook',\n        querystring: {\n          type: 'object',\n          properties: {\n            'hub.mode': { type: 'string' },\n            'hub.challenge': { type: 'string' },\n            'hub.verify_token': { type: 'string' },\n          },\n          required: ['hub.mode', 'hub.challenge', 'hub.verify_token'],\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      const { 'hub.mode': mode, 'hub.challenge': challenge, 'hub.verify_token': verifyToken } = request.query as any;\n      \n      if (mode === 'subscribe' && verifyToken === process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN) {\n        return reply.status(200).send(challenge);\n      }\n      \n      return reply.status(403).send('Forbidden');\n    }\n  );\n\n  // Authenticated webhook management endpoints\n  fastify.register(async function authenticatedWebhookRoutes(fastify) {\n    // Add authentication middleware\n    fastify.addHook('preHandler', authMiddleware);\n    fastify.addHook('preHandler', organizationMiddleware);\n\n    // Configure outgoing webhook\n    fastify.post(\n      '/configure',\n      {\n        schema: {\n          tags: ['Webhooks'],\n          summary: 'Configure outgoing webhook',\n          body: WebhookConfigSchema,\n          response: {\n            201: {\n              type: 'object',\n              properties: {\n                success: { type: 'boolean' },\n                data: {\n                  type: 'object',\n                  properties: {\n                    id: { type: 'string' },\n                    name: { type: 'string' },\n                    url: { type: 'string' },\n                    eventTypes: { type: 'array', items: { type: 'string' } },\n                    isActive: { type: 'boolean' },\n                    createdAt: { type: 'string' },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      async (request: FastifyRequest, reply: FastifyReply) => {\n        try {\n          const body = request.body as z.infer<typeof WebhookConfigSchema>;\n          const organizationId = request.organization!.id;\n\n          const config = await webhookService.createWebhookConfig(organizationId, body);\n\n          return reply.status(201).send({\n            success: true,\n            data: config,\n          });\n        } catch (error) {\n          logger.error('Error creating webhook config:', error);\n          throw new ApiError('Failed to create webhook configuration', 'WEBHOOK_CONFIG_ERROR', 500);\n        }\n      }\n    );\n\n    // Get webhook configurations\n    fastify.get(\n      '/configs',\n      {\n        schema: {\n          tags: ['Webhooks'],\n          summary: 'Get webhook configurations',\n          response: {\n            200: {\n              type: 'object',\n              properties: {\n                success: { type: 'boolean' },\n                data: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      url: { type: 'string' },\n                      eventTypes: { type: 'array', items: { type: 'string' } },\n                      isActive: { type: 'boolean' },\n                      totalSent: { type: 'number' },\n                      totalFailed: { type: 'number' },\n                      lastSentAt: { type: 'string', nullable: true },\n                      createdAt: { type: 'string' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      async (request: FastifyRequest, reply: FastifyReply) => {\n        try {\n          const organizationId = request.organization!.id;\n          const configs = await webhookService.getWebhookConfigs(organizationId);\n\n          return reply.status(200).send({\n            success: true,\n            data: configs,\n          });\n        } catch (error) {\n          logger.error('Error getting webhook configs:', error);\n          throw new ApiError('Failed to get webhook configurations', 'WEBHOOK_CONFIGS_ERROR', 500);\n        }\n      }\n    );\n\n    // Get webhook logs\n    fastify.get(\n      '/logs',\n      {\n        schema: {\n          tags: ['Webhooks'],\n          summary: 'Get webhook logs',\n          querystring: {\n            type: 'object',\n            properties: {\n              configId: { type: 'string' },\n              eventType: { type: 'string' },\n              isSuccess: { type: 'boolean' },\n              limit: { type: 'number', minimum: 1, maximum: 100, default: 20 },\n              offset: { type: 'number', minimum: 0, default: 0 },\n            },\n          },\n          response: {\n            200: {\n              type: 'object',\n              properties: {\n                success: { type: 'boolean' },\n                data: {\n                  type: 'object',\n                  properties: {\n                    logs: {\n                      type: 'array',\n                      items: {\n                        type: 'object',\n                        properties: {\n                          id: { type: 'string' },\n                          url: { type: 'string' },\n                          eventType: { type: 'string' },\n                          statusCode: { type: 'number', nullable: true },\n                          responseTime: { type: 'number', nullable: true },\n                          isSuccess: { type: 'boolean' },\n                          attempt: { type: 'number' },\n                          error: { type: 'string', nullable: true },\n                          createdAt: { type: 'string' },\n                        },\n                      },\n                    },\n                    total: { type: 'number' },\n                    hasMore: { type: 'boolean' },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      async (request: FastifyRequest, reply: FastifyReply) => {\n        try {\n          const organizationId = request.organization!.id;\n          const filters = request.query as any;\n          \n          const result = await webhookService.getWebhookLogs(organizationId, filters);\n\n          return reply.status(200).send({\n            success: true,\n            data: result,\n          });\n        } catch (error) {\n          logger.error('Error getting webhook logs:', error);\n          throw new ApiError('Failed to get webhook logs', 'WEBHOOK_LOGS_ERROR', 500);\n        }\n      }\n    );\n\n    // Test webhook\n    fastify.post(\n      '/test',\n      {\n        schema: {\n          tags: ['Webhooks'],\n          summary: 'Send test webhook',\n          body: {\n            type: 'object',\n            properties: {\n              configId: { type: 'string' },\n              eventType: { type: 'string', enum: ['NEW_CONVERSION', 'GOAL_REACHED', 'BUDGET_EXCEEDED', 'CAMPAIGN_PAUSED'] },\n            },\n            required: ['configId', 'eventType'],\n          },\n          response: {\n            200: {\n              type: 'object',\n              properties: {\n                success: { type: 'boolean' },\n                data: {\n                  type: 'object',\n                  properties: {\n                    logId: { type: 'string' },\n                    statusCode: { type: 'number' },\n                    responseTime: { type: 'number' },\n                    isSuccess: { type: 'boolean' },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      async (request: FastifyRequest, reply: FastifyReply) => {\n        try {\n          const { configId, eventType } = request.body as any;\n          const organizationId = request.organization!.id;\n\n          const result = await webhookService.sendTestWebhook(organizationId, configId, eventType);\n\n          return reply.status(200).send({\n            success: true,\n            data: result,\n          });\n        } catch (error) {\n          logger.error('Error sending test webhook:', error);\n          throw new ApiError('Failed to send test webhook', 'WEBHOOK_TEST_ERROR', 500);\n        }\n      }\n    );\n\n    // Retry failed webhook\n    fastify.post(\n      '/retry',\n      {\n        schema: {\n          tags: ['Webhooks'],\n          summary: 'Retry failed webhook',\n          body: {\n            type: 'object',\n            properties: {\n              logId: { type: 'string' },\n            },\n            required: ['logId'],\n          },\n          response: {\n            200: {\n              type: 'object',\n              properties: {\n                success: { type: 'boolean' },\n                data: {\n                  type: 'object',\n                  properties: {\n                    logId: { type: 'string' },\n                    statusCode: { type: 'number' },\n                    responseTime: { type: 'number' },\n                    isSuccess: { type: 'boolean' },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      async (request: FastifyRequest, reply: FastifyReply) => {\n        try {\n          const { logId } = request.body as any;\n          const organizationId = request.organization!.id;\n\n          const result = await webhookService.retryWebhook(organizationId, logId);\n\n          return reply.status(200).send({\n            success: true,\n            data: result,\n          });\n        } catch (error) {\n          logger.error('Error retrying webhook:', error);\n          throw new ApiError('Failed to retry webhook', 'WEBHOOK_RETRY_ERROR', 500);\n        }\n      }\n    );\n\n    // Update webhook configuration\n    fastify.put(\n      '/configs/:configId',\n      {\n        schema: {\n          tags: ['Webhooks'],\n          summary: 'Update webhook configuration',\n          params: {\n            type: 'object',\n            properties: {\n              configId: { type: 'string' },\n            },\n            required: ['configId'],\n          },\n          body: WebhookConfigSchema.partial(),\n          response: {\n            200: {\n              type: 'object',\n              properties: {\n                success: { type: 'boolean' },\n                data: {\n                  type: 'object',\n                  properties: {\n                    id: { type: 'string' },\n                    name: { type: 'string' },\n                    url: { type: 'string' },\n                    eventTypes: { type: 'array', items: { type: 'string' } },\n                    isActive: { type: 'boolean' },\n                    updatedAt: { type: 'string' },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      async (request: FastifyRequest, reply: FastifyReply) => {\n        try {\n          const { configId } = request.params as any;\n          const body = request.body as Partial<z.infer<typeof WebhookConfigSchema>>;\n          const organizationId = request.organization!.id;\n\n          const config = await webhookService.updateWebhookConfig(organizationId, configId, body);\n\n          return reply.status(200).send({\n            success: true,\n            data: config,\n          });\n        } catch (error) {\n          logger.error('Error updating webhook config:', error);\n          throw new ApiError('Failed to update webhook configuration', 'WEBHOOK_UPDATE_ERROR', 500);\n        }\n      }\n    );\n\n    // Delete webhook configuration\n    fastify.delete(\n      '/configs/:configId',\n      {\n        schema: {\n          tags: ['Webhooks'],\n          summary: 'Delete webhook configuration',\n          params: {\n            type: 'object',\n            properties: {\n              configId: { type: 'string' },\n            },\n            required: ['configId'],\n          },\n          response: {\n            200: {\n              type: 'object',\n              properties: {\n                success: { type: 'boolean' },\n              },\n            },\n          },\n        },\n      },\n      async (request: FastifyRequest, reply: FastifyReply) => {\n        try {\n          const { configId } = request.params as any;\n          const organizationId = request.organization!.id;\n\n          await webhookService.deleteWebhookConfig(organizationId, configId);\n\n          return reply.status(200).send({\n            success: true,\n          });\n        } catch (error) {\n          logger.error('Error deleting webhook config:', error);\n          throw new ApiError('Failed to delete webhook configuration', 'WEBHOOK_DELETE_ERROR', 500);\n        }\n      }\n    );\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cd8b4c62c54778fc95575c393700b4eb17a20732"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1tgt7ebh6e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1tgt7ebh6e();
import { authMiddleware, organizationMiddleware } from '../middleware/auth.middleware';
import { WebhookService } from '../services/webhook.service';
import { ApiError } from '../utils/errors';
import { logger } from '../utils/logger';
import { z } from 'zod';
// Webhook payload schemas
const MetaWebhookSchema =
/* istanbul ignore next */
(cov_1tgt7ebh6e().s[0]++, z.object({
  object: z.string(),
  entry: z.array(z.object({
    id: z.string(),
    time: z.number(),
    changes: z.array(z.object({
      field: z.string(),
      value: z.any()
    }))
  }))
}));
const GoogleWebhookSchema =
/* istanbul ignore next */
(cov_1tgt7ebh6e().s[1]++, z.object({
  message: z.object({
    data: z.string(),
    // Base64 encoded
    messageId: z.string(),
    publishTime: z.string()
  }),
  subscription: z.string()
}));
const StripeWebhookSchema =
/* istanbul ignore next */
(cov_1tgt7ebh6e().s[2]++, z.object({
  id: z.string(),
  object: z.literal('event'),
  type: z.string(),
  data: z.object({
    object: z.any()
  }),
  created: z.number(),
  livemode: z.boolean()
}));
const WhatsAppWebhookSchema =
/* istanbul ignore next */
(cov_1tgt7ebh6e().s[3]++, z.object({
  object: z.string(),
  entry: z.array(z.object({
    id: z.string(),
    changes: z.array(z.object({
      field: z.string(),
      value: z.any()
    }))
  }))
}));
const WebhookConfigSchema =
/* istanbul ignore next */
(cov_1tgt7ebh6e().s[4]++, z.object({
  name: z.string().min(1).max(255),
  url: z.string().url(),
  eventTypes: z.array(z.enum(['NEW_CONVERSION', 'GOAL_REACHED', 'BUDGET_EXCEEDED', 'CAMPAIGN_PAUSED'])),
  secret: z.string().optional(),
  headers: z.record(z.string()).optional(),
  timeout: z.number().min(1).max(300).default(30),
  isActive: z.boolean().default(true)
}));
export async function webhooksRoutes(fastify) {
  /* istanbul ignore next */
  cov_1tgt7ebh6e().f[0]++;
  const webhookService =
  /* istanbul ignore next */
  (cov_1tgt7ebh6e().s[5]++, new WebhookService(fastify.db));
  // Incoming webhook endpoints (no auth required, but signature validation)
  // Meta Ads webhook
  /* istanbul ignore next */
  cov_1tgt7ebh6e().s[6]++;
  fastify.post('/meta', {
    preHandler: [],
    // No auth middleware for incoming webhooks
    schema: {
      tags: ['Webhooks'],
      summary: 'Receive Meta Ads webhook',
      headers: {
        type: 'object',
        properties: {
          'x-hub-signature-256': {
            type: 'string'
          }
        }
      },
      body: MetaWebhookSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1tgt7ebh6e().f[1]++;
    cov_1tgt7ebh6e().s[7]++;
    try {
      const signature =
      /* istanbul ignore next */
      (cov_1tgt7ebh6e().s[8]++, request.headers['x-hub-signature-256']);
      const body =
      /* istanbul ignore next */
      (cov_1tgt7ebh6e().s[9]++, request.body);
      // Process webhook asynchronously
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[10]++;
      await webhookService.processIncomingWebhook({
        provider: 'META_ADS',
        signature,
        payload: body,
        headers: request.headers,
        sourceIp: request.ip,
        userAgent: request.headers['user-agent']
      });
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[11]++;
      return reply.status(200).send({
        success: true
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[12]++;
      logger.error('Error processing Meta webhook:', error);
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[13]++;
      return reply.status(200).send({
        success: true
      }); // Always return 200 for webhooks
    }
  });
  // Google Ads webhook
  /* istanbul ignore next */
  cov_1tgt7ebh6e().s[14]++;
  fastify.post('/google', {
    preHandler: [],
    schema: {
      tags: ['Webhooks'],
      summary: 'Receive Google Ads webhook',
      body: GoogleWebhookSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1tgt7ebh6e().f[2]++;
    cov_1tgt7ebh6e().s[15]++;
    try {
      const body =
      /* istanbul ignore next */
      (cov_1tgt7ebh6e().s[16]++, request.body);
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[17]++;
      await webhookService.processIncomingWebhook({
        provider: 'GOOGLE_ADS',
        payload: body,
        headers: request.headers,
        sourceIp: request.ip,
        userAgent: request.headers['user-agent']
      });
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[18]++;
      return reply.status(200).send({
        success: true
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[19]++;
      logger.error('Error processing Google webhook:', error);
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[20]++;
      return reply.status(200).send({
        success: true
      });
    }
  });
  // Stripe webhook
  /* istanbul ignore next */
  cov_1tgt7ebh6e().s[21]++;
  fastify.post('/stripe', {
    preHandler: [],
    schema: {
      tags: ['Webhooks'],
      summary: 'Receive Stripe webhook',
      headers: {
        type: 'object',
        properties: {
          'stripe-signature': {
            type: 'string'
          }
        }
      },
      body: StripeWebhookSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1tgt7ebh6e().f[3]++;
    cov_1tgt7ebh6e().s[22]++;
    try {
      const signature =
      /* istanbul ignore next */
      (cov_1tgt7ebh6e().s[23]++, request.headers['stripe-signature']);
      const body =
      /* istanbul ignore next */
      (cov_1tgt7ebh6e().s[24]++, request.body);
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[25]++;
      await webhookService.processIncomingWebhook({
        provider: 'STRIPE',
        signature,
        payload: body,
        headers: request.headers,
        sourceIp: request.ip,
        userAgent: request.headers['user-agent']
      });
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[26]++;
      return reply.status(200).send({
        success: true
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[27]++;
      logger.error('Error processing Stripe webhook:', error);
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[28]++;
      return reply.status(200).send({
        success: true
      });
    }
  });
  // WhatsApp webhook
  /* istanbul ignore next */
  cov_1tgt7ebh6e().s[29]++;
  fastify.post('/whatsapp', {
    preHandler: [],
    schema: {
      tags: ['Webhooks'],
      summary: 'Receive WhatsApp webhook',
      headers: {
        type: 'object',
        properties: {
          'x-hub-signature-256': {
            type: 'string'
          }
        }
      },
      body: WhatsAppWebhookSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1tgt7ebh6e().f[4]++;
    cov_1tgt7ebh6e().s[30]++;
    try {
      const signature =
      /* istanbul ignore next */
      (cov_1tgt7ebh6e().s[31]++, request.headers['x-hub-signature-256']);
      const body =
      /* istanbul ignore next */
      (cov_1tgt7ebh6e().s[32]++, request.body);
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[33]++;
      await webhookService.processIncomingWebhook({
        provider: 'WHATSAPP',
        signature,
        payload: body,
        headers: request.headers,
        sourceIp: request.ip,
        userAgent: request.headers['user-agent']
      });
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[34]++;
      return reply.status(200).send({
        success: true
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[35]++;
      logger.error('Error processing WhatsApp webhook:', error);
      /* istanbul ignore next */
      cov_1tgt7ebh6e().s[36]++;
      return reply.status(200).send({
        success: true
      });
    }
  });
  // Webhook verification endpoints (for Meta and WhatsApp)
  /* istanbul ignore next */
  cov_1tgt7ebh6e().s[37]++;
  fastify.get('/meta', {
    schema: {
      tags: ['Webhooks'],
      summary: 'Verify Meta webhook',
      querystring: {
        type: 'object',
        properties: {
          'hub.mode': {
            type: 'string'
          },
          'hub.challenge': {
            type: 'string'
          },
          'hub.verify_token': {
            type: 'string'
          }
        },
        required: ['hub.mode', 'hub.challenge', 'hub.verify_token']
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1tgt7ebh6e().f[5]++;
    const {
      'hub.mode': mode,
      'hub.challenge': challenge,
      'hub.verify_token': verifyToken
    } =
    /* istanbul ignore next */
    (cov_1tgt7ebh6e().s[38]++, request.query);
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_1tgt7ebh6e().b[1][0]++, mode === 'subscribe') &&
    /* istanbul ignore next */
    (cov_1tgt7ebh6e().b[1][1]++, verifyToken === process.env.META_WEBHOOK_VERIFY_TOKEN)) {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().b[0][0]++;
      cov_1tgt7ebh6e().s[40]++;
      return reply.status(200).send(challenge);
    } else
    /* istanbul ignore next */
    {
      cov_1tgt7ebh6e().b[0][1]++;
    }
    cov_1tgt7ebh6e().s[41]++;
    return reply.status(403).send('Forbidden');
  });
  /* istanbul ignore next */
  cov_1tgt7ebh6e().s[42]++;
  fastify.get('/whatsapp', {
    schema: {
      tags: ['Webhooks'],
      summary: 'Verify WhatsApp webhook',
      querystring: {
        type: 'object',
        properties: {
          'hub.mode': {
            type: 'string'
          },
          'hub.challenge': {
            type: 'string'
          },
          'hub.verify_token': {
            type: 'string'
          }
        },
        required: ['hub.mode', 'hub.challenge', 'hub.verify_token']
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1tgt7ebh6e().f[6]++;
    const {
      'hub.mode': mode,
      'hub.challenge': challenge,
      'hub.verify_token': verifyToken
    } =
    /* istanbul ignore next */
    (cov_1tgt7ebh6e().s[43]++, request.query);
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_1tgt7ebh6e().b[3][0]++, mode === 'subscribe') &&
    /* istanbul ignore next */
    (cov_1tgt7ebh6e().b[3][1]++, verifyToken === process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN)) {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().b[2][0]++;
      cov_1tgt7ebh6e().s[45]++;
      return reply.status(200).send(challenge);
    } else
    /* istanbul ignore next */
    {
      cov_1tgt7ebh6e().b[2][1]++;
    }
    cov_1tgt7ebh6e().s[46]++;
    return reply.status(403).send('Forbidden');
  });
  // Authenticated webhook management endpoints
  /* istanbul ignore next */
  cov_1tgt7ebh6e().s[47]++;
  fastify.register(async function authenticatedWebhookRoutes(fastify) {
    /* istanbul ignore next */
    cov_1tgt7ebh6e().f[7]++;
    cov_1tgt7ebh6e().s[48]++;
    // Add authentication middleware
    fastify.addHook('preHandler', authMiddleware);
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[49]++;
    fastify.addHook('preHandler', organizationMiddleware);
    // Configure outgoing webhook
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[50]++;
    fastify.post('/configure', {
      schema: {
        tags: ['Webhooks'],
        summary: 'Configure outgoing webhook',
        body: WebhookConfigSchema,
        response: {
          201: {
            type: 'object',
            properties: {
              success: {
                type: 'boolean'
              },
              data: {
                type: 'object',
                properties: {
                  id: {
                    type: 'string'
                  },
                  name: {
                    type: 'string'
                  },
                  url: {
                    type: 'string'
                  },
                  eventTypes: {
                    type: 'array',
                    items: {
                      type: 'string'
                    }
                  },
                  isActive: {
                    type: 'boolean'
                  },
                  createdAt: {
                    type: 'string'
                  }
                }
              }
            }
          }
        }
      }
    }, async (request, reply) => {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().f[8]++;
      cov_1tgt7ebh6e().s[51]++;
      try {
        const body =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[52]++, request.body);
        const organizationId =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[53]++, request.organization.id);
        const config =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[54]++, await webhookService.createWebhookConfig(organizationId, body));
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[55]++;
        return reply.status(201).send({
          success: true,
          data: config
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[56]++;
        logger.error('Error creating webhook config:', error);
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[57]++;
        throw new ApiError('Failed to create webhook configuration', 'WEBHOOK_CONFIG_ERROR', 500);
      }
    });
    // Get webhook configurations
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[58]++;
    fastify.get('/configs', {
      schema: {
        tags: ['Webhooks'],
        summary: 'Get webhook configurations',
        response: {
          200: {
            type: 'object',
            properties: {
              success: {
                type: 'boolean'
              },
              data: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: {
                      type: 'string'
                    },
                    name: {
                      type: 'string'
                    },
                    url: {
                      type: 'string'
                    },
                    eventTypes: {
                      type: 'array',
                      items: {
                        type: 'string'
                      }
                    },
                    isActive: {
                      type: 'boolean'
                    },
                    totalSent: {
                      type: 'number'
                    },
                    totalFailed: {
                      type: 'number'
                    },
                    lastSentAt: {
                      type: 'string',
                      nullable: true
                    },
                    createdAt: {
                      type: 'string'
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, async (request, reply) => {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().f[9]++;
      cov_1tgt7ebh6e().s[59]++;
      try {
        const organizationId =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[60]++, request.organization.id);
        const configs =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[61]++, await webhookService.getWebhookConfigs(organizationId));
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[62]++;
        return reply.status(200).send({
          success: true,
          data: configs
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[63]++;
        logger.error('Error getting webhook configs:', error);
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[64]++;
        throw new ApiError('Failed to get webhook configurations', 'WEBHOOK_CONFIGS_ERROR', 500);
      }
    });
    // Get webhook logs
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[65]++;
    fastify.get('/logs', {
      schema: {
        tags: ['Webhooks'],
        summary: 'Get webhook logs',
        querystring: {
          type: 'object',
          properties: {
            configId: {
              type: 'string'
            },
            eventType: {
              type: 'string'
            },
            isSuccess: {
              type: 'boolean'
            },
            limit: {
              type: 'number',
              minimum: 1,
              maximum: 100,
              default: 20
            },
            offset: {
              type: 'number',
              minimum: 0,
              default: 0
            }
          }
        },
        response: {
          200: {
            type: 'object',
            properties: {
              success: {
                type: 'boolean'
              },
              data: {
                type: 'object',
                properties: {
                  logs: {
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        id: {
                          type: 'string'
                        },
                        url: {
                          type: 'string'
                        },
                        eventType: {
                          type: 'string'
                        },
                        statusCode: {
                          type: 'number',
                          nullable: true
                        },
                        responseTime: {
                          type: 'number',
                          nullable: true
                        },
                        isSuccess: {
                          type: 'boolean'
                        },
                        attempt: {
                          type: 'number'
                        },
                        error: {
                          type: 'string',
                          nullable: true
                        },
                        createdAt: {
                          type: 'string'
                        }
                      }
                    }
                  },
                  total: {
                    type: 'number'
                  },
                  hasMore: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    }, async (request, reply) => {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().f[10]++;
      cov_1tgt7ebh6e().s[66]++;
      try {
        const organizationId =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[67]++, request.organization.id);
        const filters =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[68]++, request.query);
        const result =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[69]++, await webhookService.getWebhookLogs(organizationId, filters));
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[70]++;
        return reply.status(200).send({
          success: true,
          data: result
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[71]++;
        logger.error('Error getting webhook logs:', error);
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[72]++;
        throw new ApiError('Failed to get webhook logs', 'WEBHOOK_LOGS_ERROR', 500);
      }
    });
    // Test webhook
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[73]++;
    fastify.post('/test', {
      schema: {
        tags: ['Webhooks'],
        summary: 'Send test webhook',
        body: {
          type: 'object',
          properties: {
            configId: {
              type: 'string'
            },
            eventType: {
              type: 'string',
              enum: ['NEW_CONVERSION', 'GOAL_REACHED', 'BUDGET_EXCEEDED', 'CAMPAIGN_PAUSED']
            }
          },
          required: ['configId', 'eventType']
        },
        response: {
          200: {
            type: 'object',
            properties: {
              success: {
                type: 'boolean'
              },
              data: {
                type: 'object',
                properties: {
                  logId: {
                    type: 'string'
                  },
                  statusCode: {
                    type: 'number'
                  },
                  responseTime: {
                    type: 'number'
                  },
                  isSuccess: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    }, async (request, reply) => {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().f[11]++;
      cov_1tgt7ebh6e().s[74]++;
      try {
        const {
          configId,
          eventType
        } =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[75]++, request.body);
        const organizationId =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[76]++, request.organization.id);
        const result =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[77]++, await webhookService.sendTestWebhook(organizationId, configId, eventType));
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[78]++;
        return reply.status(200).send({
          success: true,
          data: result
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[79]++;
        logger.error('Error sending test webhook:', error);
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[80]++;
        throw new ApiError('Failed to send test webhook', 'WEBHOOK_TEST_ERROR', 500);
      }
    });
    // Retry failed webhook
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[81]++;
    fastify.post('/retry', {
      schema: {
        tags: ['Webhooks'],
        summary: 'Retry failed webhook',
        body: {
          type: 'object',
          properties: {
            logId: {
              type: 'string'
            }
          },
          required: ['logId']
        },
        response: {
          200: {
            type: 'object',
            properties: {
              success: {
                type: 'boolean'
              },
              data: {
                type: 'object',
                properties: {
                  logId: {
                    type: 'string'
                  },
                  statusCode: {
                    type: 'number'
                  },
                  responseTime: {
                    type: 'number'
                  },
                  isSuccess: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    }, async (request, reply) => {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().f[12]++;
      cov_1tgt7ebh6e().s[82]++;
      try {
        const {
          logId
        } =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[83]++, request.body);
        const organizationId =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[84]++, request.organization.id);
        const result =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[85]++, await webhookService.retryWebhook(organizationId, logId));
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[86]++;
        return reply.status(200).send({
          success: true,
          data: result
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[87]++;
        logger.error('Error retrying webhook:', error);
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[88]++;
        throw new ApiError('Failed to retry webhook', 'WEBHOOK_RETRY_ERROR', 500);
      }
    });
    // Update webhook configuration
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[89]++;
    fastify.put('/configs/:configId', {
      schema: {
        tags: ['Webhooks'],
        summary: 'Update webhook configuration',
        params: {
          type: 'object',
          properties: {
            configId: {
              type: 'string'
            }
          },
          required: ['configId']
        },
        body: WebhookConfigSchema.partial(),
        response: {
          200: {
            type: 'object',
            properties: {
              success: {
                type: 'boolean'
              },
              data: {
                type: 'object',
                properties: {
                  id: {
                    type: 'string'
                  },
                  name: {
                    type: 'string'
                  },
                  url: {
                    type: 'string'
                  },
                  eventTypes: {
                    type: 'array',
                    items: {
                      type: 'string'
                    }
                  },
                  isActive: {
                    type: 'boolean'
                  },
                  updatedAt: {
                    type: 'string'
                  }
                }
              }
            }
          }
        }
      }
    }, async (request, reply) => {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().f[13]++;
      cov_1tgt7ebh6e().s[90]++;
      try {
        const {
          configId
        } =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[91]++, request.params);
        const body =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[92]++, request.body);
        const organizationId =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[93]++, request.organization.id);
        const config =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[94]++, await webhookService.updateWebhookConfig(organizationId, configId, body));
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[95]++;
        return reply.status(200).send({
          success: true,
          data: config
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[96]++;
        logger.error('Error updating webhook config:', error);
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[97]++;
        throw new ApiError('Failed to update webhook configuration', 'WEBHOOK_UPDATE_ERROR', 500);
      }
    });
    // Delete webhook configuration
    /* istanbul ignore next */
    cov_1tgt7ebh6e().s[98]++;
    fastify.delete('/configs/:configId', {
      schema: {
        tags: ['Webhooks'],
        summary: 'Delete webhook configuration',
        params: {
          type: 'object',
          properties: {
            configId: {
              type: 'string'
            }
          },
          required: ['configId']
        },
        response: {
          200: {
            type: 'object',
            properties: {
              success: {
                type: 'boolean'
              }
            }
          }
        }
      }
    }, async (request, reply) => {
      /* istanbul ignore next */
      cov_1tgt7ebh6e().f[14]++;
      cov_1tgt7ebh6e().s[99]++;
      try {
        const {
          configId
        } =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[100]++, request.params);
        const organizationId =
        /* istanbul ignore next */
        (cov_1tgt7ebh6e().s[101]++, request.organization.id);
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[102]++;
        await webhookService.deleteWebhookConfig(organizationId, configId);
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[103]++;
        return reply.status(200).send({
          success: true
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[104]++;
        logger.error('Error deleting webhook config:', error);
        /* istanbul ignore next */
        cov_1tgt7ebh6e().s[105]++;
        throw new ApiError('Failed to delete webhook configuration', 'WEBHOOK_DELETE_ERROR', 500);
      }
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,