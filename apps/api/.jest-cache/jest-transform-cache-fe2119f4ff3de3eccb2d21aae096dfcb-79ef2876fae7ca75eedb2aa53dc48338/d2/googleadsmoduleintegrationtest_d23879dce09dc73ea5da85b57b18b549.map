{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\modules\\__tests__\\google-ads.module.integration.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\modules\\__tests__\\google-ads.module.integration.test.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { GoogleAdsModule } from '../google-ads.module';\nimport { PrismaService } from '../../database/prisma.service';\nimport { CryptoService } from '../../services/crypto.service';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { GoogleAdsApi } from 'google-ads-api';\nimport axios from 'axios';\n\n// Mock external dependencies\njest.mock('google-ads-api');\njest.mock('axios');\n\nconst mockAxios = axios as jest.Mocked<typeof axios>;\nconst mockGoogleAdsApi = GoogleAdsApi as jest.MockedClass<typeof GoogleAdsApi>;\n\ndescribe('GoogleAdsModule Integration Tests', () => {\n  let app: INestApplication;\n  let prismaService: PrismaService;\n  let jwtService: JwtService;\n  let mockGoogleAdsClient: any;\n\n  const mockUser = {\n    id: 'user-1',\n    email: 'test@example.com',\n    organizationId: 'org-1',\n  };\n\n  const mockIntegration = {\n    id: 'integration-1',\n    organizationId: 'org-1',\n    platform: 'google_ads',\n    isActive: true,\n    accessToken: 'encrypted-access-token',\n    refreshToken: 'encrypted-refresh-token',\n    expiresAt: new Date(Date.now() + 3600000),\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    settings: {\n      customerId: '123-456-7890',\n      developerToken: 'test-developer-token',\n    },\n  };\n\n  const mockTokenResponse = {\n    data: {\n      access_token: 'new-access-token',\n      refresh_token: 'new-refresh-token',\n      expires_in: 3600,\n      token_type: 'Bearer',\n    },\n  };\n\n  const mockGoogleAdsAccount = {\n    customer: {\n      resource_name: 'customers/1234567890',\n      id: '1234567890',\n      descriptive_name: 'Test Account',\n      currency_code: 'USD',\n      time_zone: 'America/New_York',\n      status: 'ENABLED',\n      type: 'STANDARD',\n    },\n  };\n\n  const mockCampaign = {\n    campaign: {\n      resource_name: 'customers/1234567890/campaigns/987654321',\n      id: '987654321',\n      name: 'Test Campaign',\n      status: 'ENABLED',\n      advertising_channel_type: 'SEARCH',\n      start_date: '2024-01-01',\n      end_date: '2024-12-31',\n    },\n    campaign_budget: {\n      amount_micros: '10000000',\n      delivery_method: 'STANDARD',\n    },\n    metrics: {\n      impressions: '1000',\n      clicks: '50',\n      cost_micros: '5000000',\n      conversions: '5',\n      ctr: '0.05',\n      average_cpc: '100000',\n    },\n  };\n\n  beforeAll(async () => {\n    // Mock Google Ads API client\n    mockGoogleAdsClient = {\n      Customer: jest.fn().mockReturnValue({\n        query: jest.fn(),\n        report: jest.fn(),\n      }),\n    };\n\n    mockGoogleAdsApi.mockImplementation(() => mockGoogleAdsClient);\n\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [GoogleAdsModule],\n    })\n      .overrideProvider(PrismaService)\n      .useValue({\n        integration: {\n          findFirst: jest.fn(),\n          create: jest.fn(),\n          update: jest.fn(),\n          delete: jest.fn(),\n        },\n        googleAdsCampaign: {\n          findMany: jest.fn(),\n          create: jest.fn(),\n          createMany: jest.fn(),\n          update: jest.fn(),\n          upsert: jest.fn(),\n        },\n        googleAdsKeyword: {\n          findMany: jest.fn(),\n          create: jest.fn(),\n          createMany: jest.fn(),\n          update: jest.fn(),\n          upsert: jest.fn(),\n        },\n        googleAdsDailyMetrics: {\n          findMany: jest.fn(),\n          create: jest.fn(),\n          createMany: jest.fn(),\n          upsert: jest.fn(),\n        },\n        googleAdsSyncLog: {\n          findMany: jest.fn(),\n          create: jest.fn(),\n        },\n        $transaction: jest.fn(),\n      })\n      .overrideProvider(CryptoService)\n      .useValue({\n        encrypt: jest.fn().mockReturnValue('encrypted-token'),\n        decrypt: jest.fn().mockReturnValue('decrypted-token'),\n      })\n      .overrideProvider(ConfigService)\n      .useValue({\n        get: jest.fn().mockImplementation((key: string) => {\n          const config = {\n            'GOOGLE_ADS_CLIENT_ID': 'test-client-id',\n            'GOOGLE_ADS_CLIENT_SECRET': 'test-client-secret',\n            'GOOGLE_ADS_DEVELOPER_TOKEN': 'test-developer-token',\n            'JWT_SECRET': 'test-jwt-secret',\n          };\n          return config[key];\n        }),\n      })\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n\n    prismaService = moduleFixture.get<PrismaService>(PrismaService);\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Authentication Flow', () => {\n    it('should generate auth URL', async () => {\n      const token = jwtService.sign(mockUser);\n      const redirectUri = 'http://localhost:3000/callback';\n\n      const response = await request(app.getHttpServer())\n        .post('/google-ads/connect')\n        .set('Authorization', `Bearer ${token}`)\n        .send({ redirectUri })\n        .expect(201);\n\n      expect(response.body).toHaveProperty('authUrl');\n      expect(response.body).toHaveProperty('state');\n      expect(response.body.authUrl).toContain('accounts.google.com/oauth/authorize');\n      expect(response.body.authUrl).toContain('client_id=test-client-id');\n    });\n\n    it('should handle OAuth callback', async () => {\n      const token = jwtService.sign(mockUser);\n      mockAxios.post.mockResolvedValue(mockTokenResponse);\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(null);\n      (prismaService.integration.create as jest.Mock).mockResolvedValue(mockIntegration);\n\n      const response = await request(app.getHttpServer())\n        .post('/google-ads/callback')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          code: 'auth-code',\n          state: 'valid-state',\n          redirectUri: 'http://localhost:3000/callback',\n        })\n        .expect(201);\n\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Google Ads conectado com sucesso',\n        integration: expect.objectContaining({\n          id: mockIntegration.id,\n          platform: 'google_ads',\n          isActive: true,\n        }),\n      });\n    });\n\n    it('should reject invalid authorization code', async () => {\n      const token = jwtService.sign(mockUser);\n      mockAxios.post.mockRejectedValue(new Error('Invalid authorization code'));\n\n      await request(app.getHttpServer())\n        .post('/google-ads/callback')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          code: 'invalid-code',\n          state: 'valid-state',\n          redirectUri: 'http://localhost:3000/callback',\n        })\n        .expect(500);\n    });\n  });\n\n  describe('Data Retrieval', () => {\n    beforeEach(() => {\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(mockIntegration);\n    });\n\n    it('should fetch Google Ads accounts', async () => {\n      const token = jwtService.sign(mockUser);\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockResolvedValue([mockGoogleAdsAccount]),\n      });\n\n      const response = await request(app.getHttpServer())\n        .get('/google-ads/accounts')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(200);\n\n      expect(response.body).toHaveLength(1);\n      expect(response.body[0]).toEqual({\n        id: '1234567890',\n        name: 'Test Account',\n        currency: 'USD',\n        timezone: 'America/New_York',\n        status: 'ENABLED',\n        type: 'STANDARD',\n      });\n    });\n\n    it('should fetch campaigns for a customer', async () => {\n      const token = jwtService.sign(mockUser);\n      const customerId = '1234567890';\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockResolvedValue([mockCampaign]),\n      });\n\n      const response = await request(app.getHttpServer())\n        .get(`/google-ads/campaigns/${customerId}`)\n        .set('Authorization', `Bearer ${token}`)\n        .expect(200);\n\n      expect(response.body).toHaveLength(1);\n      expect(response.body[0]).toEqual({\n        id: '987654321',\n        name: 'Test Campaign',\n        status: 'ENABLED',\n        type: 'SEARCH',\n        budget_amount: 10000000,\n        budget_type: 'STANDARD',\n        impressions: 1000,\n        clicks: 50,\n        cost: 5000000,\n        conversions: 5,\n        customer_id: customerId,\n      });\n    });\n\n    it('should return 404 for non-existent integration', async () => {\n      const token = jwtService.sign(mockUser);\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(null);\n\n      await request(app.getHttpServer())\n        .get('/google-ads/accounts')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(500); // Service throws error which becomes 500\n    });\n  });\n\n  describe('Data Synchronization', () => {\n    beforeEach(() => {\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(mockIntegration);\n      (prismaService.$transaction as jest.Mock).mockImplementation((callback) => callback(prismaService));\n    });\n\n    it('should sync data successfully', async () => {\n      const token = jwtService.sign(mockUser);\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockResolvedValue([mockCampaign]),\n      });\n\n      (prismaService.googleAdsCampaign.upsert as jest.Mock).mockResolvedValue({});\n      (prismaService.googleAdsDailyMetrics.upsert as jest.Mock).mockResolvedValue({});\n      (prismaService.googleAdsSyncLog.create as jest.Mock).mockResolvedValue({});\n\n      const response = await request(app.getHttpServer())\n        .post('/google-ads/sync')\n        .set('Authorization', `Bearer ${token}`)\n        .send({ force: true })\n        .expect(201);\n\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Sincronização concluída com sucesso',\n        stats: {\n          campaigns: 1,\n          keywords: 0,\n          metrics: 1,\n        },\n      });\n    });\n\n    it('should handle sync errors gracefully', async () => {\n      const token = jwtService.sign(mockUser);\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockRejectedValue(new Error('API Error')),\n      });\n\n      await request(app.getHttpServer())\n        .post('/google-ads/sync')\n        .set('Authorization', `Bearer ${token}`)\n        .send({ force: true })\n        .expect(500);\n    });\n  });\n\n  describe('Integration Status', () => {\n    it('should return connected status', async () => {\n      const token = jwtService.sign(mockUser);\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(mockIntegration);\n\n      const response = await request(app.getHttpServer())\n        .get('/google-ads/status')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(200);\n\n      expect(response.body).toEqual({\n        connected: true,\n        lastSync: undefined,\n        connectedAt: mockIntegration.createdAt.toISOString(),\n        expiresAt: mockIntegration.expiresAt.toISOString(),\n        status: 'active',\n      });\n    });\n\n    it('should return disconnected status', async () => {\n      const token = jwtService.sign(mockUser);\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(null);\n\n      const response = await request(app.getHttpServer())\n        .get('/google-ads/status')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(200);\n\n      expect(response.body).toEqual({\n        connected: false,\n        status: 'not_connected',\n      });\n    });\n\n    it('should return expired status for expired tokens', async () => {\n      const token = jwtService.sign(mockUser);\n      const expiredIntegration = {\n        ...mockIntegration,\n        expiresAt: new Date(Date.now() - 3600000), // 1 hour ago\n      };\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(expiredIntegration);\n\n      const response = await request(app.getHttpServer())\n        .get('/google-ads/status')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(200);\n\n      expect(response.body.status).toBe('expired');\n    });\n  });\n\n  describe('Disconnection', () => {\n    it('should disconnect integration successfully', async () => {\n      const token = jwtService.sign(mockUser);\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(mockIntegration);\n      (prismaService.integration.update as jest.Mock).mockResolvedValue({\n        ...mockIntegration,\n        isActive: false,\n      });\n\n      const response = await request(app.getHttpServer())\n        .delete('/google-ads/disconnect')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Google Ads desconectado com sucesso',\n      });\n    });\n\n    it('should handle disconnect when integration not found', async () => {\n      const token = jwtService.sign(mockUser);\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(null);\n\n      await request(app.getHttpServer())\n        .delete('/google-ads/disconnect')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(500);\n    });\n  });\n\n  describe('Authentication Guards', () => {\n    it('should reject requests without JWT token', async () => {\n      await request(app.getHttpServer())\n        .get('/google-ads/accounts')\n        .expect(401);\n    });\n\n    it('should reject requests with invalid JWT token', async () => {\n      await request(app.getHttpServer())\n        .get('/google-ads/accounts')\n        .set('Authorization', 'Bearer invalid-token')\n        .expect(401);\n    });\n\n    it('should accept requests with valid JWT token', async () => {\n      const token = jwtService.sign(mockUser);\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(null);\n\n      // This will fail with 500 due to no integration, but auth passes\n      await request(app.getHttpServer())\n        .get('/google-ads/accounts')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(500);\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(() => {\n      (prismaService.integration.findFirst as jest.Mock).mockResolvedValue(mockIntegration);\n    });\n\n    it('should handle Google Ads API rate limiting', async () => {\n      const token = jwtService.sign(mockUser);\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockRejectedValue(new Error('Rate limit exceeded')),\n      });\n\n      await request(app.getHttpServer())\n        .get('/google-ads/accounts')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(500);\n    });\n\n    it('should handle Google Ads API authentication errors', async () => {\n      const token = jwtService.sign(mockUser);\n      const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({\n        query: jest.fn().mockRejectedValue(new Error('Authentication failed')),\n      });\n\n      await request(app.getHttpServer())\n        .get('/google-ads/accounts')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(500);\n    });\n\n    it('should handle database connection errors', async () => {\n      const token = jwtService.sign(mockUser);\n      (prismaService.integration.findFirst as jest.Mock).mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      await request(app.getHttpServer())\n        .get('/google-ads/accounts')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(500);\n    });\n  });\n\n  describe('Input Validation', () => {\n    it('should validate redirect URI in connect endpoint', async () => {\n      const token = jwtService.sign(mockUser);\n\n      await request(app.getHttpServer())\n        .post('/google-ads/connect')\n        .set('Authorization', `Bearer ${token}`)\n        .send({ redirectUri: 'invalid-url' })\n        .expect(400);\n    });\n\n    it('should validate required fields in callback endpoint', async () => {\n      const token = jwtService.sign(mockUser);\n\n      await request(app.getHttpServer())\n        .post('/google-ads/callback')\n        .set('Authorization', `Bearer ${token}`)\n        .send({ code: 'test-code' }) // missing state and redirectUri\n        .expect(400);\n    });\n\n    it('should validate customer ID format in campaigns endpoint', async () => {\n      const token = jwtService.sign(mockUser);\n\n      await request(app.getHttpServer())\n        .get('/google-ads/campaigns/invalid-customer-id')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(500); // Service validation error becomes 500\n    });\n  });\n});"],"version":3}