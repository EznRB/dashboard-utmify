3f0ba2d38112fe8a28f8f21dbb23a4a0
/* istanbul ignore next */
function cov_hxq45w0x0() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\index.ts";
  var hash = "4fd4859446145786d6c15d089a49c51891ee641c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\index.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 21
        }
      },
      "1": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 29
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 57
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 65
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 99
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "6": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 55
        }
      },
      "7": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 47
        }
      },
      "10": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "11": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 60
        }
      },
      "12": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 60
        }
      },
      "13": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "15": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 51
        }
      },
      "16": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 19
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "18": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 47
        }
      },
      "19": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "20": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 35
        }
      },
      "21": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 60
        }
      },
      "22": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 59
        }
      },
      "23": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 24
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "25": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 43
        }
      },
      "26": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 30
        }
      },
      "27": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "28": {
        start: {
          line: 64,
          column: 36
        },
        end: {
          line: 64,
          column: 79
        }
      },
      "29": {
        start: {
          line: 65,
          column: 57
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "30": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 82,
          column: 14
        }
      },
      "31": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 64
        }
      },
      "32": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 93,
          column: 14
        }
      },
      "33": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 24
        }
      },
      "34": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "35": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 50
        }
      },
      "36": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "37": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 88
        }
      },
      "38": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 106,
          column: 25
        }
      },
      "39": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 115,
          column: 3
        }
      },
      "40": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 70
        }
      },
      "41": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "42": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 35
        }
      },
      "43": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 20
        }
      },
      "44": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "45": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 117,
          column: 69
        }
      },
      "46": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "47": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 35
        }
      },
      "48": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 24
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 31
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 52
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 32
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 22
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 58
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 28
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 62
      },
      "7": {
        name: "getWorkerManager",
        decl: {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 99,
            column: 32
          }
        },
        loc: {
          start: {
            line: 99,
            column: 41
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 99
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 109,
            column: 22
          },
          end: {
            line: 109,
            column: 23
          }
        },
        loc: {
          start: {
            line: 109,
            column: 34
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 109
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 116,
            column: 21
          },
          end: {
            line: 116,
            column: 22
          }
        },
        loc: {
          start: {
            line: 116,
            column: 33
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 116
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 72,
            column: 24
          },
          end: {
            line: 72,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 41
          },
          end: {
            line: 72,
            column: 50
          }
        }, {
          start: {
            line: 72,
            column: 53
          },
          end: {
            line: 72,
            column: 64
          }
        }],
        line: 72
      },
      "3": {
        loc: {
          start: {
            line: 75,
            column: 32
          },
          end: {
            line: 75,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 49
          },
          end: {
            line: 75,
            column: 58
          }
        }, {
          start: {
            line: 75,
            column: 61
          },
          end: {
            line: 75,
            column: 70
          }
        }],
        line: 75
      },
      "4": {
        loc: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "5": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 100,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 100,
            column: 22
          }
        }, {
          start: {
            line: 100,
            column: 26
          },
          end: {
            line: 100,
            column: 32
          }
        }],
        line: 100
      },
      "6": {
        loc: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "7": {
        loc: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "8": {
        loc: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\index.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\index.ts"],
      sourcesContent: ["import { PrismaClient } from '@prisma/client';\nimport { ConversionEventsWorker, ConversionEventsQueue } from './conversion-events.worker';\nimport { MetricsService } from '../services/metrics.service';\nimport { logger } from '../utils/logger';\n\nexport class WorkerManager {\n  private conversionEventsWorker: ConversionEventsWorker;\n  private conversionEventsQueue: ConversionEventsQueue;\n  private prisma: PrismaClient;\n  private metricsService: MetricsService;\n  private isRunning: boolean = false;\n\n  constructor(prisma: PrismaClient) {\n    this.prisma = prisma;\n    this.metricsService = new MetricsService(prisma);\n    this.conversionEventsQueue = new ConversionEventsQueue();\n    this.conversionEventsWorker = new ConversionEventsWorker(\n      this.prisma,\n      this.metricsService\n    );\n  }\n\n  public async start(): Promise<void> {\n    if (this.isRunning) {\n      logger.warn('Workers are already running');\n      return;\n    }\n\n    try {\n      logger.info('Starting workers...');\n      \n      // Workers are automatically started when instantiated\n      // Just mark as running\n      this.isRunning = true;\n      \n      logger.info('All workers started successfully');\n    } catch (error) {\n      logger.error('Failed to start workers:', error);\n      throw error;\n    }\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.isRunning) {\n      logger.warn('Workers are not running');\n      return;\n    }\n\n    try {\n      logger.info('Stopping workers...');\n      \n      await Promise.all([\n        this.conversionEventsWorker.close(),\n        this.conversionEventsQueue.close(),\n      ]);\n      \n      this.isRunning = false;\n      logger.info('All workers stopped successfully');\n    } catch (error) {\n      logger.error('Error stopping workers:', error);\n      throw error;\n    }\n  }\n\n  public getConversionEventsQueue(): ConversionEventsQueue {\n    return this.conversionEventsQueue;\n  }\n\n  public getConversionEventsWorker(): ConversionEventsWorker {\n    return this.conversionEventsWorker;\n  }\n\n  public isWorkerRunning(): boolean {\n    return this.isRunning;\n  }\n\n  // Health check for workers\n  public async getWorkerHealth(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    workers: {\n      conversionEvents: {\n        status: 'running' | 'stopped';\n        queueSize?: number;\n        processing?: number;\n        completed?: number;\n        failed?: number;\n      };\n    };\n  }> {\n    try {\n      const conversionQueue = await this.conversionEventsQueue.getQueue();\n      const [waiting, active, completed, failed] = await Promise.all([\n        conversionQueue.getWaiting(),\n        conversionQueue.getActive(),\n        conversionQueue.getCompleted(),\n        conversionQueue.getFailed(),\n      ]);\n\n      return {\n        status: this.isRunning ? 'healthy' : 'unhealthy',\n        workers: {\n          conversionEvents: {\n            status: this.isRunning ? 'running' : 'stopped',\n            queueSize: waiting.length,\n            processing: active.length,\n            completed: completed.length,\n            failed: failed.length,\n          },\n        },\n      };\n    } catch (error) {\n      logger.error('Error getting worker health:', error);\n      return {\n        status: 'unhealthy',\n        workers: {\n          conversionEvents: {\n            status: 'stopped',\n          },\n        },\n      };\n    }\n  }\n}\n\n// Singleton instance\nlet workerManager: WorkerManager | null = null;\n\nexport function getWorkerManager(prisma?: PrismaClient): WorkerManager {\n  if (!workerManager && prisma) {\n    workerManager = new WorkerManager(prisma);\n  }\n  \n  if (!workerManager) {\n    throw new Error('WorkerManager not initialized. Call with PrismaClient first.');\n  }\n  \n  return workerManager;\n}\n\n// Graceful shutdown handler\nprocess.on('SIGTERM', async () => {\n  logger.info('SIGTERM received, shutting down workers gracefully');\n  if (workerManager) {\n    await workerManager.stop();\n  }\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  logger.info('SIGINT received, shutting down workers gracefully');\n  if (workerManager) {\n    await workerManager.stop();\n  }\n  process.exit(0);\n});\n\nexport * from './conversion-events.worker';"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4fd4859446145786d6c15d089a49c51891ee641c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hxq45w0x0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hxq45w0x0();
import { ConversionEventsWorker, ConversionEventsQueue } from './conversion-events.worker';
import { MetricsService } from '../services/metrics.service';
import { logger } from '../utils/logger';
export class WorkerManager {
  conversionEventsWorker;
  conversionEventsQueue;
  prisma;
  metricsService;
  isRunning =
  /* istanbul ignore next */
  (cov_hxq45w0x0().s[0]++, false);
  constructor(prisma) {
    /* istanbul ignore next */
    cov_hxq45w0x0().f[0]++;
    cov_hxq45w0x0().s[1]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_hxq45w0x0().s[2]++;
    this.metricsService = new MetricsService(prisma);
    /* istanbul ignore next */
    cov_hxq45w0x0().s[3]++;
    this.conversionEventsQueue = new ConversionEventsQueue();
    /* istanbul ignore next */
    cov_hxq45w0x0().s[4]++;
    this.conversionEventsWorker = new ConversionEventsWorker(this.prisma, this.metricsService);
  }
  async start() {
    /* istanbul ignore next */
    cov_hxq45w0x0().f[1]++;
    cov_hxq45w0x0().s[5]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_hxq45w0x0().b[0][0]++;
      cov_hxq45w0x0().s[6]++;
      logger.warn('Workers are already running');
      /* istanbul ignore next */
      cov_hxq45w0x0().s[7]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hxq45w0x0().b[0][1]++;
    }
    cov_hxq45w0x0().s[8]++;
    try {
      /* istanbul ignore next */
      cov_hxq45w0x0().s[9]++;
      logger.info('Starting workers...');
      // Workers are automatically started when instantiated
      // Just mark as running
      /* istanbul ignore next */
      cov_hxq45w0x0().s[10]++;
      this.isRunning = true;
      /* istanbul ignore next */
      cov_hxq45w0x0().s[11]++;
      logger.info('All workers started successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_hxq45w0x0().s[12]++;
      logger.error('Failed to start workers:', error);
      /* istanbul ignore next */
      cov_hxq45w0x0().s[13]++;
      throw error;
    }
  }
  async stop() {
    /* istanbul ignore next */
    cov_hxq45w0x0().f[2]++;
    cov_hxq45w0x0().s[14]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_hxq45w0x0().b[1][0]++;
      cov_hxq45w0x0().s[15]++;
      logger.warn('Workers are not running');
      /* istanbul ignore next */
      cov_hxq45w0x0().s[16]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hxq45w0x0().b[1][1]++;
    }
    cov_hxq45w0x0().s[17]++;
    try {
      /* istanbul ignore next */
      cov_hxq45w0x0().s[18]++;
      logger.info('Stopping workers...');
      /* istanbul ignore next */
      cov_hxq45w0x0().s[19]++;
      await Promise.all([this.conversionEventsWorker.close(), this.conversionEventsQueue.close()]);
      /* istanbul ignore next */
      cov_hxq45w0x0().s[20]++;
      this.isRunning = false;
      /* istanbul ignore next */
      cov_hxq45w0x0().s[21]++;
      logger.info('All workers stopped successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_hxq45w0x0().s[22]++;
      logger.error('Error stopping workers:', error);
      /* istanbul ignore next */
      cov_hxq45w0x0().s[23]++;
      throw error;
    }
  }
  getConversionEventsQueue() {
    /* istanbul ignore next */
    cov_hxq45w0x0().f[3]++;
    cov_hxq45w0x0().s[24]++;
    return this.conversionEventsQueue;
  }
  getConversionEventsWorker() {
    /* istanbul ignore next */
    cov_hxq45w0x0().f[4]++;
    cov_hxq45w0x0().s[25]++;
    return this.conversionEventsWorker;
  }
  isWorkerRunning() {
    /* istanbul ignore next */
    cov_hxq45w0x0().f[5]++;
    cov_hxq45w0x0().s[26]++;
    return this.isRunning;
  }
  // Health check for workers
  async getWorkerHealth() {
    /* istanbul ignore next */
    cov_hxq45w0x0().f[6]++;
    cov_hxq45w0x0().s[27]++;
    try {
      const conversionQueue =
      /* istanbul ignore next */
      (cov_hxq45w0x0().s[28]++, await this.conversionEventsQueue.getQueue());
      const [waiting, active, completed, failed] =
      /* istanbul ignore next */
      (cov_hxq45w0x0().s[29]++, await Promise.all([conversionQueue.getWaiting(), conversionQueue.getActive(), conversionQueue.getCompleted(), conversionQueue.getFailed()]));
      /* istanbul ignore next */
      cov_hxq45w0x0().s[30]++;
      return {
        status: this.isRunning ?
        /* istanbul ignore next */
        (cov_hxq45w0x0().b[2][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_hxq45w0x0().b[2][1]++, 'unhealthy'),
        workers: {
          conversionEvents: {
            status: this.isRunning ?
            /* istanbul ignore next */
            (cov_hxq45w0x0().b[3][0]++, 'running') :
            /* istanbul ignore next */
            (cov_hxq45w0x0().b[3][1]++, 'stopped'),
            queueSize: waiting.length,
            processing: active.length,
            completed: completed.length,
            failed: failed.length
          }
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_hxq45w0x0().s[31]++;
      logger.error('Error getting worker health:', error);
      /* istanbul ignore next */
      cov_hxq45w0x0().s[32]++;
      return {
        status: 'unhealthy',
        workers: {
          conversionEvents: {
            status: 'stopped'
          }
        }
      };
    }
  }
}
// Singleton instance
let workerManager =
/* istanbul ignore next */
(cov_hxq45w0x0().s[33]++, null);
export function getWorkerManager(prisma) {
  /* istanbul ignore next */
  cov_hxq45w0x0().f[7]++;
  cov_hxq45w0x0().s[34]++;
  if (
  /* istanbul ignore next */
  (cov_hxq45w0x0().b[5][0]++, !workerManager) &&
  /* istanbul ignore next */
  (cov_hxq45w0x0().b[5][1]++, prisma)) {
    /* istanbul ignore next */
    cov_hxq45w0x0().b[4][0]++;
    cov_hxq45w0x0().s[35]++;
    workerManager = new WorkerManager(prisma);
  } else
  /* istanbul ignore next */
  {
    cov_hxq45w0x0().b[4][1]++;
  }
  cov_hxq45w0x0().s[36]++;
  if (!workerManager) {
    /* istanbul ignore next */
    cov_hxq45w0x0().b[6][0]++;
    cov_hxq45w0x0().s[37]++;
    throw new Error('WorkerManager not initialized. Call with PrismaClient first.');
  } else
  /* istanbul ignore next */
  {
    cov_hxq45w0x0().b[6][1]++;
  }
  cov_hxq45w0x0().s[38]++;
  return workerManager;
}
// Graceful shutdown handler
/* istanbul ignore next */
cov_hxq45w0x0().s[39]++;
process.on('SIGTERM', async () => {
  /* istanbul ignore next */
  cov_hxq45w0x0().f[8]++;
  cov_hxq45w0x0().s[40]++;
  logger.info('SIGTERM received, shutting down workers gracefully');
  /* istanbul ignore next */
  cov_hxq45w0x0().s[41]++;
  if (workerManager) {
    /* istanbul ignore next */
    cov_hxq45w0x0().b[7][0]++;
    cov_hxq45w0x0().s[42]++;
    await workerManager.stop();
  } else
  /* istanbul ignore next */
  {
    cov_hxq45w0x0().b[7][1]++;
  }
  cov_hxq45w0x0().s[43]++;
  process.exit(0);
});
/* istanbul ignore next */
cov_hxq45w0x0().s[44]++;
process.on('SIGINT', async () => {
  /* istanbul ignore next */
  cov_hxq45w0x0().f[9]++;
  cov_hxq45w0x0().s[45]++;
  logger.info('SIGINT received, shutting down workers gracefully');
  /* istanbul ignore next */
  cov_hxq45w0x0().s[46]++;
  if (workerManager) {
    /* istanbul ignore next */
    cov_hxq45w0x0().b[8][0]++;
    cov_hxq45w0x0().s[47]++;
    await workerManager.stop();
  } else
  /* istanbul ignore next */
  {
    cov_hxq45w0x0().b[8][1]++;
  }
  cov_hxq45w0x0().s[48]++;
  process.exit(0);
});
export * from './conversion-events.worker';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,