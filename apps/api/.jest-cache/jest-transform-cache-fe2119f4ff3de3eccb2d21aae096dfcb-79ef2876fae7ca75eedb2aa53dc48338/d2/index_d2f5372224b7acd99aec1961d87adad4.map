{"version":3,"names":["cov_hxq45w0x0","actualCoverage","ConversionEventsWorker","ConversionEventsQueue","MetricsService","logger","WorkerManager","conversionEventsWorker","conversionEventsQueue","prisma","metricsService","isRunning","s","constructor","f","start","b","warn","info","error","stop","Promise","all","close","getConversionEventsQueue","getConversionEventsWorker","isWorkerRunning","getWorkerHealth","conversionQueue","getQueue","waiting","active","completed","failed","getWaiting","getActive","getCompleted","getFailed","status","workers","conversionEvents","queueSize","length","processing","workerManager","getWorkerManager","Error","process","on","exit"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\index.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { ConversionEventsWorker, ConversionEventsQueue } from './conversion-events.worker';\nimport { MetricsService } from '../services/metrics.service';\nimport { logger } from '../utils/logger';\n\nexport class WorkerManager {\n  private conversionEventsWorker: ConversionEventsWorker;\n  private conversionEventsQueue: ConversionEventsQueue;\n  private prisma: PrismaClient;\n  private metricsService: MetricsService;\n  private isRunning: boolean = false;\n\n  constructor(prisma: PrismaClient) {\n    this.prisma = prisma;\n    this.metricsService = new MetricsService(prisma);\n    this.conversionEventsQueue = new ConversionEventsQueue();\n    this.conversionEventsWorker = new ConversionEventsWorker(\n      this.prisma,\n      this.metricsService\n    );\n  }\n\n  public async start(): Promise<void> {\n    if (this.isRunning) {\n      logger.warn('Workers are already running');\n      return;\n    }\n\n    try {\n      logger.info('Starting workers...');\n      \n      // Workers are automatically started when instantiated\n      // Just mark as running\n      this.isRunning = true;\n      \n      logger.info('All workers started successfully');\n    } catch (error) {\n      logger.error('Failed to start workers:', error);\n      throw error;\n    }\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.isRunning) {\n      logger.warn('Workers are not running');\n      return;\n    }\n\n    try {\n      logger.info('Stopping workers...');\n      \n      await Promise.all([\n        this.conversionEventsWorker.close(),\n        this.conversionEventsQueue.close(),\n      ]);\n      \n      this.isRunning = false;\n      logger.info('All workers stopped successfully');\n    } catch (error) {\n      logger.error('Error stopping workers:', error);\n      throw error;\n    }\n  }\n\n  public getConversionEventsQueue(): ConversionEventsQueue {\n    return this.conversionEventsQueue;\n  }\n\n  public getConversionEventsWorker(): ConversionEventsWorker {\n    return this.conversionEventsWorker;\n  }\n\n  public isWorkerRunning(): boolean {\n    return this.isRunning;\n  }\n\n  // Health check for workers\n  public async getWorkerHealth(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    workers: {\n      conversionEvents: {\n        status: 'running' | 'stopped';\n        queueSize?: number;\n        processing?: number;\n        completed?: number;\n        failed?: number;\n      };\n    };\n  }> {\n    try {\n      const conversionQueue = await this.conversionEventsQueue.getQueue();\n      const [waiting, active, completed, failed] = await Promise.all([\n        conversionQueue.getWaiting(),\n        conversionQueue.getActive(),\n        conversionQueue.getCompleted(),\n        conversionQueue.getFailed(),\n      ]);\n\n      return {\n        status: this.isRunning ? 'healthy' : 'unhealthy',\n        workers: {\n          conversionEvents: {\n            status: this.isRunning ? 'running' : 'stopped',\n            queueSize: waiting.length,\n            processing: active.length,\n            completed: completed.length,\n            failed: failed.length,\n          },\n        },\n      };\n    } catch (error) {\n      logger.error('Error getting worker health:', error);\n      return {\n        status: 'unhealthy',\n        workers: {\n          conversionEvents: {\n            status: 'stopped',\n          },\n        },\n      };\n    }\n  }\n}\n\n// Singleton instance\nlet workerManager: WorkerManager | null = null;\n\nexport function getWorkerManager(prisma?: PrismaClient): WorkerManager {\n  if (!workerManager && prisma) {\n    workerManager = new WorkerManager(prisma);\n  }\n  \n  if (!workerManager) {\n    throw new Error('WorkerManager not initialized. Call with PrismaClient first.');\n  }\n  \n  return workerManager;\n}\n\n// Graceful shutdown handler\nprocess.on('SIGTERM', async () => {\n  logger.info('SIGTERM received, shutting down workers gracefully');\n  if (workerManager) {\n    await workerManager.stop();\n  }\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  logger.info('SIGINT received, shutting down workers gracefully');\n  if (workerManager) {\n    await workerManager.stop();\n  }\n  process.exit(0);\n});\n\nexport * from './conversion-events.worker';"],"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","ignoreList":[]}