cdd5042ba67d43876dff38d6998d9f3e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock external dependencies
jest.mock('google-ads-api');
jest.mock('axios');
const testing_1 = require("@nestjs/testing");
const request = __importStar(require("supertest"));
const google_ads_module_1 = require("../google-ads.module");
const prisma_service_1 = require("../../database/prisma.service");
const crypto_service_1 = require("../../services/crypto.service");
const config_1 = require("@nestjs/config");
const jwt_1 = require("@nestjs/jwt");
const google_ads_api_1 = require("google-ads-api");
const axios_1 = __importDefault(require("axios"));
const mockAxios = axios_1.default;
const mockGoogleAdsApi = google_ads_api_1.GoogleAdsApi;
describe('GoogleAdsModule Integration Tests', () => {
    let app;
    let prismaService;
    let jwtService;
    let mockGoogleAdsClient;
    const mockUser = {
        id: 'user-1',
        email: 'test@example.com',
        organizationId: 'org-1',
    };
    const mockIntegration = {
        id: 'integration-1',
        organizationId: 'org-1',
        platform: 'google_ads',
        isActive: true,
        accessToken: 'encrypted-access-token',
        refreshToken: 'encrypted-refresh-token',
        expiresAt: new Date(Date.now() + 3600000),
        createdAt: new Date(),
        updatedAt: new Date(),
        settings: {
            customerId: '123-456-7890',
            developerToken: 'test-developer-token',
        },
    };
    const mockTokenResponse = {
        data: {
            access_token: 'new-access-token',
            refresh_token: 'new-refresh-token',
            expires_in: 3600,
            token_type: 'Bearer',
        },
    };
    const mockGoogleAdsAccount = {
        customer: {
            resource_name: 'customers/1234567890',
            id: '1234567890',
            descriptive_name: 'Test Account',
            currency_code: 'USD',
            time_zone: 'America/New_York',
            status: 'ENABLED',
            type: 'STANDARD',
        },
    };
    const mockCampaign = {
        campaign: {
            resource_name: 'customers/1234567890/campaigns/987654321',
            id: '987654321',
            name: 'Test Campaign',
            status: 'ENABLED',
            advertising_channel_type: 'SEARCH',
            start_date: '2024-01-01',
            end_date: '2024-12-31',
        },
        campaign_budget: {
            amount_micros: '10000000',
            delivery_method: 'STANDARD',
        },
        metrics: {
            impressions: '1000',
            clicks: '50',
            cost_micros: '5000000',
            conversions: '5',
            ctr: '0.05',
            average_cpc: '100000',
        },
    };
    beforeAll(async () => {
        // Mock Google Ads API client
        mockGoogleAdsClient = {
            Customer: jest.fn().mockReturnValue({
                query: jest.fn(),
                report: jest.fn(),
            }),
        };
        mockGoogleAdsApi.mockImplementation(() => mockGoogleAdsClient);
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [google_ads_module_1.GoogleAdsModule],
        })
            .overrideProvider(prisma_service_1.PrismaService)
            .useValue({
            integration: {
                findFirst: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn(),
            },
            googleAdsCampaign: {
                findMany: jest.fn(),
                create: jest.fn(),
                createMany: jest.fn(),
                update: jest.fn(),
                upsert: jest.fn(),
            },
            googleAdsKeyword: {
                findMany: jest.fn(),
                create: jest.fn(),
                createMany: jest.fn(),
                update: jest.fn(),
                upsert: jest.fn(),
            },
            googleAdsDailyMetrics: {
                findMany: jest.fn(),
                create: jest.fn(),
                createMany: jest.fn(),
                upsert: jest.fn(),
            },
            googleAdsSyncLog: {
                findMany: jest.fn(),
                create: jest.fn(),
            },
            $transaction: jest.fn(),
        })
            .overrideProvider(crypto_service_1.CryptoService)
            .useValue({
            encrypt: jest.fn().mockReturnValue('encrypted-token'),
            decrypt: jest.fn().mockReturnValue('decrypted-token'),
        })
            .overrideProvider(config_1.ConfigService)
            .useValue({
            get: jest.fn().mockImplementation((key) => {
                const config = {
                    'GOOGLE_ADS_CLIENT_ID': 'test-client-id',
                    'GOOGLE_ADS_CLIENT_SECRET': 'test-client-secret',
                    'GOOGLE_ADS_DEVELOPER_TOKEN': 'test-developer-token',
                    'JWT_SECRET': 'test-jwt-secret',
                };
                return config[key];
            }),
        })
            .compile();
        app = moduleFixture.createNestApplication();
        await app.init();
        prismaService = moduleFixture.get(prisma_service_1.PrismaService);
        jwtService = moduleFixture.get(jwt_1.JwtService);
    });
    afterAll(async () => {
        await app.close();
    });
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('Authentication Flow', () => {
        it('should generate auth URL', async () => {
            const token = jwtService.sign(mockUser);
            const redirectUri = 'http://localhost:3000/callback';
            const response = await request(app.getHttpServer())
                .post('/google-ads/connect')
                .set('Authorization', `Bearer ${token}`)
                .send({ redirectUri })
                .expect(201);
            expect(response.body).toHaveProperty('authUrl');
            expect(response.body).toHaveProperty('state');
            expect(response.body.authUrl).toContain('accounts.google.com/oauth/authorize');
            expect(response.body.authUrl).toContain('client_id=test-client-id');
        });
        it('should handle OAuth callback', async () => {
            const token = jwtService.sign(mockUser);
            mockAxios.post.mockResolvedValue(mockTokenResponse);
            prismaService.integration.findFirst.mockResolvedValue(null);
            prismaService.integration.create.mockResolvedValue(mockIntegration);
            const response = await request(app.getHttpServer())
                .post('/google-ads/callback')
                .set('Authorization', `Bearer ${token}`)
                .send({
                code: 'auth-code',
                state: 'valid-state',
                redirectUri: 'http://localhost:3000/callback',
            })
                .expect(201);
            expect(response.body).toEqual({
                success: true,
                message: 'Google Ads conectado com sucesso',
                integration: expect.objectContaining({
                    id: mockIntegration.id,
                    platform: 'google_ads',
                    isActive: true,
                }),
            });
        });
        it('should reject invalid authorization code', async () => {
            const token = jwtService.sign(mockUser);
            mockAxios.post.mockRejectedValue(new Error('Invalid authorization code'));
            await request(app.getHttpServer())
                .post('/google-ads/callback')
                .set('Authorization', `Bearer ${token}`)
                .send({
                code: 'invalid-code',
                state: 'valid-state',
                redirectUri: 'http://localhost:3000/callback',
            })
                .expect(500);
        });
    });
    describe('Data Retrieval', () => {
        beforeEach(() => {
            prismaService.integration.findFirst.mockResolvedValue(mockIntegration);
        });
        it('should fetch Google Ads accounts', async () => {
            const token = jwtService.sign(mockUser);
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockResolvedValue([mockGoogleAdsAccount]),
            });
            const response = await request(app.getHttpServer())
                .get('/google-ads/accounts')
                .set('Authorization', `Bearer ${token}`)
                .expect(200);
            expect(response.body).toHaveLength(1);
            expect(response.body[0]).toEqual({
                id: '1234567890',
                name: 'Test Account',
                currency: 'USD',
                timezone: 'America/New_York',
                status: 'ENABLED',
                type: 'STANDARD',
            });
        });
        it('should fetch campaigns for a customer', async () => {
            const token = jwtService.sign(mockUser);
            const customerId = '1234567890';
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockResolvedValue([mockCampaign]),
            });
            const response = await request(app.getHttpServer())
                .get(`/google-ads/campaigns/${customerId}`)
                .set('Authorization', `Bearer ${token}`)
                .expect(200);
            expect(response.body).toHaveLength(1);
            expect(response.body[0]).toEqual({
                id: '987654321',
                name: 'Test Campaign',
                status: 'ENABLED',
                type: 'SEARCH',
                budget_amount: 10000000,
                budget_type: 'STANDARD',
                impressions: 1000,
                clicks: 50,
                cost: 5000000,
                conversions: 5,
                customer_id: customerId,
            });
        });
        it('should return 404 for non-existent integration', async () => {
            const token = jwtService.sign(mockUser);
            prismaService.integration.findFirst.mockResolvedValue(null);
            await request(app.getHttpServer())
                .get('/google-ads/accounts')
                .set('Authorization', `Bearer ${token}`)
                .expect(500); // Service throws error which becomes 500
        });
    });
    describe('Data Synchronization', () => {
        beforeEach(() => {
            prismaService.integration.findFirst.mockResolvedValue(mockIntegration);
            prismaService.$transaction.mockImplementation((callback) => callback(prismaService));
        });
        it('should sync data successfully', async () => {
            const token = jwtService.sign(mockUser);
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockResolvedValue([mockCampaign]),
            });
            prismaService.googleAdsCampaign.upsert.mockResolvedValue({});
            prismaService.googleAdsDailyMetrics.upsert.mockResolvedValue({});
            prismaService.googleAdsSyncLog.create.mockResolvedValue({});
            const response = await request(app.getHttpServer())
                .post('/google-ads/sync')
                .set('Authorization', `Bearer ${token}`)
                .send({ force: true })
                .expect(201);
            expect(response.body).toEqual({
                success: true,
                message: 'Sincronização concluída com sucesso',
                stats: {
                    campaigns: 1,
                    keywords: 0,
                    metrics: 1,
                },
            });
        });
        it('should handle sync errors gracefully', async () => {
            const token = jwtService.sign(mockUser);
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockRejectedValue(new Error('API Error')),
            });
            await request(app.getHttpServer())
                .post('/google-ads/sync')
                .set('Authorization', `Bearer ${token}`)
                .send({ force: true })
                .expect(500);
        });
    });
    describe('Integration Status', () => {
        it('should return connected status', async () => {
            const token = jwtService.sign(mockUser);
            prismaService.integration.findFirst.mockResolvedValue(mockIntegration);
            const response = await request(app.getHttpServer())
                .get('/google-ads/status')
                .set('Authorization', `Bearer ${token}`)
                .expect(200);
            expect(response.body).toEqual({
                connected: true,
                lastSync: undefined,
                connectedAt: mockIntegration.createdAt.toISOString(),
                expiresAt: mockIntegration.expiresAt.toISOString(),
                status: 'active',
            });
        });
        it('should return disconnected status', async () => {
            const token = jwtService.sign(mockUser);
            prismaService.integration.findFirst.mockResolvedValue(null);
            const response = await request(app.getHttpServer())
                .get('/google-ads/status')
                .set('Authorization', `Bearer ${token}`)
                .expect(200);
            expect(response.body).toEqual({
                connected: false,
                status: 'not_connected',
            });
        });
        it('should return expired status for expired tokens', async () => {
            const token = jwtService.sign(mockUser);
            const expiredIntegration = {
                ...mockIntegration,
                expiresAt: new Date(Date.now() - 3600000), // 1 hour ago
            };
            prismaService.integration.findFirst.mockResolvedValue(expiredIntegration);
            const response = await request(app.getHttpServer())
                .get('/google-ads/status')
                .set('Authorization', `Bearer ${token}`)
                .expect(200);
            expect(response.body.status).toBe('expired');
        });
    });
    describe('Disconnection', () => {
        it('should disconnect integration successfully', async () => {
            const token = jwtService.sign(mockUser);
            prismaService.integration.findFirst.mockResolvedValue(mockIntegration);
            prismaService.integration.update.mockResolvedValue({
                ...mockIntegration,
                isActive: false,
            });
            const response = await request(app.getHttpServer())
                .delete('/google-ads/disconnect')
                .set('Authorization', `Bearer ${token}`)
                .expect(200);
            expect(response.body).toEqual({
                success: true,
                message: 'Google Ads desconectado com sucesso',
            });
        });
        it('should handle disconnect when integration not found', async () => {
            const token = jwtService.sign(mockUser);
            prismaService.integration.findFirst.mockResolvedValue(null);
            await request(app.getHttpServer())
                .delete('/google-ads/disconnect')
                .set('Authorization', `Bearer ${token}`)
                .expect(500);
        });
    });
    describe('Authentication Guards', () => {
        it('should reject requests without JWT token', async () => {
            await request(app.getHttpServer())
                .get('/google-ads/accounts')
                .expect(401);
        });
        it('should reject requests with invalid JWT token', async () => {
            await request(app.getHttpServer())
                .get('/google-ads/accounts')
                .set('Authorization', 'Bearer invalid-token')
                .expect(401);
        });
        it('should accept requests with valid JWT token', async () => {
            const token = jwtService.sign(mockUser);
            prismaService.integration.findFirst.mockResolvedValue(null);
            // This will fail with 500 due to no integration, but auth passes
            await request(app.getHttpServer())
                .get('/google-ads/accounts')
                .set('Authorization', `Bearer ${token}`)
                .expect(500);
        });
    });
    describe('Error Handling', () => {
        beforeEach(() => {
            prismaService.integration.findFirst.mockResolvedValue(mockIntegration);
        });
        it('should handle Google Ads API rate limiting', async () => {
            const token = jwtService.sign(mockUser);
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockRejectedValue(new Error('Rate limit exceeded')),
            });
            await request(app.getHttpServer())
                .get('/google-ads/accounts')
                .set('Authorization', `Bearer ${token}`)
                .expect(500);
        });
        it('should handle Google Ads API authentication errors', async () => {
            const token = jwtService.sign(mockUser);
            const mockCustomer = mockGoogleAdsClient.Customer.mockReturnValue({
                query: jest.fn().mockRejectedValue(new Error('Authentication failed')),
            });
            await request(app.getHttpServer())
                .get('/google-ads/accounts')
                .set('Authorization', `Bearer ${token}`)
                .expect(500);
        });
        it('should handle database connection errors', async () => {
            const token = jwtService.sign(mockUser);
            prismaService.integration.findFirst.mockRejectedValue(new Error('Database connection failed'));
            await request(app.getHttpServer())
                .get('/google-ads/accounts')
                .set('Authorization', `Bearer ${token}`)
                .expect(500);
        });
    });
    describe('Input Validation', () => {
        it('should validate redirect URI in connect endpoint', async () => {
            const token = jwtService.sign(mockUser);
            await request(app.getHttpServer())
                .post('/google-ads/connect')
                .set('Authorization', `Bearer ${token}`)
                .send({ redirectUri: 'invalid-url' })
                .expect(400);
        });
        it('should validate required fields in callback endpoint', async () => {
            const token = jwtService.sign(mockUser);
            await request(app.getHttpServer())
                .post('/google-ads/callback')
                .set('Authorization', `Bearer ${token}`)
                .send({ code: 'test-code' }) // missing state and redirectUri
                .expect(400);
        });
        it('should validate customer ID format in campaigns endpoint', async () => {
            const token = jwtService.sign(mockUser);
            await request(app.getHttpServer())
                .get('/google-ads/campaigns/invalid-customer-id')
                .set('Authorization', `Bearer ${token}`)
                .expect(500); // Service validation error becomes 500
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,