5798c63d2914726a41cc150f23170bcd
/* istanbul ignore next */
function cov_l56tvrhv() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\google-ads.controller.ts";
  var hash = "08ce6a09e91735658b0695fc94b958a895b31d48";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\google-ads.controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "14": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 73
        }
      },
      "15": {
        start: {
          line: 11,
          column: 36
        },
        end: {
          line: 11,
          column: 71
        }
      },
      "16": {
        start: {
          line: 21,
          column: 26
        },
        end: {
          line: 304,
          column: 1
        }
      },
      "17": {
        start: {
          line: 23,
          column: 13
        },
        end: {
          line: 23,
          column: 51
        }
      },
      "18": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 49
        }
      },
      "19": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "20": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "21": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 74
        }
      },
      "22": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "23": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 43
        }
      },
      "24": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 77
        }
      },
      "25": {
        start: {
          line: 39,
          column: 28
        },
        end: {
          line: 39,
          column: 93
        }
      },
      "26": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 82
        }
      },
      "27": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 47,
          column: 14
        }
      },
      "28": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 76
        }
      },
      "29": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 24
        }
      },
      "30": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "31": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "32": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 90
        }
      },
      "33": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 155
        }
      },
      "34": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "35": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 85
        }
      },
      "36": {
        start: {
          line: 64,
          column: 30
        },
        end: {
          line: 64,
          column: 101
        }
      },
      "37": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "38": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 73
        }
      },
      "39": {
        start: {
          line: 69,
          column: 27
        },
        end: {
          line: 69,
          column: 110
        }
      },
      "40": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 78
        }
      },
      "41": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 87
        }
      },
      "42": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 96
        }
      },
      "43": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 83
        }
      },
      "44": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 135
        }
      },
      "45": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "46": {
        start: {
          line: 83,
          column: 29
        },
        end: {
          line: 83,
          column: 85
        }
      },
      "47": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 87,
          column: 14
        }
      },
      "48": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 83
        }
      },
      "49": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 24
        }
      },
      "50": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "51": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "52": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 73
        }
      },
      "53": {
        start: {
          line: 99,
          column: 30
        },
        end: {
          line: 99,
          column: 91
        }
      },
      "54": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 103,
          column: 14
        }
      },
      "55": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 75
        }
      },
      "56": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 24
        }
      },
      "57": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "58": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "59": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 73
        }
      },
      "60": {
        start: {
          line: 115,
          column: 32
        },
        end: {
          line: 116,
          column: 78
        }
      },
      "61": {
        start: {
          line: 116,
          column: 56
        },
        end: {
          line: 116,
          column: 65
        }
      },
      "62": {
        start: {
          line: 117,
          column: 29
        },
        end: {
          line: 117,
          column: 109
        }
      },
      "63": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "64": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 74
        }
      },
      "65": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "66": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "67": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "68": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 73
        }
      },
      "69": {
        start: {
          line: 133,
          column: 30
        },
        end: {
          line: 136,
          column: 25
        }
      },
      "70": {
        start: {
          line: 137,
          column: 28
        },
        end: {
          line: 137,
          column: 113
        }
      },
      "71": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "72": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 73
        }
      },
      "73": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 24
        }
      },
      "74": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "75": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "76": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 73
        }
      },
      "77": {
        start: {
          line: 153,
          column: 30
        },
        end: {
          line: 156,
          column: 25
        }
      },
      "78": {
        start: {
          line: 157,
          column: 32
        },
        end: {
          line: 157,
          column: 119
        }
      },
      "79": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 161,
          column: 14
        }
      },
      "80": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 78
        }
      },
      "81": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 24
        }
      },
      "82": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "83": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 83
        }
      },
      "84": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 84
        }
      },
      "85": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 178,
          column: 14
        }
      },
      "86": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 71
        }
      },
      "87": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 24
        }
      },
      "88": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "89": {
        start: {
          line: 188,
          column: 32
        },
        end: {
          line: 195,
          column: 14
        }
      },
      "90": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "91": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 203,
          column: 18
        }
      },
      "92": {
        start: {
          line: 205,
          column: 30
        },
        end: {
          line: 205,
          column: 90
        }
      },
      "93": {
        start: {
          line: 206,
          column: 27
        },
        end: {
          line: 207,
          column: 48
        }
      },
      "94": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 217,
          column: 14
        }
      },
      "95": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 84
        }
      },
      "96": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 24
        }
      },
      "97": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "98": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 71
        }
      },
      "99": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 87
        }
      },
      "100": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 233,
          column: 14
        }
      },
      "101": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 84
        }
      },
      "102": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 24
        }
      },
      "103": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "104": {
        start: {
          line: 243,
          column: 32
        },
        end: {
          line: 250,
          column: 14
        }
      },
      "105": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "106": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 114
        }
      },
      "107": {
        start: {
          line: 255,
          column: 33
        },
        end: {
          line: 255,
          column: 105
        }
      },
      "108": {
        start: {
          line: 256,
          column: 30
        },
        end: {
          line: 256,
          column: 90
        }
      },
      "109": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 72
        }
      },
      "110": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 78
        }
      },
      "111": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 266,
          column: 14
        }
      },
      "112": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 75
        }
      },
      "113": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 24
        }
      },
      "114": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "115": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "116": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 73
        }
      },
      "117": {
        start: {
          line: 278,
          column: 32
        },
        end: {
          line: 279,
          column: 78
        }
      },
      "118": {
        start: {
          line: 279,
          column: 56
        },
        end: {
          line: 279,
          column: 65
        }
      },
      "119": {
        start: {
          line: 281,
          column: 29
        },
        end: {
          line: 281,
          column: 109
        }
      },
      "120": {
        start: {
          line: 283,
          column: 34
        },
        end: {
          line: 293,
          column: 15
        }
      },
      "121": {
        start: {
          line: 284,
          column: 35
        },
        end: {
          line: 284,
          column: 70
        }
      },
      "122": {
        start: {
          line: 285,
          column: 33
        },
        end: {
          line: 293,
          column: 13
        }
      },
      "123": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 297,
          column: 14
        }
      },
      "124": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 80
        }
      },
      "125": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 24
        }
      },
      "126": {
        start: {
          line: 305,
          column: 0
        },
        end: {
          line: 317,
          column: 56
        }
      },
      "127": {
        start: {
          line: 318,
          column: 0
        },
        end: {
          line: 328,
          column: 58
        }
      },
      "128": {
        start: {
          line: 329,
          column: 0
        },
        end: {
          line: 340,
          column: 63
        }
      },
      "129": {
        start: {
          line: 341,
          column: 0
        },
        end: {
          line: 354,
          column: 56
        }
      },
      "130": {
        start: {
          line: 355,
          column: 0
        },
        end: {
          line: 369,
          column: 55
        }
      },
      "131": {
        start: {
          line: 370,
          column: 0
        },
        end: {
          line: 385,
          column: 62
        }
      },
      "132": {
        start: {
          line: 386,
          column: 0
        },
        end: {
          line: 401,
          column: 64
        }
      },
      "133": {
        start: {
          line: 402,
          column: 0
        },
        end: {
          line: 414,
          column: 52
        }
      },
      "134": {
        start: {
          line: 415,
          column: 0
        },
        end: {
          line: 425,
          column: 64
        }
      },
      "135": {
        start: {
          line: 426,
          column: 0
        },
        end: {
          line: 436,
          column: 65
        }
      },
      "136": {
        start: {
          line: 437,
          column: 0
        },
        end: {
          line: 448,
          column: 56
        }
      },
      "137": {
        start: {
          line: 449,
          column: 0
        },
        end: {
          line: 463,
          column: 60
        }
      },
      "138": {
        start: {
          line: 464,
          column: 0
        },
        end: {
          line: 468,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 10,
            column: 41
          }
        },
        loc: {
          start: {
            line: 10,
            column: 73
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 10
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 11,
            column: 11
          },
          end: {
            line: 11,
            column: 12
          }
        },
        loc: {
          start: {
            line: 11,
            column: 34
          },
          end: {
            line: 11,
            column: 73
          }
        },
        line: 11
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 34
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 54
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 36
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 81
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 41
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 94
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 35
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 110
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 116,
            column: 50
          },
          end: {
            line: 116,
            column: 51
          }
        },
        loc: {
          start: {
            line: 116,
            column: 56
          },
          end: {
            line: 116,
            column: 65
          }
        },
        line: 116
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 42
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 128
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 44
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 148
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 31
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 168
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 37
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 185
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 224,
            column: 38
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 224
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 29
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 240
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 40
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 273
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 279,
            column: 50
          },
          end: {
            line: 279,
            column: 51
          }
        },
        loc: {
          start: {
            line: 279,
            column: 56
          },
          end: {
            line: 279,
            column: 65
          }
        },
        line: 279
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 284,
            column: 24
          },
          end: {
            line: 284,
            column: 25
          }
        },
        loc: {
          start: {
            line: 284,
            column: 35
          },
          end: {
            line: 284,
            column: 70
          }
        },
        line: 284
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 285,
            column: 21
          },
          end: {
            line: 285,
            column: 22
          }
        },
        loc: {
          start: {
            line: 285,
            column: 33
          },
          end: {
            line: 293,
            column: 13
          }
        },
        line: 285
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 10,
            column: 14
          },
          end: {
            line: 12,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 19
          }
        }, {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 35
          }
        }, {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 10
      },
      "14": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "15": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "16": {
        loc: {
          start: {
            line: 57,
            column: 50
          },
          end: {
            line: 57,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 50
          },
          end: {
            line: 57,
            column: 73
          }
        }, {
          start: {
            line: 57,
            column: 77
          },
          end: {
            line: 57,
            column: 88
          }
        }],
        line: 57
      },
      "17": {
        loc: {
          start: {
            line: 58,
            column: 112
          },
          end: {
            line: 58,
            column: 150
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 112
          },
          end: {
            line: 58,
            column: 135
          }
        }, {
          start: {
            line: 58,
            column: 139
          },
          end: {
            line: 58,
            column: 150
          }
        }],
        line: 58
      },
      "18": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "19": {
        loc: {
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 60,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 60,
            column: 27
          }
        }, {
          start: {
            line: 60,
            column: 31
          },
          end: {
            line: 60,
            column: 43
          }
        }],
        line: 60
      },
      "20": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "21": {
        loc: {
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 65,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 65,
            column: 33
          }
        }, {
          start: {
            line: 65,
            column: 37
          },
          end: {
            line: 65,
            column: 59
          }
        }],
        line: 65
      },
      "22": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "23": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "24": {
        loc: {
          start: {
            line: 115,
            column: 32
          },
          end: {
            line: 116,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 116,
            column: 66
          }
        }, {
          start: {
            line: 116,
            column: 69
          },
          end: {
            line: 116,
            column: 78
          }
        }],
        line: 115
      },
      "25": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "26": {
        loc: {
          start: {
            line: 133,
            column: 30
          },
          end: {
            line: 136,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 67
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 136,
            column: 25
          }
        }],
        line: 133
      },
      "27": {
        loc: {
          start: {
            line: 133,
            column: 30
          },
          end: {
            line: 133,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 30
          },
          end: {
            line: 133,
            column: 46
          }
        }, {
          start: {
            line: 133,
            column: 50
          },
          end: {
            line: 133,
            column: 64
          }
        }],
        line: 133
      },
      "28": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "29": {
        loc: {
          start: {
            line: 153,
            column: 30
          },
          end: {
            line: 156,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 153,
            column: 67
          },
          end: {
            line: 156,
            column: 13
          }
        }, {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 156,
            column: 25
          }
        }],
        line: 153
      },
      "30": {
        loc: {
          start: {
            line: 153,
            column: 30
          },
          end: {
            line: 153,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 30
          },
          end: {
            line: 153,
            column: 46
          }
        }, {
          start: {
            line: 153,
            column: 50
          },
          end: {
            line: 153,
            column: 64
          }
        }],
        line: 153
      },
      "31": {
        loc: {
          start: {
            line: 170,
            column: 62
          },
          end: {
            line: 170,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 62
          },
          end: {
            line: 170,
            column: 72
          }
        }, {
          start: {
            line: 170,
            column: 76
          },
          end: {
            line: 170,
            column: 81
          }
        }],
        line: 170
      },
      "32": {
        loc: {
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "33": {
        loc: {
          start: {
            line: 205,
            column: 30
          },
          end: {
            line: 205,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 30
          },
          end: {
            line: 205,
            column: 51
          }
        }, {
          start: {
            line: 205,
            column: 55
          },
          end: {
            line: 205,
            column: 90
          }
        }],
        line: 205
      },
      "34": {
        loc: {
          start: {
            line: 206,
            column: 27
          },
          end: {
            line: 207,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 206,
            column: 51
          },
          end: {
            line: 206,
            column: 61
          }
        }, {
          start: {
            line: 207,
            column: 16
          },
          end: {
            line: 207,
            column: 48
          }
        }],
        line: 206
      },
      "35": {
        loc: {
          start: {
            line: 207,
            column: 16
          },
          end: {
            line: 207,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 28
          },
          end: {
            line: 207,
            column: 37
          }
        }, {
          start: {
            line: 207,
            column: 40
          },
          end: {
            line: 207,
            column: 48
          }
        }],
        line: 207
      },
      "36": {
        loc: {
          start: {
            line: 211,
            column: 31
          },
          end: {
            line: 211,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 31
          },
          end: {
            line: 211,
            column: 51
          }
        }, {
          start: {
            line: 211,
            column: 55
          },
          end: {
            line: 211,
            column: 65
          }
        }],
        line: 211
      },
      "37": {
        loc: {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "38": {
        loc: {
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 251,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 251,
            column: 28
          }
        }, {
          start: {
            line: 251,
            column: 32
          },
          end: {
            line: 251,
            column: 57
          }
        }],
        line: 251
      },
      "39": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "40": {
        loc: {
          start: {
            line: 278,
            column: 32
          },
          end: {
            line: 279,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 279,
            column: 66
          }
        }, {
          start: {
            line: 279,
            column: 69
          },
          end: {
            line: 279,
            column: 78
          }
        }],
        line: 278
      },
      "41": {
        loc: {
          start: {
            line: 326,
            column: 45
          },
          end: {
            line: 326,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 326,
            column: 120
          },
          end: {
            line: 326,
            column: 122
          }
        }, {
          start: {
            line: 326,
            column: 125
          },
          end: {
            line: 326,
            column: 131
          }
        }],
        line: 326
      },
      "42": {
        loc: {
          start: {
            line: 326,
            column: 58
          },
          end: {
            line: 326,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 58
          },
          end: {
            line: 326,
            column: 89
          }
        }, {
          start: {
            line: 326,
            column: 93
          },
          end: {
            line: 326,
            column: 101
          }
        }],
        line: 326
      },
      "43": {
        loc: {
          start: {
            line: 467,
            column: 37
          },
          end: {
            line: 467,
            column: 139
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 467,
            column: 128
          },
          end: {
            line: 467,
            column: 130
          }
        }, {
          start: {
            line: 467,
            column: 133
          },
          end: {
            line: 467,
            column: 139
          }
        }],
        line: 467
      },
      "44": {
        loc: {
          start: {
            line: 467,
            column: 50
          },
          end: {
            line: 467,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 467,
            column: 50
          },
          end: {
            line: 467,
            column: 89
          }
        }, {
          start: {
            line: 467,
            column: 93
          },
          end: {
            line: 467,
            column: 109
          }
        }],
        line: 467
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\google-ads.controller.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\google-ads.controller.ts"],
      sourcesContent: ["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Query,\n  Req,\n  Res,\n  HttpStatus,\n  UseGuards,\n  Logger,\n  BadRequestException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { GoogleAdsService } from '../services/google-ads.service';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { GetUser } from '../decorators/get-user.decorator';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiQuery } from '@nestjs/swagger';\n\ninterface AuthUser {\n  id: string;\n  email: string;\n}\n\ninterface AuthQueryDto {\n  redirect_uri: string;\n}\n\ninterface CallbackQueryDto {\n  code?: string;\n  state?: string;\n  error?: string;\n  error_description?: string;\n}\n\ninterface SyncRequestDto {\n  force?: boolean;\n  customer_id?: string;\n}\n\ninterface KeywordQueryDto {\n  customer_id: string;\n  campaign_ids?: string;\n}\n\ninterface MetricsQueryDto {\n  customer_id: string;\n  start_date?: string;\n  end_date?: string;\n}\n\n@ApiTags('Google Ads Integration')\n@Controller('api/integrations/google')\nexport class GoogleAdsController {\n  private readonly logger = new Logger(GoogleAdsController.name);\n\n  constructor(private readonly googleAdsService: GoogleAdsService) {}\n\n  @Post('auth')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Initiate Google Ads OAuth flow' })\n  @ApiResponse({ status: 200, description: 'OAuth URL generated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid redirect URI' })\n  async initiateAuth(\n    @GetUser() user: AuthUser,\n    @Body() body: AuthQueryDto,\n  ) {\n    try {\n      if (!body.redirect_uri) {\n        throw new BadRequestException('redirect_uri is required');\n      }\n\n      // Validate redirect URI format\n      try {\n        new URL(body.redirect_uri);\n      } catch {\n        throw new BadRequestException('Invalid redirect_uri format');\n      }\n\n      const authUrl = this.googleAdsService.generateAuthUrl(user.id, body.redirect_uri);\n      \n      this.logger.log(`Generated Google Ads OAuth URL for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          authUrl,\n          message: 'Redirect user to this URL to complete authorization',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to initiate Google Ads OAuth', error);\n      throw error;\n    }\n  }\n\n  @Get('callback')\n  @ApiOperation({ summary: 'Handle Google Ads OAuth callback' })\n  @ApiResponse({ status: 200, description: 'Authorization completed successfully' })\n  @ApiResponse({ status: 400, description: 'Authorization failed' })\n  async handleCallback(\n    @Query() query: CallbackQueryDto,\n    @Res() res: Response,\n  ) {\n    try {\n      if (query.error) {\n        this.logger.error('OAuth error:', query.error_description || query.error);\n        return res.redirect(`${process.env.FRONTEND_URL}/integrations/google?error=${encodeURIComponent(query.error_description || query.error)}`);\n      }\n\n      if (!query.code || !query.state) {\n        throw new BadRequestException('Missing authorization code or state');\n      }\n\n      // Decrypt state to get user info\n      const stateData = JSON.parse(\n        this.googleAdsService['cryptoService'].decrypt(query.state)\n      );\n      \n      if (!stateData.userId || !stateData.redirectUri) {\n        throw new BadRequestException('Invalid state parameter');\n      }\n\n      // Exchange code for tokens\n      const tokens = await this.googleAdsService.exchangeCodeForToken(\n        query.code,\n        stateData.redirectUri\n      );\n\n      // Store tokens\n      await this.googleAdsService.storeTokens(stateData.userId, tokens);\n\n      this.logger.log(`Google Ads OAuth completed for user ${stateData.userId}`);\n\n      // Redirect to success page\n      return res.redirect(`${process.env.FRONTEND_URL}/integrations/google?success=true`);\n    } catch (error) {\n      this.logger.error('Failed to handle Google Ads OAuth callback', error);\n      return res.redirect(`${process.env.FRONTEND_URL}/integrations/google?error=${encodeURIComponent('Authorization failed')}`);\n    }\n  }\n\n  @Get('accounts')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get user\\'s Google Ads customer accounts' })\n  @ApiResponse({ status: 200, description: 'Customer accounts retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Integration not found or inactive' })\n  async getCustomerAccounts(@GetUser() user: AuthUser) {\n    try {\n      const accounts = await this.googleAdsService.getCustomerAccounts(user.id);\n      \n      return {\n        success: true,\n        data: accounts,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads customer accounts', error);\n      throw error;\n    }\n  }\n\n  @Get('campaigns')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get campaigns for a customer account' })\n  @ApiResponse({ status: 200, description: 'Campaigns retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  async getCampaigns(\n    @GetUser() user: AuthUser,\n    @Query('customer_id') customerId: string,\n  ) {\n    try {\n      if (!customerId) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const campaigns = await this.googleAdsService.getCampaigns(user.id, customerId);\n      \n      return {\n        success: true,\n        data: campaigns,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads campaigns', error);\n      throw error;\n    }\n  }\n\n  @Get('keywords')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get keywords for campaigns' })\n  @ApiResponse({ status: 200, description: 'Keywords retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  @ApiQuery({ name: 'campaign_ids', required: false, description: 'Comma-separated campaign IDs (optional)' })\n  async getKeywords(\n    @GetUser() user: AuthUser,\n    @Query() query: KeywordQueryDto,\n  ) {\n    try {\n      if (!query.customer_id) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const campaignIds = query.campaign_ids ? \n        query.campaign_ids.split(',').map(id => id.trim()) : undefined;\n\n      const keywords = await this.googleAdsService.getKeywords(\n        user.id,\n        query.customer_id,\n        campaignIds\n      );\n      \n      return {\n        success: true,\n        data: keywords,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads keywords', error);\n      throw error;\n    }\n  }\n\n  @Get('metrics')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get campaign performance metrics' })\n  @ApiResponse({ status: 200, description: 'Metrics retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  @ApiQuery({ name: 'start_date', required: false, description: 'Start date (YYYY-MM-DD)' })\n  @ApiQuery({ name: 'end_date', required: false, description: 'End date (YYYY-MM-DD)' })\n  async getCampaignMetrics(\n    @GetUser() user: AuthUser,\n    @Query() query: MetricsQueryDto,\n  ) {\n    try {\n      if (!query.customer_id) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const dateRange = query.start_date && query.end_date ? {\n        startDate: query.start_date,\n        endDate: query.end_date,\n      } : undefined;\n\n      const metrics = await this.googleAdsService.getCampaignMetrics(\n        user.id,\n        query.customer_id,\n        dateRange\n      );\n      \n      return {\n        success: true,\n        data: metrics,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads metrics', error);\n      throw error;\n    }\n  }\n\n  @Get('search-terms')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get search terms report' })\n  @ApiResponse({ status: 200, description: 'Search terms retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  @ApiQuery({ name: 'start_date', required: false, description: 'Start date (YYYY-MM-DD)' })\n  @ApiQuery({ name: 'end_date', required: false, description: 'End date (YYYY-MM-DD)' })\n  async getSearchTermsReport(\n    @GetUser() user: AuthUser,\n    @Query() query: MetricsQueryDto,\n  ) {\n    try {\n      if (!query.customer_id) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const dateRange = query.start_date && query.end_date ? {\n        startDate: query.start_date,\n        endDate: query.end_date,\n      } : undefined;\n\n      const searchTerms = await this.googleAdsService.getSearchTermsReport(\n        user.id,\n        query.customer_id,\n        dateRange\n      );\n      \n      return {\n        success: true,\n        data: searchTerms,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads search terms', error);\n      throw error;\n    }\n  }\n\n  @Post('sync')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Trigger manual data synchronization' })\n  @ApiResponse({ status: 200, description: 'Sync initiated successfully' })\n  @ApiResponse({ status: 401, description: 'Integration not found or inactive' })\n  async syncData(\n    @GetUser() user: AuthUser,\n    @Body() body: SyncRequestDto,\n  ) {\n    try {\n      await this.googleAdsService.syncUserData(user.id, body.force || false);\n      \n      this.logger.log(`Manual Google Ads sync completed for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          message: 'Data synchronization completed successfully',\n          timestamp: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to sync Google Ads data', error);\n      throw error;\n    }\n  }\n\n  @Get('status')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get Google Ads integration status' })\n  @ApiResponse({ status: 200, description: 'Status retrieved successfully' })\n  async getIntegrationStatus(@GetUser() user: AuthUser) {\n    try {\n      // Get integration from database\n      const integration = await this.googleAdsService['prisma'].integration.findUnique({\n        where: {\n          userId_platform: {\n            userId: user.id,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n      });\n\n      if (!integration) {\n        return {\n          success: true,\n          data: {\n            connected: false,\n            status: 'not_connected',\n          },\n        };\n      }\n\n      const isExpired = integration.expiresAt && integration.expiresAt <= new Date();\n      const status = !integration.isActive ? 'inactive' : \n                    isExpired ? 'expired' : 'active';\n\n      return {\n        success: true,\n        data: {\n          connected: integration.isActive && !isExpired,\n          status,\n          connectedAt: integration.createdAt,\n          lastSync: integration.lastSync,\n          expiresAt: integration.expiresAt,\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads integration status', error);\n      throw error;\n    }\n  }\n\n  @Post('disconnect')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Disconnect Google Ads integration' })\n  @ApiResponse({ status: 200, description: 'Integration disconnected successfully' })\n  async disconnectIntegration(@GetUser() user: AuthUser) {\n    try {\n      await this.googleAdsService.disconnectIntegration(user.id);\n      \n      this.logger.log(`Google Ads integration disconnected for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          message: 'Google Ads integration disconnected successfully',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to disconnect Google Ads integration', error);\n      throw error;\n    }\n  }\n\n  @Post('refresh-token')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Refresh Google Ads access token' })\n  @ApiResponse({ status: 200, description: 'Token refreshed successfully' })\n  @ApiResponse({ status: 401, description: 'Integration not found or refresh failed' })\n  async refreshToken(@GetUser() user: AuthUser) {\n    try {\n      // Get current integration\n      const integration = await this.googleAdsService['prisma'].integration.findUnique({\n        where: {\n          userId_platform: {\n            userId: user.id,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n      });\n\n      if (!integration || !integration.refreshToken) {\n        throw new UnauthorizedException('Google Ads integration not found or no refresh token available');\n      }\n\n      // Decrypt and use refresh token\n      const refreshToken = this.googleAdsService['cryptoService'].decrypt(integration.refreshToken);\n      const newTokens = await this.googleAdsService.refreshAccessToken(refreshToken);\n      \n      // Store new tokens\n      await this.googleAdsService.storeTokens(user.id, newTokens);\n      \n      this.logger.log(`Google Ads token refreshed for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          message: 'Access token refreshed successfully',\n          expiresAt: new Date(Date.now() + newTokens.expires_in * 1000),\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to refresh Google Ads token', error);\n      throw error;\n    }\n  }\n\n  @Get('quality-scores')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get quality scores for keywords' })\n  @ApiResponse({ status: 200, description: 'Quality scores retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  @ApiQuery({ name: 'campaign_ids', required: false, description: 'Comma-separated campaign IDs (optional)' })\n  async getQualityScores(\n    @GetUser() user: AuthUser,\n    @Query() query: KeywordQueryDto,\n  ) {\n    try {\n      if (!query.customer_id) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const campaignIds = query.campaign_ids ? \n        query.campaign_ids.split(',').map(id => id.trim()) : undefined;\n\n      // Get keywords with quality scores\n      const keywords = await this.googleAdsService.getKeywords(\n        user.id,\n        query.customer_id,\n        campaignIds\n      );\n      \n      // Filter and format quality score data\n      const qualityScores = keywords\n        .filter(keyword => keyword.quality_score !== undefined)\n        .map(keyword => ({\n          keyword_id: keyword.id,\n          keyword_text: keyword.text,\n          quality_score: keyword.quality_score,\n          first_page_cpc: keyword.first_page_cpc,\n          top_of_page_cpc: keyword.top_of_page_cpc,\n          campaign_id: keyword.campaign_id,\n          ad_group_id: keyword.ad_group_id,\n        }));\n      \n      return {\n        success: true,\n        data: qualityScores,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads quality scores', error);\n      throw error;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "08ce6a09e91735658b0695fc94b958a895b31d48"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_l56tvrhv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_l56tvrhv();
var __decorate =
/* istanbul ignore next */
(cov_l56tvrhv().s[0]++,
/* istanbul ignore next */
(cov_l56tvrhv().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_l56tvrhv().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_l56tvrhv().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_l56tvrhv().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_l56tvrhv().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_l56tvrhv().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_l56tvrhv().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_l56tvrhv().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_l56tvrhv().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_l56tvrhv().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_l56tvrhv().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_l56tvrhv().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_l56tvrhv().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_l56tvrhv().b[3][0]++;
    cov_l56tvrhv().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_l56tvrhv().b[3][1]++;
    cov_l56tvrhv().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_l56tvrhv().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[5][0]++;
        cov_l56tvrhv().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_l56tvrhv().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_l56tvrhv().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_l56tvrhv().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_l56tvrhv().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_l56tvrhv().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_l56tvrhv().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_l56tvrhv().s[9]++;
  return /* istanbul ignore next */(cov_l56tvrhv().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_l56tvrhv().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_l56tvrhv().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_l56tvrhv().s[10]++,
/* istanbul ignore next */
(cov_l56tvrhv().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_l56tvrhv().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_l56tvrhv().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_l56tvrhv().f[1]++;
  cov_l56tvrhv().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_l56tvrhv().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_l56tvrhv().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_l56tvrhv().b[11][0]++;
    cov_l56tvrhv().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_l56tvrhv().b[11][1]++;
  }
}));
var __param =
/* istanbul ignore next */
(cov_l56tvrhv().s[13]++,
/* istanbul ignore next */
(cov_l56tvrhv().b[13][0]++, this) &&
/* istanbul ignore next */
(cov_l56tvrhv().b[13][1]++, this.__param) ||
/* istanbul ignore next */
(cov_l56tvrhv().b[13][2]++, function (paramIndex, decorator) {
  /* istanbul ignore next */
  cov_l56tvrhv().f[2]++;
  cov_l56tvrhv().s[14]++;
  return function (target, key) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[3]++;
    cov_l56tvrhv().s[15]++;
    decorator(target, key, paramIndex);
  };
}));
var GoogleAdsController_1;
var _a, _b;
import { Controller, Get, Post, Body, Query, Res, UseGuards, Logger, BadRequestException, UnauthorizedException } from '@nestjs/common';
import { Response } from 'express';
import { GoogleAdsService } from '../services/google-ads.service';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { GetUser } from '../decorators/get-user.decorator';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiQuery } from '@nestjs/swagger';
let GoogleAdsController =
/* istanbul ignore next */
(cov_l56tvrhv().s[16]++, GoogleAdsController_1 = class GoogleAdsController {
  googleAdsService;
  logger =
  /* istanbul ignore next */
  (cov_l56tvrhv().s[17]++, new Logger(GoogleAdsController_1.name));
  constructor(googleAdsService) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[4]++;
    cov_l56tvrhv().s[18]++;
    this.googleAdsService = googleAdsService;
  }
  async initiateAuth(user, body) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[5]++;
    cov_l56tvrhv().s[19]++;
    try {
      /* istanbul ignore next */
      cov_l56tvrhv().s[20]++;
      if (!body.redirect_uri) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[14][0]++;
        cov_l56tvrhv().s[21]++;
        throw new BadRequestException('redirect_uri is required');
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[14][1]++;
      }
      // Validate redirect URI format
      cov_l56tvrhv().s[22]++;
      try {
        /* istanbul ignore next */
        cov_l56tvrhv().s[23]++;
        new URL(body.redirect_uri);
      } catch {
        /* istanbul ignore next */
        cov_l56tvrhv().s[24]++;
        throw new BadRequestException('Invalid redirect_uri format');
      }
      const authUrl =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[25]++, this.googleAdsService.generateAuthUrl(user.id, body.redirect_uri));
      /* istanbul ignore next */
      cov_l56tvrhv().s[26]++;
      this.logger.log(`Generated Google Ads OAuth URL for user ${user.id}`);
      /* istanbul ignore next */
      cov_l56tvrhv().s[27]++;
      return {
        success: true,
        data: {
          authUrl,
          message: 'Redirect user to this URL to complete authorization'
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[28]++;
      this.logger.error('Failed to initiate Google Ads OAuth', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[29]++;
      throw error;
    }
  }
  async handleCallback(query, res) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[6]++;
    cov_l56tvrhv().s[30]++;
    try {
      /* istanbul ignore next */
      cov_l56tvrhv().s[31]++;
      if (query.error) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[15][0]++;
        cov_l56tvrhv().s[32]++;
        this.logger.error('OAuth error:',
        /* istanbul ignore next */
        (cov_l56tvrhv().b[16][0]++, query.error_description) ||
        /* istanbul ignore next */
        (cov_l56tvrhv().b[16][1]++, query.error));
        /* istanbul ignore next */
        cov_l56tvrhv().s[33]++;
        return res.redirect(`${process.env.FRONTEND_URL}/integrations/google?error=${encodeURIComponent(
        /* istanbul ignore next */
        (cov_l56tvrhv().b[17][0]++, query.error_description) ||
        /* istanbul ignore next */
        (cov_l56tvrhv().b[17][1]++, query.error))}`);
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[15][1]++;
      }
      cov_l56tvrhv().s[34]++;
      if (
      /* istanbul ignore next */
      (cov_l56tvrhv().b[19][0]++, !query.code) ||
      /* istanbul ignore next */
      (cov_l56tvrhv().b[19][1]++, !query.state)) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[18][0]++;
        cov_l56tvrhv().s[35]++;
        throw new BadRequestException('Missing authorization code or state');
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[18][1]++;
      }
      // Decrypt state to get user info
      const stateData =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[36]++, JSON.parse(this.googleAdsService['cryptoService'].decrypt(query.state)));
      /* istanbul ignore next */
      cov_l56tvrhv().s[37]++;
      if (
      /* istanbul ignore next */
      (cov_l56tvrhv().b[21][0]++, !stateData.userId) ||
      /* istanbul ignore next */
      (cov_l56tvrhv().b[21][1]++, !stateData.redirectUri)) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[20][0]++;
        cov_l56tvrhv().s[38]++;
        throw new BadRequestException('Invalid state parameter');
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[20][1]++;
      }
      // Exchange code for tokens
      const tokens =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[39]++, await this.googleAdsService.exchangeCodeForToken(query.code, stateData.redirectUri));
      // Store tokens
      /* istanbul ignore next */
      cov_l56tvrhv().s[40]++;
      await this.googleAdsService.storeTokens(stateData.userId, tokens);
      /* istanbul ignore next */
      cov_l56tvrhv().s[41]++;
      this.logger.log(`Google Ads OAuth completed for user ${stateData.userId}`);
      // Redirect to success page
      /* istanbul ignore next */
      cov_l56tvrhv().s[42]++;
      return res.redirect(`${process.env.FRONTEND_URL}/integrations/google?success=true`);
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[43]++;
      this.logger.error('Failed to handle Google Ads OAuth callback', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[44]++;
      return res.redirect(`${process.env.FRONTEND_URL}/integrations/google?error=${encodeURIComponent('Authorization failed')}`);
    }
  }
  async getCustomerAccounts(user) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[7]++;
    cov_l56tvrhv().s[45]++;
    try {
      const accounts =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[46]++, await this.googleAdsService.getCustomerAccounts(user.id));
      /* istanbul ignore next */
      cov_l56tvrhv().s[47]++;
      return {
        success: true,
        data: accounts
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[48]++;
      this.logger.error('Failed to get Google Ads customer accounts', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[49]++;
      throw error;
    }
  }
  async getCampaigns(user, customerId) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[8]++;
    cov_l56tvrhv().s[50]++;
    try {
      /* istanbul ignore next */
      cov_l56tvrhv().s[51]++;
      if (!customerId) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[22][0]++;
        cov_l56tvrhv().s[52]++;
        throw new BadRequestException('customer_id is required');
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[22][1]++;
      }
      const campaigns =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[53]++, await this.googleAdsService.getCampaigns(user.id, customerId));
      /* istanbul ignore next */
      cov_l56tvrhv().s[54]++;
      return {
        success: true,
        data: campaigns
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[55]++;
      this.logger.error('Failed to get Google Ads campaigns', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[56]++;
      throw error;
    }
  }
  async getKeywords(user, query) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[9]++;
    cov_l56tvrhv().s[57]++;
    try {
      /* istanbul ignore next */
      cov_l56tvrhv().s[58]++;
      if (!query.customer_id) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[23][0]++;
        cov_l56tvrhv().s[59]++;
        throw new BadRequestException('customer_id is required');
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[23][1]++;
      }
      const campaignIds =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[60]++, query.campaign_ids ?
      /* istanbul ignore next */
      (cov_l56tvrhv().b[24][0]++, query.campaign_ids.split(',').map(id => {
        /* istanbul ignore next */
        cov_l56tvrhv().f[10]++;
        cov_l56tvrhv().s[61]++;
        return id.trim();
      })) :
      /* istanbul ignore next */
      (cov_l56tvrhv().b[24][1]++, undefined));
      const keywords =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[62]++, await this.googleAdsService.getKeywords(user.id, query.customer_id, campaignIds));
      /* istanbul ignore next */
      cov_l56tvrhv().s[63]++;
      return {
        success: true,
        data: keywords
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[64]++;
      this.logger.error('Failed to get Google Ads keywords', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[65]++;
      throw error;
    }
  }
  async getCampaignMetrics(user, query) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[11]++;
    cov_l56tvrhv().s[66]++;
    try {
      /* istanbul ignore next */
      cov_l56tvrhv().s[67]++;
      if (!query.customer_id) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[25][0]++;
        cov_l56tvrhv().s[68]++;
        throw new BadRequestException('customer_id is required');
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[25][1]++;
      }
      const dateRange =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[69]++,
      /* istanbul ignore next */
      (cov_l56tvrhv().b[27][0]++, query.start_date) &&
      /* istanbul ignore next */
      (cov_l56tvrhv().b[27][1]++, query.end_date) ?
      /* istanbul ignore next */
      (cov_l56tvrhv().b[26][0]++, {
        startDate: query.start_date,
        endDate: query.end_date
      }) :
      /* istanbul ignore next */
      (cov_l56tvrhv().b[26][1]++, undefined));
      const metrics =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[70]++, await this.googleAdsService.getCampaignMetrics(user.id, query.customer_id, dateRange));
      /* istanbul ignore next */
      cov_l56tvrhv().s[71]++;
      return {
        success: true,
        data: metrics
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[72]++;
      this.logger.error('Failed to get Google Ads metrics', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[73]++;
      throw error;
    }
  }
  async getSearchTermsReport(user, query) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[12]++;
    cov_l56tvrhv().s[74]++;
    try {
      /* istanbul ignore next */
      cov_l56tvrhv().s[75]++;
      if (!query.customer_id) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[28][0]++;
        cov_l56tvrhv().s[76]++;
        throw new BadRequestException('customer_id is required');
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[28][1]++;
      }
      const dateRange =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[77]++,
      /* istanbul ignore next */
      (cov_l56tvrhv().b[30][0]++, query.start_date) &&
      /* istanbul ignore next */
      (cov_l56tvrhv().b[30][1]++, query.end_date) ?
      /* istanbul ignore next */
      (cov_l56tvrhv().b[29][0]++, {
        startDate: query.start_date,
        endDate: query.end_date
      }) :
      /* istanbul ignore next */
      (cov_l56tvrhv().b[29][1]++, undefined));
      const searchTerms =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[78]++, await this.googleAdsService.getSearchTermsReport(user.id, query.customer_id, dateRange));
      /* istanbul ignore next */
      cov_l56tvrhv().s[79]++;
      return {
        success: true,
        data: searchTerms
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[80]++;
      this.logger.error('Failed to get Google Ads search terms', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[81]++;
      throw error;
    }
  }
  async syncData(user, body) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[13]++;
    cov_l56tvrhv().s[82]++;
    try {
      /* istanbul ignore next */
      cov_l56tvrhv().s[83]++;
      await this.googleAdsService.syncUserData(user.id,
      /* istanbul ignore next */
      (cov_l56tvrhv().b[31][0]++, body.force) ||
      /* istanbul ignore next */
      (cov_l56tvrhv().b[31][1]++, false));
      /* istanbul ignore next */
      cov_l56tvrhv().s[84]++;
      this.logger.log(`Manual Google Ads sync completed for user ${user.id}`);
      /* istanbul ignore next */
      cov_l56tvrhv().s[85]++;
      return {
        success: true,
        data: {
          message: 'Data synchronization completed successfully',
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[86]++;
      this.logger.error('Failed to sync Google Ads data', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[87]++;
      throw error;
    }
  }
  async getIntegrationStatus(user) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[14]++;
    cov_l56tvrhv().s[88]++;
    try {
      // Get integration from database
      const integration =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[89]++, await this.googleAdsService['prisma'].integration.findUnique({
        where: {
          userId_platform: {
            userId: user.id,
            platform: 'GOOGLE_ADS'
          }
        }
      }));
      /* istanbul ignore next */
      cov_l56tvrhv().s[90]++;
      if (!integration) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[32][0]++;
        cov_l56tvrhv().s[91]++;
        return {
          success: true,
          data: {
            connected: false,
            status: 'not_connected'
          }
        };
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[32][1]++;
      }
      const isExpired =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[92]++,
      /* istanbul ignore next */
      (cov_l56tvrhv().b[33][0]++, integration.expiresAt) &&
      /* istanbul ignore next */
      (cov_l56tvrhv().b[33][1]++, integration.expiresAt <= new Date()));
      const status =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[93]++, !integration.isActive ?
      /* istanbul ignore next */
      (cov_l56tvrhv().b[34][0]++, 'inactive') :
      /* istanbul ignore next */
      (cov_l56tvrhv().b[34][1]++, isExpired ?
      /* istanbul ignore next */
      (cov_l56tvrhv().b[35][0]++, 'expired') :
      /* istanbul ignore next */
      (cov_l56tvrhv().b[35][1]++, 'active')));
      /* istanbul ignore next */
      cov_l56tvrhv().s[94]++;
      return {
        success: true,
        data: {
          connected:
          /* istanbul ignore next */
          (cov_l56tvrhv().b[36][0]++, integration.isActive) &&
          /* istanbul ignore next */
          (cov_l56tvrhv().b[36][1]++, !isExpired),
          status,
          connectedAt: integration.createdAt,
          lastSync: integration.lastSync,
          expiresAt: integration.expiresAt
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[95]++;
      this.logger.error('Failed to get Google Ads integration status', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[96]++;
      throw error;
    }
  }
  async disconnectIntegration(user) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[15]++;
    cov_l56tvrhv().s[97]++;
    try {
      /* istanbul ignore next */
      cov_l56tvrhv().s[98]++;
      await this.googleAdsService.disconnectIntegration(user.id);
      /* istanbul ignore next */
      cov_l56tvrhv().s[99]++;
      this.logger.log(`Google Ads integration disconnected for user ${user.id}`);
      /* istanbul ignore next */
      cov_l56tvrhv().s[100]++;
      return {
        success: true,
        data: {
          message: 'Google Ads integration disconnected successfully'
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[101]++;
      this.logger.error('Failed to disconnect Google Ads integration', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[102]++;
      throw error;
    }
  }
  async refreshToken(user) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[16]++;
    cov_l56tvrhv().s[103]++;
    try {
      // Get current integration
      const integration =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[104]++, await this.googleAdsService['prisma'].integration.findUnique({
        where: {
          userId_platform: {
            userId: user.id,
            platform: 'GOOGLE_ADS'
          }
        }
      }));
      /* istanbul ignore next */
      cov_l56tvrhv().s[105]++;
      if (
      /* istanbul ignore next */
      (cov_l56tvrhv().b[38][0]++, !integration) ||
      /* istanbul ignore next */
      (cov_l56tvrhv().b[38][1]++, !integration.refreshToken)) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[37][0]++;
        cov_l56tvrhv().s[106]++;
        throw new UnauthorizedException('Google Ads integration not found or no refresh token available');
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[37][1]++;
      }
      // Decrypt and use refresh token
      const refreshToken =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[107]++, this.googleAdsService['cryptoService'].decrypt(integration.refreshToken));
      const newTokens =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[108]++, await this.googleAdsService.refreshAccessToken(refreshToken));
      // Store new tokens
      /* istanbul ignore next */
      cov_l56tvrhv().s[109]++;
      await this.googleAdsService.storeTokens(user.id, newTokens);
      /* istanbul ignore next */
      cov_l56tvrhv().s[110]++;
      this.logger.log(`Google Ads token refreshed for user ${user.id}`);
      /* istanbul ignore next */
      cov_l56tvrhv().s[111]++;
      return {
        success: true,
        data: {
          message: 'Access token refreshed successfully',
          expiresAt: new Date(Date.now() + newTokens.expires_in * 1000)
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[112]++;
      this.logger.error('Failed to refresh Google Ads token', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[113]++;
      throw error;
    }
  }
  async getQualityScores(user, query) {
    /* istanbul ignore next */
    cov_l56tvrhv().f[17]++;
    cov_l56tvrhv().s[114]++;
    try {
      /* istanbul ignore next */
      cov_l56tvrhv().s[115]++;
      if (!query.customer_id) {
        /* istanbul ignore next */
        cov_l56tvrhv().b[39][0]++;
        cov_l56tvrhv().s[116]++;
        throw new BadRequestException('customer_id is required');
      } else
      /* istanbul ignore next */
      {
        cov_l56tvrhv().b[39][1]++;
      }
      const campaignIds =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[117]++, query.campaign_ids ?
      /* istanbul ignore next */
      (cov_l56tvrhv().b[40][0]++, query.campaign_ids.split(',').map(id => {
        /* istanbul ignore next */
        cov_l56tvrhv().f[18]++;
        cov_l56tvrhv().s[118]++;
        return id.trim();
      })) :
      /* istanbul ignore next */
      (cov_l56tvrhv().b[40][1]++, undefined));
      // Get keywords with quality scores
      const keywords =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[119]++, await this.googleAdsService.getKeywords(user.id, query.customer_id, campaignIds));
      // Filter and format quality score data
      const qualityScores =
      /* istanbul ignore next */
      (cov_l56tvrhv().s[120]++, keywords.filter(keyword => {
        /* istanbul ignore next */
        cov_l56tvrhv().f[19]++;
        cov_l56tvrhv().s[121]++;
        return keyword.quality_score !== undefined;
      }).map(keyword => {
        /* istanbul ignore next */
        cov_l56tvrhv().f[20]++;
        cov_l56tvrhv().s[122]++;
        return {
          keyword_id: keyword.id,
          keyword_text: keyword.text,
          quality_score: keyword.quality_score,
          first_page_cpc: keyword.first_page_cpc,
          top_of_page_cpc: keyword.top_of_page_cpc,
          campaign_id: keyword.campaign_id,
          ad_group_id: keyword.ad_group_id
        };
      }));
      /* istanbul ignore next */
      cov_l56tvrhv().s[123]++;
      return {
        success: true,
        data: qualityScores
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_l56tvrhv().s[124]++;
      this.logger.error('Failed to get Google Ads quality scores', error);
      /* istanbul ignore next */
      cov_l56tvrhv().s[125]++;
      throw error;
    }
  }
});
/* istanbul ignore next */
cov_l56tvrhv().s[126]++;
__decorate([Post('auth'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Initiate Google Ads OAuth flow'
}), ApiResponse({
  status: 200,
  description: 'OAuth URL generated successfully'
}), ApiResponse({
  status: 400,
  description: 'Invalid redirect URI'
}), __param(0, GetUser()), __param(1, Body()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "initiateAuth", null);
/* istanbul ignore next */
cov_l56tvrhv().s[127]++;
__decorate([Get('callback'), ApiOperation({
  summary: 'Handle Google Ads OAuth callback'
}), ApiResponse({
  status: 200,
  description: 'Authorization completed successfully'
}), ApiResponse({
  status: 400,
  description: 'Authorization failed'
}), __param(0, Query()), __param(1, Res()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, typeof (_b =
/* istanbul ignore next */
(cov_l56tvrhv().b[42][0]++, typeof Response !== "undefined") &&
/* istanbul ignore next */
(cov_l56tvrhv().b[42][1]++, Response)) === "function" ?
/* istanbul ignore next */
(cov_l56tvrhv().b[41][0]++, _b) :
/* istanbul ignore next */
(cov_l56tvrhv().b[41][1]++, Object)]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "handleCallback", null);
/* istanbul ignore next */
cov_l56tvrhv().s[128]++;
__decorate([Get('accounts'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get user\'s Google Ads customer accounts'
}), ApiResponse({
  status: 200,
  description: 'Customer accounts retrieved successfully'
}), ApiResponse({
  status: 401,
  description: 'Integration not found or inactive'
}), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "getCustomerAccounts", null);
/* istanbul ignore next */
cov_l56tvrhv().s[129]++;
__decorate([Get('campaigns'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get campaigns for a customer account'
}), ApiResponse({
  status: 200,
  description: 'Campaigns retrieved successfully'
}), ApiResponse({
  status: 400,
  description: 'Customer ID is required'
}), ApiQuery({
  name: 'customer_id',
  required: true,
  description: 'Google Ads Customer ID'
}), __param(0, GetUser()), __param(1, Query('customer_id')), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "getCampaigns", null);
/* istanbul ignore next */
cov_l56tvrhv().s[130]++;
__decorate([Get('keywords'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get keywords for campaigns'
}), ApiResponse({
  status: 200,
  description: 'Keywords retrieved successfully'
}), ApiResponse({
  status: 400,
  description: 'Customer ID is required'
}), ApiQuery({
  name: 'customer_id',
  required: true,
  description: 'Google Ads Customer ID'
}), ApiQuery({
  name: 'campaign_ids',
  required: false,
  description: 'Comma-separated campaign IDs (optional)'
}), __param(0, GetUser()), __param(1, Query()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "getKeywords", null);
/* istanbul ignore next */
cov_l56tvrhv().s[131]++;
__decorate([Get('metrics'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get campaign performance metrics'
}), ApiResponse({
  status: 200,
  description: 'Metrics retrieved successfully'
}), ApiResponse({
  status: 400,
  description: 'Customer ID is required'
}), ApiQuery({
  name: 'customer_id',
  required: true,
  description: 'Google Ads Customer ID'
}), ApiQuery({
  name: 'start_date',
  required: false,
  description: 'Start date (YYYY-MM-DD)'
}), ApiQuery({
  name: 'end_date',
  required: false,
  description: 'End date (YYYY-MM-DD)'
}), __param(0, GetUser()), __param(1, Query()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "getCampaignMetrics", null);
/* istanbul ignore next */
cov_l56tvrhv().s[132]++;
__decorate([Get('search-terms'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get search terms report'
}), ApiResponse({
  status: 200,
  description: 'Search terms retrieved successfully'
}), ApiResponse({
  status: 400,
  description: 'Customer ID is required'
}), ApiQuery({
  name: 'customer_id',
  required: true,
  description: 'Google Ads Customer ID'
}), ApiQuery({
  name: 'start_date',
  required: false,
  description: 'Start date (YYYY-MM-DD)'
}), ApiQuery({
  name: 'end_date',
  required: false,
  description: 'End date (YYYY-MM-DD)'
}), __param(0, GetUser()), __param(1, Query()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "getSearchTermsReport", null);
/* istanbul ignore next */
cov_l56tvrhv().s[133]++;
__decorate([Post('sync'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Trigger manual data synchronization'
}), ApiResponse({
  status: 200,
  description: 'Sync initiated successfully'
}), ApiResponse({
  status: 401,
  description: 'Integration not found or inactive'
}), __param(0, GetUser()), __param(1, Body()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "syncData", null);
/* istanbul ignore next */
cov_l56tvrhv().s[134]++;
__decorate([Get('status'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get Google Ads integration status'
}), ApiResponse({
  status: 200,
  description: 'Status retrieved successfully'
}), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "getIntegrationStatus", null);
/* istanbul ignore next */
cov_l56tvrhv().s[135]++;
__decorate([Post('disconnect'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Disconnect Google Ads integration'
}), ApiResponse({
  status: 200,
  description: 'Integration disconnected successfully'
}), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "disconnectIntegration", null);
/* istanbul ignore next */
cov_l56tvrhv().s[136]++;
__decorate([Post('refresh-token'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Refresh Google Ads access token'
}), ApiResponse({
  status: 200,
  description: 'Token refreshed successfully'
}), ApiResponse({
  status: 401,
  description: 'Integration not found or refresh failed'
}), __param(0, GetUser()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "refreshToken", null);
/* istanbul ignore next */
cov_l56tvrhv().s[137]++;
__decorate([Get('quality-scores'), UseGuards(JwtAuthGuard), ApiBearerAuth(), ApiOperation({
  summary: 'Get quality scores for keywords'
}), ApiResponse({
  status: 200,
  description: 'Quality scores retrieved successfully'
}), ApiResponse({
  status: 400,
  description: 'Customer ID is required'
}), ApiQuery({
  name: 'customer_id',
  required: true,
  description: 'Google Ads Customer ID'
}), ApiQuery({
  name: 'campaign_ids',
  required: false,
  description: 'Comma-separated campaign IDs (optional)'
}), __param(0, GetUser()), __param(1, Query()), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], GoogleAdsController.prototype, "getQualityScores", null);
/* istanbul ignore next */
cov_l56tvrhv().s[138]++;
GoogleAdsController = GoogleAdsController_1 = __decorate([ApiTags('Google Ads Integration'), Controller('api/integrations/google'), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_l56tvrhv().b[44][0]++, typeof GoogleAdsService !== "undefined") &&
/* istanbul ignore next */
(cov_l56tvrhv().b[44][1]++, GoogleAdsService)) === "function" ?
/* istanbul ignore next */
(cov_l56tvrhv().b[43][0]++, _a) :
/* istanbul ignore next */
(cov_l56tvrhv().b[43][1]++, Object)])], GoogleAdsController);
export { GoogleAdsController };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,