{"version":3,"names":["cov_l56tvrhv","actualCoverage","Controller","Get","Post","Body","Query","Res","UseGuards","Logger","BadRequestException","UnauthorizedException","Response","GoogleAdsService","JwtAuthGuard","GetUser","ApiTags","ApiOperation","ApiResponse","ApiBearerAuth","ApiQuery","GoogleAdsController","s","GoogleAdsController_1","googleAdsService","logger","name","constructor","f","initiateAuth","user","body","redirect_uri","b","URL","authUrl","generateAuthUrl","id","log","success","data","message","error","handleCallback","query","res","error_description","redirect","process","env","FRONTEND_URL","encodeURIComponent","code","state","stateData","JSON","parse","decrypt","userId","redirectUri","tokens","exchangeCodeForToken","storeTokens","getCustomerAccounts","accounts","getCampaigns","customerId","campaigns","getKeywords","customer_id","campaignIds","campaign_ids","split","map","trim","undefined","keywords","getCampaignMetrics","dateRange","start_date","end_date","startDate","endDate","metrics","getSearchTermsReport","searchTerms","syncData","syncUserData","force","timestamp","Date","toISOString","getIntegrationStatus","integration","findUnique","where","userId_platform","platform","connected","status","isExpired","expiresAt","isActive","connectedAt","createdAt","lastSync","disconnectIntegration","refreshToken","newTokens","refreshAccessToken","now","expires_in","getQualityScores","qualityScores","filter","keyword","quality_score","keyword_id","keyword_text","text","first_page_cpc","top_of_page_cpc","campaign_id","ad_group_id","__decorate","summary","description","__param","_b","Object","required","_a"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\google-ads.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Query,\n  Req,\n  Res,\n  HttpStatus,\n  UseGuards,\n  Logger,\n  BadRequestException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { GoogleAdsService } from '../services/google-ads.service';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { GetUser } from '../decorators/get-user.decorator';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiQuery } from '@nestjs/swagger';\n\ninterface AuthUser {\n  id: string;\n  email: string;\n}\n\ninterface AuthQueryDto {\n  redirect_uri: string;\n}\n\ninterface CallbackQueryDto {\n  code?: string;\n  state?: string;\n  error?: string;\n  error_description?: string;\n}\n\ninterface SyncRequestDto {\n  force?: boolean;\n  customer_id?: string;\n}\n\ninterface KeywordQueryDto {\n  customer_id: string;\n  campaign_ids?: string;\n}\n\ninterface MetricsQueryDto {\n  customer_id: string;\n  start_date?: string;\n  end_date?: string;\n}\n\n@ApiTags('Google Ads Integration')\n@Controller('api/integrations/google')\nexport class GoogleAdsController {\n  private readonly logger = new Logger(GoogleAdsController.name);\n\n  constructor(private readonly googleAdsService: GoogleAdsService) {}\n\n  @Post('auth')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Initiate Google Ads OAuth flow' })\n  @ApiResponse({ status: 200, description: 'OAuth URL generated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid redirect URI' })\n  async initiateAuth(\n    @GetUser() user: AuthUser,\n    @Body() body: AuthQueryDto,\n  ) {\n    try {\n      if (!body.redirect_uri) {\n        throw new BadRequestException('redirect_uri is required');\n      }\n\n      // Validate redirect URI format\n      try {\n        new URL(body.redirect_uri);\n      } catch {\n        throw new BadRequestException('Invalid redirect_uri format');\n      }\n\n      const authUrl = this.googleAdsService.generateAuthUrl(user.id, body.redirect_uri);\n      \n      this.logger.log(`Generated Google Ads OAuth URL for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          authUrl,\n          message: 'Redirect user to this URL to complete authorization',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to initiate Google Ads OAuth', error);\n      throw error;\n    }\n  }\n\n  @Get('callback')\n  @ApiOperation({ summary: 'Handle Google Ads OAuth callback' })\n  @ApiResponse({ status: 200, description: 'Authorization completed successfully' })\n  @ApiResponse({ status: 400, description: 'Authorization failed' })\n  async handleCallback(\n    @Query() query: CallbackQueryDto,\n    @Res() res: Response,\n  ) {\n    try {\n      if (query.error) {\n        this.logger.error('OAuth error:', query.error_description || query.error);\n        return res.redirect(`${process.env.FRONTEND_URL}/integrations/google?error=${encodeURIComponent(query.error_description || query.error)}`);\n      }\n\n      if (!query.code || !query.state) {\n        throw new BadRequestException('Missing authorization code or state');\n      }\n\n      // Decrypt state to get user info\n      const stateData = JSON.parse(\n        this.googleAdsService['cryptoService'].decrypt(query.state)\n      );\n      \n      if (!stateData.userId || !stateData.redirectUri) {\n        throw new BadRequestException('Invalid state parameter');\n      }\n\n      // Exchange code for tokens\n      const tokens = await this.googleAdsService.exchangeCodeForToken(\n        query.code,\n        stateData.redirectUri\n      );\n\n      // Store tokens\n      await this.googleAdsService.storeTokens(stateData.userId, tokens);\n\n      this.logger.log(`Google Ads OAuth completed for user ${stateData.userId}`);\n\n      // Redirect to success page\n      return res.redirect(`${process.env.FRONTEND_URL}/integrations/google?success=true`);\n    } catch (error) {\n      this.logger.error('Failed to handle Google Ads OAuth callback', error);\n      return res.redirect(`${process.env.FRONTEND_URL}/integrations/google?error=${encodeURIComponent('Authorization failed')}`);\n    }\n  }\n\n  @Get('accounts')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get user\\'s Google Ads customer accounts' })\n  @ApiResponse({ status: 200, description: 'Customer accounts retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Integration not found or inactive' })\n  async getCustomerAccounts(@GetUser() user: AuthUser) {\n    try {\n      const accounts = await this.googleAdsService.getCustomerAccounts(user.id);\n      \n      return {\n        success: true,\n        data: accounts,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads customer accounts', error);\n      throw error;\n    }\n  }\n\n  @Get('campaigns')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get campaigns for a customer account' })\n  @ApiResponse({ status: 200, description: 'Campaigns retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  async getCampaigns(\n    @GetUser() user: AuthUser,\n    @Query('customer_id') customerId: string,\n  ) {\n    try {\n      if (!customerId) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const campaigns = await this.googleAdsService.getCampaigns(user.id, customerId);\n      \n      return {\n        success: true,\n        data: campaigns,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads campaigns', error);\n      throw error;\n    }\n  }\n\n  @Get('keywords')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get keywords for campaigns' })\n  @ApiResponse({ status: 200, description: 'Keywords retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  @ApiQuery({ name: 'campaign_ids', required: false, description: 'Comma-separated campaign IDs (optional)' })\n  async getKeywords(\n    @GetUser() user: AuthUser,\n    @Query() query: KeywordQueryDto,\n  ) {\n    try {\n      if (!query.customer_id) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const campaignIds = query.campaign_ids ? \n        query.campaign_ids.split(',').map(id => id.trim()) : undefined;\n\n      const keywords = await this.googleAdsService.getKeywords(\n        user.id,\n        query.customer_id,\n        campaignIds\n      );\n      \n      return {\n        success: true,\n        data: keywords,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads keywords', error);\n      throw error;\n    }\n  }\n\n  @Get('metrics')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get campaign performance metrics' })\n  @ApiResponse({ status: 200, description: 'Metrics retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  @ApiQuery({ name: 'start_date', required: false, description: 'Start date (YYYY-MM-DD)' })\n  @ApiQuery({ name: 'end_date', required: false, description: 'End date (YYYY-MM-DD)' })\n  async getCampaignMetrics(\n    @GetUser() user: AuthUser,\n    @Query() query: MetricsQueryDto,\n  ) {\n    try {\n      if (!query.customer_id) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const dateRange = query.start_date && query.end_date ? {\n        startDate: query.start_date,\n        endDate: query.end_date,\n      } : undefined;\n\n      const metrics = await this.googleAdsService.getCampaignMetrics(\n        user.id,\n        query.customer_id,\n        dateRange\n      );\n      \n      return {\n        success: true,\n        data: metrics,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads metrics', error);\n      throw error;\n    }\n  }\n\n  @Get('search-terms')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get search terms report' })\n  @ApiResponse({ status: 200, description: 'Search terms retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  @ApiQuery({ name: 'start_date', required: false, description: 'Start date (YYYY-MM-DD)' })\n  @ApiQuery({ name: 'end_date', required: false, description: 'End date (YYYY-MM-DD)' })\n  async getSearchTermsReport(\n    @GetUser() user: AuthUser,\n    @Query() query: MetricsQueryDto,\n  ) {\n    try {\n      if (!query.customer_id) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const dateRange = query.start_date && query.end_date ? {\n        startDate: query.start_date,\n        endDate: query.end_date,\n      } : undefined;\n\n      const searchTerms = await this.googleAdsService.getSearchTermsReport(\n        user.id,\n        query.customer_id,\n        dateRange\n      );\n      \n      return {\n        success: true,\n        data: searchTerms,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads search terms', error);\n      throw error;\n    }\n  }\n\n  @Post('sync')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Trigger manual data synchronization' })\n  @ApiResponse({ status: 200, description: 'Sync initiated successfully' })\n  @ApiResponse({ status: 401, description: 'Integration not found or inactive' })\n  async syncData(\n    @GetUser() user: AuthUser,\n    @Body() body: SyncRequestDto,\n  ) {\n    try {\n      await this.googleAdsService.syncUserData(user.id, body.force || false);\n      \n      this.logger.log(`Manual Google Ads sync completed for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          message: 'Data synchronization completed successfully',\n          timestamp: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to sync Google Ads data', error);\n      throw error;\n    }\n  }\n\n  @Get('status')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get Google Ads integration status' })\n  @ApiResponse({ status: 200, description: 'Status retrieved successfully' })\n  async getIntegrationStatus(@GetUser() user: AuthUser) {\n    try {\n      // Get integration from database\n      const integration = await this.googleAdsService['prisma'].integration.findUnique({\n        where: {\n          userId_platform: {\n            userId: user.id,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n      });\n\n      if (!integration) {\n        return {\n          success: true,\n          data: {\n            connected: false,\n            status: 'not_connected',\n          },\n        };\n      }\n\n      const isExpired = integration.expiresAt && integration.expiresAt <= new Date();\n      const status = !integration.isActive ? 'inactive' : \n                    isExpired ? 'expired' : 'active';\n\n      return {\n        success: true,\n        data: {\n          connected: integration.isActive && !isExpired,\n          status,\n          connectedAt: integration.createdAt,\n          lastSync: integration.lastSync,\n          expiresAt: integration.expiresAt,\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads integration status', error);\n      throw error;\n    }\n  }\n\n  @Post('disconnect')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Disconnect Google Ads integration' })\n  @ApiResponse({ status: 200, description: 'Integration disconnected successfully' })\n  async disconnectIntegration(@GetUser() user: AuthUser) {\n    try {\n      await this.googleAdsService.disconnectIntegration(user.id);\n      \n      this.logger.log(`Google Ads integration disconnected for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          message: 'Google Ads integration disconnected successfully',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to disconnect Google Ads integration', error);\n      throw error;\n    }\n  }\n\n  @Post('refresh-token')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Refresh Google Ads access token' })\n  @ApiResponse({ status: 200, description: 'Token refreshed successfully' })\n  @ApiResponse({ status: 401, description: 'Integration not found or refresh failed' })\n  async refreshToken(@GetUser() user: AuthUser) {\n    try {\n      // Get current integration\n      const integration = await this.googleAdsService['prisma'].integration.findUnique({\n        where: {\n          userId_platform: {\n            userId: user.id,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n      });\n\n      if (!integration || !integration.refreshToken) {\n        throw new UnauthorizedException('Google Ads integration not found or no refresh token available');\n      }\n\n      // Decrypt and use refresh token\n      const refreshToken = this.googleAdsService['cryptoService'].decrypt(integration.refreshToken);\n      const newTokens = await this.googleAdsService.refreshAccessToken(refreshToken);\n      \n      // Store new tokens\n      await this.googleAdsService.storeTokens(user.id, newTokens);\n      \n      this.logger.log(`Google Ads token refreshed for user ${user.id}`);\n      \n      return {\n        success: true,\n        data: {\n          message: 'Access token refreshed successfully',\n          expiresAt: new Date(Date.now() + newTokens.expires_in * 1000),\n        },\n      };\n    } catch (error) {\n      this.logger.error('Failed to refresh Google Ads token', error);\n      throw error;\n    }\n  }\n\n  @Get('quality-scores')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get quality scores for keywords' })\n  @ApiResponse({ status: 200, description: 'Quality scores retrieved successfully' })\n  @ApiResponse({ status: 400, description: 'Customer ID is required' })\n  @ApiQuery({ name: 'customer_id', required: true, description: 'Google Ads Customer ID' })\n  @ApiQuery({ name: 'campaign_ids', required: false, description: 'Comma-separated campaign IDs (optional)' })\n  async getQualityScores(\n    @GetUser() user: AuthUser,\n    @Query() query: KeywordQueryDto,\n  ) {\n    try {\n      if (!query.customer_id) {\n        throw new BadRequestException('customer_id is required');\n      }\n\n      const campaignIds = query.campaign_ids ? \n        query.campaign_ids.split(',').map(id => id.trim()) : undefined;\n\n      // Get keywords with quality scores\n      const keywords = await this.googleAdsService.getKeywords(\n        user.id,\n        query.customer_id,\n        campaignIds\n      );\n      \n      // Filter and format quality score data\n      const qualityScores = keywords\n        .filter(keyword => keyword.quality_score !== undefined)\n        .map(keyword => ({\n          keyword_id: keyword.id,\n          keyword_text: keyword.text,\n          quality_score: keyword.quality_score,\n          first_page_cpc: keyword.first_page_cpc,\n          top_of_page_cpc: keyword.top_of_page_cpc,\n          campaign_id: keyword.campaign_id,\n          ad_group_id: keyword.ad_group_id,\n        }));\n      \n      return {\n        success: true,\n        data: qualityScores,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get Google Ads quality scores', error);\n      throw error;\n    }\n  }\n}"],"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","ignoreList":[]}