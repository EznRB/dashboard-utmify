cb839c3ad5c98696d7fcc3964adfdfd9
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock Twilio
globals_1.jest.mock('twilio', () => ({
    default: globals_1.jest.fn(() => ({
        messages: {
            create: globals_1.jest.fn()
        }
    }))
}));
const whatsapp_service_1 = require("../services/whatsapp.service");
const twilio_1 = __importDefault(require("twilio"));
// Mock Bull Queue
const mockQueue = {
    add: globals_1.jest.fn(),
    process: globals_1.jest.fn(),
    on: globals_1.jest.fn()
};
(0, globals_1.describe)('WhatsAppService', () => {
    let whatsappService;
    let prismaService;
    let cryptoService;
    let mockTwilioClient;
    (0, globals_1.beforeEach)(() => {
        // Mock PrismaService
        prismaService = {
            whatsAppConfig: {
                findUnique: globals_1.jest.fn(),
                create: globals_1.jest.fn(),
                update: globals_1.jest.fn()
            },
            whatsAppMessage: {
                create: globals_1.jest.fn(),
                findMany: globals_1.jest.fn(),
                count: globals_1.jest.fn(),
                update: globals_1.jest.fn()
            },
            whatsAppMetrics: {
                findFirst: globals_1.jest.fn(),
                create: globals_1.jest.fn(),
                update: globals_1.jest.fn(),
                findMany: globals_1.jest.fn()
            },
            user: {
                findUnique: globals_1.jest.fn()
            }
        };
        // Mock CryptoService
        cryptoService = {
            encrypt: globals_1.jest.fn().mockReturnValue('encrypted_token'),
            decrypt: globals_1.jest.fn().mockReturnValue('decrypted_token')
        };
        // Mock Twilio client
        mockTwilioClient = {
            messages: {
                create: globals_1.jest.fn().mockResolvedValue({
                    sid: 'test_message_sid',
                    status: 'queued'
                })
            }
        };
        globals_1.jest.mocked(twilio_1.default).mockReturnValue(mockTwilioClient);
        whatsappService = new whatsapp_service_1.WhatsAppService(prismaService, mockQueue, cryptoService);
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('getConfig', () => {
        (0, globals_1.it)('should return WhatsApp config for user', async () => {
            const mockConfig = {
                id: 'config-1',
                userId: 'user-1',
                twilioAccountSid: 'test_sid',
                twilioAuthToken: 'encrypted_token',
                twilioPhoneNumber: '+1234567890',
                isActive: true,
                dailyLimit: 1000,
                messagesUsedToday: 50,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(mockConfig);
            cryptoService.decrypt = globals_1.jest.fn().mockReturnValue('decrypted_token');
            const result = await whatsappService.getConfig('user-1');
            (0, globals_1.expect)(result).toEqual({
                ...mockConfig,
                twilioAuthToken: 'decrypted_token'
            });
            (0, globals_1.expect)(prismaService.whatsAppConfig.findUnique).toHaveBeenCalledWith({
                where: { userId: 'user-1' }
            });
        });
        (0, globals_1.it)('should return null if config not found', async () => {
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(null);
            const result = await whatsappService.getConfig('user-1');
            (0, globals_1.expect)(result).toBeNull();
        });
    });
    (0, globals_1.describe)('updateConfig', () => {
        (0, globals_1.it)('should create new config if not exists', async () => {
            const configData = {
                twilioAccountSid: 'new_sid',
                twilioAuthToken: 'new_token',
                twilioPhoneNumber: '+1234567890',
                dailyLimit: 1000
            };
            const mockCreatedConfig = {
                id: 'config-1',
                userId: 'user-1',
                ...configData,
                twilioAuthToken: 'encrypted_token',
                isActive: true,
                messagesUsedToday: 0,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(null);
            prismaService.whatsAppConfig.create = globals_1.jest.fn().mockResolvedValue(mockCreatedConfig);
            cryptoService.encrypt = globals_1.jest.fn().mockReturnValue('encrypted_token');
            cryptoService.decrypt = globals_1.jest.fn().mockReturnValue('new_token');
            const result = await whatsappService.updateConfig('user-1', configData);
            (0, globals_1.expect)(cryptoService.encrypt).toHaveBeenCalledWith('new_token');
            (0, globals_1.expect)(prismaService.whatsAppConfig.create).toHaveBeenCalledWith({
                data: {
                    userId: 'user-1',
                    twilioAccountSid: 'new_sid',
                    twilioAuthToken: 'encrypted_token',
                    twilioPhoneNumber: '+1234567890',
                    dailyLimit: 1000,
                    isActive: true
                }
            });
            (0, globals_1.expect)(result.twilioAuthToken).toBe('new_token');
        });
        (0, globals_1.it)('should update existing config', async () => {
            const existingConfig = {
                id: 'config-1',
                userId: 'user-1',
                twilioAccountSid: 'old_sid',
                twilioAuthToken: 'old_encrypted_token',
                twilioPhoneNumber: '+0987654321',
                isActive: true,
                dailyLimit: 500,
                messagesUsedToday: 10,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            const updateData = {
                twilioAccountSid: 'new_sid',
                dailyLimit: 1000
            };
            const updatedConfig = {
                ...existingConfig,
                ...updateData,
                updatedAt: new Date()
            };
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(existingConfig);
            prismaService.whatsAppConfig.update = globals_1.jest.fn().mockResolvedValue(updatedConfig);
            cryptoService.decrypt = globals_1.jest.fn().mockReturnValue('decrypted_token');
            const result = await whatsappService.updateConfig('user-1', updateData);
            (0, globals_1.expect)(prismaService.whatsAppConfig.update).toHaveBeenCalledWith({
                where: { userId: 'user-1' },
                data: updateData
            });
            (0, globals_1.expect)(result).toEqual({
                ...updatedConfig,
                twilioAuthToken: 'decrypted_token'
            });
        });
    });
    (0, globals_1.describe)('sendMessage', () => {
        const mockConfig = {
            id: 'config-1',
            userId: 'user-1',
            twilioAccountSid: 'test_sid',
            twilioAuthToken: 'encrypted_token',
            twilioPhoneNumber: '+1234567890',
            isActive: true,
            dailyLimit: 1000,
            messagesUsedToday: 50,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        (0, globals_1.beforeEach)(() => {
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(mockConfig);
            cryptoService.decrypt = globals_1.jest.fn().mockReturnValue('decrypted_token');
        });
        (0, globals_1.it)('should send message successfully', async () => {
            const messageData = {
                to: '+1987654321',
                message: 'Hello, World!'
            };
            const mockCreatedMessage = {
                id: 'msg-1',
                userId: 'user-1',
                to: messageData.to,
                from: mockConfig.twilioPhoneNumber,
                body: messageData.message,
                status: 'queued',
                messageType: 'text',
                twilioSid: 'test_message_sid',
                createdAt: new Date(),
                updatedAt: new Date()
            };
            prismaService.whatsAppMessage.create = globals_1.jest.fn().mockResolvedValue(mockCreatedMessage);
            mockQueue.add = globals_1.jest.fn().mockResolvedValue({ id: 'job-1' });
            const result = await whatsappService.sendMessage('user-1', messageData);
            (0, globals_1.expect)(mockQueue.add).toHaveBeenCalledWith('send-message', {
                userId: 'user-1',
                to: messageData.to,
                message: messageData.message
            }, {
                delay: 0,
                attempts: 3,
                backoff: {
                    type: 'exponential',
                    delay: 2000
                }
            });
            (0, globals_1.expect)(result).toEqual(mockCreatedMessage);
        });
        (0, globals_1.it)('should throw error if config not found', async () => {
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(null);
            await (0, globals_1.expect)(whatsappService.sendMessage('user-1', {
                to: '+1987654321',
                message: 'Hello'
            })).rejects.toThrow('WhatsApp nÃ£o configurado');
        });
        (0, globals_1.it)('should throw error if config is inactive', async () => {
            const inactiveConfig = { ...mockConfig, isActive: false };
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(inactiveConfig);
            await (0, globals_1.expect)(whatsappService.sendMessage('user-1', {
                to: '+1987654321',
                message: 'Hello'
            })).rejects.toThrow('WhatsApp estÃ¡ desativado');
        });
        (0, globals_1.it)('should throw error if daily limit exceeded', async () => {
            const limitExceededConfig = { ...mockConfig, messagesUsedToday: 1000 };
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(limitExceededConfig);
            await (0, globals_1.expect)(whatsappService.sendMessage('user-1', {
                to: '+1987654321',
                message: 'Hello'
            })).rejects.toThrow('Limite diÃ¡rio de mensagens atingido');
        });
    });
    (0, globals_1.describe)('getMessages', () => {
        (0, globals_1.it)('should return paginated messages', async () => {
            const mockMessages = [
                {
                    id: 'msg-1',
                    userId: 'user-1',
                    to: '+1987654321',
                    from: '+1234567890',
                    body: 'Hello',
                    status: 'delivered',
                    messageType: 'text',
                    createdAt: new Date(),
                    updatedAt: new Date()
                },
                {
                    id: 'msg-2',
                    userId: 'user-1',
                    to: '+1987654321',
                    from: '+1234567890',
                    body: 'World',
                    status: 'sent',
                    messageType: 'text',
                    createdAt: new Date(),
                    updatedAt: new Date()
                }
            ];
            prismaService.whatsAppMessage.findMany = globals_1.jest.fn().mockResolvedValue(mockMessages);
            prismaService.whatsAppMessage.count = globals_1.jest.fn().mockResolvedValue(2);
            const result = await whatsappService.getMessages('user-1', 1, 10);
            (0, globals_1.expect)(result).toEqual({
                messages: mockMessages,
                total: 2,
                page: 1,
                limit: 10,
                totalPages: 1
            });
            (0, globals_1.expect)(prismaService.whatsAppMessage.findMany).toHaveBeenCalledWith({
                where: { userId: 'user-1' },
                orderBy: { createdAt: 'desc' },
                skip: 0,
                take: 10
            });
        });
    });
    (0, globals_1.describe)('getDashboardStats', () => {
        (0, globals_1.it)('should return dashboard statistics', async () => {
            const mockConfig = {
                dailyLimit: 1000,
                messagesUsedToday: 150
            };
            const mockStats = {
                totalMessages: 500,
                messagesThisMonth: 300,
                deliveredMessages: 450,
                failedMessages: 50
            };
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(mockConfig);
            // Mock message counts
            prismaService.whatsAppMessage.count
                .mockResolvedValueOnce(500) // total
                .mockResolvedValueOnce(300) // this month
                .mockResolvedValueOnce(450) // delivered
                .mockResolvedValueOnce(50); // failed
            const result = await whatsappService.getDashboardStats('user-1');
            (0, globals_1.expect)(result).toEqual({
                totalMessages: 500,
                messagesThisMonth: 300,
                deliveryRate: 90, // 450/500 * 100
                activeConversations: 0,
                activeAutomations: 0,
                dailyUsage: 150,
                dailyLimit: 1000
            });
        });
    });
    (0, globals_1.describe)('testConnection', () => {
        (0, globals_1.it)('should test connection successfully', async () => {
            const mockConfig = {
                twilioAccountSid: 'test_sid',
                twilioAuthToken: 'encrypted_token',
                twilioPhoneNumber: '+1234567890'
            };
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(mockConfig);
            cryptoService.decrypt = globals_1.jest.fn().mockReturnValue('decrypted_token');
            mockTwilioClient.messages.create.mockResolvedValue({
                sid: 'test_sid',
                status: 'queued'
            });
            const result = await whatsappService.testConnection('user-1');
            (0, globals_1.expect)(result).toEqual({
                success: true,
                message: 'ConexÃ£o testada com sucesso'
            });
        });
        (0, globals_1.it)('should handle connection error', async () => {
            const mockConfig = {
                twilioAccountSid: 'test_sid',
                twilioAuthToken: 'encrypted_token',
                twilioPhoneNumber: '+1234567890'
            };
            prismaService.whatsAppConfig.findUnique = globals_1.jest.fn().mockResolvedValue(mockConfig);
            cryptoService.decrypt = globals_1.jest.fn().mockReturnValue('decrypted_token');
            mockTwilioClient.messages.create.mockRejectedValue(new Error('Invalid credentials'));
            const result = await whatsappService.testConnection('user-1');
            (0, globals_1.expect)(result).toEqual({
                success: false,
                message: 'Erro na conexÃ£o: Invalid credentials'
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,