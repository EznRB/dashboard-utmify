{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\whatsapp.service.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\whatsapp.service.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals'\nimport { WhatsAppService } from '../services/whatsapp.service'\nimport { PrismaService } from '../database/prisma.service'\nimport { CryptoService } from '../services/crypto.service'\nimport twilio from 'twilio'\n\n// Mock Twilio\njest.mock('twilio', () => ({\n  default: jest.fn(() => ({\n    messages: {\n      create: jest.fn()\n    }\n  }))\n}))\n\n// Mock Bull Queue\nconst mockQueue = {\n  add: jest.fn(),\n  process: jest.fn(),\n  on: jest.fn()\n}\n\ndescribe('WhatsAppService', () => {\n  let whatsappService: WhatsAppService\n  let prismaService: PrismaService\n  let cryptoService: CryptoService\n  let mockTwilioClient: any\n\n  beforeEach(() => {\n    // Mock PrismaService\n    prismaService = {\n      whatsAppConfig: {\n        findUnique: jest.fn(),\n        create: jest.fn(),\n        update: jest.fn()\n      },\n      whatsAppMessage: {\n        create: jest.fn(),\n        findMany: jest.fn(),\n        count: jest.fn(),\n        update: jest.fn()\n      },\n      whatsAppMetrics: {\n        findFirst: jest.fn(),\n        create: jest.fn(),\n        update: jest.fn(),\n        findMany: jest.fn()\n      },\n      user: {\n        findUnique: jest.fn()\n      }\n    } as any\n\n    // Mock CryptoService\n    cryptoService = {\n      encrypt: jest.fn().mockReturnValue('encrypted_token'),\n      decrypt: jest.fn().mockReturnValue('decrypted_token')\n    } as any\n\n    // Mock Twilio client\n    mockTwilioClient = {\n      messages: {\n        create: jest.fn().mockResolvedValue({\n          sid: 'test_message_sid',\n          status: 'queued'\n        })\n      }\n    }\n\n    jest.mocked(twilio).mockReturnValue(mockTwilioClient)\n\n    whatsappService = new WhatsAppService(\n      prismaService,\n      mockQueue as any,\n      cryptoService\n    )\n  })\n\n  afterEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('getConfig', () => {\n    it('should return WhatsApp config for user', async () => {\n      const mockConfig = {\n        id: 'config-1',\n        userId: 'user-1',\n        twilioAccountSid: 'test_sid',\n        twilioAuthToken: 'encrypted_token',\n        twilioPhoneNumber: '+1234567890',\n        isActive: true,\n        dailyLimit: 1000,\n        messagesUsedToday: 50,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(mockConfig)\n      cryptoService.decrypt = jest.fn().mockReturnValue('decrypted_token')\n\n      const result = await whatsappService.getConfig('user-1')\n\n      expect(result).toEqual({\n        ...mockConfig,\n        twilioAuthToken: 'decrypted_token'\n      })\n      expect(prismaService.whatsAppConfig.findUnique).toHaveBeenCalledWith({\n        where: { userId: 'user-1' }\n      })\n    })\n\n    it('should return null if config not found', async () => {\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(null)\n\n      const result = await whatsappService.getConfig('user-1')\n\n      expect(result).toBeNull()\n    })\n  })\n\n  describe('updateConfig', () => {\n    it('should create new config if not exists', async () => {\n      const configData = {\n        twilioAccountSid: 'new_sid',\n        twilioAuthToken: 'new_token',\n        twilioPhoneNumber: '+1234567890',\n        dailyLimit: 1000\n      }\n\n      const mockCreatedConfig = {\n        id: 'config-1',\n        userId: 'user-1',\n        ...configData,\n        twilioAuthToken: 'encrypted_token',\n        isActive: true,\n        messagesUsedToday: 0,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(null)\n      prismaService.whatsAppConfig.create = jest.fn().mockResolvedValue(mockCreatedConfig)\n      cryptoService.encrypt = jest.fn().mockReturnValue('encrypted_token')\n      cryptoService.decrypt = jest.fn().mockReturnValue('new_token')\n\n      const result = await whatsappService.updateConfig('user-1', configData)\n\n      expect(cryptoService.encrypt).toHaveBeenCalledWith('new_token')\n      expect(prismaService.whatsAppConfig.create).toHaveBeenCalledWith({\n        data: {\n          userId: 'user-1',\n          twilioAccountSid: 'new_sid',\n          twilioAuthToken: 'encrypted_token',\n          twilioPhoneNumber: '+1234567890',\n          dailyLimit: 1000,\n          isActive: true\n        }\n      })\n      expect(result.twilioAuthToken).toBe('new_token')\n    })\n\n    it('should update existing config', async () => {\n      const existingConfig = {\n        id: 'config-1',\n        userId: 'user-1',\n        twilioAccountSid: 'old_sid',\n        twilioAuthToken: 'old_encrypted_token',\n        twilioPhoneNumber: '+0987654321',\n        isActive: true,\n        dailyLimit: 500,\n        messagesUsedToday: 10,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n\n      const updateData = {\n        twilioAccountSid: 'new_sid',\n        dailyLimit: 1000\n      }\n\n      const updatedConfig = {\n        ...existingConfig,\n        ...updateData,\n        updatedAt: new Date()\n      }\n\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(existingConfig)\n      prismaService.whatsAppConfig.update = jest.fn().mockResolvedValue(updatedConfig)\n      cryptoService.decrypt = jest.fn().mockReturnValue('decrypted_token')\n\n      const result = await whatsappService.updateConfig('user-1', updateData)\n\n      expect(prismaService.whatsAppConfig.update).toHaveBeenCalledWith({\n        where: { userId: 'user-1' },\n        data: updateData\n      })\n      expect(result).toEqual({\n        ...updatedConfig,\n        twilioAuthToken: 'decrypted_token'\n      })\n    })\n  })\n\n  describe('sendMessage', () => {\n    const mockConfig = {\n      id: 'config-1',\n      userId: 'user-1',\n      twilioAccountSid: 'test_sid',\n      twilioAuthToken: 'encrypted_token',\n      twilioPhoneNumber: '+1234567890',\n      isActive: true,\n      dailyLimit: 1000,\n      messagesUsedToday: 50,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n\n    beforeEach(() => {\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(mockConfig)\n      cryptoService.decrypt = jest.fn().mockReturnValue('decrypted_token')\n    })\n\n    it('should send message successfully', async () => {\n      const messageData = {\n        to: '+1987654321',\n        message: 'Hello, World!'\n      }\n\n      const mockCreatedMessage = {\n        id: 'msg-1',\n        userId: 'user-1',\n        to: messageData.to,\n        from: mockConfig.twilioPhoneNumber,\n        body: messageData.message,\n        status: 'queued',\n        messageType: 'text',\n        twilioSid: 'test_message_sid',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n\n      prismaService.whatsAppMessage.create = jest.fn().mockResolvedValue(mockCreatedMessage)\n      mockQueue.add = jest.fn().mockResolvedValue({ id: 'job-1' })\n\n      const result = await whatsappService.sendMessage('user-1', messageData)\n\n      expect(mockQueue.add).toHaveBeenCalledWith(\n        'send-message',\n        {\n          userId: 'user-1',\n          to: messageData.to,\n          message: messageData.message\n        },\n        {\n          delay: 0,\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000\n          }\n        }\n      )\n      expect(result).toEqual(mockCreatedMessage)\n    })\n\n    it('should throw error if config not found', async () => {\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(null)\n\n      await expect(\n        whatsappService.sendMessage('user-1', {\n          to: '+1987654321',\n          message: 'Hello'\n        })\n      ).rejects.toThrow('WhatsApp não configurado')\n    })\n\n    it('should throw error if config is inactive', async () => {\n      const inactiveConfig = { ...mockConfig, isActive: false }\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(inactiveConfig)\n\n      await expect(\n        whatsappService.sendMessage('user-1', {\n          to: '+1987654321',\n          message: 'Hello'\n        })\n      ).rejects.toThrow('WhatsApp está desativado')\n    })\n\n    it('should throw error if daily limit exceeded', async () => {\n      const limitExceededConfig = { ...mockConfig, messagesUsedToday: 1000 }\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(limitExceededConfig)\n\n      await expect(\n        whatsappService.sendMessage('user-1', {\n          to: '+1987654321',\n          message: 'Hello'\n        })\n      ).rejects.toThrow('Limite diário de mensagens atingido')\n    })\n  })\n\n  describe('getMessages', () => {\n    it('should return paginated messages', async () => {\n      const mockMessages = [\n        {\n          id: 'msg-1',\n          userId: 'user-1',\n          to: '+1987654321',\n          from: '+1234567890',\n          body: 'Hello',\n          status: 'delivered',\n          messageType: 'text',\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: 'msg-2',\n          userId: 'user-1',\n          to: '+1987654321',\n          from: '+1234567890',\n          body: 'World',\n          status: 'sent',\n          messageType: 'text',\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ]\n\n      prismaService.whatsAppMessage.findMany = jest.fn().mockResolvedValue(mockMessages)\n      prismaService.whatsAppMessage.count = jest.fn().mockResolvedValue(2)\n\n      const result = await whatsappService.getMessages('user-1', 1, 10)\n\n      expect(result).toEqual({\n        messages: mockMessages,\n        total: 2,\n        page: 1,\n        limit: 10,\n        totalPages: 1\n      })\n      expect(prismaService.whatsAppMessage.findMany).toHaveBeenCalledWith({\n        where: { userId: 'user-1' },\n        orderBy: { createdAt: 'desc' },\n        skip: 0,\n        take: 10\n      })\n    })\n  })\n\n  describe('getDashboardStats', () => {\n    it('should return dashboard statistics', async () => {\n      const mockConfig = {\n        dailyLimit: 1000,\n        messagesUsedToday: 150\n      }\n\n      const mockStats = {\n        totalMessages: 500,\n        messagesThisMonth: 300,\n        deliveredMessages: 450,\n        failedMessages: 50\n      }\n\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(mockConfig)\n      \n      // Mock message counts\n      prismaService.whatsAppMessage.count\n        .mockResolvedValueOnce(500) // total\n        .mockResolvedValueOnce(300) // this month\n        .mockResolvedValueOnce(450) // delivered\n        .mockResolvedValueOnce(50)  // failed\n\n      const result = await whatsappService.getDashboardStats('user-1')\n\n      expect(result).toEqual({\n        totalMessages: 500,\n        messagesThisMonth: 300,\n        deliveryRate: 90, // 450/500 * 100\n        activeConversations: 0,\n        activeAutomations: 0,\n        dailyUsage: 150,\n        dailyLimit: 1000\n      })\n    })\n  })\n\n  describe('testConnection', () => {\n    it('should test connection successfully', async () => {\n      const mockConfig = {\n        twilioAccountSid: 'test_sid',\n        twilioAuthToken: 'encrypted_token',\n        twilioPhoneNumber: '+1234567890'\n      }\n\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(mockConfig)\n      cryptoService.decrypt = jest.fn().mockReturnValue('decrypted_token')\n      \n      mockTwilioClient.messages.create.mockResolvedValue({\n        sid: 'test_sid',\n        status: 'queued'\n      })\n\n      const result = await whatsappService.testConnection('user-1')\n\n      expect(result).toEqual({\n        success: true,\n        message: 'Conexão testada com sucesso'\n      })\n    })\n\n    it('should handle connection error', async () => {\n      const mockConfig = {\n        twilioAccountSid: 'test_sid',\n        twilioAuthToken: 'encrypted_token',\n        twilioPhoneNumber: '+1234567890'\n      }\n\n      prismaService.whatsAppConfig.findUnique = jest.fn().mockResolvedValue(mockConfig)\n      cryptoService.decrypt = jest.fn().mockReturnValue('decrypted_token')\n      \n      mockTwilioClient.messages.create.mockRejectedValue(new Error('Invalid credentials'))\n\n      const result = await whatsappService.testConnection('user-1')\n\n      expect(result).toEqual({\n        success: false,\n        message: 'Erro na conexão: Invalid credentials'\n      })\n    })\n  })\n})"],"version":3}