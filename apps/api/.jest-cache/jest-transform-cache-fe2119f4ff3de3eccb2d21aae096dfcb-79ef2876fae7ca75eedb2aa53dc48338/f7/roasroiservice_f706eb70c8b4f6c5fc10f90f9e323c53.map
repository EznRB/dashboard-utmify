{"version":3,"names":["cov_1llo868sqg","actualCoverage","format","logger","ROASROIService","prisma","constructor","f","s","calculateROAS","revenue","adSpend","b","parseFloat","toFixed","calculateROI","totalCost","calculateDetailedROI","operationalCost","platformFees","profit","roiPercentage","costBreakdown","getROASStatus","roas","getROIStatus","roi","calculateCampaignROAS","organizationId","startDate","endDate","campaigns","campaign","findMany","where","status","include","metricsDaily","date","gte","lte","map","totalRevenue","reduce","sum","metric","totalAdSpend","roasPercentage","campaignId","id","campaignName","name","platform","period","error","Error","calculateCampaignROI","operationalCostPercentage","platformFeePercentage","detailedROI","getROASROITrends","granularity","metricsQuery","results","$queryRawUnsafe","result","Number","total_revenue","total_ad_spend","Date","metric_date","analyzeROITrend","roiData","length","currentROI","previousROI","changePercentage","trend","latest","previous","change","generateROASROIAnalysis","roasCalculations","roiCalculations","trends","Promise","all","calc","totalProfit","avgROAS","avgROI","bestROAS","best","current","worstROAS","worst","alerts","generateROASROIAlerts","summary","bestPerformingCampaign","find","r","worstPerformingCampaign","forEach","push","type","message","value","threshold","getTopCampaignsByROAS","limit","calculations","sort","a","slice","getTopCampaignsByROI"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\roas-roi.service.ts"],"sourcesContent":["import { subDays, format } from 'date-fns';\nimport { logger } from '../utils/logger';\n\nexport interface ROASCalculation {\n  campaignId: string;\n  campaignName: string;\n  platform: string;\n  revenue: number;\n  adSpend: number;\n  roas: number;\n  roasPercentage: number;\n  status: 'excellent' | 'good' | 'average' | 'poor';\n  period: string;\n}\n\nexport interface ROICalculation {\n  campaignId: string;\n  campaignName: string;\n  platform: string;\n  revenue: number;\n  totalCost: number;\n  profit: number;\n  roi: number;\n  roiPercentage: number;\n  status: 'excellent' | 'good' | 'average' | 'poor';\n  costBreakdown: {\n    adSpend: number;\n    operationalCost: number;\n    platformFees: number;\n  };\n  period: string;\n}\n\nexport interface ROASROITrend {\n  date: string;\n  roas: number;\n  roi: number;\n  revenue: number;\n  adSpend: number;\n  totalCost: number;\n  profit: number;\n}\n\nexport interface ROASROIAnalysis {\n  summary: {\n    totalRevenue: number;\n    totalAdSpend: number;\n    totalCost: number;\n    totalProfit: number;\n    avgROAS: number;\n    avgROI: number;\n    bestPerformingCampaign: {\n      name: string;\n      roas: number;\n      roi: number;\n    };\n    worstPerformingCampaign: {\n      name: string;\n      roas: number;\n      roi: number;\n    };\n  };\n  campaigns: {\n    roas: ROASCalculation[];\n    roi: ROICalculation[];\n  };\n  trends: ROASROITrend[];\n  alerts: {\n    type: 'critical' | 'warning' | 'info';\n    message: string;\n    campaignId?: string;\n    campaignName?: string;\n    metric: 'roas' | 'roi';\n    value: number;\n    threshold: number;\n  }[];\n}\n\nexport class ROASROIService {\n  private prisma: any;\n\n  constructor(prisma: any) {\n    this.prisma = prisma;\n  }\n\n  /**\n   * Calculate ROAS (Return on Ad Spend)\n   * Formula: revenue / ad_spend\n   */\n  calculateROAS(revenue: number, adSpend: number): number {\n    if (!adSpend || adSpend === 0) return 0;\n    return parseFloat((revenue / adSpend).toFixed(2));\n  }\n\n  /**\n   * Calculate ROI (Return on Investment)\n   * Formula: (revenue - total_cost) / total_cost * 100\n   */\n  calculateROI(revenue: number, totalCost: number): number {\n    if (!totalCost || totalCost === 0) return 0;\n    return parseFloat((((revenue - totalCost) / totalCost) * 100).toFixed(2));\n  }\n\n  /**\n   * Calculate detailed ROI with cost breakdown\n   */\n  calculateDetailedROI(\n    revenue: number,\n    adSpend: number,\n    operationalCost: number = 0,\n    platformFees: number = 0\n  ): {\n    revenue: number;\n    totalCost: number;\n    profit: number;\n    roiPercentage: number;\n    costBreakdown: {\n      adSpend: number;\n      operationalCost: number;\n      platformFees: number;\n    };\n  } {\n    const totalCost = adSpend + operationalCost + platformFees;\n    const profit = revenue - totalCost;\n    \n    return {\n      revenue,\n      totalCost,\n      profit,\n      roiPercentage: this.calculateROI(revenue, totalCost),\n      costBreakdown: {\n        adSpend,\n        operationalCost,\n        platformFees\n      }\n    };\n  }\n\n  /**\n   * Get ROAS status based on value\n   */\n  getROASStatus(roas: number): 'excellent' | 'good' | 'average' | 'poor' {\n    if (roas > 4.0) return 'excellent';\n    if (roas >= 2.5) return 'good';\n    if (roas >= 1.5) return 'average';\n    return 'poor';\n  }\n\n  /**\n   * Get ROI status based on percentage\n   */\n  getROIStatus(roi: number): 'excellent' | 'good' | 'average' | 'poor' {\n    if (roi > 200) return 'excellent';\n    if (roi >= 100) return 'good';\n    if (roi >= 50) return 'average';\n    return 'poor';\n  }\n\n  /**\n   * Calculate ROAS for campaigns in a date range\n   */\n  async calculateCampaignROAS(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<ROASCalculation[]> {\n    try {\n      const campaigns = await this.prisma.campaign.findMany({\n        where: {\n          organizationId,\n          status: 'ACTIVE'\n        },\n        include: {\n          metricsDaily: {\n            where: {\n              date: {\n                gte: startDate,\n                lte: endDate\n              }\n            }\n          }\n        }\n      });\n\n      return campaigns.map(campaign => {\n        const totalRevenue = campaign.metricsDaily.reduce((sum, metric) => sum + (metric.revenue || 0), 0);\n        const totalAdSpend = campaign.metricsDaily.reduce((sum, metric) => sum + (metric.adSpend || 0), 0);\n        const roas = this.calculateROAS(totalRevenue, totalAdSpend);\n        const roasPercentage = roas * 100;\n\n        return {\n          campaignId: campaign.id,\n          campaignName: campaign.name,\n          platform: campaign.platform,\n          revenue: totalRevenue,\n          adSpend: totalAdSpend,\n          roas,\n          roasPercentage,\n          status: this.getROASStatus(roas),\n          period: `${format(startDate, 'yyyy-MM-dd')} to ${format(endDate, 'yyyy-MM-dd')}`\n        };\n      });\n    } catch (error) {\n      logger.error('Failed to calculate campaign ROAS', error);\n      throw new Error('Failed to calculate ROAS');\n    }\n  }\n\n  /**\n   * Calculate ROI for campaigns in a date range\n   */\n  async calculateCampaignROI(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    operationalCostPercentage: number = 0.1, // 10% default operational cost\n    platformFeePercentage: number = 0.05 // 5% default platform fees\n  ): Promise<ROICalculation[]> {\n    try {\n      const campaigns = await this.prisma.campaign.findMany({\n        where: {\n          organizationId,\n          status: 'ACTIVE'\n        },\n        include: {\n          metricsDaily: {\n            where: {\n              date: {\n                gte: startDate,\n                lte: endDate\n              }\n            }\n          }\n        }\n      });\n\n      return campaigns.map(campaign => {\n        const totalRevenue = campaign.metricsDaily.reduce((sum, metric) => sum + (metric.revenue || 0), 0);\n        const totalAdSpend = campaign.metricsDaily.reduce((sum, metric) => sum + (metric.adSpend || 0), 0);\n        \n        // Calculate additional costs\n        const operationalCost = totalRevenue * operationalCostPercentage;\n        const platformFees = totalAdSpend * platformFeePercentage;\n        \n        const detailedROI = this.calculateDetailedROI(\n          totalRevenue,\n          totalAdSpend,\n          operationalCost,\n          platformFees\n        );\n\n        return {\n          campaignId: campaign.id,\n          campaignName: campaign.name,\n          platform: campaign.platform,\n          revenue: totalRevenue,\n          totalCost: detailedROI.totalCost,\n          profit: detailedROI.profit,\n          roi: detailedROI.roiPercentage,\n          roiPercentage: detailedROI.roiPercentage,\n          status: this.getROIStatus(detailedROI.roiPercentage),\n          costBreakdown: detailedROI.costBreakdown,\n          period: `${format(startDate, 'yyyy-MM-dd')} to ${format(endDate, 'yyyy-MM-dd')}`\n        };\n      });\n    } catch (error) {\n      logger.error('Failed to calculate campaign ROI', error);\n      throw new Error('Failed to calculate ROI');\n    }\n  }\n\n  /**\n   * Get ROAS/ROI trends over time\n   */\n  async getROASROITrends(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    granularity: 'daily' | 'weekly' | 'monthly' = 'daily'\n  ): Promise<ROASROITrend[]> {\n    try {\n      // Get aggregated metrics by date\n      const metricsQuery = `\n        SELECT \n          DATE(date) as metric_date,\n          SUM(revenue) as total_revenue,\n          SUM(\"adSpend\") as total_ad_spend\n        FROM \"MetricsDaily\" md\n        JOIN \"Campaign\" c ON md.\"campaignId\" = c.id\n        WHERE c.\"organizationId\" = $1\n          AND md.date >= $2\n          AND md.date <= $3\n        GROUP BY DATE(date)\n        ORDER BY metric_date ASC\n      `;\n\n      const results = await this.prisma.$queryRawUnsafe(\n        metricsQuery,\n        organizationId,\n        startDate,\n        endDate\n      ) as any[];\n\n      return results.map(result => {\n        const revenue = Number(result.total_revenue) || 0;\n        const adSpend = Number(result.total_ad_spend) || 0;\n        const operationalCost = revenue * 0.1; // 10% operational cost\n        const platformFees = adSpend * 0.05; // 5% platform fees\n        const totalCost = adSpend + operationalCost + platformFees;\n        const profit = revenue - totalCost;\n        \n        return {\n          date: format(new Date(result.metric_date), 'yyyy-MM-dd'),\n          roas: this.calculateROAS(revenue, adSpend),\n          roi: this.calculateROI(revenue, totalCost),\n          revenue,\n          adSpend,\n          totalCost,\n          profit\n        };\n      });\n    } catch (error) {\n      logger.error('Failed to get ROAS/ROI trends', error);\n      throw new Error('Failed to get trends');\n    }\n  }\n\n  /**\n   * Analyze ROI trend\n   */\n  analyzeROITrend(roiData: { roi: number }[]): {\n    currentROI: number;\n    previousROI: number;\n    changePercentage: number;\n    trend: 'improving' | 'declining' | 'stable' | 'insufficient_data';\n  } {\n    if (roiData.length < 2) {\n      return { \n        currentROI: 0, \n        previousROI: 0, \n        changePercentage: 0, \n        trend: 'insufficient_data' \n      };\n    }\n    \n    const latest = roiData[roiData.length - 1].roi;\n    const previous = roiData[roiData.length - 2].roi;\n    const change = latest - previous;\n    \n    return {\n      currentROI: latest,\n      previousROI: previous,\n      changePercentage: parseFloat(change.toFixed(2)),\n      trend: change > 0 ? 'improving' : change < 0 ? 'declining' : 'stable'\n    };\n  }\n\n  /**\n   * Generate comprehensive ROAS/ROI analysis\n   */\n  async generateROASROIAnalysis(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<ROASROIAnalysis> {\n    try {\n      const [roasCalculations, roiCalculations, trends] = await Promise.all([\n        this.calculateCampaignROAS(organizationId, startDate, endDate),\n        this.calculateCampaignROI(organizationId, startDate, endDate),\n        this.getROASROITrends(organizationId, startDate, endDate)\n      ]);\n\n      // Calculate summary\n      const totalRevenue = roasCalculations.reduce((sum, calc) => sum + calc.revenue, 0);\n      const totalAdSpend = roasCalculations.reduce((sum, calc) => sum + calc.adSpend, 0);\n      const totalCost = roiCalculations.reduce((sum, calc) => sum + calc.totalCost, 0);\n      const totalProfit = roiCalculations.reduce((sum, calc) => sum + calc.profit, 0);\n      const avgROAS = roasCalculations.length > 0 \n        ? roasCalculations.reduce((sum, calc) => sum + calc.roas, 0) / roasCalculations.length \n        : 0;\n      const avgROI = roiCalculations.length > 0 \n        ? roiCalculations.reduce((sum, calc) => sum + calc.roi, 0) / roiCalculations.length \n        : 0;\n\n      // Find best and worst performing campaigns\n      const bestROAS = roasCalculations.reduce((best, current) => \n        current.roas > best.roas ? current : best, roasCalculations[0] || { name: 'N/A', roas: 0, roi: 0 });\n      const worstROAS = roasCalculations.reduce((worst, current) => \n        current.roas < worst.roas ? current : worst, roasCalculations[0] || { name: 'N/A', roas: 0, roi: 0 });\n\n      // Generate alerts\n      const alerts = this.generateROASROIAlerts(roasCalculations, roiCalculations);\n\n      return {\n        summary: {\n          totalRevenue,\n          totalAdSpend,\n          totalCost,\n          totalProfit,\n          avgROAS: parseFloat(avgROAS.toFixed(2)),\n          avgROI: parseFloat(avgROI.toFixed(2)),\n          bestPerformingCampaign: {\n            name: bestROAS.campaignName,\n            roas: bestROAS.roas,\n            roi: roiCalculations.find(r => r.campaignId === bestROAS.campaignId)?.roi || 0\n          },\n          worstPerformingCampaign: {\n            name: worstROAS.campaignName,\n            roas: worstROAS.roas,\n            roi: roiCalculations.find(r => r.campaignId === worstROAS.campaignId)?.roi || 0\n          }\n        },\n        campaigns: {\n          roas: roasCalculations,\n          roi: roiCalculations\n        },\n        trends,\n        alerts\n      };\n    } catch (error) {\n      logger.error('Failed to generate ROAS/ROI analysis', error);\n      throw new Error('Failed to generate analysis');\n    }\n  }\n\n  /**\n   * Generate alerts based on ROAS/ROI thresholds\n   */\n  private generateROASROIAlerts(\n    roasCalculations: ROASCalculation[],\n    roiCalculations: ROICalculation[]\n  ) {\n    const alerts: ROASROIAnalysis['alerts'] = [];\n\n    // ROAS alerts\n    roasCalculations.forEach(calc => {\n      if (calc.roas < 1.5) {\n        alerts.push({\n          type: calc.roas < 1.0 ? 'critical' : 'warning',\n          message: `ROAS muito baixo para campanha ${calc.campaignName}`,\n          campaignId: calc.campaignId,\n          campaignName: calc.campaignName,\n          metric: 'roas',\n          value: calc.roas,\n          threshold: 1.5\n        });\n      } else if (calc.roas > 6.0) {\n        alerts.push({\n          type: 'info',\n          message: `ROAS excepcionalmente alto para campanha ${calc.campaignName}`,\n          campaignId: calc.campaignId,\n          campaignName: calc.campaignName,\n          metric: 'roas',\n          value: calc.roas,\n          threshold: 6.0\n        });\n      }\n    });\n\n    // ROI alerts\n    roiCalculations.forEach(calc => {\n      if (calc.roi < 50) {\n        alerts.push({\n          type: calc.roi < 0 ? 'critical' : 'warning',\n          message: `ROI baixo para campanha ${calc.campaignName}`,\n          campaignId: calc.campaignId,\n          campaignName: calc.campaignName,\n          metric: 'roi',\n          value: calc.roi,\n          threshold: 50\n        });\n      }\n    });\n\n    return alerts;\n  }\n\n  /**\n   * Get top performing campaigns by ROAS\n   */\n  async getTopCampaignsByROAS(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    limit: number = 10\n  ): Promise<ROASCalculation[]> {\n    const calculations = await this.calculateCampaignROAS(organizationId, startDate, endDate);\n    return calculations\n      .sort((a, b) => b.roas - a.roas)\n      .slice(0, limit);\n  }\n\n  /**\n   * Get top performing campaigns by ROI\n   */\n  async getTopCampaignsByROI(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    limit: number = 10\n  ): Promise<ROICalculation[]> {\n    const calculations = await this.calculateCampaignROI(organizationId, startDate, endDate);\n    return calculations\n      .sort((a, b) => b.roi - a.roi)\n      .slice(0, limit);\n  }\n}"],"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","ignoreList":[]}