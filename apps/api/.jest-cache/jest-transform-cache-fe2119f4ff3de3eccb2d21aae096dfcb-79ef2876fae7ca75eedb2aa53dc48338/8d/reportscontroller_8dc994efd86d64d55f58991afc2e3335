e96f674e0b81d6f7d54549ca15d15727
/* istanbul ignore next */
function cov_yncmp0ddr() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\reports.controller.ts";
  var hash = "bad3865ad869d7adc0e354a0a945fe009542af2b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\reports.controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "14": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 73
        }
      },
      "15": {
        start: {
          line: 11,
          column: 36
        },
        end: {
          line: 11,
          column: 71
        }
      },
      "16": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 32,
          column: 44
        }
      },
      "17": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 36,
          column: 42
        }
      },
      "18": {
        start: {
          line: 43,
          column: 0
        },
        end: {
          line: 48,
          column: 52
        }
      },
      "19": {
        start: {
          line: 46,
          column: 15
        },
        end: {
          line: 46,
          column: 27
        }
      },
      "20": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 54,
          column: 52
        }
      },
      "21": {
        start: {
          line: 55,
          column: 0
        },
        end: {
          line: 60,
          column: 52
        }
      },
      "22": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 65,
          column: 56
        }
      },
      "23": {
        start: {
          line: 75,
          column: 0
        },
        end: {
          line: 79,
          column: 54
        }
      },
      "24": {
        start: {
          line: 80,
          column: 0
        },
        end: {
          line: 83,
          column: 48
        }
      },
      "25": {
        start: {
          line: 84,
          column: 0
        },
        end: {
          line: 87,
          column: 48
        }
      },
      "26": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 93,
          column: 51
        }
      },
      "27": {
        start: {
          line: 91,
          column: 15
        },
        end: {
          line: 91,
          column: 31
        }
      },
      "28": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 99,
          column: 50
        }
      },
      "29": {
        start: {
          line: 100,
          column: 0
        },
        end: {
          line: 104,
          column: 58
        }
      },
      "30": {
        start: {
          line: 105,
          column: 0
        },
        end: {
          line: 109,
          column: 55
        }
      },
      "31": {
        start: {
          line: 122,
          column: 0
        },
        end: {
          line: 125,
          column: 48
        }
      },
      "32": {
        start: {
          line: 126,
          column: 0
        },
        end: {
          line: 129,
          column: 54
        }
      },
      "33": {
        start: {
          line: 130,
          column: 0
        },
        end: {
          line: 133,
          column: 53
        }
      },
      "34": {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 137,
          column: 56
        }
      },
      "35": {
        start: {
          line: 138,
          column: 0
        },
        end: {
          line: 145,
          column: 56
        }
      },
      "36": {
        start: {
          line: 146,
          column: 0
        },
        end: {
          line: 152,
          column: 55
        }
      },
      "37": {
        start: {
          line: 153,
          column: 0
        },
        end: {
          line: 158,
          column: 51
        }
      },
      "38": {
        start: {
          line: 156,
          column: 15
        },
        end: {
          line: 156,
          column: 31
        }
      },
      "39": {
        start: {
          line: 159,
          column: 0
        },
        end: {
          line: 164,
          column: 59
        }
      },
      "40": {
        start: {
          line: 165,
          column: 0
        },
        end: {
          line: 169,
          column: 53
        }
      },
      "41": {
        start: {
          line: 170,
          column: 0
        },
        end: {
          line: 174,
          column: 51
        }
      },
      "42": {
        start: {
          line: 187,
          column: 0
        },
        end: {
          line: 191,
          column: 48
        }
      },
      "43": {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 196,
          column: 53
        }
      },
      "44": {
        start: {
          line: 197,
          column: 0
        },
        end: {
          line: 201,
          column: 56
        }
      },
      "45": {
        start: {
          line: 202,
          column: 0
        },
        end: {
          line: 207,
          column: 56
        }
      },
      "46": {
        start: {
          line: 208,
          column: 0
        },
        end: {
          line: 212,
          column: 55
        }
      },
      "47": {
        start: {
          line: 213,
          column: 0
        },
        end: {
          line: 218,
          column: 51
        }
      },
      "48": {
        start: {
          line: 216,
          column: 15
        },
        end: {
          line: 216,
          column: 31
        }
      },
      "49": {
        start: {
          line: 219,
          column: 0
        },
        end: {
          line: 224,
          column: 59
        }
      },
      "50": {
        start: {
          line: 225,
          column: 0
        },
        end: {
          line: 229,
          column: 52
        }
      },
      "51": {
        start: {
          line: 230,
          column: 0
        },
        end: {
          line: 234,
          column: 53
        }
      },
      "52": {
        start: {
          line: 235,
          column: 0
        },
        end: {
          line: 239,
          column: 51
        }
      },
      "53": {
        start: {
          line: 246,
          column: 0
        },
        end: {
          line: 249,
          column: 50
        }
      },
      "54": {
        start: {
          line: 250,
          column: 0
        },
        end: {
          line: 253,
          column: 48
        }
      },
      "55": {
        start: {
          line: 254,
          column: 0
        },
        end: {
          line: 258,
          column: 55
        }
      },
      "56": {
        start: {
          line: 259,
          column: 0
        },
        end: {
          line: 263,
          column: 50
        }
      },
      "57": {
        start: {
          line: 270,
          column: 0
        },
        end: {
          line: 273,
          column: 49
        }
      },
      "58": {
        start: {
          line: 274,
          column: 0
        },
        end: {
          line: 279,
          column: 47
        }
      },
      "59": {
        start: {
          line: 280,
          column: 0
        },
        end: {
          line: 284,
          column: 51
        }
      },
      "60": {
        start: {
          line: 285,
          column: 0
        },
        end: {
          line: 289,
          column: 50
        }
      },
      "61": {
        start: {
          line: 290,
          column: 24
        },
        end: {
          line: 561,
          column: 1
        }
      },
      "62": {
        start: {
          line: 293,
          column: 13
        },
        end: {
          line: 293,
          column: 49
        }
      },
      "63": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 45
        }
      },
      "64": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 49
        }
      },
      "65": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "66": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 69
        }
      },
      "67": {
        start: {
          line: 302,
          column: 30
        },
        end: {
          line: 306,
          column: 14
        }
      },
      "68": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 314,
          column: 14
        }
      },
      "69": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 65
        }
      },
      "70": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 102
        }
      },
      "71": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "72": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 96
        }
      },
      "73": {
        start: {
          line: 325,
          column: 27
        },
        end: {
          line: 329,
          column: 14
        }
      },
      "74": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 334,
          column: 14
        }
      },
      "75": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 67
        }
      },
      "76": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 106
        }
      },
      "77": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "78": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 77
        }
      },
      "79": {
        start: {
          line: 345,
          column: 30
        },
        end: {
          line: 345,
          column: 85
        }
      },
      "80": {
        start: {
          line: 347,
          column: 38
        },
        end: {
          line: 349,
          column: 27
        }
      },
      "81": {
        start: {
          line: 348,
          column: 40
        },
        end: {
          line: 348,
          column: 61
        }
      },
      "82": {
        start: {
          line: 351,
          column: 31
        },
        end: {
          line: 351,
          column: 49
        }
      },
      "83": {
        start: {
          line: 352,
          column: 29
        },
        end: {
          line: 352,
          column: 47
        }
      },
      "84": {
        start: {
          line: 353,
          column: 39
        },
        end: {
          line: 353,
          column: 84
        }
      },
      "85": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 363,
          column: 14
        }
      },
      "86": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 73
        }
      },
      "87": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 110
        }
      },
      "88": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "89": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 96
        }
      },
      "90": {
        start: {
          line: 374,
          column: 29
        },
        end: {
          line: 380,
          column: 14
        }
      },
      "91": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 385,
          column: 14
        }
      },
      "92": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 67
        }
      },
      "93": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 106
        }
      },
      "94": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 410,
          column: 9
        }
      },
      "95": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 75
        }
      },
      "96": {
        start: {
          line: 396,
          column: 29
        },
        end: {
          line: 400,
          column: 14
        }
      },
      "97": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 405,
          column: 14
        }
      },
      "98": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 408,
          column: 67
        }
      },
      "99": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 106
        }
      },
      "100": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "101": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 415,
          column: 75
        }
      },
      "102": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 59
        }
      },
      "103": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 420,
          column: 14
        }
      },
      "104": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 67
        }
      },
      "105": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 106
        }
      },
      "106": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "107": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 430,
          column: 85
        }
      },
      "108": {
        start: {
          line: 431,
          column: 27
        },
        end: {
          line: 431,
          column: 82
        }
      },
      "109": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 436,
          column: 14
        }
      },
      "110": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 68
        }
      },
      "111": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 107
        }
      },
      "112": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 463,
          column: 9
        }
      },
      "113": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 96
        }
      },
      "114": {
        start: {
          line: 447,
          column: 33
        },
        end: {
          line: 453,
          column: 14
        }
      },
      "115": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 458,
          column: 14
        }
      },
      "116": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 65
        }
      },
      "117": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 462,
          column: 104
        }
      },
      "118": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 492,
          column: 9
        }
      },
      "119": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 468,
          column: 74
        }
      },
      "120": {
        start: {
          line: 469,
          column: 28
        },
        end: {
          line: 477,
          column: 14
        }
      },
      "121": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 487,
          column: 14
        }
      },
      "122": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 70
        }
      },
      "123": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 491,
          column: 107
        }
      },
      "124": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 507,
          column: 9
        }
      },
      "125": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 72
        }
      },
      "126": {
        start: {
          line: 498,
          column: 27
        },
        end: {
          line: 498,
          column: 79
        }
      },
      "127": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 502,
          column: 14
        }
      },
      "128": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 505,
          column: 62
        }
      },
      "129": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 104
        }
      },
      "130": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 529,
          column: 9
        }
      },
      "131": {
        start: {
          line: 512,
          column: 12
        },
        end: {
          line: 512,
          column: 72
        }
      },
      "132": {
        start: {
          line: 513,
          column: 32
        },
        end: {
          line: 519,
          column: 14
        }
      },
      "133": {
        start: {
          line: 520,
          column: 12
        },
        end: {
          line: 524,
          column: 14
        }
      },
      "134": {
        start: {
          line: 527,
          column: 12
        },
        end: {
          line: 527,
          column: 64
        }
      },
      "135": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 528,
          column: 103
        }
      },
      "136": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 544,
          column: 9
        }
      },
      "137": {
        start: {
          line: 534,
          column: 12
        },
        end: {
          line: 534,
          column: 73
        }
      },
      "138": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 535,
          column: 64
        }
      },
      "139": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 539,
          column: 14
        }
      },
      "140": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 542,
          column: 65
        }
      },
      "141": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 543,
          column: 104
        }
      },
      "142": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 559,
          column: 9
        }
      },
      "143": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 549,
          column: 80
        }
      },
      "144": {
        start: {
          line: 550,
          column: 26
        },
        end: {
          line: 550,
          column: 75
        }
      },
      "145": {
        start: {
          line: 551,
          column: 12
        },
        end: {
          line: 554,
          column: 14
        }
      },
      "146": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 557,
          column: 70
        }
      },
      "147": {
        start: {
          line: 558,
          column: 12
        },
        end: {
          line: 558,
          column: 119
        }
      },
      "148": {
        start: {
          line: 562,
          column: 0
        },
        end: {
          line: 574,
          column: 54
        }
      },
      "149": {
        start: {
          line: 575,
          column: 0
        },
        end: {
          line: 585,
          column: 56
        }
      },
      "150": {
        start: {
          line: 586,
          column: 0
        },
        end: {
          line: 600,
          column: 61
        }
      },
      "151": {
        start: {
          line: 601,
          column: 0
        },
        end: {
          line: 611,
          column: 56
        }
      },
      "152": {
        start: {
          line: 612,
          column: 0
        },
        end: {
          line: 623,
          column: 56
        }
      },
      "153": {
        start: {
          line: 624,
          column: 0
        },
        end: {
          line: 634,
          column: 56
        }
      },
      "154": {
        start: {
          line: 635,
          column: 0
        },
        end: {
          line: 644,
          column: 57
        }
      },
      "155": {
        start: {
          line: 645,
          column: 0
        },
        end: {
          line: 655,
          column: 54
        }
      },
      "156": {
        start: {
          line: 656,
          column: 0
        },
        end: {
          line: 674,
          column: 58
        }
      },
      "157": {
        start: {
          line: 675,
          column: 0
        },
        end: {
          line: 685,
          column: 51
        }
      },
      "158": {
        start: {
          line: 686,
          column: 0
        },
        end: {
          line: 697,
          column: 53
        }
      },
      "159": {
        start: {
          line: 698,
          column: 0
        },
        end: {
          line: 708,
          column: 54
        }
      },
      "160": {
        start: {
          line: 709,
          column: 0
        },
        end: {
          line: 718,
          column: 58
        }
      },
      "161": {
        start: {
          line: 719,
          column: 0
        },
        end: {
          line: 725,
          column: 22
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 10,
            column: 41
          }
        },
        loc: {
          start: {
            line: 10,
            column: 73
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 10
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 11,
            column: 11
          },
          end: {
            line: 11,
            column: 12
          }
        },
        loc: {
          start: {
            line: 11,
            column: 34
          },
          end: {
            line: 11,
            column: 73
          }
        },
        line: 11
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 46,
            column: 9
          },
          end: {
            line: 46,
            column: 10
          }
        },
        loc: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 46,
            column: 27
          }
        },
        line: 46
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 91,
            column: 9
          },
          end: {
            line: 91,
            column: 10
          }
        },
        loc: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 31
          }
        },
        line: 91
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 156,
            column: 9
          },
          end: {
            line: 156,
            column: 10
          }
        },
        loc: {
          start: {
            line: 156,
            column: 15
          },
          end: {
            line: 156,
            column: 31
          }
        },
        line: 156
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 216,
            column: 9
          },
          end: {
            line: 216,
            column: 10
          }
        },
        loc: {
          start: {
            line: 216,
            column: 15
          },
          end: {
            line: 216,
            column: 31
          }
        },
        line: 216
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        loc: {
          start: {
            line: 294,
            column: 50
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 294
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 43
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 299
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 50
          },
          end: {
            line: 340,
            column: 5
          }
        },
        line: 322
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 66
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 342
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 348,
            column: 35
          },
          end: {
            line: 348,
            column: 36
          }
        },
        loc: {
          start: {
            line: 348,
            column: 40
          },
          end: {
            line: 348,
            column: 61
          }
        },
        line: 348
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 371,
            column: 4
          },
          end: {
            line: 371,
            column: 5
          }
        },
        loc: {
          start: {
            line: 371,
            column: 50
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 371
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 393,
            column: 4
          },
          end: {
            line: 393,
            column: 5
          }
        },
        loc: {
          start: {
            line: 393,
            column: 54
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 393
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 35
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 413
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 428,
            column: 4
          },
          end: {
            line: 428,
            column: 5
          }
        },
        loc: {
          start: {
            line: 428,
            column: 36
          },
          end: {
            line: 442,
            column: 5
          }
        },
        line: 428
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 444,
            column: 5
          }
        },
        loc: {
          start: {
            line: 444,
            column: 46
          },
          end: {
            line: 464,
            column: 5
          }
        },
        line: 444
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 77
          },
          end: {
            line: 493,
            column: 5
          }
        },
        line: 466
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 495,
            column: 4
          },
          end: {
            line: 495,
            column: 5
          }
        },
        loc: {
          start: {
            line: 495,
            column: 30
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 495
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 510,
            column: 4
          },
          end: {
            line: 510,
            column: 5
          }
        },
        loc: {
          start: {
            line: 510,
            column: 48
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 510
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 532,
            column: 4
          },
          end: {
            line: 532,
            column: 5
          }
        },
        loc: {
          start: {
            line: 532,
            column: 33
          },
          end: {
            line: 545,
            column: 5
          }
        },
        line: 532
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 547,
            column: 4
          },
          end: {
            line: 547,
            column: 5
          }
        },
        loc: {
          start: {
            line: 547,
            column: 37
          },
          end: {
            line: 560,
            column: 5
          }
        },
        line: 547
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 10,
            column: 14
          },
          end: {
            line: 12,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 19
          }
        }, {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 35
          }
        }, {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 10
      },
      "14": {
        loc: {
          start: {
            line: 64,
            column: 30
          },
          end: {
            line: 64,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 101
          },
          end: {
            line: 64,
            column: 103
          }
        }, {
          start: {
            line: 64,
            column: 106
          },
          end: {
            line: 64,
            column: 112
          }
        }],
        line: 64
      },
      "15": {
        loc: {
          start: {
            line: 64,
            column: 43
          },
          end: {
            line: 64,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 43
          },
          end: {
            line: 64,
            column: 72
          }
        }, {
          start: {
            line: 64,
            column: 76
          },
          end: {
            line: 64,
            column: 82
          }
        }],
        line: 64
      },
      "16": {
        loc: {
          start: {
            line: 86,
            column: 30
          },
          end: {
            line: 86,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 109
          },
          end: {
            line: 86,
            column: 111
          }
        }, {
          start: {
            line: 86,
            column: 114
          },
          end: {
            line: 86,
            column: 120
          }
        }],
        line: 86
      },
      "17": {
        loc: {
          start: {
            line: 86,
            column: 43
          },
          end: {
            line: 86,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 43
          },
          end: {
            line: 86,
            column: 76
          }
        }, {
          start: {
            line: 86,
            column: 80
          },
          end: {
            line: 86,
            column: 90
          }
        }],
        line: 86
      },
      "18": {
        loc: {
          start: {
            line: 132,
            column: 30
          },
          end: {
            line: 132,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 132,
            column: 123
          },
          end: {
            line: 132,
            column: 125
          }
        }, {
          start: {
            line: 132,
            column: 128
          },
          end: {
            line: 132,
            column: 134
          }
        }],
        line: 132
      },
      "19": {
        loc: {
          start: {
            line: 132,
            column: 43
          },
          end: {
            line: 132,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 43
          },
          end: {
            line: 132,
            column: 83
          }
        }, {
          start: {
            line: 132,
            column: 87
          },
          end: {
            line: 132,
            column: 104
          }
        }],
        line: 132
      },
      "20": {
        loc: {
          start: {
            line: 195,
            column: 30
          },
          end: {
            line: 195,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 123
          },
          end: {
            line: 195,
            column: 125
          }
        }, {
          start: {
            line: 195,
            column: 128
          },
          end: {
            line: 195,
            column: 134
          }
        }],
        line: 195
      },
      "21": {
        loc: {
          start: {
            line: 195,
            column: 43
          },
          end: {
            line: 195,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 43
          },
          end: {
            line: 195,
            column: 83
          }
        }, {
          start: {
            line: 195,
            column: 87
          },
          end: {
            line: 195,
            column: 104
          }
        }],
        line: 195
      },
      "22": {
        loc: {
          start: {
            line: 252,
            column: 30
          },
          end: {
            line: 252,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 252,
            column: 113
          },
          end: {
            line: 252,
            column: 115
          }
        }, {
          start: {
            line: 252,
            column: 118
          },
          end: {
            line: 252,
            column: 124
          }
        }],
        line: 252
      },
      "23": {
        loc: {
          start: {
            line: 252,
            column: 43
          },
          end: {
            line: 252,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 43
          },
          end: {
            line: 252,
            column: 78
          }
        }, {
          start: {
            line: 252,
            column: 82
          },
          end: {
            line: 252,
            column: 94
          }
        }],
        line: 252
      },
      "24": {
        loc: {
          start: {
            line: 338,
            column: 36
          },
          end: {
            line: 338,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 36
          },
          end: {
            line: 338,
            column: 49
          }
        }, {
          start: {
            line: 338,
            column: 53
          },
          end: {
            line: 338,
            column: 80
          }
        }],
        line: 338
      },
      "25": {
        loc: {
          start: {
            line: 342,
            column: 36
          },
          end: {
            line: 342,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 342,
            column: 43
          },
          end: {
            line: 342,
            column: 44
          }
        }],
        line: 342
      },
      "26": {
        loc: {
          start: {
            line: 342,
            column: 46
          },
          end: {
            line: 342,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 342,
            column: 54
          },
          end: {
            line: 342,
            column: 56
          }
        }],
        line: 342
      },
      "27": {
        loc: {
          start: {
            line: 347,
            column: 38
          },
          end: {
            line: 349,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 348,
            column: 18
          },
          end: {
            line: 348,
            column: 62
          }
        }, {
          start: {
            line: 349,
            column: 18
          },
          end: {
            line: 349,
            column: 27
          }
        }],
        line: 347
      },
      "28": {
        loc: {
          start: {
            line: 378,
            column: 27
          },
          end: {
            line: 378,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 378,
            column: 57
          },
          end: {
            line: 378,
            column: 94
          }
        }, {
          start: {
            line: 378,
            column: 97
          },
          end: {
            line: 378,
            column: 106
          }
        }],
        line: 378
      },
      "29": {
        loc: {
          start: {
            line: 379,
            column: 25
          },
          end: {
            line: 379,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 379,
            column: 53
          },
          end: {
            line: 379,
            column: 88
          }
        }, {
          start: {
            line: 379,
            column: 91
          },
          end: {
            line: 379,
            column: 100
          }
        }],
        line: 379
      },
      "30": {
        loc: {
          start: {
            line: 389,
            column: 36
          },
          end: {
            line: 389,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 36
          },
          end: {
            line: 389,
            column: 49
          }
        }, {
          start: {
            line: 389,
            column: 53
          },
          end: {
            line: 389,
            column: 80
          }
        }],
        line: 389
      },
      "31": {
        loc: {
          start: {
            line: 398,
            column: 27
          },
          end: {
            line: 398,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 398,
            column: 57
          },
          end: {
            line: 398,
            column: 94
          }
        }, {
          start: {
            line: 398,
            column: 97
          },
          end: {
            line: 398,
            column: 106
          }
        }],
        line: 398
      },
      "32": {
        loc: {
          start: {
            line: 399,
            column: 25
          },
          end: {
            line: 399,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 399,
            column: 53
          },
          end: {
            line: 399,
            column: 88
          }
        }, {
          start: {
            line: 399,
            column: 91
          },
          end: {
            line: 399,
            column: 100
          }
        }],
        line: 399
      },
      "33": {
        loc: {
          start: {
            line: 409,
            column: 36
          },
          end: {
            line: 409,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 409,
            column: 36
          },
          end: {
            line: 409,
            column: 49
          }
        }, {
          start: {
            line: 409,
            column: 53
          },
          end: {
            line: 409,
            column: 80
          }
        }],
        line: 409
      },
      "34": {
        loc: {
          start: {
            line: 424,
            column: 36
          },
          end: {
            line: 424,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 36
          },
          end: {
            line: 424,
            column: 49
          }
        }, {
          start: {
            line: 424,
            column: 53
          },
          end: {
            line: 424,
            column: 80
          }
        }],
        line: 424
      },
      "35": {
        loc: {
          start: {
            line: 435,
            column: 25
          },
          end: {
            line: 435,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 435,
            column: 42
          },
          end: {
            line: 435,
            column: 74
          }
        }, {
          start: {
            line: 435,
            column: 77
          },
          end: {
            line: 435,
            column: 104
          }
        }],
        line: 435
      },
      "36": {
        loc: {
          start: {
            line: 440,
            column: 36
          },
          end: {
            line: 440,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 440,
            column: 36
          },
          end: {
            line: 440,
            column: 49
          }
        }, {
          start: {
            line: 440,
            column: 53
          },
          end: {
            line: 440,
            column: 81
          }
        }],
        line: 440
      },
      "37": {
        loc: {
          start: {
            line: 450,
            column: 31
          },
          end: {
            line: 450,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 450,
            column: 31
          },
          end: {
            line: 450,
            column: 60
          }
        }, {
          start: {
            line: 450,
            column: 64
          },
          end: {
            line: 450,
            column: 68
          }
        }],
        line: 450
      },
      "38": {
        loc: {
          start: {
            line: 462,
            column: 36
          },
          end: {
            line: 462,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 462,
            column: 36
          },
          end: {
            line: 462,
            column: 49
          }
        }, {
          start: {
            line: 462,
            column: 53
          },
          end: {
            line: 462,
            column: 78
          }
        }],
        line: 462
      },
      "39": {
        loc: {
          start: {
            line: 466,
            column: 33
          },
          end: {
            line: 466,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 466,
            column: 40
          },
          end: {
            line: 466,
            column: 41
          }
        }],
        line: 466
      },
      "40": {
        loc: {
          start: {
            line: 466,
            column: 43
          },
          end: {
            line: 466,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 466,
            column: 51
          },
          end: {
            line: 466,
            column: 53
          }
        }],
        line: 466
      },
      "41": {
        loc: {
          start: {
            line: 506,
            column: 36
          },
          end: {
            line: 506,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 506,
            column: 36
          },
          end: {
            line: 506,
            column: 49
          }
        }, {
          start: {
            line: 506,
            column: 53
          },
          end: {
            line: 506,
            column: 80
          }
        }],
        line: 506
      },
      "42": {
        loc: {
          start: {
            line: 516,
            column: 28
          },
          end: {
            line: 516,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 516,
            column: 28
          },
          end: {
            line: 516,
            column: 53
          }
        }, {
          start: {
            line: 516,
            column: 57
          },
          end: {
            line: 516,
            column: 62
          }
        }],
        line: 516
      },
      "43": {
        loc: {
          start: {
            line: 517,
            column: 27
          },
          end: {
            line: 517,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 517,
            column: 54
          },
          end: {
            line: 517,
            column: 88
          }
        }, {
          start: {
            line: 517,
            column: 91
          },
          end: {
            line: 517,
            column: 100
          }
        }],
        line: 517
      },
      "44": {
        loc: {
          start: {
            line: 528,
            column: 36
          },
          end: {
            line: 528,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 528,
            column: 36
          },
          end: {
            line: 528,
            column: 49
          }
        }, {
          start: {
            line: 528,
            column: 53
          },
          end: {
            line: 528,
            column: 77
          }
        }],
        line: 528
      },
      "45": {
        loc: {
          start: {
            line: 543,
            column: 36
          },
          end: {
            line: 543,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 543,
            column: 36
          },
          end: {
            line: 543,
            column: 49
          }
        }, {
          start: {
            line: 543,
            column: 53
          },
          end: {
            line: 543,
            column: 78
          }
        }],
        line: 543
      },
      "46": {
        loc: {
          start: {
            line: 558,
            column: 36
          },
          end: {
            line: 558,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 558,
            column: 36
          },
          end: {
            line: 558,
            column: 49
          }
        }, {
          start: {
            line: 558,
            column: 53
          },
          end: {
            line: 558,
            column: 93
          }
        }],
        line: 558
      },
      "47": {
        loc: {
          start: {
            line: 572,
            column: 45
          },
          end: {
            line: 572,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 572,
            column: 124
          },
          end: {
            line: 572,
            column: 126
          }
        }, {
          start: {
            line: 572,
            column: 129
          },
          end: {
            line: 572,
            column: 135
          }
        }],
        line: 572
      },
      "48": {
        loc: {
          start: {
            line: 572,
            column: 58
          },
          end: {
            line: 572,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 572,
            column: 58
          },
          end: {
            line: 572,
            column: 91
          }
        }, {
          start: {
            line: 572,
            column: 95
          },
          end: {
            line: 572,
            column: 105
          }
        }],
        line: 572
      },
      "49": {
        loc: {
          start: {
            line: 672,
            column: 61
          },
          end: {
            line: 672,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 672,
            column: 140
          },
          end: {
            line: 672,
            column: 142
          }
        }, {
          start: {
            line: 672,
            column: 145
          },
          end: {
            line: 672,
            column: 151
          }
        }],
        line: 672
      },
      "50": {
        loc: {
          start: {
            line: 672,
            column: 74
          },
          end: {
            line: 672,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 672,
            column: 74
          },
          end: {
            line: 672,
            column: 107
          }
        }, {
          start: {
            line: 672,
            column: 111
          },
          end: {
            line: 672,
            column: 121
          }
        }],
        line: 672
      },
      "51": {
        loc: {
          start: {
            line: 672,
            column: 153
          },
          end: {
            line: 672,
            column: 247
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 672,
            column: 236
          },
          end: {
            line: 672,
            column: 238
          }
        }, {
          start: {
            line: 672,
            column: 241
          },
          end: {
            line: 672,
            column: 247
          }
        }],
        line: 672
      },
      "52": {
        loc: {
          start: {
            line: 672,
            column: 166
          },
          end: {
            line: 672,
            column: 217
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 672,
            column: 166
          },
          end: {
            line: 672,
            column: 201
          }
        }, {
          start: {
            line: 672,
            column: 205
          },
          end: {
            line: 672,
            column: 217
          }
        }],
        line: 672
      },
      "53": {
        loc: {
          start: {
            line: 724,
            column: 37
          },
          end: {
            line: 724,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 724,
            column: 124
          },
          end: {
            line: 724,
            column: 126
          }
        }, {
          start: {
            line: 724,
            column: 129
          },
          end: {
            line: 724,
            column: 135
          }
        }],
        line: 724
      },
      "54": {
        loc: {
          start: {
            line: 724,
            column: 50
          },
          end: {
            line: 724,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 724,
            column: 50
          },
          end: {
            line: 724,
            column: 87
          }
        }, {
          start: {
            line: 724,
            column: 91
          },
          end: {
            line: 724,
            column: 105
          }
        }],
        line: 724
      },
      "55": {
        loc: {
          start: {
            line: 724,
            column: 137
          },
          end: {
            line: 724,
            column: 239
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 724,
            column: 228
          },
          end: {
            line: 724,
            column: 230
          }
        }, {
          start: {
            line: 724,
            column: 233
          },
          end: {
            line: 724,
            column: 239
          }
        }],
        line: 724
      },
      "56": {
        loc: {
          start: {
            line: 724,
            column: 150
          },
          end: {
            line: 724,
            column: 209
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 724,
            column: 150
          },
          end: {
            line: 724,
            column: 189
          }
        }, {
          start: {
            line: 724,
            column: 193
          },
          end: {
            line: 724,
            column: 209
          }
        }],
        line: 724
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0],
      "26": [0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0],
      "40": [0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\reports.controller.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\reports.controller.ts"],
      sourcesContent: ["import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  Query,\n  UseGuards,\n  Request,\n  HttpException,\n  HttpStatus,\n  Logger,\n  ParseUUIDPipe,\n  ValidationPipe\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiQuery } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { ReportsService } from '../services/reports.service';\nimport { SchedulerService } from '../services/scheduler.service';\nimport { GetUser } from '../decorators/get-user.decorator';\nimport {\n  ReportType,\n  ReportStatus,\n  ScheduleFrequency,\n  ExportFormat,\n  ChartType\n} from '@prisma/client';\nimport {\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsObject,\n  IsArray,\n  IsBoolean,\n  IsDateString,\n  IsEmail,\n  ValidateNested,\n  IsNumber,\n  Min,\n  Max\n} from 'class-validator';\nimport { Type, Transform } from 'class-transformer';\n\n// DTOs\nclass DateRangeDto {\n  @IsDateString()\n  start: string;\n\n  @IsDateString()\n  end: string;\n}\n\nclass ReportFiltersDto {\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => DateRangeDto)\n  dateRange?: DateRangeDto;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  campaigns?: string[];\n\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  platforms?: string[];\n\n  @IsOptional()\n  @IsObject()\n  customFilters?: Record<string, any>;\n}\n\nclass GenerateReportDto {\n  @IsOptional()\n  @IsString()\n  templateId?: string;\n\n  @IsString()\n  name: string;\n\n  @IsEnum(ReportType)\n  type: ReportType;\n\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => ReportFiltersDto)\n  filters?: ReportFiltersDto;\n\n  @IsOptional()\n  @IsArray()\n  @IsEnum(ChartType, { each: true })\n  charts?: ChartType[];\n\n  @IsOptional()\n  @IsBoolean()\n  saveAsTemplate?: boolean;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n}\n\nclass CreateScheduleDto {\n  @IsString()\n  name: string;\n\n  @IsString()\n  templateId: string;\n\n  @IsEnum(ScheduleFrequency)\n  frequency: ScheduleFrequency;\n\n  @IsString()\n  scheduleTime: string; // HH:mm format\n\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Min(0, { each: true })\n  @Max(6, { each: true })\n  scheduleDays?: number[]; // For weekly: 0=Sunday, 1=Monday, etc.\n\n  @IsOptional()\n  @IsNumber()\n  @Min(1)\n  @Max(31)\n  scheduleDay?: number; // For monthly: day of month\n\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => ReportFiltersDto)\n  filters?: ReportFiltersDto;\n\n  @IsOptional()\n  @IsArray()\n  @IsEmail({}, { each: true })\n  emailRecipients?: string[];\n\n  @IsOptional()\n  @IsDateString()\n  startDate?: string;\n\n  @IsOptional()\n  @IsDateString()\n  endDate?: string;\n}\n\nclass UpdateScheduleDto {\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsEnum(ScheduleFrequency)\n  frequency?: ScheduleFrequency;\n\n  @IsOptional()\n  @IsString()\n  scheduleTime?: string;\n\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  scheduleDays?: number[];\n\n  @IsOptional()\n  @IsNumber()\n  scheduleDay?: number;\n\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => ReportFiltersDto)\n  filters?: ReportFiltersDto;\n\n  @IsOptional()\n  @IsArray()\n  @IsEmail({}, { each: true })\n  emailRecipients?: string[];\n\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n\n  @IsOptional()\n  @IsDateString()\n  startDate?: string;\n\n  @IsOptional()\n  @IsDateString()\n  endDate?: string;\n}\n\nclass ExportReportDto {\n  @IsString()\n  reportId: string;\n\n  @IsEnum(ExportFormat)\n  format: ExportFormat;\n\n  @IsOptional()\n  @IsBoolean()\n  includeCharts?: boolean;\n\n  @IsOptional()\n  @IsString()\n  fileName?: string;\n}\n\nclass ShareReportDto {\n  @IsString()\n  reportId: string;\n\n  @IsOptional()\n  @IsArray()\n  @IsEmail({}, { each: true })\n  emails?: string[];\n\n  @IsOptional()\n  @IsBoolean()\n  publicLink?: boolean;\n\n  @IsOptional()\n  @IsDateString()\n  expiresAt?: string;\n}\n\n@ApiTags('Reports')\n@ApiBearerAuth()\n@UseGuards(JwtAuthGuard)\n@Controller('api/reports')\nexport class ReportsController {\n  private readonly logger = new Logger(ReportsController.name);\n\n  constructor(\n    private readonly reportsService: ReportsService,\n    private readonly schedulerService: SchedulerService\n  ) {}\n\n  // GET /api/reports/templates - Get predefined templates\n  @Get('templates')\n  @ApiOperation({ summary: 'Get predefined report templates' })\n  @ApiResponse({ status: 200, description: 'Templates retrieved successfully' })\n  @ApiQuery({ name: 'type', enum: ReportType, required: false })\n  @ApiQuery({ name: 'search', type: 'string', required: false })\n  async getTemplates(\n    @GetUser() user: any,\n    @Query('type') type?: ReportType,\n    @Query('search') search?: string\n  ) {\n    try {\n      this.logger.log(`Getting templates for user ${user.id}`);\n      \n      const templates = await this.reportsService.getTemplates({\n        organizationId: user.organizationId,\n        type,\n        search\n      });\n\n      return {\n        success: true,\n        data: templates,\n        meta: {\n          total: templates.length,\n          types: Object.values(ReportType)\n        }\n      };\n    } catch (error) {\n      this.logger.error('Failed to get templates:', error);\n      throw new HttpException(\n        'Failed to retrieve templates',\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  // POST /api/reports/generate - Generate report\n  @Post('generate')\n  @ApiOperation({ summary: 'Generate a new report' })\n  @ApiResponse({ status: 201, description: 'Report generated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid request data' })\n  async generateReport(\n    @GetUser() user: any,\n    @Body(ValidationPipe) generateReportDto: GenerateReportDto\n  ) {\n    try {\n      this.logger.log(`Generating report for user ${user.id}: ${generateReportDto.name}`);\n      \n      const report = await this.reportsService.generateReport({\n        ...generateReportDto,\n        userId: user.id,\n        organizationId: user.organizationId\n      });\n\n      return {\n        success: true,\n        data: report,\n        message: 'Report generated successfully'\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate report:', error);\n      throw new HttpException(\n        error.message || 'Failed to generate report',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  // GET /api/reports/schedule - Get scheduled reports\n  @Get('schedule')\n  @ApiOperation({ summary: 'Get scheduled reports' })\n  @ApiResponse({ status: 200, description: 'Scheduled reports retrieved successfully' })\n  @ApiQuery({ name: 'page', type: 'number', required: false })\n  @ApiQuery({ name: 'limit', type: 'number', required: false })\n  @ApiQuery({ name: 'active', type: 'boolean', required: false })\n  async getScheduledReports(\n    @GetUser() user: any,\n    @Query('page', new ValidationPipe({ transform: true })) page: number = 1,\n    @Query('limit', new ValidationPipe({ transform: true })) limit: number = 10,\n    @Query('active', new ValidationPipe({ transform: true })) active?: boolean\n  ) {\n    try {\n      this.logger.log(`Getting scheduled reports for user ${user.id}`);\n      \n      const schedules = await this.schedulerService.getSchedulesByUser(user.id);\n      \n      // Filter by active status if specified\n      const filteredSchedules = active !== undefined \n        ? schedules.filter(s => s.isActive === active)\n        : schedules;\n\n      // Pagination\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedSchedules = filteredSchedules.slice(startIndex, endIndex);\n\n      return {\n        success: true,\n        data: paginatedSchedules,\n        meta: {\n          total: filteredSchedules.length,\n          page,\n          limit,\n          totalPages: Math.ceil(filteredSchedules.length / limit)\n        }\n      };\n    } catch (error) {\n      this.logger.error('Failed to get scheduled reports:', error);\n      throw new HttpException(\n        'Failed to retrieve scheduled reports',\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  // POST /api/reports/schedule - Create scheduled report\n  @Post('schedule')\n  @ApiOperation({ summary: 'Create a scheduled report' })\n  @ApiResponse({ status: 201, description: 'Schedule created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid schedule data' })\n  async createSchedule(\n    @GetUser() user: any,\n    @Body(ValidationPipe) createScheduleDto: CreateScheduleDto\n  ) {\n    try {\n      this.logger.log(`Creating schedule for user ${user.id}: ${createScheduleDto.name}`);\n      \n      const schedule = await this.schedulerService.createSchedule({\n        ...createScheduleDto,\n        userId: user.id,\n        organizationId: user.organizationId,\n        startDate: createScheduleDto.startDate ? new Date(createScheduleDto.startDate) : undefined,\n        endDate: createScheduleDto.endDate ? new Date(createScheduleDto.endDate) : undefined\n      });\n\n      return {\n        success: true,\n        data: schedule,\n        message: 'Schedule created successfully'\n      };\n    } catch (error) {\n      this.logger.error('Failed to create schedule:', error);\n      throw new HttpException(\n        error.message || 'Failed to create schedule',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  // PUT /api/reports/schedule/:id - Update scheduled report\n  @Put('schedule/:id')\n  @ApiOperation({ summary: 'Update a scheduled report' })\n  @ApiResponse({ status: 200, description: 'Schedule updated successfully' })\n  @ApiResponse({ status: 404, description: 'Schedule not found' })\n  async updateSchedule(\n    @GetUser() user: any,\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body(ValidationPipe) updateScheduleDto: UpdateScheduleDto\n  ) {\n    try {\n      this.logger.log(`Updating schedule ${id} for user ${user.id}`);\n      \n      const schedule = await this.schedulerService.updateSchedule(id, {\n        ...updateScheduleDto,\n        startDate: updateScheduleDto.startDate ? new Date(updateScheduleDto.startDate) : undefined,\n        endDate: updateScheduleDto.endDate ? new Date(updateScheduleDto.endDate) : undefined\n      });\n\n      return {\n        success: true,\n        data: schedule,\n        message: 'Schedule updated successfully'\n      };\n    } catch (error) {\n      this.logger.error('Failed to update schedule:', error);\n      throw new HttpException(\n        error.message || 'Failed to update schedule',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  // DELETE /api/reports/schedule/:id - Delete scheduled report\n  @Delete('schedule/:id')\n  @ApiOperation({ summary: 'Delete a scheduled report' })\n  @ApiResponse({ status: 200, description: 'Schedule deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Schedule not found' })\n  async deleteSchedule(\n    @GetUser() user: any,\n    @Param('id', ParseUUIDPipe) id: string\n  ) {\n    try {\n      this.logger.log(`Deleting schedule ${id} for user ${user.id}`);\n      \n      await this.schedulerService.deleteSchedule(id);\n\n      return {\n        success: true,\n        message: 'Schedule deleted successfully'\n      };\n    } catch (error) {\n      this.logger.error('Failed to delete schedule:', error);\n      throw new HttpException(\n        error.message || 'Failed to delete schedule',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  // POST /api/reports/schedule/:id/execute - Execute schedule manually\n  @Post('schedule/:id/execute')\n  @ApiOperation({ summary: 'Execute a scheduled report manually' })\n  @ApiResponse({ status: 200, description: 'Schedule executed successfully' })\n  async executeSchedule(\n    @GetUser() user: any,\n    @Param('id', ParseUUIDPipe) id: string\n  ) {\n    try {\n      this.logger.log(`Manually executing schedule ${id} for user ${user.id}`);\n      \n      const result = await this.schedulerService.executeScheduleManually(id);\n\n      return {\n        success: result.success,\n        data: result,\n        message: result.success ? 'Schedule executed successfully' : 'Schedule execution failed'\n      };\n    } catch (error) {\n      this.logger.error('Failed to execute schedule:', error);\n      throw new HttpException(\n        error.message || 'Failed to execute schedule',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  // POST /api/reports/export - Export report\n  @Post('export')\n  @ApiOperation({ summary: 'Export report to PDF or Excel' })\n  @ApiResponse({ status: 200, description: 'Report exported successfully' })\n  @ApiResponse({ status: 404, description: 'Report not found' })\n  async exportReport(\n    @GetUser() user: any,\n    @Body(ValidationPipe) exportReportDto: ExportReportDto\n  ) {\n    try {\n      this.logger.log(`Exporting report ${exportReportDto.reportId} for user ${user.id}`);\n      \n      const exportResult = await this.reportsService.exportReport({\n        reportId: exportReportDto.reportId,\n        format: exportReportDto.format,\n        includeCharts: exportReportDto.includeCharts ?? true,\n        fileName: exportReportDto.fileName,\n        userId: user.id\n      });\n\n      return {\n        success: true,\n        data: exportResult,\n        message: 'Report exported successfully'\n      };\n    } catch (error) {\n      this.logger.error('Failed to export report:', error);\n      throw new HttpException(\n        error.message || 'Failed to export report',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  // GET /api/reports/history - Get report history\n  @Get('history')\n  @ApiOperation({ summary: 'Get report generation history' })\n  @ApiResponse({ status: 200, description: 'Report history retrieved successfully' })\n  @ApiQuery({ name: 'page', type: 'number', required: false })\n  @ApiQuery({ name: 'limit', type: 'number', required: false })\n  @ApiQuery({ name: 'type', enum: ReportType, required: false })\n  @ApiQuery({ name: 'status', enum: ReportStatus, required: false })\n  @ApiQuery({ name: 'search', type: 'string', required: false })\n  async getReportHistory(\n    @GetUser() user: any,\n    @Query('page', new ValidationPipe({ transform: true })) page: number = 1,\n    @Query('limit', new ValidationPipe({ transform: true })) limit: number = 20,\n    @Query('type') type?: ReportType,\n    @Query('status') status?: ReportStatus,\n    @Query('search') search?: string\n  ) {\n    try {\n      this.logger.log(`Getting report history for user ${user.id}`);\n      \n      const history = await this.reportsService.getReportHistory({\n        userId: user.id,\n        organizationId: user.organizationId,\n        page,\n        limit,\n        type,\n        status,\n        search\n      });\n\n      return {\n        success: true,\n        data: history.reports,\n        meta: {\n          total: history.total,\n          page,\n          limit,\n          totalPages: Math.ceil(history.total / limit)\n        }\n      };\n    } catch (error) {\n      this.logger.error('Failed to get report history:', error);\n      throw new HttpException(\n        'Failed to retrieve report history',\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  // GET /api/reports/:id - Get specific report\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a specific report by ID' })\n  @ApiResponse({ status: 200, description: 'Report retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Report not found' })\n  async getReport(\n    @GetUser() user: any,\n    @Param('id', ParseUUIDPipe) id: string\n  ) {\n    try {\n      this.logger.log(`Getting report ${id} for user ${user.id}`);\n      \n      const report = await this.reportsService.getReportById(id, user.id);\n\n      return {\n        success: true,\n        data: report\n      };\n    } catch (error) {\n      this.logger.error('Failed to get report:', error);\n      throw new HttpException(\n        error.message || 'Failed to retrieve report',\n        HttpStatus.NOT_FOUND\n      );\n    }\n  }\n\n  // POST /api/reports/:id/share - Share report\n  @Post(':id/share')\n  @ApiOperation({ summary: 'Share a report via email or public link' })\n  @ApiResponse({ status: 200, description: 'Report shared successfully' })\n  @ApiResponse({ status: 404, description: 'Report not found' })\n  async shareReport(\n    @GetUser() user: any,\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body(ValidationPipe) shareReportDto: ShareReportDto\n  ) {\n    try {\n      this.logger.log(`Sharing report ${id} for user ${user.id}`);\n      \n      const shareResult = await this.reportsService.shareReport({\n        reportId: id,\n        emails: shareReportDto.emails,\n        publicLink: shareReportDto.publicLink ?? false,\n        expiresAt: shareReportDto.expiresAt ? new Date(shareReportDto.expiresAt) : undefined,\n        userId: user.id\n      });\n\n      return {\n        success: true,\n        data: shareResult,\n        message: 'Report shared successfully'\n      };\n    } catch (error) {\n      this.logger.error('Failed to share report:', error);\n      throw new HttpException(\n        error.message || 'Failed to share report',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  // DELETE /api/reports/:id - Delete report\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a report' })\n  @ApiResponse({ status: 200, description: 'Report deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Report not found' })\n  async deleteReport(\n    @GetUser() user: any,\n    @Param('id', ParseUUIDPipe) id: string\n  ) {\n    try {\n      this.logger.log(`Deleting report ${id} for user ${user.id}`);\n      \n      await this.reportsService.deleteReport(id, user.id);\n\n      return {\n        success: true,\n        message: 'Report deleted successfully'\n      };\n    } catch (error) {\n      this.logger.error('Failed to delete report:', error);\n      throw new HttpException(\n        error.message || 'Failed to delete report',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  // GET /api/reports/schedule/:id/stats - Get schedule execution statistics\n  @Get('schedule/:id/stats')\n  @ApiOperation({ summary: 'Get schedule execution statistics' })\n  @ApiResponse({ status: 200, description: 'Statistics retrieved successfully' })\n  async getScheduleStats(\n    @GetUser() user: any,\n    @Param('id', ParseUUIDPipe) id: string\n  ) {\n    try {\n      this.logger.log(`Getting schedule stats ${id} for user ${user.id}`);\n      \n      const stats = await this.schedulerService.getExecutionStats(id);\n\n      return {\n        success: true,\n        data: stats\n      };\n    } catch (error) {\n      this.logger.error('Failed to get schedule stats:', error);\n      throw new HttpException(\n        error.message || 'Failed to retrieve schedule statistics',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bad3865ad869d7adc0e354a0a945fe009542af2b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_yncmp0ddr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_yncmp0ddr();
var __decorate =
/* istanbul ignore next */
(cov_yncmp0ddr().s[0]++,
/* istanbul ignore next */
(cov_yncmp0ddr().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_yncmp0ddr().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_yncmp0ddr().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_yncmp0ddr().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_yncmp0ddr().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_yncmp0ddr().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_yncmp0ddr().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_yncmp0ddr().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_yncmp0ddr().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_yncmp0ddr().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_yncmp0ddr().b[3][0]++;
    cov_yncmp0ddr().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_yncmp0ddr().b[3][1]++;
    cov_yncmp0ddr().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_yncmp0ddr().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_yncmp0ddr().b[5][0]++;
        cov_yncmp0ddr().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_yncmp0ddr().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_yncmp0ddr().s[9]++;
  return /* istanbul ignore next */(cov_yncmp0ddr().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_yncmp0ddr().s[10]++,
/* istanbul ignore next */
(cov_yncmp0ddr().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_yncmp0ddr().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_yncmp0ddr().f[1]++;
  cov_yncmp0ddr().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_yncmp0ddr().b[11][0]++;
    cov_yncmp0ddr().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_yncmp0ddr().b[11][1]++;
  }
}));
var __param =
/* istanbul ignore next */
(cov_yncmp0ddr().s[13]++,
/* istanbul ignore next */
(cov_yncmp0ddr().b[13][0]++, this) &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[13][1]++, this.__param) ||
/* istanbul ignore next */
(cov_yncmp0ddr().b[13][2]++, function (paramIndex, decorator) {
  /* istanbul ignore next */
  cov_yncmp0ddr().f[2]++;
  cov_yncmp0ddr().s[14]++;
  return function (target, key) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[3]++;
    cov_yncmp0ddr().s[15]++;
    decorator(target, key, paramIndex);
  };
}));
var ReportsController_1;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
import { Controller, Get, Post, Put, Delete, Body, Param, Query, UseGuards, HttpException, HttpStatus, Logger, ParseUUIDPipe, ValidationPipe } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiQuery } from '@nestjs/swagger';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { ReportsService } from '../services/reports.service';
import { SchedulerService } from '../services/scheduler.service';
import { GetUser } from '../decorators/get-user.decorator';
import { ReportType, ReportStatus, ScheduleFrequency, ExportFormat, ChartType } from '@prisma/client';
import { IsString, IsOptional, IsEnum, IsObject, IsArray, IsBoolean, IsDateString, IsEmail, ValidateNested, IsNumber, Min, Max } from 'class-validator';
import { Type } from 'class-transformer';
// DTOs
class DateRangeDto {
  start;
  end;
}
/* istanbul ignore next */
cov_yncmp0ddr().s[16]++;
__decorate([IsDateString(), __metadata("design:type", String)], DateRangeDto.prototype, "start", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[17]++;
__decorate([IsDateString(), __metadata("design:type", String)], DateRangeDto.prototype, "end", void 0);
class ReportFiltersDto {
  dateRange;
  campaigns;
  platforms;
  customFilters;
}
/* istanbul ignore next */
cov_yncmp0ddr().s[18]++;
__decorate([IsOptional(), ValidateNested(), Type(() => {
  /* istanbul ignore next */
  cov_yncmp0ddr().f[4]++;
  cov_yncmp0ddr().s[19]++;
  return DateRangeDto;
}), __metadata("design:type", DateRangeDto)], ReportFiltersDto.prototype, "dateRange", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[20]++;
__decorate([IsOptional(), IsArray(), IsString({
  each: true
}), __metadata("design:type", Array)], ReportFiltersDto.prototype, "campaigns", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[21]++;
__decorate([IsOptional(), IsArray(), IsString({
  each: true
}), __metadata("design:type", Array)], ReportFiltersDto.prototype, "platforms", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[22]++;
__decorate([IsOptional(), IsObject(), __metadata("design:type", typeof (_a =
/* istanbul ignore next */
(cov_yncmp0ddr().b[15][0]++, typeof Record !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[15][1]++, Record)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[14][0]++, _a) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[14][1]++, Object))], ReportFiltersDto.prototype, "customFilters", void 0);
class GenerateReportDto {
  templateId;
  name;
  type;
  filters;
  charts;
  saveAsTemplate;
  description;
}
/* istanbul ignore next */
cov_yncmp0ddr().s[23]++;
__decorate([IsOptional(), IsString(), __metadata("design:type", String)], GenerateReportDto.prototype, "templateId", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[24]++;
__decorate([IsString(), __metadata("design:type", String)], GenerateReportDto.prototype, "name", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[25]++;
__decorate([IsEnum(ReportType), __metadata("design:type", typeof (_b =
/* istanbul ignore next */
(cov_yncmp0ddr().b[17][0]++, typeof ReportType !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[17][1]++, ReportType)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[16][0]++, _b) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[16][1]++, Object))], GenerateReportDto.prototype, "type", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[26]++;
__decorate([IsOptional(), ValidateNested(), Type(() => {
  /* istanbul ignore next */
  cov_yncmp0ddr().f[5]++;
  cov_yncmp0ddr().s[27]++;
  return ReportFiltersDto;
}), __metadata("design:type", ReportFiltersDto)], GenerateReportDto.prototype, "filters", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[28]++;
__decorate([IsOptional(), IsArray(), IsEnum(ChartType, {
  each: true
}), __metadata("design:type", Array)], GenerateReportDto.prototype, "charts", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[29]++;
__decorate([IsOptional(), IsBoolean(), __metadata("design:type", Boolean)], GenerateReportDto.prototype, "saveAsTemplate", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[30]++;
__decorate([IsOptional(), IsString(), __metadata("design:type", String)], GenerateReportDto.prototype, "description", void 0);
class CreateScheduleDto {
  name;
  templateId;
  frequency;
  scheduleTime; // HH:mm format
  scheduleDays; // For weekly: 0=Sunday, 1=Monday, etc.
  scheduleDay; // For monthly: day of month
  filters;
  emailRecipients;
  startDate;
  endDate;
}
/* istanbul ignore next */
cov_yncmp0ddr().s[31]++;
__decorate([IsString(), __metadata("design:type", String)], CreateScheduleDto.prototype, "name", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[32]++;
__decorate([IsString(), __metadata("design:type", String)], CreateScheduleDto.prototype, "templateId", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[33]++;
__decorate([IsEnum(ScheduleFrequency), __metadata("design:type", typeof (_c =
/* istanbul ignore next */
(cov_yncmp0ddr().b[19][0]++, typeof ScheduleFrequency !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[19][1]++, ScheduleFrequency)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[18][0]++, _c) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[18][1]++, Object))], CreateScheduleDto.prototype, "frequency", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[34]++;
__decorate([IsString(), __metadata("design:type", String)], CreateScheduleDto.prototype, "scheduleTime", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[35]++;
__decorate([IsOptional(), IsArray(), IsNumber({}, {
  each: true
}), Min(0, {
  each: true
}), Max(6, {
  each: true
}), __metadata("design:type", Array)], CreateScheduleDto.prototype, "scheduleDays", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[36]++;
__decorate([IsOptional(), IsNumber(), Min(1), Max(31), __metadata("design:type", Number)], CreateScheduleDto.prototype, "scheduleDay", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[37]++;
__decorate([IsOptional(), ValidateNested(), Type(() => {
  /* istanbul ignore next */
  cov_yncmp0ddr().f[6]++;
  cov_yncmp0ddr().s[38]++;
  return ReportFiltersDto;
}), __metadata("design:type", ReportFiltersDto)], CreateScheduleDto.prototype, "filters", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[39]++;
__decorate([IsOptional(), IsArray(), IsEmail({}, {
  each: true
}), __metadata("design:type", Array)], CreateScheduleDto.prototype, "emailRecipients", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[40]++;
__decorate([IsOptional(), IsDateString(), __metadata("design:type", String)], CreateScheduleDto.prototype, "startDate", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[41]++;
__decorate([IsOptional(), IsDateString(), __metadata("design:type", String)], CreateScheduleDto.prototype, "endDate", void 0);
class UpdateScheduleDto {
  name;
  frequency;
  scheduleTime;
  scheduleDays;
  scheduleDay;
  filters;
  emailRecipients;
  isActive;
  startDate;
  endDate;
}
/* istanbul ignore next */
cov_yncmp0ddr().s[42]++;
__decorate([IsOptional(), IsString(), __metadata("design:type", String)], UpdateScheduleDto.prototype, "name", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[43]++;
__decorate([IsOptional(), IsEnum(ScheduleFrequency), __metadata("design:type", typeof (_d =
/* istanbul ignore next */
(cov_yncmp0ddr().b[21][0]++, typeof ScheduleFrequency !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[21][1]++, ScheduleFrequency)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[20][0]++, _d) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[20][1]++, Object))], UpdateScheduleDto.prototype, "frequency", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[44]++;
__decorate([IsOptional(), IsString(), __metadata("design:type", String)], UpdateScheduleDto.prototype, "scheduleTime", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[45]++;
__decorate([IsOptional(), IsArray(), IsNumber({}, {
  each: true
}), __metadata("design:type", Array)], UpdateScheduleDto.prototype, "scheduleDays", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[46]++;
__decorate([IsOptional(), IsNumber(), __metadata("design:type", Number)], UpdateScheduleDto.prototype, "scheduleDay", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[47]++;
__decorate([IsOptional(), ValidateNested(), Type(() => {
  /* istanbul ignore next */
  cov_yncmp0ddr().f[7]++;
  cov_yncmp0ddr().s[48]++;
  return ReportFiltersDto;
}), __metadata("design:type", ReportFiltersDto)], UpdateScheduleDto.prototype, "filters", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[49]++;
__decorate([IsOptional(), IsArray(), IsEmail({}, {
  each: true
}), __metadata("design:type", Array)], UpdateScheduleDto.prototype, "emailRecipients", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[50]++;
__decorate([IsOptional(), IsBoolean(), __metadata("design:type", Boolean)], UpdateScheduleDto.prototype, "isActive", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[51]++;
__decorate([IsOptional(), IsDateString(), __metadata("design:type", String)], UpdateScheduleDto.prototype, "startDate", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[52]++;
__decorate([IsOptional(), IsDateString(), __metadata("design:type", String)], UpdateScheduleDto.prototype, "endDate", void 0);
class ExportReportDto {
  reportId;
  format;
  includeCharts;
  fileName;
}
/* istanbul ignore next */
cov_yncmp0ddr().s[53]++;
__decorate([IsString(), __metadata("design:type", String)], ExportReportDto.prototype, "reportId", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[54]++;
__decorate([IsEnum(ExportFormat), __metadata("design:type", typeof (_e =
/* istanbul ignore next */
(cov_yncmp0ddr().b[23][0]++, typeof ExportFormat !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[23][1]++, ExportFormat)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[22][0]++, _e) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[22][1]++, Object))], ExportReportDto.prototype, "format", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[55]++;
__decorate([IsOptional(), IsBoolean(), __metadata("design:type", Boolean)], ExportReportDto.prototype, "includeCharts", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[56]++;
__decorate([IsOptional(), IsString(), __metadata("design:type", String)], ExportReportDto.prototype, "fileName", void 0);
class ShareReportDto {
  reportId;
  emails;
  publicLink;
  expiresAt;
}
/* istanbul ignore next */
cov_yncmp0ddr().s[57]++;
__decorate([IsString(), __metadata("design:type", String)], ShareReportDto.prototype, "reportId", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[58]++;
__decorate([IsOptional(), IsArray(), IsEmail({}, {
  each: true
}), __metadata("design:type", Array)], ShareReportDto.prototype, "emails", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[59]++;
__decorate([IsOptional(), IsBoolean(), __metadata("design:type", Boolean)], ShareReportDto.prototype, "publicLink", void 0);
/* istanbul ignore next */
cov_yncmp0ddr().s[60]++;
__decorate([IsOptional(), IsDateString(), __metadata("design:type", String)], ShareReportDto.prototype, "expiresAt", void 0);
let ReportsController =
/* istanbul ignore next */
(cov_yncmp0ddr().s[61]++, ReportsController_1 = class ReportsController {
  reportsService;
  schedulerService;
  logger =
  /* istanbul ignore next */
  (cov_yncmp0ddr().s[62]++, new Logger(ReportsController_1.name));
  constructor(reportsService, schedulerService) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[8]++;
    cov_yncmp0ddr().s[63]++;
    this.reportsService = reportsService;
    /* istanbul ignore next */
    cov_yncmp0ddr().s[64]++;
    this.schedulerService = schedulerService;
  }
  // GET /api/reports/templates - Get predefined templates
  async getTemplates(user, type, search) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[9]++;
    cov_yncmp0ddr().s[65]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[66]++;
      this.logger.log(`Getting templates for user ${user.id}`);
      const templates =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[67]++, await this.reportsService.getTemplates({
        organizationId: user.organizationId,
        type,
        search
      }));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[68]++;
      return {
        success: true,
        data: templates,
        meta: {
          total: templates.length,
          types: Object.values(ReportType)
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[69]++;
      this.logger.error('Failed to get templates:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[70]++;
      throw new HttpException('Failed to retrieve templates', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
  // POST /api/reports/generate - Generate report
  async generateReport(user, generateReportDto) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[10]++;
    cov_yncmp0ddr().s[71]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[72]++;
      this.logger.log(`Generating report for user ${user.id}: ${generateReportDto.name}`);
      const report =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[73]++, await this.reportsService.generateReport({
        ...generateReportDto,
        userId: user.id,
        organizationId: user.organizationId
      }));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[74]++;
      return {
        success: true,
        data: report,
        message: 'Report generated successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[75]++;
      this.logger.error('Failed to generate report:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[76]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[24][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[24][1]++, 'Failed to generate report'), HttpStatus.BAD_REQUEST);
    }
  }
  // GET /api/reports/schedule - Get scheduled reports
  async getScheduledReports(user, page =
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[25][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[26][0]++, 10), active) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[11]++;
    cov_yncmp0ddr().s[77]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[78]++;
      this.logger.log(`Getting scheduled reports for user ${user.id}`);
      const schedules =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[79]++, await this.schedulerService.getSchedulesByUser(user.id));
      // Filter by active status if specified
      const filteredSchedules =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[80]++, active !== undefined ?
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[27][0]++, schedules.filter(s => {
        /* istanbul ignore next */
        cov_yncmp0ddr().f[12]++;
        cov_yncmp0ddr().s[81]++;
        return s.isActive === active;
      })) :
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[27][1]++, schedules));
      // Pagination
      const startIndex =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[82]++, (page - 1) * limit);
      const endIndex =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[83]++, startIndex + limit);
      const paginatedSchedules =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[84]++, filteredSchedules.slice(startIndex, endIndex));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[85]++;
      return {
        success: true,
        data: paginatedSchedules,
        meta: {
          total: filteredSchedules.length,
          page,
          limit,
          totalPages: Math.ceil(filteredSchedules.length / limit)
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[86]++;
      this.logger.error('Failed to get scheduled reports:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[87]++;
      throw new HttpException('Failed to retrieve scheduled reports', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
  // POST /api/reports/schedule - Create scheduled report
  async createSchedule(user, createScheduleDto) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[13]++;
    cov_yncmp0ddr().s[88]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[89]++;
      this.logger.log(`Creating schedule for user ${user.id}: ${createScheduleDto.name}`);
      const schedule =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[90]++, await this.schedulerService.createSchedule({
        ...createScheduleDto,
        userId: user.id,
        organizationId: user.organizationId,
        startDate: createScheduleDto.startDate ?
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[28][0]++, new Date(createScheduleDto.startDate)) :
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[28][1]++, undefined),
        endDate: createScheduleDto.endDate ?
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[29][0]++, new Date(createScheduleDto.endDate)) :
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[29][1]++, undefined)
      }));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[91]++;
      return {
        success: true,
        data: schedule,
        message: 'Schedule created successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[92]++;
      this.logger.error('Failed to create schedule:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[93]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[30][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[30][1]++, 'Failed to create schedule'), HttpStatus.BAD_REQUEST);
    }
  }
  // PUT /api/reports/schedule/:id - Update scheduled report
  async updateSchedule(user, id, updateScheduleDto) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[14]++;
    cov_yncmp0ddr().s[94]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[95]++;
      this.logger.log(`Updating schedule ${id} for user ${user.id}`);
      const schedule =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[96]++, await this.schedulerService.updateSchedule(id, {
        ...updateScheduleDto,
        startDate: updateScheduleDto.startDate ?
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[31][0]++, new Date(updateScheduleDto.startDate)) :
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[31][1]++, undefined),
        endDate: updateScheduleDto.endDate ?
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[32][0]++, new Date(updateScheduleDto.endDate)) :
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[32][1]++, undefined)
      }));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[97]++;
      return {
        success: true,
        data: schedule,
        message: 'Schedule updated successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[98]++;
      this.logger.error('Failed to update schedule:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[99]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[33][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[33][1]++, 'Failed to update schedule'), HttpStatus.BAD_REQUEST);
    }
  }
  // DELETE /api/reports/schedule/:id - Delete scheduled report
  async deleteSchedule(user, id) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[15]++;
    cov_yncmp0ddr().s[100]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[101]++;
      this.logger.log(`Deleting schedule ${id} for user ${user.id}`);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[102]++;
      await this.schedulerService.deleteSchedule(id);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[103]++;
      return {
        success: true,
        message: 'Schedule deleted successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[104]++;
      this.logger.error('Failed to delete schedule:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[105]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[34][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[34][1]++, 'Failed to delete schedule'), HttpStatus.BAD_REQUEST);
    }
  }
  // POST /api/reports/schedule/:id/execute - Execute schedule manually
  async executeSchedule(user, id) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[16]++;
    cov_yncmp0ddr().s[106]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[107]++;
      this.logger.log(`Manually executing schedule ${id} for user ${user.id}`);
      const result =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[108]++, await this.schedulerService.executeScheduleManually(id));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[109]++;
      return {
        success: result.success,
        data: result,
        message: result.success ?
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[35][0]++, 'Schedule executed successfully') :
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[35][1]++, 'Schedule execution failed')
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[110]++;
      this.logger.error('Failed to execute schedule:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[111]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[36][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[36][1]++, 'Failed to execute schedule'), HttpStatus.BAD_REQUEST);
    }
  }
  // POST /api/reports/export - Export report
  async exportReport(user, exportReportDto) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[17]++;
    cov_yncmp0ddr().s[112]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[113]++;
      this.logger.log(`Exporting report ${exportReportDto.reportId} for user ${user.id}`);
      const exportResult =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[114]++, await this.reportsService.exportReport({
        reportId: exportReportDto.reportId,
        format: exportReportDto.format,
        includeCharts:
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[37][0]++, exportReportDto.includeCharts) ??
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[37][1]++, true),
        fileName: exportReportDto.fileName,
        userId: user.id
      }));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[115]++;
      return {
        success: true,
        data: exportResult,
        message: 'Report exported successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[116]++;
      this.logger.error('Failed to export report:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[117]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[38][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[38][1]++, 'Failed to export report'), HttpStatus.BAD_REQUEST);
    }
  }
  // GET /api/reports/history - Get report history
  async getReportHistory(user, page =
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[39][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_yncmp0ddr().b[40][0]++, 20), type, status, search) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[18]++;
    cov_yncmp0ddr().s[118]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[119]++;
      this.logger.log(`Getting report history for user ${user.id}`);
      const history =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[120]++, await this.reportsService.getReportHistory({
        userId: user.id,
        organizationId: user.organizationId,
        page,
        limit,
        type,
        status,
        search
      }));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[121]++;
      return {
        success: true,
        data: history.reports,
        meta: {
          total: history.total,
          page,
          limit,
          totalPages: Math.ceil(history.total / limit)
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[122]++;
      this.logger.error('Failed to get report history:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[123]++;
      throw new HttpException('Failed to retrieve report history', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
  // GET /api/reports/:id - Get specific report
  async getReport(user, id) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[19]++;
    cov_yncmp0ddr().s[124]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[125]++;
      this.logger.log(`Getting report ${id} for user ${user.id}`);
      const report =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[126]++, await this.reportsService.getReportById(id, user.id));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[127]++;
      return {
        success: true,
        data: report
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[128]++;
      this.logger.error('Failed to get report:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[129]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[41][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[41][1]++, 'Failed to retrieve report'), HttpStatus.NOT_FOUND);
    }
  }
  // POST /api/reports/:id/share - Share report
  async shareReport(user, id, shareReportDto) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[20]++;
    cov_yncmp0ddr().s[130]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[131]++;
      this.logger.log(`Sharing report ${id} for user ${user.id}`);
      const shareResult =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[132]++, await this.reportsService.shareReport({
        reportId: id,
        emails: shareReportDto.emails,
        publicLink:
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[42][0]++, shareReportDto.publicLink) ??
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[42][1]++, false),
        expiresAt: shareReportDto.expiresAt ?
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[43][0]++, new Date(shareReportDto.expiresAt)) :
        /* istanbul ignore next */
        (cov_yncmp0ddr().b[43][1]++, undefined),
        userId: user.id
      }));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[133]++;
      return {
        success: true,
        data: shareResult,
        message: 'Report shared successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[134]++;
      this.logger.error('Failed to share report:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[135]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[44][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[44][1]++, 'Failed to share report'), HttpStatus.BAD_REQUEST);
    }
  }
  // DELETE /api/reports/:id - Delete report
  async deleteReport(user, id) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[21]++;
    cov_yncmp0ddr().s[136]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[137]++;
      this.logger.log(`Deleting report ${id} for user ${user.id}`);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[138]++;
      await this.reportsService.deleteReport(id, user.id);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[139]++;
      return {
        success: true,
        message: 'Report deleted successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[140]++;
      this.logger.error('Failed to delete report:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[141]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[45][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[45][1]++, 'Failed to delete report'), HttpStatus.BAD_REQUEST);
    }
  }
  // GET /api/reports/schedule/:id/stats - Get schedule execution statistics
  async getScheduleStats(user, id) {
    /* istanbul ignore next */
    cov_yncmp0ddr().f[22]++;
    cov_yncmp0ddr().s[142]++;
    try {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[143]++;
      this.logger.log(`Getting schedule stats ${id} for user ${user.id}`);
      const stats =
      /* istanbul ignore next */
      (cov_yncmp0ddr().s[144]++, await this.schedulerService.getExecutionStats(id));
      /* istanbul ignore next */
      cov_yncmp0ddr().s[145]++;
      return {
        success: true,
        data: stats
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_yncmp0ddr().s[146]++;
      this.logger.error('Failed to get schedule stats:', error);
      /* istanbul ignore next */
      cov_yncmp0ddr().s[147]++;
      throw new HttpException(
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[46][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_yncmp0ddr().b[46][1]++, 'Failed to retrieve schedule statistics'), HttpStatus.BAD_REQUEST);
    }
  }
});
/* istanbul ignore next */
cov_yncmp0ddr().s[148]++;
__decorate([Get('templates'), ApiOperation({
  summary: 'Get predefined report templates'
}), ApiResponse({
  status: 200,
  description: 'Templates retrieved successfully'
}), ApiQuery({
  name: 'type',
  enum: ReportType,
  required: false
}), ApiQuery({
  name: 'search',
  type: 'string',
  required: false
}), __param(0, GetUser()), __param(1, Query('type')), __param(2, Query('search')), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, typeof (_h =
/* istanbul ignore next */
(cov_yncmp0ddr().b[48][0]++, typeof ReportType !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[48][1]++, ReportType)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[47][0]++, _h) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[47][1]++, Object), String]), __metadata("design:returntype", Promise)], ReportsController.prototype, "getTemplates", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[149]++;
__decorate([Post('generate'), ApiOperation({
  summary: 'Generate a new report'
}), ApiResponse({
  status: 201,
  description: 'Report generated successfully'
}), ApiResponse({
  status: 400,
  description: 'Invalid request data'
}), __param(0, GetUser()), __param(1, Body(ValidationPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, GenerateReportDto]), __metadata("design:returntype", Promise)], ReportsController.prototype, "generateReport", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[150]++;
__decorate([Get('schedule'), ApiOperation({
  summary: 'Get scheduled reports'
}), ApiResponse({
  status: 200,
  description: 'Scheduled reports retrieved successfully'
}), ApiQuery({
  name: 'page',
  type: 'number',
  required: false
}), ApiQuery({
  name: 'limit',
  type: 'number',
  required: false
}), ApiQuery({
  name: 'active',
  type: 'boolean',
  required: false
}), __param(0, GetUser()), __param(1, Query('page', new ValidationPipe({
  transform: true
}))), __param(2, Query('limit', new ValidationPipe({
  transform: true
}))), __param(3, Query('active', new ValidationPipe({
  transform: true
}))), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Number, Number, Boolean]), __metadata("design:returntype", Promise)], ReportsController.prototype, "getScheduledReports", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[151]++;
__decorate([Post('schedule'), ApiOperation({
  summary: 'Create a scheduled report'
}), ApiResponse({
  status: 201,
  description: 'Schedule created successfully'
}), ApiResponse({
  status: 400,
  description: 'Invalid schedule data'
}), __param(0, GetUser()), __param(1, Body(ValidationPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, CreateScheduleDto]), __metadata("design:returntype", Promise)], ReportsController.prototype, "createSchedule", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[152]++;
__decorate([Put('schedule/:id'), ApiOperation({
  summary: 'Update a scheduled report'
}), ApiResponse({
  status: 200,
  description: 'Schedule updated successfully'
}), ApiResponse({
  status: 404,
  description: 'Schedule not found'
}), __param(0, GetUser()), __param(1, Param('id', ParseUUIDPipe)), __param(2, Body(ValidationPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String, UpdateScheduleDto]), __metadata("design:returntype", Promise)], ReportsController.prototype, "updateSchedule", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[153]++;
__decorate([Delete('schedule/:id'), ApiOperation({
  summary: 'Delete a scheduled report'
}), ApiResponse({
  status: 200,
  description: 'Schedule deleted successfully'
}), ApiResponse({
  status: 404,
  description: 'Schedule not found'
}), __param(0, GetUser()), __param(1, Param('id', ParseUUIDPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String]), __metadata("design:returntype", Promise)], ReportsController.prototype, "deleteSchedule", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[154]++;
__decorate([Post('schedule/:id/execute'), ApiOperation({
  summary: 'Execute a scheduled report manually'
}), ApiResponse({
  status: 200,
  description: 'Schedule executed successfully'
}), __param(0, GetUser()), __param(1, Param('id', ParseUUIDPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String]), __metadata("design:returntype", Promise)], ReportsController.prototype, "executeSchedule", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[155]++;
__decorate([Post('export'), ApiOperation({
  summary: 'Export report to PDF or Excel'
}), ApiResponse({
  status: 200,
  description: 'Report exported successfully'
}), ApiResponse({
  status: 404,
  description: 'Report not found'
}), __param(0, GetUser()), __param(1, Body(ValidationPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, ExportReportDto]), __metadata("design:returntype", Promise)], ReportsController.prototype, "exportReport", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[156]++;
__decorate([Get('history'), ApiOperation({
  summary: 'Get report generation history'
}), ApiResponse({
  status: 200,
  description: 'Report history retrieved successfully'
}), ApiQuery({
  name: 'page',
  type: 'number',
  required: false
}), ApiQuery({
  name: 'limit',
  type: 'number',
  required: false
}), ApiQuery({
  name: 'type',
  enum: ReportType,
  required: false
}), ApiQuery({
  name: 'status',
  enum: ReportStatus,
  required: false
}), ApiQuery({
  name: 'search',
  type: 'string',
  required: false
}), __param(0, GetUser()), __param(1, Query('page', new ValidationPipe({
  transform: true
}))), __param(2, Query('limit', new ValidationPipe({
  transform: true
}))), __param(3, Query('type')), __param(4, Query('status')), __param(5, Query('search')), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Number, Number, typeof (_j =
/* istanbul ignore next */
(cov_yncmp0ddr().b[50][0]++, typeof ReportType !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[50][1]++, ReportType)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[49][0]++, _j) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[49][1]++, Object), typeof (_k =
/* istanbul ignore next */
(cov_yncmp0ddr().b[52][0]++, typeof ReportStatus !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[52][1]++, ReportStatus)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[51][0]++, _k) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[51][1]++, Object), String]), __metadata("design:returntype", Promise)], ReportsController.prototype, "getReportHistory", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[157]++;
__decorate([Get(':id'), ApiOperation({
  summary: 'Get a specific report by ID'
}), ApiResponse({
  status: 200,
  description: 'Report retrieved successfully'
}), ApiResponse({
  status: 404,
  description: 'Report not found'
}), __param(0, GetUser()), __param(1, Param('id', ParseUUIDPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String]), __metadata("design:returntype", Promise)], ReportsController.prototype, "getReport", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[158]++;
__decorate([Post(':id/share'), ApiOperation({
  summary: 'Share a report via email or public link'
}), ApiResponse({
  status: 200,
  description: 'Report shared successfully'
}), ApiResponse({
  status: 404,
  description: 'Report not found'
}), __param(0, GetUser()), __param(1, Param('id', ParseUUIDPipe)), __param(2, Body(ValidationPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String, ShareReportDto]), __metadata("design:returntype", Promise)], ReportsController.prototype, "shareReport", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[159]++;
__decorate([Delete(':id'), ApiOperation({
  summary: 'Delete a report'
}), ApiResponse({
  status: 200,
  description: 'Report deleted successfully'
}), ApiResponse({
  status: 404,
  description: 'Report not found'
}), __param(0, GetUser()), __param(1, Param('id', ParseUUIDPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String]), __metadata("design:returntype", Promise)], ReportsController.prototype, "deleteReport", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[160]++;
__decorate([Get('schedule/:id/stats'), ApiOperation({
  summary: 'Get schedule execution statistics'
}), ApiResponse({
  status: 200,
  description: 'Statistics retrieved successfully'
}), __param(0, GetUser()), __param(1, Param('id', ParseUUIDPipe)), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, String]), __metadata("design:returntype", Promise)], ReportsController.prototype, "getScheduleStats", null);
/* istanbul ignore next */
cov_yncmp0ddr().s[161]++;
ReportsController = ReportsController_1 = __decorate([ApiTags('Reports'), ApiBearerAuth(), UseGuards(JwtAuthGuard), Controller('api/reports'), __metadata("design:paramtypes", [typeof (_f =
/* istanbul ignore next */
(cov_yncmp0ddr().b[54][0]++, typeof ReportsService !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[54][1]++, ReportsService)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[53][0]++, _f) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[53][1]++, Object), typeof (_g =
/* istanbul ignore next */
(cov_yncmp0ddr().b[56][0]++, typeof SchedulerService !== "undefined") &&
/* istanbul ignore next */
(cov_yncmp0ddr().b[56][1]++, SchedulerService)) === "function" ?
/* istanbul ignore next */
(cov_yncmp0ddr().b[55][0]++, _g) :
/* istanbul ignore next */
(cov_yncmp0ddr().b[55][1]++, Object)])], ReportsController);
export { ReportsController };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfeW5jbXAwZGRyIiwiYWN0dWFsQ292ZXJhZ2UiLCJDb250cm9sbGVyIiwiR2V0IiwiUG9zdCIsIlB1dCIsIkRlbGV0ZSIsIkJvZHkiLCJQYXJhbSIsIlF1ZXJ5IiwiVXNlR3VhcmRzIiwiSHR0cEV4Y2VwdGlvbiIsIkh0dHBTdGF0dXMiLCJMb2dnZXIiLCJQYXJzZVVVSURQaXBlIiwiVmFsaWRhdGlvblBpcGUiLCJBcGlUYWdzIiwiQXBpT3BlcmF0aW9uIiwiQXBpUmVzcG9uc2UiLCJBcGlCZWFyZXJBdXRoIiwiQXBpUXVlcnkiLCJKd3RBdXRoR3VhcmQiLCJSZXBvcnRzU2VydmljZSIsIlNjaGVkdWxlclNlcnZpY2UiLCJHZXRVc2VyIiwiUmVwb3J0VHlwZSIsIlJlcG9ydFN0YXR1cyIsIlNjaGVkdWxlRnJlcXVlbmN5IiwiRXhwb3J0Rm9ybWF0IiwiQ2hhcnRUeXBlIiwiSXNTdHJpbmciLCJJc09wdGlvbmFsIiwiSXNFbnVtIiwiSXNPYmplY3QiLCJJc0FycmF5IiwiSXNCb29sZWFuIiwiSXNEYXRlU3RyaW5nIiwiSXNFbWFpbCIsIlZhbGlkYXRlTmVzdGVkIiwiSXNOdW1iZXIiLCJNaW4iLCJNYXgiLCJUeXBlIiwiRGF0ZVJhbmdlRHRvIiwic3RhcnQiLCJlbmQiLCJzIiwiX19kZWNvcmF0ZSIsIlJlcG9ydEZpbHRlcnNEdG8iLCJkYXRlUmFuZ2UiLCJjYW1wYWlnbnMiLCJwbGF0Zm9ybXMiLCJjdXN0b21GaWx0ZXJzIiwiZWFjaCIsIlJlY29yZCIsImIiLCJfYSIsIk9iamVjdCIsIkdlbmVyYXRlUmVwb3J0RHRvIiwidGVtcGxhdGVJZCIsIm5hbWUiLCJ0eXBlIiwiZmlsdGVycyIsImNoYXJ0cyIsInNhdmVBc1RlbXBsYXRlIiwiZGVzY3JpcHRpb24iLCJfYiIsIkNyZWF0ZVNjaGVkdWxlRHRvIiwiZnJlcXVlbmN5Iiwic2NoZWR1bGVUaW1lIiwic2NoZWR1bGVEYXlzIiwic2NoZWR1bGVEYXkiLCJlbWFpbFJlY2lwaWVudHMiLCJzdGFydERhdGUiLCJlbmREYXRlIiwiX2MiLCJVcGRhdGVTY2hlZHVsZUR0byIsImlzQWN0aXZlIiwiX2QiLCJFeHBvcnRSZXBvcnREdG8iLCJyZXBvcnRJZCIsImZvcm1hdCIsImluY2x1ZGVDaGFydHMiLCJmaWxlTmFtZSIsIl9lIiwiU2hhcmVSZXBvcnREdG8iLCJlbWFpbHMiLCJwdWJsaWNMaW5rIiwiZXhwaXJlc0F0IiwiUmVwb3J0c0NvbnRyb2xsZXIiLCJSZXBvcnRzQ29udHJvbGxlcl8xIiwicmVwb3J0c1NlcnZpY2UiLCJzY2hlZHVsZXJTZXJ2aWNlIiwibG9nZ2VyIiwiY29uc3RydWN0b3IiLCJmIiwiZ2V0VGVtcGxhdGVzIiwidXNlciIsInNlYXJjaCIsImxvZyIsImlkIiwidGVtcGxhdGVzIiwib3JnYW5pemF0aW9uSWQiLCJzdWNjZXNzIiwiZGF0YSIsIm1ldGEiLCJ0b3RhbCIsImxlbmd0aCIsInR5cGVzIiwidmFsdWVzIiwiZXJyb3IiLCJJTlRFUk5BTF9TRVJWRVJfRVJST1IiLCJnZW5lcmF0ZVJlcG9ydCIsImdlbmVyYXRlUmVwb3J0RHRvIiwicmVwb3J0IiwidXNlcklkIiwibWVzc2FnZSIsIkJBRF9SRVFVRVNUIiwiZ2V0U2NoZWR1bGVkUmVwb3J0cyIsInBhZ2UiLCJsaW1pdCIsImFjdGl2ZSIsInNjaGVkdWxlcyIsImdldFNjaGVkdWxlc0J5VXNlciIsImZpbHRlcmVkU2NoZWR1bGVzIiwidW5kZWZpbmVkIiwiZmlsdGVyIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwicGFnaW5hdGVkU2NoZWR1bGVzIiwic2xpY2UiLCJ0b3RhbFBhZ2VzIiwiTWF0aCIsImNlaWwiLCJjcmVhdGVTY2hlZHVsZSIsImNyZWF0ZVNjaGVkdWxlRHRvIiwic2NoZWR1bGUiLCJEYXRlIiwidXBkYXRlU2NoZWR1bGUiLCJ1cGRhdGVTY2hlZHVsZUR0byIsImRlbGV0ZVNjaGVkdWxlIiwiZXhlY3V0ZVNjaGVkdWxlIiwicmVzdWx0IiwiZXhlY3V0ZVNjaGVkdWxlTWFudWFsbHkiLCJleHBvcnRSZXBvcnQiLCJleHBvcnRSZXBvcnREdG8iLCJleHBvcnRSZXN1bHQiLCJnZXRSZXBvcnRIaXN0b3J5Iiwic3RhdHVzIiwiaGlzdG9yeSIsInJlcG9ydHMiLCJnZXRSZXBvcnQiLCJnZXRSZXBvcnRCeUlkIiwiTk9UX0ZPVU5EIiwic2hhcmVSZXBvcnQiLCJzaGFyZVJlcG9ydER0byIsInNoYXJlUmVzdWx0IiwiZGVsZXRlUmVwb3J0IiwiZ2V0U2NoZWR1bGVTdGF0cyIsInN0YXRzIiwiZ2V0RXhlY3V0aW9uU3RhdHMiLCJzdW1tYXJ5IiwiZW51bSIsInJlcXVpcmVkIiwiX19wYXJhbSIsIl9oIiwiU3RyaW5nIiwidHJhbnNmb3JtIiwiX2oiLCJfayIsIl9mIiwiX2ciXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEVuem8gTWFyY2Vsb1xcRGVza3RvcFxcUHJvamV0b3MgRW1wcmVzYVxcU2FhcyBVdG1pZnlcXHV0bWlmeS1jbG9uZVxcYXBwc1xcYXBpXFxzcmNcXGNvbnRyb2xsZXJzXFxyZXBvcnRzLmNvbnRyb2xsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29udHJvbGxlcixcbiAgR2V0LFxuICBQb3N0LFxuICBQdXQsXG4gIERlbGV0ZSxcbiAgQm9keSxcbiAgUGFyYW0sXG4gIFF1ZXJ5LFxuICBVc2VHdWFyZHMsXG4gIFJlcXVlc3QsXG4gIEh0dHBFeGNlcHRpb24sXG4gIEh0dHBTdGF0dXMsXG4gIExvZ2dlcixcbiAgUGFyc2VVVUlEUGlwZSxcbiAgVmFsaWRhdGlvblBpcGVcbn0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgQXBpVGFncywgQXBpT3BlcmF0aW9uLCBBcGlSZXNwb25zZSwgQXBpQmVhcmVyQXV0aCwgQXBpUXVlcnkgfSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xuaW1wb3J0IHsgSnd0QXV0aEd1YXJkIH0gZnJvbSAnLi4vZ3VhcmRzL2p3dC1hdXRoLmd1YXJkJztcbmltcG9ydCB7IFJlcG9ydHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcmVwb3J0cy5zZXJ2aWNlJztcbmltcG9ydCB7IFNjaGVkdWxlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zY2hlZHVsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBHZXRVc2VyIH0gZnJvbSAnLi4vZGVjb3JhdG9ycy9nZXQtdXNlci5kZWNvcmF0b3InO1xuaW1wb3J0IHtcbiAgUmVwb3J0VHlwZSxcbiAgUmVwb3J0U3RhdHVzLFxuICBTY2hlZHVsZUZyZXF1ZW5jeSxcbiAgRXhwb3J0Rm9ybWF0LFxuICBDaGFydFR5cGVcbn0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgSXNTdHJpbmcsXG4gIElzT3B0aW9uYWwsXG4gIElzRW51bSxcbiAgSXNPYmplY3QsXG4gIElzQXJyYXksXG4gIElzQm9vbGVhbixcbiAgSXNEYXRlU3RyaW5nLFxuICBJc0VtYWlsLFxuICBWYWxpZGF0ZU5lc3RlZCxcbiAgSXNOdW1iZXIsXG4gIE1pbixcbiAgTWF4XG59IGZyb20gJ2NsYXNzLXZhbGlkYXRvcic7XG5pbXBvcnQgeyBUeXBlLCBUcmFuc2Zvcm0gfSBmcm9tICdjbGFzcy10cmFuc2Zvcm1lcic7XG5cbi8vIERUT3NcbmNsYXNzIERhdGVSYW5nZUR0byB7XG4gIEBJc0RhdGVTdHJpbmcoKVxuICBzdGFydDogc3RyaW5nO1xuXG4gIEBJc0RhdGVTdHJpbmcoKVxuICBlbmQ6IHN0cmluZztcbn1cblxuY2xhc3MgUmVwb3J0RmlsdGVyc0R0byB7XG4gIEBJc09wdGlvbmFsKClcbiAgQFZhbGlkYXRlTmVzdGVkKClcbiAgQFR5cGUoKCkgPT4gRGF0ZVJhbmdlRHRvKVxuICBkYXRlUmFuZ2U/OiBEYXRlUmFuZ2VEdG87XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNBcnJheSgpXG4gIEBJc1N0cmluZyh7IGVhY2g6IHRydWUgfSlcbiAgY2FtcGFpZ25zPzogc3RyaW5nW107XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNBcnJheSgpXG4gIEBJc1N0cmluZyh7IGVhY2g6IHRydWUgfSlcbiAgcGxhdGZvcm1zPzogc3RyaW5nW107XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNPYmplY3QoKVxuICBjdXN0b21GaWx0ZXJzPzogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuY2xhc3MgR2VuZXJhdGVSZXBvcnREdG8ge1xuICBASXNPcHRpb25hbCgpXG4gIEBJc1N0cmluZygpXG4gIHRlbXBsYXRlSWQ/OiBzdHJpbmc7XG5cbiAgQElzU3RyaW5nKClcbiAgbmFtZTogc3RyaW5nO1xuXG4gIEBJc0VudW0oUmVwb3J0VHlwZSlcbiAgdHlwZTogUmVwb3J0VHlwZTtcblxuICBASXNPcHRpb25hbCgpXG4gIEBWYWxpZGF0ZU5lc3RlZCgpXG4gIEBUeXBlKCgpID0+IFJlcG9ydEZpbHRlcnNEdG8pXG4gIGZpbHRlcnM/OiBSZXBvcnRGaWx0ZXJzRHRvO1xuXG4gIEBJc09wdGlvbmFsKClcbiAgQElzQXJyYXkoKVxuICBASXNFbnVtKENoYXJ0VHlwZSwgeyBlYWNoOiB0cnVlIH0pXG4gIGNoYXJ0cz86IENoYXJ0VHlwZVtdO1xuXG4gIEBJc09wdGlvbmFsKClcbiAgQElzQm9vbGVhbigpXG4gIHNhdmVBc1RlbXBsYXRlPzogYm9vbGVhbjtcblxuICBASXNPcHRpb25hbCgpXG4gIEBJc1N0cmluZygpXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xufVxuXG5jbGFzcyBDcmVhdGVTY2hlZHVsZUR0byB7XG4gIEBJc1N0cmluZygpXG4gIG5hbWU6IHN0cmluZztcblxuICBASXNTdHJpbmcoKVxuICB0ZW1wbGF0ZUlkOiBzdHJpbmc7XG5cbiAgQElzRW51bShTY2hlZHVsZUZyZXF1ZW5jeSlcbiAgZnJlcXVlbmN5OiBTY2hlZHVsZUZyZXF1ZW5jeTtcblxuICBASXNTdHJpbmcoKVxuICBzY2hlZHVsZVRpbWU6IHN0cmluZzsgLy8gSEg6bW0gZm9ybWF0XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNBcnJheSgpXG4gIEBJc051bWJlcih7fSwgeyBlYWNoOiB0cnVlIH0pXG4gIEBNaW4oMCwgeyBlYWNoOiB0cnVlIH0pXG4gIEBNYXgoNiwgeyBlYWNoOiB0cnVlIH0pXG4gIHNjaGVkdWxlRGF5cz86IG51bWJlcltdOyAvLyBGb3Igd2Vla2x5OiAwPVN1bmRheSwgMT1Nb25kYXksIGV0Yy5cblxuICBASXNPcHRpb25hbCgpXG4gIEBJc051bWJlcigpXG4gIEBNaW4oMSlcbiAgQE1heCgzMSlcbiAgc2NoZWR1bGVEYXk/OiBudW1iZXI7IC8vIEZvciBtb250aGx5OiBkYXkgb2YgbW9udGhcblxuICBASXNPcHRpb25hbCgpXG4gIEBWYWxpZGF0ZU5lc3RlZCgpXG4gIEBUeXBlKCgpID0+IFJlcG9ydEZpbHRlcnNEdG8pXG4gIGZpbHRlcnM/OiBSZXBvcnRGaWx0ZXJzRHRvO1xuXG4gIEBJc09wdGlvbmFsKClcbiAgQElzQXJyYXkoKVxuICBASXNFbWFpbCh7fSwgeyBlYWNoOiB0cnVlIH0pXG4gIGVtYWlsUmVjaXBpZW50cz86IHN0cmluZ1tdO1xuXG4gIEBJc09wdGlvbmFsKClcbiAgQElzRGF0ZVN0cmluZygpXG4gIHN0YXJ0RGF0ZT86IHN0cmluZztcblxuICBASXNPcHRpb25hbCgpXG4gIEBJc0RhdGVTdHJpbmcoKVxuICBlbmREYXRlPzogc3RyaW5nO1xufVxuXG5jbGFzcyBVcGRhdGVTY2hlZHVsZUR0byB7XG4gIEBJc09wdGlvbmFsKClcbiAgQElzU3RyaW5nKClcbiAgbmFtZT86IHN0cmluZztcblxuICBASXNPcHRpb25hbCgpXG4gIEBJc0VudW0oU2NoZWR1bGVGcmVxdWVuY3kpXG4gIGZyZXF1ZW5jeT86IFNjaGVkdWxlRnJlcXVlbmN5O1xuXG4gIEBJc09wdGlvbmFsKClcbiAgQElzU3RyaW5nKClcbiAgc2NoZWR1bGVUaW1lPzogc3RyaW5nO1xuXG4gIEBJc09wdGlvbmFsKClcbiAgQElzQXJyYXkoKVxuICBASXNOdW1iZXIoe30sIHsgZWFjaDogdHJ1ZSB9KVxuICBzY2hlZHVsZURheXM/OiBudW1iZXJbXTtcblxuICBASXNPcHRpb25hbCgpXG4gIEBJc051bWJlcigpXG4gIHNjaGVkdWxlRGF5PzogbnVtYmVyO1xuXG4gIEBJc09wdGlvbmFsKClcbiAgQFZhbGlkYXRlTmVzdGVkKClcbiAgQFR5cGUoKCkgPT4gUmVwb3J0RmlsdGVyc0R0bylcbiAgZmlsdGVycz86IFJlcG9ydEZpbHRlcnNEdG87XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNBcnJheSgpXG4gIEBJc0VtYWlsKHt9LCB7IGVhY2g6IHRydWUgfSlcbiAgZW1haWxSZWNpcGllbnRzPzogc3RyaW5nW107XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNCb29sZWFuKClcbiAgaXNBY3RpdmU/OiBib29sZWFuO1xuXG4gIEBJc09wdGlvbmFsKClcbiAgQElzRGF0ZVN0cmluZygpXG4gIHN0YXJ0RGF0ZT86IHN0cmluZztcblxuICBASXNPcHRpb25hbCgpXG4gIEBJc0RhdGVTdHJpbmcoKVxuICBlbmREYXRlPzogc3RyaW5nO1xufVxuXG5jbGFzcyBFeHBvcnRSZXBvcnREdG8ge1xuICBASXNTdHJpbmcoKVxuICByZXBvcnRJZDogc3RyaW5nO1xuXG4gIEBJc0VudW0oRXhwb3J0Rm9ybWF0KVxuICBmb3JtYXQ6IEV4cG9ydEZvcm1hdDtcblxuICBASXNPcHRpb25hbCgpXG4gIEBJc0Jvb2xlYW4oKVxuICBpbmNsdWRlQ2hhcnRzPzogYm9vbGVhbjtcblxuICBASXNPcHRpb25hbCgpXG4gIEBJc1N0cmluZygpXG4gIGZpbGVOYW1lPzogc3RyaW5nO1xufVxuXG5jbGFzcyBTaGFyZVJlcG9ydER0byB7XG4gIEBJc1N0cmluZygpXG4gIHJlcG9ydElkOiBzdHJpbmc7XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNBcnJheSgpXG4gIEBJc0VtYWlsKHt9LCB7IGVhY2g6IHRydWUgfSlcbiAgZW1haWxzPzogc3RyaW5nW107XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNCb29sZWFuKClcbiAgcHVibGljTGluaz86IGJvb2xlYW47XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNEYXRlU3RyaW5nKClcbiAgZXhwaXJlc0F0Pzogc3RyaW5nO1xufVxuXG5AQXBpVGFncygnUmVwb3J0cycpXG5AQXBpQmVhcmVyQXV0aCgpXG5AVXNlR3VhcmRzKEp3dEF1dGhHdWFyZClcbkBDb250cm9sbGVyKCdhcGkvcmVwb3J0cycpXG5leHBvcnQgY2xhc3MgUmVwb3J0c0NvbnRyb2xsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlciA9IG5ldyBMb2dnZXIoUmVwb3J0c0NvbnRyb2xsZXIubmFtZSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSByZXBvcnRzU2VydmljZTogUmVwb3J0c1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzY2hlZHVsZXJTZXJ2aWNlOiBTY2hlZHVsZXJTZXJ2aWNlXG4gICkge31cblxuICAvLyBHRVQgL2FwaS9yZXBvcnRzL3RlbXBsYXRlcyAtIEdldCBwcmVkZWZpbmVkIHRlbXBsYXRlc1xuICBAR2V0KCd0ZW1wbGF0ZXMnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0dldCBwcmVkZWZpbmVkIHJlcG9ydCB0ZW1wbGF0ZXMnIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogJ1RlbXBsYXRlcyByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5JyB9KVxuICBAQXBpUXVlcnkoeyBuYW1lOiAndHlwZScsIGVudW06IFJlcG9ydFR5cGUsIHJlcXVpcmVkOiBmYWxzZSB9KVxuICBAQXBpUXVlcnkoeyBuYW1lOiAnc2VhcmNoJywgdHlwZTogJ3N0cmluZycsIHJlcXVpcmVkOiBmYWxzZSB9KVxuICBhc3luYyBnZXRUZW1wbGF0ZXMoXG4gICAgQEdldFVzZXIoKSB1c2VyOiBhbnksXG4gICAgQFF1ZXJ5KCd0eXBlJykgdHlwZT86IFJlcG9ydFR5cGUsXG4gICAgQFF1ZXJ5KCdzZWFyY2gnKSBzZWFyY2g/OiBzdHJpbmdcbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhgR2V0dGluZyB0ZW1wbGF0ZXMgZm9yIHVzZXIgJHt1c2VyLmlkfWApO1xuICAgICAgXG4gICAgICBjb25zdCB0ZW1wbGF0ZXMgPSBhd2FpdCB0aGlzLnJlcG9ydHNTZXJ2aWNlLmdldFRlbXBsYXRlcyh7XG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiB1c2VyLm9yZ2FuaXphdGlvbklkLFxuICAgICAgICB0eXBlLFxuICAgICAgICBzZWFyY2hcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiB0ZW1wbGF0ZXMsXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICB0b3RhbDogdGVtcGxhdGVzLmxlbmd0aCxcbiAgICAgICAgICB0eXBlczogT2JqZWN0LnZhbHVlcyhSZXBvcnRUeXBlKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGdldCB0ZW1wbGF0ZXM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEh0dHBFeGNlcHRpb24oXG4gICAgICAgICdGYWlsZWQgdG8gcmV0cmlldmUgdGVtcGxhdGVzJyxcbiAgICAgICAgSHR0cFN0YXR1cy5JTlRFUk5BTF9TRVJWRVJfRVJST1JcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gUE9TVCAvYXBpL3JlcG9ydHMvZ2VuZXJhdGUgLSBHZW5lcmF0ZSByZXBvcnRcbiAgQFBvc3QoJ2dlbmVyYXRlJylcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdHZW5lcmF0ZSBhIG5ldyByZXBvcnQnIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAxLCBkZXNjcmlwdGlvbjogJ1JlcG9ydCBnZW5lcmF0ZWQgc3VjY2Vzc2Z1bGx5JyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwMCwgZGVzY3JpcHRpb246ICdJbnZhbGlkIHJlcXVlc3QgZGF0YScgfSlcbiAgYXN5bmMgZ2VuZXJhdGVSZXBvcnQoXG4gICAgQEdldFVzZXIoKSB1c2VyOiBhbnksXG4gICAgQEJvZHkoVmFsaWRhdGlvblBpcGUpIGdlbmVyYXRlUmVwb3J0RHRvOiBHZW5lcmF0ZVJlcG9ydER0b1xuICApIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKGBHZW5lcmF0aW5nIHJlcG9ydCBmb3IgdXNlciAke3VzZXIuaWR9OiAke2dlbmVyYXRlUmVwb3J0RHRvLm5hbWV9YCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IHRoaXMucmVwb3J0c1NlcnZpY2UuZ2VuZXJhdGVSZXBvcnQoe1xuICAgICAgICAuLi5nZW5lcmF0ZVJlcG9ydER0byxcbiAgICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgICBvcmdhbml6YXRpb25JZDogdXNlci5vcmdhbml6YXRpb25JZFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHJlcG9ydCxcbiAgICAgICAgbWVzc2FnZTogJ1JlcG9ydCBnZW5lcmF0ZWQgc3VjY2Vzc2Z1bGx5J1xuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSByZXBvcnQ6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEh0dHBFeGNlcHRpb24oXG4gICAgICAgIGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBnZW5lcmF0ZSByZXBvcnQnLFxuICAgICAgICBIdHRwU3RhdHVzLkJBRF9SRVFVRVNUXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdFVCAvYXBpL3JlcG9ydHMvc2NoZWR1bGUgLSBHZXQgc2NoZWR1bGVkIHJlcG9ydHNcbiAgQEdldCgnc2NoZWR1bGUnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0dldCBzY2hlZHVsZWQgcmVwb3J0cycgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiAnU2NoZWR1bGVkIHJlcG9ydHMgcmV0cmlldmVkIHN1Y2Nlc3NmdWxseScgfSlcbiAgQEFwaVF1ZXJ5KHsgbmFtZTogJ3BhZ2UnLCB0eXBlOiAnbnVtYmVyJywgcmVxdWlyZWQ6IGZhbHNlIH0pXG4gIEBBcGlRdWVyeSh7IG5hbWU6ICdsaW1pdCcsIHR5cGU6ICdudW1iZXInLCByZXF1aXJlZDogZmFsc2UgfSlcbiAgQEFwaVF1ZXJ5KHsgbmFtZTogJ2FjdGl2ZScsIHR5cGU6ICdib29sZWFuJywgcmVxdWlyZWQ6IGZhbHNlIH0pXG4gIGFzeW5jIGdldFNjaGVkdWxlZFJlcG9ydHMoXG4gICAgQEdldFVzZXIoKSB1c2VyOiBhbnksXG4gICAgQFF1ZXJ5KCdwYWdlJywgbmV3IFZhbGlkYXRpb25QaXBlKHsgdHJhbnNmb3JtOiB0cnVlIH0pKSBwYWdlOiBudW1iZXIgPSAxLFxuICAgIEBRdWVyeSgnbGltaXQnLCBuZXcgVmFsaWRhdGlvblBpcGUoeyB0cmFuc2Zvcm06IHRydWUgfSkpIGxpbWl0OiBudW1iZXIgPSAxMCxcbiAgICBAUXVlcnkoJ2FjdGl2ZScsIG5ldyBWYWxpZGF0aW9uUGlwZSh7IHRyYW5zZm9ybTogdHJ1ZSB9KSkgYWN0aXZlPzogYm9vbGVhblxuICApIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKGBHZXR0aW5nIHNjaGVkdWxlZCByZXBvcnRzIGZvciB1c2VyICR7dXNlci5pZH1gKTtcbiAgICAgIFxuICAgICAgY29uc3Qgc2NoZWR1bGVzID0gYXdhaXQgdGhpcy5zY2hlZHVsZXJTZXJ2aWNlLmdldFNjaGVkdWxlc0J5VXNlcih1c2VyLmlkKTtcbiAgICAgIFxuICAgICAgLy8gRmlsdGVyIGJ5IGFjdGl2ZSBzdGF0dXMgaWYgc3BlY2lmaWVkXG4gICAgICBjb25zdCBmaWx0ZXJlZFNjaGVkdWxlcyA9IGFjdGl2ZSAhPT0gdW5kZWZpbmVkIFxuICAgICAgICA/IHNjaGVkdWxlcy5maWx0ZXIocyA9PiBzLmlzQWN0aXZlID09PSBhY3RpdmUpXG4gICAgICAgIDogc2NoZWR1bGVzO1xuXG4gICAgICAvLyBQYWdpbmF0aW9uXG4gICAgICBjb25zdCBzdGFydEluZGV4ID0gKHBhZ2UgLSAxKSAqIGxpbWl0O1xuICAgICAgY29uc3QgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgbGltaXQ7XG4gICAgICBjb25zdCBwYWdpbmF0ZWRTY2hlZHVsZXMgPSBmaWx0ZXJlZFNjaGVkdWxlcy5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHBhZ2luYXRlZFNjaGVkdWxlcyxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIHRvdGFsOiBmaWx0ZXJlZFNjaGVkdWxlcy5sZW5ndGgsXG4gICAgICAgICAgcGFnZSxcbiAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICB0b3RhbFBhZ2VzOiBNYXRoLmNlaWwoZmlsdGVyZWRTY2hlZHVsZXMubGVuZ3RoIC8gbGltaXQpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHNjaGVkdWxlZCByZXBvcnRzOicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKFxuICAgICAgICAnRmFpbGVkIHRvIHJldHJpZXZlIHNjaGVkdWxlZCByZXBvcnRzJyxcbiAgICAgICAgSHR0cFN0YXR1cy5JTlRFUk5BTF9TRVJWRVJfRVJST1JcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gUE9TVCAvYXBpL3JlcG9ydHMvc2NoZWR1bGUgLSBDcmVhdGUgc2NoZWR1bGVkIHJlcG9ydFxuICBAUG9zdCgnc2NoZWR1bGUnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0NyZWF0ZSBhIHNjaGVkdWxlZCByZXBvcnQnIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAxLCBkZXNjcmlwdGlvbjogJ1NjaGVkdWxlIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwMCwgZGVzY3JpcHRpb246ICdJbnZhbGlkIHNjaGVkdWxlIGRhdGEnIH0pXG4gIGFzeW5jIGNyZWF0ZVNjaGVkdWxlKFxuICAgIEBHZXRVc2VyKCkgdXNlcjogYW55LFxuICAgIEBCb2R5KFZhbGlkYXRpb25QaXBlKSBjcmVhdGVTY2hlZHVsZUR0bzogQ3JlYXRlU2NoZWR1bGVEdG9cbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhgQ3JlYXRpbmcgc2NoZWR1bGUgZm9yIHVzZXIgJHt1c2VyLmlkfTogJHtjcmVhdGVTY2hlZHVsZUR0by5uYW1lfWApO1xuICAgICAgXG4gICAgICBjb25zdCBzY2hlZHVsZSA9IGF3YWl0IHRoaXMuc2NoZWR1bGVyU2VydmljZS5jcmVhdGVTY2hlZHVsZSh7XG4gICAgICAgIC4uLmNyZWF0ZVNjaGVkdWxlRHRvLFxuICAgICAgICB1c2VySWQ6IHVzZXIuaWQsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiB1c2VyLm9yZ2FuaXphdGlvbklkLFxuICAgICAgICBzdGFydERhdGU6IGNyZWF0ZVNjaGVkdWxlRHRvLnN0YXJ0RGF0ZSA/IG5ldyBEYXRlKGNyZWF0ZVNjaGVkdWxlRHRvLnN0YXJ0RGF0ZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGVuZERhdGU6IGNyZWF0ZVNjaGVkdWxlRHRvLmVuZERhdGUgPyBuZXcgRGF0ZShjcmVhdGVTY2hlZHVsZUR0by5lbmREYXRlKSA6IHVuZGVmaW5lZFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHNjaGVkdWxlLFxuICAgICAgICBtZXNzYWdlOiAnU2NoZWR1bGUgY3JlYXRlZCBzdWNjZXNzZnVsbHknXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBzY2hlZHVsZTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgSHR0cEV4Y2VwdGlvbihcbiAgICAgICAgZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGNyZWF0ZSBzY2hlZHVsZScsXG4gICAgICAgIEh0dHBTdGF0dXMuQkFEX1JFUVVFU1RcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gUFVUIC9hcGkvcmVwb3J0cy9zY2hlZHVsZS86aWQgLSBVcGRhdGUgc2NoZWR1bGVkIHJlcG9ydFxuICBAUHV0KCdzY2hlZHVsZS86aWQnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ1VwZGF0ZSBhIHNjaGVkdWxlZCByZXBvcnQnIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogJ1NjaGVkdWxlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5JyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwNCwgZGVzY3JpcHRpb246ICdTY2hlZHVsZSBub3QgZm91bmQnIH0pXG4gIGFzeW5jIHVwZGF0ZVNjaGVkdWxlKFxuICAgIEBHZXRVc2VyKCkgdXNlcjogYW55LFxuICAgIEBQYXJhbSgnaWQnLCBQYXJzZVVVSURQaXBlKSBpZDogc3RyaW5nLFxuICAgIEBCb2R5KFZhbGlkYXRpb25QaXBlKSB1cGRhdGVTY2hlZHVsZUR0bzogVXBkYXRlU2NoZWR1bGVEdG9cbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhgVXBkYXRpbmcgc2NoZWR1bGUgJHtpZH0gZm9yIHVzZXIgJHt1c2VyLmlkfWApO1xuICAgICAgXG4gICAgICBjb25zdCBzY2hlZHVsZSA9IGF3YWl0IHRoaXMuc2NoZWR1bGVyU2VydmljZS51cGRhdGVTY2hlZHVsZShpZCwge1xuICAgICAgICAuLi51cGRhdGVTY2hlZHVsZUR0byxcbiAgICAgICAgc3RhcnREYXRlOiB1cGRhdGVTY2hlZHVsZUR0by5zdGFydERhdGUgPyBuZXcgRGF0ZSh1cGRhdGVTY2hlZHVsZUR0by5zdGFydERhdGUpIDogdW5kZWZpbmVkLFxuICAgICAgICBlbmREYXRlOiB1cGRhdGVTY2hlZHVsZUR0by5lbmREYXRlID8gbmV3IERhdGUodXBkYXRlU2NoZWR1bGVEdG8uZW5kRGF0ZSkgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBzY2hlZHVsZSxcbiAgICAgICAgbWVzc2FnZTogJ1NjaGVkdWxlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5J1xuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgc2NoZWR1bGU6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEh0dHBFeGNlcHRpb24oXG4gICAgICAgIGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byB1cGRhdGUgc2NoZWR1bGUnLFxuICAgICAgICBIdHRwU3RhdHVzLkJBRF9SRVFVRVNUXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIERFTEVURSAvYXBpL3JlcG9ydHMvc2NoZWR1bGUvOmlkIC0gRGVsZXRlIHNjaGVkdWxlZCByZXBvcnRcbiAgQERlbGV0ZSgnc2NoZWR1bGUvOmlkJylcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdEZWxldGUgYSBzY2hlZHVsZWQgcmVwb3J0JyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246ICdTY2hlZHVsZSBkZWxldGVkIHN1Y2Nlc3NmdWxseScgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiA0MDQsIGRlc2NyaXB0aW9uOiAnU2NoZWR1bGUgbm90IGZvdW5kJyB9KVxuICBhc3luYyBkZWxldGVTY2hlZHVsZShcbiAgICBAR2V0VXNlcigpIHVzZXI6IGFueSxcbiAgICBAUGFyYW0oJ2lkJywgUGFyc2VVVUlEUGlwZSkgaWQ6IHN0cmluZ1xuICApIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKGBEZWxldGluZyBzY2hlZHVsZSAke2lkfSBmb3IgdXNlciAke3VzZXIuaWR9YCk7XG4gICAgICBcbiAgICAgIGF3YWl0IHRoaXMuc2NoZWR1bGVyU2VydmljZS5kZWxldGVTY2hlZHVsZShpZCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICdTY2hlZHVsZSBkZWxldGVkIHN1Y2Nlc3NmdWxseSdcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gZGVsZXRlIHNjaGVkdWxlOicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKFxuICAgICAgICBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gZGVsZXRlIHNjaGVkdWxlJyxcbiAgICAgICAgSHR0cFN0YXR1cy5CQURfUkVRVUVTVFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBQT1NUIC9hcGkvcmVwb3J0cy9zY2hlZHVsZS86aWQvZXhlY3V0ZSAtIEV4ZWN1dGUgc2NoZWR1bGUgbWFudWFsbHlcbiAgQFBvc3QoJ3NjaGVkdWxlLzppZC9leGVjdXRlJylcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdFeGVjdXRlIGEgc2NoZWR1bGVkIHJlcG9ydCBtYW51YWxseScgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiAnU2NoZWR1bGUgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5JyB9KVxuICBhc3luYyBleGVjdXRlU2NoZWR1bGUoXG4gICAgQEdldFVzZXIoKSB1c2VyOiBhbnksXG4gICAgQFBhcmFtKCdpZCcsIFBhcnNlVVVJRFBpcGUpIGlkOiBzdHJpbmdcbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhgTWFudWFsbHkgZXhlY3V0aW5nIHNjaGVkdWxlICR7aWR9IGZvciB1c2VyICR7dXNlci5pZH1gKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zY2hlZHVsZXJTZXJ2aWNlLmV4ZWN1dGVTY2hlZHVsZU1hbnVhbGx5KGlkKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogcmVzdWx0LnN1Y2Nlc3MsXG4gICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgbWVzc2FnZTogcmVzdWx0LnN1Y2Nlc3MgPyAnU2NoZWR1bGUgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5JyA6ICdTY2hlZHVsZSBleGVjdXRpb24gZmFpbGVkJ1xuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBleGVjdXRlIHNjaGVkdWxlOicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKFxuICAgICAgICBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gZXhlY3V0ZSBzY2hlZHVsZScsXG4gICAgICAgIEh0dHBTdGF0dXMuQkFEX1JFUVVFU1RcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gUE9TVCAvYXBpL3JlcG9ydHMvZXhwb3J0IC0gRXhwb3J0IHJlcG9ydFxuICBAUG9zdCgnZXhwb3J0JylcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdFeHBvcnQgcmVwb3J0IHRvIFBERiBvciBFeGNlbCcgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiAnUmVwb3J0IGV4cG9ydGVkIHN1Y2Nlc3NmdWxseScgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiA0MDQsIGRlc2NyaXB0aW9uOiAnUmVwb3J0IG5vdCBmb3VuZCcgfSlcbiAgYXN5bmMgZXhwb3J0UmVwb3J0KFxuICAgIEBHZXRVc2VyKCkgdXNlcjogYW55LFxuICAgIEBCb2R5KFZhbGlkYXRpb25QaXBlKSBleHBvcnRSZXBvcnREdG86IEV4cG9ydFJlcG9ydER0b1xuICApIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKGBFeHBvcnRpbmcgcmVwb3J0ICR7ZXhwb3J0UmVwb3J0RHRvLnJlcG9ydElkfSBmb3IgdXNlciAke3VzZXIuaWR9YCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGV4cG9ydFJlc3VsdCA9IGF3YWl0IHRoaXMucmVwb3J0c1NlcnZpY2UuZXhwb3J0UmVwb3J0KHtcbiAgICAgICAgcmVwb3J0SWQ6IGV4cG9ydFJlcG9ydER0by5yZXBvcnRJZCxcbiAgICAgICAgZm9ybWF0OiBleHBvcnRSZXBvcnREdG8uZm9ybWF0LFxuICAgICAgICBpbmNsdWRlQ2hhcnRzOiBleHBvcnRSZXBvcnREdG8uaW5jbHVkZUNoYXJ0cyA/PyB0cnVlLFxuICAgICAgICBmaWxlTmFtZTogZXhwb3J0UmVwb3J0RHRvLmZpbGVOYW1lLFxuICAgICAgICB1c2VySWQ6IHVzZXIuaWRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBleHBvcnRSZXN1bHQsXG4gICAgICAgIG1lc3NhZ2U6ICdSZXBvcnQgZXhwb3J0ZWQgc3VjY2Vzc2Z1bGx5J1xuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBleHBvcnQgcmVwb3J0OicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKFxuICAgICAgICBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gZXhwb3J0IHJlcG9ydCcsXG4gICAgICAgIEh0dHBTdGF0dXMuQkFEX1JFUVVFU1RcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gR0VUIC9hcGkvcmVwb3J0cy9oaXN0b3J5IC0gR2V0IHJlcG9ydCBoaXN0b3J5XG4gIEBHZXQoJ2hpc3RvcnknKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0dldCByZXBvcnQgZ2VuZXJhdGlvbiBoaXN0b3J5JyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246ICdSZXBvcnQgaGlzdG9yeSByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5JyB9KVxuICBAQXBpUXVlcnkoeyBuYW1lOiAncGFnZScsIHR5cGU6ICdudW1iZXInLCByZXF1aXJlZDogZmFsc2UgfSlcbiAgQEFwaVF1ZXJ5KHsgbmFtZTogJ2xpbWl0JywgdHlwZTogJ251bWJlcicsIHJlcXVpcmVkOiBmYWxzZSB9KVxuICBAQXBpUXVlcnkoeyBuYW1lOiAndHlwZScsIGVudW06IFJlcG9ydFR5cGUsIHJlcXVpcmVkOiBmYWxzZSB9KVxuICBAQXBpUXVlcnkoeyBuYW1lOiAnc3RhdHVzJywgZW51bTogUmVwb3J0U3RhdHVzLCByZXF1aXJlZDogZmFsc2UgfSlcbiAgQEFwaVF1ZXJ5KHsgbmFtZTogJ3NlYXJjaCcsIHR5cGU6ICdzdHJpbmcnLCByZXF1aXJlZDogZmFsc2UgfSlcbiAgYXN5bmMgZ2V0UmVwb3J0SGlzdG9yeShcbiAgICBAR2V0VXNlcigpIHVzZXI6IGFueSxcbiAgICBAUXVlcnkoJ3BhZ2UnLCBuZXcgVmFsaWRhdGlvblBpcGUoeyB0cmFuc2Zvcm06IHRydWUgfSkpIHBhZ2U6IG51bWJlciA9IDEsXG4gICAgQFF1ZXJ5KCdsaW1pdCcsIG5ldyBWYWxpZGF0aW9uUGlwZSh7IHRyYW5zZm9ybTogdHJ1ZSB9KSkgbGltaXQ6IG51bWJlciA9IDIwLFxuICAgIEBRdWVyeSgndHlwZScpIHR5cGU/OiBSZXBvcnRUeXBlLFxuICAgIEBRdWVyeSgnc3RhdHVzJykgc3RhdHVzPzogUmVwb3J0U3RhdHVzLFxuICAgIEBRdWVyeSgnc2VhcmNoJykgc2VhcmNoPzogc3RyaW5nXG4gICkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coYEdldHRpbmcgcmVwb3J0IGhpc3RvcnkgZm9yIHVzZXIgJHt1c2VyLmlkfWApO1xuICAgICAgXG4gICAgICBjb25zdCBoaXN0b3J5ID0gYXdhaXQgdGhpcy5yZXBvcnRzU2VydmljZS5nZXRSZXBvcnRIaXN0b3J5KHtcbiAgICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgICBvcmdhbml6YXRpb25JZDogdXNlci5vcmdhbml6YXRpb25JZCxcbiAgICAgICAgcGFnZSxcbiAgICAgICAgbGltaXQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgc2VhcmNoXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YTogaGlzdG9yeS5yZXBvcnRzLFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgdG90YWw6IGhpc3RvcnkudG90YWwsXG4gICAgICAgICAgcGFnZSxcbiAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICB0b3RhbFBhZ2VzOiBNYXRoLmNlaWwoaGlzdG9yeS50b3RhbCAvIGxpbWl0KVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGdldCByZXBvcnQgaGlzdG9yeTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgSHR0cEV4Y2VwdGlvbihcbiAgICAgICAgJ0ZhaWxlZCB0byByZXRyaWV2ZSByZXBvcnQgaGlzdG9yeScsXG4gICAgICAgIEh0dHBTdGF0dXMuSU5URVJOQUxfU0VSVkVSX0VSUk9SXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdFVCAvYXBpL3JlcG9ydHMvOmlkIC0gR2V0IHNwZWNpZmljIHJlcG9ydFxuICBAR2V0KCc6aWQnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0dldCBhIHNwZWNpZmljIHJlcG9ydCBieSBJRCcgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiAnUmVwb3J0IHJldHJpZXZlZCBzdWNjZXNzZnVsbHknIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDA0LCBkZXNjcmlwdGlvbjogJ1JlcG9ydCBub3QgZm91bmQnIH0pXG4gIGFzeW5jIGdldFJlcG9ydChcbiAgICBAR2V0VXNlcigpIHVzZXI6IGFueSxcbiAgICBAUGFyYW0oJ2lkJywgUGFyc2VVVUlEUGlwZSkgaWQ6IHN0cmluZ1xuICApIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKGBHZXR0aW5nIHJlcG9ydCAke2lkfSBmb3IgdXNlciAke3VzZXIuaWR9YCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IHRoaXMucmVwb3J0c1NlcnZpY2UuZ2V0UmVwb3J0QnlJZChpZCwgdXNlci5pZCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHJlcG9ydFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgcmVwb3J0OicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKFxuICAgICAgICBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gcmV0cmlldmUgcmVwb3J0JyxcbiAgICAgICAgSHR0cFN0YXR1cy5OT1RfRk9VTkRcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gUE9TVCAvYXBpL3JlcG9ydHMvOmlkL3NoYXJlIC0gU2hhcmUgcmVwb3J0XG4gIEBQb3N0KCc6aWQvc2hhcmUnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ1NoYXJlIGEgcmVwb3J0IHZpYSBlbWFpbCBvciBwdWJsaWMgbGluaycgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiAnUmVwb3J0IHNoYXJlZCBzdWNjZXNzZnVsbHknIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDA0LCBkZXNjcmlwdGlvbjogJ1JlcG9ydCBub3QgZm91bmQnIH0pXG4gIGFzeW5jIHNoYXJlUmVwb3J0KFxuICAgIEBHZXRVc2VyKCkgdXNlcjogYW55LFxuICAgIEBQYXJhbSgnaWQnLCBQYXJzZVVVSURQaXBlKSBpZDogc3RyaW5nLFxuICAgIEBCb2R5KFZhbGlkYXRpb25QaXBlKSBzaGFyZVJlcG9ydER0bzogU2hhcmVSZXBvcnREdG9cbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhgU2hhcmluZyByZXBvcnQgJHtpZH0gZm9yIHVzZXIgJHt1c2VyLmlkfWApO1xuICAgICAgXG4gICAgICBjb25zdCBzaGFyZVJlc3VsdCA9IGF3YWl0IHRoaXMucmVwb3J0c1NlcnZpY2Uuc2hhcmVSZXBvcnQoe1xuICAgICAgICByZXBvcnRJZDogaWQsXG4gICAgICAgIGVtYWlsczogc2hhcmVSZXBvcnREdG8uZW1haWxzLFxuICAgICAgICBwdWJsaWNMaW5rOiBzaGFyZVJlcG9ydER0by5wdWJsaWNMaW5rID8/IGZhbHNlLFxuICAgICAgICBleHBpcmVzQXQ6IHNoYXJlUmVwb3J0RHRvLmV4cGlyZXNBdCA/IG5ldyBEYXRlKHNoYXJlUmVwb3J0RHRvLmV4cGlyZXNBdCkgOiB1bmRlZmluZWQsXG4gICAgICAgIHVzZXJJZDogdXNlci5pZFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHNoYXJlUmVzdWx0LFxuICAgICAgICBtZXNzYWdlOiAnUmVwb3J0IHNoYXJlZCBzdWNjZXNzZnVsbHknXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHNoYXJlIHJlcG9ydDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgSHR0cEV4Y2VwdGlvbihcbiAgICAgICAgZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHNoYXJlIHJlcG9ydCcsXG4gICAgICAgIEh0dHBTdGF0dXMuQkFEX1JFUVVFU1RcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gREVMRVRFIC9hcGkvcmVwb3J0cy86aWQgLSBEZWxldGUgcmVwb3J0XG4gIEBEZWxldGUoJzppZCcpXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnRGVsZXRlIGEgcmVwb3J0JyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246ICdSZXBvcnQgZGVsZXRlZCBzdWNjZXNzZnVsbHknIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDA0LCBkZXNjcmlwdGlvbjogJ1JlcG9ydCBub3QgZm91bmQnIH0pXG4gIGFzeW5jIGRlbGV0ZVJlcG9ydChcbiAgICBAR2V0VXNlcigpIHVzZXI6IGFueSxcbiAgICBAUGFyYW0oJ2lkJywgUGFyc2VVVUlEUGlwZSkgaWQ6IHN0cmluZ1xuICApIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKGBEZWxldGluZyByZXBvcnQgJHtpZH0gZm9yIHVzZXIgJHt1c2VyLmlkfWApO1xuICAgICAgXG4gICAgICBhd2FpdCB0aGlzLnJlcG9ydHNTZXJ2aWNlLmRlbGV0ZVJlcG9ydChpZCwgdXNlci5pZCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICdSZXBvcnQgZGVsZXRlZCBzdWNjZXNzZnVsbHknXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGRlbGV0ZSByZXBvcnQ6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEh0dHBFeGNlcHRpb24oXG4gICAgICAgIGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBkZWxldGUgcmVwb3J0JyxcbiAgICAgICAgSHR0cFN0YXR1cy5CQURfUkVRVUVTVFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBHRVQgL2FwaS9yZXBvcnRzL3NjaGVkdWxlLzppZC9zdGF0cyAtIEdldCBzY2hlZHVsZSBleGVjdXRpb24gc3RhdGlzdGljc1xuICBAR2V0KCdzY2hlZHVsZS86aWQvc3RhdHMnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0dldCBzY2hlZHVsZSBleGVjdXRpb24gc3RhdGlzdGljcycgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDAsIGRlc2NyaXB0aW9uOiAnU3RhdGlzdGljcyByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5JyB9KVxuICBhc3luYyBnZXRTY2hlZHVsZVN0YXRzKFxuICAgIEBHZXRVc2VyKCkgdXNlcjogYW55LFxuICAgIEBQYXJhbSgnaWQnLCBQYXJzZVVVSURQaXBlKSBpZDogc3RyaW5nXG4gICkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coYEdldHRpbmcgc2NoZWR1bGUgc3RhdHMgJHtpZH0gZm9yIHVzZXIgJHt1c2VyLmlkfWApO1xuICAgICAgXG4gICAgICBjb25zdCBzdGF0cyA9IGF3YWl0IHRoaXMuc2NoZWR1bGVyU2VydmljZS5nZXRFeGVjdXRpb25TdGF0cyhpZCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHN0YXRzXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGdldCBzY2hlZHVsZSBzdGF0czonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgSHR0cEV4Y2VwdGlvbihcbiAgICAgICAgZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHJldHJpZXZlIHNjaGVkdWxlIHN0YXRpc3RpY3MnLFxuICAgICAgICBIdHRwU3RhdHVzLkJBRF9SRVFVRVNUXG4gICAgICApO1xuICAgIH1cbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBaUJTO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFqQlQsU0FDRUUsVUFBVSxFQUNWQyxHQUFHLEVBQ0hDLElBQUksRUFDSkMsR0FBRyxFQUNIQyxNQUFNLEVBQ05DLElBQUksRUFDSkMsS0FBSyxFQUNMQyxLQUFLLEVBQ0xDLFNBQVMsRUFFVEMs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