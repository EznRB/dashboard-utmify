{"version":3,"names":["cov_be7d02b3c","actualCoverage","Controller","Get","Post","Put","Delete","Body","Param","UseGuards","HttpStatus","HttpException","Query","JwtAuthGuard","GetUser","GetTenant","TenantService","TenantDatabaseService","PrismaService","UserRole","CreateOrganizationDto","name","slug","planType","UpdateOrganizationDto","logo","primaryColor","secondaryColor","website","description","InviteUserDto","email","role","s","OrganizationsController","tenantService","tenantDatabaseService","prismaService","constructor","f","createOrganization","createOrgDto","user","organizationId","b","BAD_REQUEST","organization","ownerId","id","update","where","data","OWNER","success","message","error","status","INTERNAL_SERVER_ERROR","getCurrentOrganization","tenant","executeInTenantContext","findUnique","include","users","select","createdAt","_count","campaigns","NOT_FOUND","updateOrganizationSettings","updateOrgDto","ADMIN","includes","FORBIDDEN","updatedOrganization","inviteUser","inviteDto","existingUser","validatePlanLimits","invitation","removeMember","memberId","member","findFirst","removeUser","getMembers","page","limit","pageNum","parseInt","limitNum","skip","members","total","Promise","all","findMany","lastLoginAt","orderBy","take","count","pagination","pages","Math","ceil","getPendingInvitations","invitations","invitedBy","cancelInvitation","invitationId","delete","__decorate","__param","Object","_a","_b","_c"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\organizations.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  UseGuards,\n  HttpStatus,\n  HttpException,\n  Query,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { GetUser } from '../decorators/get-user.decorator';\nimport { GetTenant, GetTenantId } from '../decorators/get-tenant.decorator';\nimport { TenantService } from '../services/tenant.service';\nimport { TenantDatabaseService } from '../services/tenant-database.service';\nimport { PrismaService } from '../services/prisma.service';\nimport { UserRole } from '@prisma/client';\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  organizationId: string;\n  role: UserRole;\n  name?: string;\n}\n\ninterface TenantInfo {\n  id: string;\n  slug: string;\n  name: string;\n  planType: string;\n}\n\n// DTOs\nclass CreateOrganizationDto {\n  name: string;\n  slug?: string;\n  planType?: string;\n}\n\nclass UpdateOrganizationDto {\n  name?: string;\n  logo?: string;\n  primaryColor?: string;\n  secondaryColor?: string;\n  website?: string;\n  description?: string;\n}\n\nclass InviteUserDto {\n  email: string;\n  role: UserRole;\n  name?: string;\n}\n\n@Controller('organizations')\n@UseGuards(JwtAuthGuard)\nexport class OrganizationsController {\n  constructor(\n    private readonly tenantService: TenantService,\n    private readonly tenantDatabaseService: TenantDatabaseService,\n    private readonly prismaService: PrismaService,\n  ) {}\n\n  @Post('create')\n  async createOrganization(\n    @Body() createOrgDto: CreateOrganizationDto,\n    @GetUser() user: AuthUser,\n  ) {\n    try {\n      // Verificar se o usuário já tem uma organização\n      if (user.organizationId) {\n        throw new HttpException(\n          'Usuário já pertence a uma organização',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      // Criar a organização\n      const organization = await this.tenantService.createOrganization({\n        name: createOrgDto.name,\n        slug: createOrgDto.slug,\n        planType: createOrgDto.planType || 'FREE',\n        ownerId: user.id,\n      });\n\n      // Atualizar o usuário para associá-lo à organização\n      await this.prismaService.user.update({\n        where: { id: user.id },\n        data: {\n          organizationId: organization.id,\n          role: UserRole.OWNER,\n        },\n      });\n\n      return {\n        success: true,\n        data: organization,\n        message: 'Organização criada com sucesso',\n      };\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Erro ao criar organização',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('current')\n  async getCurrentOrganization(\n    @GetTenant() tenant: TenantInfo,\n    @GetUser() user: AuthUser,\n  ) {\n    try {\n      const organization = await this.tenantDatabaseService.executeInTenantContext(\n        tenant.id,\n        async () => {\n          return await this.prismaService.organization.findUnique({\n            where: { id: tenant.id },\n            include: {\n              users: {\n                select: {\n                  id: true,\n                  email: true,\n                  name: true,\n                  role: true,\n                  createdAt: true,\n                },\n              },\n              _count: {\n                select: {\n                  users: true,\n                  campaigns: true,\n                },\n              },\n            },\n          });\n        },\n      );\n\n      if (!organization) {\n        throw new HttpException(\n          'Organização não encontrada',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n\n      return {\n        success: true,\n        data: organization,\n      };\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Erro ao buscar organização',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Put('settings')\n  async updateOrganizationSettings(\n    @Body() updateOrgDto: UpdateOrganizationDto,\n    @GetTenant() tenant: TenantInfo,\n    @GetUser() user: AuthUser,\n  ) {\n    try {\n      // Verificar se o usuário tem permissão (OWNER ou ADMIN)\n      if (![UserRole.OWNER, UserRole.ADMIN].includes(user.role)) {\n        throw new HttpException(\n          'Permissão insuficiente para atualizar configurações',\n          HttpStatus.FORBIDDEN,\n        );\n      }\n\n      const updatedOrganization = await this.tenantDatabaseService.executeInTenantContext(\n        tenant.id,\n        async () => {\n          return await this.prismaService.organization.update({\n            where: { id: tenant.id },\n            data: updateOrgDto,\n          });\n        },\n      );\n\n      return {\n        success: true,\n        data: updatedOrganization,\n        message: 'Configurações atualizadas com sucesso',\n      };\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Erro ao atualizar configurações',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post('invite')\n  async inviteUser(\n    @Body() inviteDto: InviteUserDto,\n    @GetTenant() tenant: TenantInfo,\n    @GetUser() user: AuthUser,\n  ) {\n    try {\n      // Verificar se o usuário tem permissão (OWNER ou ADMIN)\n      if (![UserRole.OWNER, UserRole.ADMIN].includes(user.role)) {\n        throw new HttpException(\n          'Permissão insuficiente para convidar usuários',\n          HttpStatus.FORBIDDEN,\n        );\n      }\n\n      // Verificar se o usuário já existe\n      const existingUser = await this.prismaService.user.findUnique({\n        where: { email: inviteDto.email },\n      });\n\n      if (existingUser && existingUser.organizationId) {\n        throw new HttpException(\n          'Usuário já pertence a uma organização',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      // Validar limites do plano\n      await this.tenantService.validatePlanLimits(tenant.id, 'users');\n\n      const invitation = await this.tenantService.inviteUser(\n        tenant.id,\n        inviteDto.email,\n        inviteDto.role,\n        user.id,\n        inviteDto.name,\n      );\n\n      return {\n        success: true,\n        data: invitation,\n        message: 'Convite enviado com sucesso',\n      };\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Erro ao enviar convite',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete('members/:id')\n  async removeMember(\n    @Param('id') memberId: string,\n    @GetTenant() tenant: TenantInfo,\n    @GetUser() user: AuthUser,\n  ) {\n    try {\n      // Verificar se o usuário tem permissão (OWNER ou ADMIN)\n      if (![UserRole.OWNER, UserRole.ADMIN].includes(user.role)) {\n        throw new HttpException(\n          'Permissão insuficiente para remover membros',\n          HttpStatus.FORBIDDEN,\n        );\n      }\n\n      // Não permitir que o usuário remova a si mesmo\n      if (memberId === user.id) {\n        throw new HttpException(\n          'Não é possível remover a si mesmo',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      // Verificar se o membro existe na organização\n      const member = await this.tenantDatabaseService.executeInTenantContext(\n        tenant.id,\n        async () => {\n          return await this.prismaService.user.findFirst({\n            where: {\n              id: memberId,\n              organizationId: tenant.id,\n            },\n          });\n        },\n      );\n\n      if (!member) {\n        throw new HttpException(\n          'Membro não encontrado',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n\n      // Não permitir remover o owner\n      if (member.role === UserRole.OWNER) {\n        throw new HttpException(\n          'Não é possível remover o proprietário da organização',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      // Remover o membro\n      await this.tenantService.removeUser(tenant.id, memberId);\n\n      return {\n        success: true,\n        message: 'Membro removido com sucesso',\n      };\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Erro ao remover membro',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('members')\n  async getMembers(\n    @GetTenant() tenant: TenantInfo,\n    @GetUser() user: AuthUser,\n    @Query('page') page: string = '1',\n    @Query('limit') limit: string = '10',\n  ) {\n    try {\n      const pageNum = parseInt(page, 10);\n      const limitNum = parseInt(limit, 10);\n      const skip = (pageNum - 1) * limitNum;\n\n      const [members, total] = await this.tenantDatabaseService.executeInTenantContext(\n        tenant.id,\n        async () => {\n          return await Promise.all([\n            this.prismaService.user.findMany({\n              where: { organizationId: tenant.id },\n              select: {\n                id: true,\n                email: true,\n                name: true,\n                role: true,\n                createdAt: true,\n                lastLoginAt: true,\n              },\n              orderBy: { createdAt: 'desc' },\n              skip,\n              take: limitNum,\n            }),\n            this.prismaService.user.count({\n              where: { organizationId: tenant.id },\n            }),\n          ]);\n        },\n      );\n\n      return {\n        success: true,\n        data: {\n          members,\n          pagination: {\n            page: pageNum,\n            limit: limitNum,\n            total,\n            pages: Math.ceil(total / limitNum),\n          },\n        },\n      };\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Erro ao buscar membros',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('invitations')\n  async getPendingInvitations(\n    @GetTenant() tenant: TenantInfo,\n    @GetUser() user: AuthUser,\n  ) {\n    try {\n      // Verificar se o usuário tem permissão (OWNER ou ADMIN)\n      if (![UserRole.OWNER, UserRole.ADMIN].includes(user.role)) {\n        throw new HttpException(\n          'Permissão insuficiente para visualizar convites',\n          HttpStatus.FORBIDDEN,\n        );\n      }\n\n      const invitations = await this.tenantDatabaseService.executeInTenantContext(\n        tenant.id,\n        async () => {\n          return await this.prismaService.invitation.findMany({\n            where: {\n              organizationId: tenant.id,\n              status: 'PENDING',\n            },\n            include: {\n              invitedBy: {\n                select: {\n                  id: true,\n                  email: true,\n                  name: true,\n                },\n              },\n            },\n            orderBy: { createdAt: 'desc' },\n          });\n        },\n      );\n\n      return {\n        success: true,\n        data: invitations,\n      };\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Erro ao buscar convites pendentes',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete('invitations/:id')\n  async cancelInvitation(\n    @Param('id') invitationId: string,\n    @GetTenant() tenant: TenantInfo,\n    @GetUser() user: AuthUser,\n  ) {\n    try {\n      // Verificar se o usuário tem permissão (OWNER ou ADMIN)\n      if (![UserRole.OWNER, UserRole.ADMIN].includes(user.role)) {\n        throw new HttpException(\n          'Permissão insuficiente para cancelar convites',\n          HttpStatus.FORBIDDEN,\n        );\n      }\n\n      await this.tenantDatabaseService.executeInTenantContext(\n        tenant.id,\n        async () => {\n          await this.prismaService.invitation.delete({\n            where: {\n              id: invitationId,\n              organizationId: tenant.id,\n            },\n          });\n        },\n      );\n\n      return {\n        success: true,\n        message: 'Convite cancelado com sucesso',\n      };\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Erro ao cancelar convite',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}"],"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","ignoreList":[]}