{"version":3,"names":["cov_1u32zuuh2j","actualCoverage","CronJob","logger","MetricsService","MetricsAggregationJob","job","prisma","metricsService","isRunning","s","constructor","f","runAggregation","bind","start","running","b","warn","info","stop","startTime","Date","now","yesterday","setDate","getDate","setHours","endOfYesterday","campaigns","campaign","findMany","where","isActive","select","id","name","organizationId","length","successCount","errorCount","aggregateCampaignMetrics","debug","campaignId","date","toISOString","split","error","Error","message","cleanupOldData","duration","totalCampaigns","successful","errors","stack","undefined","startDate","endDate","existingDaily","metricsDaily","findFirst","hourlyMetrics","metricsHourly","timestamp","gte","lte","aggregated","reduce","acc","metric","impressions","clicks","spend","conversions","revenue","cpc","cpm","ctr","conversionRate","roas","roi","create","data","aggregateConversionEvents","conversionEvents","conversionEvent","eventsByType","event","eventType","count","value","funnelStageMap","Object","entries","stage","funnelStage","upsert","campaignId_stage_date","update","updatedAt","cutoffDate","deletedHourly","deleteMany","lt","thirtyDaysAgo","deletedEvents","deletedHourlyMetrics","deletedConversionEvents","isJobRunning","getNextRun","nextDate","toDate","getLastRun","lastDate","triggerManualRun"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\jobs\\metrics-aggregation.job.ts"],"sourcesContent":["import { CronJob } from 'cron';\nimport { PrismaClient } from '@prisma/client';\nimport { logger } from '../utils/logger';\nimport { MetricsService } from '../services/metrics.service';\n\nexport class MetricsAggregationJob {\n  private job: CronJob;\n  private prisma: PrismaClient;\n  private metricsService: MetricsService;\n  private isRunning: boolean = false;\n\n  constructor(prisma: PrismaClient) {\n    this.prisma = prisma;\n    this.metricsService = new MetricsService(prisma);\n    \n    // Run daily at 00:05 (5 minutes past midnight)\n    this.job = new CronJob(\n      '0 5 0 * * *', // second minute hour day month dayOfWeek\n      this.runAggregation.bind(this),\n      null, // onComplete\n      false, // start immediately\n      'America/Sao_Paulo' // timezone\n    );\n  }\n\n  public start(): void {\n    if (this.job.running) {\n      logger.warn('Metrics aggregation job is already running');\n      return;\n    }\n\n    this.job.start();\n    logger.info('Metrics aggregation job started - will run daily at 00:05');\n  }\n\n  public stop(): void {\n    if (!this.job.running) {\n      logger.warn('Metrics aggregation job is not running');\n      return;\n    }\n\n    this.job.stop();\n    logger.info('Metrics aggregation job stopped');\n  }\n\n  public async runAggregation(): Promise<void> {\n    if (this.isRunning) {\n      logger.warn('Metrics aggregation is already running, skipping this execution');\n      return;\n    }\n\n    this.isRunning = true;\n    const startTime = Date.now();\n    \n    try {\n      logger.info('Starting daily metrics aggregation');\n\n      // Get yesterday's date (the day we want to aggregate)\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      yesterday.setHours(0, 0, 0, 0);\n\n      const endOfYesterday = new Date(yesterday);\n      endOfYesterday.setHours(23, 59, 59, 999);\n\n      // Get all active campaigns\n      const campaigns = await this.prisma.campaign.findMany({\n        where: {\n          isActive: true,\n        },\n        select: {\n          id: true,\n          name: true,\n          organizationId: true,\n        },\n      });\n\n      logger.info(`Found ${campaigns.length} active campaigns to aggregate`);\n\n      let successCount = 0;\n      let errorCount = 0;\n\n      // Process each campaign\n      for (const campaign of campaigns) {\n        try {\n          await this.aggregateCampaignMetrics(campaign.id, yesterday, endOfYesterday);\n          successCount++;\n          \n          logger.debug(`Aggregated metrics for campaign ${campaign.name}`, {\n            campaignId: campaign.id,\n            date: yesterday.toISOString().split('T')[0],\n          });\n        } catch (error) {\n          errorCount++;\n          logger.error(`Failed to aggregate metrics for campaign ${campaign.name}`, {\n            campaignId: campaign.id,\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n        }\n      }\n\n      // Clean up old data (keep last 90 days of hourly data)\n      await this.cleanupOldData();\n\n      const duration = Date.now() - startTime;\n      logger.info('Daily metrics aggregation completed', {\n        duration: `${duration}ms`,\n        totalCampaigns: campaigns.length,\n        successful: successCount,\n        errors: errorCount,\n        date: yesterday.toISOString().split('T')[0],\n      });\n\n    } catch (error) {\n      logger.error('Fatal error during metrics aggregation', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : undefined,\n      });\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  private async aggregateCampaignMetrics(\n    campaignId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<void> {\n    // Check if daily metrics already exist for this date\n    const existingDaily = await this.prisma.metricsDaily.findFirst({\n      where: {\n        campaignId,\n        date: startDate,\n      },\n    });\n\n    if (existingDaily) {\n      logger.debug(`Daily metrics already exist for campaign ${campaignId} on ${startDate.toISOString().split('T')[0]}`);\n      return;\n    }\n\n    // Aggregate hourly metrics into daily metrics\n    const hourlyMetrics = await this.prisma.metricsHourly.findMany({\n      where: {\n        campaignId,\n        timestamp: {\n          gte: startDate,\n          lte: endDate,\n        },\n      },\n    });\n\n    if (hourlyMetrics.length === 0) {\n      logger.debug(`No hourly metrics found for campaign ${campaignId} on ${startDate.toISOString().split('T')[0]}`);\n      return;\n    }\n\n    // Calculate aggregated values\n    const aggregated = hourlyMetrics.reduce(\n      (acc, metric) => ({\n        impressions: acc.impressions + metric.impressions,\n        clicks: acc.clicks + metric.clicks,\n        spend: acc.spend + metric.spend,\n        conversions: acc.conversions + metric.conversions,\n        revenue: acc.revenue + metric.revenue,\n      }),\n      {\n        impressions: 0,\n        clicks: 0,\n        spend: 0,\n        conversions: 0,\n        revenue: 0,\n      }\n    );\n\n    // Calculate KPIs\n    const cpc = aggregated.clicks > 0 ? aggregated.spend / aggregated.clicks : 0;\n    const cpm = aggregated.impressions > 0 ? (aggregated.spend / aggregated.impressions) * 1000 : 0;\n    const ctr = aggregated.impressions > 0 ? (aggregated.clicks / aggregated.impressions) * 100 : 0;\n    const conversionRate = aggregated.clicks > 0 ? (aggregated.conversions / aggregated.clicks) * 100 : 0;\n    const roas = aggregated.spend > 0 ? aggregated.revenue / aggregated.spend : 0;\n    const roi = aggregated.spend > 0 ? ((aggregated.revenue - aggregated.spend) / aggregated.spend) * 100 : 0;\n\n    // Create daily metrics record\n    await this.prisma.metricsDaily.create({\n      data: {\n        campaignId,\n        date: startDate,\n        impressions: aggregated.impressions,\n        clicks: aggregated.clicks,\n        spend: aggregated.spend,\n        conversions: aggregated.conversions,\n        revenue: aggregated.revenue,\n        cpc,\n        cpm,\n        ctr,\n        conversionRate,\n        roas,\n        roi,\n      },\n    });\n\n    // Also aggregate conversion events for the day\n    await this.aggregateConversionEvents(campaignId, startDate, endDate);\n  }\n\n  private async aggregateConversionEvents(\n    campaignId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<void> {\n    // Get conversion events for the day\n    const conversionEvents = await this.prisma.conversionEvent.findMany({\n      where: {\n        campaignId,\n        timestamp: {\n          gte: startDate,\n          lte: endDate,\n        },\n      },\n    });\n\n    if (conversionEvents.length === 0) {\n      return;\n    }\n\n    // Group by event type and aggregate\n    const eventsByType = conversionEvents.reduce((acc, event) => {\n      if (!acc[event.eventType]) {\n        acc[event.eventType] = {\n          count: 0,\n          value: 0,\n        };\n      }\n      acc[event.eventType].count++;\n      acc[event.eventType].value += event.value;\n      return acc;\n    }, {} as Record<string, { count: number; value: number }>);\n\n    // Update funnel stages\n    const funnelStageMap: Record<string, string> = {\n      'view_content': 'awareness',\n      'add_to_cart': 'consideration',\n      'lead': 'interest',\n      'signup': 'intent',\n      'purchase': 'conversion',\n    };\n\n    for (const [eventType, data] of Object.entries(eventsByType)) {\n      const stage = funnelStageMap[eventType];\n      if (!stage) continue;\n\n      await this.prisma.funnelStage.upsert({\n        where: {\n          campaignId_stage_date: {\n            campaignId,\n            stage,\n            date: startDate,\n          },\n        },\n        update: {\n          count: data.count,\n          value: data.value,\n          updatedAt: new Date(),\n        },\n        create: {\n          campaignId,\n          stage,\n          date: startDate,\n          count: data.count,\n          value: data.value,\n        },\n      });\n    }\n  }\n\n  private async cleanupOldData(): Promise<void> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - 90); // Keep last 90 days\n\n    try {\n      // Delete old hourly metrics (keep daily metrics longer)\n      const deletedHourly = await this.prisma.metricsHourly.deleteMany({\n        where: {\n          timestamp: {\n            lt: cutoffDate,\n          },\n        },\n      });\n\n      // Delete old conversion events (keep for 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      \n      const deletedEvents = await this.prisma.conversionEvent.deleteMany({\n        where: {\n          timestamp: {\n            lt: thirtyDaysAgo,\n          },\n        },\n      });\n\n      logger.info('Old data cleanup completed', {\n        deletedHourlyMetrics: deletedHourly.count,\n        deletedConversionEvents: deletedEvents.count,\n        cutoffDate: cutoffDate.toISOString().split('T')[0],\n      });\n    } catch (error) {\n      logger.error('Error during data cleanup', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n\n  public isJobRunning(): boolean {\n    return this.job.running;\n  }\n\n  public getNextRun(): Date | null {\n    return this.job.nextDate()?.toDate() || null;\n  }\n\n  public getLastRun(): Date | null {\n    return this.job.lastDate()?.toDate() || null;\n  }\n\n  // Manual trigger for testing\n  public async triggerManualRun(): Promise<void> {\n    logger.info('Manual metrics aggregation triggered');\n    await this.runAggregation();\n  }\n}"],"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","ignoreList":[]}