{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\global-teardown.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\global-teardown.ts"],"sourcesContent":["import { createClient } from 'redis';\nimport { Client } from 'pg';\nimport { cleanupTestData } from './global-setup';\n\nexport default async function globalTeardown() {\n  console.log('üßπ Tearing down test environment...');\n  \n  try {\n    // Cleanup test data\n    await cleanupTestData();\n    \n    // Cleanup Redis\n    await cleanupTestRedis();\n    \n    // Close database connections\n    await cleanupTestDatabase();\n    \n    console.log('‚úÖ Test environment teardown complete');\n  } catch (error) {\n    console.error('‚ùå Failed to teardown test environment:', error);\n    // Don't exit with error code in teardown\n  }\n}\n\nasync function cleanupTestRedis() {\n  console.log('üî¥ Cleaning up test Redis...');\n  \n  try {\n    const redisUrl = process.env.REDIS_URL;\n    if (!redisUrl) {\n      console.warn('‚ö†Ô∏è REDIS_URL not set, skipping Redis cleanup');\n      return;\n    }\n    \n    const client = createClient({ url: redisUrl });\n    await client.connect();\n    \n    // Clear test Redis database\n    await client.flushDb();\n    \n    await client.disconnect();\n    \n    console.log('‚úÖ Test Redis cleaned up');\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Could not cleanup test Redis:', error.message);\n  }\n}\n\nasync function cleanupTestDatabase() {\n  console.log('üìä Cleaning up test database connections...');\n  \n  try {\n    // Force close any remaining connections\n    const databaseUrl = process.env.DATABASE_URL;\n    if (!databaseUrl) {\n      console.warn('‚ö†Ô∏è DATABASE_URL not set, skipping database cleanup');\n      return;\n    }\n    \n    // Parse database URL\n    const url = new URL(databaseUrl);\n    const dbName = url.pathname.slice(1);\n    \n    // Connect to PostgreSQL admin database\n    const adminClient = new Client({\n      host: url.hostname,\n      port: parseInt(url.port) || 5432,\n      user: url.username,\n      password: url.password,\n      database: 'postgres',\n    });\n    \n    await adminClient.connect();\n    \n    // Terminate active connections to test database\n    try {\n      await adminClient.query(`\n        SELECT pg_terminate_backend(pid)\n        FROM pg_stat_activity\n        WHERE datname = $1 AND pid <> pg_backend_pid()\n      `, [dbName]);\n    } catch (error) {\n      // Ignore errors when terminating connections\n    }\n    \n    await adminClient.end();\n    \n    console.log('‚úÖ Test database connections cleaned up');\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Could not cleanup test database:', error.message);\n  }\n}\n\n// Utility function to force cleanup all resources\nexport async function forceCleanupAllResources() {\n  console.log('üö® Force cleaning up all test resources...');\n  \n  const cleanupPromises = [\n    cleanupTestRedis().catch(err => console.warn('Redis cleanup failed:', err.message)),\n    cleanupTestDatabase().catch(err => console.warn('Database cleanup failed:', err.message)),\n    cleanupTestData().catch(err => console.warn('Data cleanup failed:', err.message)),\n  ];\n  \n  await Promise.allSettled(cleanupPromises);\n  \n  console.log('‚úÖ Force cleanup completed');\n}\n\n// Handle process termination\nprocess.on('SIGINT', async () => {\n  console.log('\\nüõë Received SIGINT, cleaning up...');\n  await forceCleanupAllResources();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('\\nüõë Received SIGTERM, cleaning up...');\n  await forceCleanupAllResources();\n  process.exit(0);\n});\n\nprocess.on('uncaughtException', async (error) => {\n  console.error('\\nüí• Uncaught exception:', error);\n  await forceCleanupAllResources();\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', async (reason, promise) => {\n  console.error('\\nüí• Unhandled rejection at:', promise, 'reason:', reason);\n  await forceCleanupAllResources();\n  process.exit(1);\n});"],"version":3}