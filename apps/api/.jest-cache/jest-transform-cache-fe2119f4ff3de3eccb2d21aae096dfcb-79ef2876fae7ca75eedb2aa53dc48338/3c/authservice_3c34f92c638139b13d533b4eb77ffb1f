7c9a01e7aa0dae406ad4095667466fcc
/* istanbul ignore next */
function cov_r9zfrkqas() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts";
  var hash = "087b14ed1e91ee3135159ac5c6487864680aa96c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 23
        }
      },
      "1": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "2": {
        start: {
          line: 21,
          column: 31
        },
        end: {
          line: 21,
          column: 39
        }
      },
      "3": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "4": {
        start: {
          line: 28,
          column: 28
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "5": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "6": {
        start: {
          line: 49,
          column: 26
        },
        end: {
          line: 49,
          column: 33
        }
      },
      "7": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 54,
          column: 10
        }
      },
      "8": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "9": {
        start: {
          line: 60,
          column: 28
        },
        end: {
          line: 62,
          column: 14
        }
      },
      "10": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 77,
          column: 14
        }
      },
      "11": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "12": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 88
        }
      },
      "13": {
        start: {
          line: 82,
          column: 28
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "14": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "15": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 78
        }
      },
      "16": {
        start: {
          line: 89,
          column: 30
        },
        end: {
          line: 89,
          column: 80
        }
      },
      "17": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 54
        }
      },
      "18": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 60
        }
      },
      "19": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 29
        }
      },
      "20": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "21": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 28
        }
      },
      "22": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 86
        }
      },
      "23": {
        start: {
          line: 105,
          column: 21
        },
        end: {
          line: 108,
          column: 10
        }
      },
      "24": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "25": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 65
        }
      },
      "26": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 82
        }
      },
      "27": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "28": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 72
        }
      },
      "29": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 79
        }
      },
      "30": {
        start: {
          line: 119,
          column: 32
        },
        end: {
          line: 119,
          column: 77
        }
      },
      "31": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "32": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 63
        }
      },
      "33": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 82
        }
      },
      "34": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "35": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 76
        }
      },
      "36": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 89
        }
      },
      "37": {
        start: {
          line: 130,
          column: 26
        },
        end: {
          line: 130,
          column: 34
        }
      },
      "38": {
        start: {
          line: 131,
          column: 26
        },
        end: {
          line: 131,
          column: 36
        }
      },
      "39": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 51
        }
      },
      "40": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "41": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "42": {
        start: {
          line: 147,
          column: 23
        },
        end: {
          line: 147,
          column: 65
        }
      },
      "43": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 53
        }
      },
      "44": {
        start: {
          line: 150,
          column: 45
        },
        end: {
          line: 150,
          column: 49
        }
      },
      "45": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 155,
          column: 10
        }
      },
      "46": {
        start: {
          line: 159,
          column: 60
        },
        end: {
          line: 159,
          column: 64
        }
      },
      "47": {
        start: {
          line: 161,
          column: 29
        },
        end: {
          line: 163,
          column: 10
        }
      },
      "48": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "49": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 84
        }
      },
      "50": {
        start: {
          line: 168,
          column: 25
        },
        end: {
          line: 172,
          column: 29
        }
      },
      "51": {
        start: {
          line: 173,
          column: 19
        },
        end: {
          line: 173,
          column: 27
        }
      },
      "52": {
        start: {
          line: 174,
          column: 22
        },
        end: {
          line: 174,
          column: 23
        }
      },
      "53": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "54": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 44
        }
      },
      "55": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 22
        }
      },
      "56": {
        start: {
          line: 181,
          column: 31
        },
        end: {
          line: 181,
          column: 62
        }
      },
      "57": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 212,
          column: 10
        }
      },
      "58": {
        start: {
          line: 185,
          column: 33
        },
        end: {
          line: 199,
          column: 14
        }
      },
      "59": {
        start: {
          line: 201,
          column: 25
        },
        end: {
          line: 210,
          column: 14
        }
      },
      "60": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 42
        }
      },
      "61": {
        start: {
          line: 214,
          column: 26
        },
        end: {
          line: 214,
          column: 34
        }
      },
      "62": {
        start: {
          line: 215,
          column: 26
        },
        end: {
          line: 215,
          column: 36
        }
      },
      "63": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 51
        }
      },
      "64": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "65": {
        start: {
          line: 226,
          column: 23
        },
        end: {
          line: 226,
          column: 72
        }
      },
      "66": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 63
        }
      },
      "67": {
        start: {
          line: 229,
          column: 45
        },
        end: {
          line: 229,
          column: 56
        }
      },
      "68": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 234,
          column: 10
        }
      },
      "69": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "70": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 243,
          column: 15
        }
      },
      "71": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 38
        }
      },
      "72": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 55
        }
      },
      "73": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 70
        }
      },
      "74": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "75": {
        start: {
          line: 267,
          column: 28
        },
        end: {
          line: 267,
          column: 54
        }
      },
      "76": {
        start: {
          line: 269,
          column: 28
        },
        end: {
          line: 271,
          column: 14
        }
      },
      "77": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "78": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 78
        }
      },
      "79": {
        start: {
          line: 276,
          column: 25
        },
        end: {
          line: 279,
          column: 14
        }
      },
      "80": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "81": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 88
        }
      },
      "82": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 285,
          column: 13
        }
      },
      "83": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 93
        }
      },
      "84": {
        start: {
          line: 287,
          column: 49
        },
        end: {
          line: 287,
          column: 53
        }
      },
      "85": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 292,
          column: 14
        }
      },
      "86": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 297,
          column: 13
        }
      },
      "87": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 296,
          column: 28
        }
      },
      "88": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 70
        }
      },
      "89": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 316,
          column: 11
        }
      },
      "90": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 328,
          column: 11
        }
      },
      "91": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 43
        }
      },
      "92": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 336,
          column: 11
        }
      },
      "93": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 21
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 42
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 57
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 48
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 103
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 29
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 158
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 183,
            column: 45
          },
          end: {
            line: 183,
            column: 46
          }
        },
        loc: {
          start: {
            line: 183,
            column: 59
          },
          end: {
            line: 212,
            column: 9
          }
        },
        line: 183
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 42
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 237
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 29
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 264
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 34
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 302
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 43
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 319
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        loc: {
          start: {
            line: 332,
            column: 36
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 332
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "1": {
        loc: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 78,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 78,
            column: 21
          }
        }, {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 78,
            column: 39
          }
        }],
        line: 78
      },
      "2": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "3": {
        loc: {
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 85,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 85,
            column: 24
          }
        }, {
          start: {
            line: 85,
            column: 28
          },
          end: {
            line: 85,
            column: 58
          }
        }],
        line: 85
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "6": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "7": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "8": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "9": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "10": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "11": {
        loc: {
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 24
          }
        }, {
          start: {
            line: 272,
            column: 28
          },
          end: {
            line: 272,
            column: 58
          }
        }],
        line: 272
      },
      "12": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "13": {
        loc: {
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 280,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 280,
            column: 21
          }
        }, {
          start: {
            line: 280,
            column: 25
          },
          end: {
            line: 280,
            column: 39
          }
        }],
        line: 280
      },
      "14": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "15": {
        loc: {
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 297,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 297,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts"],
      sourcesContent: ["import { nanoid } from 'nanoid'\nimport bcrypt from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport { db } from '@utmify/database'\nimport type { User, Organization, UserRole } from '@utmify/shared'\nimport { jwtConfig } from '@/config/env'\nimport { logger, logAuth } from '@/utils/logger'\nimport { ApiError } from '@/utils/errors'\n\nexport interface AuthTokens {\n  accessToken: string\n  refreshToken: string\n  expiresIn: number\n}\n\nexport interface JWTPayload {\n  userId: string\n  organizationId: string\n  role: UserRole\n  email: string\n  sessionId: string\n}\n\nexport interface RefreshTokenPayload {\n  userId: string\n  sessionId: string\n  tokenId: string\n}\n\nexport class AuthService {\n  constructor(private app: FastifyInstance) {}\n\n  // Generate JWT tokens\n  async generateTokens(user: User, sessionId: string): Promise<AuthTokens> {\n    const payload: JWTPayload = {\n      userId: user.id,\n      organizationId: user.organizationId,\n      role: user.role,\n      email: user.email,\n      sessionId,\n    }\n\n    const refreshTokenId = nanoid()\n    const refreshPayload: RefreshTokenPayload = {\n      userId: user.id,\n      sessionId,\n      tokenId: refreshTokenId,\n    }\n\n    // Generate access token\n    const accessToken = this.app.jwt.sign(payload, {\n      expiresIn: jwtConfig.accessExpiresIn,\n    })\n\n    // Generate refresh token with different secret\n    const refreshToken = this.app.jwt.sign(refreshPayload, {\n      secret: jwtConfig.refreshSecret,\n      expiresIn: jwtConfig.refreshExpiresIn,\n    })\n\n    // Store refresh token in Redis (temporarily disabled)\n    // const refreshTokenKey = `refresh_token:${refreshTokenId}`\n    // const refreshTokenData = {\n    //   userId: user.id,\n    //   sessionId,\n    //   createdAt: new Date().toISOString(),\n    // }\n\n    // await this.app.redis.setex(\n    //   refreshTokenKey,\n    //   7 * 24 * 60 * 60, // 7 days in seconds\n    //   JSON.stringify(refreshTokenData)\n    // )\n\n    // Calculate expiration time\n    const expiresIn = 15 * 60 // 15 minutes in seconds\n\n    return {\n      accessToken,\n      refreshToken,\n      expiresIn,\n    }\n  }\n\n  // Verify and refresh access token\n  async refreshToken(refreshToken: string): Promise<AuthTokens> {\n    try {\n      // Verify refresh token\n      const payload = this.app.jwt.verify(refreshToken, {\n        secret: jwtConfig.refreshSecret,\n      }) as RefreshTokenPayload\n\n      // Check if refresh token exists in Redis (temporarily disabled)\n      // const refreshTokenKey = `refresh_token:${payload.tokenId}`\n      // const tokenData = await this.app.redis.get(refreshTokenKey)\n\n      // if (!tokenData) {\n      //   throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n      // }\n\n      // const parsedTokenData = JSON.parse(tokenData)\n      // if (parsedTokenData.userId !== payload.userId || parsedTokenData.sessionId !== payload.sessionId) {\n      //   throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n      // }\n\n      // Get user from database\n      const user = await db.user.findUnique({\n        where: { id: payload.userId },\n        include: { organization: true },\n      })\n\n      if (!user || !user.isActive) {\n        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401)\n      }\n\n      // Check if session is still valid\n      const session = await db.userSession.findUnique({\n        where: { id: payload.sessionId },\n      })\n\n      if (!session || session.expiresAt < new Date()) {\n        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401)\n      }\n\n      // Generate new tokens\n      const newTokens = await this.generateTokens(user, payload.sessionId)\n\n      // Remove old refresh token\n      await this.app.redis.del(refreshTokenKey)\n\n      logAuth('token_refreshed', user.id, user.email)\n\n      return newTokens\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error\n      }\n      throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n    }\n  }\n\n  // Login user\n  async login(email: string, password: string, ip?: string, userAgent?: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    tokens: AuthTokens\n  }> {\n    // Find user with organization\n    const user = await db.user.findUnique({\n      where: { email: email.toLowerCase() },\n      include: { organization: true },\n    })\n\n    if (!user) {\n      logAuth('login_failed', undefined, email, ip, false)\n      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401)\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      logAuth('login_failed_inactive', user.id, email, ip, false)\n      throw new ApiError('Account is disabled', 'ACCOUNT_DISABLED', 401)\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password)\n    if (!isValidPassword) {\n      logAuth('login_failed', user.id, email, ip, false)\n      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401)\n    }\n\n    // Check if organization is active\n    if (!user.organization.isActive) {\n      logAuth('login_failed_org_inactive', user.id, email, ip, false)\n      throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401)\n    }\n\n    // Create user session\n    const sessionId = nanoid()\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 7) // 7 days\n\n    await db.userSession.create({\n      data: {\n        id: sessionId,\n        token: sessionId,\n        userId: user.id,\n        expiresAt,\n      },\n    })\n\n    // Update last login\n    await db.user.update({\n      where: { id: user.id },\n      data: { lastLoginAt: new Date() },\n    })\n\n    // Generate tokens\n    const tokens = await this.generateTokens(user, sessionId)\n\n    logAuth('login_success', user.id, email, ip)\n\n    // Remove password from response\n    const { password: _, ...safeUser } = user\n\n    return {\n      user: safeUser,\n      organization: user.organization,\n      tokens,\n    }\n  }\n\n  // Register new user and organization\n  async register(data: {\n    name: string\n    email: string\n    password: string\n    organizationName: string\n  }, ip?: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    tokens: AuthTokens\n  }> {\n    const { name, email, password, organizationName } = data\n\n    // Check if user already exists\n    const existingUser = await db.user.findUnique({\n      where: { email: email.toLowerCase() },\n    })\n\n    if (existingUser) {\n      throw new ApiError('Email already exists', 'EMAIL_ALREADY_EXISTS', 409)\n    }\n\n    // Generate organization slug\n    const baseSlug = organizationName\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/(^-|-$)/g, '')\n      .substring(0, 50)\n\n    let slug = baseSlug\n    let counter = 1\n\n    // Ensure unique slug\n    while (await db.organization.findUnique({ where: { slug } })) {\n      slug = `${baseSlug}-${counter}`\n      counter++\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12)\n\n    // Create organization and user in transaction\n    const result = await db.$transaction(async (tx) => {\n      // Create organization\n      const organization = await tx.organization.create({\n        data: {\n          name: organizationName,\n          slug,\n          settings: JSON.stringify({\n            timezone: 'UTC',\n            currency: 'USD',\n            dateFormat: 'MM/DD/YYYY',\n            allowPublicDashboard: false,\n            requireTwoFactor: false,\n            maxUsers: 2,\n            customBranding: false,\n          }),\n        },\n      })\n\n      // Create user as organization owner\n      const user = await tx.user.create({\n        data: {\n          name,\n          email: email.toLowerCase(),\n          password: hashedPassword,\n          role: 'OWNER',\n          isActive: true,\n          organizationId: organization.id,\n        },\n      })\n\n      return { user, organization }\n    })\n\n    // Create user session\n    const sessionId = nanoid()\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 7) // 7 days\n\n    await db.userSession.create({\n      data: {\n        id: sessionId,\n        token: sessionId,\n        userId: result.user.id,\n        expiresAt,\n      },\n    })\n\n    // Generate tokens\n    const tokens = await this.generateTokens(result.user, sessionId)\n\n    logAuth('register_success', result.user.id, email, ip)\n\n    // Remove password from response\n    const { password: _, ...safeUser } = result.user\n\n    return {\n      user: safeUser,\n      organization: result.organization,\n      tokens,\n    }\n  }\n\n  // Logout user\n  async logout(sessionId: string, refreshToken?: string): Promise<void> {\n    try {\n      // Invalidate session\n      await db.userSession.update({\n        where: { id: sessionId },\n        data: { expiresAt: new Date() },\n      })\n\n      // Remove refresh token from Redis if provided (temporarily disabled)\n      // if (refreshToken) {\n      //   try {\n      //     const payload = this.app.jwt.verify(refreshToken, {\n      //       secret: jwtConfig.refreshSecret,\n      //     }) as RefreshTokenPayload\n\n      //     const refreshTokenKey = `refresh_token:${payload.tokenId}`\n      //     await this.app.redis.del(refreshTokenKey)\n      //   } catch {\n      //     // Ignore errors when removing refresh token\n      //   }\n      // }\n\n      logAuth('logout_success')\n    } catch (error) {\n      logger.error(error, 'Error during logout')\n      throw new ApiError('Logout failed', 'LOGOUT_FAILED', 500)\n    }\n  }\n\n  // Verify JWT token and get user\n  async verifyToken(token: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    sessionId: string\n  }> {\n    try {\n      // Verify token\n      const payload = this.app.jwt.verify(token) as JWTPayload\n\n      // Check if session is still valid\n      const session = await db.userSession.findUnique({\n        where: { id: payload.sessionId },\n      })\n\n      if (!session || session.expiresAt < new Date()) {\n        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401)\n      }\n\n      // Get user with organization\n      const user = await db.user.findUnique({\n        where: { id: payload.userId },\n        include: { organization: true },\n      })\n\n      if (!user || !user.isActive) {\n        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401)\n      }\n\n      if (!user.organization.isActive) {\n        throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401)\n      }\n\n      // Remove password from response\n      const { password: _, ...safeUser } = user\n\n      return {\n        user: safeUser,\n        organization: user.organization,\n        sessionId: payload.sessionId,\n      }\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error\n      }\n      throw new ApiError('Invalid token', 'INVALID_TOKEN', 401)\n    }\n  }\n\n  // Get all active sessions for a user\n  async getUserSessions(userId: string): Promise<any[]> {\n    return db.userSession.findMany({\n      where: {\n        userId,\n        expiresAt: { gt: new Date() },\n      },\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        ipAddress: true,\n        userAgent: true,\n        createdAt: true,\n        expiresAt: true,\n      },\n    })\n  }\n\n  // Revoke a specific session\n  async revokeSession(sessionId: string, userId: string): Promise<void> {\n    await db.userSession.updateMany({\n      where: {\n        id: sessionId,\n        userId,\n      },\n      data: {\n        expiresAt: new Date(),\n      },\n    })\n\n    logAuth('session_revoked', userId)\n  }\n\n  // Revoke all sessions for a user\n  async revokeAllSessions(userId: string): Promise<void> {\n    await db.userSession.updateMany({\n      where: { userId },\n      data: { expiresAt: new Date() },\n    })\n\n    logAuth('all_sessions_revoked', userId)\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "087b14ed1e91ee3135159ac5c6487864680aa96c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_r9zfrkqas = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_r9zfrkqas();
import { nanoid } from 'nanoid';
import bcrypt from 'bcryptjs';
import { db } from '@utmify/database';
import { jwtConfig } from '@/config/env';
import { logger, logAuth } from '@/utils/logger';
import { ApiError } from '@/utils/errors';
export class AuthService {
  app;
  constructor(app) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[0]++;
    cov_r9zfrkqas().s[0]++;
    this.app = app;
  }
  // Generate JWT tokens
  async generateTokens(user, sessionId) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[1]++;
    const payload =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[1]++, {
      userId: user.id,
      organizationId: user.organizationId,
      role: user.role,
      email: user.email,
      sessionId
    });
    const refreshTokenId =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[2]++, nanoid());
    const refreshPayload =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[3]++, {
      userId: user.id,
      sessionId,
      tokenId: refreshTokenId
    });
    // Generate access token
    const accessToken =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[4]++, this.app.jwt.sign(payload, {
      expiresIn: jwtConfig.accessExpiresIn
    }));
    // Generate refresh token with different secret
    const refreshToken =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[5]++, this.app.jwt.sign(refreshPayload, {
      secret: jwtConfig.refreshSecret,
      expiresIn: jwtConfig.refreshExpiresIn
    }));
    // Store refresh token in Redis (temporarily disabled)
    // const refreshTokenKey = `refresh_token:${refreshTokenId}`
    // const refreshTokenData = {
    //   userId: user.id,
    //   sessionId,
    //   createdAt: new Date().toISOString(),
    // }
    // await this.app.redis.setex(
    //   refreshTokenKey,
    //   7 * 24 * 60 * 60, // 7 days in seconds
    //   JSON.stringify(refreshTokenData)
    // )
    // Calculate expiration time
    const expiresIn =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[6]++, 15 * 60); // 15 minutes in seconds
    /* istanbul ignore next */
    cov_r9zfrkqas().s[7]++;
    return {
      accessToken,
      refreshToken,
      expiresIn
    };
  }
  // Verify and refresh access token
  async refreshToken(refreshToken) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[2]++;
    cov_r9zfrkqas().s[8]++;
    try {
      // Verify refresh token
      const payload =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[9]++, this.app.jwt.verify(refreshToken, {
        secret: jwtConfig.refreshSecret
      }));
      // Check if refresh token exists in Redis (temporarily disabled)
      // const refreshTokenKey = `refresh_token:${payload.tokenId}`
      // const tokenData = await this.app.redis.get(refreshTokenKey)
      // if (!tokenData) {
      //   throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)
      // }
      // const parsedTokenData = JSON.parse(tokenData)
      // if (parsedTokenData.userId !== payload.userId || parsedTokenData.sessionId !== payload.sessionId) {
      //   throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)
      // }
      // Get user from database
      const user =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[10]++, await db.user.findUnique({
        where: {
          id: payload.userId
        },
        include: {
          organization: true
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[11]++;
      if (
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[1][0]++, !user) ||
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[1][1]++, !user.isActive)) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[0][0]++;
        cov_r9zfrkqas().s[12]++;
        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[0][1]++;
      }
      // Check if session is still valid
      const session =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[13]++, await db.userSession.findUnique({
        where: {
          id: payload.sessionId
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[14]++;
      if (
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[3][0]++, !session) ||
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[3][1]++, session.expiresAt < new Date())) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[2][0]++;
        cov_r9zfrkqas().s[15]++;
        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[2][1]++;
      }
      // Generate new tokens
      const newTokens =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[16]++, await this.generateTokens(user, payload.sessionId));
      // Remove old refresh token
      /* istanbul ignore next */
      cov_r9zfrkqas().s[17]++;
      await this.app.redis.del(refreshTokenKey);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[18]++;
      logAuth('token_refreshed', user.id, user.email);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[19]++;
      return newTokens;
    } catch (error) {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[20]++;
      if (error instanceof ApiError) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[4][0]++;
        cov_r9zfrkqas().s[21]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[4][1]++;
      }
      cov_r9zfrkqas().s[22]++;
      throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401);
    }
  }
  // Login user
  async login(email, password, ip, userAgent) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[3]++;
    // Find user with organization
    const user =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[23]++, await db.user.findUnique({
      where: {
        email: email.toLowerCase()
      },
      include: {
        organization: true
      }
    }));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[24]++;
    if (!user) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[5][0]++;
      cov_r9zfrkqas().s[25]++;
      logAuth('login_failed', undefined, email, ip, false);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[26]++;
      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[5][1]++;
    }
    // Check if user is active
    cov_r9zfrkqas().s[27]++;
    if (!user.isActive) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[6][0]++;
      cov_r9zfrkqas().s[28]++;
      logAuth('login_failed_inactive', user.id, email, ip, false);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[29]++;
      throw new ApiError('Account is disabled', 'ACCOUNT_DISABLED', 401);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[6][1]++;
    }
    // Verify password
    const isValidPassword =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[30]++, await bcrypt.compare(password, user.password));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[31]++;
    if (!isValidPassword) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[7][0]++;
      cov_r9zfrkqas().s[32]++;
      logAuth('login_failed', user.id, email, ip, false);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[33]++;
      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[7][1]++;
    }
    // Check if organization is active
    cov_r9zfrkqas().s[34]++;
    if (!user.organization.isActive) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[8][0]++;
      cov_r9zfrkqas().s[35]++;
      logAuth('login_failed_org_inactive', user.id, email, ip, false);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[36]++;
      throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[8][1]++;
    }
    // Create user session
    const sessionId =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[37]++, nanoid());
    const expiresAt =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[38]++, new Date());
    /* istanbul ignore next */
    cov_r9zfrkqas().s[39]++;
    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days
    /* istanbul ignore next */
    cov_r9zfrkqas().s[40]++;
    await db.userSession.create({
      data: {
        id: sessionId,
        token: sessionId,
        userId: user.id,
        expiresAt
      }
    });
    // Update last login
    /* istanbul ignore next */
    cov_r9zfrkqas().s[41]++;
    await db.user.update({
      where: {
        id: user.id
      },
      data: {
        lastLoginAt: new Date()
      }
    });
    // Generate tokens
    const tokens =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[42]++, await this.generateTokens(user, sessionId));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[43]++;
    logAuth('login_success', user.id, email, ip);
    // Remove password from response
    const {
      password: _,
      ...safeUser
    } =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[44]++, user);
    /* istanbul ignore next */
    cov_r9zfrkqas().s[45]++;
    return {
      user: safeUser,
      organization: user.organization,
      tokens
    };
  }
  // Register new user and organization
  async register(data, ip) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[4]++;
    const {
      name,
      email,
      password,
      organizationName
    } =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[46]++, data);
    // Check if user already exists
    const existingUser =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[47]++, await db.user.findUnique({
      where: {
        email: email.toLowerCase()
      }
    }));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[48]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_r9zfrkqas().b[9][0]++;
      cov_r9zfrkqas().s[49]++;
      throw new ApiError('Email already exists', 'EMAIL_ALREADY_EXISTS', 409);
    } else
    /* istanbul ignore next */
    {
      cov_r9zfrkqas().b[9][1]++;
    }
    // Generate organization slug
    const baseSlug =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[50]++, organizationName.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '').substring(0, 50));
    let slug =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[51]++, baseSlug);
    let counter =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[52]++, 1);
    // Ensure unique slug
    /* istanbul ignore next */
    cov_r9zfrkqas().s[53]++;
    while (await db.organization.findUnique({
      where: {
        slug
      }
    })) {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[54]++;
      slug = `${baseSlug}-${counter}`;
      /* istanbul ignore next */
      cov_r9zfrkqas().s[55]++;
      counter++;
    }
    // Hash password
    const hashedPassword =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[56]++, await bcrypt.hash(password, 12));
    // Create organization and user in transaction
    const result =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[57]++, await db.$transaction(async tx => {
      /* istanbul ignore next */
      cov_r9zfrkqas().f[5]++;
      // Create organization
      const organization =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[58]++, await tx.organization.create({
        data: {
          name: organizationName,
          slug,
          settings: JSON.stringify({
            timezone: 'UTC',
            currency: 'USD',
            dateFormat: 'MM/DD/YYYY',
            allowPublicDashboard: false,
            requireTwoFactor: false,
            maxUsers: 2,
            customBranding: false
          })
        }
      }));
      // Create user as organization owner
      const user =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[59]++, await tx.user.create({
        data: {
          name,
          email: email.toLowerCase(),
          password: hashedPassword,
          role: 'OWNER',
          isActive: true,
          organizationId: organization.id
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[60]++;
      return {
        user,
        organization
      };
    }));
    // Create user session
    const sessionId =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[61]++, nanoid());
    const expiresAt =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[62]++, new Date());
    /* istanbul ignore next */
    cov_r9zfrkqas().s[63]++;
    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days
    /* istanbul ignore next */
    cov_r9zfrkqas().s[64]++;
    await db.userSession.create({
      data: {
        id: sessionId,
        token: sessionId,
        userId: result.user.id,
        expiresAt
      }
    });
    // Generate tokens
    const tokens =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[65]++, await this.generateTokens(result.user, sessionId));
    /* istanbul ignore next */
    cov_r9zfrkqas().s[66]++;
    logAuth('register_success', result.user.id, email, ip);
    // Remove password from response
    const {
      password: _,
      ...safeUser
    } =
    /* istanbul ignore next */
    (cov_r9zfrkqas().s[67]++, result.user);
    /* istanbul ignore next */
    cov_r9zfrkqas().s[68]++;
    return {
      user: safeUser,
      organization: result.organization,
      tokens
    };
  }
  // Logout user
  async logout(sessionId, refreshToken) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[6]++;
    cov_r9zfrkqas().s[69]++;
    try {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[70]++;
      // Invalidate session
      await db.userSession.update({
        where: {
          id: sessionId
        },
        data: {
          expiresAt: new Date()
        }
      });
      // Remove refresh token from Redis if provided (temporarily disabled)
      // if (refreshToken) {
      //   try {
      //     const payload = this.app.jwt.verify(refreshToken, {
      //       secret: jwtConfig.refreshSecret,
      //     }) as RefreshTokenPayload
      //     const refreshTokenKey = `refresh_token:${payload.tokenId}`
      //     await this.app.redis.del(refreshTokenKey)
      //   } catch {
      //     // Ignore errors when removing refresh token
      //   }
      // }
      /* istanbul ignore next */
      cov_r9zfrkqas().s[71]++;
      logAuth('logout_success');
    } catch (error) {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[72]++;
      logger.error(error, 'Error during logout');
      /* istanbul ignore next */
      cov_r9zfrkqas().s[73]++;
      throw new ApiError('Logout failed', 'LOGOUT_FAILED', 500);
    }
  }
  // Verify JWT token and get user
  async verifyToken(token) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[7]++;
    cov_r9zfrkqas().s[74]++;
    try {
      // Verify token
      const payload =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[75]++, this.app.jwt.verify(token));
      // Check if session is still valid
      const session =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[76]++, await db.userSession.findUnique({
        where: {
          id: payload.sessionId
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[77]++;
      if (
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[11][0]++, !session) ||
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[11][1]++, session.expiresAt < new Date())) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[10][0]++;
        cov_r9zfrkqas().s[78]++;
        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[10][1]++;
      }
      // Get user with organization
      const user =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[79]++, await db.user.findUnique({
        where: {
          id: payload.userId
        },
        include: {
          organization: true
        }
      }));
      /* istanbul ignore next */
      cov_r9zfrkqas().s[80]++;
      if (
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[13][0]++, !user) ||
      /* istanbul ignore next */
      (cov_r9zfrkqas().b[13][1]++, !user.isActive)) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[12][0]++;
        cov_r9zfrkqas().s[81]++;
        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[12][1]++;
      }
      cov_r9zfrkqas().s[82]++;
      if (!user.organization.isActive) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[14][0]++;
        cov_r9zfrkqas().s[83]++;
        throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401);
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[14][1]++;
      }
      // Remove password from response
      const {
        password: _,
        ...safeUser
      } =
      /* istanbul ignore next */
      (cov_r9zfrkqas().s[84]++, user);
      /* istanbul ignore next */
      cov_r9zfrkqas().s[85]++;
      return {
        user: safeUser,
        organization: user.organization,
        sessionId: payload.sessionId
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_r9zfrkqas().s[86]++;
      if (error instanceof ApiError) {
        /* istanbul ignore next */
        cov_r9zfrkqas().b[15][0]++;
        cov_r9zfrkqas().s[87]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_r9zfrkqas().b[15][1]++;
      }
      cov_r9zfrkqas().s[88]++;
      throw new ApiError('Invalid token', 'INVALID_TOKEN', 401);
    }
  }
  // Get all active sessions for a user
  async getUserSessions(userId) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[8]++;
    cov_r9zfrkqas().s[89]++;
    return db.userSession.findMany({
      where: {
        userId,
        expiresAt: {
          gt: new Date()
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      select: {
        id: true,
        ipAddress: true,
        userAgent: true,
        createdAt: true,
        expiresAt: true
      }
    });
  }
  // Revoke a specific session
  async revokeSession(sessionId, userId) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[9]++;
    cov_r9zfrkqas().s[90]++;
    await db.userSession.updateMany({
      where: {
        id: sessionId,
        userId
      },
      data: {
        expiresAt: new Date()
      }
    });
    /* istanbul ignore next */
    cov_r9zfrkqas().s[91]++;
    logAuth('session_revoked', userId);
  }
  // Revoke all sessions for a user
  async revokeAllSessions(userId) {
    /* istanbul ignore next */
    cov_r9zfrkqas().f[10]++;
    cov_r9zfrkqas().s[92]++;
    await db.userSession.updateMany({
      where: {
        userId
      },
      data: {
        expiresAt: new Date()
      }
    });
    /* istanbul ignore next */
    cov_r9zfrkqas().s[93]++;
    logAuth('all_sessions_revoked', userId);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,