{"version":3,"names":["cov_r9zfrkqas","actualCoverage","nanoid","bcrypt","db","jwtConfig","logger","logAuth","ApiError","AuthService","app","constructor","f","s","generateTokens","user","sessionId","payload","userId","id","organizationId","role","email","refreshTokenId","refreshPayload","tokenId","accessToken","jwt","sign","expiresIn","accessExpiresIn","refreshToken","secret","refreshSecret","refreshExpiresIn","verify","findUnique","where","include","organization","b","isActive","session","userSession","expiresAt","Date","newTokens","redis","del","refreshTokenKey","error","login","password","ip","userAgent","toLowerCase","undefined","isValidPassword","compare","setDate","getDate","create","data","token","update","lastLoginAt","tokens","_","safeUser","register","name","organizationName","existingUser","baseSlug","replace","substring","slug","counter","hashedPassword","hash","result","$transaction","tx","settings","JSON","stringify","timezone","currency","dateFormat","allowPublicDashboard","requireTwoFactor","maxUsers","customBranding","logout","verifyToken","getUserSessions","findMany","gt","orderBy","createdAt","select","ipAddress","revokeSession","updateMany","revokeAllSessions"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\auth.service.ts"],"sourcesContent":["import { nanoid } from 'nanoid'\nimport bcrypt from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport { db } from '@utmify/database'\nimport type { User, Organization, UserRole } from '@utmify/shared'\nimport { jwtConfig } from '@/config/env'\nimport { logger, logAuth } from '@/utils/logger'\nimport { ApiError } from '@/utils/errors'\n\nexport interface AuthTokens {\n  accessToken: string\n  refreshToken: string\n  expiresIn: number\n}\n\nexport interface JWTPayload {\n  userId: string\n  organizationId: string\n  role: UserRole\n  email: string\n  sessionId: string\n}\n\nexport interface RefreshTokenPayload {\n  userId: string\n  sessionId: string\n  tokenId: string\n}\n\nexport class AuthService {\n  constructor(private app: FastifyInstance) {}\n\n  // Generate JWT tokens\n  async generateTokens(user: User, sessionId: string): Promise<AuthTokens> {\n    const payload: JWTPayload = {\n      userId: user.id,\n      organizationId: user.organizationId,\n      role: user.role,\n      email: user.email,\n      sessionId,\n    }\n\n    const refreshTokenId = nanoid()\n    const refreshPayload: RefreshTokenPayload = {\n      userId: user.id,\n      sessionId,\n      tokenId: refreshTokenId,\n    }\n\n    // Generate access token\n    const accessToken = this.app.jwt.sign(payload, {\n      expiresIn: jwtConfig.accessExpiresIn,\n    })\n\n    // Generate refresh token with different secret\n    const refreshToken = this.app.jwt.sign(refreshPayload, {\n      secret: jwtConfig.refreshSecret,\n      expiresIn: jwtConfig.refreshExpiresIn,\n    })\n\n    // Store refresh token in Redis (temporarily disabled)\n    // const refreshTokenKey = `refresh_token:${refreshTokenId}`\n    // const refreshTokenData = {\n    //   userId: user.id,\n    //   sessionId,\n    //   createdAt: new Date().toISOString(),\n    // }\n\n    // await this.app.redis.setex(\n    //   refreshTokenKey,\n    //   7 * 24 * 60 * 60, // 7 days in seconds\n    //   JSON.stringify(refreshTokenData)\n    // )\n\n    // Calculate expiration time\n    const expiresIn = 15 * 60 // 15 minutes in seconds\n\n    return {\n      accessToken,\n      refreshToken,\n      expiresIn,\n    }\n  }\n\n  // Verify and refresh access token\n  async refreshToken(refreshToken: string): Promise<AuthTokens> {\n    try {\n      // Verify refresh token\n      const payload = this.app.jwt.verify(refreshToken, {\n        secret: jwtConfig.refreshSecret,\n      }) as RefreshTokenPayload\n\n      // Check if refresh token exists in Redis (temporarily disabled)\n      // const refreshTokenKey = `refresh_token:${payload.tokenId}`\n      // const tokenData = await this.app.redis.get(refreshTokenKey)\n\n      // if (!tokenData) {\n      //   throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n      // }\n\n      // const parsedTokenData = JSON.parse(tokenData)\n      // if (parsedTokenData.userId !== payload.userId || parsedTokenData.sessionId !== payload.sessionId) {\n      //   throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n      // }\n\n      // Get user from database\n      const user = await db.user.findUnique({\n        where: { id: payload.userId },\n        include: { organization: true },\n      })\n\n      if (!user || !user.isActive) {\n        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401)\n      }\n\n      // Check if session is still valid\n      const session = await db.userSession.findUnique({\n        where: { id: payload.sessionId },\n      })\n\n      if (!session || session.expiresAt < new Date()) {\n        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401)\n      }\n\n      // Generate new tokens\n      const newTokens = await this.generateTokens(user, payload.sessionId)\n\n      // Remove old refresh token\n      await this.app.redis.del(refreshTokenKey)\n\n      logAuth('token_refreshed', user.id, user.email)\n\n      return newTokens\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error\n      }\n      throw new ApiError('Invalid refresh token', 'INVALID_REFRESH_TOKEN', 401)\n    }\n  }\n\n  // Login user\n  async login(email: string, password: string, ip?: string, userAgent?: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    tokens: AuthTokens\n  }> {\n    // Find user with organization\n    const user = await db.user.findUnique({\n      where: { email: email.toLowerCase() },\n      include: { organization: true },\n    })\n\n    if (!user) {\n      logAuth('login_failed', undefined, email, ip, false)\n      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401)\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      logAuth('login_failed_inactive', user.id, email, ip, false)\n      throw new ApiError('Account is disabled', 'ACCOUNT_DISABLED', 401)\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password)\n    if (!isValidPassword) {\n      logAuth('login_failed', user.id, email, ip, false)\n      throw new ApiError('Invalid credentials', 'INVALID_CREDENTIALS', 401)\n    }\n\n    // Check if organization is active\n    if (!user.organization.isActive) {\n      logAuth('login_failed_org_inactive', user.id, email, ip, false)\n      throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401)\n    }\n\n    // Create user session\n    const sessionId = nanoid()\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 7) // 7 days\n\n    await db.userSession.create({\n      data: {\n        id: sessionId,\n        token: sessionId,\n        userId: user.id,\n        expiresAt,\n      },\n    })\n\n    // Update last login\n    await db.user.update({\n      where: { id: user.id },\n      data: { lastLoginAt: new Date() },\n    })\n\n    // Generate tokens\n    const tokens = await this.generateTokens(user, sessionId)\n\n    logAuth('login_success', user.id, email, ip)\n\n    // Remove password from response\n    const { password: _, ...safeUser } = user\n\n    return {\n      user: safeUser,\n      organization: user.organization,\n      tokens,\n    }\n  }\n\n  // Register new user and organization\n  async register(data: {\n    name: string\n    email: string\n    password: string\n    organizationName: string\n  }, ip?: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    tokens: AuthTokens\n  }> {\n    const { name, email, password, organizationName } = data\n\n    // Check if user already exists\n    const existingUser = await db.user.findUnique({\n      where: { email: email.toLowerCase() },\n    })\n\n    if (existingUser) {\n      throw new ApiError('Email already exists', 'EMAIL_ALREADY_EXISTS', 409)\n    }\n\n    // Generate organization slug\n    const baseSlug = organizationName\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/(^-|-$)/g, '')\n      .substring(0, 50)\n\n    let slug = baseSlug\n    let counter = 1\n\n    // Ensure unique slug\n    while (await db.organization.findUnique({ where: { slug } })) {\n      slug = `${baseSlug}-${counter}`\n      counter++\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12)\n\n    // Create organization and user in transaction\n    const result = await db.$transaction(async (tx) => {\n      // Create organization\n      const organization = await tx.organization.create({\n        data: {\n          name: organizationName,\n          slug,\n          settings: JSON.stringify({\n            timezone: 'UTC',\n            currency: 'USD',\n            dateFormat: 'MM/DD/YYYY',\n            allowPublicDashboard: false,\n            requireTwoFactor: false,\n            maxUsers: 2,\n            customBranding: false,\n          }),\n        },\n      })\n\n      // Create user as organization owner\n      const user = await tx.user.create({\n        data: {\n          name,\n          email: email.toLowerCase(),\n          password: hashedPassword,\n          role: 'OWNER',\n          isActive: true,\n          organizationId: organization.id,\n        },\n      })\n\n      return { user, organization }\n    })\n\n    // Create user session\n    const sessionId = nanoid()\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 7) // 7 days\n\n    await db.userSession.create({\n      data: {\n        id: sessionId,\n        token: sessionId,\n        userId: result.user.id,\n        expiresAt,\n      },\n    })\n\n    // Generate tokens\n    const tokens = await this.generateTokens(result.user, sessionId)\n\n    logAuth('register_success', result.user.id, email, ip)\n\n    // Remove password from response\n    const { password: _, ...safeUser } = result.user\n\n    return {\n      user: safeUser,\n      organization: result.organization,\n      tokens,\n    }\n  }\n\n  // Logout user\n  async logout(sessionId: string, refreshToken?: string): Promise<void> {\n    try {\n      // Invalidate session\n      await db.userSession.update({\n        where: { id: sessionId },\n        data: { expiresAt: new Date() },\n      })\n\n      // Remove refresh token from Redis if provided (temporarily disabled)\n      // if (refreshToken) {\n      //   try {\n      //     const payload = this.app.jwt.verify(refreshToken, {\n      //       secret: jwtConfig.refreshSecret,\n      //     }) as RefreshTokenPayload\n\n      //     const refreshTokenKey = `refresh_token:${payload.tokenId}`\n      //     await this.app.redis.del(refreshTokenKey)\n      //   } catch {\n      //     // Ignore errors when removing refresh token\n      //   }\n      // }\n\n      logAuth('logout_success')\n    } catch (error) {\n      logger.error(error, 'Error during logout')\n      throw new ApiError('Logout failed', 'LOGOUT_FAILED', 500)\n    }\n  }\n\n  // Verify JWT token and get user\n  async verifyToken(token: string): Promise<{\n    user: Omit<User, 'password'>\n    organization: Organization\n    sessionId: string\n  }> {\n    try {\n      // Verify token\n      const payload = this.app.jwt.verify(token) as JWTPayload\n\n      // Check if session is still valid\n      const session = await db.userSession.findUnique({\n        where: { id: payload.sessionId },\n      })\n\n      if (!session || session.expiresAt < new Date()) {\n        throw new ApiError('Session expired', 'SESSION_EXPIRED', 401)\n      }\n\n      // Get user with organization\n      const user = await db.user.findUnique({\n        where: { id: payload.userId },\n        include: { organization: true },\n      })\n\n      if (!user || !user.isActive) {\n        throw new ApiError('User not found or inactive', 'USER_NOT_FOUND', 401)\n      }\n\n      if (!user.organization.isActive) {\n        throw new ApiError('Organization is disabled', 'ORGANIZATION_DISABLED', 401)\n      }\n\n      // Remove password from response\n      const { password: _, ...safeUser } = user\n\n      return {\n        user: safeUser,\n        organization: user.organization,\n        sessionId: payload.sessionId,\n      }\n    } catch (error) {\n      if (error instanceof ApiError) {\n        throw error\n      }\n      throw new ApiError('Invalid token', 'INVALID_TOKEN', 401)\n    }\n  }\n\n  // Get all active sessions for a user\n  async getUserSessions(userId: string): Promise<any[]> {\n    return db.userSession.findMany({\n      where: {\n        userId,\n        expiresAt: { gt: new Date() },\n      },\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        ipAddress: true,\n        userAgent: true,\n        createdAt: true,\n        expiresAt: true,\n      },\n    })\n  }\n\n  // Revoke a specific session\n  async revokeSession(sessionId: string, userId: string): Promise<void> {\n    await db.userSession.updateMany({\n      where: {\n        id: sessionId,\n        userId,\n      },\n      data: {\n        expiresAt: new Date(),\n      },\n    })\n\n    logAuth('session_revoked', userId)\n  }\n\n  // Revoke all sessions for a user\n  async revokeAllSessions(userId: string): Promise<void> {\n    await db.userSession.updateMany({\n      where: { userId },\n      data: { expiresAt: new Date() },\n    })\n\n    logAuth('all_sessions_revoked', userId)\n  }\n}"],"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","ignoreList":[]}