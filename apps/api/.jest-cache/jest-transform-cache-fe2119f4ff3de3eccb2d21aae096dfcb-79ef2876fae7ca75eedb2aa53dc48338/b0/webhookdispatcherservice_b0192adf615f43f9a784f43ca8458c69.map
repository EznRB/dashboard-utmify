{"version":3,"names":["cov_2ipbd0t0ng","actualCoverage","PrismaClient","QueueManager","crypto","Logger","prisma","s","logger","WebhookDispatcherService","queueManager","constructor","f","getInstance","dispatchEvent","event","data","userId","metadata","info","endpoints","webhookEndpoint","findMany","where","status","events","has","length","b","payload","timestamp","Date","toISOString","deliveries","map","endpoint","id","randomUUID","endpointId","url","secret","maxRetries","attempt","delivery","addJob","attempts","backoff","type","delay","error","dispatchCampaignEvent","eventType","campaign","name","budget","platform","createdAt","updatedAt","source","campaignId","dispatchConversionEvent","conversion","value","currency","conversionId","dispatchBudgetEvent","amount","spent","remaining","period","budgetId","dispatchAdEvent","ad","creative","targeting","performance","adId","dispatchIntegrationEvent","integration","lastSync","integrationId","dispatchAnalyticsEvent","analytics","metrics","insights","generatedAt","reportId","reportType","testWebhook","findFirst","Error","testPayload","message","isTest","getWebhookStats","total","successful","failed","pending","Promise","all","webhookLog","count","successRate","Math","round","webhookDispatcher"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\webhook-dispatcher.service.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\nimport { QueueManager } from '../queue'\nimport crypto from 'crypto'\nimport { Logger } from '../utils/logger'\n\nconst prisma = new PrismaClient()\nconst logger = new Logger('WebhookDispatcher')\n\nexport interface WebhookPayload {\n  event: string\n  data: any\n  timestamp: string\n  userId: string\n  metadata?: Record<string, any>\n}\n\nexport interface WebhookDelivery {\n  id: string\n  endpointId: string\n  url: string\n  payload: WebhookPayload\n  secret?: string\n  maxRetries: number\n  attempt: number\n}\n\nexport class WebhookDispatcherService {\n  private queueManager: QueueManager\n\n  constructor() {\n    this.queueManager = QueueManager.getInstance()\n  }\n\n  /**\n   * Dispatch webhooks for a specific event\n   */\n  async dispatchEvent(event: string, data: any, userId: string, metadata?: Record<string, any>) {\n    try {\n      logger.info(`Dispatching event: ${event} for user: ${userId}`)\n\n      // Find all active webhook endpoints for this user and event\n      const endpoints = await prisma.webhookEndpoint.findMany({\n        where: {\n          userId,\n          status: 'active',\n          events: {\n            has: event\n          }\n        }\n      })\n\n      if (endpoints.length === 0) {\n        logger.info(`No active endpoints found for event: ${event}, user: ${userId}`)\n        return\n      }\n\n      const payload: WebhookPayload = {\n        event,\n        data,\n        timestamp: new Date().toISOString(),\n        userId,\n        metadata\n      }\n\n      // Queue webhook deliveries\n      const deliveries = endpoints.map(endpoint => ({\n        id: crypto.randomUUID(),\n        endpointId: endpoint.id,\n        url: endpoint.url,\n        payload,\n        secret: endpoint.secret,\n        maxRetries: 3,\n        attempt: 1\n      }))\n\n      // Add to webhook processing queue\n      for (const delivery of deliveries) {\n        await this.queueManager.addJob('WEBHOOK_PROCESSING', {\n          delivery,\n          userId\n        }, {\n          attempts: 1, // Initial attempt, retries handled separately\n          backoff: {\n            type: 'exponential',\n            delay: 2000\n          }\n        })\n      }\n\n      logger.info(`Queued ${deliveries.length} webhook deliveries for event: ${event}`)\n    } catch (error) {\n      logger.error('Error dispatching webhooks:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Dispatch campaign events\n   */\n  async dispatchCampaignEvent(eventType: 'created' | 'updated' | 'deleted', campaign: any, userId: string) {\n    const event = `campaign.${eventType}`\n    await this.dispatchEvent(event, {\n      campaign: {\n        id: campaign.id,\n        name: campaign.name,\n        status: campaign.status,\n        budget: campaign.budget,\n        platform: campaign.platform,\n        createdAt: campaign.createdAt,\n        updatedAt: campaign.updatedAt\n      }\n    }, userId, {\n      source: 'campaign_management',\n      campaignId: campaign.id\n    })\n  }\n\n  /**\n   * Dispatch conversion events\n   */\n  async dispatchConversionEvent(conversion: any, userId: string) {\n    await this.dispatchEvent('conversion.received', {\n      conversion: {\n        id: conversion.id,\n        campaignId: conversion.campaignId,\n        value: conversion.value,\n        currency: conversion.currency,\n        source: conversion.source,\n        timestamp: conversion.timestamp,\n        metadata: conversion.metadata\n      }\n    }, userId, {\n      source: 'conversion_tracking',\n      conversionId: conversion.id,\n      campaignId: conversion.campaignId\n    })\n  }\n\n  /**\n   * Dispatch budget events\n   */\n  async dispatchBudgetEvent(eventType: 'updated' | 'exceeded' | 'depleted', budget: any, userId: string) {\n    const event = `budget.${eventType}`\n    await this.dispatchEvent(event, {\n      budget: {\n        id: budget.id,\n        campaignId: budget.campaignId,\n        amount: budget.amount,\n        spent: budget.spent,\n        remaining: budget.remaining,\n        currency: budget.currency,\n        period: budget.period,\n        status: budget.status\n      }\n    }, userId, {\n      source: 'budget_management',\n      budgetId: budget.id,\n      campaignId: budget.campaignId\n    })\n  }\n\n  /**\n   * Dispatch ad events\n   */\n  async dispatchAdEvent(eventType: 'created' | 'updated' | 'deleted', ad: any, userId: string) {\n    const event = `ad.${eventType}`\n    await this.dispatchEvent(event, {\n      ad: {\n        id: ad.id,\n        campaignId: ad.campaignId,\n        name: ad.name,\n        status: ad.status,\n        type: ad.type,\n        creative: ad.creative,\n        targeting: ad.targeting,\n        performance: ad.performance,\n        createdAt: ad.createdAt,\n        updatedAt: ad.updatedAt\n      }\n    }, userId, {\n      source: 'ad_management',\n      adId: ad.id,\n      campaignId: ad.campaignId\n    })\n  }\n\n  /**\n   * Dispatch integration events\n   */\n  async dispatchIntegrationEvent(eventType: 'connected' | 'disconnected' | 'error', integration: any, userId: string) {\n    const event = `integration.${eventType}`\n    await this.dispatchEvent(event, {\n      integration: {\n        id: integration.id,\n        platform: integration.platform,\n        status: integration.status,\n        lastSync: integration.lastSync,\n        error: integration.error\n      }\n    }, userId, {\n      source: 'integration_management',\n      integrationId: integration.id,\n      platform: integration.platform\n    })\n  }\n\n  /**\n   * Dispatch analytics events\n   */\n  async dispatchAnalyticsEvent(eventType: 'report_generated' | 'threshold_reached', analytics: any, userId: string) {\n    const event = `analytics.${eventType}`\n    await this.dispatchEvent(event, {\n      analytics: {\n        id: analytics.id,\n        type: analytics.type,\n        period: analytics.period,\n        metrics: analytics.metrics,\n        insights: analytics.insights,\n        generatedAt: analytics.generatedAt\n      }\n    }, userId, {\n      source: 'analytics_engine',\n      reportId: analytics.id,\n      reportType: analytics.type\n    })\n  }\n\n  /**\n   * Test webhook endpoint\n   */\n  async testWebhook(endpointId: string, userId: string) {\n    try {\n      const endpoint = await prisma.webhookEndpoint.findFirst({\n        where: {\n          id: endpointId,\n          userId\n        }\n      })\n\n      if (!endpoint) {\n        throw new Error('Webhook endpoint not found')\n      }\n\n      const testPayload: WebhookPayload = {\n        event: 'webhook.test',\n        data: {\n          message: 'This is a test webhook delivery',\n          endpointId: endpoint.id,\n          timestamp: new Date().toISOString()\n        },\n        timestamp: new Date().toISOString(),\n        userId\n      }\n\n      const delivery: WebhookDelivery = {\n        id: crypto.randomUUID(),\n        endpointId: endpoint.id,\n        url: endpoint.url,\n        payload: testPayload,\n        secret: endpoint.secret,\n        maxRetries: 1,\n        attempt: 1\n      }\n\n      await this.queueManager.addJob('WEBHOOK_PROCESSING', {\n        delivery,\n        userId,\n        isTest: true\n      })\n\n      logger.info(`Test webhook queued for endpoint: ${endpointId}`)\n    } catch (error) {\n      logger.error('Error testing webhook:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get webhook statistics\n   */\n  async getWebhookStats(userId: string, endpointId?: string) {\n    try {\n      const where: any = { userId }\n      if (endpointId) {\n        where.endpointId = endpointId\n      }\n\n      const [total, successful, failed, pending] = await Promise.all([\n        prisma.webhookLog.count({ where }),\n        prisma.webhookLog.count({ where: { ...where, status: 'success' } }),\n        prisma.webhookLog.count({ where: { ...where, status: 'failed' } }),\n        prisma.webhookLog.count({ where: { ...where, status: 'pending' } })\n      ])\n\n      const successRate = total > 0 ? (successful / total) * 100 : 0\n\n      return {\n        total,\n        successful,\n        failed,\n        pending,\n        successRate: Math.round(successRate * 100) / 100\n      }\n    } catch (error) {\n      logger.error('Error getting webhook stats:', error)\n      throw error\n    }\n  }\n}\n\n// Export singleton instance\nexport const webhookDispatcher = new WebhookDispatcherService()"],"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","ignoreList":[]}