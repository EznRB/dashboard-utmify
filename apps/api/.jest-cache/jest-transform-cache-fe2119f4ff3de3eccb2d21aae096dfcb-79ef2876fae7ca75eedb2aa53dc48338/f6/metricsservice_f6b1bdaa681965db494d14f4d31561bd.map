{"version":3,"names":["cov_1ooxeg0p2z","actualCoverage","getCacheService","CACHE_PREFIXES","CACHE_TTL","getStoredProceduresService","logger","MetricsService","prisma","cache","s","storedProcedures","useStoredProcedures","constructor","f","checkStoredProceduresAvailability","calculateMetrics","filters","cacheKey","generateCacheKey","getOrSet","info","b","result","calculateKPIMetrics","organizationId","campaignIds","startDate","endDate","mapStoredProcedureResult","error","warn","calculateMetricsFromDB","ttl","METRICS","prefix","getDashboardMetrics","dateRange","generateDashboardMetrics","DASHBOARD","getFunnelAnalysis","campaignId","calculateFunnelAnalysis","FUNNEL","compareMetrics","previousPeriod","calculateComparison","COMPARISON","updateRealTimeMetrics","eventType","eventData","now","Date","hourStart","getFullYear","getMonth","getDate","getHours","metricsHourly","upsert","where","campaignId_hour","hour","update","clicks","increment","conversions","revenue","value","impressions","updatedAt","create","adSpend","createdAt","invalidateCampaignCache","debug","targetCampaignIds","length","campaigns","campaign","findMany","select","id","map","c","getEmptyMetrics","dailyMetrics","metricsDaily","aggregate","in","date","gte","lte","_sum","sums","ctr","conversionRate","cpc","cpm","cac","roas","roi","profit","margin","arpu","ltv","summary","trends","calculateTrends","topCampaigns","getTopCampaigns","alerts","generateAlerts","daysDiff","Math","ceil","getTime","intervalDays","max","floor","i","periodStart","setDate","periodEnd","setTime","metrics","push","period","toISOString","split","limit","name","campaignMetrics","Promise","all","campaignName","sort","a","slice","type","message","metric","threshold","funnelData","funnelStage","orderBy","stageOrder","stageMap","Map","forEach","stage","existing","get","stageName","users","set","stages","Array","from","entries","data","funnelStages","previousUsers","index","dropoffRate","current","previous","changes","Object","keys","key","currentValue","previousValue","absolute","percentage","operation","hash","Buffer","JSON","stringify","toString","invalidateCampaign","invalidateOrganizationCache","invalidateOrganization","exportMetrics","format","filename","toLowerCase","formatForExport","EXPORT","headers","join","values","health","checkStoredProceduresHealth","available","missing","Number","ad_spend","conversion_rate","getStoredProceduresStats","getPerformanceStats","refreshStoredProceduresStatus"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts"],"sourcesContent":["import { PrismaService } from '../database/prisma.service';\nimport { getCacheService, CACHE_PREFIXES, CACHE_TTL, Cached } from './cache.service';\nimport { getStoredProceduresService, StoredProceduresService } from './stored-procedures.service';\nimport { logger } from '../utils/logger';\n\n// Metrics calculation interfaces\nexport interface MetricsFilters {\n  campaignIds?: string[];\n  startDate: Date;\n  endDate: Date;\n  metricsTypes?: string[];\n  organizationId: string;\n  groupBy?: 'day' | 'hour' | 'campaign' | 'platform';\n}\n\nexport interface KPIMetrics {\n  // Revenue metrics\n  revenue: number;\n  roas: number; // Return on Ad Spend\n  roi: number; // Return on Investment\n  \n  // Cost metrics\n  adSpend: number;\n  cpc: number; // Cost Per Click\n  cpm: number; // Cost Per Mille (1000 impressions)\n  cac: number; // Customer Acquisition Cost\n  \n  // Performance metrics\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  ctr: number; // Click Through Rate\n  conversionRate: number;\n  \n  // Customer metrics\n  ltv: number; // Lifetime Value\n  arpu: number; // Average Revenue Per User\n  \n  // Profitability\n  margin: number;\n  profit: number;\n}\n\nexport interface DashboardMetrics {\n  summary: KPIMetrics;\n  trends: {\n    period: string;\n    metrics: KPIMetrics;\n  }[];\n  topCampaigns: {\n    campaignId: string;\n    campaignName: string;\n    metrics: KPIMetrics;\n  }[];\n  alerts: {\n    type: 'warning' | 'critical';\n    message: string;\n    metric: string;\n    value: number;\n    threshold: number;\n  }[];\n}\n\nexport interface FunnelStage {\n  stage: string;\n  users: number;\n  conversionRate: number;\n  dropoffRate: number;\n}\n\nexport interface ComparisonResult {\n  current: KPIMetrics;\n  previous: KPIMetrics;\n  changes: {\n    [key in keyof KPIMetrics]: {\n      absolute: number;\n      percentage: number;\n    };\n  };\n}\n\nexport class MetricsService {\n  private cache = getCacheService();\n  private storedProcedures: StoredProceduresService;\n  private useStoredProcedures = true; // Flag to enable/disable stored procedures\n\n  constructor(private prisma: PrismaService) {\n    this.storedProcedures = getStoredProceduresService(prisma);\n    this.checkStoredProceduresAvailability();\n  }\n\n  // Calculate comprehensive metrics\n  public async calculateMetrics(filters: MetricsFilters): Promise<KPIMetrics> {\n    const cacheKey = this.generateCacheKey('calculate', filters);\n    \n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Calculating metrics from database', { filters });\n        \n        // Try stored procedure first if available\n        if (this.useStoredProcedures) {\n          try {\n            const result = await this.storedProcedures.calculateKPIMetrics(\n              filters.organizationId,\n              filters.campaignIds,\n              filters.startDate,\n              filters.endDate\n            );\n            \n            if (result) {\n              return this.mapStoredProcedureResult(result);\n            }\n          } catch (error) {\n            logger.warn('Stored procedure failed, falling back to TypeScript calculation:', error);\n          }\n        }\n        \n        // Fallback to TypeScript calculation\n        return this.calculateMetricsFromDB(filters);\n      },\n      {\n        ttl: CACHE_TTL.METRICS,\n        prefix: CACHE_PREFIXES.METRICS,\n      }\n    );\n  }\n\n  // Get dashboard metrics with caching\n  public async getDashboardMetrics(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<DashboardMetrics> {\n    const cacheKey = this.generateCacheKey('dashboard', {\n      organizationId,\n      ...dateRange,\n      campaignIds,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating dashboard metrics', { organizationId, dateRange });\n        return this.generateDashboardMetrics(organizationId, dateRange, campaignIds);\n      },\n      {\n        ttl: CACHE_TTL.DASHBOARD,\n        prefix: CACHE_PREFIXES.DASHBOARD,\n      }\n    );\n  }\n\n  // Get funnel analysis with caching\n  public async getFunnelAnalysis(\n    campaignId: string,\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date }\n  ): Promise<FunnelStage[]> {\n    const cacheKey = this.generateCacheKey('funnel', {\n      campaignId,\n      organizationId,\n      ...dateRange,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Calculating funnel analysis', { campaignId, dateRange });\n        return this.calculateFunnelAnalysis(campaignId, organizationId, dateRange);\n      },\n      {\n        ttl: CACHE_TTL.FUNNEL,\n        prefix: CACHE_PREFIXES.FUNNEL,\n      }\n    );\n  }\n\n  // Compare metrics between periods\n  public async compareMetrics(\n    filters: MetricsFilters,\n    previousPeriod: { startDate: Date; endDate: Date }\n  ): Promise<ComparisonResult> {\n    const cacheKey = this.generateCacheKey('comparison', {\n      ...filters,\n      previousPeriod,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Comparing metrics between periods', { filters, previousPeriod });\n        return this.calculateComparison(filters, previousPeriod);\n      },\n      {\n        ttl: CACHE_TTL.COMPARISON,\n        prefix: CACHE_PREFIXES.COMPARISON,\n      }\n    );\n  }\n\n  // Update real-time metrics (no caching for real-time data)\n  public async updateRealTimeMetrics(\n    campaignId: string,\n    eventType: 'CLICK' | 'CONVERSION' | 'VIEW',\n    eventData: Record<string, any>\n  ): Promise<void> {\n    try {\n      // Update hourly metrics\n      const now = new Date();\n      const hourStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());\n\n      await this.prisma.metricsHourly.upsert({\n        where: {\n          campaignId_hour: {\n            campaignId,\n            hour: hourStart,\n          },\n        },\n        update: {\n          ...(eventType === 'CLICK' && { clicks: { increment: 1 } }),\n          ...(eventType === 'CONVERSION' && { \n            conversions: { increment: 1 },\n            revenue: { increment: eventData.value || 0 },\n          }),\n          ...(eventType === 'VIEW' && { impressions: { increment: 1 } }),\n          updatedAt: now,\n        },\n        create: {\n          campaignId,\n          hour: hourStart,\n          impressions: eventType === 'VIEW' ? 1 : 0,\n          clicks: eventType === 'CLICK' ? 1 : 0,\n          conversions: eventType === 'CONVERSION' ? 1 : 0,\n          revenue: eventType === 'CONVERSION' ? (eventData.value || 0) : 0,\n          adSpend: 0,\n          createdAt: now,\n          updatedAt: now,\n        },\n      });\n\n      // Invalidate related cache\n      await this.invalidateCampaignCache(campaignId);\n\n      logger.debug(`Real-time metrics updated for campaign ${campaignId}`, {\n        eventType,\n        eventData,\n      });\n    } catch (error) {\n      logger.error('Failed to update real-time metrics:', error);\n      throw error;\n    }\n  }\n\n  // Private methods for actual calculations\n  private async calculateMetricsFromDB(filters: MetricsFilters): Promise<KPIMetrics> {\n    const { campaignIds, startDate, endDate, organizationId } = filters;\n\n    // Get campaigns if not specified\n    let targetCampaignIds = campaignIds;\n    if (!targetCampaignIds || targetCampaignIds.length === 0) {\n      const campaigns = await this.prisma.campaign.findMany({\n        where: { organizationId },\n        select: { id: true },\n      });\n      targetCampaignIds = campaigns.map(c => c.id);\n    }\n\n    if (targetCampaignIds.length === 0) {\n      return this.getEmptyMetrics();\n    }\n\n    // Aggregate daily metrics\n    const dailyMetrics = await this.prisma.metricsDaily.aggregate({\n      where: {\n        campaignId: { in: targetCampaignIds },\n        date: {\n          gte: startDate,\n          lte: endDate,\n        },\n      },\n      _sum: {\n        impressions: true,\n        clicks: true,\n        conversions: true,\n        revenue: true,\n        adSpend: true,\n      },\n    });\n\n    const sums = dailyMetrics._sum;\n    const impressions = sums.impressions || 0;\n    const clicks = sums.clicks || 0;\n    const conversions = sums.conversions || 0;\n    const revenue = sums.revenue || 0;\n    const adSpend = sums.adSpend || 0;\n\n    // Calculate derived metrics\n    const ctr = impressions > 0 ? (clicks / impressions) * 100 : 0;\n    const conversionRate = clicks > 0 ? (conversions / clicks) * 100 : 0;\n    const cpc = clicks > 0 ? adSpend / clicks : 0;\n    const cpm = impressions > 0 ? (adSpend / impressions) * 1000 : 0;\n    const cac = conversions > 0 ? adSpend / conversions : 0;\n    const roas = adSpend > 0 ? (revenue / adSpend) * 100 : 0;\n    const roi = adSpend > 0 ? ((revenue - adSpend) / adSpend) * 100 : 0;\n    const profit = revenue - adSpend;\n    const margin = revenue > 0 ? (profit / revenue) * 100 : 0;\n    const arpu = conversions > 0 ? revenue / conversions : 0;\n    \n    // LTV calculation (simplified - could be more complex based on business model)\n    const ltv = arpu * 2.5; // Assuming 2.5x multiplier for LTV\n\n    return {\n      revenue,\n      roas,\n      roi,\n      adSpend,\n      cpc,\n      cpm,\n      cac,\n      impressions,\n      clicks,\n      conversions,\n      ctr,\n      conversionRate,\n      ltv,\n      arpu,\n      margin,\n      profit,\n    };\n  }\n\n  private async generateDashboardMetrics(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<DashboardMetrics> {\n    // Get summary metrics\n    const summary = await this.calculateMetrics({\n      organizationId,\n      startDate: dateRange.startDate,\n      endDate: dateRange.endDate,\n      campaignIds,\n    });\n\n    // Get trends (last 7 days)\n    const trends = await this.calculateTrends(organizationId, dateRange, campaignIds);\n\n    // Get top campaigns\n    const topCampaigns = await this.getTopCampaigns(organizationId, dateRange, 5);\n\n    // Generate alerts\n    const alerts = this.generateAlerts(summary);\n\n    return {\n      summary,\n      trends,\n      topCampaigns,\n      alerts,\n    };\n  }\n\n  private async calculateTrends(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<{ period: string; metrics: KPIMetrics }[]> {\n    const trends = [];\n    const daysDiff = Math.ceil((dateRange.endDate.getTime() - dateRange.startDate.getTime()) / (1000 * 60 * 60 * 24));\n    const intervalDays = Math.max(1, Math.floor(daysDiff / 7)); // Max 7 data points\n\n    for (let i = 0; i < 7 && i * intervalDays < daysDiff; i++) {\n      const periodStart = new Date(dateRange.startDate);\n      periodStart.setDate(periodStart.getDate() + (i * intervalDays));\n      \n      const periodEnd = new Date(periodStart);\n      periodEnd.setDate(periodEnd.getDate() + intervalDays - 1);\n      \n      if (periodEnd > dateRange.endDate) {\n        periodEnd.setTime(dateRange.endDate.getTime());\n      }\n\n      const metrics = await this.calculateMetrics({\n        organizationId,\n        startDate: periodStart,\n        endDate: periodEnd,\n        campaignIds,\n      });\n\n      trends.push({\n        period: periodStart.toISOString().split('T')[0],\n        metrics,\n      });\n    }\n\n    return trends;\n  }\n\n  private async getTopCampaigns(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    limit: number\n  ): Promise<{ campaignId: string; campaignName: string; metrics: KPIMetrics }[]> {\n    // Get campaigns with their metrics\n    const campaigns = await this.prisma.campaign.findMany({\n      where: { organizationId },\n      select: { id: true, name: true },\n    });\n\n    const campaignMetrics = await Promise.all(\n      campaigns.map(async (campaign) => {\n        const metrics = await this.calculateMetrics({\n          organizationId,\n          startDate: dateRange.startDate,\n          endDate: dateRange.endDate,\n          campaignIds: [campaign.id],\n        });\n\n        return {\n          campaignId: campaign.id,\n          campaignName: campaign.name,\n          metrics,\n        };\n      })\n    );\n\n    // Sort by revenue and return top campaigns\n    return campaignMetrics\n      .sort((a, b) => b.metrics.revenue - a.metrics.revenue)\n      .slice(0, limit);\n  }\n\n  private generateAlerts(metrics: KPIMetrics): DashboardMetrics['alerts'] {\n    const alerts: DashboardMetrics['alerts'] = [];\n\n    // ROAS alert\n    if (metrics.roas < 200) {\n      alerts.push({\n        type: metrics.roas < 100 ? 'critical' : 'warning',\n        message: 'ROAS is below target threshold',\n        metric: 'roas',\n        value: metrics.roas,\n        threshold: 200,\n      });\n    }\n\n    // Conversion rate alert\n    if (metrics.conversionRate < 2) {\n      alerts.push({\n        type: metrics.conversionRate < 1 ? 'critical' : 'warning',\n        message: 'Conversion rate is below target threshold',\n        metric: 'conversionRate',\n        value: metrics.conversionRate,\n        threshold: 2,\n      });\n    }\n\n    // CTR alert\n    if (metrics.ctr < 1) {\n      alerts.push({\n        type: metrics.ctr < 0.5 ? 'critical' : 'warning',\n        message: 'Click-through rate is below target threshold',\n        metric: 'ctr',\n        value: metrics.ctr,\n        threshold: 1,\n      });\n    }\n\n    return alerts;\n  }\n\n  private async calculateFunnelAnalysis(\n    campaignId: string,\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date }\n  ): Promise<FunnelStage[]> {\n    // Get funnel stages from database\n    const funnelData = await this.prisma.funnelStage.findMany({\n      where: {\n        campaignId,\n        date: {\n          gte: dateRange.startDate,\n          lte: dateRange.endDate,\n        },\n      },\n      orderBy: { stageOrder: 'asc' },\n    });\n\n    // Aggregate by stage\n    const stageMap = new Map<string, { users: number; stageOrder: number }>();\n    \n    funnelData.forEach(stage => {\n      const existing = stageMap.get(stage.stageName) || { users: 0, stageOrder: stage.stageOrder };\n      existing.users += stage.users;\n      stageMap.set(stage.stageName, existing);\n    });\n\n    // Convert to array and calculate rates\n    const stages = Array.from(stageMap.entries())\n      .map(([stageName, data]) => ({ stageName, ...data }))\n      .sort((a, b) => a.stageOrder - b.stageOrder);\n\n    const funnelStages: FunnelStage[] = [];\n    let previousUsers = 0;\n\n    stages.forEach((stage, index) => {\n      const conversionRate = index === 0 ? 100 : previousUsers > 0 ? (stage.users / previousUsers) * 100 : 0;\n      const dropoffRate = 100 - conversionRate;\n\n      funnelStages.push({\n        stage: stage.stageName,\n        users: stage.users,\n        conversionRate,\n        dropoffRate,\n      });\n\n      previousUsers = stage.users;\n    });\n\n    return funnelStages;\n  }\n\n  private async calculateComparison(\n    filters: MetricsFilters,\n    previousPeriod: { startDate: Date; endDate: Date }\n  ): Promise<ComparisonResult> {\n    const [current, previous] = await Promise.all([\n      this.calculateMetrics(filters),\n      this.calculateMetrics({\n        ...filters,\n        startDate: previousPeriod.startDate,\n        endDate: previousPeriod.endDate,\n      }),\n    ]);\n\n    const changes = {} as ComparisonResult['changes'];\n    \n    (Object.keys(current) as (keyof KPIMetrics)[]).forEach(key => {\n      const currentValue = current[key];\n      const previousValue = previous[key];\n      const absolute = currentValue - previousValue;\n      const percentage = previousValue !== 0 ? (absolute / previousValue) * 100 : 0;\n      \n      changes[key] = { absolute, percentage };\n    });\n\n    return { current, previous, changes };\n  }\n\n  private getEmptyMetrics(): KPIMetrics {\n    return {\n      revenue: 0,\n      roas: 0,\n      roi: 0,\n      adSpend: 0,\n      cpc: 0,\n      cpm: 0,\n      cac: 0,\n      impressions: 0,\n      clicks: 0,\n      conversions: 0,\n      ctr: 0,\n      conversionRate: 0,\n      ltv: 0,\n      arpu: 0,\n      margin: 0,\n      profit: 0,\n    };\n  }\n\n  private generateCacheKey(operation: string, data: any): string {\n    const hash = Buffer.from(JSON.stringify(data)).toString('base64').slice(0, 32);\n    return `${operation}:${hash}`;\n  }\n\n  // Cache invalidation methods\n  public async invalidateCampaignCache(campaignId: string): Promise<void> {\n    await this.cache.invalidateCampaign(campaignId);\n  }\n\n  public async invalidateOrganizationCache(organizationId: string): Promise<void> {\n    await this.cache.invalidateOrganization(organizationId);\n  }\n\n  // Export data (with caching for large exports)\n  public async exportMetrics(\n    filters: MetricsFilters,\n    format: 'CSV' | 'XLSX' | 'JSON'\n  ): Promise<{ data: any; filename: string }> {\n    const cacheKey = this.generateCacheKey('export', { ...filters, format });\n    \n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating metrics export', { filters, format });\n        \n        const metrics = await this.calculateMetrics(filters);\n        const filename = `metrics_export_${Date.now()}.${format.toLowerCase()}`;\n        \n        return {\n          data: format === 'JSON' ? metrics : this.formatForExport(metrics, format),\n          filename,\n        };\n      },\n      {\n        ttl: CACHE_TTL.EXPORT,\n        prefix: CACHE_PREFIXES.EXPORT,\n      }\n    );\n  }\n\n  private formatForExport(metrics: KPIMetrics, format: 'CSV' | 'XLSX'): string {\n    if (format === 'CSV') {\n      const headers = Object.keys(metrics).join(',');\n      const values = Object.values(metrics).join(',');\n      return `${headers}\\n${values}`;\n    }\n    \n    // For XLSX, return JSON that can be converted to Excel\n    return JSON.stringify([metrics]);\n  }\n\n  // Check if stored procedures are available\n  private async checkStoredProceduresAvailability(): Promise<void> {\n    try {\n      const health = await this.storedProcedures.checkStoredProceduresHealth();\n      this.useStoredProcedures = health.available;\n      \n      if (!health.available) {\n        logger.warn('Stored procedures not available, using TypeScript fallback', {\n          missing: health.missing,\n        });\n      } else {\n        logger.info('Stored procedures are available and will be used for optimization');\n      }\n    } catch (error) {\n      logger.error('Error checking stored procedures availability:', error);\n      this.useStoredProcedures = false;\n    }\n  }\n\n  // Map stored procedure result to KPIMetrics interface\n  private mapStoredProcedureResult(result: any): KPIMetrics {\n    return {\n      revenue: Number(result.revenue) || 0,\n      roas: Number(result.roas) || 0,\n      roi: Number(result.roi) || 0,\n      adSpend: Number(result.ad_spend) || 0,\n      cpc: Number(result.cpc) || 0,\n      cpm: Number(result.cpm) || 0,\n      cac: Number(result.cac) || 0,\n      impressions: Number(result.impressions) || 0,\n      clicks: Number(result.clicks) || 0,\n      conversions: Number(result.conversions) || 0,\n      ctr: Number(result.ctr) || 0,\n      conversionRate: Number(result.conversion_rate) || 0,\n      ltv: Number(result.ltv) || 0,\n      arpu: Number(result.arpu) || 0,\n      margin: Number(result.margin) || 0,\n      profit: Number(result.profit) || 0,\n    };\n  }\n\n  // Get stored procedures performance stats\n  public async getStoredProceduresStats(): Promise<any[]> {\n    if (!this.useStoredProcedures) {\n      return [];\n    }\n    \n    try {\n      return await this.storedProcedures.getPerformanceStats();\n    } catch (error) {\n      logger.error('Error getting stored procedures stats:', error);\n      return [];\n    }\n  }\n\n  // Force refresh stored procedures availability\n  public async refreshStoredProceduresStatus(): Promise<boolean> {\n    await this.checkStoredProceduresAvailability();\n    return this.useStoredProcedures;\n  }\n}"],"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","ignoreList":[]}