8d745026f149e48ba59d66bd49ad24e5
/* istanbul ignore next */
function cov_1ooxeg0p2z() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts";
  var hash = "160084e27cf35062c565aead2699ba245d005fc2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 29
        }
      },
      "1": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "2": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 29
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 67
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 16,
          column: 68
        }
      },
      "6": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 36,
          column: 11
        }
      },
      "7": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 74
        }
      },
      "8": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "9": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 29,
          column: 17
        }
      },
      "10": {
        start: {
          line: 22,
          column: 35
        },
        end: {
          line: 22,
          column: 163
        }
      },
      "11": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 25,
          column: 21
        }
      },
      "12": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 69
        }
      },
      "13": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 107
        }
      },
      "14": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 56
        }
      },
      "15": {
        start: {
          line: 40,
          column: 25
        },
        end: {
          line: 44,
          column: 10
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "17": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 87
        }
      },
      "18": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 89
        }
      },
      "19": {
        start: {
          line: 55,
          column: 25
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "21": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 82
        }
      },
      "22": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 87
        }
      },
      "23": {
        start: {
          line: 70,
          column: 25
        },
        end: {
          line: 73,
          column: 10
        }
      },
      "24": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "25": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 90
        }
      },
      "26": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 69
        }
      },
      "27": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "28": {
        start: {
          line: 86,
          column: 24
        },
        end: {
          line: 86,
          column: 34
        }
      },
      "29": {
        start: {
          line: 87,
          column: 30
        },
        end: {
          line: 87,
          column: 104
        }
      },
      "30": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "31": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 59
        }
      },
      "32": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "33": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 71
        }
      },
      "34": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "35": {
        start: {
          line: 130,
          column: 68
        },
        end: {
          line: 130,
          column: 75
        }
      },
      "36": {
        start: {
          line: 132,
          column: 32
        },
        end: {
          line: 132,
          column: 43
        }
      },
      "37": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "38": {
        start: {
          line: 134,
          column: 30
        },
        end: {
          line: 137,
          column: 14
        }
      },
      "39": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 57
        }
      },
      "40": {
        start: {
          line: 138,
          column: 51
        },
        end: {
          line: 138,
          column: 55
        }
      },
      "41": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "42": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 42
        }
      },
      "43": {
        start: {
          line: 144,
          column: 29
        },
        end: {
          line: 159,
          column: 10
        }
      },
      "44": {
        start: {
          line: 160,
          column: 21
        },
        end: {
          line: 160,
          column: 38
        }
      },
      "45": {
        start: {
          line: 161,
          column: 28
        },
        end: {
          line: 161,
          column: 49
        }
      },
      "46": {
        start: {
          line: 162,
          column: 23
        },
        end: {
          line: 162,
          column: 39
        }
      },
      "47": {
        start: {
          line: 163,
          column: 28
        },
        end: {
          line: 163,
          column: 49
        }
      },
      "48": {
        start: {
          line: 164,
          column: 24
        },
        end: {
          line: 164,
          column: 41
        }
      },
      "49": {
        start: {
          line: 165,
          column: 24
        },
        end: {
          line: 165,
          column: 41
        }
      },
      "50": {
        start: {
          line: 167,
          column: 20
        },
        end: {
          line: 167,
          column: 70
        }
      },
      "51": {
        start: {
          line: 168,
          column: 31
        },
        end: {
          line: 168,
          column: 76
        }
      },
      "52": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 53
        }
      },
      "53": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 170,
          column: 72
        }
      },
      "54": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 171,
          column: 63
        }
      },
      "55": {
        start: {
          line: 172,
          column: 21
        },
        end: {
          line: 172,
          column: 64
        }
      },
      "56": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 75
        }
      },
      "57": {
        start: {
          line: 174,
          column: 23
        },
        end: {
          line: 174,
          column: 40
        }
      },
      "58": {
        start: {
          line: 175,
          column: 23
        },
        end: {
          line: 175,
          column: 65
        }
      },
      "59": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 176,
          column: 64
        }
      },
      "60": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 178,
          column: 30
        }
      },
      "61": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 196,
          column: 10
        }
      },
      "62": {
        start: {
          line: 200,
          column: 24
        },
        end: {
          line: 205,
          column: 10
        }
      },
      "63": {
        start: {
          line: 207,
          column: 23
        },
        end: {
          line: 207,
          column: 89
        }
      },
      "64": {
        start: {
          line: 209,
          column: 29
        },
        end: {
          line: 209,
          column: 85
        }
      },
      "65": {
        start: {
          line: 211,
          column: 23
        },
        end: {
          line: 211,
          column: 51
        }
      },
      "66": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 217,
          column: 10
        }
      },
      "67": {
        start: {
          line: 220,
          column: 23
        },
        end: {
          line: 220,
          column: 25
        }
      },
      "68": {
        start: {
          line: 221,
          column: 25
        },
        end: {
          line: 221,
          column: 121
        }
      },
      "69": {
        start: {
          line: 222,
          column: 29
        },
        end: {
          line: 222,
          column: 66
        }
      },
      "70": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "71": {
        start: {
          line: 223,
          column: 21
        },
        end: {
          line: 223,
          column: 22
        }
      },
      "72": {
        start: {
          line: 224,
          column: 32
        },
        end: {
          line: 224,
          column: 61
        }
      },
      "73": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 76
        }
      },
      "74": {
        start: {
          line: 226,
          column: 30
        },
        end: {
          line: 226,
          column: 51
        }
      },
      "75": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 70
        }
      },
      "76": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "77": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 63
        }
      },
      "78": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 236,
          column: 14
        }
      },
      "79": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "80": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 22
        }
      },
      "81": {
        start: {
          line: 246,
          column: 26
        },
        end: {
          line: 249,
          column: 10
        }
      },
      "82": {
        start: {
          line: 250,
          column: 32
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "83": {
        start: {
          line: 251,
          column: 28
        },
        end: {
          line: 256,
          column: 14
        }
      },
      "84": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 261,
          column: 14
        }
      },
      "85": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 266,
          column: 29
        }
      },
      "86": {
        start: {
          line: 265,
          column: 28
        },
        end: {
          line: 265,
          column: 65
        }
      },
      "87": {
        start: {
          line: 269,
          column: 23
        },
        end: {
          line: 269,
          column: 25
        }
      },
      "88": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "89": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 278,
          column: 15
        }
      },
      "90": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "91": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 288,
          column: 15
        }
      },
      "92": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "93": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 298,
          column: 15
        }
      },
      "94": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 22
        }
      },
      "95": {
        start: {
          line: 304,
          column: 27
        },
        end: {
          line: 313,
          column: 10
        }
      },
      "96": {
        start: {
          line: 315,
          column: 25
        },
        end: {
          line: 315,
          column: 34
        }
      },
      "97": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 320,
          column: 11
        }
      },
      "98": {
        start: {
          line: 317,
          column: 29
        },
        end: {
          line: 317,
          column: 104
        }
      },
      "99": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 42
        }
      },
      "100": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 52
        }
      },
      "101": {
        start: {
          line: 322,
          column: 23
        },
        end: {
          line: 324,
          column: 56
        }
      },
      "102": {
        start: {
          line: 323,
          column: 41
        },
        end: {
          line: 323,
          column: 63
        }
      },
      "103": {
        start: {
          line: 324,
          column: 28
        },
        end: {
          line: 324,
          column: 55
        }
      },
      "104": {
        start: {
          line: 325,
          column: 29
        },
        end: {
          line: 325,
          column: 31
        }
      },
      "105": {
        start: {
          line: 326,
          column: 28
        },
        end: {
          line: 326,
          column: 29
        }
      },
      "106": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "107": {
        start: {
          line: 328,
          column: 35
        },
        end: {
          line: 328,
          column: 114
        }
      },
      "108": {
        start: {
          line: 329,
          column: 32
        },
        end: {
          line: 329,
          column: 52
        }
      },
      "109": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 335,
          column: 15
        }
      },
      "110": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 40
        }
      },
      "111": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 338,
          column: 28
        }
      },
      "112": {
        start: {
          line: 341,
          column: 36
        },
        end: {
          line: 348,
          column: 10
        }
      },
      "113": {
        start: {
          line: 349,
          column: 24
        },
        end: {
          line: 349,
          column: 26
        }
      },
      "114": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 356,
          column: 11
        }
      },
      "115": {
        start: {
          line: 351,
          column: 33
        },
        end: {
          line: 351,
          column: 45
        }
      },
      "116": {
        start: {
          line: 352,
          column: 34
        },
        end: {
          line: 352,
          column: 47
        }
      },
      "117": {
        start: {
          line: 353,
          column: 29
        },
        end: {
          line: 353,
          column: 57
        }
      },
      "118": {
        start: {
          line: 354,
          column: 31
        },
        end: {
          line: 354,
          column: 89
        }
      },
      "119": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 52
        }
      },
      "120": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 46
        }
      },
      "121": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 377,
          column: 10
        }
      },
      "122": {
        start: {
          line: 380,
          column: 21
        },
        end: {
          line: 380,
          column: 86
        }
      },
      "123": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 38
        }
      },
      "124": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 56
        }
      },
      "125": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 64
        }
      },
      "126": {
        start: {
          line: 392,
          column: 25
        },
        end: {
          line: 392,
          column: 80
        }
      },
      "127": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 404,
          column: 11
        }
      },
      "128": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 74
        }
      },
      "129": {
        start: {
          line: 395,
          column: 28
        },
        end: {
          line: 395,
          column: 64
        }
      },
      "130": {
        start: {
          line: 396,
          column: 29
        },
        end: {
          line: 396,
          column: 83
        }
      },
      "131": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 400,
          column: 14
        }
      },
      "132": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "133": {
        start: {
          line: 408,
          column: 28
        },
        end: {
          line: 408,
          column: 58
        }
      },
      "134": {
        start: {
          line: 409,
          column: 27
        },
        end: {
          line: 409,
          column: 59
        }
      },
      "135": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 43
        }
      },
      "136": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 413,
          column: 41
        }
      },
      "137": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "138": {
        start: {
          line: 418,
          column: 27
        },
        end: {
          line: 418,
          column: 84
        }
      },
      "139": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 56
        }
      },
      "140": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 427,
          column: 13
        }
      },
      "141": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 423,
          column: 19
        }
      },
      "142": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 426,
          column: 97
        }
      },
      "143": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 430,
          column: 82
        }
      },
      "144": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 45
        }
      },
      "145": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 453,
          column: 10
        }
      },
      "146": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 459,
          column: 9
        }
      },
      "147": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 458,
          column: 22
        }
      },
      "148": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 466,
          column: 9
        }
      },
      "149": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 69
        }
      },
      "150": {
        start: {
          line: 464,
          column: 12
        },
        end: {
          line: 464,
          column: 74
        }
      },
      "151": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 22
        }
      },
      "152": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 470,
          column: 55
        }
      },
      "153": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 471,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 24
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 36
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 45
          },
          end: {
            line: 17,
            column: 46
          }
        },
        loc: {
          start: {
            line: 17,
            column: 57
          },
          end: {
            line: 33,
            column: 9
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 70
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 45
          },
          end: {
            line: 45,
            column: 46
          }
        },
        loc: {
          start: {
            line: 45,
            column: 57
          },
          end: {
            line: 48,
            column: 9
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 67
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 60,
            column: 45
          },
          end: {
            line: 60,
            column: 46
          }
        },
        loc: {
          start: {
            line: 60,
            column: 57
          },
          end: {
            line: 63,
            column: 9
          }
        },
        line: 60
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 50
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 69
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 74,
            column: 45
          },
          end: {
            line: 74,
            column: 46
          }
        },
        loc: {
          start: {
            line: 74,
            column: 57
          },
          end: {
            line: 77,
            column: 9
          }
        },
        line: 74
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 66
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 83
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 42
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 129
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 138,
            column: 46
          },
          end: {
            line: 138,
            column: 47
          }
        },
        loc: {
          start: {
            line: 138,
            column: 51
          },
          end: {
            line: 138,
            column: 55
          }
        },
        line: 138
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 75
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 198
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 66
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 219
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 60
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 244
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 250,
            column: 64
          },
          end: {
            line: 250,
            column: 65
          }
        },
        loc: {
          start: {
            line: 250,
            column: 84
          },
          end: {
            line: 262,
            column: 9
          }
        },
        line: 250
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 265,
            column: 18
          },
          end: {
            line: 265,
            column: 19
          }
        },
        loc: {
          start: {
            line: 265,
            column: 28
          },
          end: {
            line: 265,
            column: 65
          }
        },
        line: 265
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 28
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 268
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 73
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 302
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 316,
            column: 27
          },
          end: {
            line: 316,
            column: 28
          }
        },
        loc: {
          start: {
            line: 316,
            column: 36
          },
          end: {
            line: 320,
            column: 9
          }
        },
        line: 316
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 323,
            column: 17
          },
          end: {
            line: 323,
            column: 18
          }
        },
        loc: {
          start: {
            line: 323,
            column: 41
          },
          end: {
            line: 323,
            column: 63
          }
        },
        line: 323
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 324,
            column: 18
          },
          end: {
            line: 324,
            column: 19
          }
        },
        loc: {
          start: {
            line: 324,
            column: 28
          },
          end: {
            line: 324,
            column: 55
          }
        },
        line: 324
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 327,
            column: 23
          },
          end: {
            line: 327,
            column: 24
          }
        },
        loc: {
          start: {
            line: 327,
            column: 41
          },
          end: {
            line: 337,
            column: 9
          }
        },
        line: 327
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 55
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 340
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 350,
            column: 37
          },
          end: {
            line: 350,
            column: 38
          }
        },
        loc: {
          start: {
            line: 350,
            column: 44
          },
          end: {
            line: 356,
            column: 9
          }
        },
        line: 350
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 22
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 359
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 38
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 379
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 384,
            column: 5
          }
        },
        loc: {
          start: {
            line: 384,
            column: 46
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 384
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 387,
            column: 4
          },
          end: {
            line: 387,
            column: 5
          }
        },
        loc: {
          start: {
            line: 387,
            column: 54
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 387
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 391,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        loc: {
          start: {
            line: 391,
            column: 41
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 391
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 393,
            column: 45
          },
          end: {
            line: 393,
            column: 46
          }
        },
        loc: {
          start: {
            line: 393,
            column: 57
          },
          end: {
            line: 401,
            column: 9
          }
        },
        line: 393
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 37
          },
          end: {
            line: 414,
            column: 5
          }
        },
        line: 406
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 46
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 416
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 435,
            column: 5
          }
        },
        loc: {
          start: {
            line: 435,
            column: 37
          },
          end: {
            line: 454,
            column: 5
          }
        },
        line: 435
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 37
          },
          end: {
            line: 467,
            column: 5
          }
        },
        line: 456
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 469,
            column: 5
          }
        },
        loc: {
          start: {
            line: 469,
            column: 42
          },
          end: {
            line: 472,
            column: 5
          }
        },
        line: 469
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 20
          },
          end: {
            line: 25,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 20
          },
          end: {
            line: 25,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 96,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 96,
            column: 45
          }
        }, {
          start: {
            line: 96,
            column: 49
          },
          end: {
            line: 96,
            column: 77
          }
        }],
        line: 96
      },
      "3": {
        loc: {
          start: {
            line: 97,
            column: 24
          },
          end: {
            line: 100,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 24
          },
          end: {
            line: 97,
            column: 50
          }
        }, {
          start: {
            line: 97,
            column: 54
          },
          end: {
            line: 100,
            column: 21
          }
        }],
        line: 97
      },
      "4": {
        loc: {
          start: {
            line: 99,
            column: 46
          },
          end: {
            line: 99,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 46
          },
          end: {
            line: 99,
            column: 61
          }
        }, {
          start: {
            line: 99,
            column: 65
          },
          end: {
            line: 99,
            column: 66
          }
        }],
        line: 99
      },
      "5": {
        loc: {
          start: {
            line: 101,
            column: 24
          },
          end: {
            line: 101,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 24
          },
          end: {
            line: 101,
            column: 44
          }
        }, {
          start: {
            line: 101,
            column: 48
          },
          end: {
            line: 101,
            column: 81
          }
        }],
        line: 101
      },
      "6": {
        loc: {
          start: {
            line: 107,
            column: 33
          },
          end: {
            line: 107,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 56
          },
          end: {
            line: 107,
            column: 57
          }
        }, {
          start: {
            line: 107,
            column: 60
          },
          end: {
            line: 107,
            column: 61
          }
        }],
        line: 107
      },
      "7": {
        loc: {
          start: {
            line: 108,
            column: 28
          },
          end: {
            line: 108,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 108,
            column: 52
          },
          end: {
            line: 108,
            column: 53
          }
        }, {
          start: {
            line: 108,
            column: 56
          },
          end: {
            line: 108,
            column: 57
          }
        }],
        line: 108
      },
      "8": {
        loc: {
          start: {
            line: 109,
            column: 33
          },
          end: {
            line: 109,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 62
          },
          end: {
            line: 109,
            column: 63
          }
        }, {
          start: {
            line: 109,
            column: 66
          },
          end: {
            line: 109,
            column: 67
          }
        }],
        line: 109
      },
      "9": {
        loc: {
          start: {
            line: 110,
            column: 29
          },
          end: {
            line: 110,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 59
          },
          end: {
            line: 110,
            column: 79
          }
        }, {
          start: {
            line: 110,
            column: 83
          },
          end: {
            line: 110,
            column: 84
          }
        }],
        line: 110
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 59
          },
          end: {
            line: 110,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 59
          },
          end: {
            line: 110,
            column: 74
          }
        }, {
          start: {
            line: 110,
            column: 78
          },
          end: {
            line: 110,
            column: 79
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "12": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 30
          }
        }, {
          start: {
            line: 133,
            column: 34
          },
          end: {
            line: 133,
            column: 64
          }
        }],
        line: 133
      },
      "13": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "14": {
        loc: {
          start: {
            line: 161,
            column: 28
          },
          end: {
            line: 161,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 28
          },
          end: {
            line: 161,
            column: 44
          }
        }, {
          start: {
            line: 161,
            column: 48
          },
          end: {
            line: 161,
            column: 49
          }
        }],
        line: 161
      },
      "15": {
        loc: {
          start: {
            line: 162,
            column: 23
          },
          end: {
            line: 162,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 23
          },
          end: {
            line: 162,
            column: 34
          }
        }, {
          start: {
            line: 162,
            column: 38
          },
          end: {
            line: 162,
            column: 39
          }
        }],
        line: 162
      },
      "16": {
        loc: {
          start: {
            line: 163,
            column: 28
          },
          end: {
            line: 163,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 28
          },
          end: {
            line: 163,
            column: 44
          }
        }, {
          start: {
            line: 163,
            column: 48
          },
          end: {
            line: 163,
            column: 49
          }
        }],
        line: 163
      },
      "17": {
        loc: {
          start: {
            line: 164,
            column: 24
          },
          end: {
            line: 164,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 24
          },
          end: {
            line: 164,
            column: 36
          }
        }, {
          start: {
            line: 164,
            column: 40
          },
          end: {
            line: 164,
            column: 41
          }
        }],
        line: 164
      },
      "18": {
        loc: {
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 165,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 165,
            column: 36
          }
        }, {
          start: {
            line: 165,
            column: 40
          },
          end: {
            line: 165,
            column: 41
          }
        }],
        line: 165
      },
      "19": {
        loc: {
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 38
          },
          end: {
            line: 167,
            column: 66
          }
        }, {
          start: {
            line: 167,
            column: 69
          },
          end: {
            line: 167,
            column: 70
          }
        }],
        line: 167
      },
      "20": {
        loc: {
          start: {
            line: 168,
            column: 31
          },
          end: {
            line: 168,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 44
          },
          end: {
            line: 168,
            column: 72
          }
        }, {
          start: {
            line: 168,
            column: 75
          },
          end: {
            line: 168,
            column: 76
          }
        }],
        line: 168
      },
      "21": {
        loc: {
          start: {
            line: 169,
            column: 20
          },
          end: {
            line: 169,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 33
          },
          end: {
            line: 169,
            column: 49
          }
        }, {
          start: {
            line: 169,
            column: 52
          },
          end: {
            line: 169,
            column: 53
          }
        }],
        line: 169
      },
      "22": {
        loc: {
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 170,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 38
          },
          end: {
            line: 170,
            column: 68
          }
        }, {
          start: {
            line: 170,
            column: 71
          },
          end: {
            line: 170,
            column: 72
          }
        }],
        line: 170
      },
      "23": {
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 171,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 38
          },
          end: {
            line: 171,
            column: 59
          }
        }, {
          start: {
            line: 171,
            column: 62
          },
          end: {
            line: 171,
            column: 63
          }
        }],
        line: 171
      },
      "24": {
        loc: {
          start: {
            line: 172,
            column: 21
          },
          end: {
            line: 172,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 172,
            column: 35
          },
          end: {
            line: 172,
            column: 60
          }
        }, {
          start: {
            line: 172,
            column: 63
          },
          end: {
            line: 172,
            column: 64
          }
        }],
        line: 172
      },
      "25": {
        loc: {
          start: {
            line: 173,
            column: 20
          },
          end: {
            line: 173,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 34
          },
          end: {
            line: 173,
            column: 71
          }
        }, {
          start: {
            line: 173,
            column: 74
          },
          end: {
            line: 173,
            column: 75
          }
        }],
        line: 173
      },
      "26": {
        loc: {
          start: {
            line: 175,
            column: 23
          },
          end: {
            line: 175,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 37
          },
          end: {
            line: 175,
            column: 61
          }
        }, {
          start: {
            line: 175,
            column: 64
          },
          end: {
            line: 175,
            column: 65
          }
        }],
        line: 175
      },
      "27": {
        loc: {
          start: {
            line: 176,
            column: 21
          },
          end: {
            line: 176,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 39
          },
          end: {
            line: 176,
            column: 60
          }
        }, {
          start: {
            line: 176,
            column: 63
          },
          end: {
            line: 176,
            column: 64
          }
        }],
        line: 176
      },
      "28": {
        loc: {
          start: {
            line: 223,
            column: 24
          },
          end: {
            line: 223,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 24
          },
          end: {
            line: 223,
            column: 29
          }
        }, {
          start: {
            line: 223,
            column: 33
          },
          end: {
            line: 223,
            column: 60
          }
        }],
        line: 223
      },
      "29": {
        loc: {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 230,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 230,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "30": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "31": {
        loc: {
          start: {
            line: 273,
            column: 22
          },
          end: {
            line: 273,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 273,
            column: 43
          },
          end: {
            line: 273,
            column: 53
          }
        }, {
          start: {
            line: 273,
            column: 56
          },
          end: {
            line: 273,
            column: 65
          }
        }],
        line: 273
      },
      "32": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "33": {
        loc: {
          start: {
            line: 283,
            column: 22
          },
          end: {
            line: 283,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 51
          },
          end: {
            line: 283,
            column: 61
          }
        }, {
          start: {
            line: 283,
            column: 64
          },
          end: {
            line: 283,
            column: 73
          }
        }],
        line: 283
      },
      "34": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "35": {
        loc: {
          start: {
            line: 293,
            column: 22
          },
          end: {
            line: 293,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 293,
            column: 42
          },
          end: {
            line: 293,
            column: 52
          }
        }, {
          start: {
            line: 293,
            column: 55
          },
          end: {
            line: 293,
            column: 64
          }
        }],
        line: 293
      },
      "36": {
        loc: {
          start: {
            line: 317,
            column: 29
          },
          end: {
            line: 317,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 29
          },
          end: {
            line: 317,
            column: 58
          }
        }, {
          start: {
            line: 317,
            column: 62
          },
          end: {
            line: 317,
            column: 104
          }
        }],
        line: 317
      },
      "37": {
        loc: {
          start: {
            line: 328,
            column: 35
          },
          end: {
            line: 328,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 328,
            column: 49
          },
          end: {
            line: 328,
            column: 52
          }
        }, {
          start: {
            line: 328,
            column: 55
          },
          end: {
            line: 328,
            column: 114
          }
        }],
        line: 328
      },
      "38": {
        loc: {
          start: {
            line: 328,
            column: 55
          },
          end: {
            line: 328,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 328,
            column: 75
          },
          end: {
            line: 328,
            column: 110
          }
        }, {
          start: {
            line: 328,
            column: 113
          },
          end: {
            line: 328,
            column: 114
          }
        }],
        line: 328
      },
      "39": {
        loc: {
          start: {
            line: 354,
            column: 31
          },
          end: {
            line: 354,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 354,
            column: 53
          },
          end: {
            line: 354,
            column: 85
          }
        }, {
          start: {
            line: 354,
            column: 88
          },
          end: {
            line: 354,
            column: 89
          }
        }],
        line: 354
      },
      "40": {
        loc: {
          start: {
            line: 398,
            column: 22
          },
          end: {
            line: 398,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 398,
            column: 42
          },
          end: {
            line: 398,
            column: 49
          }
        }, {
          start: {
            line: 398,
            column: 52
          },
          end: {
            line: 398,
            column: 89
          }
        }],
        line: 398
      },
      "41": {
        loc: {
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "42": {
        loc: {
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 427,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 427,
            column: 13
          }
        }, {
          start: {
            line: 425,
            column: 17
          },
          end: {
            line: 427,
            column: 13
          }
        }],
        line: 420
      },
      "43": {
        loc: {
          start: {
            line: 437,
            column: 21
          },
          end: {
            line: 437,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 437,
            column: 21
          },
          end: {
            line: 437,
            column: 43
          }
        }, {
          start: {
            line: 437,
            column: 47
          },
          end: {
            line: 437,
            column: 48
          }
        }],
        line: 437
      },
      "44": {
        loc: {
          start: {
            line: 438,
            column: 18
          },
          end: {
            line: 438,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 438,
            column: 18
          },
          end: {
            line: 438,
            column: 37
          }
        }, {
          start: {
            line: 438,
            column: 41
          },
          end: {
            line: 438,
            column: 42
          }
        }],
        line: 438
      },
      "45": {
        loc: {
          start: {
            line: 439,
            column: 17
          },
          end: {
            line: 439,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 439,
            column: 17
          },
          end: {
            line: 439,
            column: 35
          }
        }, {
          start: {
            line: 439,
            column: 39
          },
          end: {
            line: 439,
            column: 40
          }
        }],
        line: 439
      },
      "46": {
        loc: {
          start: {
            line: 440,
            column: 21
          },
          end: {
            line: 440,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 440,
            column: 21
          },
          end: {
            line: 440,
            column: 44
          }
        }, {
          start: {
            line: 440,
            column: 48
          },
          end: {
            line: 440,
            column: 49
          }
        }],
        line: 440
      },
      "47": {
        loc: {
          start: {
            line: 441,
            column: 17
          },
          end: {
            line: 441,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 441,
            column: 17
          },
          end: {
            line: 441,
            column: 35
          }
        }, {
          start: {
            line: 441,
            column: 39
          },
          end: {
            line: 441,
            column: 40
          }
        }],
        line: 441
      },
      "48": {
        loc: {
          start: {
            line: 442,
            column: 17
          },
          end: {
            line: 442,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 442,
            column: 17
          },
          end: {
            line: 442,
            column: 35
          }
        }, {
          start: {
            line: 442,
            column: 39
          },
          end: {
            line: 442,
            column: 40
          }
        }],
        line: 442
      },
      "49": {
        loc: {
          start: {
            line: 443,
            column: 17
          },
          end: {
            line: 443,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 443,
            column: 17
          },
          end: {
            line: 443,
            column: 35
          }
        }, {
          start: {
            line: 443,
            column: 39
          },
          end: {
            line: 443,
            column: 40
          }
        }],
        line: 443
      },
      "50": {
        loc: {
          start: {
            line: 444,
            column: 25
          },
          end: {
            line: 444,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 25
          },
          end: {
            line: 444,
            column: 51
          }
        }, {
          start: {
            line: 444,
            column: 55
          },
          end: {
            line: 444,
            column: 56
          }
        }],
        line: 444
      },
      "51": {
        loc: {
          start: {
            line: 445,
            column: 20
          },
          end: {
            line: 445,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 445,
            column: 20
          },
          end: {
            line: 445,
            column: 41
          }
        }, {
          start: {
            line: 445,
            column: 45
          },
          end: {
            line: 445,
            column: 46
          }
        }],
        line: 445
      },
      "52": {
        loc: {
          start: {
            line: 446,
            column: 25
          },
          end: {
            line: 446,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 446,
            column: 25
          },
          end: {
            line: 446,
            column: 51
          }
        }, {
          start: {
            line: 446,
            column: 55
          },
          end: {
            line: 446,
            column: 56
          }
        }],
        line: 446
      },
      "53": {
        loc: {
          start: {
            line: 447,
            column: 17
          },
          end: {
            line: 447,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 447,
            column: 17
          },
          end: {
            line: 447,
            column: 35
          }
        }, {
          start: {
            line: 447,
            column: 39
          },
          end: {
            line: 447,
            column: 40
          }
        }],
        line: 447
      },
      "54": {
        loc: {
          start: {
            line: 448,
            column: 28
          },
          end: {
            line: 448,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 448,
            column: 28
          },
          end: {
            line: 448,
            column: 58
          }
        }, {
          start: {
            line: 448,
            column: 62
          },
          end: {
            line: 448,
            column: 63
          }
        }],
        line: 448
      },
      "55": {
        loc: {
          start: {
            line: 449,
            column: 17
          },
          end: {
            line: 449,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 449,
            column: 17
          },
          end: {
            line: 449,
            column: 35
          }
        }, {
          start: {
            line: 449,
            column: 39
          },
          end: {
            line: 449,
            column: 40
          }
        }],
        line: 449
      },
      "56": {
        loc: {
          start: {
            line: 450,
            column: 18
          },
          end: {
            line: 450,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 450,
            column: 18
          },
          end: {
            line: 450,
            column: 37
          }
        }, {
          start: {
            line: 450,
            column: 41
          },
          end: {
            line: 450,
            column: 42
          }
        }],
        line: 450
      },
      "57": {
        loc: {
          start: {
            line: 451,
            column: 20
          },
          end: {
            line: 451,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 451,
            column: 20
          },
          end: {
            line: 451,
            column: 41
          }
        }, {
          start: {
            line: 451,
            column: 45
          },
          end: {
            line: 451,
            column: 46
          }
        }],
        line: 451
      },
      "58": {
        loc: {
          start: {
            line: 452,
            column: 20
          },
          end: {
            line: 452,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 20
          },
          end: {
            line: 452,
            column: 41
          }
        }, {
          start: {
            line: 452,
            column: 45
          },
          end: {
            line: 452,
            column: 46
          }
        }],
        line: 452
      },
      "59": {
        loc: {
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts"],
      sourcesContent: ["import { PrismaService } from '../database/prisma.service';\nimport { getCacheService, CACHE_PREFIXES, CACHE_TTL, Cached } from './cache.service';\nimport { getStoredProceduresService, StoredProceduresService } from './stored-procedures.service';\nimport { logger } from '../utils/logger';\n\n// Metrics calculation interfaces\nexport interface MetricsFilters {\n  campaignIds?: string[];\n  startDate: Date;\n  endDate: Date;\n  metricsTypes?: string[];\n  organizationId: string;\n  groupBy?: 'day' | 'hour' | 'campaign' | 'platform';\n}\n\nexport interface KPIMetrics {\n  // Revenue metrics\n  revenue: number;\n  roas: number; // Return on Ad Spend\n  roi: number; // Return on Investment\n  \n  // Cost metrics\n  adSpend: number;\n  cpc: number; // Cost Per Click\n  cpm: number; // Cost Per Mille (1000 impressions)\n  cac: number; // Customer Acquisition Cost\n  \n  // Performance metrics\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  ctr: number; // Click Through Rate\n  conversionRate: number;\n  \n  // Customer metrics\n  ltv: number; // Lifetime Value\n  arpu: number; // Average Revenue Per User\n  \n  // Profitability\n  margin: number;\n  profit: number;\n}\n\nexport interface DashboardMetrics {\n  summary: KPIMetrics;\n  trends: {\n    period: string;\n    metrics: KPIMetrics;\n  }[];\n  topCampaigns: {\n    campaignId: string;\n    campaignName: string;\n    metrics: KPIMetrics;\n  }[];\n  alerts: {\n    type: 'warning' | 'critical';\n    message: string;\n    metric: string;\n    value: number;\n    threshold: number;\n  }[];\n}\n\nexport interface FunnelStage {\n  stage: string;\n  users: number;\n  conversionRate: number;\n  dropoffRate: number;\n}\n\nexport interface ComparisonResult {\n  current: KPIMetrics;\n  previous: KPIMetrics;\n  changes: {\n    [key in keyof KPIMetrics]: {\n      absolute: number;\n      percentage: number;\n    };\n  };\n}\n\nexport class MetricsService {\n  private cache = getCacheService();\n  private storedProcedures: StoredProceduresService;\n  private useStoredProcedures = true; // Flag to enable/disable stored procedures\n\n  constructor(private prisma: PrismaService) {\n    this.storedProcedures = getStoredProceduresService(prisma);\n    this.checkStoredProceduresAvailability();\n  }\n\n  // Calculate comprehensive metrics\n  public async calculateMetrics(filters: MetricsFilters): Promise<KPIMetrics> {\n    const cacheKey = this.generateCacheKey('calculate', filters);\n    \n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Calculating metrics from database', { filters });\n        \n        // Try stored procedure first if available\n        if (this.useStoredProcedures) {\n          try {\n            const result = await this.storedProcedures.calculateKPIMetrics(\n              filters.organizationId,\n              filters.campaignIds,\n              filters.startDate,\n              filters.endDate\n            );\n            \n            if (result) {\n              return this.mapStoredProcedureResult(result);\n            }\n          } catch (error) {\n            logger.warn('Stored procedure failed, falling back to TypeScript calculation:', error);\n          }\n        }\n        \n        // Fallback to TypeScript calculation\n        return this.calculateMetricsFromDB(filters);\n      },\n      {\n        ttl: CACHE_TTL.METRICS,\n        prefix: CACHE_PREFIXES.METRICS,\n      }\n    );\n  }\n\n  // Get dashboard metrics with caching\n  public async getDashboardMetrics(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<DashboardMetrics> {\n    const cacheKey = this.generateCacheKey('dashboard', {\n      organizationId,\n      ...dateRange,\n      campaignIds,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating dashboard metrics', { organizationId, dateRange });\n        return this.generateDashboardMetrics(organizationId, dateRange, campaignIds);\n      },\n      {\n        ttl: CACHE_TTL.DASHBOARD,\n        prefix: CACHE_PREFIXES.DASHBOARD,\n      }\n    );\n  }\n\n  // Get funnel analysis with caching\n  public async getFunnelAnalysis(\n    campaignId: string,\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date }\n  ): Promise<FunnelStage[]> {\n    const cacheKey = this.generateCacheKey('funnel', {\n      campaignId,\n      organizationId,\n      ...dateRange,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Calculating funnel analysis', { campaignId, dateRange });\n        return this.calculateFunnelAnalysis(campaignId, organizationId, dateRange);\n      },\n      {\n        ttl: CACHE_TTL.FUNNEL,\n        prefix: CACHE_PREFIXES.FUNNEL,\n      }\n    );\n  }\n\n  // Compare metrics between periods\n  public async compareMetrics(\n    filters: MetricsFilters,\n    previousPeriod: { startDate: Date; endDate: Date }\n  ): Promise<ComparisonResult> {\n    const cacheKey = this.generateCacheKey('comparison', {\n      ...filters,\n      previousPeriod,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Comparing metrics between periods', { filters, previousPeriod });\n        return this.calculateComparison(filters, previousPeriod);\n      },\n      {\n        ttl: CACHE_TTL.COMPARISON,\n        prefix: CACHE_PREFIXES.COMPARISON,\n      }\n    );\n  }\n\n  // Update real-time metrics (no caching for real-time data)\n  public async updateRealTimeMetrics(\n    campaignId: string,\n    eventType: 'CLICK' | 'CONVERSION' | 'VIEW',\n    eventData: Record<string, any>\n  ): Promise<void> {\n    try {\n      // Update hourly metrics\n      const now = new Date();\n      const hourStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());\n\n      await this.prisma.metricsHourly.upsert({\n        where: {\n          campaignId_hour: {\n            campaignId,\n            hour: hourStart,\n          },\n        },\n        update: {\n          ...(eventType === 'CLICK' && { clicks: { increment: 1 } }),\n          ...(eventType === 'CONVERSION' && { \n            conversions: { increment: 1 },\n            revenue: { increment: eventData.value || 0 },\n          }),\n          ...(eventType === 'VIEW' && { impressions: { increment: 1 } }),\n          updatedAt: now,\n        },\n        create: {\n          campaignId,\n          hour: hourStart,\n          impressions: eventType === 'VIEW' ? 1 : 0,\n          clicks: eventType === 'CLICK' ? 1 : 0,\n          conversions: eventType === 'CONVERSION' ? 1 : 0,\n          revenue: eventType === 'CONVERSION' ? (eventData.value || 0) : 0,\n          adSpend: 0,\n          createdAt: now,\n          updatedAt: now,\n        },\n      });\n\n      // Invalidate related cache\n      await this.invalidateCampaignCache(campaignId);\n\n      logger.debug(`Real-time metrics updated for campaign ${campaignId}`, {\n        eventType,\n        eventData,\n      });\n    } catch (error) {\n      logger.error('Failed to update real-time metrics:', error);\n      throw error;\n    }\n  }\n\n  // Private methods for actual calculations\n  private async calculateMetricsFromDB(filters: MetricsFilters): Promise<KPIMetrics> {\n    const { campaignIds, startDate, endDate, organizationId } = filters;\n\n    // Get campaigns if not specified\n    let targetCampaignIds = campaignIds;\n    if (!targetCampaignIds || targetCampaignIds.length === 0) {\n      const campaigns = await this.prisma.campaign.findMany({\n        where: { organizationId },\n        select: { id: true },\n      });\n      targetCampaignIds = campaigns.map(c => c.id);\n    }\n\n    if (targetCampaignIds.length === 0) {\n      return this.getEmptyMetrics();\n    }\n\n    // Aggregate daily metrics\n    const dailyMetrics = await this.prisma.metricsDaily.aggregate({\n      where: {\n        campaignId: { in: targetCampaignIds },\n        date: {\n          gte: startDate,\n          lte: endDate,\n        },\n      },\n      _sum: {\n        impressions: true,\n        clicks: true,\n        conversions: true,\n        revenue: true,\n        adSpend: true,\n      },\n    });\n\n    const sums = dailyMetrics._sum;\n    const impressions = sums.impressions || 0;\n    const clicks = sums.clicks || 0;\n    const conversions = sums.conversions || 0;\n    const revenue = sums.revenue || 0;\n    const adSpend = sums.adSpend || 0;\n\n    // Calculate derived metrics\n    const ctr = impressions > 0 ? (clicks / impressions) * 100 : 0;\n    const conversionRate = clicks > 0 ? (conversions / clicks) * 100 : 0;\n    const cpc = clicks > 0 ? adSpend / clicks : 0;\n    const cpm = impressions > 0 ? (adSpend / impressions) * 1000 : 0;\n    const cac = conversions > 0 ? adSpend / conversions : 0;\n    const roas = adSpend > 0 ? (revenue / adSpend) * 100 : 0;\n    const roi = adSpend > 0 ? ((revenue - adSpend) / adSpend) * 100 : 0;\n    const profit = revenue - adSpend;\n    const margin = revenue > 0 ? (profit / revenue) * 100 : 0;\n    const arpu = conversions > 0 ? revenue / conversions : 0;\n    \n    // LTV calculation (simplified - could be more complex based on business model)\n    const ltv = arpu * 2.5; // Assuming 2.5x multiplier for LTV\n\n    return {\n      revenue,\n      roas,\n      roi,\n      adSpend,\n      cpc,\n      cpm,\n      cac,\n      impressions,\n      clicks,\n      conversions,\n      ctr,\n      conversionRate,\n      ltv,\n      arpu,\n      margin,\n      profit,\n    };\n  }\n\n  private async generateDashboardMetrics(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<DashboardMetrics> {\n    // Get summary metrics\n    const summary = await this.calculateMetrics({\n      organizationId,\n      startDate: dateRange.startDate,\n      endDate: dateRange.endDate,\n      campaignIds,\n    });\n\n    // Get trends (last 7 days)\n    const trends = await this.calculateTrends(organizationId, dateRange, campaignIds);\n\n    // Get top campaigns\n    const topCampaigns = await this.getTopCampaigns(organizationId, dateRange, 5);\n\n    // Generate alerts\n    const alerts = this.generateAlerts(summary);\n\n    return {\n      summary,\n      trends,\n      topCampaigns,\n      alerts,\n    };\n  }\n\n  private async calculateTrends(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<{ period: string; metrics: KPIMetrics }[]> {\n    const trends = [];\n    const daysDiff = Math.ceil((dateRange.endDate.getTime() - dateRange.startDate.getTime()) / (1000 * 60 * 60 * 24));\n    const intervalDays = Math.max(1, Math.floor(daysDiff / 7)); // Max 7 data points\n\n    for (let i = 0; i < 7 && i * intervalDays < daysDiff; i++) {\n      const periodStart = new Date(dateRange.startDate);\n      periodStart.setDate(periodStart.getDate() + (i * intervalDays));\n      \n      const periodEnd = new Date(periodStart);\n      periodEnd.setDate(periodEnd.getDate() + intervalDays - 1);\n      \n      if (periodEnd > dateRange.endDate) {\n        periodEnd.setTime(dateRange.endDate.getTime());\n      }\n\n      const metrics = await this.calculateMetrics({\n        organizationId,\n        startDate: periodStart,\n        endDate: periodEnd,\n        campaignIds,\n      });\n\n      trends.push({\n        period: periodStart.toISOString().split('T')[0],\n        metrics,\n      });\n    }\n\n    return trends;\n  }\n\n  private async getTopCampaigns(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    limit: number\n  ): Promise<{ campaignId: string; campaignName: string; metrics: KPIMetrics }[]> {\n    // Get campaigns with their metrics\n    const campaigns = await this.prisma.campaign.findMany({\n      where: { organizationId },\n      select: { id: true, name: true },\n    });\n\n    const campaignMetrics = await Promise.all(\n      campaigns.map(async (campaign) => {\n        const metrics = await this.calculateMetrics({\n          organizationId,\n          startDate: dateRange.startDate,\n          endDate: dateRange.endDate,\n          campaignIds: [campaign.id],\n        });\n\n        return {\n          campaignId: campaign.id,\n          campaignName: campaign.name,\n          metrics,\n        };\n      })\n    );\n\n    // Sort by revenue and return top campaigns\n    return campaignMetrics\n      .sort((a, b) => b.metrics.revenue - a.metrics.revenue)\n      .slice(0, limit);\n  }\n\n  private generateAlerts(metrics: KPIMetrics): DashboardMetrics['alerts'] {\n    const alerts: DashboardMetrics['alerts'] = [];\n\n    // ROAS alert\n    if (metrics.roas < 200) {\n      alerts.push({\n        type: metrics.roas < 100 ? 'critical' : 'warning',\n        message: 'ROAS is below target threshold',\n        metric: 'roas',\n        value: metrics.roas,\n        threshold: 200,\n      });\n    }\n\n    // Conversion rate alert\n    if (metrics.conversionRate < 2) {\n      alerts.push({\n        type: metrics.conversionRate < 1 ? 'critical' : 'warning',\n        message: 'Conversion rate is below target threshold',\n        metric: 'conversionRate',\n        value: metrics.conversionRate,\n        threshold: 2,\n      });\n    }\n\n    // CTR alert\n    if (metrics.ctr < 1) {\n      alerts.push({\n        type: metrics.ctr < 0.5 ? 'critical' : 'warning',\n        message: 'Click-through rate is below target threshold',\n        metric: 'ctr',\n        value: metrics.ctr,\n        threshold: 1,\n      });\n    }\n\n    return alerts;\n  }\n\n  private async calculateFunnelAnalysis(\n    campaignId: string,\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date }\n  ): Promise<FunnelStage[]> {\n    // Get funnel stages from database\n    const funnelData = await this.prisma.funnelStage.findMany({\n      where: {\n        campaignId,\n        date: {\n          gte: dateRange.startDate,\n          lte: dateRange.endDate,\n        },\n      },\n      orderBy: { stageOrder: 'asc' },\n    });\n\n    // Aggregate by stage\n    const stageMap = new Map<string, { users: number; stageOrder: number }>();\n    \n    funnelData.forEach(stage => {\n      const existing = stageMap.get(stage.stageName) || { users: 0, stageOrder: stage.stageOrder };\n      existing.users += stage.users;\n      stageMap.set(stage.stageName, existing);\n    });\n\n    // Convert to array and calculate rates\n    const stages = Array.from(stageMap.entries())\n      .map(([stageName, data]) => ({ stageName, ...data }))\n      .sort((a, b) => a.stageOrder - b.stageOrder);\n\n    const funnelStages: FunnelStage[] = [];\n    let previousUsers = 0;\n\n    stages.forEach((stage, index) => {\n      const conversionRate = index === 0 ? 100 : previousUsers > 0 ? (stage.users / previousUsers) * 100 : 0;\n      const dropoffRate = 100 - conversionRate;\n\n      funnelStages.push({\n        stage: stage.stageName,\n        users: stage.users,\n        conversionRate,\n        dropoffRate,\n      });\n\n      previousUsers = stage.users;\n    });\n\n    return funnelStages;\n  }\n\n  private async calculateComparison(\n    filters: MetricsFilters,\n    previousPeriod: { startDate: Date; endDate: Date }\n  ): Promise<ComparisonResult> {\n    const [current, previous] = await Promise.all([\n      this.calculateMetrics(filters),\n      this.calculateMetrics({\n        ...filters,\n        startDate: previousPeriod.startDate,\n        endDate: previousPeriod.endDate,\n      }),\n    ]);\n\n    const changes = {} as ComparisonResult['changes'];\n    \n    (Object.keys(current) as (keyof KPIMetrics)[]).forEach(key => {\n      const currentValue = current[key];\n      const previousValue = previous[key];\n      const absolute = currentValue - previousValue;\n      const percentage = previousValue !== 0 ? (absolute / previousValue) * 100 : 0;\n      \n      changes[key] = { absolute, percentage };\n    });\n\n    return { current, previous, changes };\n  }\n\n  private getEmptyMetrics(): KPIMetrics {\n    return {\n      revenue: 0,\n      roas: 0,\n      roi: 0,\n      adSpend: 0,\n      cpc: 0,\n      cpm: 0,\n      cac: 0,\n      impressions: 0,\n      clicks: 0,\n      conversions: 0,\n      ctr: 0,\n      conversionRate: 0,\n      ltv: 0,\n      arpu: 0,\n      margin: 0,\n      profit: 0,\n    };\n  }\n\n  private generateCacheKey(operation: string, data: any): string {\n    const hash = Buffer.from(JSON.stringify(data)).toString('base64').slice(0, 32);\n    return `${operation}:${hash}`;\n  }\n\n  // Cache invalidation methods\n  public async invalidateCampaignCache(campaignId: string): Promise<void> {\n    await this.cache.invalidateCampaign(campaignId);\n  }\n\n  public async invalidateOrganizationCache(organizationId: string): Promise<void> {\n    await this.cache.invalidateOrganization(organizationId);\n  }\n\n  // Export data (with caching for large exports)\n  public async exportMetrics(\n    filters: MetricsFilters,\n    format: 'CSV' | 'XLSX' | 'JSON'\n  ): Promise<{ data: any; filename: string }> {\n    const cacheKey = this.generateCacheKey('export', { ...filters, format });\n    \n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating metrics export', { filters, format });\n        \n        const metrics = await this.calculateMetrics(filters);\n        const filename = `metrics_export_${Date.now()}.${format.toLowerCase()}`;\n        \n        return {\n          data: format === 'JSON' ? metrics : this.formatForExport(metrics, format),\n          filename,\n        };\n      },\n      {\n        ttl: CACHE_TTL.EXPORT,\n        prefix: CACHE_PREFIXES.EXPORT,\n      }\n    );\n  }\n\n  private formatForExport(metrics: KPIMetrics, format: 'CSV' | 'XLSX'): string {\n    if (format === 'CSV') {\n      const headers = Object.keys(metrics).join(',');\n      const values = Object.values(metrics).join(',');\n      return `${headers}\\n${values}`;\n    }\n    \n    // For XLSX, return JSON that can be converted to Excel\n    return JSON.stringify([metrics]);\n  }\n\n  // Check if stored procedures are available\n  private async checkStoredProceduresAvailability(): Promise<void> {\n    try {\n      const health = await this.storedProcedures.checkStoredProceduresHealth();\n      this.useStoredProcedures = health.available;\n      \n      if (!health.available) {\n        logger.warn('Stored procedures not available, using TypeScript fallback', {\n          missing: health.missing,\n        });\n      } else {\n        logger.info('Stored procedures are available and will be used for optimization');\n      }\n    } catch (error) {\n      logger.error('Error checking stored procedures availability:', error);\n      this.useStoredProcedures = false;\n    }\n  }\n\n  // Map stored procedure result to KPIMetrics interface\n  private mapStoredProcedureResult(result: any): KPIMetrics {\n    return {\n      revenue: Number(result.revenue) || 0,\n      roas: Number(result.roas) || 0,\n      roi: Number(result.roi) || 0,\n      adSpend: Number(result.ad_spend) || 0,\n      cpc: Number(result.cpc) || 0,\n      cpm: Number(result.cpm) || 0,\n      cac: Number(result.cac) || 0,\n      impressions: Number(result.impressions) || 0,\n      clicks: Number(result.clicks) || 0,\n      conversions: Number(result.conversions) || 0,\n      ctr: Number(result.ctr) || 0,\n      conversionRate: Number(result.conversion_rate) || 0,\n      ltv: Number(result.ltv) || 0,\n      arpu: Number(result.arpu) || 0,\n      margin: Number(result.margin) || 0,\n      profit: Number(result.profit) || 0,\n    };\n  }\n\n  // Get stored procedures performance stats\n  public async getStoredProceduresStats(): Promise<any[]> {\n    if (!this.useStoredProcedures) {\n      return [];\n    }\n    \n    try {\n      return await this.storedProcedures.getPerformanceStats();\n    } catch (error) {\n      logger.error('Error getting stored procedures stats:', error);\n      return [];\n    }\n  }\n\n  // Force refresh stored procedures availability\n  public async refreshStoredProceduresStatus(): Promise<boolean> {\n    await this.checkStoredProceduresAvailability();\n    return this.useStoredProcedures;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "160084e27cf35062c565aead2699ba245d005fc2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ooxeg0p2z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ooxeg0p2z();
import { getCacheService, CACHE_PREFIXES, CACHE_TTL } from './cache.service';
import { getStoredProceduresService } from './stored-procedures.service';
import { logger } from '../utils/logger';
export class MetricsService {
  prisma;
  cache =
  /* istanbul ignore next */
  (cov_1ooxeg0p2z().s[0]++, getCacheService());
  storedProcedures;
  useStoredProcedures =
  /* istanbul ignore next */
  (cov_1ooxeg0p2z().s[1]++, true); // Flag to enable/disable stored procedures
  constructor(prisma) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[0]++;
    cov_1ooxeg0p2z().s[2]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[3]++;
    this.storedProcedures = getStoredProceduresService(prisma);
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[4]++;
    this.checkStoredProceduresAvailability();
  }
  // Calculate comprehensive metrics
  async calculateMetrics(filters) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[1]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[5]++, this.generateCacheKey('calculate', filters));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[6]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[2]++;
      cov_1ooxeg0p2z().s[7]++;
      logger.info('Calculating metrics from database', {
        filters
      });
      // Try stored procedure first if available
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[8]++;
      if (this.useStoredProcedures) {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[0][0]++;
        cov_1ooxeg0p2z().s[9]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().s[10]++, await this.storedProcedures.calculateKPIMetrics(filters.organizationId, filters.campaignIds, filters.startDate, filters.endDate));
          /* istanbul ignore next */
          cov_1ooxeg0p2z().s[11]++;
          if (result) {
            /* istanbul ignore next */
            cov_1ooxeg0p2z().b[1][0]++;
            cov_1ooxeg0p2z().s[12]++;
            return this.mapStoredProcedureResult(result);
          } else
          /* istanbul ignore next */
          {
            cov_1ooxeg0p2z().b[1][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1ooxeg0p2z().s[13]++;
          logger.warn('Stored procedure failed, falling back to TypeScript calculation:', error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1ooxeg0p2z().b[0][1]++;
      }
      // Fallback to TypeScript calculation
      cov_1ooxeg0p2z().s[14]++;
      return this.calculateMetricsFromDB(filters);
    }, {
      ttl: CACHE_TTL.METRICS,
      prefix: CACHE_PREFIXES.METRICS
    });
  }
  // Get dashboard metrics with caching
  async getDashboardMetrics(organizationId, dateRange, campaignIds) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[3]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[15]++, this.generateCacheKey('dashboard', {
      organizationId,
      ...dateRange,
      campaignIds
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[16]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[4]++;
      cov_1ooxeg0p2z().s[17]++;
      logger.info('Generating dashboard metrics', {
        organizationId,
        dateRange
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[18]++;
      return this.generateDashboardMetrics(organizationId, dateRange, campaignIds);
    }, {
      ttl: CACHE_TTL.DASHBOARD,
      prefix: CACHE_PREFIXES.DASHBOARD
    });
  }
  // Get funnel analysis with caching
  async getFunnelAnalysis(campaignId, organizationId, dateRange) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[5]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[19]++, this.generateCacheKey('funnel', {
      campaignId,
      organizationId,
      ...dateRange
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[20]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[6]++;
      cov_1ooxeg0p2z().s[21]++;
      logger.info('Calculating funnel analysis', {
        campaignId,
        dateRange
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[22]++;
      return this.calculateFunnelAnalysis(campaignId, organizationId, dateRange);
    }, {
      ttl: CACHE_TTL.FUNNEL,
      prefix: CACHE_PREFIXES.FUNNEL
    });
  }
  // Compare metrics between periods
  async compareMetrics(filters, previousPeriod) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[7]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[23]++, this.generateCacheKey('comparison', {
      ...filters,
      previousPeriod
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[24]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[8]++;
      cov_1ooxeg0p2z().s[25]++;
      logger.info('Comparing metrics between periods', {
        filters,
        previousPeriod
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[26]++;
      return this.calculateComparison(filters, previousPeriod);
    }, {
      ttl: CACHE_TTL.COMPARISON,
      prefix: CACHE_PREFIXES.COMPARISON
    });
  }
  // Update real-time metrics (no caching for real-time data)
  async updateRealTimeMetrics(campaignId, eventType, eventData) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[9]++;
    cov_1ooxeg0p2z().s[27]++;
    try {
      // Update hourly metrics
      const now =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[28]++, new Date());
      const hourStart =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[29]++, new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[30]++;
      await this.prisma.metricsHourly.upsert({
        where: {
          campaignId_hour: {
            campaignId,
            hour: hourStart
          }
        },
        update: {
          ...(
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[2][0]++, eventType === 'CLICK') &&
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[2][1]++, {
            clicks: {
              increment: 1
            }
          })),
          ...(
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[3][0]++, eventType === 'CONVERSION') &&
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[3][1]++, {
            conversions: {
              increment: 1
            },
            revenue: {
              increment:
              /* istanbul ignore next */
              (cov_1ooxeg0p2z().b[4][0]++, eventData.value) ||
              /* istanbul ignore next */
              (cov_1ooxeg0p2z().b[4][1]++, 0)
            }
          })),
          ...(
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[5][0]++, eventType === 'VIEW') &&
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[5][1]++, {
            impressions: {
              increment: 1
            }
          })),
          updatedAt: now
        },
        create: {
          campaignId,
          hour: hourStart,
          impressions: eventType === 'VIEW' ?
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[6][0]++, 1) :
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[6][1]++, 0),
          clicks: eventType === 'CLICK' ?
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[7][0]++, 1) :
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[7][1]++, 0),
          conversions: eventType === 'CONVERSION' ?
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[8][0]++, 1) :
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[8][1]++, 0),
          revenue: eventType === 'CONVERSION' ?
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[9][0]++,
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[10][0]++, eventData.value) ||
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[10][1]++, 0)) :
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[9][1]++, 0),
          adSpend: 0,
          createdAt: now,
          updatedAt: now
        }
      });
      // Invalidate related cache
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[31]++;
      await this.invalidateCampaignCache(campaignId);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[32]++;
      logger.debug(`Real-time metrics updated for campaign ${campaignId}`, {
        eventType,
        eventData
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[33]++;
      logger.error('Failed to update real-time metrics:', error);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[34]++;
      throw error;
    }
  }
  // Private methods for actual calculations
  async calculateMetricsFromDB(filters) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[10]++;
    const {
      campaignIds,
      startDate,
      endDate,
      organizationId
    } =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[35]++, filters);
    // Get campaigns if not specified
    let targetCampaignIds =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[36]++, campaignIds);
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[37]++;
    if (
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[12][0]++, !targetCampaignIds) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[12][1]++, targetCampaignIds.length === 0)) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[11][0]++;
      const campaigns =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[38]++, await this.prisma.campaign.findMany({
        where: {
          organizationId
        },
        select: {
          id: true
        }
      }));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[39]++;
      targetCampaignIds = campaigns.map(c => {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().f[11]++;
        cov_1ooxeg0p2z().s[40]++;
        return c.id;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[11][1]++;
    }
    cov_1ooxeg0p2z().s[41]++;
    if (targetCampaignIds.length === 0) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[13][0]++;
      cov_1ooxeg0p2z().s[42]++;
      return this.getEmptyMetrics();
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[13][1]++;
    }
    // Aggregate daily metrics
    const dailyMetrics =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[43]++, await this.prisma.metricsDaily.aggregate({
      where: {
        campaignId: {
          in: targetCampaignIds
        },
        date: {
          gte: startDate,
          lte: endDate
        }
      },
      _sum: {
        impressions: true,
        clicks: true,
        conversions: true,
        revenue: true,
        adSpend: true
      }
    }));
    const sums =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[44]++, dailyMetrics._sum);
    const impressions =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[45]++,
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[14][0]++, sums.impressions) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[14][1]++, 0));
    const clicks =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[46]++,
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[15][0]++, sums.clicks) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[15][1]++, 0));
    const conversions =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[47]++,
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[16][0]++, sums.conversions) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[16][1]++, 0));
    const revenue =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[48]++,
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[17][0]++, sums.revenue) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[17][1]++, 0));
    const adSpend =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[49]++,
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[18][0]++, sums.adSpend) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[18][1]++, 0));
    // Calculate derived metrics
    const ctr =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[50]++, impressions > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[19][0]++, clicks / impressions * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[19][1]++, 0));
    const conversionRate =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[51]++, clicks > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[20][0]++, conversions / clicks * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[20][1]++, 0));
    const cpc =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[52]++, clicks > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[21][0]++, adSpend / clicks) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[21][1]++, 0));
    const cpm =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[53]++, impressions > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[22][0]++, adSpend / impressions * 1000) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[22][1]++, 0));
    const cac =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[54]++, conversions > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[23][0]++, adSpend / conversions) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[23][1]++, 0));
    const roas =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[55]++, adSpend > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[24][0]++, revenue / adSpend * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[24][1]++, 0));
    const roi =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[56]++, adSpend > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[25][0]++, (revenue - adSpend) / adSpend * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[25][1]++, 0));
    const profit =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[57]++, revenue - adSpend);
    const margin =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[58]++, revenue > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[26][0]++, profit / revenue * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[26][1]++, 0));
    const arpu =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[59]++, conversions > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[27][0]++, revenue / conversions) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[27][1]++, 0));
    // LTV calculation (simplified - could be more complex based on business model)
    const ltv =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[60]++, arpu * 2.5); // Assuming 2.5x multiplier for LTV
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[61]++;
    return {
      revenue,
      roas,
      roi,
      adSpend,
      cpc,
      cpm,
      cac,
      impressions,
      clicks,
      conversions,
      ctr,
      conversionRate,
      ltv,
      arpu,
      margin,
      profit
    };
  }
  async generateDashboardMetrics(organizationId, dateRange, campaignIds) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[12]++;
    // Get summary metrics
    const summary =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[62]++, await this.calculateMetrics({
      organizationId,
      startDate: dateRange.startDate,
      endDate: dateRange.endDate,
      campaignIds
    }));
    // Get trends (last 7 days)
    const trends =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[63]++, await this.calculateTrends(organizationId, dateRange, campaignIds));
    // Get top campaigns
    const topCampaigns =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[64]++, await this.getTopCampaigns(organizationId, dateRange, 5));
    // Generate alerts
    const alerts =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[65]++, this.generateAlerts(summary));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[66]++;
    return {
      summary,
      trends,
      topCampaigns,
      alerts
    };
  }
  async calculateTrends(organizationId, dateRange, campaignIds) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[13]++;
    const trends =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[67]++, []);
    const daysDiff =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[68]++, Math.ceil((dateRange.endDate.getTime() - dateRange.startDate.getTime()) / (1000 * 60 * 60 * 24)));
    const intervalDays =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[69]++, Math.max(1, Math.floor(daysDiff / 7))); // Max 7 data points
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[70]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[71]++, 0);
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[28][0]++, i < 7) &&
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[28][1]++, i * intervalDays < daysDiff); i++) {
      const periodStart =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[72]++, new Date(dateRange.startDate));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[73]++;
      periodStart.setDate(periodStart.getDate() + i * intervalDays);
      const periodEnd =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[74]++, new Date(periodStart));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[75]++;
      periodEnd.setDate(periodEnd.getDate() + intervalDays - 1);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[76]++;
      if (periodEnd > dateRange.endDate) {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[29][0]++;
        cov_1ooxeg0p2z().s[77]++;
        periodEnd.setTime(dateRange.endDate.getTime());
      } else
      /* istanbul ignore next */
      {
        cov_1ooxeg0p2z().b[29][1]++;
      }
      const metrics =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[78]++, await this.calculateMetrics({
        organizationId,
        startDate: periodStart,
        endDate: periodEnd,
        campaignIds
      }));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[79]++;
      trends.push({
        period: periodStart.toISOString().split('T')[0],
        metrics
      });
    }
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[80]++;
    return trends;
  }
  async getTopCampaigns(organizationId, dateRange, limit) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[14]++;
    // Get campaigns with their metrics
    const campaigns =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[81]++, await this.prisma.campaign.findMany({
      where: {
        organizationId
      },
      select: {
        id: true,
        name: true
      }
    }));
    const campaignMetrics =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[82]++, await Promise.all(campaigns.map(async campaign => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[15]++;
      const metrics =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[83]++, await this.calculateMetrics({
        organizationId,
        startDate: dateRange.startDate,
        endDate: dateRange.endDate,
        campaignIds: [campaign.id]
      }));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[84]++;
      return {
        campaignId: campaign.id,
        campaignName: campaign.name,
        metrics
      };
    })));
    // Sort by revenue and return top campaigns
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[85]++;
    return campaignMetrics.sort((a, b) => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[16]++;
      cov_1ooxeg0p2z().s[86]++;
      return b.metrics.revenue - a.metrics.revenue;
    }).slice(0, limit);
  }
  generateAlerts(metrics) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[17]++;
    const alerts =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[87]++, []);
    // ROAS alert
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[88]++;
    if (metrics.roas < 200) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[30][0]++;
      cov_1ooxeg0p2z().s[89]++;
      alerts.push({
        type: metrics.roas < 100 ?
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[31][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[31][1]++, 'warning'),
        message: 'ROAS is below target threshold',
        metric: 'roas',
        value: metrics.roas,
        threshold: 200
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[30][1]++;
    }
    // Conversion rate alert
    cov_1ooxeg0p2z().s[90]++;
    if (metrics.conversionRate < 2) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[32][0]++;
      cov_1ooxeg0p2z().s[91]++;
      alerts.push({
        type: metrics.conversionRate < 1 ?
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[33][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[33][1]++, 'warning'),
        message: 'Conversion rate is below target threshold',
        metric: 'conversionRate',
        value: metrics.conversionRate,
        threshold: 2
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[32][1]++;
    }
    // CTR alert
    cov_1ooxeg0p2z().s[92]++;
    if (metrics.ctr < 1) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[34][0]++;
      cov_1ooxeg0p2z().s[93]++;
      alerts.push({
        type: metrics.ctr < 0.5 ?
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[35][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[35][1]++, 'warning'),
        message: 'Click-through rate is below target threshold',
        metric: 'ctr',
        value: metrics.ctr,
        threshold: 1
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[34][1]++;
    }
    cov_1ooxeg0p2z().s[94]++;
    return alerts;
  }
  async calculateFunnelAnalysis(campaignId, organizationId, dateRange) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[18]++;
    // Get funnel stages from database
    const funnelData =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[95]++, await this.prisma.funnelStage.findMany({
      where: {
        campaignId,
        date: {
          gte: dateRange.startDate,
          lte: dateRange.endDate
        }
      },
      orderBy: {
        stageOrder: 'asc'
      }
    }));
    // Aggregate by stage
    const stageMap =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[96]++, new Map());
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[97]++;
    funnelData.forEach(stage => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[19]++;
      const existing =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[98]++,
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[36][0]++, stageMap.get(stage.stageName)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[36][1]++, {
        users: 0,
        stageOrder: stage.stageOrder
      }));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[99]++;
      existing.users += stage.users;
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[100]++;
      stageMap.set(stage.stageName, existing);
    });
    // Convert to array and calculate rates
    const stages =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[101]++, Array.from(stageMap.entries()).map(([stageName, data]) => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[20]++;
      cov_1ooxeg0p2z().s[102]++;
      return {
        stageName,
        ...data
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[21]++;
      cov_1ooxeg0p2z().s[103]++;
      return a.stageOrder - b.stageOrder;
    }));
    const funnelStages =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[104]++, []);
    let previousUsers =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[105]++, 0);
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[106]++;
    stages.forEach((stage, index) => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[22]++;
      const conversionRate =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[107]++, index === 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[37][0]++, 100) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[37][1]++, previousUsers > 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[38][0]++, stage.users / previousUsers * 100) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[38][1]++, 0)));
      const dropoffRate =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[108]++, 100 - conversionRate);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[109]++;
      funnelStages.push({
        stage: stage.stageName,
        users: stage.users,
        conversionRate,
        dropoffRate
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[110]++;
      previousUsers = stage.users;
    });
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[111]++;
    return funnelStages;
  }
  async calculateComparison(filters, previousPeriod) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[23]++;
    const [current, previous] =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[112]++, await Promise.all([this.calculateMetrics(filters), this.calculateMetrics({
      ...filters,
      startDate: previousPeriod.startDate,
      endDate: previousPeriod.endDate
    })]));
    const changes =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[113]++, {});
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[114]++;
    Object.keys(current).forEach(key => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[24]++;
      const currentValue =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[115]++, current[key]);
      const previousValue =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[116]++, previous[key]);
      const absolute =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[117]++, currentValue - previousValue);
      const percentage =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[118]++, previousValue !== 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[39][0]++, absolute / previousValue * 100) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[39][1]++, 0));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[119]++;
      changes[key] = {
        absolute,
        percentage
      };
    });
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[120]++;
    return {
      current,
      previous,
      changes
    };
  }
  getEmptyMetrics() {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[25]++;
    cov_1ooxeg0p2z().s[121]++;
    return {
      revenue: 0,
      roas: 0,
      roi: 0,
      adSpend: 0,
      cpc: 0,
      cpm: 0,
      cac: 0,
      impressions: 0,
      clicks: 0,
      conversions: 0,
      ctr: 0,
      conversionRate: 0,
      ltv: 0,
      arpu: 0,
      margin: 0,
      profit: 0
    };
  }
  generateCacheKey(operation, data) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[26]++;
    const hash =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[122]++, Buffer.from(JSON.stringify(data)).toString('base64').slice(0, 32));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[123]++;
    return `${operation}:${hash}`;
  }
  // Cache invalidation methods
  async invalidateCampaignCache(campaignId) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[27]++;
    cov_1ooxeg0p2z().s[124]++;
    await this.cache.invalidateCampaign(campaignId);
  }
  async invalidateOrganizationCache(organizationId) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[28]++;
    cov_1ooxeg0p2z().s[125]++;
    await this.cache.invalidateOrganization(organizationId);
  }
  // Export data (with caching for large exports)
  async exportMetrics(filters, format) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[29]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[126]++, this.generateCacheKey('export', {
      ...filters,
      format
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[127]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[30]++;
      cov_1ooxeg0p2z().s[128]++;
      logger.info('Generating metrics export', {
        filters,
        format
      });
      const metrics =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[129]++, await this.calculateMetrics(filters));
      const filename =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[130]++, `metrics_export_${Date.now()}.${format.toLowerCase()}`);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[131]++;
      return {
        data: format === 'JSON' ?
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[40][0]++, metrics) :
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[40][1]++, this.formatForExport(metrics, format)),
        filename
      };
    }, {
      ttl: CACHE_TTL.EXPORT,
      prefix: CACHE_PREFIXES.EXPORT
    });
  }
  formatForExport(metrics, format) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[31]++;
    cov_1ooxeg0p2z().s[132]++;
    if (format === 'CSV') {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[41][0]++;
      const headers =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[133]++, Object.keys(metrics).join(','));
      const values =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[134]++, Object.values(metrics).join(','));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[135]++;
      return `${headers}\n${values}`;
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[41][1]++;
    }
    // For XLSX, return JSON that can be converted to Excel
    cov_1ooxeg0p2z().s[136]++;
    return JSON.stringify([metrics]);
  }
  // Check if stored procedures are available
  async checkStoredProceduresAvailability() {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[32]++;
    cov_1ooxeg0p2z().s[137]++;
    try {
      const health =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[138]++, await this.storedProcedures.checkStoredProceduresHealth());
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[139]++;
      this.useStoredProcedures = health.available;
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[140]++;
      if (!health.available) {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[42][0]++;
        cov_1ooxeg0p2z().s[141]++;
        logger.warn('Stored procedures not available, using TypeScript fallback', {
          missing: health.missing
        });
      } else {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[42][1]++;
        cov_1ooxeg0p2z().s[142]++;
        logger.info('Stored procedures are available and will be used for optimization');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[143]++;
      logger.error('Error checking stored procedures availability:', error);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[144]++;
      this.useStoredProcedures = false;
    }
  }
  // Map stored procedure result to KPIMetrics interface
  mapStoredProcedureResult(result) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[33]++;
    cov_1ooxeg0p2z().s[145]++;
    return {
      revenue:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[43][0]++, Number(result.revenue)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[43][1]++, 0),
      roas:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[44][0]++, Number(result.roas)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[44][1]++, 0),
      roi:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[45][0]++, Number(result.roi)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[45][1]++, 0),
      adSpend:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[46][0]++, Number(result.ad_spend)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[46][1]++, 0),
      cpc:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[47][0]++, Number(result.cpc)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[47][1]++, 0),
      cpm:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[48][0]++, Number(result.cpm)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[48][1]++, 0),
      cac:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[49][0]++, Number(result.cac)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[49][1]++, 0),
      impressions:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[50][0]++, Number(result.impressions)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[50][1]++, 0),
      clicks:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[51][0]++, Number(result.clicks)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[51][1]++, 0),
      conversions:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[52][0]++, Number(result.conversions)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[52][1]++, 0),
      ctr:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[53][0]++, Number(result.ctr)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[53][1]++, 0),
      conversionRate:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[54][0]++, Number(result.conversion_rate)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[54][1]++, 0),
      ltv:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[55][0]++, Number(result.ltv)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[55][1]++, 0),
      arpu:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[56][0]++, Number(result.arpu)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[56][1]++, 0),
      margin:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[57][0]++, Number(result.margin)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[57][1]++, 0),
      profit:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[58][0]++, Number(result.profit)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[58][1]++, 0)
    };
  }
  // Get stored procedures performance stats
  async getStoredProceduresStats() {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[34]++;
    cov_1ooxeg0p2z().s[146]++;
    if (!this.useStoredProcedures) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[59][0]++;
      cov_1ooxeg0p2z().s[147]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[59][1]++;
    }
    cov_1ooxeg0p2z().s[148]++;
    try {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[149]++;
      return await this.storedProcedures.getPerformanceStats();
    } catch (error) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[150]++;
      logger.error('Error getting stored procedures stats:', error);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[151]++;
      return [];
    }
  }
  // Force refresh stored procedures availability
  async refreshStoredProceduresStatus() {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[35]++;
    cov_1ooxeg0p2z().s[152]++;
    await this.checkStoredProceduresAvailability();
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[153]++;
    return this.useStoredProcedures;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,