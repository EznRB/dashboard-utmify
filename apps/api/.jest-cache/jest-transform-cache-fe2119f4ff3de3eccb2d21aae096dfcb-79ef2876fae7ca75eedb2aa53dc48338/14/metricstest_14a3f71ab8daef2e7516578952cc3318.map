{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\metrics.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\metrics.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { PrismaService } from '../database/prisma.service';\nimport { MetricsService, MetricsFilters, KPIMetrics } from '../services/metrics.service';\nimport { CacheService } from '../services/cache.service';\nimport { StoredProceduresService } from '../services/stored-procedures.service';\n\n// Mock dependencies\njest.mock('../database/prisma.service');\njest.mock('../services/cache.service');\njest.mock('../services/stored-procedures.service');\n\ndescribe('MetricsService', () => {\n  let metricsService: MetricsService;\n  let mockPrisma: jest.Mocked<PrismaService>;\n  let mockCache: jest.Mocked<CacheService>;\n  let mockStoredProcedures: jest.Mocked<StoredProceduresService>;\n\n  const mockOrganizationId = '123e4567-e89b-12d3-a456-426614174000';\n  const mockCampaignId = '123e4567-e89b-12d3-a456-426614174001';\n  const mockStartDate = new Date('2024-01-01');\n  const mockEndDate = new Date('2024-01-31');\n\n  const mockMetricsData = {\n    _sum: {\n      impressions: 10000,\n      clicks: 500,\n      conversions: 50,\n      revenue: 5000,\n      adSpend: 2000,\n    },\n  };\n\n  const expectedKPIMetrics: KPIMetrics = {\n    revenue: 5000,\n    roas: 250, // (5000/2000) * 100\n    roi: 150, // ((5000-2000)/2000) * 100\n    adSpend: 2000,\n    cpc: 4, // 2000/500\n    cpm: 200, // (2000/10000) * 1000\n    cac: 40, // 2000/50\n    impressions: 10000,\n    clicks: 500,\n    conversions: 50,\n    ctr: 5, // (500/10000) * 100\n    conversionRate: 10, // (50/500) * 100\n    ltv: 250, // (5000/50) * 2.5\n    arpu: 100, // 5000/50\n    margin: 60, // ((5000-2000)/5000) * 100\n    profit: 3000, // 5000-2000\n  };\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Setup mock implementations\n    mockPrisma = {\n      campaign: {\n        findMany: jest.fn(),\n      },\n      metricsDaily: {\n        aggregate: jest.fn(),\n        upsert: jest.fn(),\n      },\n      metricsHourly: {\n        upsert: jest.fn(),\n      },\n      funnelStage: {\n        findMany: jest.fn(),\n      },\n      $queryRaw: jest.fn(),\n      $queryRawUnsafe: jest.fn(),\n    } as any;\n\n    mockCache = {\n      getOrSet: jest.fn(),\n      invalidateCampaign: jest.fn(),\n      invalidateOrganization: jest.fn(),\n    } as any;\n\n    mockStoredProcedures = {\n      calculateKPIMetrics: jest.fn(),\n      checkStoredProceduresHealth: jest.fn(),\n      getPerformanceStats: jest.fn(),\n    } as any;\n\n    // Create service instance\n    metricsService = new MetricsService(mockPrisma);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('calculateMetrics', () => {\n    it('should calculate KPI metrics correctly', async () => {\n      // Setup mocks\n      mockPrisma.campaign.findMany.mockResolvedValue([\n        { id: mockCampaignId },\n      ]);\n      mockPrisma.metricsDaily.aggregate.mockResolvedValue(mockMetricsData);\n      mockCache.getOrSet.mockImplementation(async (key, fn) => fn());\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      const result = await metricsService.calculateMetrics(filters);\n\n      expect(result).toEqual(expectedKPIMetrics);\n      expect(mockPrisma.metricsDaily.aggregate).toHaveBeenCalledWith({\n        where: {\n          campaignId: { in: [mockCampaignId] },\n          date: {\n            gte: mockStartDate,\n            lte: mockEndDate,\n          },\n        },\n        _sum: {\n          impressions: true,\n          clicks: true,\n          conversions: true,\n          revenue: true,\n          adSpend: true,\n        },\n      });\n    });\n\n    it('should return empty metrics when no campaigns found', async () => {\n      mockPrisma.campaign.findMany.mockResolvedValue([]);\n      mockCache.getOrSet.mockImplementation(async (key, fn) => fn());\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      const result = await metricsService.calculateMetrics(filters);\n\n      expect(result).toEqual({\n        revenue: 0,\n        roas: 0,\n        roi: 0,\n        adSpend: 0,\n        cpc: 0,\n        cpm: 0,\n        cac: 0,\n        impressions: 0,\n        clicks: 0,\n        conversions: 0,\n        ctr: 0,\n        conversionRate: 0,\n        ltv: 0,\n        arpu: 0,\n        margin: 0,\n        profit: 0,\n      });\n    });\n\n    it('should handle division by zero safely', async () => {\n      const zeroMetricsData = {\n        _sum: {\n          impressions: 0,\n          clicks: 0,\n          conversions: 0,\n          revenue: 0,\n          adSpend: 0,\n        },\n      };\n\n      mockPrisma.campaign.findMany.mockResolvedValue([{ id: mockCampaignId }]);\n      mockPrisma.metricsDaily.aggregate.mockResolvedValue(zeroMetricsData);\n      mockCache.getOrSet.mockImplementation(async (key, fn) => fn());\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      const result = await metricsService.calculateMetrics(filters);\n\n      // All calculated metrics should be 0 when base metrics are 0\n      expect(result.ctr).toBe(0);\n      expect(result.conversionRate).toBe(0);\n      expect(result.cpc).toBe(0);\n      expect(result.cpm).toBe(0);\n      expect(result.cac).toBe(0);\n      expect(result.roas).toBe(0);\n      expect(result.roi).toBe(0);\n    });\n\n    it('should use cache when available', async () => {\n      const cachedResult = expectedKPIMetrics;\n      mockCache.getOrSet.mockResolvedValue(cachedResult);\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      const result = await metricsService.calculateMetrics(filters);\n\n      expect(result).toEqual(cachedResult);\n      expect(mockCache.getOrSet).toHaveBeenCalled();\n    });\n  });\n\n  describe('updateRealTimeMetrics', () => {\n    it('should update hourly metrics for CLICK event', async () => {\n      const now = new Date();\n      const hourStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());\n\n      mockPrisma.metricsHourly.upsert.mockResolvedValue({} as any);\n      mockCache.invalidateCampaign.mockResolvedValue();\n\n      await metricsService.updateRealTimeMetrics(\n        mockCampaignId,\n        'CLICK',\n        { source: 'google' }\n      );\n\n      expect(mockPrisma.metricsHourly.upsert).toHaveBeenCalledWith({\n        where: {\n          campaignId_hour: {\n            campaignId: mockCampaignId,\n            hour: hourStart,\n          },\n        },\n        update: {\n          clicks: { increment: 1 },\n          updatedAt: expect.any(Date),\n        },\n        create: {\n          campaignId: mockCampaignId,\n          hour: hourStart,\n          impressions: 0,\n          clicks: 1,\n          conversions: 0,\n          revenue: 0,\n          adSpend: 0,\n          createdAt: expect.any(Date),\n          updatedAt: expect.any(Date),\n        },\n      });\n\n      expect(mockCache.invalidateCampaign).toHaveBeenCalledWith(mockCampaignId);\n    });\n\n    it('should update hourly metrics for CONVERSION event with value', async () => {\n      const eventData = { value: 100, orderId: 'order123' };\n      mockPrisma.metricsHourly.upsert.mockResolvedValue({} as any);\n      mockCache.invalidateCampaign.mockResolvedValue();\n\n      await metricsService.updateRealTimeMetrics(\n        mockCampaignId,\n        'CONVERSION',\n        eventData\n      );\n\n      expect(mockPrisma.metricsHourly.upsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          update: {\n            conversions: { increment: 1 },\n            revenue: { increment: 100 },\n            updatedAt: expect.any(Date),\n          },\n          create: expect.objectContaining({\n            conversions: 1,\n            revenue: 100,\n          }),\n        })\n      );\n    });\n\n    it('should handle errors gracefully', async () => {\n      mockPrisma.metricsHourly.upsert.mockRejectedValue(new Error('Database error'));\n\n      await expect(\n        metricsService.updateRealTimeMetrics(mockCampaignId, 'CLICK', {})\n      ).rejects.toThrow('Database error');\n    });\n  });\n\n  describe('getDashboardMetrics', () => {\n    it('should generate comprehensive dashboard metrics', async () => {\n      const mockSummary = expectedKPIMetrics;\n      const mockTrends = [\n        { period: '2024-01-01', metrics: expectedKPIMetrics },\n        { period: '2024-01-02', metrics: expectedKPIMetrics },\n      ];\n      const mockTopCampaigns = [\n        {\n          campaignId: mockCampaignId,\n          campaignName: 'Test Campaign',\n          metrics: expectedKPIMetrics,\n        },\n      ];\n\n      // Mock the cache to return our test data\n      mockCache.getOrSet.mockImplementation(async (key, fn) => {\n        if (key.includes('dashboard')) {\n          return {\n            summary: mockSummary,\n            trends: mockTrends,\n            topCampaigns: mockTopCampaigns,\n            alerts: [],\n          };\n        }\n        return fn();\n      });\n\n      const result = await metricsService.getDashboardMetrics(\n        mockOrganizationId,\n        { startDate: mockStartDate, endDate: mockEndDate }\n      );\n\n      expect(result).toHaveProperty('summary');\n      expect(result).toHaveProperty('trends');\n      expect(result).toHaveProperty('topCampaigns');\n      expect(result).toHaveProperty('alerts');\n      expect(Array.isArray(result.trends)).toBe(true);\n      expect(Array.isArray(result.topCampaigns)).toBe(true);\n      expect(Array.isArray(result.alerts)).toBe(true);\n    });\n  });\n\n  describe('compareMetrics', () => {\n    it('should compare metrics between two periods', async () => {\n      const currentMetrics = expectedKPIMetrics;\n      const previousMetrics = {\n        ...expectedKPIMetrics,\n        revenue: 4000,\n        conversions: 40,\n      };\n\n      mockCache.getOrSet.mockImplementation(async (key, fn) => {\n        if (key.includes('comparison')) {\n          return {\n            current: currentMetrics,\n            previous: previousMetrics,\n            changes: {\n              revenue: { absolute: 1000, percentage: 25 },\n              conversions: { absolute: 10, percentage: 25 },\n              // ... other metrics\n            },\n          };\n        }\n        return fn();\n      });\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      const previousPeriod = {\n        startDate: new Date('2023-12-01'),\n        endDate: new Date('2023-12-31'),\n      };\n\n      const result = await metricsService.compareMetrics(filters, previousPeriod);\n\n      expect(result).toHaveProperty('current');\n      expect(result).toHaveProperty('previous');\n      expect(result).toHaveProperty('changes');\n      expect(result.current).toEqual(currentMetrics);\n      expect(result.previous).toEqual(previousMetrics);\n    });\n  });\n\n  describe('exportMetrics', () => {\n    it('should export metrics in JSON format', async () => {\n      mockCache.getOrSet.mockImplementation(async (key, fn) => fn());\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      // Mock calculateMetrics to return expected data\n      jest.spyOn(metricsService, 'calculateMetrics').mockResolvedValue(expectedKPIMetrics);\n\n      const result = await metricsService.exportMetrics(filters, 'JSON');\n\n      expect(result).toHaveProperty('data');\n      expect(result).toHaveProperty('filename');\n      expect(result.data).toEqual(expectedKPIMetrics);\n      expect(result.filename).toMatch(/metrics_export_\\d+\\.json/);\n    });\n\n    it('should export metrics in CSV format', async () => {\n      mockCache.getOrSet.mockImplementation(async (key, fn) => fn());\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      jest.spyOn(metricsService, 'calculateMetrics').mockResolvedValue(expectedKPIMetrics);\n\n      const result = await metricsService.exportMetrics(filters, 'CSV');\n\n      expect(result).toHaveProperty('data');\n      expect(result).toHaveProperty('filename');\n      expect(typeof result.data).toBe('string');\n      expect(result.data).toContain('revenue,roas,roi'); // CSV headers\n      expect(result.filename).toMatch(/metrics_export_\\d+\\.csv/);\n    });\n  });\n\n  describe('Cache Integration', () => {\n    it('should invalidate campaign cache', async () => {\n      mockCache.invalidateCampaign.mockResolvedValue();\n\n      await metricsService.invalidateCampaignCache(mockCampaignId);\n\n      expect(mockCache.invalidateCampaign).toHaveBeenCalledWith(mockCampaignId);\n    });\n\n    it('should invalidate organization cache', async () => {\n      mockCache.invalidateOrganization.mockResolvedValue();\n\n      await metricsService.invalidateOrganizationCache(mockOrganizationId);\n\n      expect(mockCache.invalidateOrganization).toHaveBeenCalledWith(mockOrganizationId);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database errors gracefully', async () => {\n      mockPrisma.campaign.findMany.mockRejectedValue(new Error('Database connection failed'));\n      mockCache.getOrSet.mockImplementation(async (key, fn) => fn());\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      await expect(metricsService.calculateMetrics(filters)).rejects.toThrow(\n        'Database connection failed'\n      );\n    });\n\n    it('should handle cache errors gracefully', async () => {\n      mockCache.getOrSet.mockRejectedValue(new Error('Cache connection failed'));\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      await expect(metricsService.calculateMetrics(filters)).rejects.toThrow(\n        'Cache connection failed'\n      );\n    });\n  });\n\n  describe('Performance', () => {\n    it('should complete metrics calculation within reasonable time', async () => {\n      mockPrisma.campaign.findMany.mockResolvedValue([{ id: mockCampaignId }]);\n      mockPrisma.metricsDaily.aggregate.mockResolvedValue(mockMetricsData);\n      mockCache.getOrSet.mockImplementation(async (key, fn) => fn());\n\n      const filters: MetricsFilters = {\n        organizationId: mockOrganizationId,\n        startDate: mockStartDate,\n        endDate: mockEndDate,\n      };\n\n      const startTime = Date.now();\n      await metricsService.calculateMetrics(filters);\n      const endTime = Date.now();\n\n      // Should complete within 1 second (generous for testing)\n      expect(endTime - startTime).toBeLessThan(1000);\n    });\n  });\n});\n\n// Integration tests\ndescribe('MetricsService Integration', () => {\n  // These tests would require a real database connection\n  // and should be run in a separate test environment\n  \n  it.skip('should integrate with real database', async () => {\n    // Integration test implementation\n  });\n\n  it.skip('should integrate with real cache', async () => {\n    // Integration test implementation\n  });\n\n  it.skip('should integrate with stored procedures', async () => {\n    // Integration test implementation\n  });\n});"],"version":3}