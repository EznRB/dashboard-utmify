{"version":3,"names":["cov_1ejk3z8srk","actualCoverage","PrismaService","StripeService","PlanType","SubscriptionStatus","InvoiceStatus","BillingService","prisma","stripeService","constructor","f","s","createCheckoutSession","organizationId","planId","successUrl","cancelUrl","couponCode","getSubscription","subscription","findUnique","where","deletedAt","include","plan","organization","invoices","orderBy","createdAt","take","b","usageRecords","usageRecord","findMany","subscriptionId","id","timestamp","gte","currentPeriodStart","lte","currentPeriodEnd","usage","aggregateUsage","cancelSubscription","cancelAtPeriodEnd","stripeSubscriptionId","Error","updateData","updatedAt","Date","status","CANCELED","canceledAt","update","data","restoreSubscription","not","ACTIVE","getDeletedSubscriptions","permanentlyDeleteSubscription","deleteMany","invoice","delete","upgradeSubscription","newPlanId","newPlan","stripePriceId","pricePerUnit","price","getInvoices","updatePaymentMethod","paymentMethodId","stripeCustomerId","attachPaymentMethod","stripePaymentMethods","getPaymentMethods","paymentMethod","find","pm","card","updateMany","isDefault","upsert","stripePaymentMethodId","create","type","brand","last4","expiryMonth","exp_month","expiryYear","exp_year","success","recordUsage","metricName","quantity","setHours","subscriptionId_metricName_timestamp","increment","FREE","checkUsageLimits","limits","integrations","maxIntegrations","users","maxUsers","apiCalls","maxApiCalls","exceeded","handleWebhookEvent","event","billingEvent","eventType","stripeEventId","handleSubscriptionCreated","object","handleSubscriptionUpdated","handleSubscriptionDeleted","handleInvoicePaymentSucceeded","handleInvoicePaymentFailed","console","log","processed","error","message","metadata","customer","toUpperCase","current_period_start","current_period_end","trialStart","trial_start","trialEnd","trial_end","items","unit_amount","cancel_at_period_end","canceled_at","stripeInvoiceId","number","PAID","amountPaid","amount_paid","amountDue","amount_due","subtotal","tax","total","currency","description","hostedInvoiceUrl","hosted_invoice_url","invoicePdf","invoice_pdf","periodStart","period_start","periodEnd","period_end","paidAt","status_transitions","paid_at","OPEN","attemptCount","attempt_count","nextPaymentAttempt","next_payment_attempt","forEach","record"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\billing.service.ts"],"sourcesContent":["import { PrismaService } from '../database/prisma.service';\nimport { StripeService } from './stripe.service';\nimport { PlanType, SubscriptionStatus, InvoiceStatus } from '@prisma/client';\nimport Stripe from 'stripe';\n\nexport interface CreateSubscriptionParams {\n  organizationId: string;\n  planId: string;\n  stripeSubscriptionId: string;\n  stripeCustomerId: string;\n  currentPeriodStart: Date;\n  currentPeriodEnd: Date;\n  trialStart?: Date;\n  trialEnd?: Date;\n}\n\nexport class BillingService {\n  private prisma: PrismaService;\n  private stripeService: StripeService;\n\n  constructor() {\n    this.prisma = new PrismaService();\n    this.stripeService = new StripeService();\n  }\n\n  async createCheckoutSession(organizationId: string, planId: string, successUrl: string, cancelUrl: string, couponCode?: string) {\n    return await this.stripeService.createCheckoutSession({\n      organizationId,\n      planId,\n      successUrl,\n      cancelUrl,\n      couponCode,\n    });\n  }\n\n  async getSubscription(organizationId: string) {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { \n        organizationId,\n        deletedAt: null // Only get non-deleted subscriptions\n      },\n      include: {\n        plan: {\n          where: { deletedAt: null }\n        },\n        organization: true,\n        invoices: {\n          where: { deletedAt: null },\n          orderBy: { createdAt: 'desc' },\n          take: 10,\n        },\n      },\n    });\n\n    if (!subscription) {\n      return null;\n    }\n\n    // Get usage data for current period\n    const usageRecords = await this.prisma.usageRecord.findMany({\n      where: {\n        subscriptionId: subscription.id,\n        deletedAt: null, // Only get non-deleted usage records\n        timestamp: {\n          gte: subscription.currentPeriodStart,\n          lte: subscription.currentPeriodEnd,\n        },\n      },\n      orderBy: { timestamp: 'desc' },\n    });\n\n    return {\n      ...subscription,\n      usage: this.aggregateUsage(usageRecords),\n    };\n  }\n\n  async cancelSubscription(organizationId: string, cancelAtPeriodEnd = true) {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { organizationId },\n    });\n\n    if (!subscription || !subscription.stripeSubscriptionId) {\n      throw new Error('Assinatura não encontrada');\n    }\n\n    // Cancel in Stripe\n    await this.stripeService.cancelSubscription(subscription.stripeSubscriptionId, cancelAtPeriodEnd);\n\n    // Update in database\n    const updateData: any = {\n      cancelAtPeriodEnd,\n      updatedAt: new Date(),\n    };\n\n    if (!cancelAtPeriodEnd) {\n      updateData.status = SubscriptionStatus.CANCELED;\n      updateData.canceledAt = new Date();\n      updateData.deletedAt = new Date(); // Soft delete\n    }\n\n    return await this.prisma.subscription.update({\n      where: { organizationId },\n      data: updateData,\n    });\n  }\n\n  async restoreSubscription(organizationId: string) {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { \n        organizationId,\n        deletedAt: { not: null } // Only get soft-deleted subscriptions\n      },\n    });\n\n    if (!subscription) {\n      throw new Error('Assinatura cancelada não encontrada');\n    }\n\n    // Restore subscription by removing deletedAt timestamp\n    return await this.prisma.subscription.update({\n      where: { organizationId },\n      data: {\n        deletedAt: null,\n        status: SubscriptionStatus.ACTIVE,\n        canceledAt: null,\n        cancelAtPeriodEnd: false,\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  async getDeletedSubscriptions(organizationId?: string) {\n    const where: any = {\n      deletedAt: { not: null }\n    };\n\n    if (organizationId) {\n      where.organizationId = organizationId;\n    }\n\n    return await this.prisma.subscription.findMany({\n      where,\n      include: {\n        plan: true,\n        organization: true,\n      },\n      orderBy: { deletedAt: 'desc' },\n    });\n  }\n\n  async permanentlyDeleteSubscription(organizationId: string) {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { \n        organizationId,\n        deletedAt: { not: null } // Only permanently delete soft-deleted subscriptions\n      },\n    });\n\n    if (!subscription) {\n      throw new Error('Assinatura cancelada não encontrada');\n    }\n\n    // Permanently delete related records first\n    await this.prisma.usageRecord.deleteMany({\n      where: { subscriptionId: subscription.id },\n    });\n\n    await this.prisma.invoice.deleteMany({\n      where: { subscriptionId: subscription.id },\n    });\n\n    // Then permanently delete the subscription\n    return await this.prisma.subscription.delete({\n      where: { organizationId },\n    });\n  }\n\n  async upgradeSubscription(organizationId: string, newPlanId: string) {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { organizationId },\n      include: { plan: true },\n    });\n\n    if (!subscription || !subscription.stripeSubscriptionId) {\n      throw new Error('Assinatura não encontrada');\n    }\n\n    const newPlan = await this.prisma.plan.findUnique({\n      where: { id: newPlanId },\n    });\n\n    if (!newPlan || !newPlan.stripePriceId) {\n      throw new Error('Plano não encontrado');\n    }\n\n    // Upgrade in Stripe\n    await this.stripeService.upgradeSubscription(subscription.stripeSubscriptionId, newPlan.stripePriceId);\n\n    // Update in database\n    return await this.prisma.subscription.update({\n      where: { organizationId },\n      data: {\n        planId: newPlanId,\n        pricePerUnit: newPlan.price,\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  async getInvoices(organizationId: string) {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { \n        organizationId,\n        deletedAt: null // Only get non-deleted subscriptions\n      },\n    });\n\n    if (!subscription) {\n      return [];\n    }\n\n    return await this.prisma.invoice.findMany({\n      where: { \n        subscriptionId: subscription.id,\n        deletedAt: null // Only get non-deleted invoices\n      },\n      orderBy: { createdAt: 'desc' },\n    });\n  }\n\n  async updatePaymentMethod(organizationId: string, paymentMethodId: string) {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { organizationId },\n    });\n\n    if (!subscription || !subscription.stripeCustomerId) {\n      throw new Error('Assinatura não encontrada');\n    }\n\n    // Attach payment method in Stripe\n    await this.stripeService.attachPaymentMethod(subscription.stripeCustomerId, paymentMethodId);\n\n    // Save payment method in database\n    const stripePaymentMethods = await this.stripeService.getPaymentMethods(subscription.stripeCustomerId);\n    const paymentMethod = stripePaymentMethods.data.find(pm => pm.id === paymentMethodId);\n\n    if (paymentMethod && paymentMethod.card) {\n      // Set all existing payment methods as non-default\n      await this.prisma.paymentMethod.updateMany({\n        where: { organizationId },\n        data: { isDefault: false },\n      });\n\n      // Create or update the new payment method\n      await this.prisma.paymentMethod.upsert({\n        where: { stripePaymentMethodId: paymentMethodId },\n        create: {\n          organizationId,\n          stripePaymentMethodId: paymentMethodId,\n          type: paymentMethod.type,\n          brand: paymentMethod.card.brand,\n          last4: paymentMethod.card.last4,\n          expiryMonth: paymentMethod.card.exp_month,\n          expiryYear: paymentMethod.card.exp_year,\n          isDefault: true,\n        },\n        update: {\n          isDefault: true,\n        },\n      });\n    }\n\n    return { success: true };\n  }\n\n  async recordUsage(organizationId: string, metricName: string, quantity: number) {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { organizationId },\n    });\n\n    if (!subscription) {\n      throw new Error('Assinatura não encontrada');\n    }\n\n    const timestamp = new Date();\n    timestamp.setHours(0, 0, 0, 0); // Start of day\n\n    // Record usage in database\n    await this.prisma.usageRecord.upsert({\n      where: {\n        subscriptionId_metricName_timestamp: {\n          subscriptionId: subscription.id,\n          metricName,\n          timestamp,\n        },\n      },\n      create: {\n        subscriptionId: subscription.id,\n        organizationId,\n        metricName,\n        quantity,\n        timestamp,\n      },\n      update: {\n        quantity: {\n          increment: quantity,\n        },\n      },\n    });\n\n    // Check if we need to report to Stripe for metered billing\n    if (metricName === 'api_calls' && subscription.plan?.type !== PlanType.FREE) {\n      // This would be implemented if you have metered billing setup in Stripe\n      // await this.stripeService.createUsageRecord(subscriptionItemId, quantity);\n    }\n  }\n\n  async checkUsageLimits(organizationId: string): Promise<{ exceeded: boolean; limits: any; usage: any }> {\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { organizationId },\n      include: { plan: true },\n    });\n\n    if (!subscription) {\n      throw new Error('Assinatura não encontrada');\n    }\n\n    const currentPeriodStart = subscription.currentPeriodStart || new Date();\n    const currentPeriodEnd = subscription.currentPeriodEnd || new Date();\n\n    // Get current usage\n    const usageRecords = await this.prisma.usageRecord.findMany({\n      where: {\n        subscriptionId: subscription.id,\n        timestamp: {\n          gte: currentPeriodStart,\n          lte: currentPeriodEnd,\n        },\n      },\n    });\n\n    const usage = this.aggregateUsage(usageRecords);\n    const limits = {\n      integrations: subscription.plan.maxIntegrations,\n      users: subscription.plan.maxUsers,\n      apiCalls: subscription.plan.maxApiCalls,\n    };\n\n    const exceeded = (\n      (limits.integrations && usage.integrations > limits.integrations) ||\n      (limits.users && usage.users > limits.users) ||\n      (limits.apiCalls && usage.apiCalls > limits.apiCalls)\n    );\n\n    return { exceeded, limits, usage };\n  }\n\n  async handleWebhookEvent(event: Stripe.Event) {\n    // Log the event\n    await this.prisma.billingEvent.create({\n      data: {\n        eventType: event.type,\n        stripeEventId: event.id,\n        data: event.data as any,\n      },\n    });\n\n    try {\n      switch (event.type) {\n        case 'customer.subscription.created':\n          await this.handleSubscriptionCreated(event.data.object as Stripe.Subscription);\n          break;\n        case 'customer.subscription.updated':\n          await this.handleSubscriptionUpdated(event.data.object as Stripe.Subscription);\n          break;\n        case 'customer.subscription.deleted':\n          await this.handleSubscriptionDeleted(event.data.object as Stripe.Subscription);\n          break;\n        case 'invoice.payment_succeeded':\n          await this.handleInvoicePaymentSucceeded(event.data.object as Stripe.Invoice);\n          break;\n        case 'invoice.payment_failed':\n          await this.handleInvoicePaymentFailed(event.data.object as Stripe.Invoice);\n          break;\n        default:\n          console.log(`Unhandled event type: ${event.type}`);\n      }\n\n      // Mark event as processed\n      await this.prisma.billingEvent.update({\n        where: { stripeEventId: event.id },\n        data: { processed: true },\n      });\n    } catch (error) {\n      console.error(`Error processing webhook event ${event.id}:`, error);\n      \n      // Mark event as failed\n      await this.prisma.billingEvent.update({\n        where: { stripeEventId: event.id },\n        data: {\n          processed: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        },\n      });\n    }\n  }\n\n  private async handleSubscriptionCreated(subscription: Stripe.Subscription) {\n    const organizationId = subscription.metadata.organizationId;\n    const planId = subscription.metadata.planId;\n\n    if (!organizationId || !planId) {\n      throw new Error('Missing metadata in subscription');\n    }\n\n    await this.prisma.subscription.upsert({\n      where: { organizationId },\n      create: {\n        organizationId,\n        planId,\n        stripeSubscriptionId: subscription.id,\n        stripeCustomerId: subscription.customer as string,\n        status: subscription.status.toUpperCase() as SubscriptionStatus,\n        currentPeriodStart: new Date(subscription.current_period_start * 1000),\n        currentPeriodEnd: new Date(subscription.current_period_end * 1000),\n        trialStart: subscription.trial_start ? new Date(subscription.trial_start * 1000) : null,\n        trialEnd: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null,\n        pricePerUnit: subscription.items.data[0]?.price.unit_amount || 0,\n      },\n      update: {\n        stripeSubscriptionId: subscription.id,\n        stripeCustomerId: subscription.customer as string,\n        status: subscription.status.toUpperCase() as SubscriptionStatus,\n        currentPeriodStart: new Date(subscription.current_period_start * 1000),\n        currentPeriodEnd: new Date(subscription.current_period_end * 1000),\n        trialStart: subscription.trial_start ? new Date(subscription.trial_start * 1000) : null,\n        trialEnd: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null,\n        pricePerUnit: subscription.items.data[0]?.price.unit_amount || 0,\n      },\n    });\n  }\n\n  private async handleSubscriptionUpdated(subscription: Stripe.Subscription) {\n    const organizationId = subscription.metadata.organizationId;\n\n    if (!organizationId) {\n      throw new Error('Missing organizationId in subscription metadata');\n    }\n\n    await this.prisma.subscription.update({\n      where: { organizationId },\n      data: {\n        status: subscription.status.toUpperCase() as SubscriptionStatus,\n        currentPeriodStart: new Date(subscription.current_period_start * 1000),\n        currentPeriodEnd: new Date(subscription.current_period_end * 1000),\n        cancelAtPeriodEnd: subscription.cancel_at_period_end,\n        canceledAt: subscription.canceled_at ? new Date(subscription.canceled_at * 1000) : null,\n      },\n    });\n  }\n\n  private async handleSubscriptionDeleted(subscription: Stripe.Subscription) {\n    const organizationId = subscription.metadata.organizationId;\n\n    if (!organizationId) {\n      throw new Error('Missing organizationId in subscription metadata');\n    }\n\n    await this.prisma.subscription.update({\n      where: { organizationId },\n      data: {\n        status: SubscriptionStatus.CANCELED,\n        canceledAt: new Date(),\n        deletedAt: new Date(), // Soft delete\n      },\n    });\n  }\n\n  private async handleInvoicePaymentSucceeded(invoice: Stripe.Invoice) {\n    if (!invoice.subscription) return;\n\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { stripeSubscriptionId: invoice.subscription as string },\n    });\n\n    if (!subscription) return;\n\n    await this.prisma.invoice.upsert({\n      where: { stripeInvoiceId: invoice.id },\n      create: {\n        subscriptionId: subscription.id,\n        stripeInvoiceId: invoice.id,\n        number: invoice.number,\n        status: InvoiceStatus.PAID,\n        amountPaid: invoice.amount_paid,\n        amountDue: invoice.amount_due,\n        subtotal: invoice.subtotal,\n        tax: invoice.tax || 0,\n        total: invoice.total,\n        currency: invoice.currency.toUpperCase(),\n        description: invoice.description,\n        hostedInvoiceUrl: invoice.hosted_invoice_url,\n        invoicePdf: invoice.invoice_pdf,\n        periodStart: invoice.period_start ? new Date(invoice.period_start * 1000) : null,\n        periodEnd: invoice.period_end ? new Date(invoice.period_end * 1000) : null,\n        paidAt: new Date(invoice.status_transitions.paid_at! * 1000),\n      },\n      update: {\n        status: InvoiceStatus.PAID,\n        amountPaid: invoice.amount_paid,\n        paidAt: new Date(invoice.status_transitions.paid_at! * 1000),\n      },\n    });\n  }\n\n  private async handleInvoicePaymentFailed(invoice: Stripe.Invoice) {\n    if (!invoice.subscription) return;\n\n    const subscription = await this.prisma.subscription.findUnique({\n      where: { stripeSubscriptionId: invoice.subscription as string },\n    });\n\n    if (!subscription) return;\n\n    await this.prisma.invoice.upsert({\n      where: { stripeInvoiceId: invoice.id },\n      create: {\n        subscriptionId: subscription.id,\n        stripeInvoiceId: invoice.id,\n        number: invoice.number,\n        status: InvoiceStatus.OPEN,\n        amountPaid: invoice.amount_paid,\n        amountDue: invoice.amount_due,\n        subtotal: invoice.subtotal,\n        tax: invoice.tax || 0,\n        total: invoice.total,\n        currency: invoice.currency.toUpperCase(),\n        description: invoice.description,\n        attemptCount: invoice.attempt_count,\n        nextPaymentAttempt: invoice.next_payment_attempt ? new Date(invoice.next_payment_attempt * 1000) : null,\n      },\n      update: {\n        status: InvoiceStatus.OPEN,\n        attemptCount: invoice.attempt_count,\n        nextPaymentAttempt: invoice.next_payment_attempt ? new Date(invoice.next_payment_attempt * 1000) : null,\n      },\n    });\n  }\n\n  private aggregateUsage(usageRecords: any[]) {\n    const usage = {\n      integrations: 0,\n      users: 0,\n      apiCalls: 0,\n    };\n\n    usageRecords.forEach(record => {\n      if (record.metricName in usage) {\n        usage[record.metricName as keyof typeof usage] += record.quantity;\n      }\n    });\n\n    return usage;\n  }\n}"],"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","ignoreList":[]}