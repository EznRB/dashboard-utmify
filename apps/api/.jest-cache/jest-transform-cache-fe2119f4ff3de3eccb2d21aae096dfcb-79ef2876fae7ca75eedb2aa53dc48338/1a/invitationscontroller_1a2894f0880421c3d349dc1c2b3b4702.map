{"version":3,"names":["cov_2lasrvic71","actualCoverage","Controller","Post","Get","Delete","Body","Param","Query","UseGuards","UseInterceptors","HttpStatus","HttpCode","BadRequestException","ValidationPipe","ApiTags","ApiOperation","ApiResponse","ApiBearerAuth","InvitationService","TenantValidationInterceptor","TenantRoleGuard","GetUser","Roles","UserRole","CreateInvitationDto","AcceptInvitationDto","RejectInvitationDto","InvitationResponseDto","ValidateInvitationResponseDto","AcceptInvitationResponseDto","ValidateEmailResponseDto","CleanupExpiredResponseDto","s","InvitationsController","invitationService","constructor","f","createInvitation","createInvitationDto","user","emailRegex","test","email","b","Object","values","includes","role","ADMIN","OWNER","canInvite","validateInvitationEmail","organizationId","invitation","invitedById","id","status","invitedName","expiresAt","createdAt","organization","invitedBy","getInvitations","invitations","getInvitationsByOrganization","map","resendInvitation","invitationId","message","cancelInvitation","validateInvitation","token","getInvitationByToken","Date","valid","organizationName","name","inviterName","acceptInvitation","acceptInvitationDto","password","length","trim","result","rejectInvitation","rejectInvitationDto","validateEmail","reason","undefined","cleanupExpiredInvitations","count","__decorate","summary","description","type","CREATED","__param","_b","Promise","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_a"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\invitations.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Post,\n  Get,\n  Put,\n  Delete,\n  Body,\n  Param,\n  Query,\n  UseGuards,\n  UseInterceptors,\n  HttpStatus,\n  HttpCode,\n  BadRequestException,\n  NotFoundException,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';\nimport { InvitationService } from '../services/invitation.service';\nimport { TenantValidationInterceptor, TenantRoleGuard } from '../interceptors/tenant-validation.interceptor';\nimport { GetUser } from '../decorators/get-user.decorator';\nimport { Roles } from '../interceptors/tenant-validation.interceptor';\nimport { UserRole } from '@prisma/client';\nimport {\n  CreateInvitationDto,\n  AcceptInvitationDto,\n  RejectInvitationDto,\n  InvitationResponseDto,\n  ValidateInvitationResponseDto,\n  AcceptInvitationResponseDto,\n  ValidateEmailResponseDto,\n  MessageResponseDto,\n  CleanupExpiredResponseDto,\n} from '../dto/invitation.dto';\n\n@ApiTags('Invitations')\n@Controller('invitations')\n@UseInterceptors(TenantValidationInterceptor)\n@UseGuards(TenantRoleGuard)\n@ApiBearerAuth()\nexport class InvitationsController {\n  constructor(private readonly invitationService: InvitationService) {}\n\n  @Post()\n  @Roles(UserRole.ADMIN, UserRole.OWNER)\n  @ApiOperation({ summary: 'Criar convite para usuário' })\n  @ApiResponse({\n    status: 201,\n    description: 'Convite criado com sucesso',\n    type: InvitationResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos ou usuário já convidado',\n  })\n  @HttpCode(HttpStatus.CREATED)\n  async createInvitation(\n    @Body(ValidationPipe) createInvitationDto: CreateInvitationDto,\n    @GetUser() user: any,\n  ): Promise<InvitationResponseDto> {\n    // Validar email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(createInvitationDto.email)) {\n      throw new BadRequestException('Email inválido');\n    }\n\n    // Validar role\n    if (!Object.values(UserRole).includes(createInvitationDto.role)) {\n      throw new BadRequestException('Role inválido');\n    }\n\n    // Verificar se pode convidar para este role\n    if (user.role === UserRole.ADMIN && createInvitationDto.role === UserRole.OWNER) {\n      throw new BadRequestException('Apenas owners podem convidar outros owners');\n    }\n\n    // Validar se o email pode ser convidado\n    const canInvite = await this.invitationService.validateInvitationEmail(\n      createInvitationDto.email,\n      user.organizationId,\n    );\n\n    if (!canInvite) {\n      throw new BadRequestException(\n        'Este email não pode ser convidado (usuário já pertence a uma organização ou já foi convidado)',\n      );\n    }\n\n    const invitation = await this.invitationService.createInvitation({\n      ...createInvitationDto,\n      organizationId: user.organizationId,\n      invitedById: user.id,\n    });\n\n    return {\n      id: invitation.id,\n      email: invitation.email,\n      role: invitation.role,\n      status: invitation.status,\n      invitedName: invitation.invitedName,\n      expiresAt: invitation.expiresAt,\n      createdAt: invitation.createdAt,\n      organization: invitation.organization,\n      invitedBy: invitation.invitedBy,\n    };\n  }\n\n  @Get()\n  @Roles(UserRole.ADMIN, UserRole.OWNER)\n  @ApiOperation({ summary: 'Listar convites da organização' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de convites',\n    type: [InvitationResponseDto],\n  })\n  async getInvitations(\n    @GetUser() user: any,\n    @Query('status') status?: string,\n  ): Promise<InvitationResponseDto[]> {\n    const invitations = await this.invitationService.getInvitationsByOrganization(\n      user.organizationId,\n      status,\n    );\n\n    return invitations.map(invitation => ({\n      id: invitation.id,\n      email: invitation.email,\n      role: invitation.role,\n      status: invitation.status,\n      invitedName: invitation.invitedName,\n      expiresAt: invitation.expiresAt,\n      createdAt: invitation.createdAt,\n      organization: invitation.organization,\n      invitedBy: invitation.invitedBy,\n    }));\n  }\n\n  @Get(':id/resend')\n  @Roles(UserRole.ADMIN, UserRole.OWNER)\n  @ApiOperation({ summary: 'Reenviar convite' })\n  @ApiResponse({\n    status: 200,\n    description: 'Convite reenviado com sucesso',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Convite não encontrado',\n  })\n  async resendInvitation(\n    @Param('id') invitationId: string,\n    @GetUser() user: any,\n  ): Promise<MessageResponseDto> {\n    await this.invitationService.resendInvitation(\n      invitationId,\n      user.organizationId,\n    );\n\n    return { message: 'Convite reenviado com sucesso' };\n  }\n\n  @Delete(':id')\n  @Roles(UserRole.ADMIN, UserRole.OWNER)\n  @ApiOperation({ summary: 'Cancelar convite' })\n  @ApiResponse({\n    status: 200,\n    description: 'Convite cancelado com sucesso',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Convite não encontrado',\n  })\n  async cancelInvitation(\n    @Param('id') invitationId: string,\n    @GetUser() user: any,\n  ): Promise<MessageResponseDto> {\n    await this.invitationService.cancelInvitation(\n      invitationId,\n      user.organizationId,\n    );\n\n    return { message: 'Convite cancelado com sucesso' };\n  }\n\n  @Get('validate/:token')\n  @ApiOperation({ summary: 'Validar token de convite' })\n  @ApiResponse({\n    status: 200,\n    description: 'Token válido',\n    type: ValidateInvitationResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Token inválido ou expirado',\n  })\n  async validateInvitation(\n    @Param('token') token: string,\n  ): Promise<ValidateInvitationResponseDto> {\n    const invitation = await this.invitationService.getInvitationByToken(token);\n\n    if (!invitation || invitation.status !== 'PENDING' || invitation.expiresAt < new Date()) {\n      return { valid: false };\n    }\n\n    return {\n      valid: true,\n      invitation: {\n        email: invitation.email,\n        role: invitation.role,\n        organizationName: invitation.organization.name,\n        inviterName: invitation.invitedBy.name || invitation.invitedBy.email,\n        expiresAt: invitation.expiresAt,\n      },\n    };\n  }\n\n  @Post('accept')\n  @ApiOperation({ summary: 'Aceitar convite' })\n  @ApiResponse({\n    status: 200,\n    description: 'Convite aceito com sucesso',\n    type: AcceptInvitationResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Token inválido ou dados incorretos',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Convite não encontrado',\n  })\n  async acceptInvitation(\n    @Body(ValidationPipe) acceptInvitationDto: AcceptInvitationDto,\n  ): Promise<AcceptInvitationResponseDto> {\n    // Validações básicas\n    if (!acceptInvitationDto.token || !acceptInvitationDto.name || !acceptInvitationDto.password) {\n      throw new BadRequestException('Token, nome e senha são obrigatórios');\n    }\n\n    if (acceptInvitationDto.password.length < 8) {\n      throw new BadRequestException('Senha deve ter pelo menos 8 caracteres');\n    }\n\n    if (acceptInvitationDto.name.trim().length < 2) {\n      throw new BadRequestException('Nome deve ter pelo menos 2 caracteres');\n    }\n\n    const result = await this.invitationService.acceptInvitation(acceptInvitationDto);\n\n    return {\n      message: 'Convite aceito com sucesso',\n      user: result.user,\n      organization: result.organization,\n    };\n  }\n\n  @Post('reject')\n  @ApiOperation({ summary: 'Rejeitar convite' })\n  @ApiResponse({\n    status: 200,\n    description: 'Convite rejeitado com sucesso',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Convite não encontrado',\n  })\n  async rejectInvitation(\n    @Body(ValidationPipe) rejectInvitationDto: RejectInvitationDto,\n  ): Promise<MessageResponseDto> {\n    await this.invitationService.rejectInvitation(rejectInvitationDto.token);\n\n    return { message: 'Convite rejeitado com sucesso' };\n  }\n\n  @Get('validate-email/:email')\n  @Roles(UserRole.ADMIN, UserRole.OWNER)\n  @ApiOperation({ summary: 'Validar se email pode ser convidado' })\n  @ApiResponse({\n    status: 200,\n    description: 'Resultado da validação',\n    type: ValidateEmailResponseDto,\n  })\n  async validateEmail(\n    @Param('email') email: string,\n    @GetUser() user: any,\n  ): Promise<ValidateEmailResponseDto> {\n    // Validar formato do email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return {\n        canInvite: false,\n        reason: 'Formato de email inválido',\n      };\n    }\n\n    const canInvite = await this.invitationService.validateInvitationEmail(\n      email,\n      user.organizationId,\n    );\n\n    return {\n      canInvite,\n      reason: canInvite\n        ? undefined\n        : 'Usuário já pertence a uma organização ou já foi convidado',\n    };\n  }\n\n  @Post('cleanup-expired')\n  @Roles(UserRole.ADMIN, UserRole.OWNER)\n  @ApiOperation({ summary: 'Limpar convites expirados (apenas para admins)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Convites expirados limpos',\n    type: CleanupExpiredResponseDto,\n  })\n  async cleanupExpiredInvitations(\n    @GetUser() user: any,\n  ): Promise<CleanupExpiredResponseDto> {\n    // Apenas owners podem executar limpeza\n    if (user.role !== UserRole.OWNER) {\n      throw new BadRequestException('Apenas owners podem executar esta ação');\n    }\n\n    const count = await this.invitationService.cleanupExpiredInvitations();\n\n    return {\n      message: 'Convites expirados limpos com sucesso',\n      count,\n    };\n  }\n}"],"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","ignoreList":[]}