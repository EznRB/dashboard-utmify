{"version":3,"names":["MetricsService","authMiddleware","ApiError","asyncHandler","logger","calculateMetricsSchema","cov_29a2eswkld","s","body","type","properties","campaignIds","items","description","startDate","format","endDate","response","success","data","roas","roi","cac","ltv","arpu","cpc","cpm","ctr","conversionRate","margin","dashboardSchema","querystring","totalRevenue","totalSpend","totalConversions","totalImpressions","totalClicks","kpis","trends","revenue","current","previous","change","spend","conversions","historySchema","groupBy","enum","default","required","date","metrics","impressions","clicks","compareSchema","period1Start","period1End","period2Start","period2End","period1","period2","comparison","percentage","exportSchema","requireAuth","request","reply","f","organizationRequired","parseDate","dateString","Date","isNaN","getTime","b","parseCampaignIds","campaignIdsString","undefined","split","map","id","trim","filter","length","metricsRoutes","app","metricsService","post","preHandler","schema","organizationId","organization","parsedStartDate","parsedEndDate","calculateMetricsOnDemand","info","toISOString","status","send","get","query","parsedCampaignIds","dashboardData","getDashboardMetrics","historyData","getMetricsHistory","parsedPeriod1Start","parsedPeriod1End","parsedPeriod2Start","parsedPeriod2End","comparisonData","compareMetrics","csvContent","exportMetricsToCSV","filename","header","message","user","role","parsedDate","aggregateDailyMetrics","triggeredBy"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\metrics.routes.ts"],"sourcesContent":["import type { FastifyInstance } from 'fastify'\nimport { MetricsService } from '@/services/metrics.service'\nimport { authMiddleware } from '@/middleware/auth.middleware'\nimport { ApiError, asyncHandler } from '@/utils/errors'\nimport { logger } from '@/utils/logger'\nimport type { Prisma } from '@prisma/client'\n\n// Schemas para validação\nconst calculateMetricsSchema = {\n  body: {\n    type: 'object',\n    properties: {\n      campaignIds: {\n        type: 'array',\n        items: { type: 'string' },\n        description: 'IDs das campanhas para calcular métricas'\n      },\n      startDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de início (YYYY-MM-DD)'\n      },\n      endDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim (YYYY-MM-DD)'\n      }\n    }\n  },\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        data: {\n          type: 'object',\n          properties: {\n            roas: { type: 'number' },\n            roi: { type: 'number' },\n            cac: { type: 'number' },\n            ltv: { type: 'number' },\n            arpu: { type: 'number' },\n            cpc: { type: 'number' },\n            cpm: { type: 'number' },\n            ctr: { type: 'number' },\n            conversionRate: { type: 'number' },\n            margin: { type: 'number' }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst dashboardSchema = {\n  querystring: {\n    type: 'object',\n    properties: {\n      campaignIds: {\n        type: 'string',\n        description: 'IDs das campanhas separados por vírgula'\n      },\n      startDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de início (YYYY-MM-DD)'\n      },\n      endDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim (YYYY-MM-DD)'\n      }\n    }\n  },\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        data: {\n          type: 'object',\n          properties: {\n            totalRevenue: { type: 'number' },\n            totalSpend: { type: 'number' },\n            totalConversions: { type: 'number' },\n            totalImpressions: { type: 'number' },\n            totalClicks: { type: 'number' },\n            kpis: {\n              type: 'object',\n              properties: {\n                roas: { type: 'number' },\n                roi: { type: 'number' },\n                cac: { type: 'number' },\n                ltv: { type: 'number' },\n                arpu: { type: 'number' },\n                cpc: { type: 'number' },\n                cpm: { type: 'number' },\n                ctr: { type: 'number' },\n                conversionRate: { type: 'number' },\n                margin: { type: 'number' }\n              }\n            },\n            trends: {\n              type: 'object',\n              properties: {\n                revenue: {\n                  type: 'object',\n                  properties: {\n                    current: { type: 'number' },\n                    previous: { type: 'number' },\n                    change: { type: 'number' }\n                  }\n                },\n                spend: {\n                  type: 'object',\n                  properties: {\n                    current: { type: 'number' },\n                    previous: { type: 'number' },\n                    change: { type: 'number' }\n                  }\n                },\n                roas: {\n                  type: 'object',\n                  properties: {\n                    current: { type: 'number' },\n                    previous: { type: 'number' },\n                    change: { type: 'number' }\n                  }\n                },\n                conversions: {\n                  type: 'object',\n                  properties: {\n                    current: { type: 'number' },\n                    previous: { type: 'number' },\n                    change: { type: 'number' }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst historySchema = {\n  querystring: {\n    type: 'object',\n    properties: {\n      startDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de início (YYYY-MM-DD)'\n      },\n      endDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim (YYYY-MM-DD)'\n      },\n      campaignIds: {\n        type: 'string',\n        description: 'IDs das campanhas separados por vírgula'\n      },\n      groupBy: {\n        type: 'string',\n        enum: ['day', 'week', 'month'],\n        default: 'day',\n        description: 'Agrupamento dos dados'\n      }\n    },\n    required: ['startDate', 'endDate']\n  },\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        data: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              date: { type: 'string' },\n              metrics: {\n                type: 'object',\n                properties: {\n                  impressions: { type: 'number' },\n                  clicks: { type: 'number' },\n                  conversions: { type: 'number' },\n                  spend: { type: 'number' },\n                  revenue: { type: 'number' },\n                  kpis: {\n                    type: 'object',\n                    properties: {\n                      roas: { type: 'number' },\n                      roi: { type: 'number' },\n                      cac: { type: 'number' },\n                      ltv: { type: 'number' },\n                      arpu: { type: 'number' },\n                      cpc: { type: 'number' },\n                      cpm: { type: 'number' },\n                      ctr: { type: 'number' },\n                      conversionRate: { type: 'number' },\n                      margin: { type: 'number' }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst compareSchema = {\n  querystring: {\n    type: 'object',\n    properties: {\n      period1Start: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de início do período 1 (YYYY-MM-DD)'\n      },\n      period1End: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim do período 1 (YYYY-MM-DD)'\n      },\n      period2Start: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de início do período 2 (YYYY-MM-DD)'\n      },\n      period2End: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim do período 2 (YYYY-MM-DD)'\n      },\n      campaignIds: {\n        type: 'string',\n        description: 'IDs das campanhas separados por vírgula'\n      }\n    },\n    required: ['period1Start', 'period1End', 'period2Start', 'period2End']\n  },\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        data: {\n          type: 'object',\n          properties: {\n            period1: {\n              type: 'object',\n              properties: {\n                startDate: { type: 'string' },\n                endDate: { type: 'string' },\n                metrics: { type: 'object' }\n              }\n            },\n            period2: {\n              type: 'object',\n              properties: {\n                startDate: { type: 'string' },\n                endDate: { type: 'string' },\n                metrics: { type: 'object' }\n              }\n            },\n            comparison: {\n              type: 'object',\n              properties: {\n                revenue: {\n                  type: 'object',\n                  properties: {\n                    change: { type: 'number' },\n                    percentage: { type: 'number' }\n                  }\n                },\n                spend: {\n                  type: 'object',\n                  properties: {\n                    change: { type: 'number' },\n                    percentage: { type: 'number' }\n                  }\n                },\n                roas: {\n                  type: 'object',\n                  properties: {\n                    change: { type: 'number' },\n                    percentage: { type: 'number' }\n                  }\n                },\n                conversions: {\n                  type: 'object',\n                  properties: {\n                    change: { type: 'number' },\n                    percentage: { type: 'number' }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst exportSchema = {\n  querystring: {\n    type: 'object',\n    properties: {\n      startDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de início (YYYY-MM-DD)'\n      },\n      endDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim (YYYY-MM-DD)'\n      },\n      campaignIds: {\n        type: 'string',\n        description: 'IDs das campanhas separados por vírgula'\n      },\n      format: {\n        type: 'string',\n        enum: ['csv'],\n        default: 'csv',\n        description: 'Formato de exportação'\n      }\n    },\n    required: ['startDate', 'endDate']\n  },\n  response: {\n    200: {\n      type: 'string',\n      description: 'Arquivo CSV com as métricas'\n    }\n  }\n}\n\n// Middleware de autenticação para métricas\nconst requireAuth = async (request: any, reply: any) => {\n  await authMiddleware(request, reply, {\n    required: true,\n    organizationRequired: true\n  })\n}\n\n// Helper para parsear datas\nfunction parseDate(dateString: string): Date {\n  const date = new Date(dateString + 'T00:00:00.000Z')\n  if (isNaN(date.getTime())) {\n    throw new ApiError('Invalid date format. Use YYYY-MM-DD', 'INVALID_DATE_FORMAT', 400)\n  }\n  return date\n}\n\n// Helper para parsear IDs de campanhas\nfunction parseCampaignIds(campaignIdsString?: string): string[] | undefined {\n  if (!campaignIdsString) return undefined\n  return campaignIdsString.split(',').map(id => id.trim()).filter(id => id.length > 0)\n}\n\n// Rotas de métricas\nexport async function metricsRoutes(app: FastifyInstance) {\n  const metricsService = new MetricsService(app)\n\n  // POST /api/v1/metrics/calculate - Calcular métricas sob demanda\n  app.post(\n    '/calculate',\n    {\n      preHandler: requireAuth,\n      schema: calculateMetricsSchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { campaignIds, startDate, endDate } = request.body\n      const organizationId = request.organization.id\n\n      const parsedStartDate = startDate ? parseDate(startDate) : undefined\n      const parsedEndDate = endDate ? parseDate(endDate) : undefined\n\n      const kpis = await metricsService.calculateMetricsOnDemand(\n        organizationId,\n        campaignIds,\n        parsedStartDate,\n        parsedEndDate\n      )\n\n      logger.info('Metrics calculated on demand', {\n        organizationId,\n        campaignIds: campaignIds?.length || 0,\n        startDate: parsedStartDate?.toISOString(),\n        endDate: parsedEndDate?.toISOString()\n      })\n\n      return reply.status(200).send({\n        success: true,\n        data: kpis\n      })\n    })\n  )\n\n  // GET /api/v1/metrics/dashboard - Obter dados do dashboard\n  app.get(\n    '/dashboard',\n    {\n      preHandler: requireAuth,\n      schema: dashboardSchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { campaignIds, startDate, endDate } = request.query\n      const organizationId = request.organization.id\n\n      const parsedCampaignIds = parseCampaignIds(campaignIds)\n      const parsedStartDate = startDate ? parseDate(startDate) : undefined\n      const parsedEndDate = endDate ? parseDate(endDate) : undefined\n\n      const dashboardData = await metricsService.getDashboardMetrics(\n        organizationId,\n        parsedCampaignIds,\n        parsedStartDate,\n        parsedEndDate\n      )\n\n      return reply.status(200).send({\n        success: true,\n        data: dashboardData\n      })\n    })\n  )\n\n  // GET /api/v1/metrics/history - Obter histórico de métricas\n  app.get(\n    '/history',\n    {\n      preHandler: requireAuth,\n      schema: historySchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { startDate, endDate, campaignIds, groupBy = 'day' } = request.query\n      const organizationId = request.organization.id\n\n      const parsedStartDate = parseDate(startDate)\n      const parsedEndDate = parseDate(endDate)\n      const parsedCampaignIds = parseCampaignIds(campaignIds)\n\n      const historyData = await metricsService.getMetricsHistory(\n        organizationId,\n        parsedStartDate,\n        parsedEndDate,\n        parsedCampaignIds,\n        groupBy as 'day' | 'week' | 'month'\n      )\n\n      return reply.status(200).send({\n        success: true,\n        data: historyData\n      })\n    })\n  )\n\n  // GET /api/v1/metrics/compare - Comparar métricas entre períodos\n  app.get(\n    '/compare',\n    {\n      preHandler: requireAuth,\n      schema: compareSchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const {\n        period1Start,\n        period1End,\n        period2Start,\n        period2End,\n        campaignIds\n      } = request.query\n      const organizationId = request.organization.id\n\n      const parsedPeriod1Start = parseDate(period1Start)\n      const parsedPeriod1End = parseDate(period1End)\n      const parsedPeriod2Start = parseDate(period2Start)\n      const parsedPeriod2End = parseDate(period2End)\n      const parsedCampaignIds = parseCampaignIds(campaignIds)\n\n      const comparisonData = await metricsService.compareMetrics(\n        organizationId,\n        parsedPeriod1Start,\n        parsedPeriod1End,\n        parsedPeriod2Start,\n        parsedPeriod2End,\n        parsedCampaignIds\n      )\n\n      return reply.status(200).send({\n        success: true,\n        data: comparisonData\n      })\n    })\n  )\n\n  // GET /api/v1/metrics/export - Exportar métricas\n  app.get(\n    '/export',\n    {\n      preHandler: requireAuth,\n      schema: exportSchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { startDate, endDate, campaignIds, format = 'csv' } = request.query\n      const organizationId = request.organization.id\n\n      const parsedStartDate = parseDate(startDate)\n      const parsedEndDate = parseDate(endDate)\n      const parsedCampaignIds = parseCampaignIds(campaignIds)\n\n      if (format !== 'csv') {\n        throw new ApiError('Only CSV format is supported', 'UNSUPPORTED_FORMAT', 400)\n      }\n\n      const csvContent = await metricsService.exportMetricsToCSV(\n        organizationId,\n        parsedStartDate,\n        parsedEndDate,\n        parsedCampaignIds\n      )\n\n      const filename = `metrics_${startDate}_${endDate}.csv`\n      \n      reply.header('Content-Type', 'text/csv')\n      reply.header('Content-Disposition', `attachment; filename=\"${filename}\"`)\n      \n      logger.info('Metrics exported', {\n        organizationId,\n        startDate,\n        endDate,\n        campaignIds: parsedCampaignIds?.length || 0,\n        format\n      })\n\n      return reply.status(200).send(csvContent)\n    })\n  )\n\n  // POST /api/v1/metrics/aggregate - Endpoint interno para agregação manual\n  app.post(\n    '/aggregate',\n    {\n      preHandler: requireAuth,\n      schema: {\n        body: {\n          type: 'object',\n          properties: {\n            date: {\n              type: 'string',\n              format: 'date',\n              description: 'Data para agregação (YYYY-MM-DD)'\n            }\n          },\n          required: ['date']\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' }\n            }\n          }\n        }\n      }\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { date } = request.body\n      const organizationId = request.organization.id\n      \n      // Verificar se o usuário tem permissão de admin\n      if (request.user.role !== 'ADMIN' && request.user.role !== 'OWNER') {\n        throw new ApiError('Insufficient permissions', 'INSUFFICIENT_PERMISSIONS', 403)\n      }\n\n      const parsedDate = parseDate(date)\n      \n      await metricsService.aggregateDailyMetrics(parsedDate, organizationId)\n\n      logger.info('Manual metrics aggregation completed', {\n        organizationId,\n        date: parsedDate.toISOString(),\n        triggeredBy: request.user.id\n      })\n\n      return reply.status(200).send({\n        success: true,\n        message: `Metrics aggregated successfully for ${date}`\n      })\n    })\n  )\n}"],"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","ignoreList":[]}