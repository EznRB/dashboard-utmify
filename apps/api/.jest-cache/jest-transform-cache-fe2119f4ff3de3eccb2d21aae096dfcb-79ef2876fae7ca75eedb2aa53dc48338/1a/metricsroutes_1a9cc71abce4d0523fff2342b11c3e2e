84f43bc6825a9c6459041b4bbf882ed5
/* istanbul ignore next */
function cov_29a2eswkld() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\metrics.routes.ts";
  var hash = "72d3b1def603539bae95815db1e390bbfc9ff3be";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\metrics.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 31
        },
        end: {
          line: 50,
          column: 1
        }
      },
      "1": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 141,
          column: 1
        }
      },
      "2": {
        start: {
          line: 142,
          column: 22
        },
        end: {
          line: 211,
          column: 1
        }
      },
      "3": {
        start: {
          line: 212,
          column: 22
        },
        end: {
          line: 305,
          column: 1
        }
      },
      "4": {
        start: {
          line: 306,
          column: 21
        },
        end: {
          line: 339,
          column: 1
        }
      },
      "5": {
        start: {
          line: 341,
          column: 20
        },
        end: {
          line: 346,
          column: 1
        }
      },
      "6": {
        start: {
          line: 342,
          column: 4
        },
        end: {
          line: 345,
          column: 7
        }
      },
      "7": {
        start: {
          line: 349,
          column: 17
        },
        end: {
          line: 349,
          column: 56
        }
      },
      "8": {
        start: {
          line: 350,
          column: 4
        },
        end: {
          line: 352,
          column: 5
        }
      },
      "9": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 351,
          column: 94
        }
      },
      "10": {
        start: {
          line: 353,
          column: 4
        },
        end: {
          line: 353,
          column: 16
        }
      },
      "11": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "12": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "13": {
        start: {
          line: 359,
          column: 4
        },
        end: {
          line: 359,
          column: 89
        }
      },
      "14": {
        start: {
          line: 359,
          column: 50
        },
        end: {
          line: 359,
          column: 59
        }
      },
      "15": {
        start: {
          line: 359,
          column: 74
        },
        end: {
          line: 359,
          column: 87
        }
      },
      "16": {
        start: {
          line: 363,
          column: 27
        },
        end: {
          line: 363,
          column: 50
        }
      },
      "17": {
        start: {
          line: 365,
          column: 4
        },
        end: {
          line: 384,
          column: 8
        }
      },
      "18": {
        start: {
          line: 369,
          column: 52
        },
        end: {
          line: 369,
          column: 64
        }
      },
      "19": {
        start: {
          line: 370,
          column: 31
        },
        end: {
          line: 370,
          column: 54
        }
      },
      "20": {
        start: {
          line: 371,
          column: 32
        },
        end: {
          line: 371,
          column: 76
        }
      },
      "21": {
        start: {
          line: 372,
          column: 30
        },
        end: {
          line: 372,
          column: 70
        }
      },
      "22": {
        start: {
          line: 373,
          column: 21
        },
        end: {
          line: 373,
          column: 127
        }
      },
      "23": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 379,
          column: 11
        }
      },
      "24": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 383,
          column: 11
        }
      },
      "25": {
        start: {
          line: 386,
          column: 4
        },
        end: {
          line: 400,
          column: 8
        }
      },
      "26": {
        start: {
          line: 390,
          column: 52
        },
        end: {
          line: 390,
          column: 65
        }
      },
      "27": {
        start: {
          line: 391,
          column: 31
        },
        end: {
          line: 391,
          column: 54
        }
      },
      "28": {
        start: {
          line: 392,
          column: 34
        },
        end: {
          line: 392,
          column: 63
        }
      },
      "29": {
        start: {
          line: 393,
          column: 32
        },
        end: {
          line: 393,
          column: 76
        }
      },
      "30": {
        start: {
          line: 394,
          column: 30
        },
        end: {
          line: 394,
          column: 70
        }
      },
      "31": {
        start: {
          line: 395,
          column: 30
        },
        end: {
          line: 395,
          column: 137
        }
      },
      "32": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 399,
          column: 11
        }
      },
      "33": {
        start: {
          line: 402,
          column: 4
        },
        end: {
          line: 416,
          column: 8
        }
      },
      "34": {
        start: {
          line: 406,
          column: 69
        },
        end: {
          line: 406,
          column: 82
        }
      },
      "35": {
        start: {
          line: 407,
          column: 31
        },
        end: {
          line: 407,
          column: 54
        }
      },
      "36": {
        start: {
          line: 408,
          column: 32
        },
        end: {
          line: 408,
          column: 52
        }
      },
      "37": {
        start: {
          line: 409,
          column: 30
        },
        end: {
          line: 409,
          column: 48
        }
      },
      "38": {
        start: {
          line: 410,
          column: 34
        },
        end: {
          line: 410,
          column: 63
        }
      },
      "39": {
        start: {
          line: 411,
          column: 28
        },
        end: {
          line: 411,
          column: 142
        }
      },
      "40": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 415,
          column: 11
        }
      },
      "41": {
        start: {
          line: 418,
          column: 4
        },
        end: {
          line: 434,
          column: 8
        }
      },
      "42": {
        start: {
          line: 422,
          column: 84
        },
        end: {
          line: 422,
          column: 97
        }
      },
      "43": {
        start: {
          line: 423,
          column: 31
        },
        end: {
          line: 423,
          column: 54
        }
      },
      "44": {
        start: {
          line: 424,
          column: 35
        },
        end: {
          line: 424,
          column: 58
        }
      },
      "45": {
        start: {
          line: 425,
          column: 33
        },
        end: {
          line: 425,
          column: 54
        }
      },
      "46": {
        start: {
          line: 426,
          column: 35
        },
        end: {
          line: 426,
          column: 58
        }
      },
      "47": {
        start: {
          line: 427,
          column: 33
        },
        end: {
          line: 427,
          column: 54
        }
      },
      "48": {
        start: {
          line: 428,
          column: 34
        },
        end: {
          line: 428,
          column: 63
        }
      },
      "49": {
        start: {
          line: 429,
          column: 31
        },
        end: {
          line: 429,
          column: 177
        }
      },
      "50": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 433,
          column: 11
        }
      },
      "51": {
        start: {
          line: 436,
          column: 4
        },
        end: {
          line: 460,
          column: 8
        }
      },
      "52": {
        start: {
          line: 440,
          column: 68
        },
        end: {
          line: 440,
          column: 81
        }
      },
      "53": {
        start: {
          line: 441,
          column: 31
        },
        end: {
          line: 441,
          column: 54
        }
      },
      "54": {
        start: {
          line: 442,
          column: 32
        },
        end: {
          line: 442,
          column: 52
        }
      },
      "55": {
        start: {
          line: 443,
          column: 30
        },
        end: {
          line: 443,
          column: 48
        }
      },
      "56": {
        start: {
          line: 444,
          column: 34
        },
        end: {
          line: 444,
          column: 63
        }
      },
      "57": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "58": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 90
        }
      },
      "59": {
        start: {
          line: 448,
          column: 27
        },
        end: {
          line: 448,
          column: 133
        }
      },
      "60": {
        start: {
          line: 449,
          column: 25
        },
        end: {
          line: 449,
          column: 62
        }
      },
      "61": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 49
        }
      },
      "62": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 82
        }
      },
      "63": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 458,
          column: 11
        }
      },
      "64": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 459,
          column: 50
        }
      },
      "65": {
        start: {
          line: 462,
          column: 4
        },
        end: {
          line: 504,
          column: 8
        }
      },
      "66": {
        start: {
          line: 487,
          column: 25
        },
        end: {
          line: 487,
          column: 37
        }
      },
      "67": {
        start: {
          line: 488,
          column: 31
        },
        end: {
          line: 488,
          column: 54
        }
      },
      "68": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 492,
          column: 9
        }
      },
      "69": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 491,
          column: 92
        }
      },
      "70": {
        start: {
          line: 493,
          column: 27
        },
        end: {
          line: 493,
          column: 42
        }
      },
      "71": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 494,
          column: 79
        }
      },
      "72": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 499,
          column: 11
        }
      },
      "73": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 503,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 341,
            column: 20
          },
          end: {
            line: 341,
            column: 21
          }
        },
        loc: {
          start: {
            line: 341,
            column: 46
          },
          end: {
            line: 346,
            column: 1
          }
        },
        line: 341
      },
      "1": {
        name: "parseDate",
        decl: {
          start: {
            line: 348,
            column: 9
          },
          end: {
            line: 348,
            column: 18
          }
        },
        loc: {
          start: {
            line: 348,
            column: 31
          },
          end: {
            line: 354,
            column: 1
          }
        },
        line: 348
      },
      "2": {
        name: "parseCampaignIds",
        decl: {
          start: {
            line: 356,
            column: 9
          },
          end: {
            line: 356,
            column: 25
          }
        },
        loc: {
          start: {
            line: 356,
            column: 45
          },
          end: {
            line: 360,
            column: 1
          }
        },
        line: 356
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 359,
            column: 44
          },
          end: {
            line: 359,
            column: 45
          }
        },
        loc: {
          start: {
            line: 359,
            column: 50
          },
          end: {
            line: 359,
            column: 59
          }
        },
        line: 359
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 359,
            column: 68
          },
          end: {
            line: 359,
            column: 69
          }
        },
        loc: {
          start: {
            line: 359,
            column: 74
          },
          end: {
            line: 359,
            column: 87
          }
        },
        line: 359
      },
      "5": {
        name: "metricsRoutes",
        decl: {
          start: {
            line: 362,
            column: 22
          },
          end: {
            line: 362,
            column: 35
          }
        },
        loc: {
          start: {
            line: 362,
            column: 41
          },
          end: {
            line: 505,
            column: 1
          }
        },
        line: 362
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 368,
            column: 20
          },
          end: {
            line: 368,
            column: 21
          }
        },
        loc: {
          start: {
            line: 368,
            column: 46
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 368
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 389,
            column: 20
          },
          end: {
            line: 389,
            column: 21
          }
        },
        loc: {
          start: {
            line: 389,
            column: 46
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 389
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 405,
            column: 20
          },
          end: {
            line: 405,
            column: 21
          }
        },
        loc: {
          start: {
            line: 405,
            column: 46
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 405
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 421,
            column: 20
          },
          end: {
            line: 421,
            column: 21
          }
        },
        loc: {
          start: {
            line: 421,
            column: 46
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 421
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 439,
            column: 20
          },
          end: {
            line: 439,
            column: 21
          }
        },
        loc: {
          start: {
            line: 439,
            column: 46
          },
          end: {
            line: 460,
            column: 5
          }
        },
        line: 439
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 486,
            column: 20
          },
          end: {
            line: 486,
            column: 21
          }
        },
        loc: {
          start: {
            line: 486,
            column: 46
          },
          end: {
            line: 504,
            column: 5
          }
        },
        line: 486
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "1": {
        loc: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 358,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 358,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "2": {
        loc: {
          start: {
            line: 371,
            column: 32
          },
          end: {
            line: 371,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 371,
            column: 44
          },
          end: {
            line: 371,
            column: 64
          }
        }, {
          start: {
            line: 371,
            column: 67
          },
          end: {
            line: 371,
            column: 76
          }
        }],
        line: 371
      },
      "3": {
        loc: {
          start: {
            line: 372,
            column: 30
          },
          end: {
            line: 372,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 372,
            column: 40
          },
          end: {
            line: 372,
            column: 58
          }
        }, {
          start: {
            line: 372,
            column: 61
          },
          end: {
            line: 372,
            column: 70
          }
        }],
        line: 372
      },
      "4": {
        loc: {
          start: {
            line: 376,
            column: 25
          },
          end: {
            line: 376,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 376,
            column: 25
          },
          end: {
            line: 376,
            column: 44
          }
        }, {
          start: {
            line: 376,
            column: 48
          },
          end: {
            line: 376,
            column: 49
          }
        }],
        line: 376
      },
      "5": {
        loc: {
          start: {
            line: 393,
            column: 32
          },
          end: {
            line: 393,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 393,
            column: 44
          },
          end: {
            line: 393,
            column: 64
          }
        }, {
          start: {
            line: 393,
            column: 67
          },
          end: {
            line: 393,
            column: 76
          }
        }],
        line: 393
      },
      "6": {
        loc: {
          start: {
            line: 394,
            column: 30
          },
          end: {
            line: 394,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 394,
            column: 40
          },
          end: {
            line: 394,
            column: 58
          }
        }, {
          start: {
            line: 394,
            column: 61
          },
          end: {
            line: 394,
            column: 70
          }
        }],
        line: 394
      },
      "7": {
        loc: {
          start: {
            line: 406,
            column: 49
          },
          end: {
            line: 406,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 406,
            column: 59
          },
          end: {
            line: 406,
            column: 64
          }
        }],
        line: 406
      },
      "8": {
        loc: {
          start: {
            line: 440,
            column: 49
          },
          end: {
            line: 440,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 440,
            column: 58
          },
          end: {
            line: 440,
            column: 63
          }
        }],
        line: 440
      },
      "9": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "10": {
        loc: {
          start: {
            line: 456,
            column: 25
          },
          end: {
            line: 456,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 456,
            column: 25
          },
          end: {
            line: 456,
            column: 50
          }
        }, {
          start: {
            line: 456,
            column: 54
          },
          end: {
            line: 456,
            column: 55
          }
        }],
        line: 456
      },
      "11": {
        loc: {
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 490
      },
      "12": {
        loc: {
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 490,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 490,
            column: 41
          }
        }, {
          start: {
            line: 490,
            column: 45
          },
          end: {
            line: 490,
            column: 74
          }
        }],
        line: 490
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\metrics.routes.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\metrics.routes.ts"],
      sourcesContent: ["import type { FastifyInstance } from 'fastify'\nimport { MetricsService } from '@/services/metrics.service'\nimport { authMiddleware } from '@/middleware/auth.middleware'\nimport { ApiError, asyncHandler } from '@/utils/errors'\nimport { logger } from '@/utils/logger'\nimport type { Prisma } from '@prisma/client'\n\n// Schemas para valida\xE7\xE3o\nconst calculateMetricsSchema = {\n  body: {\n    type: 'object',\n    properties: {\n      campaignIds: {\n        type: 'array',\n        items: { type: 'string' },\n        description: 'IDs das campanhas para calcular m\xE9tricas'\n      },\n      startDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de in\xEDcio (YYYY-MM-DD)'\n      },\n      endDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim (YYYY-MM-DD)'\n      }\n    }\n  },\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        data: {\n          type: 'object',\n          properties: {\n            roas: { type: 'number' },\n            roi: { type: 'number' },\n            cac: { type: 'number' },\n            ltv: { type: 'number' },\n            arpu: { type: 'number' },\n            cpc: { type: 'number' },\n            cpm: { type: 'number' },\n            ctr: { type: 'number' },\n            conversionRate: { type: 'number' },\n            margin: { type: 'number' }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst dashboardSchema = {\n  querystring: {\n    type: 'object',\n    properties: {\n      campaignIds: {\n        type: 'string',\n        description: 'IDs das campanhas separados por v\xEDrgula'\n      },\n      startDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de in\xEDcio (YYYY-MM-DD)'\n      },\n      endDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim (YYYY-MM-DD)'\n      }\n    }\n  },\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        data: {\n          type: 'object',\n          properties: {\n            totalRevenue: { type: 'number' },\n            totalSpend: { type: 'number' },\n            totalConversions: { type: 'number' },\n            totalImpressions: { type: 'number' },\n            totalClicks: { type: 'number' },\n            kpis: {\n              type: 'object',\n              properties: {\n                roas: { type: 'number' },\n                roi: { type: 'number' },\n                cac: { type: 'number' },\n                ltv: { type: 'number' },\n                arpu: { type: 'number' },\n                cpc: { type: 'number' },\n                cpm: { type: 'number' },\n                ctr: { type: 'number' },\n                conversionRate: { type: 'number' },\n                margin: { type: 'number' }\n              }\n            },\n            trends: {\n              type: 'object',\n              properties: {\n                revenue: {\n                  type: 'object',\n                  properties: {\n                    current: { type: 'number' },\n                    previous: { type: 'number' },\n                    change: { type: 'number' }\n                  }\n                },\n                spend: {\n                  type: 'object',\n                  properties: {\n                    current: { type: 'number' },\n                    previous: { type: 'number' },\n                    change: { type: 'number' }\n                  }\n                },\n                roas: {\n                  type: 'object',\n                  properties: {\n                    current: { type: 'number' },\n                    previous: { type: 'number' },\n                    change: { type: 'number' }\n                  }\n                },\n                conversions: {\n                  type: 'object',\n                  properties: {\n                    current: { type: 'number' },\n                    previous: { type: 'number' },\n                    change: { type: 'number' }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst historySchema = {\n  querystring: {\n    type: 'object',\n    properties: {\n      startDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de in\xEDcio (YYYY-MM-DD)'\n      },\n      endDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim (YYYY-MM-DD)'\n      },\n      campaignIds: {\n        type: 'string',\n        description: 'IDs das campanhas separados por v\xEDrgula'\n      },\n      groupBy: {\n        type: 'string',\n        enum: ['day', 'week', 'month'],\n        default: 'day',\n        description: 'Agrupamento dos dados'\n      }\n    },\n    required: ['startDate', 'endDate']\n  },\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        data: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              date: { type: 'string' },\n              metrics: {\n                type: 'object',\n                properties: {\n                  impressions: { type: 'number' },\n                  clicks: { type: 'number' },\n                  conversions: { type: 'number' },\n                  spend: { type: 'number' },\n                  revenue: { type: 'number' },\n                  kpis: {\n                    type: 'object',\n                    properties: {\n                      roas: { type: 'number' },\n                      roi: { type: 'number' },\n                      cac: { type: 'number' },\n                      ltv: { type: 'number' },\n                      arpu: { type: 'number' },\n                      cpc: { type: 'number' },\n                      cpm: { type: 'number' },\n                      ctr: { type: 'number' },\n                      conversionRate: { type: 'number' },\n                      margin: { type: 'number' }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst compareSchema = {\n  querystring: {\n    type: 'object',\n    properties: {\n      period1Start: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de in\xEDcio do per\xEDodo 1 (YYYY-MM-DD)'\n      },\n      period1End: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim do per\xEDodo 1 (YYYY-MM-DD)'\n      },\n      period2Start: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de in\xEDcio do per\xEDodo 2 (YYYY-MM-DD)'\n      },\n      period2End: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim do per\xEDodo 2 (YYYY-MM-DD)'\n      },\n      campaignIds: {\n        type: 'string',\n        description: 'IDs das campanhas separados por v\xEDrgula'\n      }\n    },\n    required: ['period1Start', 'period1End', 'period2Start', 'period2End']\n  },\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        data: {\n          type: 'object',\n          properties: {\n            period1: {\n              type: 'object',\n              properties: {\n                startDate: { type: 'string' },\n                endDate: { type: 'string' },\n                metrics: { type: 'object' }\n              }\n            },\n            period2: {\n              type: 'object',\n              properties: {\n                startDate: { type: 'string' },\n                endDate: { type: 'string' },\n                metrics: { type: 'object' }\n              }\n            },\n            comparison: {\n              type: 'object',\n              properties: {\n                revenue: {\n                  type: 'object',\n                  properties: {\n                    change: { type: 'number' },\n                    percentage: { type: 'number' }\n                  }\n                },\n                spend: {\n                  type: 'object',\n                  properties: {\n                    change: { type: 'number' },\n                    percentage: { type: 'number' }\n                  }\n                },\n                roas: {\n                  type: 'object',\n                  properties: {\n                    change: { type: 'number' },\n                    percentage: { type: 'number' }\n                  }\n                },\n                conversions: {\n                  type: 'object',\n                  properties: {\n                    change: { type: 'number' },\n                    percentage: { type: 'number' }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst exportSchema = {\n  querystring: {\n    type: 'object',\n    properties: {\n      startDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de in\xEDcio (YYYY-MM-DD)'\n      },\n      endDate: {\n        type: 'string',\n        format: 'date',\n        description: 'Data de fim (YYYY-MM-DD)'\n      },\n      campaignIds: {\n        type: 'string',\n        description: 'IDs das campanhas separados por v\xEDrgula'\n      },\n      format: {\n        type: 'string',\n        enum: ['csv'],\n        default: 'csv',\n        description: 'Formato de exporta\xE7\xE3o'\n      }\n    },\n    required: ['startDate', 'endDate']\n  },\n  response: {\n    200: {\n      type: 'string',\n      description: 'Arquivo CSV com as m\xE9tricas'\n    }\n  }\n}\n\n// Middleware de autentica\xE7\xE3o para m\xE9tricas\nconst requireAuth = async (request: any, reply: any) => {\n  await authMiddleware(request, reply, {\n    required: true,\n    organizationRequired: true\n  })\n}\n\n// Helper para parsear datas\nfunction parseDate(dateString: string): Date {\n  const date = new Date(dateString + 'T00:00:00.000Z')\n  if (isNaN(date.getTime())) {\n    throw new ApiError('Invalid date format. Use YYYY-MM-DD', 'INVALID_DATE_FORMAT', 400)\n  }\n  return date\n}\n\n// Helper para parsear IDs de campanhas\nfunction parseCampaignIds(campaignIdsString?: string): string[] | undefined {\n  if (!campaignIdsString) return undefined\n  return campaignIdsString.split(',').map(id => id.trim()).filter(id => id.length > 0)\n}\n\n// Rotas de m\xE9tricas\nexport async function metricsRoutes(app: FastifyInstance) {\n  const metricsService = new MetricsService(app)\n\n  // POST /api/v1/metrics/calculate - Calcular m\xE9tricas sob demanda\n  app.post(\n    '/calculate',\n    {\n      preHandler: requireAuth,\n      schema: calculateMetricsSchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { campaignIds, startDate, endDate } = request.body\n      const organizationId = request.organization.id\n\n      const parsedStartDate = startDate ? parseDate(startDate) : undefined\n      const parsedEndDate = endDate ? parseDate(endDate) : undefined\n\n      const kpis = await metricsService.calculateMetricsOnDemand(\n        organizationId,\n        campaignIds,\n        parsedStartDate,\n        parsedEndDate\n      )\n\n      logger.info('Metrics calculated on demand', {\n        organizationId,\n        campaignIds: campaignIds?.length || 0,\n        startDate: parsedStartDate?.toISOString(),\n        endDate: parsedEndDate?.toISOString()\n      })\n\n      return reply.status(200).send({\n        success: true,\n        data: kpis\n      })\n    })\n  )\n\n  // GET /api/v1/metrics/dashboard - Obter dados do dashboard\n  app.get(\n    '/dashboard',\n    {\n      preHandler: requireAuth,\n      schema: dashboardSchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { campaignIds, startDate, endDate } = request.query\n      const organizationId = request.organization.id\n\n      const parsedCampaignIds = parseCampaignIds(campaignIds)\n      const parsedStartDate = startDate ? parseDate(startDate) : undefined\n      const parsedEndDate = endDate ? parseDate(endDate) : undefined\n\n      const dashboardData = await metricsService.getDashboardMetrics(\n        organizationId,\n        parsedCampaignIds,\n        parsedStartDate,\n        parsedEndDate\n      )\n\n      return reply.status(200).send({\n        success: true,\n        data: dashboardData\n      })\n    })\n  )\n\n  // GET /api/v1/metrics/history - Obter hist\xF3rico de m\xE9tricas\n  app.get(\n    '/history',\n    {\n      preHandler: requireAuth,\n      schema: historySchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { startDate, endDate, campaignIds, groupBy = 'day' } = request.query\n      const organizationId = request.organization.id\n\n      const parsedStartDate = parseDate(startDate)\n      const parsedEndDate = parseDate(endDate)\n      const parsedCampaignIds = parseCampaignIds(campaignIds)\n\n      const historyData = await metricsService.getMetricsHistory(\n        organizationId,\n        parsedStartDate,\n        parsedEndDate,\n        parsedCampaignIds,\n        groupBy as 'day' | 'week' | 'month'\n      )\n\n      return reply.status(200).send({\n        success: true,\n        data: historyData\n      })\n    })\n  )\n\n  // GET /api/v1/metrics/compare - Comparar m\xE9tricas entre per\xEDodos\n  app.get(\n    '/compare',\n    {\n      preHandler: requireAuth,\n      schema: compareSchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const {\n        period1Start,\n        period1End,\n        period2Start,\n        period2End,\n        campaignIds\n      } = request.query\n      const organizationId = request.organization.id\n\n      const parsedPeriod1Start = parseDate(period1Start)\n      const parsedPeriod1End = parseDate(period1End)\n      const parsedPeriod2Start = parseDate(period2Start)\n      const parsedPeriod2End = parseDate(period2End)\n      const parsedCampaignIds = parseCampaignIds(campaignIds)\n\n      const comparisonData = await metricsService.compareMetrics(\n        organizationId,\n        parsedPeriod1Start,\n        parsedPeriod1End,\n        parsedPeriod2Start,\n        parsedPeriod2End,\n        parsedCampaignIds\n      )\n\n      return reply.status(200).send({\n        success: true,\n        data: comparisonData\n      })\n    })\n  )\n\n  // GET /api/v1/metrics/export - Exportar m\xE9tricas\n  app.get(\n    '/export',\n    {\n      preHandler: requireAuth,\n      schema: exportSchema\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { startDate, endDate, campaignIds, format = 'csv' } = request.query\n      const organizationId = request.organization.id\n\n      const parsedStartDate = parseDate(startDate)\n      const parsedEndDate = parseDate(endDate)\n      const parsedCampaignIds = parseCampaignIds(campaignIds)\n\n      if (format !== 'csv') {\n        throw new ApiError('Only CSV format is supported', 'UNSUPPORTED_FORMAT', 400)\n      }\n\n      const csvContent = await metricsService.exportMetricsToCSV(\n        organizationId,\n        parsedStartDate,\n        parsedEndDate,\n        parsedCampaignIds\n      )\n\n      const filename = `metrics_${startDate}_${endDate}.csv`\n      \n      reply.header('Content-Type', 'text/csv')\n      reply.header('Content-Disposition', `attachment; filename=\"${filename}\"`)\n      \n      logger.info('Metrics exported', {\n        organizationId,\n        startDate,\n        endDate,\n        campaignIds: parsedCampaignIds?.length || 0,\n        format\n      })\n\n      return reply.status(200).send(csvContent)\n    })\n  )\n\n  // POST /api/v1/metrics/aggregate - Endpoint interno para agrega\xE7\xE3o manual\n  app.post(\n    '/aggregate',\n    {\n      preHandler: requireAuth,\n      schema: {\n        body: {\n          type: 'object',\n          properties: {\n            date: {\n              type: 'string',\n              format: 'date',\n              description: 'Data para agrega\xE7\xE3o (YYYY-MM-DD)'\n            }\n          },\n          required: ['date']\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              message: { type: 'string' }\n            }\n          }\n        }\n      }\n    },\n    asyncHandler(async (request: any, reply) => {\n      const { date } = request.body\n      const organizationId = request.organization.id\n      \n      // Verificar se o usu\xE1rio tem permiss\xE3o de admin\n      if (request.user.role !== 'ADMIN' && request.user.role !== 'OWNER') {\n        throw new ApiError('Insufficient permissions', 'INSUFFICIENT_PERMISSIONS', 403)\n      }\n\n      const parsedDate = parseDate(date)\n      \n      await metricsService.aggregateDailyMetrics(parsedDate, organizationId)\n\n      logger.info('Manual metrics aggregation completed', {\n        organizationId,\n        date: parsedDate.toISOString(),\n        triggeredBy: request.user.id\n      })\n\n      return reply.status(200).send({\n        success: true,\n        message: `Metrics aggregated successfully for ${date}`\n      })\n    })\n  )\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "72d3b1def603539bae95815db1e390bbfc9ff3be"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29a2eswkld = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29a2eswkld();
import { MetricsService } from '@/services/metrics.service';
import { authMiddleware } from '@/middleware/auth.middleware';
import { ApiError, asyncHandler } from '@/utils/errors';
import { logger } from '@/utils/logger';
// Schemas para validação
const calculateMetricsSchema =
/* istanbul ignore next */
(cov_29a2eswkld().s[0]++, {
  body: {
    type: 'object',
    properties: {
      campaignIds: {
        type: 'array',
        items: {
          type: 'string'
        },
        description: 'IDs das campanhas para calcular métricas'
      },
      startDate: {
        type: 'string',
        format: 'date',
        description: 'Data de início (YYYY-MM-DD)'
      },
      endDate: {
        type: 'string',
        format: 'date',
        description: 'Data de fim (YYYY-MM-DD)'
      }
    }
  },
  response: {
    200: {
      type: 'object',
      properties: {
        success: {
          type: 'boolean'
        },
        data: {
          type: 'object',
          properties: {
            roas: {
              type: 'number'
            },
            roi: {
              type: 'number'
            },
            cac: {
              type: 'number'
            },
            ltv: {
              type: 'number'
            },
            arpu: {
              type: 'number'
            },
            cpc: {
              type: 'number'
            },
            cpm: {
              type: 'number'
            },
            ctr: {
              type: 'number'
            },
            conversionRate: {
              type: 'number'
            },
            margin: {
              type: 'number'
            }
          }
        }
      }
    }
  }
});
const dashboardSchema =
/* istanbul ignore next */
(cov_29a2eswkld().s[1]++, {
  querystring: {
    type: 'object',
    properties: {
      campaignIds: {
        type: 'string',
        description: 'IDs das campanhas separados por vírgula'
      },
      startDate: {
        type: 'string',
        format: 'date',
        description: 'Data de início (YYYY-MM-DD)'
      },
      endDate: {
        type: 'string',
        format: 'date',
        description: 'Data de fim (YYYY-MM-DD)'
      }
    }
  },
  response: {
    200: {
      type: 'object',
      properties: {
        success: {
          type: 'boolean'
        },
        data: {
          type: 'object',
          properties: {
            totalRevenue: {
              type: 'number'
            },
            totalSpend: {
              type: 'number'
            },
            totalConversions: {
              type: 'number'
            },
            totalImpressions: {
              type: 'number'
            },
            totalClicks: {
              type: 'number'
            },
            kpis: {
              type: 'object',
              properties: {
                roas: {
                  type: 'number'
                },
                roi: {
                  type: 'number'
                },
                cac: {
                  type: 'number'
                },
                ltv: {
                  type: 'number'
                },
                arpu: {
                  type: 'number'
                },
                cpc: {
                  type: 'number'
                },
                cpm: {
                  type: 'number'
                },
                ctr: {
                  type: 'number'
                },
                conversionRate: {
                  type: 'number'
                },
                margin: {
                  type: 'number'
                }
              }
            },
            trends: {
              type: 'object',
              properties: {
                revenue: {
                  type: 'object',
                  properties: {
                    current: {
                      type: 'number'
                    },
                    previous: {
                      type: 'number'
                    },
                    change: {
                      type: 'number'
                    }
                  }
                },
                spend: {
                  type: 'object',
                  properties: {
                    current: {
                      type: 'number'
                    },
                    previous: {
                      type: 'number'
                    },
                    change: {
                      type: 'number'
                    }
                  }
                },
                roas: {
                  type: 'object',
                  properties: {
                    current: {
                      type: 'number'
                    },
                    previous: {
                      type: 'number'
                    },
                    change: {
                      type: 'number'
                    }
                  }
                },
                conversions: {
                  type: 'object',
                  properties: {
                    current: {
                      type: 'number'
                    },
                    previous: {
                      type: 'number'
                    },
                    change: {
                      type: 'number'
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
});
const historySchema =
/* istanbul ignore next */
(cov_29a2eswkld().s[2]++, {
  querystring: {
    type: 'object',
    properties: {
      startDate: {
        type: 'string',
        format: 'date',
        description: 'Data de início (YYYY-MM-DD)'
      },
      endDate: {
        type: 'string',
        format: 'date',
        description: 'Data de fim (YYYY-MM-DD)'
      },
      campaignIds: {
        type: 'string',
        description: 'IDs das campanhas separados por vírgula'
      },
      groupBy: {
        type: 'string',
        enum: ['day', 'week', 'month'],
        default: 'day',
        description: 'Agrupamento dos dados'
      }
    },
    required: ['startDate', 'endDate']
  },
  response: {
    200: {
      type: 'object',
      properties: {
        success: {
          type: 'boolean'
        },
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              date: {
                type: 'string'
              },
              metrics: {
                type: 'object',
                properties: {
                  impressions: {
                    type: 'number'
                  },
                  clicks: {
                    type: 'number'
                  },
                  conversions: {
                    type: 'number'
                  },
                  spend: {
                    type: 'number'
                  },
                  revenue: {
                    type: 'number'
                  },
                  kpis: {
                    type: 'object',
                    properties: {
                      roas: {
                        type: 'number'
                      },
                      roi: {
                        type: 'number'
                      },
                      cac: {
                        type: 'number'
                      },
                      ltv: {
                        type: 'number'
                      },
                      arpu: {
                        type: 'number'
                      },
                      cpc: {
                        type: 'number'
                      },
                      cpm: {
                        type: 'number'
                      },
                      ctr: {
                        type: 'number'
                      },
                      conversionRate: {
                        type: 'number'
                      },
                      margin: {
                        type: 'number'
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
});
const compareSchema =
/* istanbul ignore next */
(cov_29a2eswkld().s[3]++, {
  querystring: {
    type: 'object',
    properties: {
      period1Start: {
        type: 'string',
        format: 'date',
        description: 'Data de início do período 1 (YYYY-MM-DD)'
      },
      period1End: {
        type: 'string',
        format: 'date',
        description: 'Data de fim do período 1 (YYYY-MM-DD)'
      },
      period2Start: {
        type: 'string',
        format: 'date',
        description: 'Data de início do período 2 (YYYY-MM-DD)'
      },
      period2End: {
        type: 'string',
        format: 'date',
        description: 'Data de fim do período 2 (YYYY-MM-DD)'
      },
      campaignIds: {
        type: 'string',
        description: 'IDs das campanhas separados por vírgula'
      }
    },
    required: ['period1Start', 'period1End', 'period2Start', 'period2End']
  },
  response: {
    200: {
      type: 'object',
      properties: {
        success: {
          type: 'boolean'
        },
        data: {
          type: 'object',
          properties: {
            period1: {
              type: 'object',
              properties: {
                startDate: {
                  type: 'string'
                },
                endDate: {
                  type: 'string'
                },
                metrics: {
                  type: 'object'
                }
              }
            },
            period2: {
              type: 'object',
              properties: {
                startDate: {
                  type: 'string'
                },
                endDate: {
                  type: 'string'
                },
                metrics: {
                  type: 'object'
                }
              }
            },
            comparison: {
              type: 'object',
              properties: {
                revenue: {
                  type: 'object',
                  properties: {
                    change: {
                      type: 'number'
                    },
                    percentage: {
                      type: 'number'
                    }
                  }
                },
                spend: {
                  type: 'object',
                  properties: {
                    change: {
                      type: 'number'
                    },
                    percentage: {
                      type: 'number'
                    }
                  }
                },
                roas: {
                  type: 'object',
                  properties: {
                    change: {
                      type: 'number'
                    },
                    percentage: {
                      type: 'number'
                    }
                  }
                },
                conversions: {
                  type: 'object',
                  properties: {
                    change: {
                      type: 'number'
                    },
                    percentage: {
                      type: 'number'
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
});
const exportSchema =
/* istanbul ignore next */
(cov_29a2eswkld().s[4]++, {
  querystring: {
    type: 'object',
    properties: {
      startDate: {
        type: 'string',
        format: 'date',
        description: 'Data de início (YYYY-MM-DD)'
      },
      endDate: {
        type: 'string',
        format: 'date',
        description: 'Data de fim (YYYY-MM-DD)'
      },
      campaignIds: {
        type: 'string',
        description: 'IDs das campanhas separados por vírgula'
      },
      format: {
        type: 'string',
        enum: ['csv'],
        default: 'csv',
        description: 'Formato de exportação'
      }
    },
    required: ['startDate', 'endDate']
  },
  response: {
    200: {
      type: 'string',
      description: 'Arquivo CSV com as métricas'
    }
  }
});
// Middleware de autenticação para métricas
/* istanbul ignore next */
cov_29a2eswkld().s[5]++;
const requireAuth = async (request, reply) => {
  /* istanbul ignore next */
  cov_29a2eswkld().f[0]++;
  cov_29a2eswkld().s[6]++;
  await authMiddleware(request, reply, {
    required: true,
    organizationRequired: true
  });
};
// Helper para parsear datas
function parseDate(dateString) {
  /* istanbul ignore next */
  cov_29a2eswkld().f[1]++;
  const date =
  /* istanbul ignore next */
  (cov_29a2eswkld().s[7]++, new Date(dateString + 'T00:00:00.000Z'));
  /* istanbul ignore next */
  cov_29a2eswkld().s[8]++;
  if (isNaN(date.getTime())) {
    /* istanbul ignore next */
    cov_29a2eswkld().b[0][0]++;
    cov_29a2eswkld().s[9]++;
    throw new ApiError('Invalid date format. Use YYYY-MM-DD', 'INVALID_DATE_FORMAT', 400);
  } else
  /* istanbul ignore next */
  {
    cov_29a2eswkld().b[0][1]++;
  }
  cov_29a2eswkld().s[10]++;
  return date;
}
// Helper para parsear IDs de campanhas
function parseCampaignIds(campaignIdsString) {
  /* istanbul ignore next */
  cov_29a2eswkld().f[2]++;
  cov_29a2eswkld().s[11]++;
  if (!campaignIdsString) {
    /* istanbul ignore next */
    cov_29a2eswkld().b[1][0]++;
    cov_29a2eswkld().s[12]++;
    return undefined;
  } else
  /* istanbul ignore next */
  {
    cov_29a2eswkld().b[1][1]++;
  }
  cov_29a2eswkld().s[13]++;
  return campaignIdsString.split(',').map(id => {
    /* istanbul ignore next */
    cov_29a2eswkld().f[3]++;
    cov_29a2eswkld().s[14]++;
    return id.trim();
  }).filter(id => {
    /* istanbul ignore next */
    cov_29a2eswkld().f[4]++;
    cov_29a2eswkld().s[15]++;
    return id.length > 0;
  });
}
// Rotas de métricas
export async function metricsRoutes(app) {
  /* istanbul ignore next */
  cov_29a2eswkld().f[5]++;
  const metricsService =
  /* istanbul ignore next */
  (cov_29a2eswkld().s[16]++, new MetricsService(app));
  // POST /api/v1/metrics/calculate - Calcular métricas sob demanda
  /* istanbul ignore next */
  cov_29a2eswkld().s[17]++;
  app.post('/calculate', {
    preHandler: requireAuth,
    schema: calculateMetricsSchema
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_29a2eswkld().f[6]++;
    const {
      campaignIds,
      startDate,
      endDate
    } =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[18]++, request.body);
    const organizationId =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[19]++, request.organization.id);
    const parsedStartDate =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[20]++, startDate ?
    /* istanbul ignore next */
    (cov_29a2eswkld().b[2][0]++, parseDate(startDate)) :
    /* istanbul ignore next */
    (cov_29a2eswkld().b[2][1]++, undefined));
    const parsedEndDate =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[21]++, endDate ?
    /* istanbul ignore next */
    (cov_29a2eswkld().b[3][0]++, parseDate(endDate)) :
    /* istanbul ignore next */
    (cov_29a2eswkld().b[3][1]++, undefined));
    const kpis =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[22]++, await metricsService.calculateMetricsOnDemand(organizationId, campaignIds, parsedStartDate, parsedEndDate));
    /* istanbul ignore next */
    cov_29a2eswkld().s[23]++;
    logger.info('Metrics calculated on demand', {
      organizationId,
      campaignIds:
      /* istanbul ignore next */
      (cov_29a2eswkld().b[4][0]++, campaignIds?.length) ||
      /* istanbul ignore next */
      (cov_29a2eswkld().b[4][1]++, 0),
      startDate: parsedStartDate?.toISOString(),
      endDate: parsedEndDate?.toISOString()
    });
    /* istanbul ignore next */
    cov_29a2eswkld().s[24]++;
    return reply.status(200).send({
      success: true,
      data: kpis
    });
  }));
  // GET /api/v1/metrics/dashboard - Obter dados do dashboard
  /* istanbul ignore next */
  cov_29a2eswkld().s[25]++;
  app.get('/dashboard', {
    preHandler: requireAuth,
    schema: dashboardSchema
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_29a2eswkld().f[7]++;
    const {
      campaignIds,
      startDate,
      endDate
    } =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[26]++, request.query);
    const organizationId =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[27]++, request.organization.id);
    const parsedCampaignIds =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[28]++, parseCampaignIds(campaignIds));
    const parsedStartDate =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[29]++, startDate ?
    /* istanbul ignore next */
    (cov_29a2eswkld().b[5][0]++, parseDate(startDate)) :
    /* istanbul ignore next */
    (cov_29a2eswkld().b[5][1]++, undefined));
    const parsedEndDate =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[30]++, endDate ?
    /* istanbul ignore next */
    (cov_29a2eswkld().b[6][0]++, parseDate(endDate)) :
    /* istanbul ignore next */
    (cov_29a2eswkld().b[6][1]++, undefined));
    const dashboardData =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[31]++, await metricsService.getDashboardMetrics(organizationId, parsedCampaignIds, parsedStartDate, parsedEndDate));
    /* istanbul ignore next */
    cov_29a2eswkld().s[32]++;
    return reply.status(200).send({
      success: true,
      data: dashboardData
    });
  }));
  // GET /api/v1/metrics/history - Obter histórico de métricas
  /* istanbul ignore next */
  cov_29a2eswkld().s[33]++;
  app.get('/history', {
    preHandler: requireAuth,
    schema: historySchema
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_29a2eswkld().f[8]++;
    const {
      startDate,
      endDate,
      campaignIds,
      groupBy =
      /* istanbul ignore next */
      (cov_29a2eswkld().b[7][0]++, 'day')
    } =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[34]++, request.query);
    const organizationId =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[35]++, request.organization.id);
    const parsedStartDate =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[36]++, parseDate(startDate));
    const parsedEndDate =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[37]++, parseDate(endDate));
    const parsedCampaignIds =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[38]++, parseCampaignIds(campaignIds));
    const historyData =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[39]++, await metricsService.getMetricsHistory(organizationId, parsedStartDate, parsedEndDate, parsedCampaignIds, groupBy));
    /* istanbul ignore next */
    cov_29a2eswkld().s[40]++;
    return reply.status(200).send({
      success: true,
      data: historyData
    });
  }));
  // GET /api/v1/metrics/compare - Comparar métricas entre períodos
  /* istanbul ignore next */
  cov_29a2eswkld().s[41]++;
  app.get('/compare', {
    preHandler: requireAuth,
    schema: compareSchema
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_29a2eswkld().f[9]++;
    const {
      period1Start,
      period1End,
      period2Start,
      period2End,
      campaignIds
    } =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[42]++, request.query);
    const organizationId =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[43]++, request.organization.id);
    const parsedPeriod1Start =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[44]++, parseDate(period1Start));
    const parsedPeriod1End =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[45]++, parseDate(period1End));
    const parsedPeriod2Start =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[46]++, parseDate(period2Start));
    const parsedPeriod2End =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[47]++, parseDate(period2End));
    const parsedCampaignIds =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[48]++, parseCampaignIds(campaignIds));
    const comparisonData =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[49]++, await metricsService.compareMetrics(organizationId, parsedPeriod1Start, parsedPeriod1End, parsedPeriod2Start, parsedPeriod2End, parsedCampaignIds));
    /* istanbul ignore next */
    cov_29a2eswkld().s[50]++;
    return reply.status(200).send({
      success: true,
      data: comparisonData
    });
  }));
  // GET /api/v1/metrics/export - Exportar métricas
  /* istanbul ignore next */
  cov_29a2eswkld().s[51]++;
  app.get('/export', {
    preHandler: requireAuth,
    schema: exportSchema
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_29a2eswkld().f[10]++;
    const {
      startDate,
      endDate,
      campaignIds,
      format =
      /* istanbul ignore next */
      (cov_29a2eswkld().b[8][0]++, 'csv')
    } =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[52]++, request.query);
    const organizationId =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[53]++, request.organization.id);
    const parsedStartDate =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[54]++, parseDate(startDate));
    const parsedEndDate =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[55]++, parseDate(endDate));
    const parsedCampaignIds =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[56]++, parseCampaignIds(campaignIds));
    /* istanbul ignore next */
    cov_29a2eswkld().s[57]++;
    if (format !== 'csv') {
      /* istanbul ignore next */
      cov_29a2eswkld().b[9][0]++;
      cov_29a2eswkld().s[58]++;
      throw new ApiError('Only CSV format is supported', 'UNSUPPORTED_FORMAT', 400);
    } else
    /* istanbul ignore next */
    {
      cov_29a2eswkld().b[9][1]++;
    }
    const csvContent =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[59]++, await metricsService.exportMetricsToCSV(organizationId, parsedStartDate, parsedEndDate, parsedCampaignIds));
    const filename =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[60]++, `metrics_${startDate}_${endDate}.csv`);
    /* istanbul ignore next */
    cov_29a2eswkld().s[61]++;
    reply.header('Content-Type', 'text/csv');
    /* istanbul ignore next */
    cov_29a2eswkld().s[62]++;
    reply.header('Content-Disposition', `attachment; filename="${filename}"`);
    /* istanbul ignore next */
    cov_29a2eswkld().s[63]++;
    logger.info('Metrics exported', {
      organizationId,
      startDate,
      endDate,
      campaignIds:
      /* istanbul ignore next */
      (cov_29a2eswkld().b[10][0]++, parsedCampaignIds?.length) ||
      /* istanbul ignore next */
      (cov_29a2eswkld().b[10][1]++, 0),
      format
    });
    /* istanbul ignore next */
    cov_29a2eswkld().s[64]++;
    return reply.status(200).send(csvContent);
  }));
  // POST /api/v1/metrics/aggregate - Endpoint interno para agregação manual
  /* istanbul ignore next */
  cov_29a2eswkld().s[65]++;
  app.post('/aggregate', {
    preHandler: requireAuth,
    schema: {
      body: {
        type: 'object',
        properties: {
          date: {
            type: 'string',
            format: 'date',
            description: 'Data para agregação (YYYY-MM-DD)'
          }
        },
        required: ['date']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            message: {
              type: 'string'
            }
          }
        }
      }
    }
  }, asyncHandler(async (request, reply) => {
    /* istanbul ignore next */
    cov_29a2eswkld().f[11]++;
    const {
      date
    } =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[66]++, request.body);
    const organizationId =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[67]++, request.organization.id);
    // Verificar se o usuário tem permissão de admin
    /* istanbul ignore next */
    cov_29a2eswkld().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_29a2eswkld().b[12][0]++, request.user.role !== 'ADMIN') &&
    /* istanbul ignore next */
    (cov_29a2eswkld().b[12][1]++, request.user.role !== 'OWNER')) {
      /* istanbul ignore next */
      cov_29a2eswkld().b[11][0]++;
      cov_29a2eswkld().s[69]++;
      throw new ApiError('Insufficient permissions', 'INSUFFICIENT_PERMISSIONS', 403);
    } else
    /* istanbul ignore next */
    {
      cov_29a2eswkld().b[11][1]++;
    }
    const parsedDate =
    /* istanbul ignore next */
    (cov_29a2eswkld().s[70]++, parseDate(date));
    /* istanbul ignore next */
    cov_29a2eswkld().s[71]++;
    await metricsService.aggregateDailyMetrics(parsedDate, organizationId);
    /* istanbul ignore next */
    cov_29a2eswkld().s[72]++;
    logger.info('Manual metrics aggregation completed', {
      organizationId,
      date: parsedDate.toISOString(),
      triggeredBy: request.user.id
    });
    /* istanbul ignore next */
    cov_29a2eswkld().s[73]++;
    return reply.status(200).send({
      success: true,
      message: `Metrics aggregated successfully for ${date}`
    });
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,