ea378bd2dded361256fa8df0a44be437
/* istanbul ignore next */
function cov_jy0iypomj() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-prisma.service.ts";
  var hash = "175fee3b7217ddfc45be98a52380944ca631dc49";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-prisma.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "14": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 73
        }
      },
      "15": {
        start: {
          line: 11,
          column: 36
        },
        end: {
          line: 11,
          column: 71
        }
      },
      "16": {
        start: {
          line: 17,
          column: 26
        },
        end: {
          line: 210,
          column: 1
        }
      },
      "17": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 29
        }
      },
      "18": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "19": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 48
        }
      },
      "20": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 44
        }
      },
      "21": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "22": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 70
        }
      },
      "23": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "24": {
        start: {
          line: 36,
          column: 39
        },
        end: {
          line: 36,
          column: 51
        }
      },
      "25": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 40,
          column: 17
        }
      },
      "26": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 42
        }
      },
      "27": {
        start: {
          line: 42,
          column: 37
        },
        end: {
          line: 55,
          column: 17
        }
      },
      "28": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 59,
          column: 17
        }
      },
      "29": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 42
        }
      },
      "30": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 89,
          column: 19
        }
      },
      "31": {
        start: {
          line: 63,
          column: 44
        },
        end: {
          line: 63,
          column: 67
        }
      },
      "32": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 66,
          column: 25
        }
      },
      "33": {
        start: {
          line: 65,
          column: 28
        },
        end: {
          line: 65,
          column: 47
        }
      },
      "34": {
        start: {
          line: 68,
          column: 48
        },
        end: {
          line: 79,
          column: 25
        }
      },
      "35": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 82,
          column: 25
        }
      },
      "36": {
        start: {
          line: 81,
          column: 28
        },
        end: {
          line: 81,
          column: 65
        }
      },
      "37": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 87,
          column: 26
        }
      },
      "38": {
        start: {
          line: 85,
          column: 49
        },
        end: {
          line: 85,
          column: 81
        }
      },
      "39": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 86,
          column: 79
        }
      },
      "40": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "41": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 22
        }
      },
      "42": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "43": {
        start: {
          line: 113,
          column: 28
        },
        end: {
          line: 113,
          column: 53
        }
      },
      "44": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "45": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 24
        }
      },
      "46": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "47": {
        start: {
          line: 120,
          column: 38
        },
        end: {
          line: 120,
          column: 60
        }
      },
      "48": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "49": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 32
        }
      },
      "50": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "51": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 42
        }
      },
      "52": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 56
        }
      },
      "53": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "54": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 32
        }
      },
      "55": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 52
        }
      },
      "56": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 20
        }
      },
      "57": {
        start: {
          line: 140,
          column: 31
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "58": {
        start: {
          line: 145,
          column: 28
        },
        end: {
          line: 145,
          column: 53
        }
      },
      "59": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "60": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 46
        }
      },
      "61": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "62": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 38
        }
      },
      "63": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 55
        }
      },
      "64": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "65": {
        start: {
          line: 158,
          column: 27
        },
        end: {
          line: 160,
          column: 14
        }
      },
      "66": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 28
        }
      },
      "67": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 25
        }
      },
      "68": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "69": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 42
        }
      },
      "70": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 50
        }
      },
      "71": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 27
        }
      },
      "72": {
        start: {
          line: 181,
          column: 61
        },
        end: {
          line: 185,
          column: 10
        }
      },
      "73": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 192,
          column: 10
        }
      },
      "74": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "75": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 204,
          column: 15
        }
      },
      "76": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 58
        }
      },
      "77": {
        start: {
          line: 211,
          column: 0
        },
        end: {
          line: 215,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 10,
            column: 41
          }
        },
        loc: {
          start: {
            line: 10,
            column: 73
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 10
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 11,
            column: 11
          },
          end: {
            line: 11,
            column: 12
          }
        },
        loc: {
          start: {
            line: 11,
            column: 34
          },
          end: {
            line: 11,
            column: 73
          }
        },
        line: 11
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 17
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 29
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 35,
            column: 17
          },
          end: {
            line: 35,
            column: 18
          }
        },
        loc: {
          start: {
            line: 35,
            column: 35
          },
          end: {
            line: 90,
            column: 13
          }
        },
        line: 35
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 62,
            column: 25
          },
          end: {
            line: 62,
            column: 26
          }
        },
        loc: {
          start: {
            line: 62,
            column: 54
          },
          end: {
            line: 88,
            column: 21
          }
        },
        line: 62
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 84,
            column: 31
          },
          end: {
            line: 84,
            column: 32
          }
        },
        loc: {
          start: {
            line: 84,
            column: 46
          },
          end: {
            line: 87,
            column: 25
          }
        },
        line: 84
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 37
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 94
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 44
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 139
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 52
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 156
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 41
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 168
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 20
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 176
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 27
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 180
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 47
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 195
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 10,
            column: 14
          },
          end: {
            line: 12,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 19
          }
        }, {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 35
          }
        }, {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 10
      },
      "14": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "15": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "16": {
        loc: {
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 38,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 38,
            column: 54
          }
        }, {
          start: {
            line: 38,
            column: 58
          },
          end: {
            line: 38,
            column: 73
          }
        }],
        line: 38
      },
      "17": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "18": {
        loc: {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 66,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 66,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "19": {
        loc: {
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 82,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 82,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "20": {
        loc: {
          start: {
            line: 84,
            column: 32
          },
          end: {
            line: 84,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 84,
            column: 39
          },
          end: {
            line: 84,
            column: 41
          }
        }],
        line: 84
      },
      "21": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "22": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "23": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: 129,
            column: 13
          },
          end: {
            line: 135,
            column: 9
          }
        }],
        line: 118
      },
      "24": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "25": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "26": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "27": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "28": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 23
          }
        }, {
          start: {
            line: 146,
            column: 27
          },
          end: {
            line: 146,
            column: 45
          }
        }],
        line: 146
      },
      "29": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "30": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 37
          }
        }, {
          start: {
            line: 150,
            column: 41
          },
          end: {
            line: 150,
            column: 52
          }
        }],
        line: 150
      },
      "31": {
        loc: {
          start: {
            line: 168,
            column: 28
          },
          end: {
            line: 168,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 168,
            column: 37
          },
          end: {
            line: 168,
            column: 39
          }
        }],
        line: 168
      },
      "32": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "33": {
        loc: {
          start: {
            line: 201,
            column: 25
          },
          end: {
            line: 201,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 25
          },
          end: {
            line: 201,
            column: 32
          }
        }, {
          start: {
            line: 201,
            column: 36
          },
          end: {
            line: 201,
            column: 38
          }
        }],
        line: 201
      },
      "34": {
        loc: {
          start: {
            line: 214,
            column: 37
          },
          end: {
            line: 214,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 214,
            column: 122
          },
          end: {
            line: 214,
            column: 124
          }
        }, {
          start: {
            line: 214,
            column: 127
          },
          end: {
            line: 214,
            column: 133
          }
        }],
        line: 214
      },
      "35": {
        loc: {
          start: {
            line: 214,
            column: 50
          },
          end: {
            line: 214,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 50
          },
          end: {
            line: 214,
            column: 86
          }
        }, {
          start: {
            line: 214,
            column: 90
          },
          end: {
            line: 214,
            column: 103
          }
        }],
        line: 214
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-prisma.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-prisma.service.ts"],
      sourcesContent: ["import { Injectable, Scope, Inject } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { PrismaService } from './prisma.service';\nimport { Request } from 'express';\nimport { TenantInfo } from '../decorators/get-tenant.decorator';\nimport { UserRole } from '@prisma/client';\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  organizationId: string;\n  role: UserRole;\n  name?: string;\n}\n\ninterface RequestWithTenant extends Request {\n  tenant?: TenantInfo;\n  user?: AuthUser;\n}\n\n@Injectable({ scope: Scope.REQUEST })\nexport class TenantPrismaService {\n  private tenantId: string;\n  private userId: string;\n\n  constructor(\n    private readonly prisma: PrismaService,\n    @Inject(REQUEST) private readonly request: RequestWithTenant,\n  ) {\n    this.tenantId = this.request.tenant?.id;\n    this.userId = this.request.user?.id;\n  }\n\n  // M\xE9todo para obter o Prisma client com filtros autom\xE1ticos de tenant\n  get client() {\n    if (!this.tenantId) {\n      throw new Error('Tenant ID not found in request context');\n    }\n\n    // Retorna um proxy do Prisma client que adiciona automaticamente filtros de tenant\n    return new Proxy(this.prisma, {\n      get: (target, prop) => {\n        const originalMethod = target[prop as keyof PrismaService];\n\n        // Se n\xE3o \xE9 um modelo do Prisma, retorna o m\xE9todo original\n        if (typeof originalMethod !== 'object' || !originalMethod) {\n          return originalMethod;\n        }\n\n        // Lista de modelos que precisam de filtro de tenant\n        const tenantModels = [\n          'campaign',\n          'campaignMetrics',\n          'integration',\n          'whatsAppConfig',\n          'whatsAppMessage',\n          'whatsAppTemplate',\n          'whatsAppConversation',\n          'whatsAppAutomation',\n          'whatsAppMetrics',\n          'invitation',\n          'auditLog',\n          'apiKey',\n        ];\n\n        // Se n\xE3o \xE9 um modelo que precisa de filtro, retorna o m\xE9todo original\n        if (!tenantModels.includes(prop as string)) {\n          return originalMethod;\n        }\n\n        // Cria um proxy para os m\xE9todos do modelo\n        return new Proxy(originalMethod, {\n          get: (modelTarget, methodProp) => {\n            const modelMethod = modelTarget[methodProp as string];\n\n            if (typeof modelMethod !== 'function') {\n              return modelMethod;\n            }\n\n            // M\xE9todos que precisam de filtro autom\xE1tico\n            const methodsToFilter = [\n              'findFirst',\n              'findUnique',\n              'findMany',\n              'update',\n              'updateMany',\n              'delete',\n              'deleteMany',\n              'count',\n              'aggregate',\n              'groupBy',\n            ];\n\n            if (!methodsToFilter.includes(methodProp as string)) {\n              return modelMethod.bind(modelTarget);\n            }\n\n            // Retorna uma fun\xE7\xE3o que adiciona automaticamente o filtro de tenant\n            return (args: any = {}) => {\n              const modifiedArgs = this.addTenantFilter(prop as string, args);\n              return modelMethod.call(modelTarget, modifiedArgs);\n            };\n          },\n        });\n      },\n    });\n  }\n\n  // M\xE9todo para adicionar filtros de tenant automaticamente\n  private addTenantFilter(modelName: string, args: any): any {\n    if (!args) {\n      args = {};\n    }\n\n    // Mapear modelos para seus campos de tenant\n    const tenantFieldMap: Record<string, string> = {\n      campaign: 'organizationId',\n      campaignMetrics: 'campaign.organizationId',\n      integration: 'user.organizationId',\n      whatsAppConfig: 'user.organizationId',\n      whatsAppMessage: 'config.user.organizationId',\n      whatsAppTemplate: 'config.user.organizationId',\n      whatsAppConversation: 'config.user.organizationId',\n      whatsAppAutomation: 'config.user.organizationId',\n      whatsAppMetrics: 'config.user.organizationId',\n      invitation: 'organizationId',\n      auditLog: 'user.organizationId',\n      apiKey: 'user.organizationId',\n    };\n\n    const tenantField = tenantFieldMap[modelName];\n    if (!tenantField) {\n      return args;\n    }\n\n    // Adicionar filtro de tenant baseado no campo\n    if (tenantField.includes('.')) {\n      // Para campos aninhados (ex: user.organizationId)\n      const [relation, field] = tenantField.split('.');\n      if (!args.where) {\n        args.where = {};\n      }\n      if (!args.where[relation]) {\n        args.where[relation] = {};\n      }\n      args.where[relation][field] = this.tenantId;\n    } else {\n      // Para campos diretos (ex: organizationId)\n      if (!args.where) {\n        args.where = {};\n      }\n      args.where[tenantField] = this.tenantId;\n    }\n\n    return args;\n  }\n\n  // M\xE9todo para criar registros com tenant_id autom\xE1tico\n  async createWithTenant(modelName: string, data: any) {\n    const tenantFieldMap: Record<string, string> = {\n      campaign: 'organizationId',\n      invitation: 'organizationId',\n      auditLog: 'organizationId',\n    };\n\n    const tenantField = tenantFieldMap[modelName];\n    if (tenantField && !data[tenantField]) {\n      data[tenantField] = this.tenantId;\n    }\n\n    // Adicionar userId se necess\xE1rio\n    if (data.userId === undefined && this.userId) {\n      data.userId = this.userId;\n    }\n\n    return this.prisma[modelName].create({ data });\n  }\n\n  // M\xE9todo para validar se um registro pertence ao tenant atual\n  async validateTenantAccess(modelName: string, recordId: string): Promise<boolean> {\n    try {\n      const record = await this.client[modelName].findUnique({\n        where: { id: recordId },\n      });\n      return !!record;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // M\xE9todo para executar queries raw com tenant context\n  async executeRaw(query: string, params: any[] = []): Promise<any> {\n    // Adicionar tenant_id como primeiro par\xE2metro se n\xE3o estiver presente\n    if (!params.includes(this.tenantId)) {\n      params.unshift(this.tenantId);\n    }\n\n    return this.prisma.$executeRaw`${query}`;\n  }\n\n  // M\xE9todo para queries que n\xE3o precisam de filtro de tenant\n  get rawClient() {\n    return this.prisma;\n  }\n\n  // M\xE9todo para obter estat\xEDsticas de uso por tenant\n  async getTenantStats() {\n    const [userCount, campaignCount, integrationCount] = await Promise.all([\n      this.client.user.count(),\n      this.client.campaign.count(),\n      this.client.integration.count(),\n    ]);\n\n    return {\n      tenantId: this.tenantId,\n      users: userCount,\n      campaigns: campaignCount,\n      integrations: integrationCount,\n      timestamp: new Date(),\n    };\n  }\n\n  // M\xE9todo para audit log autom\xE1tico\n  async logAction(action: string, resource: string, details?: any) {\n    try {\n      await this.createWithTenant('auditLog', {\n        userId: this.userId,\n        action,\n        resource,\n        details: details || {},\n        ipAddress: this.request.ip,\n        userAgent: this.request.get('User-Agent'),\n      });\n    } catch (error) {\n      console.error('Failed to log action:', error);\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "175fee3b7217ddfc45be98a52380944ca631dc49"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jy0iypomj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jy0iypomj();
var __decorate =
/* istanbul ignore next */
(cov_jy0iypomj().s[0]++,
/* istanbul ignore next */
(cov_jy0iypomj().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_jy0iypomj().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_jy0iypomj().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_jy0iypomj().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_jy0iypomj().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_jy0iypomj().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_jy0iypomj().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_jy0iypomj().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_jy0iypomj().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_jy0iypomj().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_jy0iypomj().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_jy0iypomj().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_jy0iypomj().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_jy0iypomj().b[3][0]++;
    cov_jy0iypomj().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_jy0iypomj().b[3][1]++;
    cov_jy0iypomj().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_jy0iypomj().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_jy0iypomj().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_jy0iypomj().b[5][0]++;
        cov_jy0iypomj().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_jy0iypomj().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_jy0iypomj().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_jy0iypomj().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_jy0iypomj().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_jy0iypomj().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_jy0iypomj().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_jy0iypomj().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_jy0iypomj().s[9]++;
  return /* istanbul ignore next */(cov_jy0iypomj().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_jy0iypomj().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_jy0iypomj().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_jy0iypomj().s[10]++,
/* istanbul ignore next */
(cov_jy0iypomj().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_jy0iypomj().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_jy0iypomj().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_jy0iypomj().f[1]++;
  cov_jy0iypomj().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_jy0iypomj().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_jy0iypomj().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_jy0iypomj().b[11][0]++;
    cov_jy0iypomj().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_jy0iypomj().b[11][1]++;
  }
}));
var __param =
/* istanbul ignore next */
(cov_jy0iypomj().s[13]++,
/* istanbul ignore next */
(cov_jy0iypomj().b[13][0]++, this) &&
/* istanbul ignore next */
(cov_jy0iypomj().b[13][1]++, this.__param) ||
/* istanbul ignore next */
(cov_jy0iypomj().b[13][2]++, function (paramIndex, decorator) {
  /* istanbul ignore next */
  cov_jy0iypomj().f[2]++;
  cov_jy0iypomj().s[14]++;
  return function (target, key) {
    /* istanbul ignore next */
    cov_jy0iypomj().f[3]++;
    cov_jy0iypomj().s[15]++;
    decorator(target, key, paramIndex);
  };
}));
var _a;
import { Injectable, Scope, Inject } from '@nestjs/common';
import { REQUEST } from '@nestjs/core';
import { PrismaService } from './prisma.service';
/* istanbul ignore next */
cov_jy0iypomj().s[16]++;
let TenantPrismaService = class TenantPrismaService {
  prisma;
  request;
  tenantId;
  userId;
  constructor(prisma, request) {
    /* istanbul ignore next */
    cov_jy0iypomj().f[4]++;
    cov_jy0iypomj().s[17]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_jy0iypomj().s[18]++;
    this.request = request;
    /* istanbul ignore next */
    cov_jy0iypomj().s[19]++;
    this.tenantId = this.request.tenant?.id;
    /* istanbul ignore next */
    cov_jy0iypomj().s[20]++;
    this.userId = this.request.user?.id;
  }
  // Método para obter o Prisma client com filtros automáticos de tenant
  get client() {
    /* istanbul ignore next */
    cov_jy0iypomj().f[5]++;
    cov_jy0iypomj().s[21]++;
    if (!this.tenantId) {
      /* istanbul ignore next */
      cov_jy0iypomj().b[14][0]++;
      cov_jy0iypomj().s[22]++;
      throw new Error('Tenant ID not found in request context');
    } else
    /* istanbul ignore next */
    {
      cov_jy0iypomj().b[14][1]++;
    }
    // Retorna um proxy do Prisma client que adiciona automaticamente filtros de tenant
    cov_jy0iypomj().s[23]++;
    return new Proxy(this.prisma, {
      get: (target, prop) => {
        /* istanbul ignore next */
        cov_jy0iypomj().f[6]++;
        const originalMethod =
        /* istanbul ignore next */
        (cov_jy0iypomj().s[24]++, target[prop]);
        // Se não é um modelo do Prisma, retorna o método original
        /* istanbul ignore next */
        cov_jy0iypomj().s[25]++;
        if (
        /* istanbul ignore next */
        (cov_jy0iypomj().b[16][0]++, typeof originalMethod !== 'object') ||
        /* istanbul ignore next */
        (cov_jy0iypomj().b[16][1]++, !originalMethod)) {
          /* istanbul ignore next */
          cov_jy0iypomj().b[15][0]++;
          cov_jy0iypomj().s[26]++;
          return originalMethod;
        } else
        /* istanbul ignore next */
        {
          cov_jy0iypomj().b[15][1]++;
        }
        // Lista de modelos que precisam de filtro de tenant
        const tenantModels =
        /* istanbul ignore next */
        (cov_jy0iypomj().s[27]++, ['campaign', 'campaignMetrics', 'integration', 'whatsAppConfig', 'whatsAppMessage', 'whatsAppTemplate', 'whatsAppConversation', 'whatsAppAutomation', 'whatsAppMetrics', 'invitation', 'auditLog', 'apiKey']);
        // Se não é um modelo que precisa de filtro, retorna o método original
        /* istanbul ignore next */
        cov_jy0iypomj().s[28]++;
        if (!tenantModels.includes(prop)) {
          /* istanbul ignore next */
          cov_jy0iypomj().b[17][0]++;
          cov_jy0iypomj().s[29]++;
          return originalMethod;
        } else
        /* istanbul ignore next */
        {
          cov_jy0iypomj().b[17][1]++;
        }
        // Cria um proxy para os métodos do modelo
        cov_jy0iypomj().s[30]++;
        return new Proxy(originalMethod, {
          get: (modelTarget, methodProp) => {
            /* istanbul ignore next */
            cov_jy0iypomj().f[7]++;
            const modelMethod =
            /* istanbul ignore next */
            (cov_jy0iypomj().s[31]++, modelTarget[methodProp]);
            /* istanbul ignore next */
            cov_jy0iypomj().s[32]++;
            if (typeof modelMethod !== 'function') {
              /* istanbul ignore next */
              cov_jy0iypomj().b[18][0]++;
              cov_jy0iypomj().s[33]++;
              return modelMethod;
            } else
            /* istanbul ignore next */
            {
              cov_jy0iypomj().b[18][1]++;
            }
            // Métodos que precisam de filtro automático
            const methodsToFilter =
            /* istanbul ignore next */
            (cov_jy0iypomj().s[34]++, ['findFirst', 'findUnique', 'findMany', 'update', 'updateMany', 'delete', 'deleteMany', 'count', 'aggregate', 'groupBy']);
            /* istanbul ignore next */
            cov_jy0iypomj().s[35]++;
            if (!methodsToFilter.includes(methodProp)) {
              /* istanbul ignore next */
              cov_jy0iypomj().b[19][0]++;
              cov_jy0iypomj().s[36]++;
              return modelMethod.bind(modelTarget);
            } else
            /* istanbul ignore next */
            {
              cov_jy0iypomj().b[19][1]++;
            }
            // Retorna uma função que adiciona automaticamente o filtro de tenant
            cov_jy0iypomj().s[37]++;
            return (args =
            /* istanbul ignore next */
            (cov_jy0iypomj().b[20][0]++, {})) => {
              /* istanbul ignore next */
              cov_jy0iypomj().f[8]++;
              const modifiedArgs =
              /* istanbul ignore next */
              (cov_jy0iypomj().s[38]++, this.addTenantFilter(prop, args));
              /* istanbul ignore next */
              cov_jy0iypomj().s[39]++;
              return modelMethod.call(modelTarget, modifiedArgs);
            };
          }
        });
      }
    });
  }
  // Método para adicionar filtros de tenant automaticamente
  addTenantFilter(modelName, args) {
    /* istanbul ignore next */
    cov_jy0iypomj().f[9]++;
    cov_jy0iypomj().s[40]++;
    if (!args) {
      /* istanbul ignore next */
      cov_jy0iypomj().b[21][0]++;
      cov_jy0iypomj().s[41]++;
      args = {};
    } else
    /* istanbul ignore next */
    {
      cov_jy0iypomj().b[21][1]++;
    }
    // Mapear modelos para seus campos de tenant
    const tenantFieldMap =
    /* istanbul ignore next */
    (cov_jy0iypomj().s[42]++, {
      campaign: 'organizationId',
      campaignMetrics: 'campaign.organizationId',
      integration: 'user.organizationId',
      whatsAppConfig: 'user.organizationId',
      whatsAppMessage: 'config.user.organizationId',
      whatsAppTemplate: 'config.user.organizationId',
      whatsAppConversation: 'config.user.organizationId',
      whatsAppAutomation: 'config.user.organizationId',
      whatsAppMetrics: 'config.user.organizationId',
      invitation: 'organizationId',
      auditLog: 'user.organizationId',
      apiKey: 'user.organizationId'
    });
    const tenantField =
    /* istanbul ignore next */
    (cov_jy0iypomj().s[43]++, tenantFieldMap[modelName]);
    /* istanbul ignore next */
    cov_jy0iypomj().s[44]++;
    if (!tenantField) {
      /* istanbul ignore next */
      cov_jy0iypomj().b[22][0]++;
      cov_jy0iypomj().s[45]++;
      return args;
    } else
    /* istanbul ignore next */
    {
      cov_jy0iypomj().b[22][1]++;
    }
    // Adicionar filtro de tenant baseado no campo
    cov_jy0iypomj().s[46]++;
    if (tenantField.includes('.')) {
      /* istanbul ignore next */
      cov_jy0iypomj().b[23][0]++;
      // Para campos aninhados (ex: user.organizationId)
      const [relation, field] =
      /* istanbul ignore next */
      (cov_jy0iypomj().s[47]++, tenantField.split('.'));
      /* istanbul ignore next */
      cov_jy0iypomj().s[48]++;
      if (!args.where) {
        /* istanbul ignore next */
        cov_jy0iypomj().b[24][0]++;
        cov_jy0iypomj().s[49]++;
        args.where = {};
      } else
      /* istanbul ignore next */
      {
        cov_jy0iypomj().b[24][1]++;
      }
      cov_jy0iypomj().s[50]++;
      if (!args.where[relation]) {
        /* istanbul ignore next */
        cov_jy0iypomj().b[25][0]++;
        cov_jy0iypomj().s[51]++;
        args.where[relation] = {};
      } else
      /* istanbul ignore next */
      {
        cov_jy0iypomj().b[25][1]++;
      }
      cov_jy0iypomj().s[52]++;
      args.where[relation][field] = this.tenantId;
    } else {
      /* istanbul ignore next */
      cov_jy0iypomj().b[23][1]++;
      cov_jy0iypomj().s[53]++;
      // Para campos diretos (ex: organizationId)
      if (!args.where) {
        /* istanbul ignore next */
        cov_jy0iypomj().b[26][0]++;
        cov_jy0iypomj().s[54]++;
        args.where = {};
      } else
      /* istanbul ignore next */
      {
        cov_jy0iypomj().b[26][1]++;
      }
      cov_jy0iypomj().s[55]++;
      args.where[tenantField] = this.tenantId;
    }
    /* istanbul ignore next */
    cov_jy0iypomj().s[56]++;
    return args;
  }
  // Método para criar registros com tenant_id automático
  async createWithTenant(modelName, data) {
    /* istanbul ignore next */
    cov_jy0iypomj().f[10]++;
    const tenantFieldMap =
    /* istanbul ignore next */
    (cov_jy0iypomj().s[57]++, {
      campaign: 'organizationId',
      invitation: 'organizationId',
      auditLog: 'organizationId'
    });
    const tenantField =
    /* istanbul ignore next */
    (cov_jy0iypomj().s[58]++, tenantFieldMap[modelName]);
    /* istanbul ignore next */
    cov_jy0iypomj().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_jy0iypomj().b[28][0]++, tenantField) &&
    /* istanbul ignore next */
    (cov_jy0iypomj().b[28][1]++, !data[tenantField])) {
      /* istanbul ignore next */
      cov_jy0iypomj().b[27][0]++;
      cov_jy0iypomj().s[60]++;
      data[tenantField] = this.tenantId;
    } else
    /* istanbul ignore next */
    {
      cov_jy0iypomj().b[27][1]++;
    }
    // Adicionar userId se necessário
    cov_jy0iypomj().s[61]++;
    if (
    /* istanbul ignore next */
    (cov_jy0iypomj().b[30][0]++, data.userId === undefined) &&
    /* istanbul ignore next */
    (cov_jy0iypomj().b[30][1]++, this.userId)) {
      /* istanbul ignore next */
      cov_jy0iypomj().b[29][0]++;
      cov_jy0iypomj().s[62]++;
      data.userId = this.userId;
    } else
    /* istanbul ignore next */
    {
      cov_jy0iypomj().b[29][1]++;
    }
    cov_jy0iypomj().s[63]++;
    return this.prisma[modelName].create({
      data
    });
  }
  // Método para validar se um registro pertence ao tenant atual
  async validateTenantAccess(modelName, recordId) {
    /* istanbul ignore next */
    cov_jy0iypomj().f[11]++;
    cov_jy0iypomj().s[64]++;
    try {
      const record =
      /* istanbul ignore next */
      (cov_jy0iypomj().s[65]++, await this.client[modelName].findUnique({
        where: {
          id: recordId
        }
      }));
      /* istanbul ignore next */
      cov_jy0iypomj().s[66]++;
      return !!record;
    } catch (error) {
      /* istanbul ignore next */
      cov_jy0iypomj().s[67]++;
      return false;
    }
  }
  // Método para executar queries raw com tenant context
  async executeRaw(query, params =
  /* istanbul ignore next */
  (cov_jy0iypomj().b[31][0]++, [])) {
    /* istanbul ignore next */
    cov_jy0iypomj().f[12]++;
    cov_jy0iypomj().s[68]++;
    // Adicionar tenant_id como primeiro parâmetro se não estiver presente
    if (!params.includes(this.tenantId)) {
      /* istanbul ignore next */
      cov_jy0iypomj().b[32][0]++;
      cov_jy0iypomj().s[69]++;
      params.unshift(this.tenantId);
    } else
    /* istanbul ignore next */
    {
      cov_jy0iypomj().b[32][1]++;
    }
    cov_jy0iypomj().s[70]++;
    return this.prisma.$executeRaw`${query}`;
  }
  // Método para queries que não precisam de filtro de tenant
  get rawClient() {
    /* istanbul ignore next */
    cov_jy0iypomj().f[13]++;
    cov_jy0iypomj().s[71]++;
    return this.prisma;
  }
  // Método para obter estatísticas de uso por tenant
  async getTenantStats() {
    /* istanbul ignore next */
    cov_jy0iypomj().f[14]++;
    const [userCount, campaignCount, integrationCount] =
    /* istanbul ignore next */
    (cov_jy0iypomj().s[72]++, await Promise.all([this.client.user.count(), this.client.campaign.count(), this.client.integration.count()]));
    /* istanbul ignore next */
    cov_jy0iypomj().s[73]++;
    return {
      tenantId: this.tenantId,
      users: userCount,
      campaigns: campaignCount,
      integrations: integrationCount,
      timestamp: new Date()
    };
  }
  // Método para audit log automático
  async logAction(action, resource, details) {
    /* istanbul ignore next */
    cov_jy0iypomj().f[15]++;
    cov_jy0iypomj().s[74]++;
    try {
      /* istanbul ignore next */
      cov_jy0iypomj().s[75]++;
      await this.createWithTenant('auditLog', {
        userId: this.userId,
        action,
        resource,
        details:
        /* istanbul ignore next */
        (cov_jy0iypomj().b[33][0]++, details) ||
        /* istanbul ignore next */
        (cov_jy0iypomj().b[33][1]++, {}),
        ipAddress: this.request.ip,
        userAgent: this.request.get('User-Agent')
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_jy0iypomj().s[76]++;
      console.error('Failed to log action:', error);
    }
  }
};
/* istanbul ignore next */
cov_jy0iypomj().s[77]++;
TenantPrismaService = __decorate([Injectable({
  scope: Scope.REQUEST
}), __param(1, Inject(REQUEST)), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_jy0iypomj().b[35][0]++, typeof PrismaService !== "undefined") &&
/* istanbul ignore next */
(cov_jy0iypomj().b[35][1]++, PrismaService)) === "function" ?
/* istanbul ignore next */
(cov_jy0iypomj().b[34][0]++, _a) :
/* istanbul ignore next */
(cov_jy0iypomj().b[34][1]++, Object), Object])], TenantPrismaService);
export { TenantPrismaService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,