{"version":3,"names":["cov_jy0iypomj","actualCoverage","Injectable","Scope","Inject","REQUEST","PrismaService","s","TenantPrismaService","prisma","request","tenantId","userId","constructor","f","tenant","id","user","client","b","Error","Proxy","get","target","prop","originalMethod","tenantModels","includes","modelTarget","methodProp","modelMethod","methodsToFilter","bind","args","modifiedArgs","addTenantFilter","call","modelName","tenantFieldMap","campaign","campaignMetrics","integration","whatsAppConfig","whatsAppMessage","whatsAppTemplate","whatsAppConversation","whatsAppAutomation","whatsAppMetrics","invitation","auditLog","apiKey","tenantField","relation","field","split","where","createWithTenant","data","undefined","create","validateTenantAccess","recordId","record","findUnique","error","executeRaw","query","params","unshift","$executeRaw","rawClient","getTenantStats","userCount","campaignCount","integrationCount","Promise","all","count","users","campaigns","integrations","timestamp","Date","logAction","action","resource","details","ipAddress","ip","userAgent","console","__decorate","scope","__param","_a","Object"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-prisma.service.ts"],"sourcesContent":["import { Injectable, Scope, Inject } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { PrismaService } from './prisma.service';\nimport { Request } from 'express';\nimport { TenantInfo } from '../decorators/get-tenant.decorator';\nimport { UserRole } from '@prisma/client';\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  organizationId: string;\n  role: UserRole;\n  name?: string;\n}\n\ninterface RequestWithTenant extends Request {\n  tenant?: TenantInfo;\n  user?: AuthUser;\n}\n\n@Injectable({ scope: Scope.REQUEST })\nexport class TenantPrismaService {\n  private tenantId: string;\n  private userId: string;\n\n  constructor(\n    private readonly prisma: PrismaService,\n    @Inject(REQUEST) private readonly request: RequestWithTenant,\n  ) {\n    this.tenantId = this.request.tenant?.id;\n    this.userId = this.request.user?.id;\n  }\n\n  // Método para obter o Prisma client com filtros automáticos de tenant\n  get client() {\n    if (!this.tenantId) {\n      throw new Error('Tenant ID not found in request context');\n    }\n\n    // Retorna um proxy do Prisma client que adiciona automaticamente filtros de tenant\n    return new Proxy(this.prisma, {\n      get: (target, prop) => {\n        const originalMethod = target[prop as keyof PrismaService];\n\n        // Se não é um modelo do Prisma, retorna o método original\n        if (typeof originalMethod !== 'object' || !originalMethod) {\n          return originalMethod;\n        }\n\n        // Lista de modelos que precisam de filtro de tenant\n        const tenantModels = [\n          'campaign',\n          'campaignMetrics',\n          'integration',\n          'whatsAppConfig',\n          'whatsAppMessage',\n          'whatsAppTemplate',\n          'whatsAppConversation',\n          'whatsAppAutomation',\n          'whatsAppMetrics',\n          'invitation',\n          'auditLog',\n          'apiKey',\n        ];\n\n        // Se não é um modelo que precisa de filtro, retorna o método original\n        if (!tenantModels.includes(prop as string)) {\n          return originalMethod;\n        }\n\n        // Cria um proxy para os métodos do modelo\n        return new Proxy(originalMethod, {\n          get: (modelTarget, methodProp) => {\n            const modelMethod = modelTarget[methodProp as string];\n\n            if (typeof modelMethod !== 'function') {\n              return modelMethod;\n            }\n\n            // Métodos que precisam de filtro automático\n            const methodsToFilter = [\n              'findFirst',\n              'findUnique',\n              'findMany',\n              'update',\n              'updateMany',\n              'delete',\n              'deleteMany',\n              'count',\n              'aggregate',\n              'groupBy',\n            ];\n\n            if (!methodsToFilter.includes(methodProp as string)) {\n              return modelMethod.bind(modelTarget);\n            }\n\n            // Retorna uma função que adiciona automaticamente o filtro de tenant\n            return (args: any = {}) => {\n              const modifiedArgs = this.addTenantFilter(prop as string, args);\n              return modelMethod.call(modelTarget, modifiedArgs);\n            };\n          },\n        });\n      },\n    });\n  }\n\n  // Método para adicionar filtros de tenant automaticamente\n  private addTenantFilter(modelName: string, args: any): any {\n    if (!args) {\n      args = {};\n    }\n\n    // Mapear modelos para seus campos de tenant\n    const tenantFieldMap: Record<string, string> = {\n      campaign: 'organizationId',\n      campaignMetrics: 'campaign.organizationId',\n      integration: 'user.organizationId',\n      whatsAppConfig: 'user.organizationId',\n      whatsAppMessage: 'config.user.organizationId',\n      whatsAppTemplate: 'config.user.organizationId',\n      whatsAppConversation: 'config.user.organizationId',\n      whatsAppAutomation: 'config.user.organizationId',\n      whatsAppMetrics: 'config.user.organizationId',\n      invitation: 'organizationId',\n      auditLog: 'user.organizationId',\n      apiKey: 'user.organizationId',\n    };\n\n    const tenantField = tenantFieldMap[modelName];\n    if (!tenantField) {\n      return args;\n    }\n\n    // Adicionar filtro de tenant baseado no campo\n    if (tenantField.includes('.')) {\n      // Para campos aninhados (ex: user.organizationId)\n      const [relation, field] = tenantField.split('.');\n      if (!args.where) {\n        args.where = {};\n      }\n      if (!args.where[relation]) {\n        args.where[relation] = {};\n      }\n      args.where[relation][field] = this.tenantId;\n    } else {\n      // Para campos diretos (ex: organizationId)\n      if (!args.where) {\n        args.where = {};\n      }\n      args.where[tenantField] = this.tenantId;\n    }\n\n    return args;\n  }\n\n  // Método para criar registros com tenant_id automático\n  async createWithTenant(modelName: string, data: any) {\n    const tenantFieldMap: Record<string, string> = {\n      campaign: 'organizationId',\n      invitation: 'organizationId',\n      auditLog: 'organizationId',\n    };\n\n    const tenantField = tenantFieldMap[modelName];\n    if (tenantField && !data[tenantField]) {\n      data[tenantField] = this.tenantId;\n    }\n\n    // Adicionar userId se necessário\n    if (data.userId === undefined && this.userId) {\n      data.userId = this.userId;\n    }\n\n    return this.prisma[modelName].create({ data });\n  }\n\n  // Método para validar se um registro pertence ao tenant atual\n  async validateTenantAccess(modelName: string, recordId: string): Promise<boolean> {\n    try {\n      const record = await this.client[modelName].findUnique({\n        where: { id: recordId },\n      });\n      return !!record;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Método para executar queries raw com tenant context\n  async executeRaw(query: string, params: any[] = []): Promise<any> {\n    // Adicionar tenant_id como primeiro parâmetro se não estiver presente\n    if (!params.includes(this.tenantId)) {\n      params.unshift(this.tenantId);\n    }\n\n    return this.prisma.$executeRaw`${query}`;\n  }\n\n  // Método para queries que não precisam de filtro de tenant\n  get rawClient() {\n    return this.prisma;\n  }\n\n  // Método para obter estatísticas de uso por tenant\n  async getTenantStats() {\n    const [userCount, campaignCount, integrationCount] = await Promise.all([\n      this.client.user.count(),\n      this.client.campaign.count(),\n      this.client.integration.count(),\n    ]);\n\n    return {\n      tenantId: this.tenantId,\n      users: userCount,\n      campaigns: campaignCount,\n      integrations: integrationCount,\n      timestamp: new Date(),\n    };\n  }\n\n  // Método para audit log automático\n  async logAction(action: string, resource: string, details?: any) {\n    try {\n      await this.createWithTenant('auditLog', {\n        userId: this.userId,\n        action,\n        resource,\n        details: details || {},\n        ipAddress: this.request.ip,\n        userAgent: this.request.get('User-Agent'),\n      });\n    } catch (error) {\n      console.error('Failed to log action:', error);\n    }\n  }\n}"],"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","ignoreList":[]}