{"version":3,"names":["cov_135ofbwnt7","actualCoverage","BillingService","UsageTrackingMiddleware","billingService","excludedPaths","constructor","f","s","Set","trackApiUsage","request","reply","b","has","url","startsWith","user","organizationId","recordUsage","usageData","checkUsageLimits","exceeded","console","warn","limits","usage","error","trackIntegrationUsage","trackUserUsage","createHook","middleware","addHook","payload","statusCode","usageTracker"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\middleware\\usage-tracking.middleware.ts"],"sourcesContent":["import { FastifyRequest, FastifyReply } from 'fastify';\nimport { BillingService } from '../services/billing.service';\n\nexport class UsageTrackingMiddleware {\n  private billingService: BillingService;\n  private excludedPaths: Set<string>;\n\n  constructor() {\n    this.billingService = new BillingService();\n    // Paths that should not count towards API usage\n    this.excludedPaths = new Set([\n      '/api/auth/login',\n      '/api/auth/logout',\n      '/api/auth/refresh',\n      '/api/billing/webhook',\n      '/api/billing/plans',\n      '/api/health',\n      '/docs',\n      '/documentation',\n    ]);\n  }\n\n  async trackApiUsage(request: FastifyRequest, reply: FastifyReply) {\n    // Skip tracking for excluded paths\n    if (this.excludedPaths.has(request.url) || request.url.startsWith('/docs')) {\n      return;\n    }\n\n    // Skip if no user context (unauthenticated requests)\n    const user = (request as any).user;\n    if (!user || !user.organizationId) {\n      return;\n    }\n\n    try {\n      // Record API call usage\n      await this.billingService.recordUsage(\n        user.organizationId,\n        'api_calls',\n        1\n      );\n\n      // Check if usage limits are exceeded\n      const usageData = await this.billingService.checkUsageLimits(user.organizationId);\n      \n      if (usageData.exceeded) {\n        // Log the exceeded usage for monitoring\n        console.warn(`Usage limits exceeded for organization ${user.organizationId}:`, {\n          limits: usageData.limits,\n          usage: usageData.usage,\n        });\n\n        // You could implement rate limiting here or send notifications\n        // For now, we'll just log it and continue\n      }\n    } catch (error) {\n      // Don't fail the request if usage tracking fails\n      console.error('Error tracking API usage:', error);\n    }\n  }\n\n  async trackIntegrationUsage(organizationId: string) {\n    try {\n      await this.billingService.recordUsage(\n        organizationId,\n        'integrations',\n        1\n      );\n    } catch (error) {\n      console.error('Error tracking integration usage:', error);\n    }\n  }\n\n  async trackUserUsage(organizationId: string) {\n    try {\n      await this.billingService.recordUsage(\n        organizationId,\n        'users',\n        1\n      );\n    } catch (error) {\n      console.error('Error tracking user usage:', error);\n    }\n  }\n\n  // Fastify hook for automatic API usage tracking\n  static createHook() {\n    const middleware = new UsageTrackingMiddleware();\n    \n    return async function (request: FastifyRequest, reply: FastifyReply) {\n      // Track usage after the request is processed\n      reply.addHook('onSend', async (request, reply, payload) => {\n        // Only track successful requests (2xx status codes)\n        if (reply.statusCode >= 200 && reply.statusCode < 300) {\n          await middleware.trackApiUsage(request, reply);\n        }\n        return payload;\n      });\n    };\n  }\n}\n\n// Export singleton instance for direct usage\nexport const usageTracker = new UsageTrackingMiddleware();"],"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","ignoreList":[]}