{"version":3,"names":["cov_soh6ce38k","actualCoverage","Injectable","Logger","NotFoundException","BadRequestException","ConflictException","PrismaService","CacheService","TenantMiddleware","PlanType","UserRole","nanoid","TenantService","s","TenantService_1","prisma","cacheService","logger","name","CACHE_TTL","constructor","f","createOrganization","data","ownerEmail","ownerFirstName","ownerLastName","ownerPassword","orgData","slug","b","generateSlug","existingOrg","organization","findUnique","where","existingUser","user","email","result","$transaction","tx","create","planType","STARTER","planLimits","getDefaultPlanLimits","billingEmail","timezone","currency","isActive","trialEndsAt","Date","now","bcrypt","require","passwordHash","hash","owner","firstName","lastName","role","OWNER","organizationId","id","createTenantSchema","log","invalidateOrganizationCache","error","message","stack","getOrganizationBySlug","cacheKey","generateCacheKey","cached","get","JSON","parse","include","users","select","lastLoginAt","createdAt","_count","campaigns","set","stringify","updateOrganization","updated","update","updatedAt","inviteUser","inviteData","findFirst","tempPassword","removeUser","userId","currentUserId","delete","success","toLowerCase","normalize","replace","trim","substring","limits","apiRequests","dataRetention","customDomain","advancedReports","PROFESSIONAL","ENTERPRISE","schemaName","$executeRawUnsafe","debug","del","validatePlanLimits","resource","currentUsage","getCurrentUsage","campaign","count","__decorate","_a","Object","_b"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant.service.ts"],"sourcesContent":["import { Injectable, Logger, NotFoundException, BadRequestException, ConflictException } from '@nestjs/common';\nimport { PrismaService } from '../database/prisma.service';\nimport { CacheService } from './cache.service';\nimport { TenantMiddleware } from '../middleware/tenant.middleware';\nimport { PlanType, UserRole } from '@prisma/client';\nimport { nanoid } from 'nanoid';\n\nexport interface CreateOrganizationDto {\n  name: string;\n  slug?: string;\n  planType?: PlanType;\n  billingEmail?: string;\n  timezone?: string;\n  currency?: string;\n  ownerEmail: string;\n  ownerFirstName: string;\n  ownerLastName: string;\n  ownerPassword: string;\n}\n\nexport interface UpdateOrganizationDto {\n  name?: string;\n  billingEmail?: string;\n  timezone?: string;\n  currency?: string;\n  planType?: PlanType;\n  customization?: {\n    logo?: string;\n    primaryColor?: string;\n    secondaryColor?: string;\n    theme?: 'light' | 'dark';\n  };\n}\n\nexport interface InviteUserDto {\n  email: string;\n  role: UserRole;\n  firstName?: string;\n  lastName?: string;\n}\n\n@Injectable()\nexport class TenantService {\n  private readonly logger = new Logger(TenantService.name);\n  private readonly CACHE_TTL = 300; // 5 minutos\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly cacheService: CacheService,\n  ) {}\n\n  /**\n   * Cria uma nova organização com usuário owner\n   */\n  async createOrganization(data: CreateOrganizationDto) {\n    const { ownerEmail, ownerFirstName, ownerLastName, ownerPassword, ...orgData } = data;\n\n    // Gerar slug se não fornecido\n    const slug = orgData.slug || this.generateSlug(orgData.name);\n\n    // Verificar se slug já existe\n    const existingOrg = await this.prisma.organization.findUnique({\n      where: { slug }\n    });\n\n    if (existingOrg) {\n      throw new ConflictException(`Organização com slug '${slug}' já existe.`);\n    }\n\n    // Verificar se email do owner já existe\n    const existingUser = await this.prisma.user.findUnique({\n      where: { email: ownerEmail }\n    });\n\n    if (existingUser) {\n      throw new ConflictException(`Usuário com email '${ownerEmail}' já existe.`);\n    }\n\n    try {\n      const result = await this.prisma.$transaction(async (tx) => {\n        // Criar organização\n        const organization = await tx.organization.create({\n          data: {\n            name: orgData.name,\n            slug,\n            planType: orgData.planType || PlanType.STARTER,\n            planLimits: this.getDefaultPlanLimits(orgData.planType || PlanType.STARTER),\n            billingEmail: orgData.billingEmail || ownerEmail,\n            timezone: orgData.timezone || 'UTC',\n            currency: orgData.currency || 'USD',\n            isActive: true,\n            trialEndsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dias\n          }\n        });\n\n        // Hash da senha\n        const bcrypt = require('bcryptjs');\n        const passwordHash = await bcrypt.hash(ownerPassword, 12);\n\n        // Criar usuário owner\n        const owner = await tx.user.create({\n          data: {\n            email: ownerEmail,\n            passwordHash,\n            firstName: ownerFirstName,\n            lastName: ownerLastName,\n            role: UserRole.OWNER,\n            organizationId: organization.id,\n            isActive: true,\n          }\n        });\n\n        // Criar schema do tenant\n        await this.createTenantSchema(slug);\n\n        return { organization, owner };\n      });\n\n      this.logger.log(`Organização criada: ${result.organization.name} (${slug})`);\n      \n      // Limpar cache\n      await this.invalidateOrganizationCache(slug);\n\n      return result;\n    } catch (error) {\n      this.logger.error(`Erro ao criar organização: ${error.message}`, error.stack);\n      throw new BadRequestException('Erro ao criar organização.');\n    }\n  }\n\n  /**\n   * Busca organização por slug com cache\n   */\n  async getOrganizationBySlug(slug: string) {\n    const cacheKey = TenantMiddleware.generateCacheKey(slug, 'organization');\n    \n    // Tentar buscar no cache\n    const cached = await this.cacheService.get(cacheKey);\n    if (cached) {\n      return JSON.parse(cached);\n    }\n\n    // Buscar no banco\n    const organization = await this.prisma.organization.findUnique({\n      where: { slug, isActive: true },\n      include: {\n        users: {\n          select: {\n            id: true,\n            email: true,\n            firstName: true,\n            lastName: true,\n            role: true,\n            isActive: true,\n            lastLoginAt: true,\n            createdAt: true,\n          }\n        },\n        _count: {\n          select: {\n            campaigns: true,\n            users: true,\n          }\n        }\n      }\n    });\n\n    if (!organization) {\n      throw new NotFoundException(`Organização '${slug}' não encontrada.`);\n    }\n\n    // Salvar no cache\n    await this.cacheService.set(cacheKey, JSON.stringify(organization), this.CACHE_TTL);\n\n    return organization;\n  }\n\n  /**\n   * Atualiza configurações da organização\n   */\n  async updateOrganization(organizationId: string, data: UpdateOrganizationDto) {\n    const organization = await this.prisma.organization.findUnique({\n      where: { id: organizationId }\n    });\n\n    if (!organization) {\n      throw new NotFoundException('Organização não encontrada.');\n    }\n\n    const updated = await this.prisma.organization.update({\n      where: { id: organizationId },\n      data: {\n        ...data,\n        updatedAt: new Date(),\n      }\n    });\n\n    // Limpar cache\n    await this.invalidateOrganizationCache(organization.slug);\n\n    this.logger.log(`Organização atualizada: ${updated.name}`);\n    return updated;\n  }\n\n  /**\n   * Convida usuário para organização\n   */\n  async inviteUser(organizationId: string, inviteData: InviteUserDto) {\n    const organization = await this.prisma.organization.findUnique({\n      where: { id: organizationId }\n    });\n\n    if (!organization) {\n      throw new NotFoundException('Organização não encontrada.');\n    }\n\n    // Verificar se email já existe na organização\n    const existingUser = await this.prisma.user.findFirst({\n      where: {\n        email: inviteData.email,\n        organizationId\n      }\n    });\n\n    if (existingUser) {\n      throw new ConflictException('Usuário já faz parte desta organização.');\n    }\n\n    // Criar convite (implementar tabela de convites se necessário)\n    // Por enquanto, criar usuário inativo que precisa ativar conta\n    const tempPassword = nanoid(12);\n    const bcrypt = require('bcryptjs');\n    const passwordHash = await bcrypt.hash(tempPassword, 12);\n\n    const user = await this.prisma.user.create({\n      data: {\n        email: inviteData.email,\n        passwordHash,\n        firstName: inviteData.firstName || '',\n        lastName: inviteData.lastName || '',\n        role: inviteData.role,\n        organizationId,\n        isActive: false, // Usuário precisa ativar conta\n      }\n    });\n\n    // TODO: Enviar email de convite\n    this.logger.log(`Usuário convidado: ${inviteData.email} para ${organization.name}`);\n\n    return { user, tempPassword };\n  }\n\n  /**\n   * Remove usuário da organização\n   */\n  async removeUser(organizationId: string, userId: string, currentUserId: string) {\n    // Verificar se não está tentando remover a si mesmo\n    if (userId === currentUserId) {\n      throw new BadRequestException('Você não pode remover a si mesmo.');\n    }\n\n    const user = await this.prisma.user.findFirst({\n      where: {\n        id: userId,\n        organizationId\n      }\n    });\n\n    if (!user) {\n      throw new NotFoundException('Usuário não encontrado nesta organização.');\n    }\n\n    // Não permitir remover o owner\n    if (user.role === UserRole.OWNER) {\n      throw new BadRequestException('Não é possível remover o proprietário da organização.');\n    }\n\n    await this.prisma.user.delete({\n      where: { id: userId }\n    });\n\n    this.logger.log(`Usuário removido: ${user.email}`);\n    return { success: true };\n  }\n\n  /**\n   * Gera slug a partir do nome\n   */\n  private generateSlug(name: string): string {\n    return name\n      .toLowerCase()\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '') // Remove acentos\n      .replace(/[^a-z0-9\\s-]/g, '') // Remove caracteres especiais\n      .replace(/\\s+/g, '-') // Substitui espaços por hífens\n      .replace(/-+/g, '-') // Remove hífens duplicados\n      .trim()\n      .substring(0, 50); // Limita tamanho\n  }\n\n  /**\n   * Retorna limites padrão por plano\n   */\n  private getDefaultPlanLimits(planType: PlanType) {\n    const limits = {\n      [PlanType.STARTER]: {\n        campaigns: 5,\n        users: 2,\n        apiRequests: 1000,\n        dataRetention: 90,\n        customDomain: false,\n        advancedReports: false,\n      },\n      [PlanType.PROFESSIONAL]: {\n        campaigns: 50,\n        users: 10,\n        apiRequests: 10000,\n        dataRetention: 365,\n        customDomain: true,\n        advancedReports: true,\n      },\n      [PlanType.ENTERPRISE]: {\n        campaigns: -1, // Ilimitado\n        users: -1,\n        apiRequests: -1,\n        dataRetention: -1,\n        customDomain: true,\n        advancedReports: true,\n      },\n    };\n\n    return limits[planType];\n  }\n\n  /**\n   * Cria schema do tenant no PostgreSQL\n   */\n  private async createTenantSchema(slug: string): Promise<void> {\n    const schemaName = `tenant_${slug}`;\n    \n    try {\n      // Criar schema\n      await this.prisma.$executeRawUnsafe(`CREATE SCHEMA IF NOT EXISTS \"${schemaName}\"`);\n      \n      // Criar tabelas específicas do tenant se necessário\n      // Por exemplo: logs, configurações customizadas, etc.\n      \n      this.logger.debug(`Schema criado: ${schemaName}`);\n    } catch (error) {\n      this.logger.error(`Erro ao criar schema ${schemaName}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Invalida cache da organização\n   */\n  private async invalidateOrganizationCache(slug: string): Promise<void> {\n    const cacheKey = TenantMiddleware.generateCacheKey(slug, 'organization');\n    await this.cacheService.del(cacheKey);\n  }\n\n  /**\n   * Valida limites do plano\n   */\n  async validatePlanLimits(organizationId: string, resource: string): Promise<boolean> {\n    const organization = await this.prisma.organization.findUnique({\n      where: { id: organizationId },\n      select: { planLimits: true }\n    });\n\n    if (!organization) {\n      return false;\n    }\n\n    const limits = organization.planLimits as any;\n    \n    // Se limite é -1, é ilimitado\n    if (limits[resource] === -1) {\n      return true;\n    }\n\n    // Verificar uso atual vs limite\n    const currentUsage = await this.getCurrentUsage(organizationId, resource);\n    return currentUsage < limits[resource];\n  }\n\n  /**\n   * Obtém uso atual de um recurso\n   */\n  private async getCurrentUsage(organizationId: string, resource: string): Promise<number> {\n    switch (resource) {\n      case 'campaigns':\n        return await this.prisma.campaign.count({\n          where: { organizationId }\n        });\n      case 'users':\n        return await this.prisma.user.count({\n          where: { organizationId, isActive: true }\n        });\n      default:\n        return 0;\n    }\n  }\n}"],"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","ignoreList":[]}