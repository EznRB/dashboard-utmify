71669b5d26b25bd916ae98776e369a2b
/* istanbul ignore next */
function cov_soh6ce38k() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant.service.ts";
  var hash = "e773ccc967b33cd1f558e419b989e2bb3d1f75fc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 18,
          column: 20
        },
        end: {
          line: 330,
          column: 1
        }
      },
      "14": {
        start: {
          line: 21,
          column: 13
        },
        end: {
          line: 21,
          column: 45
        }
      },
      "15": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 19
        }
      },
      "16": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 29
        }
      },
      "17": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "18": {
        start: {
          line: 31,
          column: 89
        },
        end: {
          line: 31,
          column: 93
        }
      },
      "19": {
        start: {
          line: 33,
          column: 21
        },
        end: {
          line: 33,
          column: 68
        }
      },
      "20": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "21": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "22": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 85
        }
      },
      "23": {
        start: {
          line: 42,
          column: 29
        },
        end: {
          line: 44,
          column: 10
        }
      },
      "24": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "25": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 88
        }
      },
      "26": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "27": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 82,
          column: 14
        }
      },
      "28": {
        start: {
          line: 51,
          column: 37
        },
        end: {
          line: 63,
          column: 18
        }
      },
      "29": {
        start: {
          line: 65,
          column: 31
        },
        end: {
          line: 65,
          column: 50
        }
      },
      "30": {
        start: {
          line: 66,
          column: 37
        },
        end: {
          line: 66,
          column: 73
        }
      },
      "31": {
        start: {
          line: 68,
          column: 30
        },
        end: {
          line: 78,
          column: 18
        }
      },
      "32": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 52
        }
      },
      "33": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 47
        }
      },
      "34": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 89
        }
      },
      "35": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 57
        }
      },
      "36": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 26
        }
      },
      "37": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 90
        }
      },
      "38": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 72
        }
      },
      "39": {
        start: {
          line: 97,
          column: 25
        },
        end: {
          line: 97,
          column: 80
        }
      },
      "40": {
        start: {
          line: 99,
          column: 23
        },
        end: {
          line: 99,
          column: 60
        }
      },
      "41": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "42": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 38
        }
      },
      "43": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 126,
          column: 10
        }
      },
      "44": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "45": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 81
        }
      },
      "46": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 92
        }
      },
      "47": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 28
        }
      },
      "48": {
        start: {
          line: 138,
          column: 29
        },
        end: {
          line: 140,
          column: 10
        }
      },
      "49": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "50": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 71
        }
      },
      "51": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 150,
          column: 10
        }
      },
      "52": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 66
        }
      },
      "53": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 67
        }
      },
      "54": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 23
        }
      },
      "55": {
        start: {
          line: 160,
          column: 29
        },
        end: {
          line: 162,
          column: 10
        }
      },
      "56": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "57": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 71
        }
      },
      "58": {
        start: {
          line: 167,
          column: 29
        },
        end: {
          line: 172,
          column: 10
        }
      },
      "59": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "60": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 83
        }
      },
      "61": {
        start: {
          line: 178,
          column: 29
        },
        end: {
          line: 178,
          column: 39
        }
      },
      "62": {
        start: {
          line: 179,
          column: 23
        },
        end: {
          line: 179,
          column: 42
        }
      },
      "63": {
        start: {
          line: 180,
          column: 29
        },
        end: {
          line: 180,
          column: 64
        }
      },
      "64": {
        start: {
          line: 181,
          column: 21
        },
        end: {
          line: 191,
          column: 10
        }
      },
      "65": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 92
        }
      },
      "66": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 38
        }
      },
      "67": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "68": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 79
        }
      },
      "69": {
        start: {
          line: 204,
          column: 21
        },
        end: {
          line: 209,
          column: 10
        }
      },
      "70": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "71": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 85
        }
      },
      "72": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "73": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 99
        }
      },
      "74": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 219,
          column: 11
        }
      },
      "75": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 59
        }
      },
      "76": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 33
        }
      },
      "77": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 235,
          column: 30
        }
      },
      "78": {
        start: {
          line: 241,
          column: 23
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "79": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 32
        }
      },
      "80": {
        start: {
          line: 273,
          column: 27
        },
        end: {
          line: 273,
          column: 43
        }
      },
      "81": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "82": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 95
        }
      },
      "83": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 62
        }
      },
      "84": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 86
        }
      },
      "85": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 24
        }
      },
      "86": {
        start: {
          line: 290,
          column: 25
        },
        end: {
          line: 290,
          column: 80
        }
      },
      "87": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 46
        }
      },
      "88": {
        start: {
          line: 297,
          column: 29
        },
        end: {
          line: 300,
          column: 10
        }
      },
      "89": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "90": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 25
        }
      },
      "91": {
        start: {
          line: 304,
          column: 23
        },
        end: {
          line: 304,
          column: 46
        }
      },
      "92": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "93": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 24
        }
      },
      "94": {
        start: {
          line: 310,
          column: 29
        },
        end: {
          line: 310,
          column: 81
        }
      },
      "95": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 47
        }
      },
      "96": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "97": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 321,
          column: 19
        }
      },
      "98": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 325,
          column: 19
        }
      },
      "99": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 25
        }
      },
      "100": {
        start: {
          line: 331,
          column: 0
        },
        end: {
          line: 334,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 38
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 30
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 49,
            column: 58
          },
          end: {
            line: 49,
            column: 59
          }
        },
        loc: {
          start: {
            line: 49,
            column: 72
          },
          end: {
            line: 82,
            column: 13
          }
        },
        line: 49
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 96
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 51
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 137
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 49
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 159
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 60
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 199
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 23
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 226
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 35
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 240
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 35
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 272
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 44
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 289
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 55
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 296
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        },
        loc: {
          start: {
            line: 316,
            column: 52
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 316
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 33,
            column: 21
          },
          end: {
            line: 33,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 21
          },
          end: {
            line: 33,
            column: 33
          }
        }, {
          start: {
            line: 33,
            column: 37
          },
          end: {
            line: 33,
            column: 68
          }
        }],
        line: 33
      },
      "14": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "15": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "16": {
        loc: {
          start: {
            line: 55,
            column: 34
          },
          end: {
            line: 55,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 34
          },
          end: {
            line: 55,
            column: 50
          }
        }, {
          start: {
            line: 55,
            column: 54
          },
          end: {
            line: 55,
            column: 70
          }
        }],
        line: 55
      },
      "17": {
        loc: {
          start: {
            line: 56,
            column: 62
          },
          end: {
            line: 56,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 62
          },
          end: {
            line: 56,
            column: 78
          }
        }, {
          start: {
            line: 56,
            column: 82
          },
          end: {
            line: 56,
            column: 98
          }
        }],
        line: 56
      },
      "18": {
        loc: {
          start: {
            line: 57,
            column: 38
          },
          end: {
            line: 57,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 38
          },
          end: {
            line: 57,
            column: 58
          }
        }, {
          start: {
            line: 57,
            column: 62
          },
          end: {
            line: 57,
            column: 72
          }
        }],
        line: 57
      },
      "19": {
        loc: {
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 58,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 58,
            column: 50
          }
        }, {
          start: {
            line: 58,
            column: 54
          },
          end: {
            line: 58,
            column: 59
          }
        }],
        line: 58
      },
      "20": {
        loc: {
          start: {
            line: 59,
            column: 34
          },
          end: {
            line: 59,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 34
          },
          end: {
            line: 59,
            column: 50
          }
        }, {
          start: {
            line: 59,
            column: 54
          },
          end: {
            line: 59,
            column: 59
          }
        }],
        line: 59
      },
      "21": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "22": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "23": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "24": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "25": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "26": {
        loc: {
          start: {
            line: 185,
            column: 27
          },
          end: {
            line: 185,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 27
          },
          end: {
            line: 185,
            column: 47
          }
        }, {
          start: {
            line: 185,
            column: 51
          },
          end: {
            line: 185,
            column: 53
          }
        }],
        line: 185
      },
      "27": {
        loc: {
          start: {
            line: 186,
            column: 26
          },
          end: {
            line: 186,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 26
          },
          end: {
            line: 186,
            column: 45
          }
        }, {
          start: {
            line: 186,
            column: 49
          },
          end: {
            line: 186,
            column: 51
          }
        }],
        line: 186
      },
      "28": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "29": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "30": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "31": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "32": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "33": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 318,
            column: 12
          },
          end: {
            line: 321,
            column: 19
          }
        }, {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 325,
            column: 19
          }
        }, {
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 327,
            column: 25
          }
        }],
        line: 317
      },
      "34": {
        loc: {
          start: {
            line: 333,
            column: 37
          },
          end: {
            line: 333,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 333,
            column: 122
          },
          end: {
            line: 333,
            column: 124
          }
        }, {
          start: {
            line: 333,
            column: 127
          },
          end: {
            line: 333,
            column: 133
          }
        }],
        line: 333
      },
      "35": {
        loc: {
          start: {
            line: 333,
            column: 50
          },
          end: {
            line: 333,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 50
          },
          end: {
            line: 333,
            column: 86
          }
        }, {
          start: {
            line: 333,
            column: 90
          },
          end: {
            line: 333,
            column: 103
          }
        }],
        line: 333
      },
      "36": {
        loc: {
          start: {
            line: 333,
            column: 135
          },
          end: {
            line: 333,
            column: 229
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 333,
            column: 218
          },
          end: {
            line: 333,
            column: 220
          }
        }, {
          start: {
            line: 333,
            column: 223
          },
          end: {
            line: 333,
            column: 229
          }
        }],
        line: 333
      },
      "37": {
        loc: {
          start: {
            line: 333,
            column: 148
          },
          end: {
            line: 333,
            column: 199
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 148
          },
          end: {
            line: 333,
            column: 183
          }
        }, {
          start: {
            line: 333,
            column: 187
          },
          end: {
            line: 333,
            column: 199
          }
        }],
        line: 333
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant.service.ts"],
      sourcesContent: ["import { Injectable, Logger, NotFoundException, BadRequestException, ConflictException } from '@nestjs/common';\nimport { PrismaService } from '../database/prisma.service';\nimport { CacheService } from './cache.service';\nimport { TenantMiddleware } from '../middleware/tenant.middleware';\nimport { PlanType, UserRole } from '@prisma/client';\nimport { nanoid } from 'nanoid';\n\nexport interface CreateOrganizationDto {\n  name: string;\n  slug?: string;\n  planType?: PlanType;\n  billingEmail?: string;\n  timezone?: string;\n  currency?: string;\n  ownerEmail: string;\n  ownerFirstName: string;\n  ownerLastName: string;\n  ownerPassword: string;\n}\n\nexport interface UpdateOrganizationDto {\n  name?: string;\n  billingEmail?: string;\n  timezone?: string;\n  currency?: string;\n  planType?: PlanType;\n  customization?: {\n    logo?: string;\n    primaryColor?: string;\n    secondaryColor?: string;\n    theme?: 'light' | 'dark';\n  };\n}\n\nexport interface InviteUserDto {\n  email: string;\n  role: UserRole;\n  firstName?: string;\n  lastName?: string;\n}\n\n@Injectable()\nexport class TenantService {\n  private readonly logger = new Logger(TenantService.name);\n  private readonly CACHE_TTL = 300; // 5 minutos\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly cacheService: CacheService,\n  ) {}\n\n  /**\n   * Cria uma nova organiza\xE7\xE3o com usu\xE1rio owner\n   */\n  async createOrganization(data: CreateOrganizationDto) {\n    const { ownerEmail, ownerFirstName, ownerLastName, ownerPassword, ...orgData } = data;\n\n    // Gerar slug se n\xE3o fornecido\n    const slug = orgData.slug || this.generateSlug(orgData.name);\n\n    // Verificar se slug j\xE1 existe\n    const existingOrg = await this.prisma.organization.findUnique({\n      where: { slug }\n    });\n\n    if (existingOrg) {\n      throw new ConflictException(`Organiza\xE7\xE3o com slug '${slug}' j\xE1 existe.`);\n    }\n\n    // Verificar se email do owner j\xE1 existe\n    const existingUser = await this.prisma.user.findUnique({\n      where: { email: ownerEmail }\n    });\n\n    if (existingUser) {\n      throw new ConflictException(`Usu\xE1rio com email '${ownerEmail}' j\xE1 existe.`);\n    }\n\n    try {\n      const result = await this.prisma.$transaction(async (tx) => {\n        // Criar organiza\xE7\xE3o\n        const organization = await tx.organization.create({\n          data: {\n            name: orgData.name,\n            slug,\n            planType: orgData.planType || PlanType.STARTER,\n            planLimits: this.getDefaultPlanLimits(orgData.planType || PlanType.STARTER),\n            billingEmail: orgData.billingEmail || ownerEmail,\n            timezone: orgData.timezone || 'UTC',\n            currency: orgData.currency || 'USD',\n            isActive: true,\n            trialEndsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dias\n          }\n        });\n\n        // Hash da senha\n        const bcrypt = require('bcryptjs');\n        const passwordHash = await bcrypt.hash(ownerPassword, 12);\n\n        // Criar usu\xE1rio owner\n        const owner = await tx.user.create({\n          data: {\n            email: ownerEmail,\n            passwordHash,\n            firstName: ownerFirstName,\n            lastName: ownerLastName,\n            role: UserRole.OWNER,\n            organizationId: organization.id,\n            isActive: true,\n          }\n        });\n\n        // Criar schema do tenant\n        await this.createTenantSchema(slug);\n\n        return { organization, owner };\n      });\n\n      this.logger.log(`Organiza\xE7\xE3o criada: ${result.organization.name} (${slug})`);\n      \n      // Limpar cache\n      await this.invalidateOrganizationCache(slug);\n\n      return result;\n    } catch (error) {\n      this.logger.error(`Erro ao criar organiza\xE7\xE3o: ${error.message}`, error.stack);\n      throw new BadRequestException('Erro ao criar organiza\xE7\xE3o.');\n    }\n  }\n\n  /**\n   * Busca organiza\xE7\xE3o por slug com cache\n   */\n  async getOrganizationBySlug(slug: string) {\n    const cacheKey = TenantMiddleware.generateCacheKey(slug, 'organization');\n    \n    // Tentar buscar no cache\n    const cached = await this.cacheService.get(cacheKey);\n    if (cached) {\n      return JSON.parse(cached);\n    }\n\n    // Buscar no banco\n    const organization = await this.prisma.organization.findUnique({\n      where: { slug, isActive: true },\n      include: {\n        users: {\n          select: {\n            id: true,\n            email: true,\n            firstName: true,\n            lastName: true,\n            role: true,\n            isActive: true,\n            lastLoginAt: true,\n            createdAt: true,\n          }\n        },\n        _count: {\n          select: {\n            campaigns: true,\n            users: true,\n          }\n        }\n      }\n    });\n\n    if (!organization) {\n      throw new NotFoundException(`Organiza\xE7\xE3o '${slug}' n\xE3o encontrada.`);\n    }\n\n    // Salvar no cache\n    await this.cacheService.set(cacheKey, JSON.stringify(organization), this.CACHE_TTL);\n\n    return organization;\n  }\n\n  /**\n   * Atualiza configura\xE7\xF5es da organiza\xE7\xE3o\n   */\n  async updateOrganization(organizationId: string, data: UpdateOrganizationDto) {\n    const organization = await this.prisma.organization.findUnique({\n      where: { id: organizationId }\n    });\n\n    if (!organization) {\n      throw new NotFoundException('Organiza\xE7\xE3o n\xE3o encontrada.');\n    }\n\n    const updated = await this.prisma.organization.update({\n      where: { id: organizationId },\n      data: {\n        ...data,\n        updatedAt: new Date(),\n      }\n    });\n\n    // Limpar cache\n    await this.invalidateOrganizationCache(organization.slug);\n\n    this.logger.log(`Organiza\xE7\xE3o atualizada: ${updated.name}`);\n    return updated;\n  }\n\n  /**\n   * Convida usu\xE1rio para organiza\xE7\xE3o\n   */\n  async inviteUser(organizationId: string, inviteData: InviteUserDto) {\n    const organization = await this.prisma.organization.findUnique({\n      where: { id: organizationId }\n    });\n\n    if (!organization) {\n      throw new NotFoundException('Organiza\xE7\xE3o n\xE3o encontrada.');\n    }\n\n    // Verificar se email j\xE1 existe na organiza\xE7\xE3o\n    const existingUser = await this.prisma.user.findFirst({\n      where: {\n        email: inviteData.email,\n        organizationId\n      }\n    });\n\n    if (existingUser) {\n      throw new ConflictException('Usu\xE1rio j\xE1 faz parte desta organiza\xE7\xE3o.');\n    }\n\n    // Criar convite (implementar tabela de convites se necess\xE1rio)\n    // Por enquanto, criar usu\xE1rio inativo que precisa ativar conta\n    const tempPassword = nanoid(12);\n    const bcrypt = require('bcryptjs');\n    const passwordHash = await bcrypt.hash(tempPassword, 12);\n\n    const user = await this.prisma.user.create({\n      data: {\n        email: inviteData.email,\n        passwordHash,\n        firstName: inviteData.firstName || '',\n        lastName: inviteData.lastName || '',\n        role: inviteData.role,\n        organizationId,\n        isActive: false, // Usu\xE1rio precisa ativar conta\n      }\n    });\n\n    // TODO: Enviar email de convite\n    this.logger.log(`Usu\xE1rio convidado: ${inviteData.email} para ${organization.name}`);\n\n    return { user, tempPassword };\n  }\n\n  /**\n   * Remove usu\xE1rio da organiza\xE7\xE3o\n   */\n  async removeUser(organizationId: string, userId: string, currentUserId: string) {\n    // Verificar se n\xE3o est\xE1 tentando remover a si mesmo\n    if (userId === currentUserId) {\n      throw new BadRequestException('Voc\xEA n\xE3o pode remover a si mesmo.');\n    }\n\n    const user = await this.prisma.user.findFirst({\n      where: {\n        id: userId,\n        organizationId\n      }\n    });\n\n    if (!user) {\n      throw new NotFoundException('Usu\xE1rio n\xE3o encontrado nesta organiza\xE7\xE3o.');\n    }\n\n    // N\xE3o permitir remover o owner\n    if (user.role === UserRole.OWNER) {\n      throw new BadRequestException('N\xE3o \xE9 poss\xEDvel remover o propriet\xE1rio da organiza\xE7\xE3o.');\n    }\n\n    await this.prisma.user.delete({\n      where: { id: userId }\n    });\n\n    this.logger.log(`Usu\xE1rio removido: ${user.email}`);\n    return { success: true };\n  }\n\n  /**\n   * Gera slug a partir do nome\n   */\n  private generateSlug(name: string): string {\n    return name\n      .toLowerCase()\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '') // Remove acentos\n      .replace(/[^a-z0-9\\s-]/g, '') // Remove caracteres especiais\n      .replace(/\\s+/g, '-') // Substitui espa\xE7os por h\xEDfens\n      .replace(/-+/g, '-') // Remove h\xEDfens duplicados\n      .trim()\n      .substring(0, 50); // Limita tamanho\n  }\n\n  /**\n   * Retorna limites padr\xE3o por plano\n   */\n  private getDefaultPlanLimits(planType: PlanType) {\n    const limits = {\n      [PlanType.STARTER]: {\n        campaigns: 5,\n        users: 2,\n        apiRequests: 1000,\n        dataRetention: 90,\n        customDomain: false,\n        advancedReports: false,\n      },\n      [PlanType.PROFESSIONAL]: {\n        campaigns: 50,\n        users: 10,\n        apiRequests: 10000,\n        dataRetention: 365,\n        customDomain: true,\n        advancedReports: true,\n      },\n      [PlanType.ENTERPRISE]: {\n        campaigns: -1, // Ilimitado\n        users: -1,\n        apiRequests: -1,\n        dataRetention: -1,\n        customDomain: true,\n        advancedReports: true,\n      },\n    };\n\n    return limits[planType];\n  }\n\n  /**\n   * Cria schema do tenant no PostgreSQL\n   */\n  private async createTenantSchema(slug: string): Promise<void> {\n    const schemaName = `tenant_${slug}`;\n    \n    try {\n      // Criar schema\n      await this.prisma.$executeRawUnsafe(`CREATE SCHEMA IF NOT EXISTS \"${schemaName}\"`);\n      \n      // Criar tabelas espec\xEDficas do tenant se necess\xE1rio\n      // Por exemplo: logs, configura\xE7\xF5es customizadas, etc.\n      \n      this.logger.debug(`Schema criado: ${schemaName}`);\n    } catch (error) {\n      this.logger.error(`Erro ao criar schema ${schemaName}: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Invalida cache da organiza\xE7\xE3o\n   */\n  private async invalidateOrganizationCache(slug: string): Promise<void> {\n    const cacheKey = TenantMiddleware.generateCacheKey(slug, 'organization');\n    await this.cacheService.del(cacheKey);\n  }\n\n  /**\n   * Valida limites do plano\n   */\n  async validatePlanLimits(organizationId: string, resource: string): Promise<boolean> {\n    const organization = await this.prisma.organization.findUnique({\n      where: { id: organizationId },\n      select: { planLimits: true }\n    });\n\n    if (!organization) {\n      return false;\n    }\n\n    const limits = organization.planLimits as any;\n    \n    // Se limite \xE9 -1, \xE9 ilimitado\n    if (limits[resource] === -1) {\n      return true;\n    }\n\n    // Verificar uso atual vs limite\n    const currentUsage = await this.getCurrentUsage(organizationId, resource);\n    return currentUsage < limits[resource];\n  }\n\n  /**\n   * Obt\xE9m uso atual de um recurso\n   */\n  private async getCurrentUsage(organizationId: string, resource: string): Promise<number> {\n    switch (resource) {\n      case 'campaigns':\n        return await this.prisma.campaign.count({\n          where: { organizationId }\n        });\n      case 'users':\n        return await this.prisma.user.count({\n          where: { organizationId, isActive: true }\n        });\n      default:\n        return 0;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e773ccc967b33cd1f558e419b989e2bb3d1f75fc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_soh6ce38k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_soh6ce38k();
var __decorate =
/* istanbul ignore next */
(cov_soh6ce38k().s[0]++,
/* istanbul ignore next */
(cov_soh6ce38k().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_soh6ce38k().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_soh6ce38k().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_soh6ce38k().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_soh6ce38k().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_soh6ce38k().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_soh6ce38k().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_soh6ce38k().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_soh6ce38k().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_soh6ce38k().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_soh6ce38k().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_soh6ce38k().b[3][0]++;
    cov_soh6ce38k().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_soh6ce38k().b[3][1]++;
    cov_soh6ce38k().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_soh6ce38k().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_soh6ce38k().b[5][0]++;
        cov_soh6ce38k().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_soh6ce38k().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_soh6ce38k().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_soh6ce38k().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_soh6ce38k().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_soh6ce38k().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_soh6ce38k().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_soh6ce38k().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_soh6ce38k().s[9]++;
  return /* istanbul ignore next */(cov_soh6ce38k().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_soh6ce38k().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_soh6ce38k().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_soh6ce38k().s[10]++,
/* istanbul ignore next */
(cov_soh6ce38k().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_soh6ce38k().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_soh6ce38k().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_soh6ce38k().f[1]++;
  cov_soh6ce38k().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_soh6ce38k().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_soh6ce38k().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_soh6ce38k().b[11][0]++;
    cov_soh6ce38k().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_soh6ce38k().b[11][1]++;
  }
}));
var TenantService_1;
var _a, _b;
import { Injectable, Logger, NotFoundException, BadRequestException, ConflictException } from '@nestjs/common';
import { PrismaService } from '../database/prisma.service';
import { CacheService } from './cache.service';
import { TenantMiddleware } from '../middleware/tenant.middleware';
import { PlanType, UserRole } from '@prisma/client';
import { nanoid } from 'nanoid';
let TenantService =
/* istanbul ignore next */
(cov_soh6ce38k().s[13]++, TenantService_1 = class TenantService {
  prisma;
  cacheService;
  logger =
  /* istanbul ignore next */
  (cov_soh6ce38k().s[14]++, new Logger(TenantService_1.name));
  CACHE_TTL =
  /* istanbul ignore next */
  (cov_soh6ce38k().s[15]++, 300); // 5 minutos
  constructor(prisma, cacheService) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[2]++;
    cov_soh6ce38k().s[16]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_soh6ce38k().s[17]++;
    this.cacheService = cacheService;
  }
  /**
   * Cria uma nova organização com usuário owner
   */
  async createOrganization(data) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[3]++;
    const {
      ownerEmail,
      ownerFirstName,
      ownerLastName,
      ownerPassword,
      ...orgData
    } =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[18]++, data);
    // Gerar slug se não fornecido
    const slug =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[19]++,
    /* istanbul ignore next */
    (cov_soh6ce38k().b[13][0]++, orgData.slug) ||
    /* istanbul ignore next */
    (cov_soh6ce38k().b[13][1]++, this.generateSlug(orgData.name)));
    // Verificar se slug já existe
    const existingOrg =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[20]++, await this.prisma.organization.findUnique({
      where: {
        slug
      }
    }));
    /* istanbul ignore next */
    cov_soh6ce38k().s[21]++;
    if (existingOrg) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[14][0]++;
      cov_soh6ce38k().s[22]++;
      throw new ConflictException(`Organização com slug '${slug}' já existe.`);
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[14][1]++;
    }
    // Verificar se email do owner já existe
    const existingUser =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[23]++, await this.prisma.user.findUnique({
      where: {
        email: ownerEmail
      }
    }));
    /* istanbul ignore next */
    cov_soh6ce38k().s[24]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[15][0]++;
      cov_soh6ce38k().s[25]++;
      throw new ConflictException(`Usuário com email '${ownerEmail}' já existe.`);
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[15][1]++;
    }
    cov_soh6ce38k().s[26]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_soh6ce38k().s[27]++, await this.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_soh6ce38k().f[4]++;
        // Criar organização
        const organization =
        /* istanbul ignore next */
        (cov_soh6ce38k().s[28]++, await tx.organization.create({
          data: {
            name: orgData.name,
            slug,
            planType:
            /* istanbul ignore next */
            (cov_soh6ce38k().b[16][0]++, orgData.planType) ||
            /* istanbul ignore next */
            (cov_soh6ce38k().b[16][1]++, PlanType.STARTER),
            planLimits: this.getDefaultPlanLimits(
            /* istanbul ignore next */
            (cov_soh6ce38k().b[17][0]++, orgData.planType) ||
            /* istanbul ignore next */
            (cov_soh6ce38k().b[17][1]++, PlanType.STARTER)),
            billingEmail:
            /* istanbul ignore next */
            (cov_soh6ce38k().b[18][0]++, orgData.billingEmail) ||
            /* istanbul ignore next */
            (cov_soh6ce38k().b[18][1]++, ownerEmail),
            timezone:
            /* istanbul ignore next */
            (cov_soh6ce38k().b[19][0]++, orgData.timezone) ||
            /* istanbul ignore next */
            (cov_soh6ce38k().b[19][1]++, 'UTC'),
            currency:
            /* istanbul ignore next */
            (cov_soh6ce38k().b[20][0]++, orgData.currency) ||
            /* istanbul ignore next */
            (cov_soh6ce38k().b[20][1]++, 'USD'),
            isActive: true,
            trialEndsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 dias
          }
        }));
        // Hash da senha
        const bcrypt =
        /* istanbul ignore next */
        (cov_soh6ce38k().s[29]++, require('bcryptjs'));
        const passwordHash =
        /* istanbul ignore next */
        (cov_soh6ce38k().s[30]++, await bcrypt.hash(ownerPassword, 12));
        // Criar usuário owner
        const owner =
        /* istanbul ignore next */
        (cov_soh6ce38k().s[31]++, await tx.user.create({
          data: {
            email: ownerEmail,
            passwordHash,
            firstName: ownerFirstName,
            lastName: ownerLastName,
            role: UserRole.OWNER,
            organizationId: organization.id,
            isActive: true
          }
        }));
        // Criar schema do tenant
        /* istanbul ignore next */
        cov_soh6ce38k().s[32]++;
        await this.createTenantSchema(slug);
        /* istanbul ignore next */
        cov_soh6ce38k().s[33]++;
        return {
          organization,
          owner
        };
      }));
      /* istanbul ignore next */
      cov_soh6ce38k().s[34]++;
      this.logger.log(`Organização criada: ${result.organization.name} (${slug})`);
      // Limpar cache
      /* istanbul ignore next */
      cov_soh6ce38k().s[35]++;
      await this.invalidateOrganizationCache(slug);
      /* istanbul ignore next */
      cov_soh6ce38k().s[36]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_soh6ce38k().s[37]++;
      this.logger.error(`Erro ao criar organização: ${error.message}`, error.stack);
      /* istanbul ignore next */
      cov_soh6ce38k().s[38]++;
      throw new BadRequestException('Erro ao criar organização.');
    }
  }
  /**
   * Busca organização por slug com cache
   */
  async getOrganizationBySlug(slug) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[5]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[39]++, TenantMiddleware.generateCacheKey(slug, 'organization'));
    // Tentar buscar no cache
    const cached =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[40]++, await this.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_soh6ce38k().s[41]++;
    if (cached) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[21][0]++;
      cov_soh6ce38k().s[42]++;
      return JSON.parse(cached);
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[21][1]++;
    }
    // Buscar no banco
    const organization =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[43]++, await this.prisma.organization.findUnique({
      where: {
        slug,
        isActive: true
      },
      include: {
        users: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true,
            role: true,
            isActive: true,
            lastLoginAt: true,
            createdAt: true
          }
        },
        _count: {
          select: {
            campaigns: true,
            users: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_soh6ce38k().s[44]++;
    if (!organization) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[22][0]++;
      cov_soh6ce38k().s[45]++;
      throw new NotFoundException(`Organização '${slug}' não encontrada.`);
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[22][1]++;
    }
    // Salvar no cache
    cov_soh6ce38k().s[46]++;
    await this.cacheService.set(cacheKey, JSON.stringify(organization), this.CACHE_TTL);
    /* istanbul ignore next */
    cov_soh6ce38k().s[47]++;
    return organization;
  }
  /**
   * Atualiza configurações da organização
   */
  async updateOrganization(organizationId, data) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[6]++;
    const organization =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[48]++, await this.prisma.organization.findUnique({
      where: {
        id: organizationId
      }
    }));
    /* istanbul ignore next */
    cov_soh6ce38k().s[49]++;
    if (!organization) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[23][0]++;
      cov_soh6ce38k().s[50]++;
      throw new NotFoundException('Organização não encontrada.');
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[23][1]++;
    }
    const updated =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[51]++, await this.prisma.organization.update({
      where: {
        id: organizationId
      },
      data: {
        ...data,
        updatedAt: new Date()
      }
    }));
    // Limpar cache
    /* istanbul ignore next */
    cov_soh6ce38k().s[52]++;
    await this.invalidateOrganizationCache(organization.slug);
    /* istanbul ignore next */
    cov_soh6ce38k().s[53]++;
    this.logger.log(`Organização atualizada: ${updated.name}`);
    /* istanbul ignore next */
    cov_soh6ce38k().s[54]++;
    return updated;
  }
  /**
   * Convida usuário para organização
   */
  async inviteUser(organizationId, inviteData) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[7]++;
    const organization =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[55]++, await this.prisma.organization.findUnique({
      where: {
        id: organizationId
      }
    }));
    /* istanbul ignore next */
    cov_soh6ce38k().s[56]++;
    if (!organization) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[24][0]++;
      cov_soh6ce38k().s[57]++;
      throw new NotFoundException('Organização não encontrada.');
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[24][1]++;
    }
    // Verificar se email já existe na organização
    const existingUser =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[58]++, await this.prisma.user.findFirst({
      where: {
        email: inviteData.email,
        organizationId
      }
    }));
    /* istanbul ignore next */
    cov_soh6ce38k().s[59]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[25][0]++;
      cov_soh6ce38k().s[60]++;
      throw new ConflictException('Usuário já faz parte desta organização.');
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[25][1]++;
    }
    // Criar convite (implementar tabela de convites se necessário)
    // Por enquanto, criar usuário inativo que precisa ativar conta
    const tempPassword =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[61]++, nanoid(12));
    const bcrypt =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[62]++, require('bcryptjs'));
    const passwordHash =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[63]++, await bcrypt.hash(tempPassword, 12));
    const user =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[64]++, await this.prisma.user.create({
      data: {
        email: inviteData.email,
        passwordHash,
        firstName:
        /* istanbul ignore next */
        (cov_soh6ce38k().b[26][0]++, inviteData.firstName) ||
        /* istanbul ignore next */
        (cov_soh6ce38k().b[26][1]++, ''),
        lastName:
        /* istanbul ignore next */
        (cov_soh6ce38k().b[27][0]++, inviteData.lastName) ||
        /* istanbul ignore next */
        (cov_soh6ce38k().b[27][1]++, ''),
        role: inviteData.role,
        organizationId,
        isActive: false // Usuário precisa ativar conta
      }
    }));
    // TODO: Enviar email de convite
    /* istanbul ignore next */
    cov_soh6ce38k().s[65]++;
    this.logger.log(`Usuário convidado: ${inviteData.email} para ${organization.name}`);
    /* istanbul ignore next */
    cov_soh6ce38k().s[66]++;
    return {
      user,
      tempPassword
    };
  }
  /**
   * Remove usuário da organização
   */
  async removeUser(organizationId, userId, currentUserId) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[8]++;
    cov_soh6ce38k().s[67]++;
    // Verificar se não está tentando remover a si mesmo
    if (userId === currentUserId) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[28][0]++;
      cov_soh6ce38k().s[68]++;
      throw new BadRequestException('Você não pode remover a si mesmo.');
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[28][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[69]++, await this.prisma.user.findFirst({
      where: {
        id: userId,
        organizationId
      }
    }));
    /* istanbul ignore next */
    cov_soh6ce38k().s[70]++;
    if (!user) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[29][0]++;
      cov_soh6ce38k().s[71]++;
      throw new NotFoundException('Usuário não encontrado nesta organização.');
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[29][1]++;
    }
    // Não permitir remover o owner
    cov_soh6ce38k().s[72]++;
    if (user.role === UserRole.OWNER) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[30][0]++;
      cov_soh6ce38k().s[73]++;
      throw new BadRequestException('Não é possível remover o proprietário da organização.');
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[30][1]++;
    }
    cov_soh6ce38k().s[74]++;
    await this.prisma.user.delete({
      where: {
        id: userId
      }
    });
    /* istanbul ignore next */
    cov_soh6ce38k().s[75]++;
    this.logger.log(`Usuário removido: ${user.email}`);
    /* istanbul ignore next */
    cov_soh6ce38k().s[76]++;
    return {
      success: true
    };
  }
  /**
   * Gera slug a partir do nome
   */
  generateSlug(name) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[9]++;
    cov_soh6ce38k().s[77]++;
    return name.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '') // Remove acentos
    .replace(/[^a-z0-9\s-]/g, '') // Remove caracteres especiais
    .replace(/\s+/g, '-') // Substitui espaços por hífens
    .replace(/-+/g, '-') // Remove hífens duplicados
    .trim().substring(0, 50); // Limita tamanho
  }
  /**
   * Retorna limites padrão por plano
   */
  getDefaultPlanLimits(planType) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[10]++;
    const limits =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[78]++, {
      [PlanType.STARTER]: {
        campaigns: 5,
        users: 2,
        apiRequests: 1000,
        dataRetention: 90,
        customDomain: false,
        advancedReports: false
      },
      [PlanType.PROFESSIONAL]: {
        campaigns: 50,
        users: 10,
        apiRequests: 10000,
        dataRetention: 365,
        customDomain: true,
        advancedReports: true
      },
      [PlanType.ENTERPRISE]: {
        campaigns: -1,
        // Ilimitado
        users: -1,
        apiRequests: -1,
        dataRetention: -1,
        customDomain: true,
        advancedReports: true
      }
    });
    /* istanbul ignore next */
    cov_soh6ce38k().s[79]++;
    return limits[planType];
  }
  /**
   * Cria schema do tenant no PostgreSQL
   */
  async createTenantSchema(slug) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[11]++;
    const schemaName =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[80]++, `tenant_${slug}`);
    /* istanbul ignore next */
    cov_soh6ce38k().s[81]++;
    try {
      /* istanbul ignore next */
      cov_soh6ce38k().s[82]++;
      // Criar schema
      await this.prisma.$executeRawUnsafe(`CREATE SCHEMA IF NOT EXISTS "${schemaName}"`);
      // Criar tabelas específicas do tenant se necessário
      // Por exemplo: logs, configurações customizadas, etc.
      /* istanbul ignore next */
      cov_soh6ce38k().s[83]++;
      this.logger.debug(`Schema criado: ${schemaName}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_soh6ce38k().s[84]++;
      this.logger.error(`Erro ao criar schema ${schemaName}: ${error.message}`);
      /* istanbul ignore next */
      cov_soh6ce38k().s[85]++;
      throw error;
    }
  }
  /**
   * Invalida cache da organização
   */
  async invalidateOrganizationCache(slug) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[12]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[86]++, TenantMiddleware.generateCacheKey(slug, 'organization'));
    /* istanbul ignore next */
    cov_soh6ce38k().s[87]++;
    await this.cacheService.del(cacheKey);
  }
  /**
   * Valida limites do plano
   */
  async validatePlanLimits(organizationId, resource) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[13]++;
    const organization =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[88]++, await this.prisma.organization.findUnique({
      where: {
        id: organizationId
      },
      select: {
        planLimits: true
      }
    }));
    /* istanbul ignore next */
    cov_soh6ce38k().s[89]++;
    if (!organization) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[31][0]++;
      cov_soh6ce38k().s[90]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[31][1]++;
    }
    const limits =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[91]++, organization.planLimits);
    // Se limite é -1, é ilimitado
    /* istanbul ignore next */
    cov_soh6ce38k().s[92]++;
    if (limits[resource] === -1) {
      /* istanbul ignore next */
      cov_soh6ce38k().b[32][0]++;
      cov_soh6ce38k().s[93]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_soh6ce38k().b[32][1]++;
    }
    // Verificar uso atual vs limite
    const currentUsage =
    /* istanbul ignore next */
    (cov_soh6ce38k().s[94]++, await this.getCurrentUsage(organizationId, resource));
    /* istanbul ignore next */
    cov_soh6ce38k().s[95]++;
    return currentUsage < limits[resource];
  }
  /**
   * Obtém uso atual de um recurso
   */
  async getCurrentUsage(organizationId, resource) {
    /* istanbul ignore next */
    cov_soh6ce38k().f[14]++;
    cov_soh6ce38k().s[96]++;
    switch (resource) {
      case 'campaigns':
        /* istanbul ignore next */
        cov_soh6ce38k().b[33][0]++;
        cov_soh6ce38k().s[97]++;
        return await this.prisma.campaign.count({
          where: {
            organizationId
          }
        });
      case 'users':
        /* istanbul ignore next */
        cov_soh6ce38k().b[33][1]++;
        cov_soh6ce38k().s[98]++;
        return await this.prisma.user.count({
          where: {
            organizationId,
            isActive: true
          }
        });
      default:
        /* istanbul ignore next */
        cov_soh6ce38k().b[33][2]++;
        cov_soh6ce38k().s[99]++;
        return 0;
    }
  }
});
/* istanbul ignore next */
cov_soh6ce38k().s[100]++;
TenantService = TenantService_1 = __decorate([Injectable(), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_soh6ce38k().b[35][0]++, typeof PrismaService !== "undefined") &&
/* istanbul ignore next */
(cov_soh6ce38k().b[35][1]++, PrismaService)) === "function" ?
/* istanbul ignore next */
(cov_soh6ce38k().b[34][0]++, _a) :
/* istanbul ignore next */
(cov_soh6ce38k().b[34][1]++, Object), typeof (_b =
/* istanbul ignore next */
(cov_soh6ce38k().b[37][0]++, typeof CacheService !== "undefined") &&
/* istanbul ignore next */
(cov_soh6ce38k().b[37][1]++, CacheService)) === "function" ?
/* istanbul ignore next */
(cov_soh6ce38k().b[36][0]++, _b) :
/* istanbul ignore next */
(cov_soh6ce38k().b[36][1]++, Object)])], TenantService);
export { TenantService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,