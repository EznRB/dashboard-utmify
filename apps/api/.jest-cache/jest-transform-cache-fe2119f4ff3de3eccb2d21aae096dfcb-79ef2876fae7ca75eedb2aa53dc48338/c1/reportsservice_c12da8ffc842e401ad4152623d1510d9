366895e1d0f93237a20b9de7f89ffdd7
/* istanbul ignore next */
function cov_78ak2no1v() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\reports.service.ts";
  var hash = "2e3cb0baa5117dd10a33084353f18ad898fa7634";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\reports.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 736,
          column: 1
        }
      },
      "14": {
        start: {
          line: 30,
          column: 13
        },
        end: {
          line: 30,
          column: 46
        }
      },
      "15": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 20
        }
      },
      "16": {
        start: {
          line: 32,
          column: 19
        },
        end: {
          line: 32,
          column: 28
        }
      },
      "17": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 29
        }
      },
      "18": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 27
        }
      },
      "19": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 27
        }
      },
      "20": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 23
        }
      },
      "21": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 29
        }
      },
      "22": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "23": {
        start: {
          line: 43,
          column: 26
        },
        end: {
          line: 69,
          column: 10
        }
      },
      "24": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 25
        }
      },
      "25": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 79,
          column: 10
        }
      },
      "26": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 78
        }
      },
      "27": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 24
        }
      },
      "28": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 85,
          column: 36
        }
      },
      "29": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 99,
          column: 10
        }
      },
      "30": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "31": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "32": {
        start: {
          line: 104,
          column: 33
        },
        end: {
          line: 112,
          column: 17
        }
      },
      "33": {
        start: {
          line: 113,
          column: 37
        },
        end: {
          line: 113,
          column: 86
        }
      },
      "34": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 117,
          column: 17
        }
      },
      "35": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 77
        }
      },
      "36": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 116,
          column: 46
        }
      },
      "37": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "38": {
        start: {
          line: 122,
          column: 33
        },
        end: {
          line: 122,
          column: 94
        }
      },
      "39": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 66
        }
      },
      "40": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 143,
          column: 17
        }
      },
      "41": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 103
        }
      },
      "42": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 65
        }
      },
      "43": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 142,
          column: 21
        }
      },
      "44": {
        start: {
          line: 130,
          column: 44
        },
        end: {
          line: 138,
          column: 25
        }
      },
      "45": {
        start: {
          line: 139,
          column: 24
        },
        end: {
          line: 141,
          column: 27
        }
      },
      "46": {
        start: {
          line: 145,
          column: 35
        },
        end: {
          line: 145,
          column: 57
        }
      },
      "47": {
        start: {
          line: 147,
          column: 34
        },
        end: {
          line: 155,
          column: 14
        }
      },
      "48": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 85
        }
      },
      "49": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 33
        }
      },
      "50": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "51": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 79
        }
      },
      "52": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 24
        }
      },
      "53": {
        start: {
          line: 174,
          column: 26
        },
        end: {
          line: 174,
          column: 36
        }
      },
      "54": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "55": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 86
        }
      },
      "56": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 74
        }
      },
      "57": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 83
        }
      },
      "58": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 83
        }
      },
      "59": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 83
        }
      },
      "60": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 81
        }
      },
      "61": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 82
        }
      },
      "62": {
        start: {
          line: 193,
          column: 48
        },
        end: {
          line: 193,
          column: 54
        }
      },
      "63": {
        start: {
          line: 195,
          column: 26
        },
        end: {
          line: 214,
          column: 10
        }
      },
      "64": {
        start: {
          line: 216,
          column: 21
        },
        end: {
          line: 235,
          column: 10
        }
      },
      "65": {
        start: {
          line: 217,
          column: 36
        },
        end: {
          line: 224,
          column: 18
        }
      },
      "66": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 85
        }
      },
      "67": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 70
        }
      },
      "68": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 73
        }
      },
      "69": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 85
        }
      },
      "70": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 79
        }
      },
      "71": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 27
        }
      },
      "72": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 234,
          column: 14
        }
      },
      "73": {
        start: {
          line: 237,
          column: 24
        },
        end: {
          line: 244,
          column: 14
        }
      },
      "74": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 82
        }
      },
      "75": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 67
        }
      },
      "76": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 64
        }
      },
      "77": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 82
        }
      },
      "78": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 70
        }
      },
      "79": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 23
        }
      },
      "80": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 83
        }
      },
      "81": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 71
        }
      },
      "82": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 75
        }
      },
      "83": {
        start: {
          line: 249,
          column: 23
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "84": {
        start: {
          line: 253,
          column: 40
        },
        end: {
          line: 258,
          column: 17
        }
      },
      "85": {
        start: {
          line: 263,
          column: 40
        },
        end: {
          line: 266,
          column: 17
        }
      },
      "86": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 279,
          column: 10
        }
      },
      "87": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 78
        }
      },
      "88": {
        start: {
          line: 287,
          column: 30
        },
        end: {
          line: 287,
          column: 36
        }
      },
      "89": {
        start: {
          line: 289,
          column: 29
        },
        end: {
          line: 304,
          column: 10
        }
      },
      "90": {
        start: {
          line: 305,
          column: 21
        },
        end: {
          line: 310,
          column: 11
        }
      },
      "91": {
        start: {
          line: 305,
          column: 48
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "92": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "93": {
        start: {
          line: 312,
          column: 21
        },
        end: {
          line: 312,
          column: 22
        }
      },
      "94": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 315,
          column: 20
        }
      },
      "95": {
        start: {
          line: 317,
          column: 24
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "96": {
        start: {
          line: 319,
          column: 53
        },
        end: {
          line: 319,
          column: 71
        }
      },
      "97": {
        start: {
          line: 324,
          column: 23
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "98": {
        start: {
          line: 328,
          column: 41
        },
        end: {
          line: 331,
          column: 17
        }
      },
      "99": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 344,
          column: 10
        }
      },
      "100": {
        start: {
          line: 347,
          column: 30
        },
        end: {
          line: 347,
          column: 36
        }
      },
      "101": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "102": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 104
        }
      },
      "103": {
        start: {
          line: 352,
          column: 34
        },
        end: {
          line: 352,
          column: 168
        }
      },
      "104": {
        start: {
          line: 353,
          column: 35
        },
        end: {
          line: 353,
          column: 183
        }
      },
      "105": {
        start: {
          line: 355,
          column: 24
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "106": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 367,
          column: 11
        }
      },
      "107": {
        start: {
          line: 361,
          column: 28
        },
        end: {
          line: 361,
          column: 63
        }
      },
      "108": {
        start: {
          line: 362,
          column: 29
        },
        end: {
          line: 362,
          column: 65
        }
      },
      "109": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 366,
          column: 14
        }
      },
      "110": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 378,
          column: 10
        }
      },
      "111": {
        start: {
          line: 382,
          column: 29
        },
        end: {
          line: 382,
          column: 97
        }
      },
      "112": {
        start: {
          line: 383,
          column: 27
        },
        end: {
          line: 383,
          column: 92
        }
      },
      "113": {
        start: {
          line: 384,
          column: 24
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "114": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 399,
          column: 10
        }
      },
      "115": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 78
        }
      },
      "116": {
        start: {
          line: 408,
          column: 23
        },
        end: {
          line: 414,
          column: 10
        }
      },
      "117": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "118": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 60
        }
      },
      "119": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "120": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 75
        }
      },
      "121": {
        start: {
          line: 422,
          column: 29
        },
        end: {
          line: 434,
          column: 10
        }
      },
      "122": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "123": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 456,
          column: 13
        }
      },
      "124": {
        start: {
          line: 440,
          column: 38
        },
        end: {
          line: 440,
          column: 78
        }
      },
      "125": {
        start: {
          line: 441,
          column: 20
        },
        end: {
          line: 441,
          column: 44
        }
      },
      "126": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 442,
          column: 46
        }
      },
      "127": {
        start: {
          line: 443,
          column: 20
        },
        end: {
          line: 443,
          column: 26
        }
      },
      "128": {
        start: {
          line: 445,
          column: 40
        },
        end: {
          line: 445,
          column: 78
        }
      },
      "129": {
        start: {
          line: 446,
          column: 20
        },
        end: {
          line: 446,
          column: 46
        }
      },
      "130": {
        start: {
          line: 447,
          column: 20
        },
        end: {
          line: 447,
          column: 48
        }
      },
      "131": {
        start: {
          line: 448,
          column: 20
        },
        end: {
          line: 448,
          column: 26
        }
      },
      "132": {
        start: {
          line: 450,
          column: 38
        },
        end: {
          line: 450,
          column: 74
        }
      },
      "133": {
        start: {
          line: 451,
          column: 20
        },
        end: {
          line: 451,
          column: 44
        }
      },
      "134": {
        start: {
          line: 452,
          column: 20
        },
        end: {
          line: 452,
          column: 46
        }
      },
      "135": {
        start: {
          line: 453,
          column: 20
        },
        end: {
          line: 453,
          column: 26
        }
      },
      "136": {
        start: {
          line: 455,
          column: 20
        },
        end: {
          line: 455,
          column: 90
        }
      },
      "137": {
        start: {
          line: 458,
          column: 34
        },
        end: {
          line: 466,
          column: 14
        }
      },
      "138": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 33
        }
      },
      "139": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 476,
          column: 15
        }
      },
      "140": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 24
        }
      },
      "141": {
        start: {
          line: 481,
          column: 25
        },
        end: {
          line: 481,
          column: 47
        }
      },
      "142": {
        start: {
          line: 482,
          column: 26
        },
        end: {
          line: 482,
          column: 60
        }
      },
      "143": {
        start: {
          line: 484,
          column: 21
        },
        end: {
          line: 484,
          column: 43
        }
      },
      "144": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 492,
          column: 9
        }
      },
      "145": {
        start: {
          line: 486,
          column: 28
        },
        end: {
          line: 486,
          column: 48
        }
      },
      "146": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 487,
          column: 38
        }
      },
      "147": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 491,
          column: 15
        }
      },
      "148": {
        start: {
          line: 490,
          column: 16
        },
        end: {
          line: 490,
          column: 53
        }
      },
      "149": {
        start: {
          line: 494,
          column: 23
        },
        end: {
          line: 494,
          column: 56
        }
      },
      "150": {
        start: {
          line: 496,
          column: 25
        },
        end: {
          line: 496,
          column: 58
        }
      },
      "151": {
        start: {
          line: 497,
          column: 24
        },
        end: {
          line: 497,
          column: 63
        }
      },
      "152": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 501,
          column: 10
        }
      },
      "153": {
        start: {
          line: 504,
          column: 21
        },
        end: {
          line: 504,
          column: 43
        }
      },
      "154": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 507,
          column: 9
        }
      },
      "155": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 63
        }
      },
      "156": {
        start: {
          line: 508,
          column: 24
        },
        end: {
          line: 508,
          column: 44
        }
      },
      "157": {
        start: {
          line: 509,
          column: 18
        },
        end: {
          line: 509,
          column: 42
        }
      },
      "158": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 513,
          column: 11
        }
      },
      "159": {
        start: {
          line: 511,
          column: 27
        },
        end: {
          line: 511,
          column: 108
        }
      },
      "160": {
        start: {
          line: 511,
          column: 59
        },
        end: {
          line: 511,
          column: 107
        }
      },
      "161": {
        start: {
          line: 512,
          column: 12
        },
        end: {
          line: 512,
          column: 43
        }
      },
      "162": {
        start: {
          line: 514,
          column: 23
        },
        end: {
          line: 514,
          column: 47
        }
      },
      "163": {
        start: {
          line: 515,
          column: 25
        },
        end: {
          line: 515,
          column: 57
        }
      },
      "164": {
        start: {
          line: 516,
          column: 24
        },
        end: {
          line: 516,
          column: 63
        }
      },
      "165": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 520,
          column: 10
        }
      },
      "166": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 525,
          column: 65
        }
      },
      "167": {
        start: {
          line: 529,
          column: 23
        },
        end: {
          line: 531,
          column: 10
        }
      },
      "168": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 534,
          column: 9
        }
      },
      "169": {
        start: {
          line: 533,
          column: 12
        },
        end: {
          line: 533,
          column: 60
        }
      },
      "170": {
        start: {
          line: 535,
          column: 27
        },
        end: {
          line: 535,
          column: 63
        }
      },
      "171": {
        start: {
          line: 536,
          column: 30
        },
        end: {
          line: 544,
          column: 10
        }
      },
      "172": {
        start: {
          line: 545,
          column: 8
        },
        end: {
          line: 548,
          column: 10
        }
      },
      "173": {
        start: {
          line: 551,
          column: 23
        },
        end: {
          line: 566,
          column: 10
        }
      },
      "174": {
        start: {
          line: 567,
          column: 8
        },
        end: {
          line: 569,
          column: 9
        }
      },
      "175": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 568,
          column: 78
        }
      },
      "176": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 570,
          column: 22
        }
      },
      "177": {
        start: {
          line: 574,
          column: 22
        },
        end: {
          line: 585,
          column: 9
        }
      },
      "178": {
        start: {
          line: 586,
          column: 24
        },
        end: {
          line: 608,
          column: 10
        }
      },
      "179": {
        start: {
          line: 609,
          column: 8
        },
        end: {
          line: 609,
          column: 23
        }
      },
      "180": {
        start: {
          line: 613,
          column: 27
        },
        end: {
          line: 615,
          column: 26
        }
      },
      "181": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 616,
          column: 77
        }
      },
      "182": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 626,
          column: 9
        }
      },
      "183": {
        start: {
          line: 620,
          column: 27
        },
        end: {
          line: 620,
          column: 57
        }
      },
      "184": {
        start: {
          line: 621,
          column: 12
        },
        end: {
          line: 621,
          column: 54
        }
      },
      "185": {
        start: {
          line: 624,
          column: 12
        },
        end: {
          line: 624,
          column: 77
        }
      },
      "186": {
        start: {
          line: 625,
          column: 12
        },
        end: {
          line: 625,
          column: 24
        }
      },
      "187": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 634,
          column: 9
        }
      },
      "188": {
        start: {
          line: 630,
          column: 12
        },
        end: {
          line: 630,
          column: 83
        }
      },
      "189": {
        start: {
          line: 633,
          column: 12
        },
        end: {
          line: 633,
          column: 78
        }
      },
      "190": {
        start: {
          line: 640,
          column: 23
        },
        end: {
          line: 647,
          column: 9
        }
      },
      "191": {
        start: {
          line: 648,
          column: 8
        },
        end: {
          line: 648,
          column: 42
        }
      },
      "192": {
        start: {
          line: 654,
          column: 8
        },
        end: {
          line: 656,
          column: 9
        }
      },
      "193": {
        start: {
          line: 655,
          column: 12
        },
        end: {
          line: 655,
          column: 80
        }
      },
      "194": {
        start: {
          line: 662,
          column: 8
        },
        end: {
          line: 664,
          column: 9
        }
      },
      "195": {
        start: {
          line: 663,
          column: 12
        },
        end: {
          line: 663,
          column: 64
        }
      },
      "196": {
        start: {
          line: 670,
          column: 8
        },
        end: {
          line: 672,
          column: 9
        }
      },
      "197": {
        start: {
          line: 671,
          column: 12
        },
        end: {
          line: 671,
          column: 59
        }
      },
      "198": {
        start: {
          line: 673,
          column: 8
        },
        end: {
          line: 673,
          column: 20
        }
      },
      "199": {
        start: {
          line: 677,
          column: 22
        },
        end: {
          line: 677,
          column: 24
        }
      },
      "200": {
        start: {
          line: 678,
          column: 8
        },
        end: {
          line: 680,
          column: 9
        }
      },
      "201": {
        start: {
          line: 679,
          column: 12
        },
        end: {
          line: 679,
          column: 46
        }
      },
      "202": {
        start: {
          line: 681,
          column: 8
        },
        end: {
          line: 683,
          column: 9
        }
      },
      "203": {
        start: {
          line: 682,
          column: 12
        },
        end: {
          line: 682,
          column: 42
        }
      },
      "204": {
        start: {
          line: 684,
          column: 8
        },
        end: {
          line: 686,
          column: 9
        }
      },
      "205": {
        start: {
          line: 685,
          column: 12
        },
        end: {
          line: 685,
          column: 51
        }
      },
      "206": {
        start: {
          line: 687,
          column: 8
        },
        end: {
          line: 687,
          column: 21
        }
      },
      "207": {
        start: {
          line: 691,
          column: 33
        },
        end: {
          line: 725,
          column: 9
        }
      },
      "208": {
        start: {
          line: 726,
          column: 8
        },
        end: {
          line: 733,
          column: 9
        }
      },
      "209": {
        start: {
          line: 727,
          column: 12
        },
        end: {
          line: 732,
          column: 15
        }
      },
      "210": {
        start: {
          line: 734,
          column: 8
        },
        end: {
          line: 734,
          column: 115
        }
      },
      "211": {
        start: {
          line: 737,
          column: 0
        },
        end: {
          line: 740,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 65
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 47
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 42
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 55
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 72
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 55
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 84
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 59
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 173
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 68
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 192
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 216,
            column: 35
          },
          end: {
            line: 216,
            column: 36
          }
        },
        loc: {
          start: {
            line: 216,
            column: 47
          },
          end: {
            line: 235,
            column: 9
          }
        },
        line: 216
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 217,
            column: 60
          },
          end: {
            line: 217,
            column: 61
          }
        },
        loc: {
          start: {
            line: 217,
            column: 77
          },
          end: {
            line: 224,
            column: 13
          }
        },
        line: 217
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 237,
            column: 36
          },
          end: {
            line: 237,
            column: 37
          }
        },
        loc: {
          start: {
            line: 237,
            column: 51
          },
          end: {
            line: 244,
            column: 9
          }
        },
        line: 237
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 253,
            column: 31
          },
          end: {
            line: 253,
            column: 32
          }
        },
        loc: {
          start: {
            line: 253,
            column: 40
          },
          end: {
            line: 258,
            column: 17
          }
        },
        line: 253
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 263,
            column: 31
          },
          end: {
            line: 263,
            column: 32
          }
        },
        loc: {
          start: {
            line: 263,
            column: 40
          },
          end: {
            line: 266,
            column: 17
          }
        },
        line: 263
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 56
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 281
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 65
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 286
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 305,
            column: 38
          },
          end: {
            line: 305,
            column: 39
          }
        },
        loc: {
          start: {
            line: 305,
            column: 48
          },
          end: {
            line: 310,
            column: 9
          }
        },
        line: 305
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 319,
            column: 37
          },
          end: {
            line: 319,
            column: 38
          }
        },
        loc: {
          start: {
            line: 319,
            column: 53
          },
          end: {
            line: 319,
            column: 71
          }
        },
        line: 319
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 328,
            column: 31
          },
          end: {
            line: 328,
            column: 32
          }
        },
        loc: {
          start: {
            line: 328,
            column: 41
          },
          end: {
            line: 331,
            column: 17
          }
        },
        line: 328
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 65
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 346
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 360,
            column: 55
          },
          end: {
            line: 360,
            column: 56
          }
        },
        loc: {
          start: {
            line: 360,
            column: 62
          },
          end: {
            line: 367,
            column: 9
          }
        },
        line: 360
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 380,
            column: 5
          }
        },
        loc: {
          start: {
            line: 380,
            column: 65
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 380
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 63
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 401
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 407,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        loc: {
          start: {
            line: 407,
            column: 49
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 407
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 38
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 480
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 489,
            column: 25
          },
          end: {
            line: 489,
            column: 26
          }
        },
        loc: {
          start: {
            line: 489,
            column: 32
          },
          end: {
            line: 491,
            column: 13
          }
        },
        line: 489
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 36
          },
          end: {
            line: 521,
            column: 5
          }
        },
        line: 503
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 510,
            column: 21
          },
          end: {
            line: 510,
            column: 22
          }
        },
        loc: {
          start: {
            line: 510,
            column: 28
          },
          end: {
            line: 513,
            column: 9
          }
        },
        line: 510
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 511,
            column: 50
          },
          end: {
            line: 511,
            column: 51
          }
        },
        loc: {
          start: {
            line: 511,
            column: 59
          },
          end: {
            line: 511,
            column: 107
          }
        },
        line: 511
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 522,
            column: 4
          },
          end: {
            line: 522,
            column: 5
          }
        },
        loc: {
          start: {
            line: 522,
            column: 39
          },
          end: {
            line: 526,
            column: 5
          }
        },
        line: 522
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 528,
            column: 4
          },
          end: {
            line: 528,
            column: 5
          }
        },
        loc: {
          start: {
            line: 528,
            column: 40
          },
          end: {
            line: 549,
            column: 5
          }
        },
        line: 528
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 550,
            column: 4
          },
          end: {
            line: 550,
            column: 5
          }
        },
        loc: {
          start: {
            line: 550,
            column: 38
          },
          end: {
            line: 571,
            column: 5
          }
        },
        line: 550
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 573,
            column: 4
          },
          end: {
            line: 573,
            column: 5
          }
        },
        loc: {
          start: {
            line: 573,
            column: 60
          },
          end: {
            line: 610,
            column: 5
          }
        },
        line: 573
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 612,
            column: 4
          },
          end: {
            line: 612,
            column: 5
          }
        },
        loc: {
          start: {
            line: 612,
            column: 51
          },
          end: {
            line: 617,
            column: 5
          }
        },
        line: 612
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 618,
            column: 4
          },
          end: {
            line: 618,
            column: 5
          }
        },
        loc: {
          start: {
            line: 618,
            column: 36
          },
          end: {
            line: 627,
            column: 5
          }
        },
        line: 618
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 628,
            column: 4
          },
          end: {
            line: 628,
            column: 5
          }
        },
        loc: {
          start: {
            line: 628,
            column: 38
          },
          end: {
            line: 635,
            column: 5
          }
        },
        line: 628
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 639,
            column: 4
          },
          end: {
            line: 639,
            column: 5
          }
        },
        loc: {
          start: {
            line: 639,
            column: 28
          },
          end: {
            line: 649,
            column: 5
          }
        },
        line: 639
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 653,
            column: 4
          },
          end: {
            line: 653,
            column: 5
          }
        },
        loc: {
          start: {
            line: 653,
            column: 54
          },
          end: {
            line: 657,
            column: 5
          }
        },
        line: 653
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 661,
            column: 4
          },
          end: {
            line: 661,
            column: 5
          }
        },
        loc: {
          start: {
            line: 661,
            column: 38
          },
          end: {
            line: 665,
            column: 5
          }
        },
        line: 661
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 669,
            column: 4
          },
          end: {
            line: 669,
            column: 5
          }
        },
        loc: {
          start: {
            line: 669,
            column: 26
          },
          end: {
            line: 674,
            column: 5
          }
        },
        line: 669
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 676,
            column: 4
          },
          end: {
            line: 676,
            column: 5
          }
        },
        loc: {
          start: {
            line: 676,
            column: 26
          },
          end: {
            line: 688,
            column: 5
          }
        },
        line: 676
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 690,
            column: 4
          },
          end: {
            line: 690,
            column: 5
          }
        },
        loc: {
          start: {
            line: 690,
            column: 49
          },
          end: {
            line: 735,
            column: 5
          }
        },
        line: 690
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "14": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 39
          }
        }, {
          start: {
            line: 103,
            column: 43
          },
          end: {
            line: 103,
            column: 80
          }
        }],
        line: 103
      },
      "15": {
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "16": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "17": {
        loc: {
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 143,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 143,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "18": {
        loc: {
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 142,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 142,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "19": {
        loc: {
          start: {
            line: 129,
            column: 24
          },
          end: {
            line: 129,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 24
          },
          end: {
            line: 129,
            column: 47
          }
        }, {
          start: {
            line: 129,
            column: 51
          },
          end: {
            line: 129,
            column: 88
          }
        }],
        line: 129
      },
      "20": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 177,
            column: 86
          }
        }, {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 179,
            column: 74
          }
        }, {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 181,
            column: 83
          }
        }, {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 183,
            column: 83
          }
        }, {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 185,
            column: 83
          }
        }, {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 187,
            column: 81
          }
        }, {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 189,
            column: 82
          }
        }],
        line: 175
      },
      "21": {
        loc: {
          start: {
            line: 218,
            column: 35
          },
          end: {
            line: 218,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 35
          },
          end: {
            line: 218,
            column: 50
          }
        }, {
          start: {
            line: 218,
            column: 54
          },
          end: {
            line: 218,
            column: 55
          }
        }],
        line: 218
      },
      "22": {
        loc: {
          start: {
            line: 218,
            column: 60
          },
          end: {
            line: 218,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 60
          },
          end: {
            line: 218,
            column: 78
          }
        }, {
          start: {
            line: 218,
            column: 82
          },
          end: {
            line: 218,
            column: 83
          }
        }],
        line: 218
      },
      "23": {
        loc: {
          start: {
            line: 219,
            column: 30
          },
          end: {
            line: 219,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 30
          },
          end: {
            line: 219,
            column: 40
          }
        }, {
          start: {
            line: 219,
            column: 44
          },
          end: {
            line: 219,
            column: 45
          }
        }],
        line: 219
      },
      "24": {
        loc: {
          start: {
            line: 219,
            column: 50
          },
          end: {
            line: 219,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 50
          },
          end: {
            line: 219,
            column: 63
          }
        }, {
          start: {
            line: 219,
            column: 67
          },
          end: {
            line: 219,
            column: 68
          }
        }],
        line: 219
      },
      "25": {
        loc: {
          start: {
            line: 220,
            column: 29
          },
          end: {
            line: 220,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 29
          },
          end: {
            line: 220,
            column: 38
          }
        }, {
          start: {
            line: 220,
            column: 42
          },
          end: {
            line: 220,
            column: 43
          }
        }],
        line: 220
      },
      "26": {
        loc: {
          start: {
            line: 220,
            column: 54
          },
          end: {
            line: 220,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 54
          },
          end: {
            line: 220,
            column: 66
          }
        }, {
          start: {
            line: 220,
            column: 70
          },
          end: {
            line: 220,
            column: 71
          }
        }],
        line: 220
      },
      "27": {
        loc: {
          start: {
            line: 221,
            column: 35
          },
          end: {
            line: 221,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 35
          },
          end: {
            line: 221,
            column: 50
          }
        }, {
          start: {
            line: 221,
            column: 54
          },
          end: {
            line: 221,
            column: 55
          }
        }],
        line: 221
      },
      "28": {
        loc: {
          start: {
            line: 221,
            column: 60
          },
          end: {
            line: 221,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 60
          },
          end: {
            line: 221,
            column: 78
          }
        }, {
          start: {
            line: 221,
            column: 82
          },
          end: {
            line: 221,
            column: 83
          }
        }],
        line: 221
      },
      "29": {
        loc: {
          start: {
            line: 222,
            column: 31
          },
          end: {
            line: 222,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 31
          },
          end: {
            line: 222,
            column: 42
          }
        }, {
          start: {
            line: 222,
            column: 46
          },
          end: {
            line: 222,
            column: 47
          }
        }],
        line: 222
      },
      "30": {
        loc: {
          start: {
            line: 222,
            column: 58
          },
          end: {
            line: 222,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 58
          },
          end: {
            line: 222,
            column: 72
          }
        }, {
          start: {
            line: 222,
            column: 76
          },
          end: {
            line: 222,
            column: 77
          }
        }],
        line: 222
      },
      "31": {
        loc: {
          start: {
            line: 231,
            column: 21
          },
          end: {
            line: 231,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 21
          },
          end: {
            line: 231,
            column: 79
          }
        }, {
          start: {
            line: 231,
            column: 83
          },
          end: {
            line: 231,
            column: 84
          }
        }],
        line: 231
      },
      "32": {
        loc: {
          start: {
            line: 232,
            column: 21
          },
          end: {
            line: 232,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 21
          },
          end: {
            line: 232,
            column: 67
          }
        }, {
          start: {
            line: 232,
            column: 71
          },
          end: {
            line: 232,
            column: 72
          }
        }],
        line: 232
      },
      "33": {
        loc: {
          start: {
            line: 233,
            column: 22
          },
          end: {
            line: 233,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 22
          },
          end: {
            line: 233,
            column: 69
          }
        }, {
          start: {
            line: 233,
            column: 73
          },
          end: {
            line: 233,
            column: 74
          }
        }],
        line: 233
      },
      "34": {
        loc: {
          start: {
            line: 238,
            column: 36
          },
          end: {
            line: 238,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 36
          },
          end: {
            line: 238,
            column: 56
          }
        }, {
          start: {
            line: 238,
            column: 60
          },
          end: {
            line: 238,
            column: 61
          }
        }],
        line: 238
      },
      "35": {
        loc: {
          start: {
            line: 239,
            column: 31
          },
          end: {
            line: 239,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 31
          },
          end: {
            line: 239,
            column: 46
          }
        }, {
          start: {
            line: 239,
            column: 50
          },
          end: {
            line: 239,
            column: 51
          }
        }],
        line: 239
      },
      "36": {
        loc: {
          start: {
            line: 240,
            column: 30
          },
          end: {
            line: 240,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 30
          },
          end: {
            line: 240,
            column: 44
          }
        }, {
          start: {
            line: 240,
            column: 48
          },
          end: {
            line: 240,
            column: 49
          }
        }],
        line: 240
      },
      "37": {
        loc: {
          start: {
            line: 241,
            column: 36
          },
          end: {
            line: 241,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 36
          },
          end: {
            line: 241,
            column: 56
          }
        }, {
          start: {
            line: 241,
            column: 60
          },
          end: {
            line: 241,
            column: 61
          }
        }],
        line: 241
      },
      "38": {
        loc: {
          start: {
            line: 242,
            column: 32
          },
          end: {
            line: 242,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 32
          },
          end: {
            line: 242,
            column: 48
          }
        }, {
          start: {
            line: 242,
            column: 52
          },
          end: {
            line: 242,
            column: 53
          }
        }],
        line: 242
      },
      "39": {
        loc: {
          start: {
            line: 245,
            column: 25
          },
          end: {
            line: 245,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 25
          },
          end: {
            line: 245,
            column: 77
          }
        }, {
          start: {
            line: 245,
            column: 81
          },
          end: {
            line: 245,
            column: 82
          }
        }],
        line: 245
      },
      "40": {
        loc: {
          start: {
            line: 246,
            column: 25
          },
          end: {
            line: 246,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 25
          },
          end: {
            line: 246,
            column: 65
          }
        }, {
          start: {
            line: 246,
            column: 69
          },
          end: {
            line: 246,
            column: 70
          }
        }],
        line: 246
      },
      "41": {
        loc: {
          start: {
            line: 247,
            column: 28
          },
          end: {
            line: 247,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 28
          },
          end: {
            line: 247,
            column: 69
          }
        }, {
          start: {
            line: 247,
            column: 73
          },
          end: {
            line: 247,
            column: 74
          }
        }],
        line: 247
      },
      "42": {
        loc: {
          start: {
            line: 313,
            column: 37
          },
          end: {
            line: 315,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 314,
            column: 18
          },
          end: {
            line: 314,
            column: 61
          }
        }, {
          start: {
            line: 315,
            column: 18
          },
          end: {
            line: 315,
            column: 19
          }
        }],
        line: 313
      },
      "43": {
        loc: {
          start: {
            line: 320,
            column: 35
          },
          end: {
            line: 322,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 321,
            column: 18
          },
          end: {
            line: 321,
            column: 71
          }
        }, {
          start: {
            line: 322,
            column: 18
          },
          end: {
            line: 322,
            column: 19
          }
        }],
        line: 320
      },
      "44": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "45": {
        loc: {
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 348,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 348,
            column: 35
          }
        }, {
          start: {
            line: 348,
            column: 39
          },
          end: {
            line: 348,
            column: 60
          }
        }],
        line: 348
      },
      "46": {
        loc: {
          start: {
            line: 361,
            column: 28
          },
          end: {
            line: 361,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 28
          },
          end: {
            line: 361,
            column: 58
          }
        }, {
          start: {
            line: 361,
            column: 62
          },
          end: {
            line: 361,
            column: 63
          }
        }],
        line: 361
      },
      "47": {
        loc: {
          start: {
            line: 362,
            column: 29
          },
          end: {
            line: 362,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 29
          },
          end: {
            line: 362,
            column: 60
          }
        }, {
          start: {
            line: 362,
            column: 64
          },
          end: {
            line: 362,
            column: 65
          }
        }],
        line: 362
      },
      "48": {
        loc: {
          start: {
            line: 365,
            column: 28
          },
          end: {
            line: 365,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 365,
            column: 43
          },
          end: {
            line: 365,
            column: 82
          }
        }, {
          start: {
            line: 365,
            column: 85
          },
          end: {
            line: 365,
            column: 86
          }
        }],
        line: 365
      },
      "49": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "50": {
        loc: {
          start: {
            line: 418,
            column: 8
          },
          end: {
            line: 420,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 8
          },
          end: {
            line: 420,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "51": {
        loc: {
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 456,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 439,
            column: 16
          },
          end: {
            line: 443,
            column: 26
          }
        }, {
          start: {
            line: 444,
            column: 16
          },
          end: {
            line: 448,
            column: 26
          }
        }, {
          start: {
            line: 449,
            column: 16
          },
          end: {
            line: 453,
            column: 26
          }
        }, {
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 455,
            column: 90
          }
        }],
        line: 438
      },
      "52": {
        loc: {
          start: {
            line: 484,
            column: 21
          },
          end: {
            line: 484,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 484,
            column: 21
          },
          end: {
            line: 484,
            column: 37
          }
        }, {
          start: {
            line: 484,
            column: 41
          },
          end: {
            line: 484,
            column: 43
          }
        }],
        line: 484
      },
      "53": {
        loc: {
          start: {
            line: 485,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "54": {
        loc: {
          start: {
            line: 504,
            column: 21
          },
          end: {
            line: 504,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 504,
            column: 21
          },
          end: {
            line: 504,
            column: 37
          }
        }, {
          start: {
            line: 504,
            column: 41
          },
          end: {
            line: 504,
            column: 43
          }
        }],
        line: 504
      },
      "55": {
        loc: {
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 505
      },
      "56": {
        loc: {
          start: {
            line: 511,
            column: 59
          },
          end: {
            line: 511,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 511,
            column: 87
          },
          end: {
            line: 511,
            column: 99
          }
        }, {
          start: {
            line: 511,
            column: 102
          },
          end: {
            line: 511,
            column: 107
          }
        }],
        line: 511
      },
      "57": {
        loc: {
          start: {
            line: 532,
            column: 8
          },
          end: {
            line: 534,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 532,
            column: 8
          },
          end: {
            line: 534,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 532
      },
      "58": {
        loc: {
          start: {
            line: 532,
            column: 12
          },
          end: {
            line: 532,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 532,
            column: 12
          },
          end: {
            line: 532,
            column: 19
          }
        }, {
          start: {
            line: 532,
            column: 23
          },
          end: {
            line: 532,
            column: 47
          }
        }],
        line: 532
      },
      "59": {
        loc: {
          start: {
            line: 567,
            column: 8
          },
          end: {
            line: 569,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 567,
            column: 8
          },
          end: {
            line: 569,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 567
      },
      "60": {
        loc: {
          start: {
            line: 567,
            column: 12
          },
          end: {
            line: 567,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 567,
            column: 12
          },
          end: {
            line: 567,
            column: 19
          }
        }, {
          start: {
            line: 567,
            column: 23
          },
          end: {
            line: 567,
            column: 39
          }
        }, {
          start: {
            line: 567,
            column: 44
          },
          end: {
            line: 567,
            column: 60
          }
        }, {
          start: {
            line: 567,
            column: 64
          },
          end: {
            line: 567,
            column: 93
          }
        }],
        line: 567
      },
      "61": {
        loc: {
          start: {
            line: 576,
            column: 16
          },
          end: {
            line: 576,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 576,
            column: 16
          },
          end: {
            line: 576,
            column: 22
          }
        }, {
          start: {
            line: 576,
            column: 26
          },
          end: {
            line: 576,
            column: 36
          }
        }],
        line: 576
      },
      "62": {
        loc: {
          start: {
            line: 577,
            column: 16
          },
          end: {
            line: 577,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 577,
            column: 16
          },
          end: {
            line: 577,
            column: 29
          }
        }, {
          start: {
            line: 577,
            column: 33
          },
          end: {
            line: 577,
            column: 55
          }
        }],
        line: 577
      },
      "63": {
        loc: {
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 578,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 578,
            column: 31
          }
        }, {
          start: {
            line: 578,
            column: 35
          },
          end: {
            line: 578,
            column: 61
          }
        }],
        line: 578
      },
      "64": {
        loc: {
          start: {
            line: 579,
            column: 16
          },
          end: {
            line: 584,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 579,
            column: 16
          },
          end: {
            line: 579,
            column: 33
          }
        }, {
          start: {
            line: 579,
            column: 37
          },
          end: {
            line: 579,
            column: 52
          }
        }, {
          start: {
            line: 579,
            column: 56
          },
          end: {
            line: 584,
            column: 13
          }
        }],
        line: 579
      },
      "65": {
        loc: {
          start: {
            line: 621,
            column: 19
          },
          end: {
            line: 621,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 621,
            column: 28
          },
          end: {
            line: 621,
            column: 46
          }
        }, {
          start: {
            line: 621,
            column: 49
          },
          end: {
            line: 621,
            column: 53
          }
        }],
        line: 621
      },
      "66": {
        loc: {
          start: {
            line: 648,
            column: 15
          },
          end: {
            line: 648,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 648,
            column: 15
          },
          end: {
            line: 648,
            column: 33
          }
        }, {
          start: {
            line: 648,
            column: 37
          },
          end: {
            line: 648,
            column: 41
          }
        }],
        line: 648
      },
      "67": {
        loc: {
          start: {
            line: 654,
            column: 8
          },
          end: {
            line: 656,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 654,
            column: 8
          },
          end: {
            line: 656,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 654
      },
      "68": {
        loc: {
          start: {
            line: 662,
            column: 8
          },
          end: {
            line: 664,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 662,
            column: 8
          },
          end: {
            line: 664,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 662
      },
      "69": {
        loc: {
          start: {
            line: 670,
            column: 8
          },
          end: {
            line: 672,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 670,
            column: 8
          },
          end: {
            line: 672,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 670
      },
      "70": {
        loc: {
          start: {
            line: 678,
            column: 8
          },
          end: {
            line: 680,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 678,
            column: 8
          },
          end: {
            line: 680,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 678
      },
      "71": {
        loc: {
          start: {
            line: 681,
            column: 8
          },
          end: {
            line: 683,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 681,
            column: 8
          },
          end: {
            line: 683,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 681
      },
      "72": {
        loc: {
          start: {
            line: 684,
            column: 8
          },
          end: {
            line: 686,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 684,
            column: 8
          },
          end: {
            line: 686,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 684
      },
      "73": {
        loc: {
          start: {
            line: 684,
            column: 12
          },
          end: {
            line: 684,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 684,
            column: 12
          },
          end: {
            line: 684,
            column: 31
          }
        }, {
          start: {
            line: 684,
            column: 35
          },
          end: {
            line: 684,
            column: 65
          }
        }],
        line: 684
      },
      "74": {
        loc: {
          start: {
            line: 739,
            column: 37
          },
          end: {
            line: 739,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 739,
            column: 122
          },
          end: {
            line: 739,
            column: 124
          }
        }, {
          start: {
            line: 739,
            column: 127
          },
          end: {
            line: 739,
            column: 133
          }
        }],
        line: 739
      },
      "75": {
        loc: {
          start: {
            line: 739,
            column: 50
          },
          end: {
            line: 739,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 739,
            column: 50
          },
          end: {
            line: 739,
            column: 86
          }
        }, {
          start: {
            line: 739,
            column: 90
          },
          end: {
            line: 739,
            column: 103
          }
        }],
        line: 739
      },
      "76": {
        loc: {
          start: {
            line: 739,
            column: 135
          },
          end: {
            line: 739,
            column: 229
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 739,
            column: 218
          },
          end: {
            line: 739,
            column: 220
          }
        }, {
          start: {
            line: 739,
            column: 223
          },
          end: {
            line: 739,
            column: 229
          }
        }],
        line: 739
      },
      "77": {
        loc: {
          start: {
            line: 739,
            column: 148
          },
          end: {
            line: 739,
            column: 199
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 739,
            column: 148
          },
          end: {
            line: 739,
            column: 183
          }
        }, {
          start: {
            line: 739,
            column: 187
          },
          end: {
            line: 739,
            column: 199
          }
        }],
        line: 739
      },
      "78": {
        loc: {
          start: {
            line: 739,
            column: 231
          },
          end: {
            line: 739,
            column: 325
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 739,
            column: 314
          },
          end: {
            line: 739,
            column: 316
          }
        }, {
          start: {
            line: 739,
            column: 319
          },
          end: {
            line: 739,
            column: 325
          }
        }],
        line: 739
      },
      "79": {
        loc: {
          start: {
            line: 739,
            column: 244
          },
          end: {
            line: 739,
            column: 295
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 739,
            column: 244
          },
          end: {
            line: 739,
            column: 279
          }
        }, {
          start: {
            line: 739,
            column: 283
          },
          end: {
            line: 739,
            column: 295
          }
        }],
        line: 739
      },
      "80": {
        loc: {
          start: {
            line: 739,
            column: 327
          },
          end: {
            line: 739,
            column: 417
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 739,
            column: 406
          },
          end: {
            line: 739,
            column: 408
          }
        }, {
          start: {
            line: 739,
            column: 411
          },
          end: {
            line: 739,
            column: 417
          }
        }],
        line: 739
      },
      "81": {
        loc: {
          start: {
            line: 739,
            column: 340
          },
          end: {
            line: 739,
            column: 387
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 739,
            column: 340
          },
          end: {
            line: 739,
            column: 373
          }
        }, {
          start: {
            line: 739,
            column: 377
          },
          end: {
            line: 739,
            column: 387
          }
        }],
        line: 739
      },
      "82": {
        loc: {
          start: {
            line: 739,
            column: 419
          },
          end: {
            line: 739,
            column: 515
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 739,
            column: 504
          },
          end: {
            line: 739,
            column: 506
          }
        }, {
          start: {
            line: 739,
            column: 509
          },
          end: {
            line: 739,
            column: 515
          }
        }],
        line: 739
      },
      "83": {
        loc: {
          start: {
            line: 739,
            column: 432
          },
          end: {
            line: 739,
            column: 485
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 739,
            column: 432
          },
          end: {
            line: 739,
            column: 468
          }
        }, {
          start: {
            line: 739,
            column: 472
          },
          end: {
            line: 739,
            column: 485
          }
        }],
        line: 739
      },
      "84": {
        loc: {
          start: {
            line: 739,
            column: 517
          },
          end: {
            line: 739,
            column: 611
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 739,
            column: 600
          },
          end: {
            line: 739,
            column: 602
          }
        }, {
          start: {
            line: 739,
            column: 605
          },
          end: {
            line: 739,
            column: 611
          }
        }],
        line: 739
      },
      "85": {
        loc: {
          start: {
            line: 739,
            column: 530
          },
          end: {
            line: 739,
            column: 581
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 739,
            column: 530
          },
          end: {
            line: 739,
            column: 565
          }
        }, {
          start: {
            line: 739,
            column: 569
          },
          end: {
            line: 739,
            column: 581
          }
        }],
        line: 739
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0, 0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0, 0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\reports.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\reports.service.ts"],
      sourcesContent: ["import { Injectable, Logger, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { RedisService } from './redis.service';\nimport { EmailService } from './email.service';\nimport { PDFService } from './pdf.service';\nimport { CryptoService } from './crypto.service';\nimport { CacheService, ReportCacheKey } from '../reports/cache.service';\nimport {\n  ReportType,\n  ReportStatus,\n  ReportFormat,\n  ScheduleFrequency,\n  ChartType,\n  Prisma\n} from '@prisma/client';\nimport { addDays, addWeeks, addMonths, startOfDay, endOfDay, subDays, subMonths } from 'date-fns';\nimport * as ExcelJS from 'exceljs';\nimport { createHash } from 'crypto';\n\ninterface ReportConfig {\n  dateRange: {\n    start: Date;\n    end: Date;\n    compareStart?: Date;\n    compareEnd?: Date;\n  };\n  metrics: string[];\n  dimensions: string[];\n  filters: Record<string, any>;\n  charts: {\n    type: ChartType;\n    title: string;\n    metrics: string[];\n    dimensions?: string[];\n  }[];\n  groupBy?: string;\n  orderBy?: { field: string; direction: 'asc' | 'desc' }[];\n}\n\ninterface ReportData {\n  summary: Record<string, number>;\n  data: Record<string, any>[];\n  charts: {\n    type: ChartType;\n    title: string;\n    data: any[];\n    config?: Record<string, any>;\n  }[];\n  metadata: {\n    generatedAt: Date;\n    dateRange: { start: Date; end: Date };\n    totalRecords: number;\n    processingTime: number;\n  };\n}\n\n@Injectable()\nexport class ReportsService {\n  private readonly logger = new Logger(ReportsService.name);\n  private readonly CACHE_TTL = 3600; // 1 hour\n  private readonly CACHE_PREFIX = 'report:';\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly redis: RedisService,\n    private readonly email: EmailService,\n    private readonly pdf: PDFService,\n    private readonly crypto: CryptoService,\n    private readonly cacheService: CacheService\n  ) {}\n\n  // Template Management\n  async getTemplates(organizationId: string, userId?: string) {\n    const templates = await this.prisma.reportTemplate.findMany({\n      where: {\n        organizationId,\n        OR: [\n          { isPublic: true },\n          { userId },\n          { isDefault: true }\n        ]\n      },\n      orderBy: [\n        { isDefault: 'desc' },\n        { createdAt: 'desc' }\n      ],\n      include: {\n        user: {\n          select: {\n            firstName: true,\n            lastName: true\n          }\n        },\n        _count: {\n          select: {\n            reports: true\n          }\n        }\n      }\n    });\n\n    return templates;\n  }\n\n  async createTemplate(\n    organizationId: string,\n    userId: string,\n    data: {\n      name: string;\n      description?: string;\n      type: ReportType;\n      config: ReportConfig;\n      layout?: any;\n      tags?: string[];\n      category?: string;\n      isPublic?: boolean;\n    }\n  ) {\n    const template = await this.prisma.reportTemplate.create({\n      data: {\n        organizationId,\n        userId,\n        ...data\n      }\n    });\n\n    this.logger.log(`Template created: ${template.id} by user ${userId}`);\n    return template;\n  }\n\n  // Report Generation\n  async generateReport(\n    organizationId: string,\n    userId: string,\n    data: {\n      name: string;\n      type: ReportType;\n      config: ReportConfig;\n      templateId?: string;\n      format?: ReportFormat;\n      useCache?: boolean;\n    }\n  ) {\n    const startTime = Date.now();\n\n    // Create report record\n    const report = await this.prisma.report.create({\n      data: {\n        organizationId,\n        userId,\n        templateId: data.templateId,\n        name: data.name,\n        type: data.type,\n        config: data.config,\n        format: data.format,\n        status: ReportStatus.GENERATING,\n        startedAt: new Date()\n      }\n    });\n\n    try {\n      let reportData;\n      \n      // Check cache first if enabled\n      if (data.useCache !== false && await this.cacheService.isAvailable()) {\n        const cacheKey: ReportCacheKey = {\n          templateId: data.templateId,\n          userId,\n          organizationId,\n          filters: data.config.filters,\n          dateRange: data.config.dateRange,\n          metrics: data.config.metrics,\n          dimensions: data.config.dimensions,\n        };\n        \n        const cachedReport = await this.cacheService.getCachedReport(cacheKey);\n        if (cachedReport) {\n          this.logger.log(`Using cached report for: ${data.name}`);\n          reportData = cachedReport;\n        }\n      }\n      \n      // Generate report data if not cached\n      if (!reportData) {\n        // Check legacy cache first\n        const cacheKey = this.generateCacheKey(organizationId, data.type, data.config);\n        reportData = await this.getCachedReport(cacheKey);\n\n        if (!reportData) {\n          // Generate report data\n          reportData = await this.generateReportData(organizationId, data.type, data.config);\n          \n          // Cache the result in both systems\n          await this.cacheReport(cacheKey, reportData);\n          \n          if (data.useCache !== false && await this.cacheService.isAvailable()) {\n            const newCacheKey: ReportCacheKey = {\n              templateId: data.templateId,\n              userId,\n              organizationId,\n              filters: data.config.filters,\n              dateRange: data.config.dateRange,\n              metrics: data.config.metrics,\n              dimensions: data.config.dimensions,\n            };\n            \n            await this.cacheService.cacheReport(newCacheKey, reportData, {\n              ttl: this.getCacheTTL(data.type),\n            });\n          }\n        }\n      }\n\n      const processingTime = Date.now() - startTime;\n\n      // Update report with data\n      const updatedReport = await this.prisma.report.update({\n        where: { id: report.id },\n        data: {\n          status: ReportStatus.COMPLETED,\n          data: reportData,\n          completedAt: new Date(),\n          processingTime\n        }\n      });\n\n      this.logger.log(`Report generated: ${report.id} in ${processingTime}ms`);\n      return updatedReport;\n\n    } catch (error) {\n      // Update report with error\n      await this.prisma.report.update({\n        where: { id: report.id },\n        data: {\n          status: ReportStatus.FAILED,\n          error: error.message,\n          completedAt: new Date()\n        }\n      });\n\n      this.logger.error(`Report generation failed: ${report.id}`, error);\n      throw error;\n    }\n  }\n\n  private async generateReportData(\n    organizationId: string,\n    type: ReportType,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    const startTime = Date.now();\n\n    switch (type) {\n      case ReportType.CAMPAIGN_PERFORMANCE:\n        return this.generateCampaignPerformanceReport(organizationId, config);\n      case ReportType.ROI_ROAS_ANALYSIS:\n        return this.generateROIROASReport(organizationId, config);\n      case ReportType.CONVERSION_FUNNEL:\n        return this.generateConversionFunnelReport(organizationId, config);\n      case ReportType.PERIOD_COMPARISON:\n        return this.generatePeriodComparisonReport(organizationId, config);\n      case ReportType.EXECUTIVE_SUMMARY:\n        return this.generateExecutiveSummaryReport(organizationId, config);\n      case ReportType.COHORT_ANALYSIS:\n        return this.generateCohortAnalysisReport(organizationId, config);\n      default:\n        throw new BadRequestException(`Unsupported report type: ${type}`);\n    }\n  }\n\n  private async generateCampaignPerformanceReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    const { dateRange, metrics, filters } = config;\n\n    // Get campaign metrics\n    const campaigns = await this.prisma.campaign.findMany({\n      where: {\n        organizationId,\n        createdAt: {\n          gte: dateRange.start,\n          lte: dateRange.end\n        },\n        ...this.buildFilters(filters)\n      },\n      include: {\n        metrics: {\n          where: {\n            date: {\n              gte: dateRange.start,\n              lte: dateRange.end\n            }\n          }\n        }\n      }\n    });\n\n    // Process data\n    const data = campaigns.map(campaign => {\n      const campaignMetrics = campaign.metrics.reduce((acc, metric) => {\n        acc.impressions = (acc.impressions || 0) + (metric.impressions || 0);\n        acc.clicks = (acc.clicks || 0) + (metric.clicks || 0);\n        acc.spend = (acc.spend || 0) + Number(metric.spend || 0);\n        acc.conversions = (acc.conversions || 0) + (metric.conversions || 0);\n        acc.revenue = (acc.revenue || 0) + Number(metric.revenue || 0);\n        return acc;\n      }, {} as any);\n\n      return {\n        campaignId: campaign.id,\n        campaignName: campaign.name,\n        platform: campaign.platform,\n        status: campaign.status,\n        ...campaignMetrics,\n        ctr: campaignMetrics.clicks / campaignMetrics.impressions * 100 || 0,\n        cpc: campaignMetrics.spend / campaignMetrics.clicks || 0,\n        roas: campaignMetrics.revenue / campaignMetrics.spend || 0\n      };\n    });\n\n    // Calculate summary\n    const summary = data.reduce((acc, item) => {\n      acc.totalImpressions = (acc.totalImpressions || 0) + item.impressions;\n      acc.totalClicks = (acc.totalClicks || 0) + item.clicks;\n      acc.totalSpend = (acc.totalSpend || 0) + item.spend;\n      acc.totalConversions = (acc.totalConversions || 0) + item.conversions;\n      acc.totalRevenue = (acc.totalRevenue || 0) + item.revenue;\n      return acc;\n    }, {} as any);\n\n    summary.avgCTR = summary.totalClicks / summary.totalImpressions * 100 || 0;\n    summary.avgCPC = summary.totalSpend / summary.totalClicks || 0;\n    summary.totalROAS = summary.totalRevenue / summary.totalSpend || 0;\n\n    // Generate charts\n    const charts = [\n      {\n        type: ChartType.BAR,\n        title: 'Campaign Performance',\n        data: data.map(item => ({\n          name: item.campaignName,\n          impressions: item.impressions,\n          clicks: item.clicks,\n          spend: item.spend\n        }))\n      },\n      {\n        type: ChartType.LINE,\n        title: 'ROAS by Campaign',\n        data: data.map(item => ({\n          name: item.campaignName,\n          roas: item.roas\n        }))\n      }\n    ];\n\n    return {\n      summary,\n      data,\n      charts,\n      metadata: {\n        generatedAt: new Date(),\n        dateRange,\n        totalRecords: data.length,\n        processingTime: Date.now() - Date.now()\n      }\n    };\n  }\n\n  private async generateROIROASReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    // Implementation for ROI/ROAS analysis\n    // Similar structure to campaign performance but focused on ROI metrics\n    return this.generateCampaignPerformanceReport(organizationId, config);\n  }\n\n  private async generateConversionFunnelReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    const { dateRange } = config;\n\n    // Get funnel stages\n    const funnelStages = await this.prisma.funnelStage.findMany({\n      where: {\n        organizationId\n      },\n      orderBy: { order: 'asc' },\n      include: {\n        conversionEvents: {\n          where: {\n            timestamp: {\n              gte: dateRange.start,\n              lte: dateRange.end\n            }\n          }\n        }\n      }\n    });\n\n    const data = funnelStages.map(stage => ({\n      stageName: stage.name,\n      stageOrder: stage.order,\n      events: stage.conversionEvents.length,\n      conversionRate: 0 // Calculate based on previous stage\n    }));\n\n    // Calculate conversion rates\n    for (let i = 1; i < data.length; i++) {\n      data[i].conversionRate = data[i-1].events > 0 \n        ? (data[i].events / data[i-1].events) * 100 \n        : 0;\n    }\n\n    const summary = {\n      totalStages: data.length,\n      totalEvents: data.reduce((sum, stage) => sum + stage.events, 0),\n      overallConversionRate: data.length > 0 \n        ? (data[data.length - 1].events / data[0].events) * 100 \n        : 0\n    };\n\n    const charts = [\n      {\n        type: ChartType.FUNNEL,\n        title: 'Conversion Funnel',\n        data: data.map(stage => ({\n          name: stage.stageName,\n          value: stage.events\n        }))\n      }\n    ];\n\n    return {\n      summary,\n      data,\n      charts,\n      metadata: {\n        generatedAt: new Date(),\n        dateRange,\n        totalRecords: data.length,\n        processingTime: 0\n      }\n    };\n  }\n\n  private async generatePeriodComparisonReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    const { dateRange } = config;\n    \n    if (!dateRange.compareStart || !dateRange.compareEnd) {\n      throw new BadRequestException('Comparison period is required for period comparison report');\n    }\n\n    // Get data for both periods\n    const currentPeriodData = await this.generateCampaignPerformanceReport(\n      organizationId,\n      { ...config, dateRange: { start: dateRange.start, end: dateRange.end } }\n    );\n\n    const previousPeriodData = await this.generateCampaignPerformanceReport(\n      organizationId,\n      { ...config, dateRange: { start: dateRange.compareStart, end: dateRange.compareEnd } }\n    );\n\n    // Calculate changes\n    const summary = {\n      current: currentPeriodData.summary,\n      previous: previousPeriodData.summary,\n      changes: {} as any\n    };\n\n    Object.keys(currentPeriodData.summary).forEach(key => {\n      const current = currentPeriodData.summary[key] || 0;\n      const previous = previousPeriodData.summary[key] || 0;\n      summary.changes[key] = {\n        absolute: current - previous,\n        percentage: previous > 0 ? ((current - previous) / previous) * 100 : 0\n      };\n    });\n\n    return {\n      summary,\n      data: currentPeriodData.data,\n      charts: currentPeriodData.charts,\n      metadata: {\n        generatedAt: new Date(),\n        dateRange,\n        totalRecords: currentPeriodData.data.length,\n        processingTime: 0\n      }\n    };\n  }\n\n  private async generateExecutiveSummaryReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    // High-level summary combining multiple report types\n    const campaignData = await this.generateCampaignPerformanceReport(organizationId, config);\n    const funnelData = await this.generateConversionFunnelReport(organizationId, config);\n\n    const summary = {\n      ...campaignData.summary,\n      funnelConversionRate: funnelData.summary.overallConversionRate,\n      totalFunnelEvents: funnelData.summary.totalEvents\n    };\n\n    return {\n      summary,\n      data: campaignData.data,\n      charts: [...campaignData.charts, ...funnelData.charts],\n      metadata: {\n        generatedAt: new Date(),\n        dateRange: config.dateRange,\n        totalRecords: campaignData.data.length,\n        processingTime: 0\n      }\n    };\n  }\n\n  private async generateCohortAnalysisReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    // Cohort analysis implementation\n    // This would analyze user behavior over time periods\n    return this.generateCampaignPerformanceReport(organizationId, config);\n  }\n\n  // Export Functions\n  async exportReport(\n    reportId: string,\n    userId: string,\n    format: ReportFormat\n  ) {\n    const report = await this.prisma.report.findUnique({\n      where: { id: reportId },\n      include: {\n        user: true,\n        organization: true\n      }\n    });\n\n    if (!report) {\n      throw new NotFoundException('Report not found');\n    }\n\n    if (report.userId !== userId) {\n      throw new BadRequestException('Unauthorized access to report');\n    }\n\n    // Create export record\n    const exportRecord = await this.prisma.reportExport.create({\n      data: {\n        reportId,\n        userId,\n        format,\n        fileName: `${report.name}_${format.toLowerCase()}_${Date.now()}`,\n        fileSize: 0,\n        fileUrl: '',\n        status: ReportStatus.GENERATING,\n        startedAt: new Date(),\n        expiresAt: addDays(new Date(), 7) // Expire in 7 days\n      }\n    });\n\n    try {\n      let fileUrl: string;\n      let fileSize: number;\n\n      switch (format) {\n        case ReportFormat.PDF:\n          const pdfResult = await this.pdf.generateReportPDF(report);\n          fileUrl = pdfResult.url;\n          fileSize = pdfResult.size;\n          break;\n        case ReportFormat.EXCEL:\n          const excelResult = await this.generateExcelReport(report);\n          fileUrl = excelResult.url;\n          fileSize = excelResult.size;\n          break;\n        case ReportFormat.CSV:\n          const csvResult = await this.generateCSVReport(report);\n          fileUrl = csvResult.url;\n          fileSize = csvResult.size;\n          break;\n        default:\n          throw new BadRequestException(`Unsupported export format: ${format}`);\n      }\n\n      // Update export record\n      const updatedExport = await this.prisma.reportExport.update({\n        where: { id: exportRecord.id },\n        data: {\n          status: ReportStatus.COMPLETED,\n          fileUrl,\n          fileSize,\n          completedAt: new Date()\n        }\n      });\n\n      return updatedExport;\n\n    } catch (error) {\n      await this.prisma.reportExport.update({\n        where: { id: exportRecord.id },\n        data: {\n          status: ReportStatus.FAILED,\n          error: error.message\n        }\n      });\n      throw error;\n    }\n  }\n\n  private async generateExcelReport(report: any) {\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(report.name);\n\n    // Add headers\n    const data = report.data.data || [];\n    if (data.length > 0) {\n      const headers = Object.keys(data[0]);\n      worksheet.addRow(headers);\n\n      // Add data rows\n      data.forEach(row => {\n        worksheet.addRow(Object.values(row));\n      });\n    }\n\n    // Save to buffer\n    const buffer = await workbook.xlsx.writeBuffer();\n    \n    // Upload to storage (implement your storage logic)\n    const fileName = `${report.id}_${Date.now()}.xlsx`;\n    const fileUrl = await this.uploadFile(fileName, buffer);\n\n    return {\n      url: fileUrl,\n      size: buffer.length\n    };\n  }\n\n  private async generateCSVReport(report: any) {\n    const data = report.data.data || [];\n    if (data.length === 0) {\n      throw new BadRequestException('No data to export');\n    }\n\n    const headers = Object.keys(data[0]);\n    let csv = headers.join(',') + '\\n';\n\n    data.forEach(row => {\n      const values = Object.values(row).map(value => \n        typeof value === 'string' ? `\"${value}\"` : value\n      );\n      csv += values.join(',') + '\\n';\n    });\n\n    const buffer = Buffer.from(csv, 'utf8');\n    const fileName = `${report.id}_${Date.now()}.csv`;\n    const fileUrl = await this.uploadFile(fileName, buffer);\n\n    return {\n      url: fileUrl,\n      size: buffer.length\n    };\n  }\n\n  private async uploadFile(fileName: string, buffer: Buffer): Promise<string> {\n    // Implement your file upload logic (AWS S3, Google Cloud Storage, etc.)\n    // For now, return a placeholder URL\n    return `https://storage.example.com/reports/${fileName}`;\n  }\n\n  // Sharing\n  async shareReport(reportId: string, userId: string) {\n    const report = await this.prisma.report.findUnique({\n      where: { id: reportId }\n    });\n\n    if (!report || report.userId !== userId) {\n      throw new NotFoundException('Report not found');\n    }\n\n    const shareToken = this.crypto.generateRandomString(32);\n    \n    const updatedReport = await this.prisma.report.update({\n      where: { id: reportId },\n      data: {\n        shareToken,\n        isShared: true,\n        sharedAt: new Date(),\n        expiresAt: addDays(new Date(), 30) // Expire in 30 days\n      }\n    });\n\n    return {\n      shareUrl: `${process.env.FRONTEND_URL}/reports/shared/${shareToken}`,\n      expiresAt: updatedReport.expiresAt\n    };\n  }\n\n  async getSharedReport(shareToken: string) {\n    const report = await this.prisma.report.findUnique({\n      where: { shareToken },\n      include: {\n        user: {\n          select: {\n            firstName: true,\n            lastName: true\n          }\n        },\n        organization: {\n          select: {\n            name: true\n          }\n        }\n      }\n    });\n\n    if (!report || !report.isShared || (report.expiresAt && report.expiresAt < new Date())) {\n      throw new NotFoundException('Shared report not found or expired');\n    }\n\n    return report;\n  }\n\n  // History\n  async getReportHistory(\n    organizationId: string,\n    userId?: string,\n    filters?: {\n      type?: ReportType;\n      status?: ReportStatus;\n      dateFrom?: Date;\n      dateTo?: Date;\n    }\n  ) {\n    const where: Prisma.ReportWhereInput = {\n      organizationId,\n      ...(userId && { userId }),\n      ...(filters?.type && { type: filters.type }),\n      ...(filters?.status && { status: filters.status }),\n      ...(filters?.dateFrom && filters?.dateTo && {\n        createdAt: {\n          gte: filters.dateFrom,\n          lte: filters.dateTo\n        }\n      })\n    };\n\n    const reports = await this.prisma.report.findMany({\n      where,\n      orderBy: { createdAt: 'desc' },\n      include: {\n        user: {\n          select: {\n            firstName: true,\n            lastName: true\n          }\n        },\n        template: {\n          select: {\n            name: true\n          }\n        },\n        _count: {\n          select: {\n            exports: true\n          }\n        }\n      },\n      take: 100\n    });\n\n    return reports;\n  }\n\n  // Cache Management\n  private generateCacheKey(organizationId: string, type: ReportType, config: ReportConfig): string {\n    const configHash = createHash('md5')\n      .update(JSON.stringify(config))\n      .digest('hex');\n    return `${this.CACHE_PREFIX}${organizationId}:${type}:${configHash}`;\n  }\n\n  private async getCachedReport(cacheKey: string): Promise<ReportData | null> {\n    try {\n      const cached = await this.redis.get(cacheKey);\n      return cached ? JSON.parse(cached) : null;\n    } catch (error) {\n      this.logger.warn(`Cache read error for key ${cacheKey}:`, error);\n      return null;\n    }\n  }\n\n  private async cacheReport(cacheKey: string, data: ReportData): Promise<void> {\n    try {\n      await this.redis.setex(cacheKey, this.CACHE_TTL, JSON.stringify(data));\n    } catch (error) {\n      this.logger.warn(`Cache write error for key ${cacheKey}:`, error);\n    }\n  }\n\n  /**\n   * Get cache TTL based on report type\n   */\n  private getCacheTTL(reportType: ReportType): number {\n    const ttlMap: Record<string, number> = {\n      [ReportType.CAMPAIGN_PERFORMANCE]: 1800, // 30 minutes\n      [ReportType.CONVERSION_FUNNEL]: 3600, // 1 hour\n      [ReportType.PERIOD_COMPARISON]: 7200, // 2 hours\n      [ReportType.ROI_ROAS_ANALYSIS]: 1800, // 30 minutes\n      [ReportType.EXECUTIVE_SUMMARY]: 3600, // 1 hour\n      [ReportType.COHORT_ANALYSIS]: 14400, // 4 hours\n    };\n    \n    return ttlMap[reportType] || 3600; // Default 1 hour\n  }\n\n  /**\n   * Invalidate cache for organization\n   */\n  async invalidateOrganizationCache(organizationId: string): Promise<void> {\n    if (await this.cacheService.isAvailable()) {\n      await this.cacheService.invalidateOrganizationCache(organizationId);\n    }\n  }\n\n  /**\n   * Invalidate cache for user\n   */\n  async invalidateUserCache(userId: string): Promise<void> {\n    if (await this.cacheService.isAvailable()) {\n      await this.cacheService.invalidateUserCache(userId);\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  async getCacheStats() {\n    if (await this.cacheService.isAvailable()) {\n      return await this.cacheService.getCacheStats();\n    }\n    return null;\n  }\n\n  // Utility Functions\n  private buildFilters(filters: Record<string, any>): Prisma.CampaignWhereInput {\n    const where: Prisma.CampaignWhereInput = {};\n\n    if (filters.platform) {\n      where.platform = filters.platform;\n    }\n\n    if (filters.status) {\n      where.status = filters.status;\n    }\n\n    if (filters.campaignIds && filters.campaignIds.length > 0) {\n      where.id = { in: filters.campaignIds };\n    }\n\n    return where;\n  }\n\n  // Default Templates\n  async createDefaultTemplates(organizationId: string) {\n    const defaultTemplates = [\n      {\n        name: 'Campaign Performance Overview',\n        description: 'Comprehensive overview of all campaign performance metrics',\n        type: ReportType.CAMPAIGN_PERFORMANCE,\n        config: {\n          dateRange: { start: subDays(new Date(), 30), end: new Date() },\n          metrics: ['impressions', 'clicks', 'spend', 'conversions', 'revenue'],\n          dimensions: ['campaignName', 'platform'],\n          filters: {},\n          charts: [\n            { type: ChartType.BAR, title: 'Campaign Performance', metrics: ['impressions', 'clicks'] },\n            { type: ChartType.LINE, title: 'Spend Trend', metrics: ['spend'] }\n          ]\n        },\n        isDefault: true,\n        isPublic: true\n      },\n      {\n        name: 'ROI Analysis',\n        description: 'Return on investment analysis for all campaigns',\n        type: ReportType.ROI_ROAS_ANALYSIS,\n        config: {\n          dateRange: { start: subDays(new Date(), 30), end: new Date() },\n          metrics: ['spend', 'revenue', 'roas', 'roi'],\n          dimensions: ['campaignName'],\n          filters: {},\n          charts: [\n            { type: ChartType.BAR, title: 'ROAS by Campaign', metrics: ['roas'] }\n          ]\n        },\n        isDefault: true,\n        isPublic: true\n      }\n    ];\n\n    for (const template of defaultTemplates) {\n      await this.prisma.reportTemplate.create({\n        data: {\n          organizationId,\n          ...template\n        }\n      });\n    }\n\n    this.logger.log(`Created ${defaultTemplates.length} default templates for organization ${organizationId}`);\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2e3cb0baa5117dd10a33084353f18ad898fa7634"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_78ak2no1v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_78ak2no1v();
var __decorate =
/* istanbul ignore next */
(cov_78ak2no1v().s[0]++,
/* istanbul ignore next */
(cov_78ak2no1v().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_78ak2no1v().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_78ak2no1v().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_78ak2no1v().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_78ak2no1v().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_78ak2no1v().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_78ak2no1v().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_78ak2no1v().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_78ak2no1v().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_78ak2no1v().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_78ak2no1v().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_78ak2no1v().b[3][0]++;
    cov_78ak2no1v().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_78ak2no1v().b[3][1]++;
    cov_78ak2no1v().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_78ak2no1v().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_78ak2no1v().b[5][0]++;
        cov_78ak2no1v().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_78ak2no1v().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_78ak2no1v().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_78ak2no1v().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_78ak2no1v().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_78ak2no1v().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_78ak2no1v().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_78ak2no1v().s[9]++;
  return /* istanbul ignore next */(cov_78ak2no1v().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_78ak2no1v().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_78ak2no1v().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_78ak2no1v().s[10]++,
/* istanbul ignore next */
(cov_78ak2no1v().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_78ak2no1v().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_78ak2no1v().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_78ak2no1v().f[1]++;
  cov_78ak2no1v().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_78ak2no1v().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_78ak2no1v().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_78ak2no1v().b[11][0]++;
    cov_78ak2no1v().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_78ak2no1v().b[11][1]++;
  }
}));
var ReportsService_1;
var _a, _b, _c, _d, _e, _f;
import { Injectable, Logger, NotFoundException, BadRequestException } from '@nestjs/common';
import { PrismaService } from './prisma.service';
import { RedisService } from './redis.service';
import { EmailService } from './email.service';
import { PDFService } from './pdf.service';
import { CryptoService } from './crypto.service';
import { CacheService } from '../reports/cache.service';
import { ReportType, ReportStatus, ReportFormat, ChartType } from '@prisma/client';
import { addDays, subDays } from 'date-fns';
import * as ExcelJS from 'exceljs';
import { createHash } from 'crypto';
let ReportsService =
/* istanbul ignore next */
(cov_78ak2no1v().s[13]++, ReportsService_1 = class ReportsService {
  prisma;
  redis;
  email;
  pdf;
  crypto;
  cacheService;
  logger =
  /* istanbul ignore next */
  (cov_78ak2no1v().s[14]++, new Logger(ReportsService_1.name));
  CACHE_TTL =
  /* istanbul ignore next */
  (cov_78ak2no1v().s[15]++, 3600); // 1 hour
  CACHE_PREFIX =
  /* istanbul ignore next */
  (cov_78ak2no1v().s[16]++, 'report:');
  constructor(prisma, redis, email, pdf, crypto, cacheService) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[2]++;
    cov_78ak2no1v().s[17]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_78ak2no1v().s[18]++;
    this.redis = redis;
    /* istanbul ignore next */
    cov_78ak2no1v().s[19]++;
    this.email = email;
    /* istanbul ignore next */
    cov_78ak2no1v().s[20]++;
    this.pdf = pdf;
    /* istanbul ignore next */
    cov_78ak2no1v().s[21]++;
    this.crypto = crypto;
    /* istanbul ignore next */
    cov_78ak2no1v().s[22]++;
    this.cacheService = cacheService;
  }
  // Template Management
  async getTemplates(organizationId, userId) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[3]++;
    const templates =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[23]++, await this.prisma.reportTemplate.findMany({
      where: {
        organizationId,
        OR: [{
          isPublic: true
        }, {
          userId
        }, {
          isDefault: true
        }]
      },
      orderBy: [{
        isDefault: 'desc'
      }, {
        createdAt: 'desc'
      }],
      include: {
        user: {
          select: {
            firstName: true,
            lastName: true
          }
        },
        _count: {
          select: {
            reports: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_78ak2no1v().s[24]++;
    return templates;
  }
  async createTemplate(organizationId, userId, data) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[4]++;
    const template =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[25]++, await this.prisma.reportTemplate.create({
      data: {
        organizationId,
        userId,
        ...data
      }
    }));
    /* istanbul ignore next */
    cov_78ak2no1v().s[26]++;
    this.logger.log(`Template created: ${template.id} by user ${userId}`);
    /* istanbul ignore next */
    cov_78ak2no1v().s[27]++;
    return template;
  }
  // Report Generation
  async generateReport(organizationId, userId, data) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[5]++;
    const startTime =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[28]++, Date.now());
    // Create report record
    const report =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[29]++, await this.prisma.report.create({
      data: {
        organizationId,
        userId,
        templateId: data.templateId,
        name: data.name,
        type: data.type,
        config: data.config,
        format: data.format,
        status: ReportStatus.GENERATING,
        startedAt: new Date()
      }
    }));
    /* istanbul ignore next */
    cov_78ak2no1v().s[30]++;
    try {
      let reportData;
      // Check cache first if enabled
      /* istanbul ignore next */
      cov_78ak2no1v().s[31]++;
      if (
      /* istanbul ignore next */
      (cov_78ak2no1v().b[14][0]++, data.useCache !== false) &&
      /* istanbul ignore next */
      (cov_78ak2no1v().b[14][1]++, await this.cacheService.isAvailable())) {
        /* istanbul ignore next */
        cov_78ak2no1v().b[13][0]++;
        const cacheKey =
        /* istanbul ignore next */
        (cov_78ak2no1v().s[32]++, {
          templateId: data.templateId,
          userId,
          organizationId,
          filters: data.config.filters,
          dateRange: data.config.dateRange,
          metrics: data.config.metrics,
          dimensions: data.config.dimensions
        });
        const cachedReport =
        /* istanbul ignore next */
        (cov_78ak2no1v().s[33]++, await this.cacheService.getCachedReport(cacheKey));
        /* istanbul ignore next */
        cov_78ak2no1v().s[34]++;
        if (cachedReport) {
          /* istanbul ignore next */
          cov_78ak2no1v().b[15][0]++;
          cov_78ak2no1v().s[35]++;
          this.logger.log(`Using cached report for: ${data.name}`);
          /* istanbul ignore next */
          cov_78ak2no1v().s[36]++;
          reportData = cachedReport;
        } else
        /* istanbul ignore next */
        {
          cov_78ak2no1v().b[15][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_78ak2no1v().b[13][1]++;
      }
      // Generate report data if not cached
      cov_78ak2no1v().s[37]++;
      if (!reportData) {
        /* istanbul ignore next */
        cov_78ak2no1v().b[16][0]++;
        // Check legacy cache first
        const cacheKey =
        /* istanbul ignore next */
        (cov_78ak2no1v().s[38]++, this.generateCacheKey(organizationId, data.type, data.config));
        /* istanbul ignore next */
        cov_78ak2no1v().s[39]++;
        reportData = await this.getCachedReport(cacheKey);
        /* istanbul ignore next */
        cov_78ak2no1v().s[40]++;
        if (!reportData) {
          /* istanbul ignore next */
          cov_78ak2no1v().b[17][0]++;
          cov_78ak2no1v().s[41]++;
          // Generate report data
          reportData = await this.generateReportData(organizationId, data.type, data.config);
          // Cache the result in both systems
          /* istanbul ignore next */
          cov_78ak2no1v().s[42]++;
          await this.cacheReport(cacheKey, reportData);
          /* istanbul ignore next */
          cov_78ak2no1v().s[43]++;
          if (
          /* istanbul ignore next */
          (cov_78ak2no1v().b[19][0]++, data.useCache !== false) &&
          /* istanbul ignore next */
          (cov_78ak2no1v().b[19][1]++, await this.cacheService.isAvailable())) {
            /* istanbul ignore next */
            cov_78ak2no1v().b[18][0]++;
            const newCacheKey =
            /* istanbul ignore next */
            (cov_78ak2no1v().s[44]++, {
              templateId: data.templateId,
              userId,
              organizationId,
              filters: data.config.filters,
              dateRange: data.config.dateRange,
              metrics: data.config.metrics,
              dimensions: data.config.dimensions
            });
            /* istanbul ignore next */
            cov_78ak2no1v().s[45]++;
            await this.cacheService.cacheReport(newCacheKey, reportData, {
              ttl: this.getCacheTTL(data.type)
            });
          } else
          /* istanbul ignore next */
          {
            cov_78ak2no1v().b[18][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_78ak2no1v().b[17][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_78ak2no1v().b[16][1]++;
      }
      const processingTime =
      /* istanbul ignore next */
      (cov_78ak2no1v().s[46]++, Date.now() - startTime);
      // Update report with data
      const updatedReport =
      /* istanbul ignore next */
      (cov_78ak2no1v().s[47]++, await this.prisma.report.update({
        where: {
          id: report.id
        },
        data: {
          status: ReportStatus.COMPLETED,
          data: reportData,
          completedAt: new Date(),
          processingTime
        }
      }));
      /* istanbul ignore next */
      cov_78ak2no1v().s[48]++;
      this.logger.log(`Report generated: ${report.id} in ${processingTime}ms`);
      /* istanbul ignore next */
      cov_78ak2no1v().s[49]++;
      return updatedReport;
    } catch (error) {
      /* istanbul ignore next */
      cov_78ak2no1v().s[50]++;
      // Update report with error
      await this.prisma.report.update({
        where: {
          id: report.id
        },
        data: {
          status: ReportStatus.FAILED,
          error: error.message,
          completedAt: new Date()
        }
      });
      /* istanbul ignore next */
      cov_78ak2no1v().s[51]++;
      this.logger.error(`Report generation failed: ${report.id}`, error);
      /* istanbul ignore next */
      cov_78ak2no1v().s[52]++;
      throw error;
    }
  }
  async generateReportData(organizationId, type, config) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[6]++;
    const startTime =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[53]++, Date.now());
    /* istanbul ignore next */
    cov_78ak2no1v().s[54]++;
    switch (type) {
      case ReportType.CAMPAIGN_PERFORMANCE:
        /* istanbul ignore next */
        cov_78ak2no1v().b[20][0]++;
        cov_78ak2no1v().s[55]++;
        return this.generateCampaignPerformanceReport(organizationId, config);
      case ReportType.ROI_ROAS_ANALYSIS:
        /* istanbul ignore next */
        cov_78ak2no1v().b[20][1]++;
        cov_78ak2no1v().s[56]++;
        return this.generateROIROASReport(organizationId, config);
      case ReportType.CONVERSION_FUNNEL:
        /* istanbul ignore next */
        cov_78ak2no1v().b[20][2]++;
        cov_78ak2no1v().s[57]++;
        return this.generateConversionFunnelReport(organizationId, config);
      case ReportType.PERIOD_COMPARISON:
        /* istanbul ignore next */
        cov_78ak2no1v().b[20][3]++;
        cov_78ak2no1v().s[58]++;
        return this.generatePeriodComparisonReport(organizationId, config);
      case ReportType.EXECUTIVE_SUMMARY:
        /* istanbul ignore next */
        cov_78ak2no1v().b[20][4]++;
        cov_78ak2no1v().s[59]++;
        return this.generateExecutiveSummaryReport(organizationId, config);
      case ReportType.COHORT_ANALYSIS:
        /* istanbul ignore next */
        cov_78ak2no1v().b[20][5]++;
        cov_78ak2no1v().s[60]++;
        return this.generateCohortAnalysisReport(organizationId, config);
      default:
        /* istanbul ignore next */
        cov_78ak2no1v().b[20][6]++;
        cov_78ak2no1v().s[61]++;
        throw new BadRequestException(`Unsupported report type: ${type}`);
    }
  }
  async generateCampaignPerformanceReport(organizationId, config) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[7]++;
    const {
      dateRange,
      metrics,
      filters
    } =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[62]++, config);
    // Get campaign metrics
    const campaigns =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[63]++, await this.prisma.campaign.findMany({
      where: {
        organizationId,
        createdAt: {
          gte: dateRange.start,
          lte: dateRange.end
        },
        ...this.buildFilters(filters)
      },
      include: {
        metrics: {
          where: {
            date: {
              gte: dateRange.start,
              lte: dateRange.end
            }
          }
        }
      }
    }));
    // Process data
    const data =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[64]++, campaigns.map(campaign => {
      /* istanbul ignore next */
      cov_78ak2no1v().f[8]++;
      const campaignMetrics =
      /* istanbul ignore next */
      (cov_78ak2no1v().s[65]++, campaign.metrics.reduce((acc, metric) => {
        /* istanbul ignore next */
        cov_78ak2no1v().f[9]++;
        cov_78ak2no1v().s[66]++;
        acc.impressions = (
        /* istanbul ignore next */
        (cov_78ak2no1v().b[21][0]++, acc.impressions) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[21][1]++, 0)) + (
        /* istanbul ignore next */
        (cov_78ak2no1v().b[22][0]++, metric.impressions) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[22][1]++, 0));
        /* istanbul ignore next */
        cov_78ak2no1v().s[67]++;
        acc.clicks = (
        /* istanbul ignore next */
        (cov_78ak2no1v().b[23][0]++, acc.clicks) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[23][1]++, 0)) + (
        /* istanbul ignore next */
        (cov_78ak2no1v().b[24][0]++, metric.clicks) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[24][1]++, 0));
        /* istanbul ignore next */
        cov_78ak2no1v().s[68]++;
        acc.spend = (
        /* istanbul ignore next */
        (cov_78ak2no1v().b[25][0]++, acc.spend) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[25][1]++, 0)) + Number(
        /* istanbul ignore next */
        (cov_78ak2no1v().b[26][0]++, metric.spend) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[26][1]++, 0));
        /* istanbul ignore next */
        cov_78ak2no1v().s[69]++;
        acc.conversions = (
        /* istanbul ignore next */
        (cov_78ak2no1v().b[27][0]++, acc.conversions) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[27][1]++, 0)) + (
        /* istanbul ignore next */
        (cov_78ak2no1v().b[28][0]++, metric.conversions) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[28][1]++, 0));
        /* istanbul ignore next */
        cov_78ak2no1v().s[70]++;
        acc.revenue = (
        /* istanbul ignore next */
        (cov_78ak2no1v().b[29][0]++, acc.revenue) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[29][1]++, 0)) + Number(
        /* istanbul ignore next */
        (cov_78ak2no1v().b[30][0]++, metric.revenue) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[30][1]++, 0));
        /* istanbul ignore next */
        cov_78ak2no1v().s[71]++;
        return acc;
      }, {}));
      /* istanbul ignore next */
      cov_78ak2no1v().s[72]++;
      return {
        campaignId: campaign.id,
        campaignName: campaign.name,
        platform: campaign.platform,
        status: campaign.status,
        ...campaignMetrics,
        ctr:
        /* istanbul ignore next */
        (cov_78ak2no1v().b[31][0]++, campaignMetrics.clicks / campaignMetrics.impressions * 100) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[31][1]++, 0),
        cpc:
        /* istanbul ignore next */
        (cov_78ak2no1v().b[32][0]++, campaignMetrics.spend / campaignMetrics.clicks) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[32][1]++, 0),
        roas:
        /* istanbul ignore next */
        (cov_78ak2no1v().b[33][0]++, campaignMetrics.revenue / campaignMetrics.spend) ||
        /* istanbul ignore next */
        (cov_78ak2no1v().b[33][1]++, 0)
      };
    }));
    // Calculate summary
    const summary =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[73]++, data.reduce((acc, item) => {
      /* istanbul ignore next */
      cov_78ak2no1v().f[10]++;
      cov_78ak2no1v().s[74]++;
      acc.totalImpressions = (
      /* istanbul ignore next */
      (cov_78ak2no1v().b[34][0]++, acc.totalImpressions) ||
      /* istanbul ignore next */
      (cov_78ak2no1v().b[34][1]++, 0)) + item.impressions;
      /* istanbul ignore next */
      cov_78ak2no1v().s[75]++;
      acc.totalClicks = (
      /* istanbul ignore next */
      (cov_78ak2no1v().b[35][0]++, acc.totalClicks) ||
      /* istanbul ignore next */
      (cov_78ak2no1v().b[35][1]++, 0)) + item.clicks;
      /* istanbul ignore next */
      cov_78ak2no1v().s[76]++;
      acc.totalSpend = (
      /* istanbul ignore next */
      (cov_78ak2no1v().b[36][0]++, acc.totalSpend) ||
      /* istanbul ignore next */
      (cov_78ak2no1v().b[36][1]++, 0)) + item.spend;
      /* istanbul ignore next */
      cov_78ak2no1v().s[77]++;
      acc.totalConversions = (
      /* istanbul ignore next */
      (cov_78ak2no1v().b[37][0]++, acc.totalConversions) ||
      /* istanbul ignore next */
      (cov_78ak2no1v().b[37][1]++, 0)) + item.conversions;
      /* istanbul ignore next */
      cov_78ak2no1v().s[78]++;
      acc.totalRevenue = (
      /* istanbul ignore next */
      (cov_78ak2no1v().b[38][0]++, acc.totalRevenue) ||
      /* istanbul ignore next */
      (cov_78ak2no1v().b[38][1]++, 0)) + item.revenue;
      /* istanbul ignore next */
      cov_78ak2no1v().s[79]++;
      return acc;
    }, {}));
    /* istanbul ignore next */
    cov_78ak2no1v().s[80]++;
    summary.avgCTR =
    /* istanbul ignore next */
    (cov_78ak2no1v().b[39][0]++, summary.totalClicks / summary.totalImpressions * 100) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[39][1]++, 0);
    /* istanbul ignore next */
    cov_78ak2no1v().s[81]++;
    summary.avgCPC =
    /* istanbul ignore next */
    (cov_78ak2no1v().b[40][0]++, summary.totalSpend / summary.totalClicks) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[40][1]++, 0);
    /* istanbul ignore next */
    cov_78ak2no1v().s[82]++;
    summary.totalROAS =
    /* istanbul ignore next */
    (cov_78ak2no1v().b[41][0]++, summary.totalRevenue / summary.totalSpend) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[41][1]++, 0);
    // Generate charts
    const charts =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[83]++, [{
      type: ChartType.BAR,
      title: 'Campaign Performance',
      data: data.map(item => {
        /* istanbul ignore next */
        cov_78ak2no1v().f[11]++;
        cov_78ak2no1v().s[84]++;
        return {
          name: item.campaignName,
          impressions: item.impressions,
          clicks: item.clicks,
          spend: item.spend
        };
      })
    }, {
      type: ChartType.LINE,
      title: 'ROAS by Campaign',
      data: data.map(item => {
        /* istanbul ignore next */
        cov_78ak2no1v().f[12]++;
        cov_78ak2no1v().s[85]++;
        return {
          name: item.campaignName,
          roas: item.roas
        };
      })
    }]);
    /* istanbul ignore next */
    cov_78ak2no1v().s[86]++;
    return {
      summary,
      data,
      charts,
      metadata: {
        generatedAt: new Date(),
        dateRange,
        totalRecords: data.length,
        processingTime: Date.now() - Date.now()
      }
    };
  }
  async generateROIROASReport(organizationId, config) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[13]++;
    cov_78ak2no1v().s[87]++;
    // Implementation for ROI/ROAS analysis
    // Similar structure to campaign performance but focused on ROI metrics
    return this.generateCampaignPerformanceReport(organizationId, config);
  }
  async generateConversionFunnelReport(organizationId, config) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[14]++;
    const {
      dateRange
    } =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[88]++, config);
    // Get funnel stages
    const funnelStages =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[89]++, await this.prisma.funnelStage.findMany({
      where: {
        organizationId
      },
      orderBy: {
        order: 'asc'
      },
      include: {
        conversionEvents: {
          where: {
            timestamp: {
              gte: dateRange.start,
              lte: dateRange.end
            }
          }
        }
      }
    }));
    const data =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[90]++, funnelStages.map(stage => {
      /* istanbul ignore next */
      cov_78ak2no1v().f[15]++;
      cov_78ak2no1v().s[91]++;
      return {
        stageName: stage.name,
        stageOrder: stage.order,
        events: stage.conversionEvents.length,
        conversionRate: 0 // Calculate based on previous stage
      };
    }));
    // Calculate conversion rates
    /* istanbul ignore next */
    cov_78ak2no1v().s[92]++;
    for (let i =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[93]++, 1); i < data.length; i++) {
      /* istanbul ignore next */
      cov_78ak2no1v().s[94]++;
      data[i].conversionRate = data[i - 1].events > 0 ?
      /* istanbul ignore next */
      (cov_78ak2no1v().b[42][0]++, data[i].events / data[i - 1].events * 100) :
      /* istanbul ignore next */
      (cov_78ak2no1v().b[42][1]++, 0);
    }
    const summary =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[95]++, {
      totalStages: data.length,
      totalEvents: data.reduce((sum, stage) => {
        /* istanbul ignore next */
        cov_78ak2no1v().f[16]++;
        cov_78ak2no1v().s[96]++;
        return sum + stage.events;
      }, 0),
      overallConversionRate: data.length > 0 ?
      /* istanbul ignore next */
      (cov_78ak2no1v().b[43][0]++, data[data.length - 1].events / data[0].events * 100) :
      /* istanbul ignore next */
      (cov_78ak2no1v().b[43][1]++, 0)
    });
    const charts =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[97]++, [{
      type: ChartType.FUNNEL,
      title: 'Conversion Funnel',
      data: data.map(stage => {
        /* istanbul ignore next */
        cov_78ak2no1v().f[17]++;
        cov_78ak2no1v().s[98]++;
        return {
          name: stage.stageName,
          value: stage.events
        };
      })
    }]);
    /* istanbul ignore next */
    cov_78ak2no1v().s[99]++;
    return {
      summary,
      data,
      charts,
      metadata: {
        generatedAt: new Date(),
        dateRange,
        totalRecords: data.length,
        processingTime: 0
      }
    };
  }
  async generatePeriodComparisonReport(organizationId, config) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[18]++;
    const {
      dateRange
    } =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[100]++, config);
    /* istanbul ignore next */
    cov_78ak2no1v().s[101]++;
    if (
    /* istanbul ignore next */
    (cov_78ak2no1v().b[45][0]++, !dateRange.compareStart) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[45][1]++, !dateRange.compareEnd)) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[44][0]++;
      cov_78ak2no1v().s[102]++;
      throw new BadRequestException('Comparison period is required for period comparison report');
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[44][1]++;
    }
    // Get data for both periods
    const currentPeriodData =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[103]++, await this.generateCampaignPerformanceReport(organizationId, {
      ...config,
      dateRange: {
        start: dateRange.start,
        end: dateRange.end
      }
    }));
    const previousPeriodData =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[104]++, await this.generateCampaignPerformanceReport(organizationId, {
      ...config,
      dateRange: {
        start: dateRange.compareStart,
        end: dateRange.compareEnd
      }
    }));
    // Calculate changes
    const summary =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[105]++, {
      current: currentPeriodData.summary,
      previous: previousPeriodData.summary,
      changes: {}
    });
    /* istanbul ignore next */
    cov_78ak2no1v().s[106]++;
    Object.keys(currentPeriodData.summary).forEach(key => {
      /* istanbul ignore next */
      cov_78ak2no1v().f[19]++;
      const current =
      /* istanbul ignore next */
      (cov_78ak2no1v().s[107]++,
      /* istanbul ignore next */
      (cov_78ak2no1v().b[46][0]++, currentPeriodData.summary[key]) ||
      /* istanbul ignore next */
      (cov_78ak2no1v().b[46][1]++, 0));
      const previous =
      /* istanbul ignore next */
      (cov_78ak2no1v().s[108]++,
      /* istanbul ignore next */
      (cov_78ak2no1v().b[47][0]++, previousPeriodData.summary[key]) ||
      /* istanbul ignore next */
      (cov_78ak2no1v().b[47][1]++, 0));
      /* istanbul ignore next */
      cov_78ak2no1v().s[109]++;
      summary.changes[key] = {
        absolute: current - previous,
        percentage: previous > 0 ?
        /* istanbul ignore next */
        (cov_78ak2no1v().b[48][0]++, (current - previous) / previous * 100) :
        /* istanbul ignore next */
        (cov_78ak2no1v().b[48][1]++, 0)
      };
    });
    /* istanbul ignore next */
    cov_78ak2no1v().s[110]++;
    return {
      summary,
      data: currentPeriodData.data,
      charts: currentPeriodData.charts,
      metadata: {
        generatedAt: new Date(),
        dateRange,
        totalRecords: currentPeriodData.data.length,
        processingTime: 0
      }
    };
  }
  async generateExecutiveSummaryReport(organizationId, config) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[20]++;
    // High-level summary combining multiple report types
    const campaignData =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[111]++, await this.generateCampaignPerformanceReport(organizationId, config));
    const funnelData =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[112]++, await this.generateConversionFunnelReport(organizationId, config));
    const summary =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[113]++, {
      ...campaignData.summary,
      funnelConversionRate: funnelData.summary.overallConversionRate,
      totalFunnelEvents: funnelData.summary.totalEvents
    });
    /* istanbul ignore next */
    cov_78ak2no1v().s[114]++;
    return {
      summary,
      data: campaignData.data,
      charts: [...campaignData.charts, ...funnelData.charts],
      metadata: {
        generatedAt: new Date(),
        dateRange: config.dateRange,
        totalRecords: campaignData.data.length,
        processingTime: 0
      }
    };
  }
  async generateCohortAnalysisReport(organizationId, config) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[21]++;
    cov_78ak2no1v().s[115]++;
    // Cohort analysis implementation
    // This would analyze user behavior over time periods
    return this.generateCampaignPerformanceReport(organizationId, config);
  }
  // Export Functions
  async exportReport(reportId, userId, format) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[22]++;
    const report =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[116]++, await this.prisma.report.findUnique({
      where: {
        id: reportId
      },
      include: {
        user: true,
        organization: true
      }
    }));
    /* istanbul ignore next */
    cov_78ak2no1v().s[117]++;
    if (!report) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[49][0]++;
      cov_78ak2no1v().s[118]++;
      throw new NotFoundException('Report not found');
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[49][1]++;
    }
    cov_78ak2no1v().s[119]++;
    if (report.userId !== userId) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[50][0]++;
      cov_78ak2no1v().s[120]++;
      throw new BadRequestException('Unauthorized access to report');
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[50][1]++;
    }
    // Create export record
    const exportRecord =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[121]++, await this.prisma.reportExport.create({
      data: {
        reportId,
        userId,
        format,
        fileName: `${report.name}_${format.toLowerCase()}_${Date.now()}`,
        fileSize: 0,
        fileUrl: '',
        status: ReportStatus.GENERATING,
        startedAt: new Date(),
        expiresAt: addDays(new Date(), 7) // Expire in 7 days
      }
    }));
    /* istanbul ignore next */
    cov_78ak2no1v().s[122]++;
    try {
      let fileUrl;
      let fileSize;
      /* istanbul ignore next */
      cov_78ak2no1v().s[123]++;
      switch (format) {
        case ReportFormat.PDF:
          /* istanbul ignore next */
          cov_78ak2no1v().b[51][0]++;
          const pdfResult =
          /* istanbul ignore next */
          (cov_78ak2no1v().s[124]++, await this.pdf.generateReportPDF(report));
          /* istanbul ignore next */
          cov_78ak2no1v().s[125]++;
          fileUrl = pdfResult.url;
          /* istanbul ignore next */
          cov_78ak2no1v().s[126]++;
          fileSize = pdfResult.size;
          /* istanbul ignore next */
          cov_78ak2no1v().s[127]++;
          break;
        case ReportFormat.EXCEL:
          /* istanbul ignore next */
          cov_78ak2no1v().b[51][1]++;
          const excelResult =
          /* istanbul ignore next */
          (cov_78ak2no1v().s[128]++, await this.generateExcelReport(report));
          /* istanbul ignore next */
          cov_78ak2no1v().s[129]++;
          fileUrl = excelResult.url;
          /* istanbul ignore next */
          cov_78ak2no1v().s[130]++;
          fileSize = excelResult.size;
          /* istanbul ignore next */
          cov_78ak2no1v().s[131]++;
          break;
        case ReportFormat.CSV:
          /* istanbul ignore next */
          cov_78ak2no1v().b[51][2]++;
          const csvResult =
          /* istanbul ignore next */
          (cov_78ak2no1v().s[132]++, await this.generateCSVReport(report));
          /* istanbul ignore next */
          cov_78ak2no1v().s[133]++;
          fileUrl = csvResult.url;
          /* istanbul ignore next */
          cov_78ak2no1v().s[134]++;
          fileSize = csvResult.size;
          /* istanbul ignore next */
          cov_78ak2no1v().s[135]++;
          break;
        default:
          /* istanbul ignore next */
          cov_78ak2no1v().b[51][3]++;
          cov_78ak2no1v().s[136]++;
          throw new BadRequestException(`Unsupported export format: ${format}`);
      }
      // Update export record
      const updatedExport =
      /* istanbul ignore next */
      (cov_78ak2no1v().s[137]++, await this.prisma.reportExport.update({
        where: {
          id: exportRecord.id
        },
        data: {
          status: ReportStatus.COMPLETED,
          fileUrl,
          fileSize,
          completedAt: new Date()
        }
      }));
      /* istanbul ignore next */
      cov_78ak2no1v().s[138]++;
      return updatedExport;
    } catch (error) {
      /* istanbul ignore next */
      cov_78ak2no1v().s[139]++;
      await this.prisma.reportExport.update({
        where: {
          id: exportRecord.id
        },
        data: {
          status: ReportStatus.FAILED,
          error: error.message
        }
      });
      /* istanbul ignore next */
      cov_78ak2no1v().s[140]++;
      throw error;
    }
  }
  async generateExcelReport(report) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[23]++;
    const workbook =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[141]++, new ExcelJS.Workbook());
    const worksheet =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[142]++, workbook.addWorksheet(report.name));
    // Add headers
    const data =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[143]++,
    /* istanbul ignore next */
    (cov_78ak2no1v().b[52][0]++, report.data.data) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[52][1]++, []));
    /* istanbul ignore next */
    cov_78ak2no1v().s[144]++;
    if (data.length > 0) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[53][0]++;
      const headers =
      /* istanbul ignore next */
      (cov_78ak2no1v().s[145]++, Object.keys(data[0]));
      /* istanbul ignore next */
      cov_78ak2no1v().s[146]++;
      worksheet.addRow(headers);
      // Add data rows
      /* istanbul ignore next */
      cov_78ak2no1v().s[147]++;
      data.forEach(row => {
        /* istanbul ignore next */
        cov_78ak2no1v().f[24]++;
        cov_78ak2no1v().s[148]++;
        worksheet.addRow(Object.values(row));
      });
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[53][1]++;
    }
    // Save to buffer
    const buffer =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[149]++, await workbook.xlsx.writeBuffer());
    // Upload to storage (implement your storage logic)
    const fileName =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[150]++, `${report.id}_${Date.now()}.xlsx`);
    const fileUrl =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[151]++, await this.uploadFile(fileName, buffer));
    /* istanbul ignore next */
    cov_78ak2no1v().s[152]++;
    return {
      url: fileUrl,
      size: buffer.length
    };
  }
  async generateCSVReport(report) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[25]++;
    const data =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[153]++,
    /* istanbul ignore next */
    (cov_78ak2no1v().b[54][0]++, report.data.data) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[54][1]++, []));
    /* istanbul ignore next */
    cov_78ak2no1v().s[154]++;
    if (data.length === 0) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[55][0]++;
      cov_78ak2no1v().s[155]++;
      throw new BadRequestException('No data to export');
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[55][1]++;
    }
    const headers =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[156]++, Object.keys(data[0]));
    let csv =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[157]++, headers.join(',') + '\n');
    /* istanbul ignore next */
    cov_78ak2no1v().s[158]++;
    data.forEach(row => {
      /* istanbul ignore next */
      cov_78ak2no1v().f[26]++;
      const values =
      /* istanbul ignore next */
      (cov_78ak2no1v().s[159]++, Object.values(row).map(value => {
        /* istanbul ignore next */
        cov_78ak2no1v().f[27]++;
        cov_78ak2no1v().s[160]++;
        return typeof value === 'string' ?
        /* istanbul ignore next */
        (cov_78ak2no1v().b[56][0]++, `"${value}"`) :
        /* istanbul ignore next */
        (cov_78ak2no1v().b[56][1]++, value);
      }));
      /* istanbul ignore next */
      cov_78ak2no1v().s[161]++;
      csv += values.join(',') + '\n';
    });
    const buffer =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[162]++, Buffer.from(csv, 'utf8'));
    const fileName =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[163]++, `${report.id}_${Date.now()}.csv`);
    const fileUrl =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[164]++, await this.uploadFile(fileName, buffer));
    /* istanbul ignore next */
    cov_78ak2no1v().s[165]++;
    return {
      url: fileUrl,
      size: buffer.length
    };
  }
  async uploadFile(fileName, buffer) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[28]++;
    cov_78ak2no1v().s[166]++;
    // Implement your file upload logic (AWS S3, Google Cloud Storage, etc.)
    // For now, return a placeholder URL
    return `https://storage.example.com/reports/${fileName}`;
  }
  // Sharing
  async shareReport(reportId, userId) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[29]++;
    const report =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[167]++, await this.prisma.report.findUnique({
      where: {
        id: reportId
      }
    }));
    /* istanbul ignore next */
    cov_78ak2no1v().s[168]++;
    if (
    /* istanbul ignore next */
    (cov_78ak2no1v().b[58][0]++, !report) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[58][1]++, report.userId !== userId)) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[57][0]++;
      cov_78ak2no1v().s[169]++;
      throw new NotFoundException('Report not found');
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[57][1]++;
    }
    const shareToken =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[170]++, this.crypto.generateRandomString(32));
    const updatedReport =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[171]++, await this.prisma.report.update({
      where: {
        id: reportId
      },
      data: {
        shareToken,
        isShared: true,
        sharedAt: new Date(),
        expiresAt: addDays(new Date(), 30) // Expire in 30 days
      }
    }));
    /* istanbul ignore next */
    cov_78ak2no1v().s[172]++;
    return {
      shareUrl: `${process.env.FRONTEND_URL}/reports/shared/${shareToken}`,
      expiresAt: updatedReport.expiresAt
    };
  }
  async getSharedReport(shareToken) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[30]++;
    const report =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[173]++, await this.prisma.report.findUnique({
      where: {
        shareToken
      },
      include: {
        user: {
          select: {
            firstName: true,
            lastName: true
          }
        },
        organization: {
          select: {
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_78ak2no1v().s[174]++;
    if (
    /* istanbul ignore next */
    (cov_78ak2no1v().b[60][0]++, !report) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[60][1]++, !report.isShared) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[60][2]++, report.expiresAt) &&
    /* istanbul ignore next */
    (cov_78ak2no1v().b[60][3]++, report.expiresAt < new Date())) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[59][0]++;
      cov_78ak2no1v().s[175]++;
      throw new NotFoundException('Shared report not found or expired');
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[59][1]++;
    }
    cov_78ak2no1v().s[176]++;
    return report;
  }
  // History
  async getReportHistory(organizationId, userId, filters) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[31]++;
    const where =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[177]++, {
      organizationId,
      ...(
      /* istanbul ignore next */
      (cov_78ak2no1v().b[61][0]++, userId) &&
      /* istanbul ignore next */
      (cov_78ak2no1v().b[61][1]++, {
        userId
      })),
      ...(
      /* istanbul ignore next */
      (cov_78ak2no1v().b[62][0]++, filters?.type) &&
      /* istanbul ignore next */
      (cov_78ak2no1v().b[62][1]++, {
        type: filters.type
      })),
      ...(
      /* istanbul ignore next */
      (cov_78ak2no1v().b[63][0]++, filters?.status) &&
      /* istanbul ignore next */
      (cov_78ak2no1v().b[63][1]++, {
        status: filters.status
      })),
      ...(
      /* istanbul ignore next */
      (cov_78ak2no1v().b[64][0]++, filters?.dateFrom) &&
      /* istanbul ignore next */
      (cov_78ak2no1v().b[64][1]++, filters?.dateTo) &&
      /* istanbul ignore next */
      (cov_78ak2no1v().b[64][2]++, {
        createdAt: {
          gte: filters.dateFrom,
          lte: filters.dateTo
        }
      }))
    });
    const reports =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[178]++, await this.prisma.report.findMany({
      where,
      orderBy: {
        createdAt: 'desc'
      },
      include: {
        user: {
          select: {
            firstName: true,
            lastName: true
          }
        },
        template: {
          select: {
            name: true
          }
        },
        _count: {
          select: {
            exports: true
          }
        }
      },
      take: 100
    }));
    /* istanbul ignore next */
    cov_78ak2no1v().s[179]++;
    return reports;
  }
  // Cache Management
  generateCacheKey(organizationId, type, config) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[32]++;
    const configHash =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[180]++, createHash('md5').update(JSON.stringify(config)).digest('hex'));
    /* istanbul ignore next */
    cov_78ak2no1v().s[181]++;
    return `${this.CACHE_PREFIX}${organizationId}:${type}:${configHash}`;
  }
  async getCachedReport(cacheKey) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[33]++;
    cov_78ak2no1v().s[182]++;
    try {
      const cached =
      /* istanbul ignore next */
      (cov_78ak2no1v().s[183]++, await this.redis.get(cacheKey));
      /* istanbul ignore next */
      cov_78ak2no1v().s[184]++;
      return cached ?
      /* istanbul ignore next */
      (cov_78ak2no1v().b[65][0]++, JSON.parse(cached)) :
      /* istanbul ignore next */
      (cov_78ak2no1v().b[65][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_78ak2no1v().s[185]++;
      this.logger.warn(`Cache read error for key ${cacheKey}:`, error);
      /* istanbul ignore next */
      cov_78ak2no1v().s[186]++;
      return null;
    }
  }
  async cacheReport(cacheKey, data) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[34]++;
    cov_78ak2no1v().s[187]++;
    try {
      /* istanbul ignore next */
      cov_78ak2no1v().s[188]++;
      await this.redis.setex(cacheKey, this.CACHE_TTL, JSON.stringify(data));
    } catch (error) {
      /* istanbul ignore next */
      cov_78ak2no1v().s[189]++;
      this.logger.warn(`Cache write error for key ${cacheKey}:`, error);
    }
  }
  /**
   * Get cache TTL based on report type
   */
  getCacheTTL(reportType) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[35]++;
    const ttlMap =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[190]++, {
      [ReportType.CAMPAIGN_PERFORMANCE]: 1800,
      // 30 minutes
      [ReportType.CONVERSION_FUNNEL]: 3600,
      // 1 hour
      [ReportType.PERIOD_COMPARISON]: 7200,
      // 2 hours
      [ReportType.ROI_ROAS_ANALYSIS]: 1800,
      // 30 minutes
      [ReportType.EXECUTIVE_SUMMARY]: 3600,
      // 1 hour
      [ReportType.COHORT_ANALYSIS]: 14400 // 4 hours
    });
    /* istanbul ignore next */
    cov_78ak2no1v().s[191]++;
    return /* istanbul ignore next */(cov_78ak2no1v().b[66][0]++, ttlMap[reportType]) ||
    /* istanbul ignore next */
    (cov_78ak2no1v().b[66][1]++, 3600); // Default 1 hour
  }
  /**
   * Invalidate cache for organization
   */
  async invalidateOrganizationCache(organizationId) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[36]++;
    cov_78ak2no1v().s[192]++;
    if (await this.cacheService.isAvailable()) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[67][0]++;
      cov_78ak2no1v().s[193]++;
      await this.cacheService.invalidateOrganizationCache(organizationId);
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[67][1]++;
    }
  }
  /**
   * Invalidate cache for user
   */
  async invalidateUserCache(userId) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[37]++;
    cov_78ak2no1v().s[194]++;
    if (await this.cacheService.isAvailable()) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[68][0]++;
      cov_78ak2no1v().s[195]++;
      await this.cacheService.invalidateUserCache(userId);
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[68][1]++;
    }
  }
  /**
   * Get cache statistics
   */
  async getCacheStats() {
    /* istanbul ignore next */
    cov_78ak2no1v().f[38]++;
    cov_78ak2no1v().s[196]++;
    if (await this.cacheService.isAvailable()) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[69][0]++;
      cov_78ak2no1v().s[197]++;
      return await this.cacheService.getCacheStats();
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[69][1]++;
    }
    cov_78ak2no1v().s[198]++;
    return null;
  }
  // Utility Functions
  buildFilters(filters) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[39]++;
    const where =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[199]++, {});
    /* istanbul ignore next */
    cov_78ak2no1v().s[200]++;
    if (filters.platform) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[70][0]++;
      cov_78ak2no1v().s[201]++;
      where.platform = filters.platform;
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[70][1]++;
    }
    cov_78ak2no1v().s[202]++;
    if (filters.status) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[71][0]++;
      cov_78ak2no1v().s[203]++;
      where.status = filters.status;
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[71][1]++;
    }
    cov_78ak2no1v().s[204]++;
    if (
    /* istanbul ignore next */
    (cov_78ak2no1v().b[73][0]++, filters.campaignIds) &&
    /* istanbul ignore next */
    (cov_78ak2no1v().b[73][1]++, filters.campaignIds.length > 0)) {
      /* istanbul ignore next */
      cov_78ak2no1v().b[72][0]++;
      cov_78ak2no1v().s[205]++;
      where.id = {
        in: filters.campaignIds
      };
    } else
    /* istanbul ignore next */
    {
      cov_78ak2no1v().b[72][1]++;
    }
    cov_78ak2no1v().s[206]++;
    return where;
  }
  // Default Templates
  async createDefaultTemplates(organizationId) {
    /* istanbul ignore next */
    cov_78ak2no1v().f[40]++;
    const defaultTemplates =
    /* istanbul ignore next */
    (cov_78ak2no1v().s[207]++, [{
      name: 'Campaign Performance Overview',
      description: 'Comprehensive overview of all campaign performance metrics',
      type: ReportType.CAMPAIGN_PERFORMANCE,
      config: {
        dateRange: {
          start: subDays(new Date(), 30),
          end: new Date()
        },
        metrics: ['impressions', 'clicks', 'spend', 'conversions', 'revenue'],
        dimensions: ['campaignName', 'platform'],
        filters: {},
        charts: [{
          type: ChartType.BAR,
          title: 'Campaign Performance',
          metrics: ['impressions', 'clicks']
        }, {
          type: ChartType.LINE,
          title: 'Spend Trend',
          metrics: ['spend']
        }]
      },
      isDefault: true,
      isPublic: true
    }, {
      name: 'ROI Analysis',
      description: 'Return on investment analysis for all campaigns',
      type: ReportType.ROI_ROAS_ANALYSIS,
      config: {
        dateRange: {
          start: subDays(new Date(), 30),
          end: new Date()
        },
        metrics: ['spend', 'revenue', 'roas', 'roi'],
        dimensions: ['campaignName'],
        filters: {},
        charts: [{
          type: ChartType.BAR,
          title: 'ROAS by Campaign',
          metrics: ['roas']
        }]
      },
      isDefault: true,
      isPublic: true
    }]);
    /* istanbul ignore next */
    cov_78ak2no1v().s[208]++;
    for (const template of defaultTemplates) {
      /* istanbul ignore next */
      cov_78ak2no1v().s[209]++;
      await this.prisma.reportTemplate.create({
        data: {
          organizationId,
          ...template
        }
      });
    }
    /* istanbul ignore next */
    cov_78ak2no1v().s[210]++;
    this.logger.log(`Created ${defaultTemplates.length} default templates for organization ${organizationId}`);
  }
});
/* istanbul ignore next */
cov_78ak2no1v().s[211]++;
ReportsService = ReportsService_1 = __decorate([Injectable(), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_78ak2no1v().b[75][0]++, typeof PrismaService !== "undefined") &&
/* istanbul ignore next */
(cov_78ak2no1v().b[75][1]++, PrismaService)) === "function" ?
/* istanbul ignore next */
(cov_78ak2no1v().b[74][0]++, _a) :
/* istanbul ignore next */
(cov_78ak2no1v().b[74][1]++, Object), typeof (_b =
/* istanbul ignore next */
(cov_78ak2no1v().b[77][0]++, typeof RedisService !== "undefined") &&
/* istanbul ignore next */
(cov_78ak2no1v().b[77][1]++, RedisService)) === "function" ?
/* istanbul ignore next */
(cov_78ak2no1v().b[76][0]++, _b) :
/* istanbul ignore next */
(cov_78ak2no1v().b[76][1]++, Object), typeof (_c =
/* istanbul ignore next */
(cov_78ak2no1v().b[79][0]++, typeof EmailService !== "undefined") &&
/* istanbul ignore next */
(cov_78ak2no1v().b[79][1]++, EmailService)) === "function" ?
/* istanbul ignore next */
(cov_78ak2no1v().b[78][0]++, _c) :
/* istanbul ignore next */
(cov_78ak2no1v().b[78][1]++, Object), typeof (_d =
/* istanbul ignore next */
(cov_78ak2no1v().b[81][0]++, typeof PDFService !== "undefined") &&
/* istanbul ignore next */
(cov_78ak2no1v().b[81][1]++, PDFService)) === "function" ?
/* istanbul ignore next */
(cov_78ak2no1v().b[80][0]++, _d) :
/* istanbul ignore next */
(cov_78ak2no1v().b[80][1]++, Object), typeof (_e =
/* istanbul ignore next */
(cov_78ak2no1v().b[83][0]++, typeof CryptoService !== "undefined") &&
/* istanbul ignore next */
(cov_78ak2no1v().b[83][1]++, CryptoService)) === "function" ?
/* istanbul ignore next */
(cov_78ak2no1v().b[82][0]++, _e) :
/* istanbul ignore next */
(cov_78ak2no1v().b[82][1]++, Object), typeof (_f =
/* istanbul ignore next */
(cov_78ak2no1v().b[85][0]++, typeof CacheService !== "undefined") &&
/* istanbul ignore next */
(cov_78ak2no1v().b[85][1]++, CacheService)) === "function" ?
/* istanbul ignore next */
(cov_78ak2no1v().b[84][0]++, _f) :
/* istanbul ignore next */
(cov_78ak2no1v().b[84][1]++, Object)])], ReportsService);
export { ReportsService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,