{"version":3,"names":["cov_78ak2no1v","actualCoverage","Injectable","Logger","NotFoundException","BadRequestException","PrismaService","RedisService","EmailService","PDFService","CryptoService","CacheService","ReportType","ReportStatus","ReportFormat","ChartType","addDays","subDays","ExcelJS","createHash","ReportsService","s","ReportsService_1","prisma","redis","email","pdf","crypto","cacheService","logger","name","CACHE_TTL","CACHE_PREFIX","constructor","f","getTemplates","organizationId","userId","templates","reportTemplate","findMany","where","OR","isPublic","isDefault","orderBy","createdAt","include","user","select","firstName","lastName","_count","reports","createTemplate","data","template","create","log","id","generateReport","startTime","Date","now","report","templateId","type","config","format","status","GENERATING","startedAt","reportData","b","useCache","isAvailable","cacheKey","filters","dateRange","metrics","dimensions","cachedReport","getCachedReport","generateCacheKey","generateReportData","cacheReport","newCacheKey","ttl","getCacheTTL","processingTime","updatedReport","update","COMPLETED","completedAt","error","FAILED","message","CAMPAIGN_PERFORMANCE","generateCampaignPerformanceReport","ROI_ROAS_ANALYSIS","generateROIROASReport","CONVERSION_FUNNEL","generateConversionFunnelReport","PERIOD_COMPARISON","generatePeriodComparisonReport","EXECUTIVE_SUMMARY","generateExecutiveSummaryReport","COHORT_ANALYSIS","generateCohortAnalysisReport","campaigns","campaign","gte","start","lte","end","buildFilters","date","map","campaignMetrics","reduce","acc","metric","impressions","clicks","spend","Number","conversions","revenue","campaignId","campaignName","platform","ctr","cpc","roas","summary","item","totalImpressions","totalClicks","totalSpend","totalConversions","totalRevenue","avgCTR","avgCPC","totalROAS","charts","BAR","title","LINE","metadata","generatedAt","totalRecords","length","funnelStages","funnelStage","order","conversionEvents","timestamp","stage","stageName","stageOrder","events","conversionRate","i","totalStages","totalEvents","sum","overallConversionRate","FUNNEL","value","compareStart","compareEnd","currentPeriodData","previousPeriodData","current","previous","changes","Object","keys","forEach","key","absolute","percentage","campaignData","funnelData","funnelConversionRate","totalFunnelEvents","exportReport","reportId","findUnique","organization","exportRecord","reportExport","fileName","toLowerCase","fileSize","fileUrl","expiresAt","PDF","pdfResult","generateReportPDF","url","size","EXCEL","excelResult","generateExcelReport","CSV","csvResult","generateCSVReport","updatedExport","workbook","Workbook","worksheet","addWorksheet","headers","addRow","row","values","buffer","xlsx","writeBuffer","uploadFile","csv","join","Buffer","from","shareReport","shareToken","generateRandomString","isShared","sharedAt","shareUrl","process","env","FRONTEND_URL","getSharedReport","getReportHistory","dateFrom","dateTo","exports","take","configHash","JSON","stringify","digest","cached","get","parse","warn","setex","reportType","ttlMap","invalidateOrganizationCache","invalidateUserCache","getCacheStats","campaignIds","in","createDefaultTemplates","defaultTemplates","description","__decorate","_a","_b","_c","_d","_e","_f"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\reports.service.ts"],"sourcesContent":["import { Injectable, Logger, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { RedisService } from './redis.service';\nimport { EmailService } from './email.service';\nimport { PDFService } from './pdf.service';\nimport { CryptoService } from './crypto.service';\nimport { CacheService, ReportCacheKey } from '../reports/cache.service';\nimport {\n  ReportType,\n  ReportStatus,\n  ReportFormat,\n  ScheduleFrequency,\n  ChartType,\n  Prisma\n} from '@prisma/client';\nimport { addDays, addWeeks, addMonths, startOfDay, endOfDay, subDays, subMonths } from 'date-fns';\nimport * as ExcelJS from 'exceljs';\nimport { createHash } from 'crypto';\n\ninterface ReportConfig {\n  dateRange: {\n    start: Date;\n    end: Date;\n    compareStart?: Date;\n    compareEnd?: Date;\n  };\n  metrics: string[];\n  dimensions: string[];\n  filters: Record<string, any>;\n  charts: {\n    type: ChartType;\n    title: string;\n    metrics: string[];\n    dimensions?: string[];\n  }[];\n  groupBy?: string;\n  orderBy?: { field: string; direction: 'asc' | 'desc' }[];\n}\n\ninterface ReportData {\n  summary: Record<string, number>;\n  data: Record<string, any>[];\n  charts: {\n    type: ChartType;\n    title: string;\n    data: any[];\n    config?: Record<string, any>;\n  }[];\n  metadata: {\n    generatedAt: Date;\n    dateRange: { start: Date; end: Date };\n    totalRecords: number;\n    processingTime: number;\n  };\n}\n\n@Injectable()\nexport class ReportsService {\n  private readonly logger = new Logger(ReportsService.name);\n  private readonly CACHE_TTL = 3600; // 1 hour\n  private readonly CACHE_PREFIX = 'report:';\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly redis: RedisService,\n    private readonly email: EmailService,\n    private readonly pdf: PDFService,\n    private readonly crypto: CryptoService,\n    private readonly cacheService: CacheService\n  ) {}\n\n  // Template Management\n  async getTemplates(organizationId: string, userId?: string) {\n    const templates = await this.prisma.reportTemplate.findMany({\n      where: {\n        organizationId,\n        OR: [\n          { isPublic: true },\n          { userId },\n          { isDefault: true }\n        ]\n      },\n      orderBy: [\n        { isDefault: 'desc' },\n        { createdAt: 'desc' }\n      ],\n      include: {\n        user: {\n          select: {\n            firstName: true,\n            lastName: true\n          }\n        },\n        _count: {\n          select: {\n            reports: true\n          }\n        }\n      }\n    });\n\n    return templates;\n  }\n\n  async createTemplate(\n    organizationId: string,\n    userId: string,\n    data: {\n      name: string;\n      description?: string;\n      type: ReportType;\n      config: ReportConfig;\n      layout?: any;\n      tags?: string[];\n      category?: string;\n      isPublic?: boolean;\n    }\n  ) {\n    const template = await this.prisma.reportTemplate.create({\n      data: {\n        organizationId,\n        userId,\n        ...data\n      }\n    });\n\n    this.logger.log(`Template created: ${template.id} by user ${userId}`);\n    return template;\n  }\n\n  // Report Generation\n  async generateReport(\n    organizationId: string,\n    userId: string,\n    data: {\n      name: string;\n      type: ReportType;\n      config: ReportConfig;\n      templateId?: string;\n      format?: ReportFormat;\n      useCache?: boolean;\n    }\n  ) {\n    const startTime = Date.now();\n\n    // Create report record\n    const report = await this.prisma.report.create({\n      data: {\n        organizationId,\n        userId,\n        templateId: data.templateId,\n        name: data.name,\n        type: data.type,\n        config: data.config,\n        format: data.format,\n        status: ReportStatus.GENERATING,\n        startedAt: new Date()\n      }\n    });\n\n    try {\n      let reportData;\n      \n      // Check cache first if enabled\n      if (data.useCache !== false && await this.cacheService.isAvailable()) {\n        const cacheKey: ReportCacheKey = {\n          templateId: data.templateId,\n          userId,\n          organizationId,\n          filters: data.config.filters,\n          dateRange: data.config.dateRange,\n          metrics: data.config.metrics,\n          dimensions: data.config.dimensions,\n        };\n        \n        const cachedReport = await this.cacheService.getCachedReport(cacheKey);\n        if (cachedReport) {\n          this.logger.log(`Using cached report for: ${data.name}`);\n          reportData = cachedReport;\n        }\n      }\n      \n      // Generate report data if not cached\n      if (!reportData) {\n        // Check legacy cache first\n        const cacheKey = this.generateCacheKey(organizationId, data.type, data.config);\n        reportData = await this.getCachedReport(cacheKey);\n\n        if (!reportData) {\n          // Generate report data\n          reportData = await this.generateReportData(organizationId, data.type, data.config);\n          \n          // Cache the result in both systems\n          await this.cacheReport(cacheKey, reportData);\n          \n          if (data.useCache !== false && await this.cacheService.isAvailable()) {\n            const newCacheKey: ReportCacheKey = {\n              templateId: data.templateId,\n              userId,\n              organizationId,\n              filters: data.config.filters,\n              dateRange: data.config.dateRange,\n              metrics: data.config.metrics,\n              dimensions: data.config.dimensions,\n            };\n            \n            await this.cacheService.cacheReport(newCacheKey, reportData, {\n              ttl: this.getCacheTTL(data.type),\n            });\n          }\n        }\n      }\n\n      const processingTime = Date.now() - startTime;\n\n      // Update report with data\n      const updatedReport = await this.prisma.report.update({\n        where: { id: report.id },\n        data: {\n          status: ReportStatus.COMPLETED,\n          data: reportData,\n          completedAt: new Date(),\n          processingTime\n        }\n      });\n\n      this.logger.log(`Report generated: ${report.id} in ${processingTime}ms`);\n      return updatedReport;\n\n    } catch (error) {\n      // Update report with error\n      await this.prisma.report.update({\n        where: { id: report.id },\n        data: {\n          status: ReportStatus.FAILED,\n          error: error.message,\n          completedAt: new Date()\n        }\n      });\n\n      this.logger.error(`Report generation failed: ${report.id}`, error);\n      throw error;\n    }\n  }\n\n  private async generateReportData(\n    organizationId: string,\n    type: ReportType,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    const startTime = Date.now();\n\n    switch (type) {\n      case ReportType.CAMPAIGN_PERFORMANCE:\n        return this.generateCampaignPerformanceReport(organizationId, config);\n      case ReportType.ROI_ROAS_ANALYSIS:\n        return this.generateROIROASReport(organizationId, config);\n      case ReportType.CONVERSION_FUNNEL:\n        return this.generateConversionFunnelReport(organizationId, config);\n      case ReportType.PERIOD_COMPARISON:\n        return this.generatePeriodComparisonReport(organizationId, config);\n      case ReportType.EXECUTIVE_SUMMARY:\n        return this.generateExecutiveSummaryReport(organizationId, config);\n      case ReportType.COHORT_ANALYSIS:\n        return this.generateCohortAnalysisReport(organizationId, config);\n      default:\n        throw new BadRequestException(`Unsupported report type: ${type}`);\n    }\n  }\n\n  private async generateCampaignPerformanceReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    const { dateRange, metrics, filters } = config;\n\n    // Get campaign metrics\n    const campaigns = await this.prisma.campaign.findMany({\n      where: {\n        organizationId,\n        createdAt: {\n          gte: dateRange.start,\n          lte: dateRange.end\n        },\n        ...this.buildFilters(filters)\n      },\n      include: {\n        metrics: {\n          where: {\n            date: {\n              gte: dateRange.start,\n              lte: dateRange.end\n            }\n          }\n        }\n      }\n    });\n\n    // Process data\n    const data = campaigns.map(campaign => {\n      const campaignMetrics = campaign.metrics.reduce((acc, metric) => {\n        acc.impressions = (acc.impressions || 0) + (metric.impressions || 0);\n        acc.clicks = (acc.clicks || 0) + (metric.clicks || 0);\n        acc.spend = (acc.spend || 0) + Number(metric.spend || 0);\n        acc.conversions = (acc.conversions || 0) + (metric.conversions || 0);\n        acc.revenue = (acc.revenue || 0) + Number(metric.revenue || 0);\n        return acc;\n      }, {} as any);\n\n      return {\n        campaignId: campaign.id,\n        campaignName: campaign.name,\n        platform: campaign.platform,\n        status: campaign.status,\n        ...campaignMetrics,\n        ctr: campaignMetrics.clicks / campaignMetrics.impressions * 100 || 0,\n        cpc: campaignMetrics.spend / campaignMetrics.clicks || 0,\n        roas: campaignMetrics.revenue / campaignMetrics.spend || 0\n      };\n    });\n\n    // Calculate summary\n    const summary = data.reduce((acc, item) => {\n      acc.totalImpressions = (acc.totalImpressions || 0) + item.impressions;\n      acc.totalClicks = (acc.totalClicks || 0) + item.clicks;\n      acc.totalSpend = (acc.totalSpend || 0) + item.spend;\n      acc.totalConversions = (acc.totalConversions || 0) + item.conversions;\n      acc.totalRevenue = (acc.totalRevenue || 0) + item.revenue;\n      return acc;\n    }, {} as any);\n\n    summary.avgCTR = summary.totalClicks / summary.totalImpressions * 100 || 0;\n    summary.avgCPC = summary.totalSpend / summary.totalClicks || 0;\n    summary.totalROAS = summary.totalRevenue / summary.totalSpend || 0;\n\n    // Generate charts\n    const charts = [\n      {\n        type: ChartType.BAR,\n        title: 'Campaign Performance',\n        data: data.map(item => ({\n          name: item.campaignName,\n          impressions: item.impressions,\n          clicks: item.clicks,\n          spend: item.spend\n        }))\n      },\n      {\n        type: ChartType.LINE,\n        title: 'ROAS by Campaign',\n        data: data.map(item => ({\n          name: item.campaignName,\n          roas: item.roas\n        }))\n      }\n    ];\n\n    return {\n      summary,\n      data,\n      charts,\n      metadata: {\n        generatedAt: new Date(),\n        dateRange,\n        totalRecords: data.length,\n        processingTime: Date.now() - Date.now()\n      }\n    };\n  }\n\n  private async generateROIROASReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    // Implementation for ROI/ROAS analysis\n    // Similar structure to campaign performance but focused on ROI metrics\n    return this.generateCampaignPerformanceReport(organizationId, config);\n  }\n\n  private async generateConversionFunnelReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    const { dateRange } = config;\n\n    // Get funnel stages\n    const funnelStages = await this.prisma.funnelStage.findMany({\n      where: {\n        organizationId\n      },\n      orderBy: { order: 'asc' },\n      include: {\n        conversionEvents: {\n          where: {\n            timestamp: {\n              gte: dateRange.start,\n              lte: dateRange.end\n            }\n          }\n        }\n      }\n    });\n\n    const data = funnelStages.map(stage => ({\n      stageName: stage.name,\n      stageOrder: stage.order,\n      events: stage.conversionEvents.length,\n      conversionRate: 0 // Calculate based on previous stage\n    }));\n\n    // Calculate conversion rates\n    for (let i = 1; i < data.length; i++) {\n      data[i].conversionRate = data[i-1].events > 0 \n        ? (data[i].events / data[i-1].events) * 100 \n        : 0;\n    }\n\n    const summary = {\n      totalStages: data.length,\n      totalEvents: data.reduce((sum, stage) => sum + stage.events, 0),\n      overallConversionRate: data.length > 0 \n        ? (data[data.length - 1].events / data[0].events) * 100 \n        : 0\n    };\n\n    const charts = [\n      {\n        type: ChartType.FUNNEL,\n        title: 'Conversion Funnel',\n        data: data.map(stage => ({\n          name: stage.stageName,\n          value: stage.events\n        }))\n      }\n    ];\n\n    return {\n      summary,\n      data,\n      charts,\n      metadata: {\n        generatedAt: new Date(),\n        dateRange,\n        totalRecords: data.length,\n        processingTime: 0\n      }\n    };\n  }\n\n  private async generatePeriodComparisonReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    const { dateRange } = config;\n    \n    if (!dateRange.compareStart || !dateRange.compareEnd) {\n      throw new BadRequestException('Comparison period is required for period comparison report');\n    }\n\n    // Get data for both periods\n    const currentPeriodData = await this.generateCampaignPerformanceReport(\n      organizationId,\n      { ...config, dateRange: { start: dateRange.start, end: dateRange.end } }\n    );\n\n    const previousPeriodData = await this.generateCampaignPerformanceReport(\n      organizationId,\n      { ...config, dateRange: { start: dateRange.compareStart, end: dateRange.compareEnd } }\n    );\n\n    // Calculate changes\n    const summary = {\n      current: currentPeriodData.summary,\n      previous: previousPeriodData.summary,\n      changes: {} as any\n    };\n\n    Object.keys(currentPeriodData.summary).forEach(key => {\n      const current = currentPeriodData.summary[key] || 0;\n      const previous = previousPeriodData.summary[key] || 0;\n      summary.changes[key] = {\n        absolute: current - previous,\n        percentage: previous > 0 ? ((current - previous) / previous) * 100 : 0\n      };\n    });\n\n    return {\n      summary,\n      data: currentPeriodData.data,\n      charts: currentPeriodData.charts,\n      metadata: {\n        generatedAt: new Date(),\n        dateRange,\n        totalRecords: currentPeriodData.data.length,\n        processingTime: 0\n      }\n    };\n  }\n\n  private async generateExecutiveSummaryReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    // High-level summary combining multiple report types\n    const campaignData = await this.generateCampaignPerformanceReport(organizationId, config);\n    const funnelData = await this.generateConversionFunnelReport(organizationId, config);\n\n    const summary = {\n      ...campaignData.summary,\n      funnelConversionRate: funnelData.summary.overallConversionRate,\n      totalFunnelEvents: funnelData.summary.totalEvents\n    };\n\n    return {\n      summary,\n      data: campaignData.data,\n      charts: [...campaignData.charts, ...funnelData.charts],\n      metadata: {\n        generatedAt: new Date(),\n        dateRange: config.dateRange,\n        totalRecords: campaignData.data.length,\n        processingTime: 0\n      }\n    };\n  }\n\n  private async generateCohortAnalysisReport(\n    organizationId: string,\n    config: ReportConfig\n  ): Promise<ReportData> {\n    // Cohort analysis implementation\n    // This would analyze user behavior over time periods\n    return this.generateCampaignPerformanceReport(organizationId, config);\n  }\n\n  // Export Functions\n  async exportReport(\n    reportId: string,\n    userId: string,\n    format: ReportFormat\n  ) {\n    const report = await this.prisma.report.findUnique({\n      where: { id: reportId },\n      include: {\n        user: true,\n        organization: true\n      }\n    });\n\n    if (!report) {\n      throw new NotFoundException('Report not found');\n    }\n\n    if (report.userId !== userId) {\n      throw new BadRequestException('Unauthorized access to report');\n    }\n\n    // Create export record\n    const exportRecord = await this.prisma.reportExport.create({\n      data: {\n        reportId,\n        userId,\n        format,\n        fileName: `${report.name}_${format.toLowerCase()}_${Date.now()}`,\n        fileSize: 0,\n        fileUrl: '',\n        status: ReportStatus.GENERATING,\n        startedAt: new Date(),\n        expiresAt: addDays(new Date(), 7) // Expire in 7 days\n      }\n    });\n\n    try {\n      let fileUrl: string;\n      let fileSize: number;\n\n      switch (format) {\n        case ReportFormat.PDF:\n          const pdfResult = await this.pdf.generateReportPDF(report);\n          fileUrl = pdfResult.url;\n          fileSize = pdfResult.size;\n          break;\n        case ReportFormat.EXCEL:\n          const excelResult = await this.generateExcelReport(report);\n          fileUrl = excelResult.url;\n          fileSize = excelResult.size;\n          break;\n        case ReportFormat.CSV:\n          const csvResult = await this.generateCSVReport(report);\n          fileUrl = csvResult.url;\n          fileSize = csvResult.size;\n          break;\n        default:\n          throw new BadRequestException(`Unsupported export format: ${format}`);\n      }\n\n      // Update export record\n      const updatedExport = await this.prisma.reportExport.update({\n        where: { id: exportRecord.id },\n        data: {\n          status: ReportStatus.COMPLETED,\n          fileUrl,\n          fileSize,\n          completedAt: new Date()\n        }\n      });\n\n      return updatedExport;\n\n    } catch (error) {\n      await this.prisma.reportExport.update({\n        where: { id: exportRecord.id },\n        data: {\n          status: ReportStatus.FAILED,\n          error: error.message\n        }\n      });\n      throw error;\n    }\n  }\n\n  private async generateExcelReport(report: any) {\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(report.name);\n\n    // Add headers\n    const data = report.data.data || [];\n    if (data.length > 0) {\n      const headers = Object.keys(data[0]);\n      worksheet.addRow(headers);\n\n      // Add data rows\n      data.forEach(row => {\n        worksheet.addRow(Object.values(row));\n      });\n    }\n\n    // Save to buffer\n    const buffer = await workbook.xlsx.writeBuffer();\n    \n    // Upload to storage (implement your storage logic)\n    const fileName = `${report.id}_${Date.now()}.xlsx`;\n    const fileUrl = await this.uploadFile(fileName, buffer);\n\n    return {\n      url: fileUrl,\n      size: buffer.length\n    };\n  }\n\n  private async generateCSVReport(report: any) {\n    const data = report.data.data || [];\n    if (data.length === 0) {\n      throw new BadRequestException('No data to export');\n    }\n\n    const headers = Object.keys(data[0]);\n    let csv = headers.join(',') + '\\n';\n\n    data.forEach(row => {\n      const values = Object.values(row).map(value => \n        typeof value === 'string' ? `\"${value}\"` : value\n      );\n      csv += values.join(',') + '\\n';\n    });\n\n    const buffer = Buffer.from(csv, 'utf8');\n    const fileName = `${report.id}_${Date.now()}.csv`;\n    const fileUrl = await this.uploadFile(fileName, buffer);\n\n    return {\n      url: fileUrl,\n      size: buffer.length\n    };\n  }\n\n  private async uploadFile(fileName: string, buffer: Buffer): Promise<string> {\n    // Implement your file upload logic (AWS S3, Google Cloud Storage, etc.)\n    // For now, return a placeholder URL\n    return `https://storage.example.com/reports/${fileName}`;\n  }\n\n  // Sharing\n  async shareReport(reportId: string, userId: string) {\n    const report = await this.prisma.report.findUnique({\n      where: { id: reportId }\n    });\n\n    if (!report || report.userId !== userId) {\n      throw new NotFoundException('Report not found');\n    }\n\n    const shareToken = this.crypto.generateRandomString(32);\n    \n    const updatedReport = await this.prisma.report.update({\n      where: { id: reportId },\n      data: {\n        shareToken,\n        isShared: true,\n        sharedAt: new Date(),\n        expiresAt: addDays(new Date(), 30) // Expire in 30 days\n      }\n    });\n\n    return {\n      shareUrl: `${process.env.FRONTEND_URL}/reports/shared/${shareToken}`,\n      expiresAt: updatedReport.expiresAt\n    };\n  }\n\n  async getSharedReport(shareToken: string) {\n    const report = await this.prisma.report.findUnique({\n      where: { shareToken },\n      include: {\n        user: {\n          select: {\n            firstName: true,\n            lastName: true\n          }\n        },\n        organization: {\n          select: {\n            name: true\n          }\n        }\n      }\n    });\n\n    if (!report || !report.isShared || (report.expiresAt && report.expiresAt < new Date())) {\n      throw new NotFoundException('Shared report not found or expired');\n    }\n\n    return report;\n  }\n\n  // History\n  async getReportHistory(\n    organizationId: string,\n    userId?: string,\n    filters?: {\n      type?: ReportType;\n      status?: ReportStatus;\n      dateFrom?: Date;\n      dateTo?: Date;\n    }\n  ) {\n    const where: Prisma.ReportWhereInput = {\n      organizationId,\n      ...(userId && { userId }),\n      ...(filters?.type && { type: filters.type }),\n      ...(filters?.status && { status: filters.status }),\n      ...(filters?.dateFrom && filters?.dateTo && {\n        createdAt: {\n          gte: filters.dateFrom,\n          lte: filters.dateTo\n        }\n      })\n    };\n\n    const reports = await this.prisma.report.findMany({\n      where,\n      orderBy: { createdAt: 'desc' },\n      include: {\n        user: {\n          select: {\n            firstName: true,\n            lastName: true\n          }\n        },\n        template: {\n          select: {\n            name: true\n          }\n        },\n        _count: {\n          select: {\n            exports: true\n          }\n        }\n      },\n      take: 100\n    });\n\n    return reports;\n  }\n\n  // Cache Management\n  private generateCacheKey(organizationId: string, type: ReportType, config: ReportConfig): string {\n    const configHash = createHash('md5')\n      .update(JSON.stringify(config))\n      .digest('hex');\n    return `${this.CACHE_PREFIX}${organizationId}:${type}:${configHash}`;\n  }\n\n  private async getCachedReport(cacheKey: string): Promise<ReportData | null> {\n    try {\n      const cached = await this.redis.get(cacheKey);\n      return cached ? JSON.parse(cached) : null;\n    } catch (error) {\n      this.logger.warn(`Cache read error for key ${cacheKey}:`, error);\n      return null;\n    }\n  }\n\n  private async cacheReport(cacheKey: string, data: ReportData): Promise<void> {\n    try {\n      await this.redis.setex(cacheKey, this.CACHE_TTL, JSON.stringify(data));\n    } catch (error) {\n      this.logger.warn(`Cache write error for key ${cacheKey}:`, error);\n    }\n  }\n\n  /**\n   * Get cache TTL based on report type\n   */\n  private getCacheTTL(reportType: ReportType): number {\n    const ttlMap: Record<string, number> = {\n      [ReportType.CAMPAIGN_PERFORMANCE]: 1800, // 30 minutes\n      [ReportType.CONVERSION_FUNNEL]: 3600, // 1 hour\n      [ReportType.PERIOD_COMPARISON]: 7200, // 2 hours\n      [ReportType.ROI_ROAS_ANALYSIS]: 1800, // 30 minutes\n      [ReportType.EXECUTIVE_SUMMARY]: 3600, // 1 hour\n      [ReportType.COHORT_ANALYSIS]: 14400, // 4 hours\n    };\n    \n    return ttlMap[reportType] || 3600; // Default 1 hour\n  }\n\n  /**\n   * Invalidate cache for organization\n   */\n  async invalidateOrganizationCache(organizationId: string): Promise<void> {\n    if (await this.cacheService.isAvailable()) {\n      await this.cacheService.invalidateOrganizationCache(organizationId);\n    }\n  }\n\n  /**\n   * Invalidate cache for user\n   */\n  async invalidateUserCache(userId: string): Promise<void> {\n    if (await this.cacheService.isAvailable()) {\n      await this.cacheService.invalidateUserCache(userId);\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  async getCacheStats() {\n    if (await this.cacheService.isAvailable()) {\n      return await this.cacheService.getCacheStats();\n    }\n    return null;\n  }\n\n  // Utility Functions\n  private buildFilters(filters: Record<string, any>): Prisma.CampaignWhereInput {\n    const where: Prisma.CampaignWhereInput = {};\n\n    if (filters.platform) {\n      where.platform = filters.platform;\n    }\n\n    if (filters.status) {\n      where.status = filters.status;\n    }\n\n    if (filters.campaignIds && filters.campaignIds.length > 0) {\n      where.id = { in: filters.campaignIds };\n    }\n\n    return where;\n  }\n\n  // Default Templates\n  async createDefaultTemplates(organizationId: string) {\n    const defaultTemplates = [\n      {\n        name: 'Campaign Performance Overview',\n        description: 'Comprehensive overview of all campaign performance metrics',\n        type: ReportType.CAMPAIGN_PERFORMANCE,\n        config: {\n          dateRange: { start: subDays(new Date(), 30), end: new Date() },\n          metrics: ['impressions', 'clicks', 'spend', 'conversions', 'revenue'],\n          dimensions: ['campaignName', 'platform'],\n          filters: {},\n          charts: [\n            { type: ChartType.BAR, title: 'Campaign Performance', metrics: ['impressions', 'clicks'] },\n            { type: ChartType.LINE, title: 'Spend Trend', metrics: ['spend'] }\n          ]\n        },\n        isDefault: true,\n        isPublic: true\n      },\n      {\n        name: 'ROI Analysis',\n        description: 'Return on investment analysis for all campaigns',\n        type: ReportType.ROI_ROAS_ANALYSIS,\n        config: {\n          dateRange: { start: subDays(new Date(), 30), end: new Date() },\n          metrics: ['spend', 'revenue', 'roas', 'roi'],\n          dimensions: ['campaignName'],\n          filters: {},\n          charts: [\n            { type: ChartType.BAR, title: 'ROAS by Campaign', metrics: ['roas'] }\n          ]\n        },\n        isDefault: true,\n        isPublic: true\n      }\n    ];\n\n    for (const template of defaultTemplates) {\n      await this.prisma.reportTemplate.create({\n        data: {\n          organizationId,\n          ...template\n        }\n      });\n    }\n\n    this.logger.log(`Created ${defaultTemplates.length} default templates for organization ${organizationId}`);\n  }\n}"],"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","ignoreList":[]}