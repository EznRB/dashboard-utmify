712144e021db3888ef7fa02f9721eaa0
/* istanbul ignore next */
function cov_7wtsxckwr() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\middleware\\rateLimiting.ts";
  var hash = "d2c58e1387bcd431d2ac7c2dba2b5021a3a19d69";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\middleware\\rateLimiting.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 20
        },
        end: {
          line: 39,
          column: 1
        }
      },
      "1": {
        start: {
          line: 41,
          column: 28
        },
        end: {
          line: 57,
          column: 1
        }
      },
      "2": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 27
        }
      },
      "3": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 29
        }
      },
      "4": {
        start: {
          line: 67,
          column: 19
        },
        end: {
          line: 67,
          column: 44
        }
      },
      "5": {
        start: {
          line: 68,
          column: 26
        },
        end: {
          line: 68,
          column: 68
        }
      },
      "6": {
        start: {
          line: 69,
          column: 22
        },
        end: {
          line: 69,
          column: 55
        }
      },
      "7": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "8": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 78
        }
      },
      "9": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 52
        }
      },
      "10": {
        start: {
          line: 78,
          column: 26
        },
        end: {
          line: 78,
          column: 60
        }
      },
      "11": {
        start: {
          line: 79,
          column: 23
        },
        end: {
          line: 79,
          column: 51
        }
      },
      "12": {
        start: {
          line: 80,
          column: 31
        },
        end: {
          line: 80,
          column: 66
        }
      },
      "13": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 96
        }
      },
      "14": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 45
        }
      },
      "15": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 30
        }
      },
      "16": {
        start: {
          line: 87,
          column: 28
        },
        end: {
          line: 87,
          column: 54
        }
      },
      "17": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "18": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 50
        }
      },
      "19": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 59
        }
      },
      "20": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 63
        }
      },
      "21": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 32
        }
      },
      "22": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 73
        }
      },
      "23": {
        start: {
          line: 99,
          column: 28
        },
        end: {
          line: 99,
          column: 49
        }
      },
      "24": {
        start: {
          line: 100,
          column: 30
        },
        end: {
          line: 100,
          column: 52
        }
      },
      "25": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 101,
          column: 64
        }
      },
      "26": {
        start: {
          line: 102,
          column: 30
        },
        end: {
          line: 102,
          column: 78
        }
      },
      "27": {
        start: {
          line: 103,
          column: 30
        },
        end: {
          line: 103,
          column: 56
        }
      },
      "28": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      },
      "29": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 64
        }
      },
      "30": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 36
        }
      },
      "31": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 125,
          column: 14
        }
      },
      "32": {
        start: {
          line: 130,
          column: 19
        },
        end: {
          line: 130,
          column: 44
        }
      },
      "33": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 30
        }
      },
      "34": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "35": {
        start: {
          line: 134,
          column: 27
        },
        end: {
          line: 134,
          column: 38
        }
      },
      "36": {
        start: {
          line: 135,
          column: 29
        },
        end: {
          line: 135,
          column: 57
        }
      },
      "37": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "38": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 141,
          column: 18
        }
      },
      "39": {
        start: {
          line: 144,
          column: 29
        },
        end: {
          line: 144,
          column: 64
        }
      },
      "40": {
        start: {
          line: 145,
          column: 31
        },
        end: {
          line: 145,
          column: 63
        }
      },
      "41": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "42": {
        start: {
          line: 147,
          column: 33
        },
        end: {
          line: 147,
          column: 85
        }
      },
      "43": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 134
        }
      },
      "44": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 153,
          column: 18
        }
      },
      "45": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 168,
          column: 13
        }
      },
      "46": {
        start: {
          line: 157,
          column: 36
        },
        end: {
          line: 157,
          column: 53
        }
      },
      "47": {
        start: {
          line: 158,
          column: 38
        },
        end: {
          line: 158,
          column: 73
        }
      },
      "48": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "49": {
        start: {
          line: 160,
          column: 37
        },
        end: {
          line: 160,
          column: 92
        }
      },
      "50": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 161,
          column: 141
        }
      },
      "51": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 166,
          column: 22
        }
      },
      "52": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 43
        }
      },
      "53": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 36
        }
      },
      "54": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 43
        }
      },
      "55": {
        start: {
          line: 178,
          column: 19
        },
        end: {
          line: 178,
          column: 44
        }
      },
      "56": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 37
        }
      },
      "57": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 30
        }
      },
      "58": {
        start: {
          line: 181,
          column: 28
        },
        end: {
          line: 181,
          column: 80
        }
      },
      "59": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "60": {
        start: {
          line: 183,
          column: 29
        },
        end: {
          line: 183,
          column: 50
        }
      },
      "61": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 59
        }
      },
      "62": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 63
        }
      },
      "63": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 99
        }
      },
      "64": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 34
        }
      },
      "65": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 36
        }
      },
      "66": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 253,
          column: 10
        }
      },
      "67": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "68": {
        start: {
          line: 198,
          column: 40
        },
        end: {
          line: 198,
          column: 83
        }
      },
      "69": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 227,
          column: 17
        }
      },
      "70": {
        start: {
          line: 200,
          column: 37
        },
        end: {
          line: 200,
          column: 83
        }
      },
      "71": {
        start: {
          line: 201,
          column: 40
        },
        end: {
          line: 201,
          column: 81
        }
      },
      "72": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 207,
          column: 23
        }
      },
      "73": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 218,
          column: 23
        }
      },
      "74": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 221,
          column: 21
        }
      },
      "75": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 220,
          column: 67
        }
      },
      "76": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 226,
          column: 23
        }
      },
      "77": {
        start: {
          line: 229,
          column: 39
        },
        end: {
          line: 229,
          column: 73
        }
      },
      "78": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 235,
          column: 19
        }
      },
      "79": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 247,
          column: 17
        }
      },
      "80": {
        start: {
          line: 237,
          column: 39
        },
        end: {
          line: 237,
          column: 96
        }
      },
      "81": {
        start: {
          line: 238,
          column: 20
        },
        end: {
          line: 238,
          column: 81
        }
      },
      "82": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 241,
          column: 21
        }
      },
      "83": {
        start: {
          line: 240,
          column: 24
        },
        end: {
          line: 240,
          column: 67
        }
      },
      "84": {
        start: {
          line: 242,
          column: 20
        },
        end: {
          line: 246,
          column: 23
        }
      },
      "85": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 40
        }
      },
      "86": {
        start: {
          line: 258,
          column: 23
        },
        end: {
          line: 258,
          column: 40
        }
      },
      "87": {
        start: {
          line: 259,
          column: 19
        },
        end: {
          line: 259,
          column: 53
        }
      },
      "88": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 260,
          column: 42
        }
      },
      "89": {
        start: {
          line: 265,
          column: 18
        },
        end: {
          line: 265,
          column: 31
        }
      },
      "90": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 268,
          column: 5
        }
      },
      "91": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "92": {
        start: {
          line: 270,
          column: 24
        },
        end: {
          line: 270,
          column: 56
        }
      },
      "93": {
        start: {
          line: 271,
          column: 23
        },
        end: {
          line: 271,
          column: 54
        }
      },
      "94": {
        start: {
          line: 272,
          column: 26
        },
        end: {
          line: 272,
          column: 60
        }
      },
      "95": {
        start: {
          line: 273,
          column: 23
        },
        end: {
          line: 273,
          column: 63
        }
      },
      "96": {
        start: {
          line: 274,
          column: 29
        },
        end: {
          line: 274,
          column: 66
        }
      },
      "97": {
        start: {
          line: 275,
          column: 33
        },
        end: {
          line: 275,
          column: 75
        }
      },
      "98": {
        start: {
          line: 276,
          column: 37
        },
        end: {
          line: 276,
          column: 83
        }
      },
      "99": {
        start: {
          line: 279,
          column: 4
        },
        end: {
          line: 283,
          column: 7
        }
      },
      "100": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "101": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 65
        }
      },
      "102": {
        start: {
          line: 285,
          column: 4
        },
        end: {
          line: 289,
          column: 7
        }
      },
      "103": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "104": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 74
        }
      },
      "105": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 295,
          column: 7
        }
      },
      "106": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "107": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 78
        }
      },
      "108": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 301,
          column: 7
        }
      },
      "109": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "110": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 64
        }
      },
      "111": {
        start: {
          line: 303,
          column: 4
        },
        end: {
          line: 307,
          column: 7
        }
      },
      "112": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "113": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 70
        }
      },
      "114": {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 313,
          column: 7
        }
      },
      "115": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "116": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 64
        }
      },
      "117": {
        start: {
          line: 315,
          column: 4
        },
        end: {
          line: 319,
          column: 7
        }
      },
      "118": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "119": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 67
        }
      },
      "120": {
        start: {
          line: 321,
          column: 4
        },
        end: {
          line: 323,
          column: 7
        }
      },
      "121": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 52
        }
      },
      "122": {
        start: {
          line: 324,
          column: 4
        },
        end: {
          line: 326,
          column: 7
        }
      },
      "123": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 31
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 61
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 38
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 66
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 25
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 77
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 34
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 84
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 43
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 129
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 36
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 177
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 23
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 194
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 195,
            column: 15
          },
          end: {
            line: 195,
            column: 16
          }
        },
        loc: {
          start: {
            line: 195,
            column: 41
          },
          end: {
            line: 253,
            column: 9
          }
        },
        line: 195
      },
      "8": {
        name: "createRateLimiter",
        decl: {
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 257,
            column: 33
          }
        },
        loc: {
          start: {
            line: 257,
            column: 61
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 257
      },
      "9": {
        name: "rateLimitingPlugin",
        decl: {
          start: {
            line: 263,
            column: 22
          },
          end: {
            line: 263,
            column: 40
          }
        },
        loc: {
          start: {
            line: 263,
            column: 50
          },
          end: {
            line: 327,
            column: 1
          }
        },
        line: 263
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 279,
            column: 34
          },
          end: {
            line: 279,
            column: 35
          }
        },
        loc: {
          start: {
            line: 279,
            column: 60
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 279
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 285,
            column: 34
          },
          end: {
            line: 285,
            column: 35
          }
        },
        loc: {
          start: {
            line: 285,
            column: 60
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 285
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 291,
            column: 34
          },
          end: {
            line: 291,
            column: 35
          }
        },
        loc: {
          start: {
            line: 291,
            column: 60
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 291
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 297,
            column: 34
          },
          end: {
            line: 297,
            column: 35
          }
        },
        loc: {
          start: {
            line: 297,
            column: 60
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 297
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 303,
            column: 34
          },
          end: {
            line: 303,
            column: 35
          }
        },
        loc: {
          start: {
            line: 303,
            column: 60
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 303
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 309,
            column: 34
          },
          end: {
            line: 309,
            column: 35
          }
        },
        loc: {
          start: {
            line: 309,
            column: 60
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 309
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 315,
            column: 34
          },
          end: {
            line: 315,
            column: 35
          }
        },
        loc: {
          start: {
            line: 315,
            column: 60
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 315
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 321,
            column: 41
          },
          end: {
            line: 321,
            column: 42
          }
        },
        loc: {
          start: {
            line: 321,
            column: 60
          },
          end: {
            line: 323,
            column: 5
          }
        },
        line: 321
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 324,
            column: 48
          },
          end: {
            line: 324,
            column: 49
          }
        },
        loc: {
          start: {
            line: 324,
            column: 67
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 324
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 66,
            column: 25
          },
          end: {
            line: 66,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 66,
            column: 34
          },
          end: {
            line: 66,
            column: 36
          }
        }],
        line: 66
      },
      "1": {
        loc: {
          start: {
            line: 68,
            column: 26
          },
          end: {
            line: 68,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 26
          },
          end: {
            line: 68,
            column: 55
          }
        }, {
          start: {
            line: 68,
            column: 59
          },
          end: {
            line: 68,
            column: 68
          }
        }],
        line: 68
      },
      "2": {
        loc: {
          start: {
            line: 69,
            column: 22
          },
          end: {
            line: 69,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 22
          },
          end: {
            line: 69,
            column: 40
          }
        }, {
          start: {
            line: 69,
            column: 44
          },
          end: {
            line: 69,
            column: 55
          }
        }],
        line: 69
      },
      "3": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 15
          },
          end: {
            line: 81,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 15
          },
          end: {
            line: 81,
            column: 29
          }
        }, {
          start: {
            line: 81,
            column: 33
          },
          end: {
            line: 81,
            column: 39
          }
        }, {
          start: {
            line: 81,
            column: 44
          },
          end: {
            line: 81,
            column: 53
          }
        }, {
          start: {
            line: 81,
            column: 57
          },
          end: {
            line: 81,
            column: 80
          }
        }, {
          start: {
            line: 81,
            column: 85
          },
          end: {
            line: 81,
            column: 95
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 100,
            column: 30
          },
          end: {
            line: 100,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 30
          },
          end: {
            line: 100,
            column: 47
          }
        }, {
          start: {
            line: 100,
            column: 51
          },
          end: {
            line: 100,
            column: 52
          }
        }],
        line: 100
      },
      "6": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "7": {
        loc: {
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 136,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 136,
            column: 24
          }
        }, {
          start: {
            line: 136,
            column: 28
          },
          end: {
            line: 136,
            column: 52
          }
        }],
        line: 136
      },
      "8": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "9": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "10": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 156,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 156,
            column: 46
          }
        }, {
          start: {
            line: 156,
            column: 50
          },
          end: {
            line: 156,
            column: 80
          }
        }],
        line: 156
      },
      "11": {
        loc: {
          start: {
            line: 159,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "12": {
        loc: {
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 227,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 227,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "13": {
        loc: {
          start: {
            line: 200,
            column: 37
          },
          end: {
            line: 200,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 37
          },
          end: {
            line: 200,
            column: 61
          }
        }, {
          start: {
            line: 200,
            column: 65
          },
          end: {
            line: 200,
            column: 83
          }
        }],
        line: 200
      },
      "14": {
        loc: {
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "15": {
        loc: {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 247,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 247,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "16": {
        loc: {
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 241,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 241,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "17": {
        loc: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "18": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "19": {
        loc: {
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "20": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 51
          }
        }, {
          start: {
            line: 286,
            column: 55
          },
          end: {
            line: 286,
            column: 95
          }
        }],
        line: 286
      },
      "21": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "22": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 292,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 292,
            column: 49
          }
        }, {
          start: {
            line: 292,
            column: 53
          },
          end: {
            line: 292,
            column: 97
          }
        }],
        line: 292
      },
      "23": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "24": {
        loc: {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 298,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 298,
            column: 37
          }
        }, {
          start: {
            line: 298,
            column: 41
          },
          end: {
            line: 298,
            column: 69
          }
        }],
        line: 298
      },
      "25": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "26": {
        loc: {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 304,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 304,
            column: 46
          }
        }, {
          start: {
            line: 304,
            column: 50
          },
          end: {
            line: 304,
            column: 80
          }
        }],
        line: 304
      },
      "27": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "28": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 310,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 310,
            column: 43
          }
        }, {
          start: {
            line: 310,
            column: 47
          },
          end: {
            line: 310,
            column: 80
          }
        }],
        line: 310
      },
      "29": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "30": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 316,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 316,
            column: 44
          }
        }, {
          start: {
            line: 316,
            column: 48
          },
          end: {
            line: 316,
            column: 73
          }
        }, {
          start: {
            line: 316,
            column: 77
          },
          end: {
            line: 316,
            column: 96
          }
        }],
        line: 316
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\middleware\\rateLimiting.ts",
      mappings: "AAEA,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAY/D,6BAA6B;AAC7B,MAAM,WAAW,GAAG;IAClB,6CAA6C;IAC7C,IAAI,EAAE;QACJ,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;QACvC,WAAW,EAAE,CAAC,EAAE,4BAA4B;KAC7C;IAED,kCAAkC;IAClC,GAAG,EAAE;QACH,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,WAAW,EAAE,GAAG,EAAE,0BAA0B;KAC7C;IAED,kCAAkC;IAClC,MAAM,EAAE;QACN,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,WAAW,EAAE,GAAG,EAAE,0BAA0B;KAC7C;IAED,uCAAuC;IACvC,YAAY,EAAE;QACZ,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,WAAW,EAAE,EAAE,EAAE,0BAA0B;KAC5C;IAED,mCAAmC;IACnC,SAAS,EAAE;QACT,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,WAAW,EAAE,IAAI,EAAE,yBAAyB;KAC7C;IAED,+BAA+B;IAC/B,cAAc,EAAE;QACd,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,SAAS;QACnC,WAAW,EAAE,CAAC,EAAE,sBAAsB;KACvC;IAED,8BAA8B;IAC9B,kBAAkB,EAAE;QAClB,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,SAAS;QACnC,WAAW,EAAE,CAAC,EAAE,sBAAsB;KACvC;CACF,CAAC;AAEF,+BAA+B;AAC/B,MAAM,mBAAmB,GAAG;IAC1B,cAAc,EAAE;QACd,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,aAAa;QAClC,WAAW,EAAE,EAAE,EAAE,4BAA4B;QAC7C,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;KAC3C;IAED,iBAAiB,EAAE;QACjB,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,YAAY;QACrC,WAAW,EAAE,EAAE,EAAE,0BAA0B;QAC3C,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,iBAAiB;KAC/C;IAED,kBAAkB,EAAE;QAClB,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,WAAW,EAAE,EAAE,EAAE,kDAAkD;QACnE,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,eAAe;KAClD;CACF,CAAC;AAEF,MAAM,WAAW;IACP,KAAK,CAAQ;IACb,MAAM,CAAkB;IAEhC,YAAY,KAAY,EAAE,MAAuB;QAC/C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,uCAAuC;IAC/B,WAAW,CAAC,OAAuB,EAAE,SAAiB,EAAE;QAC9D,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACrC,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,SAAS,CAAC;QAC7D,MAAM,KAAK,GAAG,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC;QAEhD,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YAC7B,OAAO,cAAc,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,MAAM,EAAE,CAAC;QACpE,CAAC;QAED,yBAAyB;QACzB,OAAO,cAAc,EAAE,IAAI,KAAK,GAAG,MAAM,EAAE,CAAC;IAC9C,CAAC;IAED,wBAAwB;IAChB,WAAW,CAAC,OAAuB;QACzC,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAW,CAAC;QAC/D,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAW,CAAC;QACtD,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAW,CAAC;QAErE,OAAO,cAAc,IAAI,MAAM,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC;IAC1F,CAAC;IAED,0CAA0C;IAC1C,KAAK,CAAC,cAAc,CAAC,OAAuB;QAM1C,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAE/C,IAAI,CAAC;YACH,wDAAwD;YACxD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YAEvC,qBAAqB;YACrB,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;YAE/C,sBAAsB;YACtB,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAEnD,mCAAmC;YACnC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEpB,iBAAiB;YACjB,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;YAE7D,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACtC,MAAM,SAAS,GAAG,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAW,IAAI,CAAC,CAAC;YAEnD,MAAM,OAAO,GAAG,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;YACrD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC,CAAC;YACnE,MAAM,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;YAE7C,sBAAsB;YACtB,aAAa,CAAC;gBACZ,QAAQ,EAAE,YAAY;gBACtB,OAAO,EAAE,qBAAqB,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;gBACpE,IAAI,EAAE;oBACJ,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;oBAC7B,KAAK,EAAE,OAAO,CAAC,UAAU;oBACzB,OAAO;oBACP,SAAS;iBACV;aACF,CAAC,CAAC;YAEH,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;QACtD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACxB,sDAAsD;YACtD,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW;gBAClC,SAAS,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ;gBACrC,SAAS,EAAE,CAAC;aACb,CAAC;QACJ,CAAC;IACH,CAAC;IAED,yCAAyC;IACzC,KAAK,CAAC,uBAAuB,CAAC,OAAuB;QAKnD,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACrC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,MAAM,GAAG,OAAO,EAAE,EAAE,CAAC;YAC3B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAE9C,IAAI,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,GAAG,EAAE,CAAC;gBACzC,OAAO;oBACL,YAAY,EAAE,IAAI;oBAClB,OAAO,EAAE,QAAQ;oBACjB,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC;iBAC7B,CAAC;YACJ,CAAC;YAED,+BAA+B;YAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YACrD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEpD,IAAI,UAAU,GAAG,mBAAmB,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;gBAChE,MAAM,QAAQ,GAAG,GAAG,GAAG,mBAAmB,CAAC,cAAc,CAAC,WAAW,CAAC;gBACtE,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAEtH,OAAO;oBACL,YAAY,EAAE,IAAI;oBAClB,OAAO,EAAE,gBAAgB;oBACzB,QAAQ;iBACT,CAAC;YACJ,CAAC;YAED,oCAAoC;YACpC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACrE,MAAM,WAAW,GAAG,aAAa,EAAE,EAAE,CAAC;gBACtC,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBAE1D,IAAI,aAAa,GAAG,mBAAmB,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;oBACtE,MAAM,QAAQ,GAAG,GAAG,GAAG,mBAAmB,CAAC,iBAAiB,CAAC,WAAW,CAAC;oBACzE,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAEzH,OAAO;wBACL,YAAY,EAAE,IAAI;wBAClB,OAAO,EAAE,mBAAmB;wBAC5B,QAAQ;qBACT,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;QACjC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACxB,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;QACjC,CAAC;IACH,CAAC;IAED,uCAAuC;IACvC,KAAK,CAAC,gBAAgB,CAAC,OAAuB;QAC5C,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACrC,MAAM,GAAG,GAAG,aAAa,EAAE,EAAE,CAAC;QAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,WAAW,GAAG,GAAG,GAAG,mBAAmB,CAAC,iBAAiB,CAAC,QAAQ,CAAC;QAEzE,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACvC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;YAC/C,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YACnD,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;YACvF,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,6BAA6B;IAC7B,gBAAgB;QACd,OAAO,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;YAC5D,IAAI,CAAC;gBACH,sCAAsC;gBACtC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;gBAEpE,IAAI,eAAe,CAAC,YAAY,EAAE,CAAC;oBACjC,MAAM,QAAQ,GAAG,eAAe,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;oBAChE,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;oBAE9D,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;wBACtB,mBAAmB,EAAE,GAAG;wBACxB,uBAAuB,EAAE,GAAG;wBAC5B,mBAAmB,EAAE,QAAQ,CAAC,QAAQ,EAAE;wBACxC,aAAa,EAAE,WAAW,CAAC,QAAQ,EAAE;qBACtC,CAAC,CAAC;oBAEH,0BAA0B;oBAC1B,aAAa,CAAC;wBACZ,QAAQ,EAAE,UAAU;wBACpB,OAAO,EAAE,iCAAiC,eAAe,CAAC,OAAO,EAAE;wBACnE,IAAI,EAAE;4BACJ,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;4BAC7B,OAAO,EAAE,eAAe,CAAC,OAAO;4BAChC,QAAQ;yBACT;wBACD,KAAK,EAAE,SAAS;qBACjB,CAAC,CAAC;oBAEH,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;wBAC/B,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBAC7C,CAAC;oBAED,OAAO,KAAK,CAAC,IAAI,CAAC;wBAChB,KAAK,EAAE,mBAAmB;wBAC1B,OAAO,EAAE,8DAA8D;wBACvE,UAAU,EAAE,WAAW;qBACxB,CAAC,CAAC;gBACL,CAAC;gBAED,mBAAmB;gBACnB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAE1D,yBAAyB;gBACzB,KAAK,CAAC,OAAO,CAAC;oBACZ,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE;oBACvD,uBAAuB,EAAE,cAAc,CAAC,SAAS,CAAC,QAAQ,EAAE;oBAC5D,mBAAmB,EAAE,cAAc,CAAC,SAAS,CAAC,QAAQ,EAAE;iBACzD,CAAC,CAAC;gBAEH,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;oBAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;oBAE7E,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAE7D,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;wBAC/B,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBAC7C,CAAC;oBAED,OAAO,KAAK,CAAC,IAAI,CAAC;wBAChB,KAAK,EAAE,mBAAmB;wBAC1B,OAAO,EAAE,qCAAqC,UAAU,WAAW;wBACnE,UAAU;qBACX,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBACxB,yCAAyC;YAC3C,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;CACF;AAED,2CAA2C;AAC3C,MAAM,UAAU,iBAAiB,CAAC,KAAY,EAAE,IAA8B,EAAE,YAAuC;IACrH,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IACrC,MAAM,MAAM,GAAG,EAAE,GAAG,UAAU,EAAE,GAAG,YAAY,EAAE,CAAC;IAElD,OAAO,IAAI,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACxC,CAAC;AAED,8CAA8C;AAC9C,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,OAAwB;IAC/D,qCAAqC;IACrC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAE5B,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACzD,CAAC;IAED,iCAAiC;IACjC,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACnD,MAAM,aAAa,GAAG,iBAAiB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACzD,MAAM,UAAU,GAAG,iBAAiB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAC5D,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IAC/D,MAAM,oBAAoB,GAAG,iBAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;IACxE,MAAM,wBAAwB,GAAG,iBAAiB,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;IAEhF,2CAA2C;IAE3C,wBAAwB;IACxB,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACrD,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,uCAAuC,CAAC,EAAE,CAAC;YAC/D,MAAM,WAAW,CAAC,gBAAgB,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,wBAAwB;IACxB,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACrD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACxF,MAAM,oBAAoB,CAAC,gBAAgB,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAChE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,4BAA4B;IAC5B,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACrD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE,CAAC;YAC1F,MAAM,wBAAwB,CAAC,gBAAgB,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,sBAAsB;IACtB,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACrD,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC9D,MAAM,UAAU,CAAC,gBAAgB,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACtD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,mBAAmB;IACnB,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACrD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACzE,MAAM,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,uBAAuB;IACvB,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACrD,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACzE,MAAM,UAAU,CAAC,gBAAgB,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACtD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,gBAAgB;IAChB,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACrD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,IAAI,OAAO,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC;YACzF,MAAM,aAAa,CAAC,gBAAgB,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACzD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,oBAAoB;IACpB,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EAAE,KAAK,EAAE,OAAuB,EAAE,EAAE;QACrE,MAAM,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,QAAQ,CAAC,yBAAyB,EAAE,KAAK,EAAE,OAAuB,EAAE,EAAE;QAC5E,OAAO,MAAM,WAAW,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AACL,CAAC;AAED,iDAAiD;AACjD,OAAO,EAAE,WAAW,EAAE,mBAAmB,EAAE,CAAC;AAC5C,eAAe,kBAAkB,CAAC",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\middleware\\rateLimiting.ts"],
      sourcesContent: ["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport Redis from 'ioredis';\nimport { addBreadcrumb, captureException } from '@sentry/node';\n\n// Rate limiting configuration\ninterface RateLimitConfig {\n  windowMs: number; // Time window in milliseconds\n  maxRequests: number; // Maximum requests per window\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n  keyGenerator?: (request: FastifyRequest) => string;\n  onLimitReached?: (request: FastifyRequest, reply: FastifyReply) => void;\n}\n\n// Different rate limit tiers\nconst RATE_LIMITS = {\n  // Authentication endpoints - stricter limits\n  AUTH: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5, // 5 attempts per 15 minutes\n  },\n  \n  // API endpoints - moderate limits\n  API: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 100, // 100 requests per minute\n  },\n  \n  // Public endpoints - more lenient\n  PUBLIC: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 200, // 200 requests per minute\n  },\n  \n  // UTM creation - business logic limits\n  UTM_CREATION: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 10, // 10 UTM links per minute\n  },\n  \n  // Analytics tracking - high volume\n  ANALYTICS: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 1000, // 1000 events per minute\n  },\n  \n  // Password reset - very strict\n  PASSWORD_RESET: {\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 3, // 3 attempts per hour\n  },\n  \n  // Email verification - strict\n  EMAIL_VERIFICATION: {\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 5, // 5 attempts per hour\n  },\n};\n\n// Suspicious activity patterns\nconst SUSPICIOUS_PATTERNS = {\n  RAPID_REQUESTS: {\n    windowMs: 10 * 1000, // 10 seconds\n    maxRequests: 50, // 50 requests in 10 seconds\n    banDuration: 60 * 60 * 1000, // 1 hour ban\n  },\n  \n  FAILED_AUTH_BURST: {\n    windowMs: 5 * 60 * 1000, // 5 minutes\n    maxRequests: 10, // 10 failed auth attempts\n    banDuration: 30 * 60 * 1000, // 30 minutes ban\n  },\n  \n  DISTRIBUTED_ATTACK: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 20, // 20 requests from different IPs but same pattern\n    banDuration: 24 * 60 * 60 * 1000, // 24 hours ban\n  },\n};\n\nclass RateLimiter {\n  private redis: Redis;\n  private config: RateLimitConfig;\n  \n  constructor(redis: Redis, config: RateLimitConfig) {\n    this.redis = redis;\n    this.config = config;\n  }\n  \n  // Generate cache key for rate limiting\n  private generateKey(request: FastifyRequest, suffix: string = ''): string {\n    const ip = this.getClientIP(request);\n    const userAgent = request.headers['user-agent'] || 'unknown';\n    const route = request.routerPath || request.url;\n    \n    if (this.config.keyGenerator) {\n      return `rate_limit:${this.config.keyGenerator(request)}${suffix}`;\n    }\n    \n    // Default key generation\n    return `rate_limit:${ip}:${route}${suffix}`;\n  }\n  \n  // Get client IP address\n  private getClientIP(request: FastifyRequest): string {\n    const forwarded = request.headers['x-forwarded-for'] as string;\n    const realIP = request.headers['x-real-ip'] as string;\n    const cfConnectingIP = request.headers['cf-connecting-ip'] as string;\n    \n    return cfConnectingIP || realIP || (forwarded && forwarded.split(',')[0]) || request.ip;\n  }\n  \n  // Check if request should be rate limited\n  async checkRateLimit(request: FastifyRequest): Promise<{\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    totalHits: number;\n  }> {\n    const key = this.generateKey(request);\n    const now = Date.now();\n    const windowStart = now - this.config.windowMs;\n    \n    try {\n      // Use Redis sorted set to track requests in time window\n      const pipeline = this.redis.pipeline();\n      \n      // Remove old entries\n      pipeline.zremrangebyscore(key, 0, windowStart);\n      \n      // Add current request\n      pipeline.zadd(key, now, `${now}-${Math.random()}`);\n      \n      // Count requests in current window\n      pipeline.zcard(key);\n      \n      // Set expiration\n      pipeline.expire(key, Math.ceil(this.config.windowMs / 1000));\n      \n      const results = await pipeline.exec();\n      const totalHits = results?.[2]?.[1] as number || 0;\n      \n      const allowed = totalHits <= this.config.maxRequests;\n      const remaining = Math.max(0, this.config.maxRequests - totalHits);\n      const resetTime = now + this.config.windowMs;\n      \n      // Log rate limit info\n      addBreadcrumb({\n        category: 'rate_limit',\n        message: `Rate limit check: ${totalHits}/${this.config.maxRequests}`,\n        data: {\n          ip: this.getClientIP(request),\n          route: request.routerPath,\n          allowed,\n          remaining,\n        },\n      });\n      \n      return { allowed, remaining, resetTime, totalHits };\n    } catch (error) {\n      captureException(error);\n      // On Redis error, allow the request but log the issue\n      return {\n        allowed: true,\n        remaining: this.config.maxRequests,\n        resetTime: now + this.config.windowMs,\n        totalHits: 0,\n      };\n    }\n  }\n  \n  // Check for suspicious activity patterns\n  async checkSuspiciousActivity(request: FastifyRequest): Promise<{\n    isSuspicious: boolean;\n    pattern?: string;\n    banUntil?: number;\n  }> {\n    const ip = this.getClientIP(request);\n    const now = Date.now();\n    \n    try {\n      // Check if IP is already banned\n      const banKey = `ban:${ip}`;\n      const banUntil = await this.redis.get(banKey);\n      \n      if (banUntil && parseInt(banUntil) > now) {\n        return {\n          isSuspicious: true,\n          pattern: 'BANNED',\n          banUntil: parseInt(banUntil),\n        };\n      }\n      \n      // Check rapid requests pattern\n      const rapidKey = this.generateKey(request, ':rapid');\n      const rapidCount = await this.redis.zcard(rapidKey);\n      \n      if (rapidCount > SUSPICIOUS_PATTERNS.RAPID_REQUESTS.maxRequests) {\n        const banUntil = now + SUSPICIOUS_PATTERNS.RAPID_REQUESTS.banDuration;\n        await this.redis.setex(banKey, Math.ceil(SUSPICIOUS_PATTERNS.RAPID_REQUESTS.banDuration / 1000), banUntil.toString());\n        \n        return {\n          isSuspicious: true,\n          pattern: 'RAPID_REQUESTS',\n          banUntil,\n        };\n      }\n      \n      // Check failed authentication burst\n      if (request.url.includes('/auth/') || request.url.includes('/login')) {\n        const authFailKey = `auth_fail:${ip}`;\n        const authFailCount = await this.redis.zcard(authFailKey);\n        \n        if (authFailCount > SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.maxRequests) {\n          const banUntil = now + SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.banDuration;\n          await this.redis.setex(banKey, Math.ceil(SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.banDuration / 1000), banUntil.toString());\n          \n          return {\n            isSuspicious: true,\n            pattern: 'FAILED_AUTH_BURST',\n            banUntil,\n          };\n        }\n      }\n      \n      return { isSuspicious: false };\n    } catch (error) {\n      captureException(error);\n      return { isSuspicious: false };\n    }\n  }\n  \n  // Record failed authentication attempt\n  async recordFailedAuth(request: FastifyRequest): Promise<void> {\n    const ip = this.getClientIP(request);\n    const key = `auth_fail:${ip}`;\n    const now = Date.now();\n    const windowStart = now - SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.windowMs;\n    \n    try {\n      const pipeline = this.redis.pipeline();\n      pipeline.zremrangebyscore(key, 0, windowStart);\n      pipeline.zadd(key, now, `${now}-${Math.random()}`);\n      pipeline.expire(key, Math.ceil(SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.windowMs / 1000));\n      await pipeline.exec();\n    } catch (error) {\n      captureException(error);\n    }\n  }\n  \n  // Create middleware function\n  createMiddleware() {\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        // Check for suspicious activity first\n        const suspiciousCheck = await this.checkSuspiciousActivity(request);\n        \n        if (suspiciousCheck.isSuspicious) {\n          const banUntil = suspiciousCheck.banUntil || Date.now() + 60000;\n          const banDuration = Math.ceil((banUntil - Date.now()) / 1000);\n          \n          reply.code(429).headers({\n            'X-RateLimit-Limit': '0',\n            'X-RateLimit-Remaining': '0',\n            'X-RateLimit-Reset': banUntil.toString(),\n            'Retry-After': banDuration.toString(),\n          });\n          \n          // Log suspicious activity\n          addBreadcrumb({\n            category: 'security',\n            message: `Suspicious activity detected: ${suspiciousCheck.pattern}`,\n            data: {\n              ip: this.getClientIP(request),\n              pattern: suspiciousCheck.pattern,\n              banUntil,\n            },\n            level: 'warning',\n          });\n          \n          if (this.config.onLimitReached) {\n            this.config.onLimitReached(request, reply);\n          }\n          \n          return reply.send({\n            error: 'Too Many Requests',\n            message: `Suspicious activity detected. Access temporarily restricted.`,\n            retryAfter: banDuration,\n          });\n        }\n        \n        // Check rate limit\n        const rateLimitCheck = await this.checkRateLimit(request);\n        \n        // Set rate limit headers\n        reply.headers({\n          'X-RateLimit-Limit': this.config.maxRequests.toString(),\n          'X-RateLimit-Remaining': rateLimitCheck.remaining.toString(),\n          'X-RateLimit-Reset': rateLimitCheck.resetTime.toString(),\n        });\n        \n        if (!rateLimitCheck.allowed) {\n          const retryAfter = Math.ceil((rateLimitCheck.resetTime - Date.now()) / 1000);\n          \n          reply.code(429).header('Retry-After', retryAfter.toString());\n          \n          if (this.config.onLimitReached) {\n            this.config.onLimitReached(request, reply);\n          }\n          \n          return reply.send({\n            error: 'Too Many Requests',\n            message: `Rate limit exceeded. Try again in ${retryAfter} seconds.`,\n            retryAfter,\n          });\n        }\n      } catch (error) {\n        captureException(error);\n        // On error, allow the request to proceed\n      }\n    };\n  }\n}\n\n// Factory function to create rate limiters\nexport function createRateLimiter(redis: Redis, type: keyof typeof RATE_LIMITS, customConfig?: Partial<RateLimitConfig>): RateLimiter {\n  const baseConfig = RATE_LIMITS[type];\n  const config = { ...baseConfig, ...customConfig };\n  \n  return new RateLimiter(redis, config);\n}\n\n// Plugin to register rate limiting middleware\nexport async function rateLimitingPlugin(fastify: FastifyInstance) {\n  // Assume Redis is already registered\n  const redis = fastify.redis;\n  \n  if (!redis) {\n    throw new Error('Redis is required for rate limiting');\n  }\n  \n  // Create different rate limiters\n  const authLimiter = createRateLimiter(redis, 'AUTH');\n  const apiLimiter = createRateLimiter(redis, 'API');\n  const publicLimiter = createRateLimiter(redis, 'PUBLIC');\n  const utmLimiter = createRateLimiter(redis, 'UTM_CREATION');\n  const analyticsLimiter = createRateLimiter(redis, 'ANALYTICS');\n  const passwordResetLimiter = createRateLimiter(redis, 'PASSWORD_RESET');\n  const emailVerificationLimiter = createRateLimiter(redis, 'EMAIL_VERIFICATION');\n  \n  // Register middleware for different routes\n  \n  // Authentication routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.match(/\\/(auth|login|register|signin|signup)/)) {\n      await authLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Password reset routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.includes('/password/reset') || request.url.includes('/forgot-password')) {\n      await passwordResetLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Email verification routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.includes('/verify-email') || request.url.includes('/resend-verification')) {\n      await emailVerificationLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // UTM creation routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.method === 'POST' && request.url.includes('/utm')) {\n      await utmLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Analytics routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.includes('/analytics') || request.url.includes('/track')) {\n      await analyticsLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // API routes (general)\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.startsWith('/api/') && !request.url.includes('/public/')) {\n      await apiLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Public routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.includes('/public/') || request.url === '/health' || request.url === '/') {\n      await publicLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Utility functions\n  fastify.decorate('recordFailedAuth', async (request: FastifyRequest) => {\n    await authLimiter.recordFailedAuth(request);\n  });\n  \n  fastify.decorate('checkSuspiciousActivity', async (request: FastifyRequest) => {\n    return await authLimiter.checkSuspiciousActivity(request);\n  });\n}\n\n// Export rate limit configurations for reference\nexport { RATE_LIMITS, SUSPICIOUS_PATTERNS };\nexport default rateLimitingPlugin;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d2c58e1387bcd431d2ac7c2dba2b5021a3a19d69"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7wtsxckwr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7wtsxckwr();
import { addBreadcrumb, captureException } from '@sentry/node';
// Different rate limit tiers
const RATE_LIMITS =
/* istanbul ignore next */
(cov_7wtsxckwr().s[0]++, {
  // Authentication endpoints - stricter limits
  AUTH: {
    windowMs: 15 * 60 * 1000,
    // 15 minutes
    maxRequests: 5 // 5 attempts per 15 minutes
  },
  // API endpoints - moderate limits
  API: {
    windowMs: 60 * 1000,
    // 1 minute
    maxRequests: 100 // 100 requests per minute
  },
  // Public endpoints - more lenient
  PUBLIC: {
    windowMs: 60 * 1000,
    // 1 minute
    maxRequests: 200 // 200 requests per minute
  },
  // UTM creation - business logic limits
  UTM_CREATION: {
    windowMs: 60 * 1000,
    // 1 minute
    maxRequests: 10 // 10 UTM links per minute
  },
  // Analytics tracking - high volume
  ANALYTICS: {
    windowMs: 60 * 1000,
    // 1 minute
    maxRequests: 1000 // 1000 events per minute
  },
  // Password reset - very strict
  PASSWORD_RESET: {
    windowMs: 60 * 60 * 1000,
    // 1 hour
    maxRequests: 3 // 3 attempts per hour
  },
  // Email verification - strict
  EMAIL_VERIFICATION: {
    windowMs: 60 * 60 * 1000,
    // 1 hour
    maxRequests: 5 // 5 attempts per hour
  }
});
// Suspicious activity patterns
const SUSPICIOUS_PATTERNS =
/* istanbul ignore next */
(cov_7wtsxckwr().s[1]++, {
  RAPID_REQUESTS: {
    windowMs: 10 * 1000,
    // 10 seconds
    maxRequests: 50,
    // 50 requests in 10 seconds
    banDuration: 60 * 60 * 1000 // 1 hour ban
  },
  FAILED_AUTH_BURST: {
    windowMs: 5 * 60 * 1000,
    // 5 minutes
    maxRequests: 10,
    // 10 failed auth attempts
    banDuration: 30 * 60 * 1000 // 30 minutes ban
  },
  DISTRIBUTED_ATTACK: {
    windowMs: 60 * 1000,
    // 1 minute
    maxRequests: 20,
    // 20 requests from different IPs but same pattern
    banDuration: 24 * 60 * 60 * 1000 // 24 hours ban
  }
});
class RateLimiter {
  redis;
  config;
  constructor(redis, config) {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[0]++;
    cov_7wtsxckwr().s[2]++;
    this.redis = redis;
    /* istanbul ignore next */
    cov_7wtsxckwr().s[3]++;
    this.config = config;
  }
  // Generate cache key for rate limiting
  generateKey(request, suffix =
  /* istanbul ignore next */
  (cov_7wtsxckwr().b[0][0]++, '')) {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[1]++;
    const ip =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[4]++, this.getClientIP(request));
    const userAgent =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[5]++,
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[1][0]++, request.headers['user-agent']) ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[1][1]++, 'unknown'));
    const route =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[6]++,
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[2][0]++, request.routerPath) ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[2][1]++, request.url));
    /* istanbul ignore next */
    cov_7wtsxckwr().s[7]++;
    if (this.config.keyGenerator) {
      /* istanbul ignore next */
      cov_7wtsxckwr().b[3][0]++;
      cov_7wtsxckwr().s[8]++;
      return `rate_limit:${this.config.keyGenerator(request)}${suffix}`;
    } else
    /* istanbul ignore next */
    {
      cov_7wtsxckwr().b[3][1]++;
    }
    // Default key generation
    cov_7wtsxckwr().s[9]++;
    return `rate_limit:${ip}:${route}${suffix}`;
  }
  // Get client IP address
  getClientIP(request) {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[2]++;
    const forwarded =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[10]++, request.headers['x-forwarded-for']);
    const realIP =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[11]++, request.headers['x-real-ip']);
    const cfConnectingIP =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[12]++, request.headers['cf-connecting-ip']);
    /* istanbul ignore next */
    cov_7wtsxckwr().s[13]++;
    return /* istanbul ignore next */(cov_7wtsxckwr().b[4][0]++, cfConnectingIP) ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[4][1]++, realIP) ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[4][2]++, forwarded) &&
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[4][3]++, forwarded.split(',')[0]) ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[4][4]++, request.ip);
  }
  // Check if request should be rate limited
  async checkRateLimit(request) {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[3]++;
    const key =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[14]++, this.generateKey(request));
    const now =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[15]++, Date.now());
    const windowStart =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[16]++, now - this.config.windowMs);
    /* istanbul ignore next */
    cov_7wtsxckwr().s[17]++;
    try {
      // Use Redis sorted set to track requests in time window
      const pipeline =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[18]++, this.redis.pipeline());
      // Remove old entries
      /* istanbul ignore next */
      cov_7wtsxckwr().s[19]++;
      pipeline.zremrangebyscore(key, 0, windowStart);
      // Add current request
      /* istanbul ignore next */
      cov_7wtsxckwr().s[20]++;
      pipeline.zadd(key, now, `${now}-${Math.random()}`);
      // Count requests in current window
      /* istanbul ignore next */
      cov_7wtsxckwr().s[21]++;
      pipeline.zcard(key);
      // Set expiration
      /* istanbul ignore next */
      cov_7wtsxckwr().s[22]++;
      pipeline.expire(key, Math.ceil(this.config.windowMs / 1000));
      const results =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[23]++, await pipeline.exec());
      const totalHits =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[24]++,
      /* istanbul ignore next */
      (cov_7wtsxckwr().b[5][0]++, results?.[2]?.[1]) ||
      /* istanbul ignore next */
      (cov_7wtsxckwr().b[5][1]++, 0));
      const allowed =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[25]++, totalHits <= this.config.maxRequests);
      const remaining =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[26]++, Math.max(0, this.config.maxRequests - totalHits));
      const resetTime =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[27]++, now + this.config.windowMs);
      // Log rate limit info
      /* istanbul ignore next */
      cov_7wtsxckwr().s[28]++;
      addBreadcrumb({
        category: 'rate_limit',
        message: `Rate limit check: ${totalHits}/${this.config.maxRequests}`,
        data: {
          ip: this.getClientIP(request),
          route: request.routerPath,
          allowed,
          remaining
        }
      });
      /* istanbul ignore next */
      cov_7wtsxckwr().s[29]++;
      return {
        allowed,
        remaining,
        resetTime,
        totalHits
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_7wtsxckwr().s[30]++;
      captureException(error);
      // On Redis error, allow the request but log the issue
      /* istanbul ignore next */
      cov_7wtsxckwr().s[31]++;
      return {
        allowed: true,
        remaining: this.config.maxRequests,
        resetTime: now + this.config.windowMs,
        totalHits: 0
      };
    }
  }
  // Check for suspicious activity patterns
  async checkSuspiciousActivity(request) {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[4]++;
    const ip =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[32]++, this.getClientIP(request));
    const now =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[33]++, Date.now());
    /* istanbul ignore next */
    cov_7wtsxckwr().s[34]++;
    try {
      // Check if IP is already banned
      const banKey =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[35]++, `ban:${ip}`);
      const banUntil =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[36]++, await this.redis.get(banKey));
      /* istanbul ignore next */
      cov_7wtsxckwr().s[37]++;
      if (
      /* istanbul ignore next */
      (cov_7wtsxckwr().b[7][0]++, banUntil) &&
      /* istanbul ignore next */
      (cov_7wtsxckwr().b[7][1]++, parseInt(banUntil) > now)) {
        /* istanbul ignore next */
        cov_7wtsxckwr().b[6][0]++;
        cov_7wtsxckwr().s[38]++;
        return {
          isSuspicious: true,
          pattern: 'BANNED',
          banUntil: parseInt(banUntil)
        };
      } else
      /* istanbul ignore next */
      {
        cov_7wtsxckwr().b[6][1]++;
      }
      // Check rapid requests pattern
      const rapidKey =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[39]++, this.generateKey(request, ':rapid'));
      const rapidCount =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[40]++, await this.redis.zcard(rapidKey));
      /* istanbul ignore next */
      cov_7wtsxckwr().s[41]++;
      if (rapidCount > SUSPICIOUS_PATTERNS.RAPID_REQUESTS.maxRequests) {
        /* istanbul ignore next */
        cov_7wtsxckwr().b[8][0]++;
        const banUntil =
        /* istanbul ignore next */
        (cov_7wtsxckwr().s[42]++, now + SUSPICIOUS_PATTERNS.RAPID_REQUESTS.banDuration);
        /* istanbul ignore next */
        cov_7wtsxckwr().s[43]++;
        await this.redis.setex(banKey, Math.ceil(SUSPICIOUS_PATTERNS.RAPID_REQUESTS.banDuration / 1000), banUntil.toString());
        /* istanbul ignore next */
        cov_7wtsxckwr().s[44]++;
        return {
          isSuspicious: true,
          pattern: 'RAPID_REQUESTS',
          banUntil
        };
      } else
      /* istanbul ignore next */
      {
        cov_7wtsxckwr().b[8][1]++;
      }
      // Check failed authentication burst
      cov_7wtsxckwr().s[45]++;
      if (
      /* istanbul ignore next */
      (cov_7wtsxckwr().b[10][0]++, request.url.includes('/auth/')) ||
      /* istanbul ignore next */
      (cov_7wtsxckwr().b[10][1]++, request.url.includes('/login'))) {
        /* istanbul ignore next */
        cov_7wtsxckwr().b[9][0]++;
        const authFailKey =
        /* istanbul ignore next */
        (cov_7wtsxckwr().s[46]++, `auth_fail:${ip}`);
        const authFailCount =
        /* istanbul ignore next */
        (cov_7wtsxckwr().s[47]++, await this.redis.zcard(authFailKey));
        /* istanbul ignore next */
        cov_7wtsxckwr().s[48]++;
        if (authFailCount > SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.maxRequests) {
          /* istanbul ignore next */
          cov_7wtsxckwr().b[11][0]++;
          const banUntil =
          /* istanbul ignore next */
          (cov_7wtsxckwr().s[49]++, now + SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.banDuration);
          /* istanbul ignore next */
          cov_7wtsxckwr().s[50]++;
          await this.redis.setex(banKey, Math.ceil(SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.banDuration / 1000), banUntil.toString());
          /* istanbul ignore next */
          cov_7wtsxckwr().s[51]++;
          return {
            isSuspicious: true,
            pattern: 'FAILED_AUTH_BURST',
            banUntil
          };
        } else
        /* istanbul ignore next */
        {
          cov_7wtsxckwr().b[11][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_7wtsxckwr().b[9][1]++;
      }
      cov_7wtsxckwr().s[52]++;
      return {
        isSuspicious: false
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_7wtsxckwr().s[53]++;
      captureException(error);
      /* istanbul ignore next */
      cov_7wtsxckwr().s[54]++;
      return {
        isSuspicious: false
      };
    }
  }
  // Record failed authentication attempt
  async recordFailedAuth(request) {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[5]++;
    const ip =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[55]++, this.getClientIP(request));
    const key =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[56]++, `auth_fail:${ip}`);
    const now =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[57]++, Date.now());
    const windowStart =
    /* istanbul ignore next */
    (cov_7wtsxckwr().s[58]++, now - SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.windowMs);
    /* istanbul ignore next */
    cov_7wtsxckwr().s[59]++;
    try {
      const pipeline =
      /* istanbul ignore next */
      (cov_7wtsxckwr().s[60]++, this.redis.pipeline());
      /* istanbul ignore next */
      cov_7wtsxckwr().s[61]++;
      pipeline.zremrangebyscore(key, 0, windowStart);
      /* istanbul ignore next */
      cov_7wtsxckwr().s[62]++;
      pipeline.zadd(key, now, `${now}-${Math.random()}`);
      /* istanbul ignore next */
      cov_7wtsxckwr().s[63]++;
      pipeline.expire(key, Math.ceil(SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.windowMs / 1000));
      /* istanbul ignore next */
      cov_7wtsxckwr().s[64]++;
      await pipeline.exec();
    } catch (error) {
      /* istanbul ignore next */
      cov_7wtsxckwr().s[65]++;
      captureException(error);
    }
  }
  // Create middleware function
  createMiddleware() {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[6]++;
    cov_7wtsxckwr().s[66]++;
    return async (request, reply) => {
      /* istanbul ignore next */
      cov_7wtsxckwr().f[7]++;
      cov_7wtsxckwr().s[67]++;
      try {
        // Check for suspicious activity first
        const suspiciousCheck =
        /* istanbul ignore next */
        (cov_7wtsxckwr().s[68]++, await this.checkSuspiciousActivity(request));
        /* istanbul ignore next */
        cov_7wtsxckwr().s[69]++;
        if (suspiciousCheck.isSuspicious) {
          /* istanbul ignore next */
          cov_7wtsxckwr().b[12][0]++;
          const banUntil =
          /* istanbul ignore next */
          (cov_7wtsxckwr().s[70]++,
          /* istanbul ignore next */
          (cov_7wtsxckwr().b[13][0]++, suspiciousCheck.banUntil) ||
          /* istanbul ignore next */
          (cov_7wtsxckwr().b[13][1]++, Date.now() + 60000));
          const banDuration =
          /* istanbul ignore next */
          (cov_7wtsxckwr().s[71]++, Math.ceil((banUntil - Date.now()) / 1000));
          /* istanbul ignore next */
          cov_7wtsxckwr().s[72]++;
          reply.code(429).headers({
            'X-RateLimit-Limit': '0',
            'X-RateLimit-Remaining': '0',
            'X-RateLimit-Reset': banUntil.toString(),
            'Retry-After': banDuration.toString()
          });
          // Log suspicious activity
          /* istanbul ignore next */
          cov_7wtsxckwr().s[73]++;
          addBreadcrumb({
            category: 'security',
            message: `Suspicious activity detected: ${suspiciousCheck.pattern}`,
            data: {
              ip: this.getClientIP(request),
              pattern: suspiciousCheck.pattern,
              banUntil
            },
            level: 'warning'
          });
          /* istanbul ignore next */
          cov_7wtsxckwr().s[74]++;
          if (this.config.onLimitReached) {
            /* istanbul ignore next */
            cov_7wtsxckwr().b[14][0]++;
            cov_7wtsxckwr().s[75]++;
            this.config.onLimitReached(request, reply);
          } else
          /* istanbul ignore next */
          {
            cov_7wtsxckwr().b[14][1]++;
          }
          cov_7wtsxckwr().s[76]++;
          return reply.send({
            error: 'Too Many Requests',
            message: `Suspicious activity detected. Access temporarily restricted.`,
            retryAfter: banDuration
          });
        } else
        /* istanbul ignore next */
        {
          cov_7wtsxckwr().b[12][1]++;
        }
        // Check rate limit
        const rateLimitCheck =
        /* istanbul ignore next */
        (cov_7wtsxckwr().s[77]++, await this.checkRateLimit(request));
        // Set rate limit headers
        /* istanbul ignore next */
        cov_7wtsxckwr().s[78]++;
        reply.headers({
          'X-RateLimit-Limit': this.config.maxRequests.toString(),
          'X-RateLimit-Remaining': rateLimitCheck.remaining.toString(),
          'X-RateLimit-Reset': rateLimitCheck.resetTime.toString()
        });
        /* istanbul ignore next */
        cov_7wtsxckwr().s[79]++;
        if (!rateLimitCheck.allowed) {
          /* istanbul ignore next */
          cov_7wtsxckwr().b[15][0]++;
          const retryAfter =
          /* istanbul ignore next */
          (cov_7wtsxckwr().s[80]++, Math.ceil((rateLimitCheck.resetTime - Date.now()) / 1000));
          /* istanbul ignore next */
          cov_7wtsxckwr().s[81]++;
          reply.code(429).header('Retry-After', retryAfter.toString());
          /* istanbul ignore next */
          cov_7wtsxckwr().s[82]++;
          if (this.config.onLimitReached) {
            /* istanbul ignore next */
            cov_7wtsxckwr().b[16][0]++;
            cov_7wtsxckwr().s[83]++;
            this.config.onLimitReached(request, reply);
          } else
          /* istanbul ignore next */
          {
            cov_7wtsxckwr().b[16][1]++;
          }
          cov_7wtsxckwr().s[84]++;
          return reply.send({
            error: 'Too Many Requests',
            message: `Rate limit exceeded. Try again in ${retryAfter} seconds.`,
            retryAfter
          });
        } else
        /* istanbul ignore next */
        {
          cov_7wtsxckwr().b[15][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_7wtsxckwr().s[85]++;
        captureException(error);
        // On error, allow the request to proceed
      }
    };
  }
}
// Factory function to create rate limiters
export function createRateLimiter(redis, type, customConfig) {
  /* istanbul ignore next */
  cov_7wtsxckwr().f[8]++;
  const baseConfig =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[86]++, RATE_LIMITS[type]);
  const config =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[87]++, {
    ...baseConfig,
    ...customConfig
  });
  /* istanbul ignore next */
  cov_7wtsxckwr().s[88]++;
  return new RateLimiter(redis, config);
}
// Plugin to register rate limiting middleware
export async function rateLimitingPlugin(fastify) {
  /* istanbul ignore next */
  cov_7wtsxckwr().f[9]++;
  // Assume Redis is already registered
  const redis =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[89]++, fastify.redis);
  /* istanbul ignore next */
  cov_7wtsxckwr().s[90]++;
  if (!redis) {
    /* istanbul ignore next */
    cov_7wtsxckwr().b[17][0]++;
    cov_7wtsxckwr().s[91]++;
    throw new Error('Redis is required for rate limiting');
  } else
  /* istanbul ignore next */
  {
    cov_7wtsxckwr().b[17][1]++;
  }
  // Create different rate limiters
  const authLimiter =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[92]++, createRateLimiter(redis, 'AUTH'));
  const apiLimiter =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[93]++, createRateLimiter(redis, 'API'));
  const publicLimiter =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[94]++, createRateLimiter(redis, 'PUBLIC'));
  const utmLimiter =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[95]++, createRateLimiter(redis, 'UTM_CREATION'));
  const analyticsLimiter =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[96]++, createRateLimiter(redis, 'ANALYTICS'));
  const passwordResetLimiter =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[97]++, createRateLimiter(redis, 'PASSWORD_RESET'));
  const emailVerificationLimiter =
  /* istanbul ignore next */
  (cov_7wtsxckwr().s[98]++, createRateLimiter(redis, 'EMAIL_VERIFICATION'));
  // Register middleware for different routes
  // Authentication routes
  /* istanbul ignore next */
  cov_7wtsxckwr().s[99]++;
  fastify.addHook('preHandler', async (request, reply) => {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[10]++;
    cov_7wtsxckwr().s[100]++;
    if (request.url.match(/\/(auth|login|register|signin|signup)/)) {
      /* istanbul ignore next */
      cov_7wtsxckwr().b[18][0]++;
      cov_7wtsxckwr().s[101]++;
      await authLimiter.createMiddleware()(request, reply);
    } else
    /* istanbul ignore next */
    {
      cov_7wtsxckwr().b[18][1]++;
    }
  });
  // Password reset routes
  /* istanbul ignore next */
  cov_7wtsxckwr().s[102]++;
  fastify.addHook('preHandler', async (request, reply) => {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[11]++;
    cov_7wtsxckwr().s[103]++;
    if (
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[20][0]++, request.url.includes('/password/reset')) ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[20][1]++, request.url.includes('/forgot-password'))) {
      /* istanbul ignore next */
      cov_7wtsxckwr().b[19][0]++;
      cov_7wtsxckwr().s[104]++;
      await passwordResetLimiter.createMiddleware()(request, reply);
    } else
    /* istanbul ignore next */
    {
      cov_7wtsxckwr().b[19][1]++;
    }
  });
  // Email verification routes
  /* istanbul ignore next */
  cov_7wtsxckwr().s[105]++;
  fastify.addHook('preHandler', async (request, reply) => {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[12]++;
    cov_7wtsxckwr().s[106]++;
    if (
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[22][0]++, request.url.includes('/verify-email')) ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[22][1]++, request.url.includes('/resend-verification'))) {
      /* istanbul ignore next */
      cov_7wtsxckwr().b[21][0]++;
      cov_7wtsxckwr().s[107]++;
      await emailVerificationLimiter.createMiddleware()(request, reply);
    } else
    /* istanbul ignore next */
    {
      cov_7wtsxckwr().b[21][1]++;
    }
  });
  // UTM creation routes
  /* istanbul ignore next */
  cov_7wtsxckwr().s[108]++;
  fastify.addHook('preHandler', async (request, reply) => {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[13]++;
    cov_7wtsxckwr().s[109]++;
    if (
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[24][0]++, request.method === 'POST') &&
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[24][1]++, request.url.includes('/utm'))) {
      /* istanbul ignore next */
      cov_7wtsxckwr().b[23][0]++;
      cov_7wtsxckwr().s[110]++;
      await utmLimiter.createMiddleware()(request, reply);
    } else
    /* istanbul ignore next */
    {
      cov_7wtsxckwr().b[23][1]++;
    }
  });
  // Analytics routes
  /* istanbul ignore next */
  cov_7wtsxckwr().s[111]++;
  fastify.addHook('preHandler', async (request, reply) => {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[14]++;
    cov_7wtsxckwr().s[112]++;
    if (
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[26][0]++, request.url.includes('/analytics')) ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[26][1]++, request.url.includes('/track'))) {
      /* istanbul ignore next */
      cov_7wtsxckwr().b[25][0]++;
      cov_7wtsxckwr().s[113]++;
      await analyticsLimiter.createMiddleware()(request, reply);
    } else
    /* istanbul ignore next */
    {
      cov_7wtsxckwr().b[25][1]++;
    }
  });
  // API routes (general)
  /* istanbul ignore next */
  cov_7wtsxckwr().s[114]++;
  fastify.addHook('preHandler', async (request, reply) => {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[15]++;
    cov_7wtsxckwr().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[28][0]++, request.url.startsWith('/api/')) &&
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[28][1]++, !request.url.includes('/public/'))) {
      /* istanbul ignore next */
      cov_7wtsxckwr().b[27][0]++;
      cov_7wtsxckwr().s[116]++;
      await apiLimiter.createMiddleware()(request, reply);
    } else
    /* istanbul ignore next */
    {
      cov_7wtsxckwr().b[27][1]++;
    }
  });
  // Public routes
  /* istanbul ignore next */
  cov_7wtsxckwr().s[117]++;
  fastify.addHook('preHandler', async (request, reply) => {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[16]++;
    cov_7wtsxckwr().s[118]++;
    if (
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[30][0]++, request.url.includes('/public/')) ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[30][1]++, request.url === '/health') ||
    /* istanbul ignore next */
    (cov_7wtsxckwr().b[30][2]++, request.url === '/')) {
      /* istanbul ignore next */
      cov_7wtsxckwr().b[29][0]++;
      cov_7wtsxckwr().s[119]++;
      await publicLimiter.createMiddleware()(request, reply);
    } else
    /* istanbul ignore next */
    {
      cov_7wtsxckwr().b[29][1]++;
    }
  });
  // Utility functions
  /* istanbul ignore next */
  cov_7wtsxckwr().s[120]++;
  fastify.decorate('recordFailedAuth', async request => {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[17]++;
    cov_7wtsxckwr().s[121]++;
    await authLimiter.recordFailedAuth(request);
  });
  /* istanbul ignore next */
  cov_7wtsxckwr().s[122]++;
  fastify.decorate('checkSuspiciousActivity', async request => {
    /* istanbul ignore next */
    cov_7wtsxckwr().f[18]++;
    cov_7wtsxckwr().s[123]++;
    return await authLimiter.checkSuspiciousActivity(request);
  });
}
// Export rate limit configurations for reference
export { RATE_LIMITS, SUSPICIOUS_PATTERNS };
export default rateLimitingPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,