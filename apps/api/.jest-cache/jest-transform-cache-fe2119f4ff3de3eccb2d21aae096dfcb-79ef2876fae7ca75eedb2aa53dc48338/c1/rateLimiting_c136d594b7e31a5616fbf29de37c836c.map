{"version":3,"names":["cov_7wtsxckwr","actualCoverage","addBreadcrumb","captureException","RATE_LIMITS","s","AUTH","windowMs","maxRequests","API","PUBLIC","UTM_CREATION","ANALYTICS","PASSWORD_RESET","EMAIL_VERIFICATION","SUSPICIOUS_PATTERNS","RAPID_REQUESTS","banDuration","FAILED_AUTH_BURST","DISTRIBUTED_ATTACK","RateLimiter","redis","config","constructor","f","generateKey","request","suffix","b","ip","getClientIP","userAgent","headers","route","routerPath","url","keyGenerator","forwarded","realIP","cfConnectingIP","split","checkRateLimit","key","now","Date","windowStart","pipeline","zremrangebyscore","zadd","Math","random","zcard","expire","ceil","results","exec","totalHits","allowed","remaining","max","resetTime","category","message","data","error","checkSuspiciousActivity","banKey","banUntil","get","parseInt","isSuspicious","pattern","rapidKey","rapidCount","setex","toString","includes","authFailKey","authFailCount","recordFailedAuth","createMiddleware","reply","suspiciousCheck","code","level","onLimitReached","send","retryAfter","rateLimitCheck","header","createRateLimiter","type","customConfig","baseConfig","rateLimitingPlugin","fastify","Error","authLimiter","apiLimiter","publicLimiter","utmLimiter","analyticsLimiter","passwordResetLimiter","emailVerificationLimiter","addHook","match","method","startsWith","decorate"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\middleware\\rateLimiting.ts"],"sourcesContent":["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport Redis from 'ioredis';\nimport { addBreadcrumb, captureException } from '@sentry/node';\n\n// Rate limiting configuration\ninterface RateLimitConfig {\n  windowMs: number; // Time window in milliseconds\n  maxRequests: number; // Maximum requests per window\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n  keyGenerator?: (request: FastifyRequest) => string;\n  onLimitReached?: (request: FastifyRequest, reply: FastifyReply) => void;\n}\n\n// Different rate limit tiers\nconst RATE_LIMITS = {\n  // Authentication endpoints - stricter limits\n  AUTH: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5, // 5 attempts per 15 minutes\n  },\n  \n  // API endpoints - moderate limits\n  API: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 100, // 100 requests per minute\n  },\n  \n  // Public endpoints - more lenient\n  PUBLIC: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 200, // 200 requests per minute\n  },\n  \n  // UTM creation - business logic limits\n  UTM_CREATION: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 10, // 10 UTM links per minute\n  },\n  \n  // Analytics tracking - high volume\n  ANALYTICS: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 1000, // 1000 events per minute\n  },\n  \n  // Password reset - very strict\n  PASSWORD_RESET: {\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 3, // 3 attempts per hour\n  },\n  \n  // Email verification - strict\n  EMAIL_VERIFICATION: {\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 5, // 5 attempts per hour\n  },\n};\n\n// Suspicious activity patterns\nconst SUSPICIOUS_PATTERNS = {\n  RAPID_REQUESTS: {\n    windowMs: 10 * 1000, // 10 seconds\n    maxRequests: 50, // 50 requests in 10 seconds\n    banDuration: 60 * 60 * 1000, // 1 hour ban\n  },\n  \n  FAILED_AUTH_BURST: {\n    windowMs: 5 * 60 * 1000, // 5 minutes\n    maxRequests: 10, // 10 failed auth attempts\n    banDuration: 30 * 60 * 1000, // 30 minutes ban\n  },\n  \n  DISTRIBUTED_ATTACK: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 20, // 20 requests from different IPs but same pattern\n    banDuration: 24 * 60 * 60 * 1000, // 24 hours ban\n  },\n};\n\nclass RateLimiter {\n  private redis: Redis;\n  private config: RateLimitConfig;\n  \n  constructor(redis: Redis, config: RateLimitConfig) {\n    this.redis = redis;\n    this.config = config;\n  }\n  \n  // Generate cache key for rate limiting\n  private generateKey(request: FastifyRequest, suffix: string = ''): string {\n    const ip = this.getClientIP(request);\n    const userAgent = request.headers['user-agent'] || 'unknown';\n    const route = request.routerPath || request.url;\n    \n    if (this.config.keyGenerator) {\n      return `rate_limit:${this.config.keyGenerator(request)}${suffix}`;\n    }\n    \n    // Default key generation\n    return `rate_limit:${ip}:${route}${suffix}`;\n  }\n  \n  // Get client IP address\n  private getClientIP(request: FastifyRequest): string {\n    const forwarded = request.headers['x-forwarded-for'] as string;\n    const realIP = request.headers['x-real-ip'] as string;\n    const cfConnectingIP = request.headers['cf-connecting-ip'] as string;\n    \n    return cfConnectingIP || realIP || (forwarded && forwarded.split(',')[0]) || request.ip;\n  }\n  \n  // Check if request should be rate limited\n  async checkRateLimit(request: FastifyRequest): Promise<{\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    totalHits: number;\n  }> {\n    const key = this.generateKey(request);\n    const now = Date.now();\n    const windowStart = now - this.config.windowMs;\n    \n    try {\n      // Use Redis sorted set to track requests in time window\n      const pipeline = this.redis.pipeline();\n      \n      // Remove old entries\n      pipeline.zremrangebyscore(key, 0, windowStart);\n      \n      // Add current request\n      pipeline.zadd(key, now, `${now}-${Math.random()}`);\n      \n      // Count requests in current window\n      pipeline.zcard(key);\n      \n      // Set expiration\n      pipeline.expire(key, Math.ceil(this.config.windowMs / 1000));\n      \n      const results = await pipeline.exec();\n      const totalHits = results?.[2]?.[1] as number || 0;\n      \n      const allowed = totalHits <= this.config.maxRequests;\n      const remaining = Math.max(0, this.config.maxRequests - totalHits);\n      const resetTime = now + this.config.windowMs;\n      \n      // Log rate limit info\n      addBreadcrumb({\n        category: 'rate_limit',\n        message: `Rate limit check: ${totalHits}/${this.config.maxRequests}`,\n        data: {\n          ip: this.getClientIP(request),\n          route: request.routerPath,\n          allowed,\n          remaining,\n        },\n      });\n      \n      return { allowed, remaining, resetTime, totalHits };\n    } catch (error) {\n      captureException(error);\n      // On Redis error, allow the request but log the issue\n      return {\n        allowed: true,\n        remaining: this.config.maxRequests,\n        resetTime: now + this.config.windowMs,\n        totalHits: 0,\n      };\n    }\n  }\n  \n  // Check for suspicious activity patterns\n  async checkSuspiciousActivity(request: FastifyRequest): Promise<{\n    isSuspicious: boolean;\n    pattern?: string;\n    banUntil?: number;\n  }> {\n    const ip = this.getClientIP(request);\n    const now = Date.now();\n    \n    try {\n      // Check if IP is already banned\n      const banKey = `ban:${ip}`;\n      const banUntil = await this.redis.get(banKey);\n      \n      if (banUntil && parseInt(banUntil) > now) {\n        return {\n          isSuspicious: true,\n          pattern: 'BANNED',\n          banUntil: parseInt(banUntil),\n        };\n      }\n      \n      // Check rapid requests pattern\n      const rapidKey = this.generateKey(request, ':rapid');\n      const rapidCount = await this.redis.zcard(rapidKey);\n      \n      if (rapidCount > SUSPICIOUS_PATTERNS.RAPID_REQUESTS.maxRequests) {\n        const banUntil = now + SUSPICIOUS_PATTERNS.RAPID_REQUESTS.banDuration;\n        await this.redis.setex(banKey, Math.ceil(SUSPICIOUS_PATTERNS.RAPID_REQUESTS.banDuration / 1000), banUntil.toString());\n        \n        return {\n          isSuspicious: true,\n          pattern: 'RAPID_REQUESTS',\n          banUntil,\n        };\n      }\n      \n      // Check failed authentication burst\n      if (request.url.includes('/auth/') || request.url.includes('/login')) {\n        const authFailKey = `auth_fail:${ip}`;\n        const authFailCount = await this.redis.zcard(authFailKey);\n        \n        if (authFailCount > SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.maxRequests) {\n          const banUntil = now + SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.banDuration;\n          await this.redis.setex(banKey, Math.ceil(SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.banDuration / 1000), banUntil.toString());\n          \n          return {\n            isSuspicious: true,\n            pattern: 'FAILED_AUTH_BURST',\n            banUntil,\n          };\n        }\n      }\n      \n      return { isSuspicious: false };\n    } catch (error) {\n      captureException(error);\n      return { isSuspicious: false };\n    }\n  }\n  \n  // Record failed authentication attempt\n  async recordFailedAuth(request: FastifyRequest): Promise<void> {\n    const ip = this.getClientIP(request);\n    const key = `auth_fail:${ip}`;\n    const now = Date.now();\n    const windowStart = now - SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.windowMs;\n    \n    try {\n      const pipeline = this.redis.pipeline();\n      pipeline.zremrangebyscore(key, 0, windowStart);\n      pipeline.zadd(key, now, `${now}-${Math.random()}`);\n      pipeline.expire(key, Math.ceil(SUSPICIOUS_PATTERNS.FAILED_AUTH_BURST.windowMs / 1000));\n      await pipeline.exec();\n    } catch (error) {\n      captureException(error);\n    }\n  }\n  \n  // Create middleware function\n  createMiddleware() {\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        // Check for suspicious activity first\n        const suspiciousCheck = await this.checkSuspiciousActivity(request);\n        \n        if (suspiciousCheck.isSuspicious) {\n          const banUntil = suspiciousCheck.banUntil || Date.now() + 60000;\n          const banDuration = Math.ceil((banUntil - Date.now()) / 1000);\n          \n          reply.code(429).headers({\n            'X-RateLimit-Limit': '0',\n            'X-RateLimit-Remaining': '0',\n            'X-RateLimit-Reset': banUntil.toString(),\n            'Retry-After': banDuration.toString(),\n          });\n          \n          // Log suspicious activity\n          addBreadcrumb({\n            category: 'security',\n            message: `Suspicious activity detected: ${suspiciousCheck.pattern}`,\n            data: {\n              ip: this.getClientIP(request),\n              pattern: suspiciousCheck.pattern,\n              banUntil,\n            },\n            level: 'warning',\n          });\n          \n          if (this.config.onLimitReached) {\n            this.config.onLimitReached(request, reply);\n          }\n          \n          return reply.send({\n            error: 'Too Many Requests',\n            message: `Suspicious activity detected. Access temporarily restricted.`,\n            retryAfter: banDuration,\n          });\n        }\n        \n        // Check rate limit\n        const rateLimitCheck = await this.checkRateLimit(request);\n        \n        // Set rate limit headers\n        reply.headers({\n          'X-RateLimit-Limit': this.config.maxRequests.toString(),\n          'X-RateLimit-Remaining': rateLimitCheck.remaining.toString(),\n          'X-RateLimit-Reset': rateLimitCheck.resetTime.toString(),\n        });\n        \n        if (!rateLimitCheck.allowed) {\n          const retryAfter = Math.ceil((rateLimitCheck.resetTime - Date.now()) / 1000);\n          \n          reply.code(429).header('Retry-After', retryAfter.toString());\n          \n          if (this.config.onLimitReached) {\n            this.config.onLimitReached(request, reply);\n          }\n          \n          return reply.send({\n            error: 'Too Many Requests',\n            message: `Rate limit exceeded. Try again in ${retryAfter} seconds.`,\n            retryAfter,\n          });\n        }\n      } catch (error) {\n        captureException(error);\n        // On error, allow the request to proceed\n      }\n    };\n  }\n}\n\n// Factory function to create rate limiters\nexport function createRateLimiter(redis: Redis, type: keyof typeof RATE_LIMITS, customConfig?: Partial<RateLimitConfig>): RateLimiter {\n  const baseConfig = RATE_LIMITS[type];\n  const config = { ...baseConfig, ...customConfig };\n  \n  return new RateLimiter(redis, config);\n}\n\n// Plugin to register rate limiting middleware\nexport async function rateLimitingPlugin(fastify: FastifyInstance) {\n  // Assume Redis is already registered\n  const redis = fastify.redis;\n  \n  if (!redis) {\n    throw new Error('Redis is required for rate limiting');\n  }\n  \n  // Create different rate limiters\n  const authLimiter = createRateLimiter(redis, 'AUTH');\n  const apiLimiter = createRateLimiter(redis, 'API');\n  const publicLimiter = createRateLimiter(redis, 'PUBLIC');\n  const utmLimiter = createRateLimiter(redis, 'UTM_CREATION');\n  const analyticsLimiter = createRateLimiter(redis, 'ANALYTICS');\n  const passwordResetLimiter = createRateLimiter(redis, 'PASSWORD_RESET');\n  const emailVerificationLimiter = createRateLimiter(redis, 'EMAIL_VERIFICATION');\n  \n  // Register middleware for different routes\n  \n  // Authentication routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.match(/\\/(auth|login|register|signin|signup)/)) {\n      await authLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Password reset routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.includes('/password/reset') || request.url.includes('/forgot-password')) {\n      await passwordResetLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Email verification routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.includes('/verify-email') || request.url.includes('/resend-verification')) {\n      await emailVerificationLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // UTM creation routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.method === 'POST' && request.url.includes('/utm')) {\n      await utmLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Analytics routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.includes('/analytics') || request.url.includes('/track')) {\n      await analyticsLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // API routes (general)\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.startsWith('/api/') && !request.url.includes('/public/')) {\n      await apiLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Public routes\n  fastify.addHook('preHandler', async (request, reply) => {\n    if (request.url.includes('/public/') || request.url === '/health' || request.url === '/') {\n      await publicLimiter.createMiddleware()(request, reply);\n    }\n  });\n  \n  // Utility functions\n  fastify.decorate('recordFailedAuth', async (request: FastifyRequest) => {\n    await authLimiter.recordFailedAuth(request);\n  });\n  \n  fastify.decorate('checkSuspiciousActivity', async (request: FastifyRequest) => {\n    return await authLimiter.checkSuspiciousActivity(request);\n  });\n}\n\n// Export rate limit configurations for reference\nexport { RATE_LIMITS, SUSPICIOUS_PATTERNS };\nexport default rateLimitingPlugin;"],"mappingsaAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AA5BJ,SAASE,aAAa,EAAEC,gBAAgB,QAAQ,cAAc;AAY9D;AACA,MAAMC,WAAW;AAAA;AAAA,CAAAJ,aAAA,GAAAK,CAAA,OAAG;EAClB;EACAC,IAAI,EAAE;IACJC,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BC,WAAW,EAAE,CAAC,CAAE;GACjB;EAED;EACAC,GAAG,EAAE;IACHF,QAAQ,EAAE,EAAE,GAAG,IAAI;IAAE;IACrBC,WAAW,EAAE,GAAG,CAAE;GACnB;EAED;EACAE,MAAM,EAAE;IACNH,QAAQ,EAAE,EAAE,GAAG,IAAI;IAAE;IACrBC,WAAW,EAAE,GAAG,CAAE;GACnB;EAED;EACAG,YAAY,EAAE;IACZJ,QAAQ,EAAE,EAAE,GAAG,IAAI;IAAE;IACrBC,WAAW,EAAE,EAAE,CAAE;GAClB;EAED;EACAI,SAAS,EAAE;IACTL,QAAQ,EAAE,EAAE,GAAG,IAAI;IAAE;IACrBC,WAAW,EAAE,IAAI,CAAE;GACpB;EAED;EACAK,cAAc,EAAE;IACdN,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BC,WAAW,EAAE,CAAC,CAAE;GACjB;EAED;EACAM,kBAAkB,EAAE;IAClBP,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BC,WAAW,EAAE,CAAC,CAAE;;CAEnB;AAED;AACA,MAAMO,mBAAmB;AAAA;AAAA,CAAAf,aAAA,GAAAK,CAAA,OAAG;EAC1BW,cAAc,EAAE;IACdT,QAAQ,EAAE,EAAE,GAAG,IAAI;IAAE;IACrBC,WAAW,EAAE,EAAE;IAAE;IACjBS,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAE;GAC9B;EAEDC,iBAAiB,EAAE;IACjBX,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IAAE;IACzBC,WAAW,EAAE,EAAE;IAAE;IACjBS,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAE;GAC9B;EAEDE,kBAAkB,EAAE;IAClBZ,QAAQ,EAAE,EAAE,GAAG,IAAI;IAAE;IACrBC,WAAW,EAAE,EAAE;IAAE;IACjBS,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAE;;CAErC;AAED,MAAMG,WAAW;EACPC,KAAK;EACLC,MAAM;EAEdC,YAAYF,KAAY,EAAEC,MAAuB;IAAA;IAAAtB,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IAC/C,IAAI,CAACgB,KAAK,GAAGA,KAAK;IAAC;IAAArB,aAAA,GAAAK,CAAA;IACnB,IAAI,CAACiB,MAAM,GAAGA,MAAM;EACtB;EAEA;EACQG,WAAWA,CAACC,OAAuB,EAAEC,MAAA;EAAA;EAAA,CAAA3B,aAAA,GAAA4B,CAAA,UAAiB,EAAE;IAAA;IAAA5B,aAAA,GAAAwB,CAAA;IAC9D,MAAMK,EAAE;IAAA;IAAA,CAAA7B,aAAA,GAAAK,CAAA,OAAG,IAAI,CAACyB,WAAW,CAACJ,OAAO,CAAC;IACpC,MAAMK,SAAS;IAAA;IAAA,CAAA/B,aAAA,GAAAK,CAAA;IAAG;IAAA,CAAAL,aAAA,GAAA4B,CAAA,UAAAF,OAAO,CAACM,OAAO,CAAC,YAAY,CAAC;IAAA;IAAA,CAAAhC,aAAA,GAAA4B,CAAA,UAAI,SAAS;IAC5D,MAAMK,KAAK;IAAA;IAAA,CAAAjC,aAAA,GAAAK,CAAA;IAAG;IAAA,CAAAL,aAAA,GAAA4B,CAAA,UAAAF,OAAO,CAACQ,UAAU;IAAA;IAAA,CAAAlC,aAAA,GAAA4B,CAAA,UAAIF,OAAO,CAACS,GAAG;IAAC;IAAAnC,aAAA,GAAAK,CAAA;IAEhD,IAAI,IAAI,CAACiB,MAAM,CAACc,YAAY,EAAE;MAAA;MAAApC,aAAA,GAAA4B,CAAA;MAAA5B,aAAA,GAAAK,CAAA;MAC5B,OAAO,cAAc,IAAI,CAACiB,MAAM,CAACc,YAAY,CAACV,OAAO,CAAC,GAAGC,MAAM,EAAE;IACnE,CAAC;IAAA;IAAA;MAAA3B,aAAA,GAAA4B,CAAA;IAAA;IAED;IAAA5B,aAAA,GAAAK,CAAA;IACA,OAAO,cAAcwB,EAAE,IAAII,KAAK,GAAGN,MAAM,EAAE;EAC7C;EAEA;EACQG,WAAWA,CAACJ,OAAuB;IAAA;IAAA1B,aAAA,GAAAwB,CAAA;IACzC,MAAMa,SAAS;IAAA;IAAA,CAAArC,aAAA,GAAAK,CAAA,QAAGqB,OAAO,CAACM,OAAO,CAAC,iBAAiB,CAAW;IAC9D,MAAMM,MAAM;IAAA;IAAA,CAAAtC,aAAA,GAAAK,CAAA,QAAGqB,OAAO,CAACM,OAAO,CAAC,WAAW,CAAW;IACrD,MAAMO,cAAc;IAAA;IAAA,CAAAvC,aAAA,GAAAK,CAAA,QAAGqB,OAAO,CAACM,OAAO,CAAC,kBAAkB,CAAW;IAAC;IAAAhC,aAAA,GAAAK,CAAA;IAErE,OAAO,2BAAAL,aAAA,GAAA4B,CAAA,UAAAW,cAAc;IAAA;IAAA,CAAAvC,aAAA,GAAA4B,CAAA,UAAIU,MAAM;IAAK;IAAA,CAAAtC,aAAA,GAAA4B,CAAA,UAAAS,SAAS;IAAA;IAAA,CAAArC,aAAA,GAAA4B,CAAA,UAAIS,SAAS,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAAA;IAAA,CAAAxC,aAAA,GAAA4B,CAAA,UAAIF,OAAO,CAACG,EAAE;EACzF;EAEA;EACA,MAAMY,cAAcA,CAACf,OAAuB;IAAA;IAAA1B,aAAA,GAAAwB,CAAA;IAM1C,MAAMkB,GAAG;IAAA;IAAA,CAAA1C,aAAA,GAAAK,CAAA,QAAG,IAAI,CAACoB,WAAW,CAACC,OAAO,CAAC;IACrC,MAAMiB,GAAG;IAAA;IAAA,CAAA3C,aAAA,GAAAK,CAAA,QAAGuC,IAAI,CAACD,GAAG,EAAE;IACtB,MAAME,WAAW;IAAA;IAAA,CAAA7C,aAAA,GAAAK,CAAA,QAAGsC,GAAG,GAAG,IAAI,CAACrB,MAAM,CAACf,QAAQ;IAAC;IAAAP,aAAA,GAAAK,CAAA;IAE/C,IAAI;MACF;MACA,MAAMyC,QAAQ;MAAA;MAAA,CAAA9C,aAAA,GAAAK,CAAA,QAAG,IAAI,CAACgB,KAAK,CAACyB,QAAQ,EAAE;MAEtC;MAAA;MAAA9C,aAAA,GAAAK,CAAA;MACAyC,QAAQ,CAACC,gBAAgB,CAACL,GAAG,EAAE,CAAC,EAAEG,WAAW,CAAC;MAE9C;MAAA;MAAA7C,aAAA,GAAAK,CAAA;MACAyC,QAAQ,CAACE,IAAI,CAACN,GAAG,EAAEC,GAAG,EAAE,GAAGA,GAAG,IAAIM,IAAI,CAACC,MAAM,EAAE,EAAE,CAAC;MAElD;MAAA;MAAAlD,aAAA,GAAAK,CAAA;MACAyC,QAAQ,CAACK,KAAK,CAACT,GAAG,CAAC;MAEnB;MAAA;MAAA1C,aAAA,GAAAK,CAAA;MACAyC,QAAQ,CAACM,MAAM,CAACV,GAAG,EAAEO,IAAI,CAACI,IAAI,CAAC,IAAI,CAAC/B,MAAM,CAACf,QAAQ,GAAG,IAAI,CAAC,CAAC;MAE5D,MAAM+C,OAAO;MAAA;MAAA,CAAAtD,aAAA,GAAAK,CAAA,QAAG,MAAMyC,QAAQ,CAACS,IAAI,EAAE;MACrC,MAAMC,SAAS;MAAA;MAAA,CAAAxD,aAAA,GAAAK,CAAA;MAAG;MAAA,CAAAL,aAAA,GAAA4B,CAAA,UAAA0B,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAW;MAAA;MAAA,CAAAtD,aAAA,GAAA4B,CAAA,UAAI,CAAC;MAElD,MAAM6B,OAAO;MAAA;MAAA,CAAAzD,aAAA,GAAAK,CAAA,QAAGmD,SAAS,IAAI,IAAI,CAAClC,MAAM,CAACd,WAAW;MACpD,MAAMkD,SAAS;MAAA;MAAA,CAAA1D,aAAA,GAAAK,CAAA,QAAG4C,IAAI,CAACU,GAAG,CAAC,CAAC,EAAE,IAAI,CAACrC,MAAM,CAACd,WAAW,GAAGgD,SAAS,CAAC;MAClE,MAAMI,SAAS;MAAA;MAAA,CAAA5D,aAAA,GAAAK,CAAA,QAAGsC,GAAG,GAAG,IAAI,CAACrB,MAAM,CAACf,QAAQ;MAE5C;MAAA;MAAAP,aAAA,GAAAK,CAAA;MACAH,aAAa,CAAC;QACZ2D,QAAQ,EAAE,YAAY;QACtBC,OAAO,EAAE,qBAAqBN,SAAS,IAAI,IAAI,CAAClC,MAAM,CAACd,WAAW,EAAE;QACpEuD,IAAI,EAAE;UACJlC,EAAE,EAAE,IAAI,CAACC,WAAW,CAACJ,OAAO,CAAC;UAC7BO,KAAK,EAAEP,OAAO,CAACQ,UAAU;UACzBuB,OAAO;UACPC;;OAEH,CAAC;MAAC;MAAA1D,aAAA,GAAAK,CAAA;MAEH,OAAO;QAAEoD,OAAO;QAAEC,SAAS;QAAEE,SAAS;QAAEJ;MAAS,CAAE;IACrD,CAAC,CAAC,OAAOQ,KAAK,EAAE;MAAA;MAAAhE,aAAA,GAAAK,CAAA;MACdF,gBAAgB,CAAC6D,KAAK,CAAC;MACvB;MAAA;MAAAhE,aAAA,GAAAK,CAAA;MACA,OAAO;QACLoD,OAAO,EAAE,IAAI;QACbC,SAAS,EAAE,IAAI,CAACpC,MAAM,CAACd,WAAW;QAClCoD,SAAS,EAAEjB,GAAG,GAAG,IAAI,CAACrB,MAAM,CAACf,QAAQ;QACrCiD,SAAS,EAAE;OACZ;IACH;EACF;EAEA;EACA,MAAMS,uBAAuBA,CAACvC,OAAuB;IAAA;IAAA1B,aAAA,GAAAwB,CAAA;IAKnD,MAAMK,EAAE;IAAA;IAAA,CAAA7B,aAAA,GAAAK,CAAA,QAAG,IAAI,CAACyB,WAAW,CAACJ,OAAO,CAAC;IACpC,MAAMiB,GAAG;IAAA;IAAA,CAAA3C,aAAA,GAAAK,CAAA,QAAGuC,IAAI,CAACD,GAAG,EAAE;IAAC;IAAA3C,aAAA,GAAAK,CAAA;IAEvB,IAAI;MACF;MACA,MAAM6D,MAAM;MAAA;MAAA,CAAAlE,aAAA,GAAAK,CAAA,QAAG,OAAOwB,EAAE,EAAE;MAC1B,MAAMsC,QAAQ;MAAA;MAAA,CAAAnE,aAAA,GAAAK,CAAA,QAAG,MAAM,IAAI,CAACgB,KAAK,CAAC+C,GAAG,CAACF,MAAM,CAAC;MAAC;MAAAlE,aAAA,GAAAK,CAAA;MAE9C;MAAI;MAAA,CAAAL,aAAA,GAAA4B,CAAA,UAAAuC,QAAQ;MAAA;MAAA,CAAAnE,aAAA,GAAA4B,CAAA,UAAIyC,QAAQ,CAACF,QAAQ,CAAC,GAAGxB,GAAG,GAAE;QAAA;QAAA3C,aAAA,GAAA4B,CAAA;QAAA5B,aAAA,GAAAK,CAAA;QACxC,OAAO;UACLiE,YAAY,EAAE,IAAI;UAClBC,OAAO,EAAE,QAAQ;UACjBJ,QAAQ,EAAEE,QAAQ,CAACF,QAAQ;SAC5B;MACH,CAAC;MAAA;MAAA;QAAAnE,aAAA,GAAA4B,CAAA;MAAA;MAED;MACA,MAAM4C,QAAQ;MAAA;MAAA,CAAAxE,aAAA,GAAAK,CAAA,QAAG,IAAI,CAACoB,WAAW,CAACC,OAAO,EAAE,QAAQ,CAAC;MACpD,MAAM+C,UAAU;MAAA;MAAA,CAAAzE,aAAA,GAAAK,CAAA,QAAG,MAAM,IAAI,CAACgB,KAAK,CAAC8B,KAAK,CAACqB,QAAQ,CAAC;MAAC;MAAAxE,aAAA,GAAAK,CAAA;MAEpD,IAAIoE,UAAU,GAAG1D,mBAAmB,CAACC,cAAc,CAACR,WAAW,EAAE;QAAA;QAAAR,aAAA,GAAA4B,CAAA;QAC/D,MAAMuC,QAAQ;QAAA;QAAA,CAAAnE,aAAA,GAAAK,CAAA,QAAGsC,GAAG,GAAG5B,mBAAmB,CAACC,cAAc,CAACC,WAAW;QAAC;QAAAjB,aAAA,GAAAK,CAAA;QACtE,MAAM,IAAI,CAACgB,KAAK,CAACqD,KAAK,CAACR,MAAM,EAAEjB,IAAI,CAACI,IAAI,CAACtC,mBAAmB,CAACC,cAAc,CAACC,WAAW,GAAG,IAAI,CAAC,EAAEkD,QAAQ,CAACQ,QAAQ,EAAE,CAAC;QAAC;QAAA3E,aAAA,GAAAK,CAAA;QAEtH,OAAO;UACLiE,YAAY,EAAE,IAAI;UAClBC,OAAO,EAAE,gBAAgB;UACzBJ;SACD;MACH,CAAC;MAAA;MAAA;QAAAnE,aAAA,GAAA4B,CAAA;MAAA;MAED;MAAA5B,aAAA,GAAAK,CAAA;MACA;MAAI;MAAA,CAAAL,aAAA,GAAA4B,CAAA,WAAAF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,QAAQ,CAAC;MAAA;MAAA,CAAA5E,aAAA,GAAA4B,CAAA,WAAIF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,QAAQ,CAAC,GAAE;QAAA;QAAA5E,aAAA,GAAA4B,CAAA;QACpE,MAAMiD,WAAW;QAAA;QAAA,CAAA7E,aAAA,GAAAK,CAAA,QAAG,aAAawB,EAAE,EAAE;QACrC,MAAMiD,aAAa;QAAA;QAAA,CAAA9E,aAAA,GAAAK,CAAA,QAAG,MAAM,IAAI,CAACgB,KAAK,CAAC8B,KAAK,CAAC0B,WAAW,CAAC;QAAC;QAAA7E,aAAA,GAAAK,CAAA;QAE1D,IAAIyE,aAAa,GAAG/D,mBAAmB,CAACG,iBAAiB,CAACV,WAAW,EAAE;UAAA;UAAAR,aAAA,GAAA4B,CAAA;UACrE,MAAMuC,QAAQ;UAAA;UAAA,CAAAnE,aAAA,GAAAK,CAAA,QAAGsC,GAAG,GAAG5B,mBAAmB,CAACG,iBAAiB,CAACD,WAAW;UAAC;UAAAjB,aAAA,GAAAK,CAAA;UACzE,MAAM,IAAI,CAACgB,KAAK,CAACqD,KAAK,CAACR,MAAM,EAAEjB,IAAI,CAACI,IAAI,CAACtC,mBAAmB,CAACG,iBAAiB,CAACD,WAAW,GAAG,IAAI,CAAC,EAAEkD,QAAQ,CAACQ,QAAQ,EAAE,CAAC;UAAC;UAAA3E,aAAA,GAAAK,CAAA;UAEzH,OAAO;YACLiE,YAAY,EAAE,IAAI;YAClBC,OAAO,EAAE,mBAAmB;YAC5BJ;WACD;QACH,CAAC;QAAA;QAAA;UAAAnE,aAAA,GAAA4B,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAA5B,aAAA,GAAA4B,CAAA;MAAA;MAAA5B,aAAA,GAAAK,CAAA;MAED,OAAO;QAAEiE,YAAY,EAAE;MAAK,CAAE;IAChC,CAAC,CAAC,OAAON,KAAK,EAAE;MAAA;MAAAhE,aAAA,GAAAK,CAAA;MACdF,gBAAgB,CAAC6D,KAAK,CAAC;MAAC;MAAAhE,aAAA,GAAAK,CAAA;MACxB,OAAO;QAAEiE,YAAY,EAAE;MAAK,CAAE;IAChC;EACF;EAEA;EACA,MAAMS,gBAAgBA,CAACrD,OAAuB;IAAA;IAAA1B,aAAA,GAAAwB,CAAA;IAC5C,MAAMK,EAAE;IAAA;IAAA,CAAA7B,aAAA,GAAAK,CAAA,QAAG,IAAI,CAACyB,WAAW,CAACJ,OAAO,CAAC;IACpC,MAAMgB,GAAG;IAAA;IAAA,CAAA1C,aAAA,GAAAK,CAAA,QAAG,aAAawB,EAAE,EAAE;IAC7B,MAAMc,GAAG;IAAA;IAAA,CAAA3C,aAAA,GAAAK,CAAA,QAAGuC,IAAI,CAACD,GAAG,EAAE;IACtB,MAAME,WAAW;IAAA;IAAA,CAAA7C,aAAA,GAAAK,CAAA,QAAGsC,GAAG,GAAG5B,mBAAmB,CAACG,iBAAiB,CAACX,QAAQ;IAAC;IAAAP,aAAA,GAAAK,CAAA;IAEzE,IAAI;MACF,MAAMyC,QAAQ;MAAA;MAAA,CAAA9C,aAAA,GAAAK,CAAA,QAAG,IAAI,CAACgB,KAAK,CAACyB,QAAQ,EAAE;MAAC;MAAA9C,aAAA,GAAAK,CAAA;MACvCyC,QAAQ,CAACC,gBAAgB,CAACL,GAAG,EAAE,CAAC,EAAEG,WAAW,CAAC;MAAC;MAAA7C,aAAA,GAAAK,CAAA;MAC/CyC,QAAQ,CAACE,IAAI,CAACN,GAAG,EAAEC,GAAG,EAAE,GAAGA,GAAG,IAAIM,IAAI,CAACC,MAAM,EAAE,EAAE,CAAC;MAAC;MAAAlD,aAAA,GAAAK,CAAA;MACnDyC,QAAQ,CAACM,MAAM,CAACV,GAAG,EAAEO,IAAI,CAACI,IAAI,CAACtC,mBAAmB,CAACG,iBAAiB,CAACX,QAAQ,GAAG,IAAI,CAAC,CAAC;MAAC;MAAAP,aAAA,GAAAK,CAAA;MACvF,MAAMyC,QAAQ,CAACS,IAAI,EAAE;IACvB,CAAC,CAAC,OAAOS,KAAK,EAAE;MAAA;MAAAhE,aAAA,GAAAK,CAAA;MACdF,gBAAgB,CAAC6D,KAAK,CAAC;IACzB;EACF;EAEA;EACAgB,gBAAgBA,CAAA;IAAA;IAAAhF,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IACd,OAAO,OAAOqB,OAAuB,EAAEuD,KAAmB,KAAI;MAAA;MAAAjF,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAK,CAAA;MAC5D,IAAI;QACF;QACA,MAAM6E,eAAe;QAAA;QAAA,CAAAlF,aAAA,GAAAK,CAAA,QAAG,MAAM,IAAI,CAAC4D,uBAAuB,CAACvC,OAAO,CAAC;QAAC;QAAA1B,aAAA,GAAAK,CAAA;QAEpE,IAAI6E,eAAe,CAACZ,YAAY,EAAE;UAAA;UAAAtE,aAAA,GAAA4B,CAAA;UAChC,MAAMuC,QAAQ;UAAA;UAAA,CAAAnE,aAAA,GAAAK,CAAA;UAAG;UAAA,CAAAL,aAAA,GAAA4B,CAAA,WAAAsD,eAAe,CAACf,QAAQ;UAAA;UAAA,CAAAnE,aAAA,GAAA4B,CAAA,WAAIgB,IAAI,CAACD,GAAG,EAAE,GAAG,KAAK;UAC/D,MAAM1B,WAAW;UAAA;UAAA,CAAAjB,aAAA,GAAAK,CAAA,QAAG4C,IAAI,CAACI,IAAI,CAAC,CAACc,QAAQ,GAAGvB,IAAI,CAACD,GAAG,EAAE,IAAI,IAAI,CAAC;UAAC;UAAA3C,aAAA,GAAAK,CAAA;UAE9D4E,KAAK,CAACE,IAAI,CAAC,GAAG,CAAC,CAACnD,OAAO,CAAC;YACtB,mBAAmB,EAAE,GAAG;YACxB,uBAAuB,EAAE,GAAG;YAC5B,mBAAmB,EAAEmC,QAAQ,CAACQ,QAAQ,EAAE;YACxC,aAAa,EAAE1D,WAAW,CAAC0D,QAAQ;WACpC,CAAC;UAEF;UAAA;UAAA3E,aAAA,GAAAK,CAAA;UACAH,aAAa,CAAC;YACZ2D,QAAQ,EAAE,UAAU;YACpBC,OAAO,EAAE,iCAAiCoB,eAAe,CAACX,OAAO,EAAE;YACnER,IAAI,EAAE;cACJlC,EAAE,EAAE,IAAI,CAACC,WAAW,CAACJ,OAAO,CAAC;cAC7B6C,OAAO,EAAEW,eAAe,CAACX,OAAO;cAChCJ;aACD;YACDiB,KAAK,EAAE;WACR,CAAC;UAAC;UAAApF,aAAA,GAAAK,CAAA;UAEH,IAAI,IAAI,CAACiB,MAAM,CAAC+D,cAAc,EAAE;YAAA;YAAArF,aAAA,GAAA4B,CAAA;YAAA5B,aAAA,GAAAK,CAAA;YAC9B,IAAI,CAACiB,MAAM,CAAC+D,cAAc,CAAC3D,OAAO,EAAEuD,KAAK,CAAC;UAC5C,CAAC;UAAA;UAAA;YAAAjF,aAAA,GAAA4B,CAAA;UAAA;UAAA5B,aAAA,GAAAK,CAAA;UAED,OAAO4E,KAAK,CAACK,IAAI,CAAC;YAChBtB,KAAK,EAAE,mBAAmB;YAC1BF,OAAO,EAAE,8DAA8D;YACvEyB,UAAU,EAAEtE;WACb,CAAC;QACJ,CAAC;QAAA;QAAA;UAAAjB,aAAA,GAAA4B,CAAA;QAAA;QAED;QACA,MAAM4D,cAAc;QAAA;QAAA,CAAAxF,aAAA,GAAAK,CAAA,QAAG,MAAM,IAAI,CAACoC,cAAc,CAACf,OAAO,CAAC;QAEzD;QAAA;QAAA1B,aAAA,GAAAK,CAAA;QACA4E,KAAK,CAACjD,OAAO,CAAC;UACZ,mBAAmB,EAAE,IAAI,CAACV,MAAM,CAACd,WAAW,CAACmE,QAAQ,EAAE;UACvD,uBAAuB,EAAEa,cAAc,CAAC9B,SAAS,CAACiB,QAAQ,EAAE;UAC5D,mBAAmB,EAAEa,cAAc,CAAC5B,SAAS,CAACe,QAAQ;SACvD,CAAC;QAAC;QAAA3E,aAAA,GAAAK,CAAA;QAEH,IAAI,CAACmF,cAAc,CAAC/B,OAAO,EAAE;UAAA;UAAAzD,aAAA,GAAA4B,CAAA;UAC3B,MAAM2D,UAAU;UAAA;UAAA,CAAAvF,aAAA,GAAAK,CAAA,QAAG4C,IAAI,CAACI,IAAI,CAAC,CAACmC,cAAc,CAAC5B,SAAS,GAAGhB,IAAI,CAACD,GAAG,EAAE,IAAI,IAAI,CAAC;UAAC;UAAA3C,aAAA,GAAAK,CAAA;UAE7E4E,KAAK,CAACE,IAAI,CAAC,GAAG,CAAC,CAACM,MAAM,CAAC,aAAa,EAAEF,UAAU,CAACZ,QAAQ,EAAE,CAAC;UAAC;UAAA3E,aAAA,GAAAK,CAAA;UAE7D,IAAI,IAAI,CAACiB,MAAM,CAAC+D,cAAc,EAAE;YAAA;YAAArF,aAAA,GAAA4B,CAAA;YAAA5B,aAAA,GAAAK,CAAA;YAC9B,IAAI,CAACiB,MAAM,CAAC+D,cAAc,CAAC3D,OAAO,EAAEuD,KAAK,CAAC;UAC5C,CAAC;UAAA;UAAA;YAAAjF,aAAA,GAAA4B,CAAA;UAAA;UAAA5B,aAAA,GAAAK,CAAA;UAED,OAAO4E,KAAK,CAACK,IAAI,CAAC;YAChBtB,KAAK,EAAE,mBAAmB;YAC1BF,OAAO,EAAE,qCAAqCyB,UAAU,WAAW;YACnEA;WACD,CAAC;QACJ,CAAC;QAAA;QAAA;UAAAvF,aAAA,GAAA4B,CAAA;QAAA;MACH,CAAC,CAAC,OAAOoC,KAAK,EAAE;QAAA;QAAAhE,aAAA,GAAAK,CAAA;QACdF,gBAAgB,CAAC6D,KAAK,CAAC;QACvB;MACF;IACF,CAAC;EACH;;AAGF;AACA,OAAM,SAAU0B,iBAAiBA,CAACrE,KAAY,EAAEsE,IAA8B,EAAEC,YAAuC;EAAA;EAAA5F,aAAA,GAAAwB,CAAA;EACrH,MAAMqE,UAAU;EAAA;EAAA,CAAA7F,aAAA,GAAAK,CAAA,QAAGD,WAAW,CAACuF,IAAI,CAAC;EACpC,MAAMrE,MAAM;EAAA;EAAA,CAAAtB,aAAA,GAAAK,CAAA,QAAG;IAAE,GAAGwF,UAAU;IAAE,GAAGD;EAAY,CAAE;EAAC;EAAA5F,aAAA,GAAAK,CAAA;EAElD,OAAO,IAAIe,WAAW,CAACC,KAAK,EAAEC,MAAM,CAAC;AACvC;AAEA;AACA,OAAO,eAAewE,kBAAkBA,CAACC,OAAwB;EAAA;EAAA/F,aAAA,GAAAwB,CAAA;EAC/D;EACA,MAAMH,KAAK;EAAA;EAAA,CAAArB,aAAA,GAAAK,CAAA,QAAG0F,OAAO,CAAC1E,KAAK;EAAC;EAAArB,aAAA,GAAAK,CAAA;EAE5B,IAAI,CAACgB,KAAK,EAAE;IAAA;IAAArB,aAAA,GAAA4B,CAAA;IAAA5B,aAAA,GAAAK,CAAA;IACV,MAAM,IAAI2F,KAAK,CAAC,qCAAqC,CAAC;EACxD,CAAC;EAAA;EAAA;IAAAhG,aAAA,GAAA4B,CAAA;EAAA;EAED;EACA,MAAMqE,WAAW;EAAA;EAAA,CAAAjG,aAAA,GAAAK,CAAA,QAAGqF,iBAAiB,CAACrE,KAAK,EAAE,MAAM,CAAC;EACpD,MAAM6E,UAAU;EAAA;EAAA,CAAAlG,aAAA,GAAAK,CAAA,QAAGqF,iBAAiB,CAACrE,KAAK,EAAE,KAAK,CAAC;EAClD,MAAM8E,aAAa;EAAA;EAAA,CAAAnG,aAAA,GAAAK,CAAA,QAAGqF,iBAAiB,CAACrE,KAAK,EAAE,QAAQ,CAAC;EACxD,MAAM+E,UAAU;EAAA;EAAA,CAAApG,aAAA,GAAAK,CAAA,QAAGqF,iBAAiB,CAACrE,KAAK,EAAE,cAAc,CAAC;EAC3D,MAAMgF,gBAAgB;EAAA;EAAA,CAAArG,aAAA,GAAAK,CAAA,QAAGqF,iBAAiB,CAACrE,KAAK,EAAE,WAAW,CAAC;EAC9D,MAAMiF,oBAAoB;EAAA;EAAA,CAAAtG,aAAA,GAAAK,CAAA,QAAGqF,iBAAiB,CAACrE,KAAK,EAAE,gBAAgB,CAAC;EACvE,MAAMkF,wBAAwB;EAAA;EAAA,CAAAvG,aAAA,GAAAK,CAAA,QAAGqF,iBAAiB,CAACrE,KAAK,EAAE,oBAAoB,CAAC;EAE/E;EAEA;EAAA;EAAArB,aAAA,GAAAK,CAAA;EACA0F,OAAO,CAACS,OAAO,CAAC,YAAY,EAAE,OAAO9E,OAAO,EAAEuD,KAAK,KAAI;IAAA;IAAAjF,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IACrD,IAAIqB,OAAO,CAACS,GAAG,CAACsE,KAAK,CAAC,uCAAuC,CAAC,EAAE;MAAA;MAAAzG,aAAA,GAAA4B,CAAA;MAAA5B,aAAA,GAAAK,CAAA;MAC9D,MAAM4F,WAAW,CAACjB,gBAAgB,EAAE,CAACtD,OAAO,EAAEuD,KAAK,CAAC;IACtD,CAAC;IAAA;IAAA;MAAAjF,aAAA,GAAA4B,CAAA;IAAA;EACH,CAAC,CAAC;EAEF;EAAA;EAAA5B,aAAA,GAAAK,CAAA;EACA0F,OAAO,CAACS,OAAO,CAAC,YAAY,EAAE,OAAO9E,OAAO,EAAEuD,KAAK,KAAI;IAAA;IAAAjF,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IACrD;IAAI;IAAA,CAAAL,aAAA,GAAA4B,CAAA,WAAAF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,iBAAiB,CAAC;IAAA;IAAA,CAAA5E,aAAA,GAAA4B,CAAA,WAAIF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,kBAAkB,CAAC,GAAE;MAAA;MAAA5E,aAAA,GAAA4B,CAAA;MAAA5B,aAAA,GAAAK,CAAA;MACvF,MAAMiG,oBAAoB,CAACtB,gBAAgB,EAAE,CAACtD,OAAO,EAAEuD,KAAK,CAAC;IAC/D,CAAC;IAAA;IAAA;MAAAjF,aAAA,GAAA4B,CAAA;IAAA;EACH,CAAC,CAAC;EAEF;EAAA;EAAA5B,aAAA,GAAAK,CAAA;EACA0F,OAAO,CAACS,OAAO,CAAC,YAAY,EAAE,OAAO9E,OAAO,EAAEuD,KAAK,KAAI;IAAA;IAAAjF,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IACrD;IAAI;IAAA,CAAAL,aAAA,GAAA4B,CAAA,WAAAF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,eAAe,CAAC;IAAA;IAAA,CAAA5E,aAAA,GAAA4B,CAAA,WAAIF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,sBAAsB,CAAC,GAAE;MAAA;MAAA5E,aAAA,GAAA4B,CAAA;MAAA5B,aAAA,GAAAK,CAAA;MACzF,MAAMkG,wBAAwB,CAACvB,gBAAgB,EAAE,CAACtD,OAAO,EAAEuD,KAAK,CAAC;IACnE,CAAC;IAAA;IAAA;MAAAjF,aAAA,GAAA4B,CAAA;IAAA;EACH,CAAC,CAAC;EAEF;EAAA;EAAA5B,aAAA,GAAAK,CAAA;EACA0F,OAAO,CAACS,OAAO,CAAC,YAAY,EAAE,OAAO9E,OAAO,EAAEuD,KAAK,KAAI;IAAA;IAAAjF,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IACrD;IAAI;IAAA,CAAAL,aAAA,GAAA4B,CAAA,WAAAF,OAAO,CAACgF,MAAM,KAAK,MAAM;IAAA;IAAA,CAAA1G,aAAA,GAAA4B,CAAA,WAAIF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,MAAM,CAAC,GAAE;MAAA;MAAA5E,aAAA,GAAA4B,CAAA;MAAA5B,aAAA,GAAAK,CAAA;MAC7D,MAAM+F,UAAU,CAACpB,gBAAgB,EAAE,CAACtD,OAAO,EAAEuD,KAAK,CAAC;IACrD,CAAC;IAAA;IAAA;MAAAjF,aAAA,GAAA4B,CAAA;IAAA;EACH,CAAC,CAAC;EAEF;EAAA;EAAA5B,aAAA,GAAAK,CAAA;EACA0F,OAAO,CAACS,OAAO,CAAC,YAAY,EAAE,OAAO9E,OAAO,EAAEuD,KAAK,KAAI;IAAA;IAAAjF,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IACrD;IAAI;IAAA,CAAAL,aAAA,GAAA4B,CAAA,WAAAF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,YAAY,CAAC;IAAA;IAAA,CAAA5E,aAAA,GAAA4B,CAAA,WAAIF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,QAAQ,CAAC,GAAE;MAAA;MAAA5E,aAAA,GAAA4B,CAAA;MAAA5B,aAAA,GAAAK,CAAA;MACxE,MAAMgG,gBAAgB,CAACrB,gBAAgB,EAAE,CAACtD,OAAO,EAAEuD,KAAK,CAAC;IAC3D,CAAC;IAAA;IAAA;MAAAjF,aAAA,GAAA4B,CAAA;IAAA;EACH,CAAC,CAAC;EAEF;EAAA;EAAA5B,aAAA,GAAAK,CAAA;EACA0F,OAAO,CAACS,OAAO,CAAC,YAAY,EAAE,OAAO9E,OAAO,EAAEuD,KAAK,KAAI;IAAA;IAAAjF,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IACrD;IAAI;IAAA,CAAAL,aAAA,GAAA4B,CAAA,WAAAF,OAAO,CAACS,GAAG,CAACwE,UAAU,CAAC,OAAO,CAAC;IAAA;IAAA,CAAA3G,aAAA,GAAA4B,CAAA,WAAI,CAACF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,UAAU,CAAC,GAAE;MAAA;MAAA5E,aAAA,GAAA4B,CAAA;MAAA5B,aAAA,GAAAK,CAAA;MACxE,MAAM6F,UAAU,CAAClB,gBAAgB,EAAE,CAACtD,OAAO,EAAEuD,KAAK,CAAC;IACrD,CAAC;IAAA;IAAA;MAAAjF,aAAA,GAAA4B,CAAA;IAAA;EACH,CAAC,CAAC;EAEF;EAAA;EAAA5B,aAAA,GAAAK,CAAA;EACA0F,OAAO,CAACS,OAAO,CAAC,YAAY,EAAE,OAAO9E,OAAO,EAAEuD,KAAK,KAAI;IAAA;IAAAjF,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IACrD;IAAI;IAAA,CAAAL,aAAA,GAAA4B,CAAA,WAAAF,OAAO,CAACS,GAAG,CAACyC,QAAQ,CAAC,UAAU,CAAC;IAAA;IAAA,CAAA5E,aAAA,GAAA4B,CAAA,WAAIF,OAAO,CAACS,GAAG,KAAK,SAAS;IAAA;IAAA,CAAAnC,aAAA,GAAA4B,CAAA,WAAIF,OAAO,CAACS,GAAG,KAAK,GAAG,GAAE;MAAA;MAAAnC,aAAA,GAAA4B,CAAA;MAAA5B,aAAA,GAAAK,CAAA;MACxF,MAAM8F,aAAa,CAACnB,gBAAgB,EAAE,CAACtD,OAAO,EAAEuD,KAAK,CAAC;IACxD,CAAC;IAAA;IAAA;MAAAjF,aAAA,GAAA4B,CAAA;IAAA;EACH,CAAC,CAAC;EAEF;EAAA;EAAA5B,aAAA,GAAAK,CAAA;EACA0F,OAAO,CAACa,QAAQ,CAAC,kBAAkB,EAAE,MAAOlF,OAAuB,IAAI;IAAA;IAAA1B,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IACrE,MAAM4F,WAAW,CAAClB,gBAAgB,CAACrD,OAAO,CAAC;EAC7C,CAAC,CAAC;EAAC;EAAA1B,aAAA,GAAAK,CAAA;EAEH0F,OAAO,CAACa,QAAQ,CAAC,yBAAyB,EAAE,MAAOlF,OAAuB,IAAI;IAAA;IAAA1B,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAK,CAAA;IAC5E,OAAO,MAAM4F,WAAW,CAAChC,uBAAuB,CAACvC,OAAO,CAAC;EAC3D,CAAC,CAAC;AACJ;AAEA;AACA,SAAStB,WAAW,EAAEW,mBAAmB;AACzC,eAAe+E,kBAAkB","ignoreList":[]}