{"version":3,"names":["cov_1kcq82k1ge","actualCoverage","logger","s","tenantMiddleware","request","reply","f","tenantSlug","host","b","headers","subdomain","extractSubdomain","debug","process","env","NODE_ENV","query","tenant","code","send","error","message","organization","server","db","findUnique","where","slug","isActive","select","id","name","planType","warn","schema","setTenantSchema","hostWithoutPort","split","parts","includes","length","$executeRawUnsafe","validateTenantAccess","userOrganizationId","tenantId","generateCacheKey","key","generateQueueName","queueName"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\middleware\\tenant.middleware.ts"],"sourcesContent":["import { FastifyRequest, FastifyReply } from 'fastify'\nimport { logger } from '../utils/logger'\n\nexport interface TenantInfo {\n  id: string\n  slug: string\n  name: string\n  planType: string\n  isActive: boolean\n  schema: string\n}\n\ndeclare module 'fastify' {\n  interface FastifyRequest {\n    tenant?: TenantInfo\n  }\n}\n\n/**\n * Middleware para identificar e configurar o tenant atual\n */\nexport const tenantMiddleware = async (\n  request: FastifyRequest,\n  reply: FastifyReply\n) => {\n  try {\n    let tenantSlug: string | null = null\n\n    // 1. Extrair tenant do subdomain (empresa.utmify.com)\n    const host = request.headers.host || ''\n    const subdomain = extractSubdomain(host)\n    \n    if (subdomain && subdomain !== 'www' && subdomain !== 'api') {\n      tenantSlug = subdomain\n      logger.debug(`Tenant extraído do subdomain: ${tenantSlug}`)\n    }\n\n    // 2. Fallback: extrair do header X-Tenant-Slug\n    if (!tenantSlug) {\n      tenantSlug = request.headers['x-tenant-slug'] as string || null\n      if (tenantSlug) {\n        logger.debug(`Tenant extraído do header: ${tenantSlug}`)\n      }\n    }\n\n    // 3. Fallback: extrair do query parameter (para desenvolvimento)\n    if (!tenantSlug && process.env.NODE_ENV === 'development') {\n      tenantSlug = (request.query as any)?.tenant || null\n      if (tenantSlug) {\n        logger.debug(`Tenant extraído do query param: ${tenantSlug}`)\n      }\n    }\n\n    // 4. Para desenvolvimento, usar tenant padrão se não especificado\n    if (!tenantSlug && process.env.NODE_ENV === 'development') {\n      tenantSlug = 'demo'\n      logger.debug('Usando tenant padrão para desenvolvimento: demo')\n    }\n\n    if (!tenantSlug) {\n      return reply.code(400).send({\n        error: 'Bad Request',\n        message: 'Tenant não identificado. Verifique o subdomain ou header X-Tenant-Slug.'\n      })\n    }\n\n    // 5. Buscar organização no banco de dados\n    const organization = await request.server.db.organization.findUnique({\n      where: { \n        slug: tenantSlug,\n        isActive: true \n      },\n      select: {\n        id: true,\n        slug: true,\n        name: true,\n        planType: true,\n        isActive: true\n      }\n    })\n\n    if (!organization) {\n      logger.warn(`Organização não encontrada ou inativa: ${tenantSlug}`)\n      return reply.code(404).send({\n        error: 'Not Found',\n        message: `Organização '${tenantSlug}' não encontrada ou inativa.`\n      })\n    }\n\n    // 6. Adicionar informações do tenant ao request\n    request.tenant = {\n      id: organization.id,\n      slug: organization.slug,\n      name: organization.name,\n      planType: organization.planType,\n      isActive: organization.isActive,\n      schema: `tenant_${organization.slug}`\n    }\n\n    // 7. Setar schema PostgreSQL para isolamento\n    await setTenantSchema(request.tenant.schema, request.server.db)\n\n    logger.debug(`Tenant configurado: ${organization.name} (${organization.slug})`)\n    \n  } catch (error) {\n    logger.error(`Erro no middleware de tenant: ${error.message}`, error)\n    \n    return reply.code(500).send({\n      error: 'Internal Server Error',\n      message: 'Erro interno ao processar tenant.'\n    })\n  }\n}\n\n/**\n * Extrai o subdomain do host\n * Exemplo: empresa.utmify.com -> empresa\n */\nfunction extractSubdomain(host: string): string | null {\n  if (!host) return null\n\n  // Remove porta se existir\n  const hostWithoutPort = host.split(':')[0]\n  const parts = hostWithoutPort.split('.')\n\n  // Para desenvolvimento local (localhost:3000)\n  if (hostWithoutPort.includes('localhost') || hostWithoutPort.includes('127.0.0.1')) {\n    return null\n  }\n\n  // Para domínios como empresa.utmify.com\n  if (parts.length >= 3) {\n    return parts[0]\n  }\n\n  return null\n}\n\n/**\n * Configura o schema PostgreSQL para o tenant atual\n */\nasync function setTenantSchema(schema: string, db: any): Promise<void> {\n  try {\n    // Criar schema se não existir\n    await db.$executeRawUnsafe(`CREATE SCHEMA IF NOT EXISTS \"${schema}\"`)\n    \n    // Setar search_path para o schema do tenant\n    await db.$executeRawUnsafe(`SET search_path TO \"${schema}\", public`)\n    \n    logger.debug(`Schema configurado: ${schema}`)\n  } catch (error) {\n    logger.error(`Erro ao configurar schema ${schema}: ${error.message}`)\n    throw error\n  }\n}\n\n/**\n * Valida se o usuário tem acesso ao tenant atual\n */\nexport function validateTenantAccess(userOrganizationId: string, tenantId: string): boolean {\n  return userOrganizationId === tenantId\n}\n\n/**\n * Gera chave de cache com prefixo do tenant\n */\nexport function generateCacheKey(tenantSlug: string, key: string): string {\n  return `tenant:${tenantSlug}:${key}`\n}\n\n/**\n * Gera nome da fila com isolamento por tenant\n */\nexport function generateQueueName(tenantSlug: string, queueName: string): string {\n  return `${tenantSlug}_${queueName}`\n}"],"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","ignoreList":[]}