{"version":3,"names":["cov_2h48fpenaj","actualCoverage","Injectable","Logger","BadRequestException","ConfigService","PrismaService","CryptoService","Twilio","Queue","InjectQueue","WhatsAppService","s","WhatsAppService_1","configService","prisma","cryptoService","whatsappQueue","logger","name","twilioClient","dailyLimit","constructor","f","initializeTwilio","accountSid","get","authToken","b","warn","log","sendMessage","organizationId","message","canSend","checkDailyLimit","job","add","attempts","backoff","type","delay","id","success","messageId","toString","error","processMessage","Error","fromNumber","twilioMessage","templateName","messages","create","from","to","contentSid","contentVariables","JSON","stringify","templateParams","messageData","body","mediaUrl","logMessage","twilioSid","sid","status","direction","sendBroadcast","recipients","errors","queued","recipient","result","push","length","getTemplates","templates","whatsAppTemplate","findMany","where","orderBy","createdAt","map","template","category","language","components","parse","createTemplate","data","getConversations","limit","offset","conversations","whatsAppMessage","groupBy","by","_count","_max","take","skip","conversationsWithMessages","Promise","all","conv","latestMessage","findFirst","phoneNumber","messageCount","lastMessageAt","lastMessage","lastMessageDirection","getConversationMessages","handleWebhook","webhookData","From","To","Body","MessageSid","SmsStatus","replace","toNumber","organization","findOrganizationByWhatsAppNumber","processAutomatedResponse","getMetrics","today","Date","setHours","tomorrow","setDate","getDate","totalMessages","sentToday","receivedToday","failedToday","count","gte","lt","sentMessages","receivedMessages","failedMessages","remainingQuota","Math","max","integration","platform","isActive","metadata","path","equals","include","messageBody","toLowerCase","trim","sendDailyReport","sendHelpMessage","yesterday","reportMessage","toLocaleDateString","helpMessage","__decorate","__param","_a","Object","_b","_c","_d"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\whatsapp.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../database/prisma.service';\nimport { CryptoService } from './crypto.service';\nimport { Twilio } from 'twilio';\nimport { Queue } from 'bull';\nimport { InjectQueue } from '@nestjs/bull';\n\nexport interface WhatsAppMessage {\n  to: string;\n  body?: string;\n  mediaUrl?: string;\n  templateName?: string;\n  templateParams?: Record<string, string>;\n}\n\nexport interface WhatsAppTemplate {\n  name: string;\n  category: 'MARKETING' | 'UTILITY' | 'AUTHENTICATION';\n  language: string;\n  components: {\n    type: 'HEADER' | 'BODY' | 'FOOTER' | 'BUTTONS';\n    text?: string;\n    parameters?: Array<{ type: string; text: string }>;\n  }[];\n}\n\nexport interface ConversationMetrics {\n  totalMessages: number;\n  sentMessages: number;\n  receivedMessages: number;\n  failedMessages: number;\n  dailyLimit: number;\n  remainingQuota: number;\n}\n\n@Injectable()\nexport class WhatsAppService {\n  private readonly logger = new Logger(WhatsAppService.name);\n  private twilioClient: Twilio;\n  private readonly dailyLimit = 1000;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly prisma: PrismaService,\n    private readonly cryptoService: CryptoService,\n    @InjectQueue('whatsapp') private whatsappQueue: Queue,\n  ) {\n    this.initializeTwilio();\n  }\n\n  private initializeTwilio() {\n    const accountSid = this.configService.get<string>('TWILIO_ACCOUNT_SID');\n    const authToken = this.configService.get<string>('TWILIO_AUTH_TOKEN');\n\n    if (!accountSid || !authToken) {\n      this.logger.warn('Twilio credentials not configured');\n      return;\n    }\n\n    this.twilioClient = new Twilio(accountSid, authToken);\n    this.logger.log('Twilio WhatsApp client initialized');\n  }\n\n  /**\n   * Send WhatsApp message\n   */\n  async sendMessage(\n    organizationId: string,\n    message: WhatsAppMessage,\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    try {\n      // Check daily limit\n      const canSend = await this.checkDailyLimit(organizationId);\n      if (!canSend) {\n        throw new BadRequestException('Daily message limit exceeded (1000 messages)');\n      }\n\n      // Add to queue for rate limiting\n      const job = await this.whatsappQueue.add('send-message', {\n        organizationId,\n        message,\n      }, {\n        attempts: 3,\n        backoff: {\n          type: 'exponential',\n          delay: 2000,\n        },\n      });\n\n      this.logger.log(`Message queued for sending: ${job.id}`);\n      return { success: true, messageId: job.id.toString() };\n    } catch (error) {\n      this.logger.error('Error sending WhatsApp message:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Process message from queue\n   */\n  async processMessage(\n    organizationId: string,\n    message: WhatsAppMessage,\n  ): Promise<void> {\n    try {\n      if (!this.twilioClient) {\n        throw new Error('Twilio client not initialized');\n      }\n\n      const fromNumber = this.configService.get<string>('TWILIO_WHATSAPP_NUMBER');\n      if (!fromNumber) {\n        throw new Error('Twilio WhatsApp number not configured');\n      }\n\n      let twilioMessage;\n\n      if (message.templateName) {\n        // Send template message\n        twilioMessage = await this.twilioClient.messages.create({\n          from: `whatsapp:${fromNumber}`,\n          to: `whatsapp:${message.to}`,\n          contentSid: message.templateName,\n          contentVariables: JSON.stringify(message.templateParams || {}),\n        });\n      } else {\n        // Send regular message\n        const messageData: any = {\n          from: `whatsapp:${fromNumber}`,\n          to: `whatsapp:${message.to}`,\n        };\n\n        if (message.body) {\n          messageData.body = message.body;\n        }\n\n        if (message.mediaUrl) {\n          messageData.mediaUrl = [message.mediaUrl];\n        }\n\n        twilioMessage = await this.twilioClient.messages.create(messageData);\n      }\n\n      // Log message in database\n      await this.logMessage(organizationId, {\n        twilioSid: twilioMessage.sid,\n        to: message.to,\n        body: message.body,\n        templateName: message.templateName,\n        status: 'sent',\n        direction: 'outbound',\n      });\n\n      this.logger.log(`WhatsApp message sent successfully: ${twilioMessage.sid}`);\n    } catch (error) {\n      this.logger.error('Error processing WhatsApp message:', error);\n      \n      // Log failed message\n      await this.logMessage(organizationId, {\n        to: message.to,\n        body: message.body,\n        templateName: message.templateName,\n        status: 'failed',\n        direction: 'outbound',\n        error: error.message,\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Send broadcast message to multiple recipients\n   */\n  async sendBroadcast(\n    organizationId: string,\n    recipients: string[],\n    message: Omit<WhatsAppMessage, 'to'>,\n  ): Promise<{ success: boolean; queued: number; errors: string[] }> {\n    const errors: string[] = [];\n    let queued = 0;\n\n    for (const recipient of recipients) {\n      try {\n        const result = await this.sendMessage(organizationId, {\n          ...message,\n          to: recipient,\n        });\n\n        if (result.success) {\n          queued++;\n        } else {\n          errors.push(`${recipient}: ${result.error}`);\n        }\n      } catch (error) {\n        errors.push(`${recipient}: ${error.message}`);\n      }\n    }\n\n    return {\n      success: errors.length === 0,\n      queued,\n      errors,\n    };\n  }\n\n  /**\n   * Get message templates\n   */\n  async getTemplates(organizationId: string): Promise<WhatsAppTemplate[]> {\n    try {\n      // Get templates from database\n      const templates = await this.prisma.whatsAppTemplate.findMany({\n        where: { organizationId },\n        orderBy: { createdAt: 'desc' },\n      });\n\n      return templates.map(template => ({\n        name: template.name,\n        category: template.category as any,\n        language: template.language,\n        components: JSON.parse(template.components),\n      }));\n    } catch (error) {\n      this.logger.error('Error fetching WhatsApp templates:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Create message template\n   */\n  async createTemplate(\n    organizationId: string,\n    template: WhatsAppTemplate,\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      await this.prisma.whatsAppTemplate.create({\n        data: {\n          organizationId,\n          name: template.name,\n          category: template.category,\n          language: template.language,\n          components: JSON.stringify(template.components),\n        },\n      });\n\n      this.logger.log(`WhatsApp template created: ${template.name}`);\n      return { success: true };\n    } catch (error) {\n      this.logger.error('Error creating WhatsApp template:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Get conversations\n   */\n  async getConversations(\n    organizationId: string,\n    limit = 50,\n    offset = 0,\n  ): Promise<any[]> {\n    try {\n      const conversations = await this.prisma.whatsAppMessage.groupBy({\n        by: ['phoneNumber'],\n        where: { organizationId },\n        _count: { id: true },\n        _max: { createdAt: true },\n        orderBy: { _max: { createdAt: 'desc' } },\n        take: limit,\n        skip: offset,\n      });\n\n      // Get latest message for each conversation\n      const conversationsWithMessages = await Promise.all(\n        conversations.map(async (conv) => {\n          const latestMessage = await this.prisma.whatsAppMessage.findFirst({\n            where: {\n              organizationId,\n              phoneNumber: conv.phoneNumber,\n            },\n            orderBy: { createdAt: 'desc' },\n          });\n\n          return {\n            phoneNumber: conv.phoneNumber,\n            messageCount: conv._count.id,\n            lastMessageAt: conv._max.createdAt,\n            lastMessage: latestMessage?.body || latestMessage?.templateName,\n            lastMessageDirection: latestMessage?.direction,\n          };\n        }),\n      );\n\n      return conversationsWithMessages;\n    } catch (error) {\n      this.logger.error('Error fetching conversations:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get conversation messages\n   */\n  async getConversationMessages(\n    organizationId: string,\n    phoneNumber: string,\n    limit = 50,\n    offset = 0,\n  ): Promise<any[]> {\n    try {\n      const messages = await this.prisma.whatsAppMessage.findMany({\n        where: {\n          organizationId,\n          phoneNumber,\n        },\n        orderBy: { createdAt: 'desc' },\n        take: limit,\n        skip: offset,\n      });\n\n      return messages;\n    } catch (error) {\n      this.logger.error('Error fetching conversation messages:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Handle incoming webhook\n   */\n  async handleWebhook(webhookData: any): Promise<void> {\n    try {\n      const { From, To, Body, MessageSid, SmsStatus } = webhookData;\n      \n      if (!From || !MessageSid) {\n        this.logger.warn('Invalid webhook data received');\n        return;\n      }\n\n      // Extract phone number (remove whatsapp: prefix)\n      const phoneNumber = From.replace('whatsapp:', '');\n      const toNumber = To?.replace('whatsapp:', '');\n\n      // Find organization by WhatsApp number\n      const organization = await this.findOrganizationByWhatsAppNumber(toNumber);\n      if (!organization) {\n        this.logger.warn(`No organization found for WhatsApp number: ${toNumber}`);\n        return;\n      }\n\n      // Log incoming message\n      await this.logMessage(organization.id, {\n        twilioSid: MessageSid,\n        phoneNumber,\n        body: Body,\n        status: SmsStatus || 'received',\n        direction: 'inbound',\n      });\n\n      // Process automated responses\n      await this.processAutomatedResponse(organization.id, phoneNumber, Body);\n\n      this.logger.log(`Webhook processed for message: ${MessageSid}`);\n    } catch (error) {\n      this.logger.error('Error processing WhatsApp webhook:', error);\n    }\n  }\n\n  /**\n   * Get conversation metrics\n   */\n  async getMetrics(organizationId: string): Promise<ConversationMetrics> {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n\n      const [totalMessages, sentToday, receivedToday, failedToday] = await Promise.all([\n        this.prisma.whatsAppMessage.count({\n          where: { organizationId },\n        }),\n        this.prisma.whatsAppMessage.count({\n          where: {\n            organizationId,\n            direction: 'outbound',\n            status: 'sent',\n            createdAt: {\n              gte: today,\n              lt: tomorrow,\n            },\n          },\n        }),\n        this.prisma.whatsAppMessage.count({\n          where: {\n            organizationId,\n            direction: 'inbound',\n            createdAt: {\n              gte: today,\n              lt: tomorrow,\n            },\n          },\n        }),\n        this.prisma.whatsAppMessage.count({\n          where: {\n            organizationId,\n            direction: 'outbound',\n            status: 'failed',\n            createdAt: {\n              gte: today,\n              lt: tomorrow,\n            },\n          },\n        }),\n      ]);\n\n      return {\n        totalMessages,\n        sentMessages: sentToday,\n        receivedMessages: receivedToday,\n        failedMessages: failedToday,\n        dailyLimit: this.dailyLimit,\n        remainingQuota: Math.max(0, this.dailyLimit - sentToday),\n      };\n    } catch (error) {\n      this.logger.error('Error fetching WhatsApp metrics:', error);\n      return {\n        totalMessages: 0,\n        sentMessages: 0,\n        receivedMessages: 0,\n        failedMessages: 0,\n        dailyLimit: this.dailyLimit,\n        remainingQuota: this.dailyLimit,\n      };\n    }\n  }\n\n  /**\n   * Check daily sending limit\n   */\n  private async checkDailyLimit(organizationId: string): Promise<boolean> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const sentToday = await this.prisma.whatsAppMessage.count({\n      where: {\n        organizationId,\n        direction: 'outbound',\n        status: 'sent',\n        createdAt: {\n          gte: today,\n          lt: tomorrow,\n        },\n      },\n    });\n\n    return sentToday < this.dailyLimit;\n  }\n\n  /**\n   * Log message in database\n   */\n  private async logMessage(\n    organizationId: string,\n    messageData: {\n      twilioSid?: string;\n      phoneNumber?: string;\n      to?: string;\n      body?: string;\n      templateName?: string;\n      status: string;\n      direction: 'inbound' | 'outbound';\n      error?: string;\n    },\n  ): Promise<void> {\n    try {\n      await this.prisma.whatsAppMessage.create({\n        data: {\n          organizationId,\n          twilioSid: messageData.twilioSid,\n          phoneNumber: messageData.phoneNumber || messageData.to,\n          body: messageData.body,\n          templateName: messageData.templateName,\n          status: messageData.status,\n          direction: messageData.direction,\n          error: messageData.error,\n        },\n      });\n    } catch (error) {\n      this.logger.error('Error logging WhatsApp message:', error);\n    }\n  }\n\n  /**\n   * Find organization by WhatsApp number\n   */\n  private async findOrganizationByWhatsAppNumber(phoneNumber: string) {\n    try {\n      const integration = await this.prisma.integration.findFirst({\n        where: {\n          platform: 'whatsapp',\n          isActive: true,\n          // Assuming phone number is stored in metadata\n          metadata: {\n            path: ['phoneNumber'],\n            equals: phoneNumber,\n          },\n        },\n        include: {\n          organization: true,\n        },\n      });\n\n      return integration?.organization || null;\n    } catch (error) {\n      this.logger.error('Error finding organization by WhatsApp number:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Process automated responses\n   */\n  private async processAutomatedResponse(\n    organizationId: string,\n    phoneNumber: string,\n    messageBody: string,\n  ): Promise<void> {\n    try {\n      const body = messageBody?.toLowerCase().trim();\n\n      if (body === '/relatorio' || body === '/report') {\n        await this.sendDailyReport(organizationId, phoneNumber);\n      } else if (body === '/ajuda' || body === '/help') {\n        await this.sendHelpMessage(organizationId, phoneNumber);\n      }\n    } catch (error) {\n      this.logger.error('Error processing automated response:', error);\n    }\n  }\n\n  /**\n   * Send daily report\n   */\n  private async sendDailyReport(\n    organizationId: string,\n    phoneNumber: string,\n  ): Promise<void> {\n    try {\n      // Get yesterday's metrics\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      yesterday.setHours(0, 0, 0, 0);\n      const today = new Date(yesterday);\n      today.setDate(today.getDate() + 1);\n\n      // This would integrate with your existing metrics service\n      const reportMessage = `📊 *Relatório Diário*\\n\\n` +\n        `📅 Data: ${yesterday.toLocaleDateString('pt-BR')}\\n` +\n        `💰 Vendas: R$ 0,00\\n` +\n        `📈 Conversões: 0\\n` +\n        `💸 Gastos: R$ 0,00\\n` +\n        `🎯 ROI: 0%\\n\\n` +\n        `Digite /ajuda para mais opções.`;\n\n      await this.sendMessage(organizationId, {\n        to: phoneNumber,\n        body: reportMessage,\n      });\n    } catch (error) {\n      this.logger.error('Error sending daily report:', error);\n    }\n  }\n\n  /**\n   * Send help message\n   */\n  private async sendHelpMessage(\n    organizationId: string,\n    phoneNumber: string,\n  ): Promise<void> {\n    try {\n      const helpMessage = `🤖 *Comandos Disponíveis*\\n\\n` +\n        `📊 /relatorio - Relatório do dia anterior\\n` +\n        `💡 /ajuda - Esta mensagem\\n\\n` +\n        `Você também receberá:\\n` +\n        `🔔 Notificações de vendas\\n` +\n        `⚠️ Alertas de orçamento\\n` +\n        `📈 Relatórios diários às 9h`;\n\n      await this.sendMessage(organizationId, {\n        to: phoneNumber,\n        body: helpMessage,\n      });\n    } catch (error) {\n      this.logger.error('Error sending help message:', error);\n    }\n  }\n}"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADT,SAASE,UAAU,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,gBAAgB;AACxE,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,KAAK,QAAQ,MAAM;AAC5B,SAASC,WAAW,QAAQ,cAAc;AA+BnC,IAAMC,eAAe;AAAA;AAAA,CAAAX,cAAA,GAAAY,CAAA,QAAAC,iBAAA,GAArB,MAAMF,eAAe;EAMPG,aAAA;EACAC,MAAA;EACAC,aAAA;EACgBC,aAAA;EARlBC,MAAM;EAAA;EAAA,CAAAlB,cAAA,GAAAY,CAAA,QAAG,IAAIT,MAAM,CAACU,iBAAe,CAACM,IAAI,CAAC;EAClDC,YAAY;EACHC,UAAU;EAAA;EAAA,CAAArB,cAAA,GAAAY,CAAA,QAAG,IAAI;EAElCU,YACmBR,aAA4B,EAC5BC,MAAqB,EACrBC,aAA4B,EACZC,aAAoB;IAAA;IAAAjB,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAHpC,KAAAE,aAAa,GAAbA,aAAa;IAAe;IAAAd,cAAA,GAAAY,CAAA;IAC5B,KAAAG,MAAM,GAANA,MAAM;IAAe;IAAAf,cAAA,GAAAY,CAAA;IACrB,KAAAI,aAAa,GAAbA,aAAa;IAAe;IAAAhB,cAAA,GAAAY,CAAA;IACZ,KAAAK,aAAa,GAAbA,aAAa;IAAO;IAAAjB,cAAA,GAAAY,CAAA;IAErD,IAAI,CAACY,gBAAgB,EAAE;EACzB;EAEQA,gBAAgBA,CAAA;IAAA;IAAAxB,cAAA,GAAAuB,CAAA;IACtB,MAAME,UAAU;IAAA;IAAA,CAAAzB,cAAA,GAAAY,CAAA,QAAG,IAAI,CAACE,aAAa,CAACY,GAAG,CAAS,oBAAoB,CAAC;IACvE,MAAMC,SAAS;IAAA;IAAA,CAAA3B,cAAA,GAAAY,CAAA,QAAG,IAAI,CAACE,aAAa,CAACY,GAAG,CAAS,mBAAmB,CAAC;IAAC;IAAA1B,cAAA,GAAAY,CAAA;IAEtE;IAAI;IAAA,CAAAZ,cAAA,GAAA4B,CAAA,YAACH,UAAU;IAAA;IAAA,CAAAzB,cAAA,GAAA4B,CAAA,WAAI,CAACD,SAAS,GAAE;MAAA;MAAA3B,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAY,CAAA;MAC7B,IAAI,CAACM,MAAM,CAACW,IAAI,CAAC,mCAAmC,CAAC;MAAC;MAAA7B,cAAA,GAAAY,CAAA;MACtD;IACF,CAAC;IAAA;IAAA;MAAAZ,cAAA,GAAA4B,CAAA;IAAA;IAAA5B,cAAA,GAAAY,CAAA;IAED,IAAI,CAACQ,YAAY,GAAG,IAAIZ,MAAM,CAACiB,UAAU,EAAEE,SAAS,CAAC;IAAC;IAAA3B,cAAA,GAAAY,CAAA;IACtD,IAAI,CAACM,MAAM,CAACY,GAAG,CAAC,oCAAoC,CAAC;EACvD;EAEA;;;EAGA,MAAMC,WAAWA,CACfC,cAAsB,EACtBC,OAAwB;IAAA;IAAAjC,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAExB,IAAI;MACF;MACA,MAAMsB,OAAO;MAAA;MAAA,CAAAlC,cAAA,GAAAY,CAAA,QAAG,MAAM,IAAI,CAACuB,eAAe,CAACH,cAAc,CAAC;MAAC;MAAAhC,cAAA,GAAAY,CAAA;MAC3D,IAAI,CAACsB,OAAO,EAAE;QAAA;QAAAlC,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAY,CAAA;QACZ,MAAM,IAAIR,mBAAmB,CAAC,8CAA8C,CAAC;MAC/E,CAAC;MAAA;MAAA;QAAAJ,cAAA,GAAA4B,CAAA;MAAA;MAED;MACA,MAAMQ,GAAG;MAAA;MAAA,CAAApC,cAAA,GAAAY,CAAA,QAAG,MAAM,IAAI,CAACK,aAAa,CAACoB,GAAG,CAAC,cAAc,EAAE;QACvDL,cAAc;QACdC;OACD,EAAE;QACDK,QAAQ,EAAE,CAAC;QACXC,OAAO,EAAE;UACPC,IAAI,EAAE,aAAa;UACnBC,KAAK,EAAE;;OAEV,CAAC;MAAC;MAAAzC,cAAA,GAAAY,CAAA;MAEH,IAAI,CAACM,MAAM,CAACY,GAAG,CAAC,+BAA+BM,GAAG,CAACM,EAAE,EAAE,CAAC;MAAC;MAAA1C,cAAA,GAAAY,CAAA;MACzD,OAAO;QAAE+B,OAAO,EAAE,IAAI;QAAEC,SAAS,EAAER,GAAG,CAACM,EAAE,CAACG,QAAQ;MAAE,CAAE;IACxD,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAAC;MAAA9C,cAAA,GAAAY,CAAA;MAC5D,OAAO;QAAE+B,OAAO,EAAE,KAAK;QAAEG,KAAK,EAAEA,KAAK,CAACb;MAAO,CAAE;IACjD;EACF;EAEA;;;EAGA,MAAMc,cAAcA,CAClBf,cAAsB,EACtBC,OAAwB;IAAA;IAAAjC,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAExB,IAAI;MAAA;MAAAZ,cAAA,GAAAY,CAAA;MACF,IAAI,CAAC,IAAI,CAACQ,YAAY,EAAE;QAAA;QAAApB,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAY,CAAA;QACtB,MAAM,IAAIoC,KAAK,CAAC,+BAA+B,CAAC;MAClD,CAAC;MAAA;MAAA;QAAAhD,cAAA,GAAA4B,CAAA;MAAA;MAED,MAAMqB,UAAU;MAAA;MAAA,CAAAjD,cAAA,GAAAY,CAAA,QAAG,IAAI,CAACE,aAAa,CAACY,GAAG,CAAS,wBAAwB,CAAC;MAAC;MAAA1B,cAAA,GAAAY,CAAA;MAC5E,IAAI,CAACqC,UAAU,EAAE;QAAA;QAAAjD,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAY,CAAA;QACf,MAAM,IAAIoC,KAAK,CAAC,uCAAuC,CAAC;MAC1D,CAAC;MAAA;MAAA;QAAAhD,cAAA,GAAA4B,CAAA;MAAA;MAED,IAAIsB,aAAa;MAAC;MAAAlD,cAAA,GAAAY,CAAA;MAElB,IAAIqB,OAAO,CAACkB,YAAY,EAAE;QAAA;QAAAnD,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAY,CAAA;QACxB;QACAsC,aAAa,GAAG,MAAM,IAAI,CAAC9B,YAAY,CAACgC,QAAQ,CAACC,MAAM,CAAC;UACtDC,IAAI,EAAE,YAAYL,UAAU,EAAE;UAC9BM,EAAE,EAAE,YAAYtB,OAAO,CAACsB,EAAE,EAAE;UAC5BC,UAAU,EAAEvB,OAAO,CAACkB,YAAY;UAChCM,gBAAgB,EAAEC,IAAI,CAACC,SAAS;UAAC;UAAA,CAAA3D,cAAA,GAAA4B,CAAA,WAAAK,OAAO,CAAC2B,cAAc;UAAA;UAAA,CAAA5D,cAAA,GAAA4B,CAAA,WAAI,EAAE;SAC9D,CAAC;MACJ,CAAC,MAAM;QAAA;QAAA5B,cAAA,GAAA4B,CAAA;QACL;QACA,MAAMiC,WAAW;QAAA;QAAA,CAAA7D,cAAA,GAAAY,CAAA,QAAQ;UACvB0C,IAAI,EAAE,YAAYL,UAAU,EAAE;UAC9BM,EAAE,EAAE,YAAYtB,OAAO,CAACsB,EAAE;SAC3B;QAAC;QAAAvD,cAAA,GAAAY,CAAA;QAEF,IAAIqB,OAAO,CAAC6B,IAAI,EAAE;UAAA;UAAA9D,cAAA,GAAA4B,CAAA;UAAA5B,cAAA,GAAAY,CAAA;UAChBiD,WAAW,CAACC,IAAI,GAAG7B,OAAO,CAAC6B,IAAI;QACjC,CAAC;QAAA;QAAA;UAAA9D,cAAA,GAAA4B,CAAA;QAAA;QAAA5B,cAAA,GAAAY,CAAA;QAED,IAAIqB,OAAO,CAAC8B,QAAQ,EAAE;UAAA;UAAA/D,cAAA,GAAA4B,CAAA;UAAA5B,cAAA,GAAAY,CAAA;UACpBiD,WAAW,CAACE,QAAQ,GAAG,CAAC9B,OAAO,CAAC8B,QAAQ,CAAC;QAC3C,CAAC;QAAA;QAAA;UAAA/D,cAAA,GAAA4B,CAAA;QAAA;QAAA5B,cAAA,GAAAY,CAAA;QAEDsC,aAAa,GAAG,MAAM,IAAI,CAAC9B,YAAY,CAACgC,QAAQ,CAACC,MAAM,CAACQ,WAAW,CAAC;MACtE;MAEA;MAAA;MAAA7D,cAAA,GAAAY,CAAA;MACA,MAAM,IAAI,CAACoD,UAAU,CAAChC,cAAc,EAAE;QACpCiC,SAAS,EAAEf,aAAa,CAACgB,GAAG;QAC5BX,EAAE,EAAEtB,OAAO,CAACsB,EAAE;QACdO,IAAI,EAAE7B,OAAO,CAAC6B,IAAI;QAClBX,YAAY,EAAElB,OAAO,CAACkB,YAAY;QAClCgB,MAAM,EAAE,MAAM;QACdC,SAAS,EAAE;OACZ,CAAC;MAAC;MAAApE,cAAA,GAAAY,CAAA;MAEH,IAAI,CAACM,MAAM,CAACY,GAAG,CAAC,uCAAuCoB,aAAa,CAACgB,GAAG,EAAE,CAAC;IAC7E,CAAC,CAAC,OAAOpB,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAE9D;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACA,MAAM,IAAI,CAACoD,UAAU,CAAChC,cAAc,EAAE;QACpCuB,EAAE,EAAEtB,OAAO,CAACsB,EAAE;QACdO,IAAI,EAAE7B,OAAO,CAAC6B,IAAI;QAClBX,YAAY,EAAElB,OAAO,CAACkB,YAAY;QAClCgB,MAAM,EAAE,QAAQ;QAChBC,SAAS,EAAE,UAAU;QACrBtB,KAAK,EAAEA,KAAK,CAACb;OACd,CAAC;MAAC;MAAAjC,cAAA,GAAAY,CAAA;MAEH,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMuB,aAAaA,CACjBrC,cAAsB,EACtBsC,UAAoB,EACpBrC,OAAoC;IAAA;IAAAjC,cAAA,GAAAuB,CAAA;IAEpC,MAAMgD,MAAM;IAAA;IAAA,CAAAvE,cAAA,GAAAY,CAAA,QAAa,EAAE;IAC3B,IAAI4D,MAAM;IAAA;IAAA,CAAAxE,cAAA,GAAAY,CAAA,QAAG,CAAC;IAAC;IAAAZ,cAAA,GAAAY,CAAA;IAEf,KAAK,MAAM6D,SAAS,IAAIH,UAAU,EAAE;MAAA;MAAAtE,cAAA,GAAAY,CAAA;MAClC,IAAI;QACF,MAAM8D,MAAM;QAAA;QAAA,CAAA1E,cAAA,GAAAY,CAAA,QAAG,MAAM,IAAI,CAACmB,WAAW,CAACC,cAAc,EAAE;UACpD,GAAGC,OAAO;UACVsB,EAAE,EAAEkB;SACL,CAAC;QAAC;QAAAzE,cAAA,GAAAY,CAAA;QAEH,IAAI8D,MAAM,CAAC/B,OAAO,EAAE;UAAA;UAAA3C,cAAA,GAAA4B,CAAA;UAAA5B,cAAA,GAAAY,CAAA;UAClB4D,MAAM,EAAE;QACV,CAAC,MAAM;UAAA;UAAAxE,cAAA,GAAA4B,CAAA;UAAA5B,cAAA,GAAAY,CAAA;UACL2D,MAAM,CAACI,IAAI,CAAC,GAAGF,SAAS,KAAKC,MAAM,CAAC5B,KAAK,EAAE,CAAC;QAC9C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QAAA;QAAA9C,cAAA,GAAAY,CAAA;QACd2D,MAAM,CAACI,IAAI,CAAC,GAAGF,SAAS,KAAK3B,KAAK,CAACb,OAAO,EAAE,CAAC;MAC/C;IACF;IAAC;IAAAjC,cAAA,GAAAY,CAAA;IAED,OAAO;MACL+B,OAAO,EAAE4B,MAAM,CAACK,MAAM,KAAK,CAAC;MAC5BJ,MAAM;MACND;KACD;EACH;EAEA;;;EAGA,MAAMM,YAAYA,CAAC7C,cAAsB;IAAA;IAAAhC,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IACvC,IAAI;MACF;MACA,MAAMkE,SAAS;MAAA;MAAA,CAAA9E,cAAA,GAAAY,CAAA,QAAG,MAAM,IAAI,CAACG,MAAM,CAACgE,gBAAgB,CAACC,QAAQ,CAAC;QAC5DC,KAAK,EAAE;UAAEjD;QAAc,CAAE;QACzBkD,OAAO,EAAE;UAAEC,SAAS,EAAE;QAAM;OAC7B,CAAC;MAAC;MAAAnF,cAAA,GAAAY,CAAA;MAEH,OAAOkE,SAAS,CAACM,GAAG,CAACC,QAAQ,IAAK;QAAA;QAAArF,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAY,CAAA;QAAA;UAChCO,IAAI,EAAEkE,QAAQ,CAAClE,IAAI;UACnBmE,QAAQ,EAAED,QAAQ,CAACC,QAAe;UAClCC,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;UAC3BC,UAAU,EAAE9B,IAAI,CAAC+B,KAAK,CAACJ,QAAQ,CAACG,UAAU;SAC3C;OAAC,CAAC;IACL,CAAC,CAAC,OAAO1C,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAAC;MAAA9C,cAAA,GAAAY,CAAA;MAC/D,OAAO,EAAE;IACX;EACF;EAEA;;;EAGA,MAAM8E,cAAcA,CAClB1D,cAAsB,EACtBqD,QAA0B;IAAA;IAAArF,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAE1B,IAAI;MAAA;MAAAZ,cAAA,GAAAY,CAAA;MACF,MAAM,IAAI,CAACG,MAAM,CAACgE,gBAAgB,CAAC1B,MAAM,CAAC;QACxCsC,IAAI,EAAE;UACJ3D,cAAc;UACdb,IAAI,EAAEkE,QAAQ,CAAClE,IAAI;UACnBmE,QAAQ,EAAED,QAAQ,CAACC,QAAQ;UAC3BC,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;UAC3BC,UAAU,EAAE9B,IAAI,CAACC,SAAS,CAAC0B,QAAQ,CAACG,UAAU;;OAEjD,CAAC;MAAC;MAAAxF,cAAA,GAAAY,CAAA;MAEH,IAAI,CAACM,MAAM,CAACY,GAAG,CAAC,8BAA8BuD,QAAQ,CAAClE,IAAI,EAAE,CAAC;MAAC;MAAAnB,cAAA,GAAAY,CAAA;MAC/D,OAAO;QAAE+B,OAAO,EAAE;MAAI,CAAE;IAC1B,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAAC;MAAA9C,cAAA,GAAAY,CAAA;MAC9D,OAAO;QAAE+B,OAAO,EAAE,KAAK;QAAEG,KAAK,EAAEA,KAAK,CAACb;MAAO,CAAE;IACjD;EACF;EAEA;;;EAGA,MAAM2D,gBAAgBA,CACpB5D,cAAsB,EACtB6D,KAAK;EAAA;EAAA,CAAA7F,cAAA,GAAA4B,CAAA,WAAG,EAAE,GACVkE,MAAM;EAAA;EAAA,CAAA9F,cAAA,GAAA4B,CAAA,WAAG,CAAC;IAAA;IAAA5B,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAEV,IAAI;MACF,MAAMmF,aAAa;MAAA;MAAA,CAAA/F,cAAA,GAAAY,CAAA,QAAG,MAAM,IAAI,CAACG,MAAM,CAACiF,eAAe,CAACC,OAAO,CAAC;QAC9DC,EAAE,EAAE,CAAC,aAAa,CAAC;QACnBjB,KAAK,EAAE;UAAEjD;QAAc,CAAE;QACzBmE,MAAM,EAAE;UAAEzD,EAAE,EAAE;QAAI,CAAE;QACpB0D,IAAI,EAAE;UAAEjB,SAAS,EAAE;QAAI,CAAE;QACzBD,OAAO,EAAE;UAAEkB,IAAI,EAAE;YAAEjB,SAAS,EAAE;UAAM;QAAE,CAAE;QACxCkB,IAAI,EAAER,KAAK;QACXS,IAAI,EAAER;OACP,CAAC;MAEF;MACA,MAAMS,yBAAyB;MAAA;MAAA,CAAAvG,cAAA,GAAAY,CAAA,QAAG,MAAM4F,OAAO,CAACC,GAAG,CACjDV,aAAa,CAACX,GAAG,CAAC,MAAOsB,IAAI,IAAI;QAAA;QAAA1G,cAAA,GAAAuB,CAAA;QAC/B,MAAMoF,aAAa;QAAA;QAAA,CAAA3G,cAAA,GAAAY,CAAA,QAAG,MAAM,IAAI,CAACG,MAAM,CAACiF,eAAe,CAACY,SAAS,CAAC;UAChE3B,KAAK,EAAE;YACLjD,cAAc;YACd6E,WAAW,EAAEH,IAAI,CAACG;WACnB;UACD3B,OAAO,EAAE;YAAEC,SAAS,EAAE;UAAM;SAC7B,CAAC;QAAC;QAAAnF,cAAA,GAAAY,CAAA;QAEH,OAAO;UACLiG,WAAW,EAAEH,IAAI,CAACG,WAAW;UAC7BC,YAAY,EAAEJ,IAAI,CAACP,MAAM,CAACzD,EAAE;UAC5BqE,aAAa,EAAEL,IAAI,CAACN,IAAI,CAACjB,SAAS;UAClC6B,WAAW;UAAE;UAAA,CAAAhH,cAAA,GAAA4B,CAAA,WAAA+E,aAAa,EAAE7C,IAAI;UAAA;UAAA,CAAA9D,cAAA,GAAA4B,CAAA,WAAI+E,aAAa,EAAExD,YAAY;UAC/D8D,oBAAoB,EAAEN,aAAa,EAAEvC;SACtC;MACH,CAAC,CAAC,CACH;MAAC;MAAApE,cAAA,GAAAY,CAAA;MAEF,OAAO2F,yBAAyB;IAClC,CAAC,CAAC,OAAOzD,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MAAC;MAAA9C,cAAA,GAAAY,CAAA;MAC1D,OAAO,EAAE;IACX;EACF;EAEA;;;EAGA,MAAMsG,uBAAuBA,CAC3BlF,cAAsB,EACtB6E,WAAmB,EACnBhB,KAAK;EAAA;EAAA,CAAA7F,cAAA,GAAA4B,CAAA,WAAG,EAAE,GACVkE,MAAM;EAAA;EAAA,CAAA9F,cAAA,GAAA4B,CAAA,WAAG,CAAC;IAAA;IAAA5B,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAEV,IAAI;MACF,MAAMwC,QAAQ;MAAA;MAAA,CAAApD,cAAA,GAAAY,CAAA,QAAG,MAAM,IAAI,CAACG,MAAM,CAACiF,eAAe,CAAChB,QAAQ,CAAC;QAC1DC,KAAK,EAAE;UACLjD,cAAc;UACd6E;SACD;QACD3B,OAAO,EAAE;UAAEC,SAAS,EAAE;QAAM,CAAE;QAC9BkB,IAAI,EAAER,KAAK;QACXS,IAAI,EAAER;OACP,CAAC;MAAC;MAAA9F,cAAA,GAAAY,CAAA;MAEH,OAAOwC,QAAQ;IACjB,CAAC,CAAC,OAAON,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAAC;MAAA9C,cAAA,GAAAY,CAAA;MAClE,OAAO,EAAE;IACX;EACF;EAEA;;;EAGA,MAAMuG,aAAaA,CAACC,WAAgB;IAAA;IAAApH,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAClC,IAAI;MACF,MAAM;QAAEyG,IAAI;QAAEC,EAAE;QAAEC,IAAI;QAAEC,UAAU;QAAEC;MAAS,CAAE;MAAA;MAAA,CAAAzH,cAAA,GAAAY,CAAA,QAAGwG,WAAW;MAAC;MAAApH,cAAA,GAAAY,CAAA;MAE9D;MAAI;MAAA,CAAAZ,cAAA,GAAA4B,CAAA,YAACyF,IAAI;MAAA;MAAA,CAAArH,cAAA,GAAA4B,CAAA,WAAI,CAAC4F,UAAU,GAAE;QAAA;QAAAxH,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAY,CAAA;QACxB,IAAI,CAACM,MAAM,CAACW,IAAI,CAAC,+BAA+B,CAAC;QAAC;QAAA7B,cAAA,GAAAY,CAAA;QAClD;MACF,CAAC;MAAA;MAAA;QAAAZ,cAAA,GAAA4B,CAAA;MAAA;MAED;MACA,MAAMiF,WAAW;MAAA;MAAA,CAAA7G,cAAA,GAAAY,CAAA,QAAGyG,IAAI,CAACK,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;MACjD,MAAMC,QAAQ;MAAA;MAAA,CAAA3H,cAAA,GAAAY,CAAA,SAAG0G,EAAE,EAAEI,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;MAE7C;MACA,MAAME,YAAY;MAAA;MAAA,CAAA5H,cAAA,GAAAY,CAAA,SAAG,MAAM,IAAI,CAACiH,gCAAgC,CAACF,QAAQ,CAAC;MAAC;MAAA3H,cAAA,GAAAY,CAAA;MAC3E,IAAI,CAACgH,YAAY,EAAE;QAAA;QAAA5H,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAY,CAAA;QACjB,IAAI,CAACM,MAAM,CAACW,IAAI,CAAC,8CAA8C8F,QAAQ,EAAE,CAAC;QAAC;QAAA3H,cAAA,GAAAY,CAAA;QAC3E;MACF,CAAC;MAAA;MAAA;QAAAZ,cAAA,GAAA4B,CAAA;MAAA;MAED;MAAA5B,cAAA,GAAAY,CAAA;MACA,MAAM,IAAI,CAACoD,UAAU,CAAC4D,YAAY,CAAClF,EAAE,EAAE;QACrCuB,SAAS,EAAEuD,UAAU;QACrBX,WAAW;QACX/C,IAAI,EAAEyD,IAAI;QACVpD,MAAM;QAAE;QAAA,CAAAnE,cAAA,GAAA4B,CAAA,WAAA6F,SAAS;QAAA;QAAA,CAAAzH,cAAA,GAAA4B,CAAA,WAAI,UAAU;QAC/BwC,SAAS,EAAE;OACZ,CAAC;MAEF;MAAA;MAAApE,cAAA,GAAAY,CAAA;MACA,MAAM,IAAI,CAACkH,wBAAwB,CAACF,YAAY,CAAClF,EAAE,EAAEmE,WAAW,EAAEU,IAAI,CAAC;MAAC;MAAAvH,cAAA,GAAAY,CAAA;MAExE,IAAI,CAACM,MAAM,CAACY,GAAG,CAAC,kCAAkC0F,UAAU,EAAE,CAAC;IACjE,CAAC,CAAC,OAAO1E,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAChE;EACF;EAEA;;;EAGA,MAAMiF,UAAUA,CAAC/F,cAAsB;IAAA;IAAAhC,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IACrC,IAAI;MACF,MAAMoH,KAAK;MAAA;MAAA,CAAAhI,cAAA,GAAAY,CAAA,SAAG,IAAIqH,IAAI,EAAE;MAAC;MAAAjI,cAAA,GAAAY,CAAA;MACzBoH,KAAK,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1B,MAAMC,QAAQ;MAAA;MAAA,CAAAnI,cAAA,GAAAY,CAAA,SAAG,IAAIqH,IAAI,CAACD,KAAK,CAAC;MAAC;MAAAhI,cAAA,GAAAY,CAAA;MACjCuH,QAAQ,CAACC,OAAO,CAACD,QAAQ,CAACE,OAAO,EAAE,GAAG,CAAC,CAAC;MAExC,MAAM,CAACC,aAAa,EAAEC,SAAS,EAAEC,aAAa,EAAEC,WAAW,CAAC;MAAA;MAAA,CAAAzI,cAAA,GAAAY,CAAA,SAAG,MAAM4F,OAAO,CAACC,GAAG,CAAC,CAC/E,IAAI,CAAC1F,MAAM,CAACiF,eAAe,CAAC0C,KAAK,CAAC;QAChCzD,KAAK,EAAE;UAAEjD;QAAc;OACxB,CAAC,EACF,IAAI,CAACjB,MAAM,CAACiF,eAAe,CAAC0C,KAAK,CAAC;QAChCzD,KAAK,EAAE;UACLjD,cAAc;UACdoC,SAAS,EAAE,UAAU;UACrBD,MAAM,EAAE,MAAM;UACdgB,SAAS,EAAE;YACTwD,GAAG,EAAEX,KAAK;YACVY,EAAE,EAAET;;;OAGT,CAAC,EACF,IAAI,CAACpH,MAAM,CAACiF,eAAe,CAAC0C,KAAK,CAAC;QAChCzD,KAAK,EAAE;UACLjD,cAAc;UACdoC,SAAS,EAAE,SAAS;UACpBe,SAAS,EAAE;YACTwD,GAAG,EAAEX,KAAK;YACVY,EAAE,EAAET;;;OAGT,CAAC,EACF,IAAI,CAACpH,MAAM,CAACiF,eAAe,CAAC0C,KAAK,CAAC;QAChCzD,KAAK,EAAE;UACLjD,cAAc;UACdoC,SAAS,EAAE,UAAU;UACrBD,MAAM,EAAE,QAAQ;UAChBgB,SAAS,EAAE;YACTwD,GAAG,EAAEX,KAAK;YACVY,EAAE,EAAET;;;OAGT,CAAC,CACH,CAAC;MAAC;MAAAnI,cAAA,GAAAY,CAAA;MAEH,OAAO;QACL0H,aAAa;QACbO,YAAY,EAAEN,SAAS;QACvBO,gBAAgB,EAAEN,aAAa;QAC/BO,cAAc,EAAEN,WAAW;QAC3BpH,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3B2H,cAAc,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC7H,UAAU,GAAGkH,SAAS;OACxD;IACH,CAAC,CAAC,OAAOzF,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAAC;MAAA9C,cAAA,GAAAY,CAAA;MAC7D,OAAO;QACL0H,aAAa,EAAE,CAAC;QAChBO,YAAY,EAAE,CAAC;QACfC,gBAAgB,EAAE,CAAC;QACnBC,cAAc,EAAE,CAAC;QACjB1H,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3B2H,cAAc,EAAE,IAAI,CAAC3H;OACtB;IACH;EACF;EAEA;;;EAGQ,MAAMc,eAAeA,CAACH,cAAsB;IAAA;IAAAhC,cAAA,GAAAuB,CAAA;IAClD,MAAMyG,KAAK;IAAA;IAAA,CAAAhI,cAAA,GAAAY,CAAA,SAAG,IAAIqH,IAAI,EAAE;IAAC;IAAAjI,cAAA,GAAAY,CAAA;IACzBoH,KAAK,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC1B,MAAMC,QAAQ;IAAA;IAAA,CAAAnI,cAAA,GAAAY,CAAA,SAAG,IAAIqH,IAAI,CAACD,KAAK,CAAC;IAAC;IAAAhI,cAAA,GAAAY,CAAA;IACjCuH,QAAQ,CAACC,OAAO,CAACD,QAAQ,CAACE,OAAO,EAAE,GAAG,CAAC,CAAC;IAExC,MAAME,SAAS;IAAA;IAAA,CAAAvI,cAAA,GAAAY,CAAA,SAAG,MAAM,IAAI,CAACG,MAAM,CAACiF,eAAe,CAAC0C,KAAK,CAAC;MACxDzD,KAAK,EAAE;QACLjD,cAAc;QACdoC,SAAS,EAAE,UAAU;QACrBD,MAAM,EAAE,MAAM;QACdgB,SAAS,EAAE;UACTwD,GAAG,EAAEX,KAAK;UACVY,EAAE,EAAET;;;KAGT,CAAC;IAAC;IAAAnI,cAAA,GAAAY,CAAA;IAEH,OAAO2H,SAAS,GAAG,IAAI,CAAClH,UAAU;EACpC;EAEA;;;EAGQ,MAAM2C,UAAUA,CACtBhC,cAAsB,EACtB6B,WASC;IAAA;IAAA7D,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAED,IAAI;MAAA;MAAAZ,cAAA,GAAAY,CAAA;MACF,MAAM,IAAI,CAACG,MAAM,CAACiF,eAAe,CAAC3C,MAAM,CAAC;QACvCsC,IAAI,EAAE;UACJ3D,cAAc;UACdiC,SAAS,EAAEJ,WAAW,CAACI,SAAS;UAChC4C,WAAW;UAAE;UAAA,CAAA7G,cAAA,GAAA4B,CAAA,WAAAiC,WAAW,CAACgD,WAAW;UAAA;UAAA,CAAA7G,cAAA,GAAA4B,CAAA,WAAIiC,WAAW,CAACN,EAAE;UACtDO,IAAI,EAAED,WAAW,CAACC,IAAI;UACtBX,YAAY,EAAEU,WAAW,CAACV,YAAY;UACtCgB,MAAM,EAAEN,WAAW,CAACM,MAAM;UAC1BC,SAAS,EAAEP,WAAW,CAACO,SAAS;UAChCtB,KAAK,EAAEe,WAAW,CAACf;;OAEtB,CAAC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAC7D;EACF;EAEA;;;EAGQ,MAAM+E,gCAAgCA,CAAChB,WAAmB;IAAA;IAAA7G,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAChE,IAAI;MACF,MAAMuI,WAAW;MAAA;MAAA,CAAAnJ,cAAA,GAAAY,CAAA,SAAG,MAAM,IAAI,CAACG,MAAM,CAACoI,WAAW,CAACvC,SAAS,CAAC;QAC1D3B,KAAK,EAAE;UACLmE,QAAQ,EAAE,UAAU;UACpBC,QAAQ,EAAE,IAAI;UACd;UACAC,QAAQ,EAAE;YACRC,IAAI,EAAE,CAAC,aAAa,CAAC;YACrBC,MAAM,EAAE3C;;SAEX;QACD4C,OAAO,EAAE;UACP7B,YAAY,EAAE;;OAEjB,CAAC;MAAC;MAAA5H,cAAA,GAAAY,CAAA;MAEH,OAAO,2BAAAZ,cAAA,GAAA4B,CAAA,WAAAuH,WAAW,EAAEvB,YAAY;MAAA;MAAA,CAAA5H,cAAA,GAAA4B,CAAA,WAAI,IAAI;IAC1C,CAAC,CAAC,OAAOkB,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MAAC;MAAA9C,cAAA,GAAAY,CAAA;MAC3E,OAAO,IAAI;IACb;EACF;EAEA;;;EAGQ,MAAMkH,wBAAwBA,CACpC9F,cAAsB,EACtB6E,WAAmB,EACnB6C,WAAmB;IAAA;IAAA1J,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAEnB,IAAI;MACF,MAAMkD,IAAI;MAAA;MAAA,CAAA9D,cAAA,GAAAY,CAAA,SAAG8I,WAAW,EAAEC,WAAW,EAAE,CAACC,IAAI,EAAE;MAAC;MAAA5J,cAAA,GAAAY,CAAA;MAE/C;MAAI;MAAA,CAAAZ,cAAA,GAAA4B,CAAA,WAAAkC,IAAI,KAAK,YAAY;MAAA;MAAA,CAAA9D,cAAA,GAAA4B,CAAA,WAAIkC,IAAI,KAAK,SAAS,GAAE;QAAA;QAAA9D,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAY,CAAA;QAC/C,MAAM,IAAI,CAACiJ,eAAe,CAAC7H,cAAc,EAAE6E,WAAW,CAAC;MACzD,CAAC,MAAM;QAAA;QAAA7G,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAY,CAAA;QAAA;QAAI;QAAA,CAAAZ,cAAA,GAAA4B,CAAA,WAAAkC,IAAI,KAAK,QAAQ;QAAA;QAAA,CAAA9D,cAAA,GAAA4B,CAAA,WAAIkC,IAAI,KAAK,OAAO,GAAE;UAAA;UAAA9D,cAAA,GAAA4B,CAAA;UAAA5B,cAAA,GAAAY,CAAA;UAChD,MAAM,IAAI,CAACkJ,eAAe,CAAC9H,cAAc,EAAE6E,WAAW,CAAC;QACzD,CAAC;QAAA;QAAA;UAAA7G,cAAA,GAAA4B,CAAA;QAAA;MAAD;IACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAClE;EACF;EAEA;;;EAGQ,MAAM+G,eAAeA,CAC3B7H,cAAsB,EACtB6E,WAAmB;IAAA;IAAA7G,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAEnB,IAAI;MACF;MACA,MAAMmJ,SAAS;MAAA;MAAA,CAAA/J,cAAA,GAAAY,CAAA,SAAG,IAAIqH,IAAI,EAAE;MAAC;MAAAjI,cAAA,GAAAY,CAAA;MAC7BmJ,SAAS,CAAC3B,OAAO,CAAC2B,SAAS,CAAC1B,OAAO,EAAE,GAAG,CAAC,CAAC;MAAC;MAAArI,cAAA,GAAAY,CAAA;MAC3CmJ,SAAS,CAAC7B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC9B,MAAMF,KAAK;MAAA;MAAA,CAAAhI,cAAA,GAAAY,CAAA,SAAG,IAAIqH,IAAI,CAAC8B,SAAS,CAAC;MAAC;MAAA/J,cAAA,GAAAY,CAAA;MAClCoH,KAAK,CAACI,OAAO,CAACJ,KAAK,CAACK,OAAO,EAAE,GAAG,CAAC,CAAC;MAElC;MACA,MAAM2B,aAAa;MAAA;MAAA,CAAAhK,cAAA,GAAAY,CAAA,SAAG,2BAA2B,GAC/C,YAAYmJ,SAAS,CAACE,kBAAkB,CAAC,OAAO,CAAC,IAAI,GACrD,sBAAsB,GACtB,oBAAoB,GACpB,sBAAsB,GACtB,gBAAgB,GAChB,iCAAiC;MAAC;MAAAjK,cAAA,GAAAY,CAAA;MAEpC,MAAM,IAAI,CAACmB,WAAW,CAACC,cAAc,EAAE;QACrCuB,EAAE,EAAEsD,WAAW;QACf/C,IAAI,EAAEkG;OACP,CAAC;IACJ,CAAC,CAAC,OAAOlH,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACzD;EACF;EAEA;;;EAGQ,MAAMgH,eAAeA,CAC3B9H,cAAsB,EACtB6E,WAAmB;IAAA;IAAA7G,cAAA,GAAAuB,CAAA;IAAAvB,cAAA,GAAAY,CAAA;IAEnB,IAAI;MACF,MAAMsJ,WAAW;MAAA;MAAA,CAAAlK,cAAA,GAAAY,CAAA,SAAG,+BAA+B,GACjD,6CAA6C,GAC7C,+BAA+B,GAC/B,yBAAyB,GACzB,6BAA6B,GAC7B,2BAA2B,GAC3B,6BAA6B;MAAC;MAAAZ,cAAA,GAAAY,CAAA;MAEhC,MAAM,IAAI,CAACmB,WAAW,CAACC,cAAc,EAAE;QACrCuB,EAAE,EAAEsD,WAAW;QACf/C,IAAI,EAAEoG;OACP,CAAC;IACJ,CAAC,CAAC,OAAOpH,KAAK,EAAE;MAAA;MAAA9C,cAAA,GAAAY,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4B,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACzD;EACF;CACD;AAAA;AAAA9C,cAAA,GAAAY,CAAA;AArjBYD,eAAe,GAAAE,iBAAA,GAAAsJ,UAAA,EAD3BjK,UAAU,EAAE,EAURkK,OAAA,IAAA1J,WAAW,CAAC,UAAU,CAAC,G;;qCAHQL,aAAa;AAAA;AAAA,CAAAL,cAAA,GAAA4B,CAAA,WAAbvB,aAAa;AAAA;AAAA,CAAAL,cAAA,GAAA4B,CAAA,WAAAyI,EAAA;AAAA;AAAA,CAAArK,cAAA,GAAA4B,CAAA,WAAA0I,MAAA,WAAAC,EAAA;AAAA;AAAA,CAAAvK,cAAA,GAAA4B,CAAA,kBACpBtB,aAAa;AAAA;AAAA,CAAAN,cAAA,GAAA4B,CAAA,WAAbtB,aAAa;AAAA;AAAA,CAAAN,cAAA,GAAA4B,CAAA,WAAA2I,EAAA;AAAA;AAAA,CAAAvK,cAAA,GAAA4B,CAAA,WAAA0I,MAAA,WAAAE,EAAA;AAAA;AAAA,CAAAxK,cAAA,GAAA4B,CAAA,kBACNrB,aAAa;AAAA;AAAA,CAAAP,cAAA,GAAA4B,CAAA,WAAbrB,aAAa;AAAA;AAAA,CAAAP,cAAA,GAAA4B,CAAA,WAAA4I,EAAA;AAAA;AAAA,CAAAxK,cAAA,GAAA4B,CAAA,WAAA0I,MAAA,WAAAG,EAAA;AAAA;AAAA,CAAAzK,cAAA,GAAA4B,CAAA,kBACGnB,KAAK;AAAA;AAAA,CAAAT,cAAA,GAAA4B,CAAA,WAALnB,KAAK;AAAA;AAAA,CAAAT,cAAA,GAAA4B,CAAA,WAAA6I,EAAA;AAAA;AAAA,CAAAzK,cAAA,GAAA4B,CAAA,WAAA0I,MAAA,I,EAT5C3J,eAAe,CAqjB3B","ignoreList":[]}