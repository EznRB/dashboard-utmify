{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts","mappings":";;;;;;AAEA,mDAA+D;AAC/D,kDAA0B;AAC1B,uCAAgD;AAChD,4CAAyC;AACzC,4CAA2C;AAkE3C,MAAa,gBAAgB;IAMR;IACA;IANF,UAAU,GAAG,CAAC,CAAC;IACf,UAAU,GAAG,IAAI,CAAC;IAC3B,gBAAgB,GAA8B,IAAI,GAAG,EAAE,CAAC;IAEhE,YACmB,MAAqB,EACrB,aAA4B;QAD5B,WAAM,GAAN,MAAM,CAAe;QACrB,kBAAa,GAAb,aAAa,CAAe;IAC5C,CAAC;IAEJ;;OAEG;IACH,eAAe,CAAC,MAAc,EAAE,WAAmB;QACjD,IAAI,CAAC,qBAAe,EAAE,CAAC;YACrB,MAAM,IAAI,iBAAQ,CAAC,uCAAuC,EAAE,2BAA2B,EAAE,GAAG,CAAC,CAAC;QAChG,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;QAClF,MAAM,MAAM,GAAG,CAAC,yCAAyC,CAAC,CAAC;QAE3D,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;YACjC,SAAS,EAAE,qBAAe,CAAC,QAAQ;YACnC,YAAY,EAAE,WAAW;YACzB,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;YACvB,aAAa,EAAE,MAAM;YACrB,WAAW,EAAE,SAAS;YACtB,MAAM,EAAE,SAAS;YACjB,KAAK;SACN,CAAC,CAAC;QAEH,OAAO,gDAAgD,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC7E,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,IAAY,EAAE,WAAmB;QAC1D,IAAI,CAAC,qBAAe,EAAE,CAAC;YACrB,MAAM,IAAI,iBAAQ,CAAC,uCAAuC,EAAE,2BAA2B,EAAE,GAAG,CAAC,CAAC;QAChG,CAAC;QAED,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,IAAI,CAAC,qCAAqC,EAAE;gBACvE,SAAS,EAAE,qBAAe,CAAC,QAAQ;gBACnC,aAAa,EAAE,qBAAe,CAAC,YAAY;gBAC3C,IAAI;gBACJ,UAAU,EAAE,oBAAoB;gBAChC,YAAY,EAAE,WAAW;aAC1B,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC,IAAI,CAAC;QACvB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,IAAI,iBAAQ,CAAC,uCAAuC,EAAE,uBAAuB,EAAE,GAAG,CAAC,CAAC;QAC5F,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,YAAoB;QAC3C,IAAI,CAAC,qBAAe,EAAE,CAAC;YACrB,MAAM,IAAI,iBAAQ,CAAC,uCAAuC,EAAE,2BAA2B,EAAE,GAAG,CAAC,CAAC;QAChG,CAAC;QAED,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,IAAI,CAAC,qCAAqC,EAAE;gBACvE,SAAS,EAAE,qBAAe,CAAC,QAAQ;gBACnC,aAAa,EAAE,qBAAe,CAAC,YAAY;gBAC3C,aAAa,EAAE,YAAY;gBAC3B,UAAU,EAAE,eAAe;aAC5B,CAAC,CAAC;YAEH,OAAO;gBACL,GAAG,QAAQ,CAAC,IAAI;gBAChB,aAAa,EAAE,YAAY,EAAE,kCAAkC;aAChE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,IAAI,iBAAQ,CAAC,gCAAgC,EAAE,sBAAsB,EAAE,GAAG,CAAC,CAAC;QACpF,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,MAAyB;QACzD,MAAM,oBAAoB,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC7E,MAAM,qBAAqB,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC/E,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC;QAElE,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;YACnC,KAAK,EAAE;gBACL,eAAe,EAAE;oBACf,MAAM;oBACN,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,MAAM,EAAE;gBACN,WAAW,EAAE,oBAAoB;gBACjC,YAAY,EAAE,qBAAqB;gBACnC,SAAS;gBACT,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,IAAI,IAAI,EAAE;aACrB;YACD,MAAM,EAAE;gBACN,MAAM;gBACN,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,oBAAoB;gBACjC,YAAY,EAAE,qBAAqB;gBACnC,SAAS;gBACT,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,IAAI,IAAI,EAAE;aACrB;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,qCAAqC,MAAM,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC;YAC3D,KAAK,EAAE;gBACL,eAAe,EAAE;oBACf,MAAM;oBACN,QAAQ,EAAE,YAAY;iBACvB;aACF;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC1C,MAAM,IAAI,iBAAQ,CAAC,8CAA8C,EAAE,uBAAuB,EAAE,GAAG,CAAC,CAAC;QACnG,CAAC;QAED,4BAA4B;QAC5B,IAAI,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,EAAE,CAAC;YACjE,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,YAAa,CAAC,CAAC;YAC3E,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAC9D,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAC1C,OAAO,SAAS,CAAC,YAAY,CAAC;QAChC,CAAC;QAED,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,WAAY,CAAC,CAAC;IAC9D,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB,CAAC,MAAc;QAC7C,IAAI,CAAC,qBAAe,EAAE,CAAC;YACrB,MAAM,IAAI,iBAAQ,CAAC,uCAAuC,EAAE,2BAA2B,EAAE,GAAG,CAAC,CAAC;QAChG,CAAC;QAED,MAAM,QAAQ,GAAG,qBAAqB,MAAM,EAAE,CAAC;QAE/C,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC;QAC9C,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAEtD,MAAM,MAAM,GAAG,IAAI,6BAAY,CAAC;YAC9B,SAAS,EAAE,qBAAe,CAAC,QAAQ;YACnC,aAAa,EAAE,qBAAe,CAAC,YAAY;YAC3C,eAAe,EAAE,qBAAe,CAAC,cAAc;SAChD,CAAC,CAAC;QAEH,sCAAsC;QACtC,MAAM,CAAC,QAAQ,CAAC,WAAW,GAAG;YAC5B,YAAY,EAAE,WAAW;SAC1B,CAAC;QAEF,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB,CAAC,MAAc;QACtC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,MAAM,KAAK,GAAG;;;;;;;;;;OAUb,CAAC;YAEF,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;gBAC/C,KAAK;gBACL,iBAAiB,EAAE,qBAAe,EAAE,eAAe;aACpD,CAAC,CAAC;YAEH,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,QAAa,EAAE,EAAE,CAAC,CAAC;gBACvC,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACnC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,IAAI,YAAY,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE;gBAC9E,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,aAAa;gBACzC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,SAAS;gBACrC,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM;gBAChC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ;aACvD,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,IAAI,iBAAQ,CAAC,sCAAsC,EAAE,0BAA0B,EAAE,GAAG,CAAC,CAAC;QAC9F,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc,EAAE,UAAkB;QACnD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,MAAM,KAAK,GAAG;;;;;;;;;;;;;OAab,CAAC;YAEF,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC;gBAC1E,KAAK;aACN,CAAC,CAAC;YAEH,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,QAAa,EAAE,EAAE,CAAC,CAAC;gBACvC,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACnC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,IAAI;gBAC5B,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM;gBAChC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,wBAAwB;gBAChD,UAAU,EAAE,QAAQ,CAAC,QAAQ,CAAC,UAAU;gBACxC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ;gBACpC,aAAa,EAAE,QAAQ,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;oBACtD,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,SAAS;gBACxE,WAAW,EAAE,QAAQ,CAAC,eAAe,EAAE,IAAI;gBAC3C,WAAW,EAAE,UAAU;aACxB,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;YAC/C,MAAM,IAAI,iBAAQ,CAAC,8BAA8B,EAAE,kBAAkB,EAAE,GAAG,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,UAAkB,EAAE,WAAsB;QAC1E,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,IAAI,WAAW,GAAG,gFAAgF,CAAC;YACnG,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC1C,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClE,WAAW,IAAI,wBAAwB,cAAc,GAAG,CAAC;YAC3D,CAAC;YAED,MAAM,KAAK,GAAG;;;;;;;;;;;;gBAYJ,WAAW;;OAEpB,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC;gBACzE,KAAK;aACN,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAY,EAAE,EAAE,CAAC,CAAC;gBACrC,EAAE,EAAE,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,QAAQ,EAAE;gBACtD,IAAI,EAAE,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI;gBAC7C,UAAU,EAAE,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAU;gBACzD,MAAM,EAAE,OAAO,CAAC,kBAAkB,CAAC,MAAM;gBACzC,aAAa,EAAE,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa;gBACrE,cAAc,EAAE,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC;oBACpF,QAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,SAAS;gBACrG,eAAe,EAAE,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,CAAC;oBACtF,QAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,SAAS;gBACtG,WAAW,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBAC3C,WAAW,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;aAC5C,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC9C,MAAM,IAAI,iBAAQ,CAAC,6BAA6B,EAAE,iBAAiB,EAAE,GAAG,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CACtB,MAAc,EACd,UAAkB,EAClB,SAAkD;QAElD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,IAAI,SAAS,EAAE,CAAC;gBACd,UAAU,GAAG,yBAAyB,SAAS,CAAC,SAAS,2BAA2B,SAAS,CAAC,OAAO,GAAG,CAAC;YAC3G,CAAC;YAED,MAAM,KAAK,GAAG;;;;;;;;;;;6CAWyB,UAAU;;OAEhD,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC;gBACxE,KAAK;aACN,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;gBACnC,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBAC1C,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtD,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;gBAC5C,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtD,WAAW,EAAE,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACxD,GAAG,EAAE,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;gBACxC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtD,mBAAmB,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;oBACnD,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,SAAS;gBACrG,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI;aAC3B,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,IAAI,iBAAQ,CAAC,qCAAqC,EAAE,yBAAyB,EAAE,GAAG,CAAC,CAAC;QAC5F,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CACxB,MAAc,EACd,UAAkB,EAClB,SAAkD;QAElD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,IAAI,SAAS,EAAE,CAAC;gBACd,UAAU,GAAG,yBAAyB,SAAS,CAAC,SAAS,2BAA2B,SAAS,CAAC,OAAO,GAAG,CAAC;YAC3G,CAAC;YAED,MAAM,KAAK,GAAG;;;;;;;;;;;kDAW8B,UAAU;;OAErD,CAAC;YAEF,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC;gBAC5E,KAAK;aACN,CAAC,CAAC;YAEH,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,CAAC;gBACrC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW;gBAC9C,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACpD,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;gBAC1C,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACpD,WAAW,EAAE,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtD,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACxC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACxC,UAAU,EAAE,IAAI,CAAC,kBAAkB,EAAE,YAAY,EAAE,QAAQ,EAAE;aAC9D,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,IAAI,iBAAQ,CAAC,wCAAwC,EAAE,qBAAqB,EAAE,GAAG,CAAC,CAAC;QAC3F,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc,EAAE,KAAK,GAAG,KAAK;QAC9C,IAAI,CAAC;YACH,eAAM,CAAC,IAAI,CAAC,qCAAqC,MAAM,EAAE,CAAC,CAAC;YAE3D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAExD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;gBAC/B,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC,CAAC,kDAAkD;oBACjF,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBAC9C,CAAC;YACH,CAAC;YAED,6BAA6B;YAC7B,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;gBACnC,KAAK,EAAE;oBACL,eAAe,EAAE;wBACf,MAAM;wBACN,QAAQ,EAAE,YAAY;qBACvB;iBACF;gBACD,IAAI,EAAE;oBACJ,QAAQ,EAAE,IAAI,IAAI,EAAE;iBACrB;aACF,CAAC,CAAC;YAEH,eAAM,CAAC,IAAI,CAAC,sCAAsC,MAAM,EAAE,CAAC,CAAC;QAC9D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,2CAA2C,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC;YACzE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,eAAe,CAAC,MAAc,EAAE,OAAyB;QACrE,IAAI,CAAC;YACH,iBAAiB;YACjB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;YAE9D,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;gBACjC,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAExD,kCAAkC;gBAClC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC3E,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;oBAC/B,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBAC/C,CAAC;gBAED,oCAAoC;gBACpC,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvD,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE9F,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC1F,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;oBAC7B,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBAClD,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,mCAAmC,OAAO,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAC7B,MAAc,EACd,OAAyB,EACzB,QAA2B;QAE3B,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAChC,KAAK,EAAE;gBACL,mBAAmB,EAAE;oBACnB,UAAU,EAAE,QAAQ,CAAC,EAAE;oBACvB,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,SAAS,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI;gBACrE,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC/D,MAAM,EAAE,QAAQ,CAAC,aAAa;gBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD,MAAM,EAAE;gBACN,UAAU,EAAE,QAAQ,CAAC,EAAE;gBACvB,QAAQ,EAAE,YAAY;gBACtB,MAAM;gBACN,SAAS,EAAE,OAAO,CAAC,EAAE;gBACrB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,SAAS,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI;gBACrE,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC/D,MAAM,EAAE,QAAQ,CAAC,aAAa;gBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,gBAAgB,CAAC,MAAc,EAAE,OAAyB;QACtE,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC/B,KAAK,EAAE;gBACL,mBAAmB,EAAE;oBACnB,UAAU,EAAE,OAAO,CAAC,EAAE;oBACtB,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,MAAM,EAAE;gBACN,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,SAAS,EAAE,OAAO,CAAC,UAAU;gBAC7B,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,YAAY,EAAE,OAAO,CAAC,aAAa;gBACnC,YAAY,EAAE,OAAO,CAAC,cAAc;gBACpC,YAAY,EAAE,OAAO,CAAC,eAAe;gBACrC,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD,MAAM,EAAE;gBACN,UAAU,EAAE,OAAO,CAAC,EAAE;gBACtB,QAAQ,EAAE,YAAY;gBACtB,MAAM;gBACN,UAAU,EAAE,OAAO,CAAC,WAAW;gBAC/B,SAAS,EAAE,OAAO,CAAC,WAAW;gBAC9B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,SAAS,EAAE,OAAO,CAAC,UAAU;gBAC7B,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,YAAY,EAAE,OAAO,CAAC,aAAa;gBACnC,YAAY,EAAE,OAAO,CAAC,cAAc;gBACpC,YAAY,EAAE,OAAO,CAAC,eAAe;gBACrC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB,CAAC,MAAc,EAAE,OAAiC;QAClF,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;YACvC,KAAK,EAAE;gBACL,wBAAwB,EAAE;oBACxB,UAAU,EAAE,OAAO,CAAC,WAAW;oBAC/B,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;oBAC5B,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,MAAM,EAAE;gBACN,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,IAAI,EAAE,OAAO,CAAC,WAAW,GAAG,OAAO,EAAE,6BAA6B;gBAClE,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,GAAG,EAAE,OAAO,CAAC,GAAG;gBAChB,UAAU,EAAE,OAAO,CAAC,WAAW,GAAG,OAAO,EAAE,6BAA6B;gBACxE,iBAAiB,EAAE,OAAO,CAAC,mBAAmB;gBAC9C,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD,MAAM,EAAE;gBACN,UAAU,EAAE,OAAO,CAAC,WAAW;gBAC/B,QAAQ,EAAE,YAAY;gBACtB,MAAM;gBACN,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;gBAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,IAAI,EAAE,OAAO,CAAC,WAAW,GAAG,OAAO;gBACnC,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,GAAG,EAAE,OAAO,CAAC,GAAG;gBAChB,UAAU,EAAE,OAAO,CAAC,WAAW,GAAG,OAAO;gBACzC,iBAAiB,EAAE,OAAO,CAAC,mBAAmB;gBAC9C,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CAAC,MAAc;QACxC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;YACnC,KAAK,EAAE;gBACL,eAAe,EAAE;oBACf,MAAM;oBACN,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,IAAI;gBAClB,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CAAC;QAEH,uBAAuB;QACvB,MAAM,QAAQ,GAAG,qBAAqB,MAAM,EAAE,CAAC;QAC/C,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEvC,eAAM,CAAC,IAAI,CAAC,gDAAgD,MAAM,EAAE,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa;QACjB,eAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAElD,IAAI,CAAC;YACH,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;gBAChE,KAAK,EAAE;oBACL,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,IAAI;iBACf;gBACD,MAAM,EAAE;oBACN,MAAM,EAAE,IAAI;oBACZ,QAAQ,EAAE,IAAI;iBACf;aACF,CAAC,CAAC;YAEH,KAAK,MAAM,WAAW,IAAI,kBAAkB,EAAE,CAAC;gBAC7C,IAAI,CAAC;oBACH,6EAA6E;oBAC7E,MAAM,iBAAiB,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;oBAChE,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,GAAG,iBAAiB,EAAE,CAAC;wBACtE,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;wBAC5C,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,8BAA8B;oBACxD,CAAC;gBACH,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,eAAM,CAAC,KAAK,CAAC,uBAAuB,WAAW,CAAC,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC;gBACnE,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,EAAU;QACtB,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;CACF;AApqBD,4CAoqBC","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts"],"sourcesContent":["import { PrismaService } from '../database/prisma.service';\nimport { CryptoService } from './crypto.service';\nimport { GoogleAdsApi, Customer, enums } from 'google-ads-api';\nimport axios from 'axios';\nimport { googleAdsConfig } from '../config/env';\nimport { logger } from '../utils/logger';\nimport { ApiError } from '../utils/errors';\n\ninterface GoogleOAuthTokens {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n  token_type: string;\n  scope: string;\n}\n\ninterface GoogleAdsAccount {\n  id: string;\n  name: string;\n  currency: string;\n  timezone: string;\n  status: string;\n  type: string;\n}\n\ninterface GoogleAdsCampaign {\n  id: string;\n  name: string;\n  status: string;\n  type: string;\n  start_date?: string;\n  end_date?: string;\n  budget_amount?: number;\n  budget_type?: string;\n  customer_id: string;\n}\n\ninterface GoogleAdsKeyword {\n  id: string;\n  text: string;\n  match_type: string;\n  status: string;\n  quality_score?: number;\n  first_page_cpc?: number;\n  top_of_page_cpc?: number;\n  campaign_id: string;\n  ad_group_id: string;\n}\n\ninterface GoogleAdsCampaignMetrics {\n  campaign_id: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  ctr: number;\n  average_cpc: number;\n  cost_per_conversion?: number;\n  date: string;\n}\n\ninterface SearchTermReport {\n  search_term: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  campaign_id: string;\n  ad_group_id: string;\n  keyword_id?: string;\n}\n\nexport class GoogleAdsService {\n  private readonly maxRetries = 3;\n  private readonly retryDelay = 1000;\n  private googleAdsClients: Map<string, GoogleAdsApi> = new Map();\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly cryptoService: CryptoService,\n  ) {}\n\n  /**\n   * Generate OAuth 2.0 authorization URL\n   */\n  generateAuthUrl(userId: string, redirectUri: string): string {\n    if (!googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    const state = this.cryptoService.encrypt(JSON.stringify({ userId, redirectUri }));\n    const scopes = ['https://www.googleapis.com/auth/adwords'];\n    \n    const params = new URLSearchParams({\n      client_id: googleAdsConfig.clientId,\n      redirect_uri: redirectUri,\n      scope: scopes.join(' '),\n      response_type: 'code',\n      access_type: 'offline',\n      prompt: 'consent',\n      state,\n    });\n\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  async exchangeCodeForToken(code: string, redirectUri: string): Promise<GoogleOAuthTokens> {\n    if (!googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: googleAdsConfig.clientId,\n        client_secret: googleAdsConfig.clientSecret,\n        code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      });\n\n      return response.data;\n    } catch (error) {\n      logger.error('Failed to exchange code for token', error);\n      throw new ApiError('Failed to exchange authorization code', 'TOKEN_EXCHANGE_FAILED', 400);\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshAccessToken(refreshToken: string): Promise<GoogleOAuthTokens> {\n    if (!googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: googleAdsConfig.clientId,\n        client_secret: googleAdsConfig.clientSecret,\n        refresh_token: refreshToken,\n        grant_type: 'refresh_token',\n      });\n\n      return {\n        ...response.data,\n        refresh_token: refreshToken, // Keep the original refresh token\n      };\n    } catch (error) {\n      logger.error('Failed to refresh access token', error);\n      throw new ApiError('Failed to refresh access token', 'TOKEN_REFRESH_FAILED', 401);\n    }\n  }\n\n  /**\n   * Store OAuth tokens securely\n   */\n  async storeTokens(userId: string, tokens: GoogleOAuthTokens): Promise<void> {\n    const encryptedAccessToken = this.cryptoService.encrypt(tokens.access_token);\n    const encryptedRefreshToken = this.cryptoService.encrypt(tokens.refresh_token);\n    const expiresAt = new Date(Date.now() + tokens.expires_in * 1000);\n\n    await this.prisma.integration.upsert({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n      create: {\n        userId,\n        platform: 'GOOGLE_ADS',\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n    });\n\n    this.logger.log(`Stored Google Ads tokens for user ${userId}`);\n  }\n\n  /**\n   * Get valid access token (refresh if needed)\n   */\n  async getAccessToken(userId: string): Promise<string> {\n    const integration = await this.prisma.integration.findUnique({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n    });\n\n    if (!integration || !integration.isActive) {\n      throw new ApiError('Google Ads integration not found or inactive', 'INTEGRATION_NOT_FOUND', 401);\n    }\n\n    // Check if token is expired\n    if (integration.expiresAt && integration.expiresAt <= new Date()) {\n      const refreshToken = this.cryptoService.decrypt(integration.refreshToken!);\n      const newTokens = await this.refreshAccessToken(refreshToken);\n      await this.storeTokens(userId, newTokens);\n      return newTokens.access_token;\n    }\n\n    return this.cryptoService.decrypt(integration.accessToken!);\n  }\n\n  /**\n   * Get Google Ads API client for user\n   */\n  private async getGoogleAdsClient(userId: string): Promise<GoogleAdsApi> {\n    if (!googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    const cacheKey = `google-ads-client-${userId}`;\n    \n    if (this.googleAdsClients.has(cacheKey)) {\n      return this.googleAdsClients.get(cacheKey)!;\n    }\n\n    const accessToken = await this.getAccessToken(userId);\n    \n    const client = new GoogleAdsApi({\n      client_id: googleAdsConfig.clientId,\n      client_secret: googleAdsConfig.clientSecret,\n      developer_token: googleAdsConfig.developerToken,\n    });\n\n    // Set the access token for the client\n    client.Customer.credentials = {\n      access_token: accessToken,\n    };\n\n    this.googleAdsClients.set(cacheKey, client);\n    return client;\n  }\n\n  /**\n   * Get accessible customer accounts\n   */\n  async getCustomerAccounts(userId: string): Promise<GoogleAdsAccount[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          customer.id,\n          customer.descriptive_name,\n          customer.currency_code,\n          customer.time_zone,\n          customer.status,\n          customer.manager\n        FROM customer\n        WHERE customer.status = 'ENABLED'\n      `;\n\n      const customers = await client.Customer().report({\n        query,\n        login_customer_id: googleAdsConfig?.loginCustomerId,\n      });\n\n      return customers.map((customer: any) => ({\n        id: customer.customer.id.toString(),\n        name: customer.customer.descriptive_name || `Customer ${customer.customer.id}`,\n        currency: customer.customer.currency_code,\n        timezone: customer.customer.time_zone,\n        status: customer.customer.status,\n        type: customer.customer.manager ? 'MANAGER' : 'CLIENT',\n      }));\n    } catch (error) {\n      logger.error('Failed to get customer accounts', error);\n      throw new ApiError('Failed to retrieve customer accounts', 'CUSTOMER_ACCOUNTS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get campaigns for a customer\n   */\n  async getCampaigns(userId: string, customerId: string): Promise<GoogleAdsCampaign[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          campaign.status,\n          campaign.advertising_channel_type,\n          campaign.start_date,\n          campaign.end_date,\n          campaign_budget.amount_micros,\n          campaign_budget.type\n        FROM campaign\n        WHERE campaign.status != 'REMOVED'\n        ORDER BY campaign.name\n      `;\n\n      const campaigns = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return campaigns.map((campaign: any) => ({\n        id: campaign.campaign.id.toString(),\n        name: campaign.campaign.name,\n        status: campaign.campaign.status,\n        type: campaign.campaign.advertising_channel_type,\n        start_date: campaign.campaign.start_date,\n        end_date: campaign.campaign.end_date,\n        budget_amount: campaign.campaign_budget?.amount_micros ? \n          parseInt(campaign.campaign_budget.amount_micros) / 1000000 : undefined,\n        budget_type: campaign.campaign_budget?.type,\n        customer_id: customerId,\n      }));\n    } catch (error) {\n      logger.error('Failed to get campaigns', error);\n      throw new ApiError('Failed to retrieve campaigns', 'CAMPAIGNS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get keywords for campaigns\n   */\n  async getKeywords(userId: string, customerId: string, campaignIds?: string[]): Promise<GoogleAdsKeyword[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let whereClause = 'ad_group_criterion.status != \"REMOVED\" AND ad_group_criterion.type = \"KEYWORD\"';\n      if (campaignIds && campaignIds.length > 0) {\n        const campaignFilter = campaignIds.map(id => `\"${id}\"`).join(',');\n        whereClause += ` AND campaign.id IN (${campaignFilter})`;\n      }\n\n      const query = `\n        SELECT \n          ad_group_criterion.criterion_id,\n          ad_group_criterion.keyword.text,\n          ad_group_criterion.keyword.match_type,\n          ad_group_criterion.status,\n          ad_group_criterion.quality_info.quality_score,\n          ad_group_criterion.position_estimates.first_page_cpc_micros,\n          ad_group_criterion.position_estimates.top_of_page_cpc_micros,\n          campaign.id,\n          ad_group.id\n        FROM keyword_view\n        WHERE ${whereClause}\n        ORDER BY ad_group_criterion.keyword.text\n      `;\n\n      const keywords = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return keywords.map((keyword: any) => ({\n        id: keyword.ad_group_criterion.criterion_id.toString(),\n        text: keyword.ad_group_criterion.keyword.text,\n        match_type: keyword.ad_group_criterion.keyword.match_type,\n        status: keyword.ad_group_criterion.status,\n        quality_score: keyword.ad_group_criterion.quality_info?.quality_score,\n        first_page_cpc: keyword.ad_group_criterion.position_estimates?.first_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.first_page_cpc_micros) / 1000000 : undefined,\n        top_of_page_cpc: keyword.ad_group_criterion.position_estimates?.top_of_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.top_of_page_cpc_micros) / 1000000 : undefined,\n        campaign_id: keyword.campaign.id.toString(),\n        ad_group_id: keyword.ad_group.id.toString(),\n      }));\n    } catch (error) {\n      logger.error('Failed to get keywords', error);\n      throw new ApiError('Failed to retrieve keywords', 'KEYWORDS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get campaign performance metrics\n   */\n  async getCampaignMetrics(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<GoogleAdsCampaignMetrics[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          campaign.id,\n          segments.date,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          metrics.ctr,\n          metrics.average_cpc\n        FROM campaign\n        WHERE campaign.status != 'REMOVED' ${dateFilter}\n        ORDER BY segments.date DESC, campaign.name\n      `;\n\n      const metrics = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return metrics.map((metric: any) => ({\n        campaign_id: metric.campaign.id.toString(),\n        impressions: parseInt(metric.metrics.impressions) || 0,\n        clicks: parseInt(metric.metrics.clicks) || 0,\n        cost_micros: parseInt(metric.metrics.cost_micros) || 0,\n        conversions: parseFloat(metric.metrics.conversions) || 0,\n        ctr: parseFloat(metric.metrics.ctr) || 0,\n        average_cpc: parseInt(metric.metrics.average_cpc) || 0,\n        cost_per_conversion: metric.metrics.conversions > 0 ?\n          parseInt(metric.metrics.cost_micros) / parseFloat(metric.metrics.conversions) / 1000000 : undefined,\n        date: metric.segments.date,\n      }));\n    } catch (error) {\n      logger.error('Failed to get campaign metrics', error);\n      throw new ApiError('Failed to retrieve campaign metrics', 'CAMPAIGN_METRICS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get search terms report\n   */\n  async getSearchTermsReport(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<SearchTermReport[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          search_term_view.search_term,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          campaign.id,\n          ad_group.id,\n          ad_group_criterion.criterion_id\n        FROM search_term_view\n        WHERE search_term_view.status != 'NONE' ${dateFilter}\n        ORDER BY metrics.impressions DESC\n      `;\n\n      const searchTerms = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return searchTerms.map((term: any) => ({\n        search_term: term.search_term_view.search_term,\n        impressions: parseInt(term.metrics.impressions) || 0,\n        clicks: parseInt(term.metrics.clicks) || 0,\n        cost_micros: parseInt(term.metrics.cost_micros) || 0,\n        conversions: parseFloat(term.metrics.conversions) || 0,\n        campaign_id: term.campaign.id.toString(),\n        ad_group_id: term.ad_group.id.toString(),\n        keyword_id: term.ad_group_criterion?.criterion_id?.toString(),\n      }));\n    } catch (error) {\n      logger.error('Failed to get search terms report', error);\n      throw new ApiError('Failed to retrieve search terms report', 'SEARCH_TERMS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Sync user data from Google Ads\n   */\n  async syncUserData(userId: string, force = false): Promise<void> {\n    try {\n      logger.info(`Starting Google Ads sync for user ${userId}`);\n      \n      const accounts = await this.getCustomerAccounts(userId);\n      \n      for (const account of accounts) {\n        if (account.type === 'CLIENT') { // Only sync client accounts, not manager accounts\n          await this.syncAccountData(userId, account);\n        }\n      }\n      \n      // Update last sync timestamp\n      await this.prisma.integration.update({\n        where: {\n          userId_platform: {\n            userId,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n        data: {\n          lastSync: new Date(),\n        },\n      });\n      \n      logger.info(`Completed Google Ads sync for user ${userId}`);\n    } catch (error) {\n      logger.error(`Failed to sync Google Ads data for user ${userId}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sync data for a specific account\n   */\n  private async syncAccountData(userId: string, account: GoogleAdsAccount): Promise<void> {\n    try {\n      // Sync campaigns\n      const campaigns = await this.getCampaigns(userId, account.id);\n      \n      for (const campaign of campaigns) {\n        await this.storeCampaignData(userId, account, campaign);\n        \n        // Sync keywords for this campaign\n        const keywords = await this.getKeywords(userId, account.id, [campaign.id]);\n        for (const keyword of keywords) {\n          await this.storeKeywordData(userId, keyword);\n        }\n        \n        // Sync metrics for the last 30 days\n        const endDate = new Date().toISOString().split('T')[0];\n        const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n        \n        const metrics = await this.getCampaignMetrics(userId, account.id, { startDate, endDate });\n        for (const metric of metrics) {\n          await this.storeCampaignMetrics(userId, metric);\n        }\n      }\n    } catch (error) {\n      logger.error(`Failed to sync account data for ${account.id}`, error);\n    }\n  }\n\n  /**\n   * Store campaign data in database\n   */\n  private async storeCampaignData(\n    userId: string,\n    account: GoogleAdsAccount,\n    campaign: GoogleAdsCampaign\n  ): Promise<void> {\n    await this.prisma.campaign.upsert({\n      where: {\n        externalId_platform: {\n          externalId: campaign.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: campaign.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        accountId: account.id,\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store keyword data in database\n   */\n  private async storeKeywordData(userId: string, keyword: GoogleAdsKeyword): Promise<void> {\n    await this.prisma.keyword.upsert({\n      where: {\n        externalId_platform: {\n          externalId: keyword.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: keyword.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        campaignId: keyword.campaign_id,\n        adGroupId: keyword.ad_group_id,\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store campaign metrics in database\n   */\n  private async storeCampaignMetrics(userId: string, metrics: GoogleAdsCampaignMetrics): Promise<void> {\n    await this.prisma.campaignMetrics.upsert({\n      where: {\n        campaignId_date_platform: {\n          campaignId: metrics.campaign_id,\n          date: new Date(metrics.date),\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000, // Convert micros to currency\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000, // Convert micros to currency\n        costPerConversion: metrics.cost_per_conversion,\n        updatedAt: new Date(),\n      },\n      create: {\n        campaignId: metrics.campaign_id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        date: new Date(metrics.date),\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000,\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000,\n        costPerConversion: metrics.cost_per_conversion,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Disconnect Google Ads integration\n   */\n  async disconnectIntegration(userId: string): Promise<void> {\n    await this.prisma.integration.update({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      data: {\n        isActive: false,\n        accessToken: null,\n        refreshToken: null,\n        expiresAt: null,\n      },\n    });\n\n    // Remove cached client\n    const cacheKey = `google-ads-client-${userId}`;\n    this.googleAdsClients.delete(cacheKey);\n\n    logger.info(`Disconnected Google Ads integration for user ${userId}`);\n  }\n\n  /**\n   * Scheduled sync job - runs every 30 minutes\n   */\n  async scheduledSync(): Promise<void> {\n    logger.info('Starting scheduled Google Ads sync');\n    \n    try {\n      const activeIntegrations = await this.prisma.integration.findMany({\n        where: {\n          platform: 'GOOGLE_ADS',\n          isActive: true,\n        },\n        select: {\n          userId: true,\n          lastSync: true,\n        },\n      });\n\n      for (const integration of activeIntegrations) {\n        try {\n          // Only sync if last sync was more than 25 minutes ago (to avoid overlapping)\n          const lastSyncThreshold = new Date(Date.now() - 25 * 60 * 1000);\n          if (!integration.lastSync || integration.lastSync < lastSyncThreshold) {\n            await this.syncUserData(integration.userId);\n            await this.delay(2000); // Rate limiting between users\n          }\n        } catch (error) {\n          logger.error(`Failed to sync user ${integration.userId}`, error);\n        }\n      }\n    } catch (error) {\n      logger.error('Failed to run scheduled sync', error);\n    }\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Clear cached clients (useful for testing or memory management)\n   */\n  clearClientCache(): void {\n    this.googleAdsClients.clear();\n  }\n}"],"version":3}