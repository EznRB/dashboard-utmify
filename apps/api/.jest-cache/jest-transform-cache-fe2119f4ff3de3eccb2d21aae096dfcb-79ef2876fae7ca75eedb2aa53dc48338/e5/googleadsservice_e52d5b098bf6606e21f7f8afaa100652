9ade87c233db5910ace41c398f31b9ef
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleAdsService = void 0;
const google_ads_api_1 = require("google-ads-api");
const axios_1 = __importDefault(require("axios"));
const env_1 = require("../config/env");
const logger_1 = require("../utils/logger");
const errors_1 = require("../utils/errors");
class GoogleAdsService {
    prisma;
    cryptoService;
    maxRetries = 3;
    retryDelay = 1000;
    googleAdsClients = new Map();
    constructor(prisma, cryptoService) {
        this.prisma = prisma;
        this.cryptoService = cryptoService;
    }
    /**
     * Generate OAuth 2.0 authorization URL
     */
    generateAuthUrl(userId, redirectUri) {
        if (!env_1.googleAdsConfig) {
            throw new errors_1.ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);
        }
        const state = this.cryptoService.encrypt(JSON.stringify({ userId, redirectUri }));
        const scopes = ['https://www.googleapis.com/auth/adwords'];
        const params = new URLSearchParams({
            client_id: env_1.googleAdsConfig.clientId,
            redirect_uri: redirectUri,
            scope: scopes.join(' '),
            response_type: 'code',
            access_type: 'offline',
            prompt: 'consent',
            state,
        });
        return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
    }
    /**
     * Exchange authorization code for tokens
     */
    async exchangeCodeForToken(code, redirectUri) {
        if (!env_1.googleAdsConfig) {
            throw new errors_1.ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);
        }
        try {
            const response = await axios_1.default.post('https://oauth2.googleapis.com/token', {
                client_id: env_1.googleAdsConfig.clientId,
                client_secret: env_1.googleAdsConfig.clientSecret,
                code,
                grant_type: 'authorization_code',
                redirect_uri: redirectUri,
            });
            return response.data;
        }
        catch (error) {
            logger_1.logger.error('Failed to exchange code for token', error);
            throw new errors_1.ApiError('Failed to exchange authorization code', 'TOKEN_EXCHANGE_FAILED', 400);
        }
    }
    /**
     * Refresh access token
     */
    async refreshAccessToken(refreshToken) {
        if (!env_1.googleAdsConfig) {
            throw new errors_1.ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);
        }
        try {
            const response = await axios_1.default.post('https://oauth2.googleapis.com/token', {
                client_id: env_1.googleAdsConfig.clientId,
                client_secret: env_1.googleAdsConfig.clientSecret,
                refresh_token: refreshToken,
                grant_type: 'refresh_token',
            });
            return {
                ...response.data,
                refresh_token: refreshToken, // Keep the original refresh token
            };
        }
        catch (error) {
            logger_1.logger.error('Failed to refresh access token', error);
            throw new errors_1.ApiError('Failed to refresh access token', 'TOKEN_REFRESH_FAILED', 401);
        }
    }
    /**
     * Store OAuth tokens securely
     */
    async storeTokens(userId, tokens) {
        const encryptedAccessToken = this.cryptoService.encrypt(tokens.access_token);
        const encryptedRefreshToken = this.cryptoService.encrypt(tokens.refresh_token);
        const expiresAt = new Date(Date.now() + tokens.expires_in * 1000);
        await this.prisma.integration.upsert({
            where: {
                userId_platform: {
                    userId,
                    platform: 'GOOGLE_ADS',
                },
            },
            update: {
                accessToken: encryptedAccessToken,
                refreshToken: encryptedRefreshToken,
                expiresAt,
                isActive: true,
                lastSync: new Date(),
            },
            create: {
                userId,
                platform: 'GOOGLE_ADS',
                accessToken: encryptedAccessToken,
                refreshToken: encryptedRefreshToken,
                expiresAt,
                isActive: true,
                lastSync: new Date(),
            },
        });
        this.logger.log(`Stored Google Ads tokens for user ${userId}`);
    }
    /**
     * Get valid access token (refresh if needed)
     */
    async getAccessToken(userId) {
        const integration = await this.prisma.integration.findUnique({
            where: {
                userId_platform: {
                    userId,
                    platform: 'GOOGLE_ADS',
                },
            },
        });
        if (!integration || !integration.isActive) {
            throw new errors_1.ApiError('Google Ads integration not found or inactive', 'INTEGRATION_NOT_FOUND', 401);
        }
        // Check if token is expired
        if (integration.expiresAt && integration.expiresAt <= new Date()) {
            const refreshToken = this.cryptoService.decrypt(integration.refreshToken);
            const newTokens = await this.refreshAccessToken(refreshToken);
            await this.storeTokens(userId, newTokens);
            return newTokens.access_token;
        }
        return this.cryptoService.decrypt(integration.accessToken);
    }
    /**
     * Get Google Ads API client for user
     */
    async getGoogleAdsClient(userId) {
        if (!env_1.googleAdsConfig) {
            throw new errors_1.ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);
        }
        const cacheKey = `google-ads-client-${userId}`;
        if (this.googleAdsClients.has(cacheKey)) {
            return this.googleAdsClients.get(cacheKey);
        }
        const accessToken = await this.getAccessToken(userId);
        const client = new google_ads_api_1.GoogleAdsApi({
            client_id: env_1.googleAdsConfig.clientId,
            client_secret: env_1.googleAdsConfig.clientSecret,
            developer_token: env_1.googleAdsConfig.developerToken,
        });
        // Set the access token for the client
        client.Customer.credentials = {
            access_token: accessToken,
        };
        this.googleAdsClients.set(cacheKey, client);
        return client;
    }
    /**
     * Get accessible customer accounts
     */
    async getCustomerAccounts(userId) {
        try {
            const client = await this.getGoogleAdsClient(userId);
            const query = `
        SELECT 
          customer.id,
          customer.descriptive_name,
          customer.currency_code,
          customer.time_zone,
          customer.status,
          customer.manager
        FROM customer
        WHERE customer.status = 'ENABLED'
      `;
            const customers = await client.Customer().report({
                query,
                login_customer_id: env_1.googleAdsConfig?.loginCustomerId,
            });
            return customers.map((customer) => ({
                id: customer.customer.id.toString(),
                name: customer.customer.descriptive_name || `Customer ${customer.customer.id}`,
                currency: customer.customer.currency_code,
                timezone: customer.customer.time_zone,
                status: customer.customer.status,
                type: customer.customer.manager ? 'MANAGER' : 'CLIENT',
            }));
        }
        catch (error) {
            logger_1.logger.error('Failed to get customer accounts', error);
            throw new errors_1.ApiError('Failed to retrieve customer accounts', 'CUSTOMER_ACCOUNTS_FAILED', 400);
        }
    }
    /**
     * Get campaigns for a customer
     */
    async getCampaigns(userId, customerId) {
        try {
            const client = await this.getGoogleAdsClient(userId);
            const query = `
        SELECT 
          campaign.id,
          campaign.name,
          campaign.status,
          campaign.advertising_channel_type,
          campaign.start_date,
          campaign.end_date,
          campaign_budget.amount_micros,
          campaign_budget.type
        FROM campaign
        WHERE campaign.status != 'REMOVED'
        ORDER BY campaign.name
      `;
            const campaigns = await client.Customer({ customer_id: customerId }).report({
                query,
            });
            return campaigns.map((campaign) => ({
                id: campaign.campaign.id.toString(),
                name: campaign.campaign.name,
                status: campaign.campaign.status,
                type: campaign.campaign.advertising_channel_type,
                start_date: campaign.campaign.start_date,
                end_date: campaign.campaign.end_date,
                budget_amount: campaign.campaign_budget?.amount_micros ?
                    parseInt(campaign.campaign_budget.amount_micros) / 1000000 : undefined,
                budget_type: campaign.campaign_budget?.type,
                customer_id: customerId,
            }));
        }
        catch (error) {
            logger_1.logger.error('Failed to get campaigns', error);
            throw new errors_1.ApiError('Failed to retrieve campaigns', 'CAMPAIGNS_FAILED', 400);
        }
    }
    /**
     * Get keywords for campaigns
     */
    async getKeywords(userId, customerId, campaignIds) {
        try {
            const client = await this.getGoogleAdsClient(userId);
            let whereClause = 'ad_group_criterion.status != "REMOVED" AND ad_group_criterion.type = "KEYWORD"';
            if (campaignIds && campaignIds.length > 0) {
                const campaignFilter = campaignIds.map(id => `"${id}"`).join(',');
                whereClause += ` AND campaign.id IN (${campaignFilter})`;
            }
            const query = `
        SELECT 
          ad_group_criterion.criterion_id,
          ad_group_criterion.keyword.text,
          ad_group_criterion.keyword.match_type,
          ad_group_criterion.status,
          ad_group_criterion.quality_info.quality_score,
          ad_group_criterion.position_estimates.first_page_cpc_micros,
          ad_group_criterion.position_estimates.top_of_page_cpc_micros,
          campaign.id,
          ad_group.id
        FROM keyword_view
        WHERE ${whereClause}
        ORDER BY ad_group_criterion.keyword.text
      `;
            const keywords = await client.Customer({ customer_id: customerId }).report({
                query,
            });
            return keywords.map((keyword) => ({
                id: keyword.ad_group_criterion.criterion_id.toString(),
                text: keyword.ad_group_criterion.keyword.text,
                match_type: keyword.ad_group_criterion.keyword.match_type,
                status: keyword.ad_group_criterion.status,
                quality_score: keyword.ad_group_criterion.quality_info?.quality_score,
                first_page_cpc: keyword.ad_group_criterion.position_estimates?.first_page_cpc_micros ?
                    parseInt(keyword.ad_group_criterion.position_estimates.first_page_cpc_micros) / 1000000 : undefined,
                top_of_page_cpc: keyword.ad_group_criterion.position_estimates?.top_of_page_cpc_micros ?
                    parseInt(keyword.ad_group_criterion.position_estimates.top_of_page_cpc_micros) / 1000000 : undefined,
                campaign_id: keyword.campaign.id.toString(),
                ad_group_id: keyword.ad_group.id.toString(),
            }));
        }
        catch (error) {
            logger_1.logger.error('Failed to get keywords', error);
            throw new errors_1.ApiError('Failed to retrieve keywords', 'KEYWORDS_FAILED', 400);
        }
    }
    /**
     * Get campaign performance metrics
     */
    async getCampaignMetrics(userId, customerId, dateRange) {
        try {
            const client = await this.getGoogleAdsClient(userId);
            let dateFilter = '';
            if (dateRange) {
                dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;
            }
            const query = `
        SELECT 
          campaign.id,
          segments.date,
          metrics.impressions,
          metrics.clicks,
          metrics.cost_micros,
          metrics.conversions,
          metrics.ctr,
          metrics.average_cpc
        FROM campaign
        WHERE campaign.status != 'REMOVED' ${dateFilter}
        ORDER BY segments.date DESC, campaign.name
      `;
            const metrics = await client.Customer({ customer_id: customerId }).report({
                query,
            });
            return metrics.map((metric) => ({
                campaign_id: metric.campaign.id.toString(),
                impressions: parseInt(metric.metrics.impressions) || 0,
                clicks: parseInt(metric.metrics.clicks) || 0,
                cost_micros: parseInt(metric.metrics.cost_micros) || 0,
                conversions: parseFloat(metric.metrics.conversions) || 0,
                ctr: parseFloat(metric.metrics.ctr) || 0,
                average_cpc: parseInt(metric.metrics.average_cpc) || 0,
                cost_per_conversion: metric.metrics.conversions > 0 ?
                    parseInt(metric.metrics.cost_micros) / parseFloat(metric.metrics.conversions) / 1000000 : undefined,
                date: metric.segments.date,
            }));
        }
        catch (error) {
            logger_1.logger.error('Failed to get campaign metrics', error);
            throw new errors_1.ApiError('Failed to retrieve campaign metrics', 'CAMPAIGN_METRICS_FAILED', 400);
        }
    }
    /**
     * Get search terms report
     */
    async getSearchTermsReport(userId, customerId, dateRange) {
        try {
            const client = await this.getGoogleAdsClient(userId);
            let dateFilter = '';
            if (dateRange) {
                dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;
            }
            const query = `
        SELECT 
          search_term_view.search_term,
          metrics.impressions,
          metrics.clicks,
          metrics.cost_micros,
          metrics.conversions,
          campaign.id,
          ad_group.id,
          ad_group_criterion.criterion_id
        FROM search_term_view
        WHERE search_term_view.status != 'NONE' ${dateFilter}
        ORDER BY metrics.impressions DESC
      `;
            const searchTerms = await client.Customer({ customer_id: customerId }).report({
                query,
            });
            return searchTerms.map((term) => ({
                search_term: term.search_term_view.search_term,
                impressions: parseInt(term.metrics.impressions) || 0,
                clicks: parseInt(term.metrics.clicks) || 0,
                cost_micros: parseInt(term.metrics.cost_micros) || 0,
                conversions: parseFloat(term.metrics.conversions) || 0,
                campaign_id: term.campaign.id.toString(),
                ad_group_id: term.ad_group.id.toString(),
                keyword_id: term.ad_group_criterion?.criterion_id?.toString(),
            }));
        }
        catch (error) {
            logger_1.logger.error('Failed to get search terms report', error);
            throw new errors_1.ApiError('Failed to retrieve search terms report', 'SEARCH_TERMS_FAILED', 400);
        }
    }
    /**
     * Sync user data from Google Ads
     */
    async syncUserData(userId, force = false) {
        try {
            logger_1.logger.info(`Starting Google Ads sync for user ${userId}`);
            const accounts = await this.getCustomerAccounts(userId);
            for (const account of accounts) {
                if (account.type === 'CLIENT') { // Only sync client accounts, not manager accounts
                    await this.syncAccountData(userId, account);
                }
            }
            // Update last sync timestamp
            await this.prisma.integration.update({
                where: {
                    userId_platform: {
                        userId,
                        platform: 'GOOGLE_ADS',
                    },
                },
                data: {
                    lastSync: new Date(),
                },
            });
            logger_1.logger.info(`Completed Google Ads sync for user ${userId}`);
        }
        catch (error) {
            logger_1.logger.error(`Failed to sync Google Ads data for user ${userId}`, error);
            throw error;
        }
    }
    /**
     * Sync data for a specific account
     */
    async syncAccountData(userId, account) {
        try {
            // Sync campaigns
            const campaigns = await this.getCampaigns(userId, account.id);
            for (const campaign of campaigns) {
                await this.storeCampaignData(userId, account, campaign);
                // Sync keywords for this campaign
                const keywords = await this.getKeywords(userId, account.id, [campaign.id]);
                for (const keyword of keywords) {
                    await this.storeKeywordData(userId, keyword);
                }
                // Sync metrics for the last 30 days
                const endDate = new Date().toISOString().split('T')[0];
                const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
                const metrics = await this.getCampaignMetrics(userId, account.id, { startDate, endDate });
                for (const metric of metrics) {
                    await this.storeCampaignMetrics(userId, metric);
                }
            }
        }
        catch (error) {
            logger_1.logger.error(`Failed to sync account data for ${account.id}`, error);
        }
    }
    /**
     * Store campaign data in database
     */
    async storeCampaignData(userId, account, campaign) {
        await this.prisma.campaign.upsert({
            where: {
                externalId_platform: {
                    externalId: campaign.id,
                    platform: 'GOOGLE_ADS',
                },
            },
            update: {
                name: campaign.name,
                status: campaign.status,
                type: campaign.type,
                startDate: campaign.start_date ? new Date(campaign.start_date) : null,
                endDate: campaign.end_date ? new Date(campaign.end_date) : null,
                budget: campaign.budget_amount,
                updatedAt: new Date(),
            },
            create: {
                externalId: campaign.id,
                platform: 'GOOGLE_ADS',
                userId,
                accountId: account.id,
                name: campaign.name,
                status: campaign.status,
                type: campaign.type,
                startDate: campaign.start_date ? new Date(campaign.start_date) : null,
                endDate: campaign.end_date ? new Date(campaign.end_date) : null,
                budget: campaign.budget_amount,
                createdAt: new Date(),
                updatedAt: new Date(),
            },
        });
    }
    /**
     * Store keyword data in database
     */
    async storeKeywordData(userId, keyword) {
        await this.prisma.keyword.upsert({
            where: {
                externalId_platform: {
                    externalId: keyword.id,
                    platform: 'GOOGLE_ADS',
                },
            },
            update: {
                text: keyword.text,
                matchType: keyword.match_type,
                status: keyword.status,
                qualityScore: keyword.quality_score,
                firstPageCpc: keyword.first_page_cpc,
                topOfPageCpc: keyword.top_of_page_cpc,
                updatedAt: new Date(),
            },
            create: {
                externalId: keyword.id,
                platform: 'GOOGLE_ADS',
                userId,
                campaignId: keyword.campaign_id,
                adGroupId: keyword.ad_group_id,
                text: keyword.text,
                matchType: keyword.match_type,
                status: keyword.status,
                qualityScore: keyword.quality_score,
                firstPageCpc: keyword.first_page_cpc,
                topOfPageCpc: keyword.top_of_page_cpc,
                createdAt: new Date(),
                updatedAt: new Date(),
            },
        });
    }
    /**
     * Store campaign metrics in database
     */
    async storeCampaignMetrics(userId, metrics) {
        await this.prisma.campaignMetrics.upsert({
            where: {
                campaignId_date_platform: {
                    campaignId: metrics.campaign_id,
                    date: new Date(metrics.date),
                    platform: 'GOOGLE_ADS',
                },
            },
            update: {
                impressions: metrics.impressions,
                clicks: metrics.clicks,
                cost: metrics.cost_micros / 1000000, // Convert micros to currency
                conversions: metrics.conversions,
                ctr: metrics.ctr,
                averageCpc: metrics.average_cpc / 1000000, // Convert micros to currency
                costPerConversion: metrics.cost_per_conversion,
                updatedAt: new Date(),
            },
            create: {
                campaignId: metrics.campaign_id,
                platform: 'GOOGLE_ADS',
                userId,
                date: new Date(metrics.date),
                impressions: metrics.impressions,
                clicks: metrics.clicks,
                cost: metrics.cost_micros / 1000000,
                conversions: metrics.conversions,
                ctr: metrics.ctr,
                averageCpc: metrics.average_cpc / 1000000,
                costPerConversion: metrics.cost_per_conversion,
                createdAt: new Date(),
                updatedAt: new Date(),
            },
        });
    }
    /**
     * Disconnect Google Ads integration
     */
    async disconnectIntegration(userId) {
        await this.prisma.integration.update({
            where: {
                userId_platform: {
                    userId,
                    platform: 'GOOGLE_ADS',
                },
            },
            data: {
                isActive: false,
                accessToken: null,
                refreshToken: null,
                expiresAt: null,
            },
        });
        // Remove cached client
        const cacheKey = `google-ads-client-${userId}`;
        this.googleAdsClients.delete(cacheKey);
        logger_1.logger.info(`Disconnected Google Ads integration for user ${userId}`);
    }
    /**
     * Scheduled sync job - runs every 30 minutes
     */
    async scheduledSync() {
        logger_1.logger.info('Starting scheduled Google Ads sync');
        try {
            const activeIntegrations = await this.prisma.integration.findMany({
                where: {
                    platform: 'GOOGLE_ADS',
                    isActive: true,
                },
                select: {
                    userId: true,
                    lastSync: true,
                },
            });
            for (const integration of activeIntegrations) {
                try {
                    // Only sync if last sync was more than 25 minutes ago (to avoid overlapping)
                    const lastSyncThreshold = new Date(Date.now() - 25 * 60 * 1000);
                    if (!integration.lastSync || integration.lastSync < lastSyncThreshold) {
                        await this.syncUserData(integration.userId);
                        await this.delay(2000); // Rate limiting between users
                    }
                }
                catch (error) {
                    logger_1.logger.error(`Failed to sync user ${integration.userId}`, error);
                }
            }
        }
        catch (error) {
            logger_1.logger.error('Failed to run scheduled sync', error);
        }
    }
    /**
     * Utility method to add delay
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    /**
     * Clear cached clients (useful for testing or memory management)
     */
    clearClientCache() {
        this.googleAdsClients.clear();
    }
}
exports.GoogleAdsService = GoogleAdsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,