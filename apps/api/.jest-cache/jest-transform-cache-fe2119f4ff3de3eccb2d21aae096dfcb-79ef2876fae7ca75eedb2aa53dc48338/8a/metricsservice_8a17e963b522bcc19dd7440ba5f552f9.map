{"version":3,"names":["cov_1ooxeg0p2z","actualCoverage","s","cache_service_1","require","stored_procedures_service_1","logger_1","MetricsService","prisma","cache","getCacheService","storedProcedures","useStoredProcedures","storedProceduresChecked","constructor","f","getStoredProceduresService","calculateMetrics","filters","cacheKey","generateCacheKey","getOrSet","logger","info","ensureStoredProceduresChecked","b","result","calculateKPIMetrics","organizationId","campaignIds","startDate","endDate","mapStoredProcedureResult","error","warn","calculateMetricsFromDB","ttl","CACHE_TTL","METRICS","prefix","CACHE_PREFIXES","getDashboardMetrics","dateRange","generateDashboardMetrics","DASHBOARD","getFunnelAnalysis","campaignId","calculateFunnelAnalysis","FUNNEL","compareMetrics","previousPeriod","calculateComparison","COMPARISON","updateRealTimeMetrics","eventType","eventData","now","Date","hourStart","getFullYear","getMonth","getDate","getHours","metricsHourly","upsert","where","campaignId_hour","hour","update","clicks","increment","conversions","revenue","value","impressions","updatedAt","create","adSpend","createdAt","invalidateCampaignCache","debug","targetCampaignIds","length","campaigns","campaign","findMany","select","id","map","c","getEmptyMetrics","dailyMetrics","campaignMetrics","aggregate","campaignExternalId","in","date","gte","lte","_sum","spend","sums","ctr","conversionRate","cpc","cpm","cac","roas","roi","profit","margin","arpu","ltv","summary","trends","calculateTrends","topCampaigns","getTopCampaigns","alerts","generateAlerts","daysDiff","Math","ceil","getTime","intervalDays","max","floor","i","periodStart","setDate","periodEnd","setTime","metrics","push","period","toISOString","split","limit","name","Promise","all","campaignName","sort","a","slice","type","message","metric","threshold","funnelData","funnelStage","orderBy","stageOrder","stageMap","Map","forEach","stage","existing","get","stageName","users","set","stages","Array","from","entries","data","funnelStages","previousUsers","index","dropoffRate","current","previous","changes","Object","keys","key","currentValue","previousValue","absolute","percentage","operation","hash","Buffer","JSON","stringify","toString","invalidateCampaign","invalidateOrganizationCache","invalidateOrganization","exportMetrics","format","filename","toLowerCase","formatForExport","EXPORT","headers","join","values","checkStoredProceduresAvailability","health","checkStoredProceduresHealth","available","missing","Number","ad_spend","conversion_rate","getStoredProceduresStats","getPerformanceStats","refreshStoredProceduresStatus","getMetricsHistory","groupBy","generateMetricsHistory","groupMetricsByPeriod","grouped","weekStart","getDay","String","padStart","has","group","round","localeCompare","exports"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts"],"sourcesContent":["import { PrismaService } from '../database/prisma.service';\nimport { getCacheService, CACHE_PREFIXES, CACHE_TTL, Cached } from './cache.service';\nimport { getStoredProceduresService, StoredProceduresService } from './stored-procedures.service';\nimport { logger } from '../utils/logger';\n\n// Metrics calculation interfaces\nexport interface MetricsFilters {\n  campaignIds?: string[];\n  startDate: Date;\n  endDate: Date;\n  metricsTypes?: string[];\n  organizationId: string;\n  groupBy?: 'day' | 'hour' | 'campaign' | 'platform';\n}\n\nexport interface KPIMetrics {\n  // Revenue metrics\n  revenue: number;\n  roas: number; // Return on Ad Spend\n  roi: number; // Return on Investment\n  \n  // Cost metrics\n  adSpend: number;\n  cpc: number; // Cost Per Click\n  cpm: number; // Cost Per Mille (1000 impressions)\n  cac: number; // Customer Acquisition Cost\n  \n  // Performance metrics\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  ctr: number; // Click Through Rate\n  conversionRate: number;\n  \n  // Customer metrics\n  ltv: number; // Lifetime Value\n  arpu: number; // Average Revenue Per User\n  \n  // Profitability\n  margin: number;\n  profit: number;\n}\n\nexport interface DashboardMetrics {\n  summary: KPIMetrics;\n  trends: {\n    period: string;\n    metrics: KPIMetrics;\n  }[];\n  topCampaigns: {\n    campaignId: string;\n    campaignName: string;\n    metrics: KPIMetrics;\n  }[];\n  alerts: {\n    type: 'warning' | 'critical';\n    message: string;\n    metric: string;\n    value: number;\n    threshold: number;\n  }[];\n}\n\nexport interface FunnelStage {\n  stage: string;\n  users: number;\n  conversionRate: number;\n  dropoffRate: number;\n}\n\nexport interface ComparisonResult {\n  current: KPIMetrics;\n  previous: KPIMetrics;\n  changes: {\n    [key in keyof KPIMetrics]: {\n      absolute: number;\n      percentage: number;\n    };\n  };\n}\n\nexport class MetricsService {\n  private cache = getCacheService();\n  private storedProcedures: StoredProceduresService;\n  private useStoredProcedures = true; // Flag to enable/disable stored procedures\n  private storedProceduresChecked = false;\n\n  constructor(private prisma: PrismaService) {\n    this.storedProcedures = getStoredProceduresService(prisma);\n  }\n\n  // Calculate comprehensive metrics\n  public async calculateMetrics(filters: MetricsFilters): Promise<KPIMetrics> {\n    const cacheKey = this.generateCacheKey('calculate', filters);\n    \n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Calculating metrics from database', { filters });\n        \n        // Ensure stored procedures availability is checked\n        await this.ensureStoredProceduresChecked();\n        \n        // Try stored procedure first if available\n        if (this.useStoredProcedures) {\n          try {\n            const result = await this.storedProcedures.calculateKPIMetrics(\n              filters.organizationId,\n              filters.campaignIds,\n              filters.startDate,\n              filters.endDate\n            );\n            \n            if (result) {\n              return this.mapStoredProcedureResult(result);\n            }\n          } catch (error) {\n            logger.warn('Stored procedure failed, falling back to TypeScript calculation:', error);\n          }\n        }\n        \n        // Fallback to TypeScript calculation\n        return this.calculateMetricsFromDB(filters);\n      },\n      {\n        ttl: CACHE_TTL.METRICS,\n        prefix: CACHE_PREFIXES.METRICS,\n      }\n    );\n  }\n\n  // Get dashboard metrics with caching\n  public async getDashboardMetrics(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<DashboardMetrics> {\n    const cacheKey = this.generateCacheKey('dashboard', {\n      organizationId,\n      ...dateRange,\n      campaignIds,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating dashboard metrics', { organizationId, dateRange });\n        return this.generateDashboardMetrics(organizationId, dateRange, campaignIds);\n      },\n      {\n        ttl: CACHE_TTL.DASHBOARD,\n        prefix: CACHE_PREFIXES.DASHBOARD,\n      }\n    );\n  }\n\n  // Get funnel analysis with caching\n  public async getFunnelAnalysis(\n    campaignId: string,\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date }\n  ): Promise<FunnelStage[]> {\n    const cacheKey = this.generateCacheKey('funnel', {\n      campaignId,\n      organizationId,\n      ...dateRange,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Calculating funnel analysis', { campaignId, dateRange });\n        return this.calculateFunnelAnalysis(campaignId, organizationId, dateRange);\n      },\n      {\n        ttl: CACHE_TTL.FUNNEL,\n        prefix: CACHE_PREFIXES.FUNNEL,\n      }\n    );\n  }\n\n  // Compare metrics between periods\n  public async compareMetrics(\n    filters: MetricsFilters,\n    previousPeriod: { startDate: Date; endDate: Date }\n  ): Promise<ComparisonResult> {\n    const cacheKey = this.generateCacheKey('comparison', {\n      ...filters,\n      previousPeriod,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Comparing metrics between periods', { filters, previousPeriod });\n        return this.calculateComparison(filters, previousPeriod);\n      },\n      {\n        ttl: CACHE_TTL.COMPARISON,\n        prefix: CACHE_PREFIXES.COMPARISON,\n      }\n    );\n  }\n\n  // Update real-time metrics (no caching for real-time data)\n  public async updateRealTimeMetrics(\n    campaignId: string,\n    eventType: 'CLICK' | 'CONVERSION' | 'VIEW',\n    eventData: Record<string, any>\n  ): Promise<void> {\n    try {\n      // Update hourly metrics\n      const now = new Date();\n      const hourStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());\n\n      await this.prisma.metricsHourly.upsert({\n        where: {\n          campaignId_hour: {\n            campaignId,\n            hour: hourStart,\n          },\n        },\n        update: {\n          ...(eventType === 'CLICK' && { clicks: { increment: 1 } }),\n          ...(eventType === 'CONVERSION' && { \n            conversions: { increment: 1 },\n            revenue: { increment: eventData.value || 0 },\n          }),\n          ...(eventType === 'VIEW' && { impressions: { increment: 1 } }),\n          updatedAt: now,\n        },\n        create: {\n          campaignId,\n          hour: hourStart,\n          impressions: eventType === 'VIEW' ? 1 : 0,\n          clicks: eventType === 'CLICK' ? 1 : 0,\n          conversions: eventType === 'CONVERSION' ? 1 : 0,\n          revenue: eventType === 'CONVERSION' ? (eventData.value || 0) : 0,\n          adSpend: 0,\n          createdAt: now,\n          updatedAt: now,\n        },\n      });\n\n      // Invalidate related cache\n      await this.invalidateCampaignCache(campaignId);\n\n      logger.debug(`Real-time metrics updated for campaign ${campaignId}`, {\n        eventType,\n        eventData,\n      });\n    } catch (error) {\n      logger.error('Failed to update real-time metrics:', error);\n      throw error;\n    }\n  }\n\n  // Private methods for actual calculations\n  private async calculateMetricsFromDB(filters: MetricsFilters): Promise<KPIMetrics> {\n    const { campaignIds, startDate, endDate, organizationId } = filters;\n\n    // Get campaigns if not specified\n    let targetCampaignIds = campaignIds;\n    if (!targetCampaignIds || targetCampaignIds.length === 0) {\n      const campaigns = await this.prisma.campaign.findMany({\n        where: { organizationId },\n        select: { id: true },\n      });\n      targetCampaignIds = campaigns.map(c => c.id);\n    }\n\n    if (targetCampaignIds.length === 0) {\n      return this.getEmptyMetrics();\n    }\n\n    // Aggregate daily metrics\n    const dailyMetrics = await this.prisma.campaignMetrics.aggregate({\n      where: {\n        campaignExternalId: { in: targetCampaignIds },\n        date: {\n          gte: startDate,\n          lte: endDate,\n        },\n      },\n      _sum: {\n        impressions: true,\n        clicks: true,\n        conversions: true,\n        spend: true,\n      },\n    });\n\n    const sums = dailyMetrics._sum;\n    const impressions = sums.impressions || 0;\n    const clicks = sums.clicks || 0;\n    const conversions = sums.conversions || 0;\n    const revenue = 0; // Revenue not available in CampaignMetrics\n    const adSpend = sums.spend || 0;\n\n    // Calculate derived metrics\n    const ctr = impressions > 0 ? (clicks / impressions) * 100 : 0;\n    const conversionRate = clicks > 0 ? (conversions / clicks) * 100 : 0;\n    const cpc = clicks > 0 ? adSpend / clicks : 0;\n    const cpm = impressions > 0 ? (adSpend / impressions) * 1000 : 0;\n    const cac = conversions > 0 ? adSpend / conversions : 0;\n    const roas = adSpend > 0 ? (revenue / adSpend) * 100 : 0;\n    const roi = adSpend > 0 ? ((revenue - adSpend) / adSpend) * 100 : 0;\n    const profit = revenue - adSpend;\n    const margin = revenue > 0 ? (profit / revenue) * 100 : 0;\n    const arpu = conversions > 0 ? revenue / conversions : 0;\n    \n    // LTV calculation (simplified - could be more complex based on business model)\n    const ltv = arpu * 2.5; // Assuming 2.5x multiplier for LTV\n\n    return {\n      revenue,\n      roas,\n      roi,\n      adSpend,\n      cpc,\n      cpm,\n      cac,\n      impressions,\n      clicks,\n      conversions,\n      ctr,\n      conversionRate,\n      ltv,\n      arpu,\n      margin,\n      profit,\n    };\n  }\n\n  private async generateDashboardMetrics(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<DashboardMetrics> {\n    // Get summary metrics\n    const summary = await this.calculateMetrics({\n      organizationId,\n      startDate: dateRange.startDate,\n      endDate: dateRange.endDate,\n      campaignIds,\n    });\n\n    // Get trends (last 7 days)\n    const trends = await this.calculateTrends(organizationId, dateRange, campaignIds);\n\n    // Get top campaigns\n    const topCampaigns = await this.getTopCampaigns(organizationId, dateRange, 5);\n\n    // Generate alerts\n    const alerts = this.generateAlerts(summary);\n\n    return {\n      summary,\n      trends,\n      topCampaigns,\n      alerts,\n    };\n  }\n\n  private async calculateTrends(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<{ period: string; metrics: KPIMetrics }[]> {\n    const trends = [];\n    const daysDiff = Math.ceil((dateRange.endDate.getTime() - dateRange.startDate.getTime()) / (1000 * 60 * 60 * 24));\n    const intervalDays = Math.max(1, Math.floor(daysDiff / 7)); // Max 7 data points\n\n    for (let i = 0; i < 7 && i * intervalDays < daysDiff; i++) {\n      const periodStart = new Date(dateRange.startDate);\n      periodStart.setDate(periodStart.getDate() + (i * intervalDays));\n      \n      const periodEnd = new Date(periodStart);\n      periodEnd.setDate(periodEnd.getDate() + intervalDays - 1);\n      \n      if (periodEnd > dateRange.endDate) {\n        periodEnd.setTime(dateRange.endDate.getTime());\n      }\n\n      const metrics = await this.calculateMetrics({\n        organizationId,\n        startDate: periodStart,\n        endDate: periodEnd,\n        campaignIds,\n      });\n\n      trends.push({\n        period: periodStart.toISOString().split('T')[0],\n        metrics,\n      });\n    }\n\n    return trends;\n  }\n\n  private async getTopCampaigns(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    limit: number\n  ): Promise<{ campaignId: string; campaignName: string; metrics: KPIMetrics }[]> {\n    // Get campaigns with their metrics\n    const campaigns = await this.prisma.campaign.findMany({\n      where: { organizationId },\n      select: { id: true, name: true },\n    });\n\n    const campaignMetrics = await Promise.all(\n      campaigns.map(async (campaign) => {\n        const metrics = await this.calculateMetrics({\n          organizationId,\n          startDate: dateRange.startDate,\n          endDate: dateRange.endDate,\n          campaignIds: [campaign.id],\n        });\n\n        return {\n          campaignId: campaign.id,\n          campaignName: campaign.name,\n          metrics,\n        };\n      })\n    );\n\n    // Sort by revenue and return top campaigns\n    return campaignMetrics\n      .sort((a, b) => b.metrics.revenue - a.metrics.revenue)\n      .slice(0, limit);\n  }\n\n  private generateAlerts(metrics: KPIMetrics): DashboardMetrics['alerts'] {\n    const alerts: DashboardMetrics['alerts'] = [];\n\n    // ROAS alert\n    if (metrics.roas < 200) {\n      alerts.push({\n        type: metrics.roas < 100 ? 'critical' : 'warning',\n        message: 'ROAS is below target threshold',\n        metric: 'roas',\n        value: metrics.roas,\n        threshold: 200,\n      });\n    }\n\n    // Conversion rate alert\n    if (metrics.conversionRate < 2) {\n      alerts.push({\n        type: metrics.conversionRate < 1 ? 'critical' : 'warning',\n        message: 'Conversion rate is below target threshold',\n        metric: 'conversionRate',\n        value: metrics.conversionRate,\n        threshold: 2,\n      });\n    }\n\n    // CTR alert\n    if (metrics.ctr < 1) {\n      alerts.push({\n        type: metrics.ctr < 0.5 ? 'critical' : 'warning',\n        message: 'Click-through rate is below target threshold',\n        metric: 'ctr',\n        value: metrics.ctr,\n        threshold: 1,\n      });\n    }\n\n    return alerts;\n  }\n\n  private async calculateFunnelAnalysis(\n    campaignId: string,\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date }\n  ): Promise<FunnelStage[]> {\n    // Get funnel stages from database\n    const funnelData = await this.prisma.funnelStage.findMany({\n      where: {\n        campaignId,\n        date: {\n          gte: dateRange.startDate,\n          lte: dateRange.endDate,\n        },\n      },\n      orderBy: { stageOrder: 'asc' },\n    });\n\n    // Aggregate by stage\n    const stageMap = new Map<string, { users: number; stageOrder: number }>();\n    \n    funnelData.forEach(stage => {\n      const existing = stageMap.get(stage.stageName) || { users: 0, stageOrder: stage.stageOrder };\n      existing.users += stage.users;\n      stageMap.set(stage.stageName, existing);\n    });\n\n    // Convert to array and calculate rates\n    const stages = Array.from(stageMap.entries())\n      .map(([stageName, data]) => ({ stageName, ...data }))\n      .sort((a, b) => a.stageOrder - b.stageOrder);\n\n    const funnelStages: FunnelStage[] = [];\n    let previousUsers = 0;\n\n    stages.forEach((stage, index) => {\n      const conversionRate = index === 0 ? 100 : previousUsers > 0 ? (stage.users / previousUsers) * 100 : 0;\n      const dropoffRate = 100 - conversionRate;\n\n      funnelStages.push({\n        stage: stage.stageName,\n        users: stage.users,\n        conversionRate,\n        dropoffRate,\n      });\n\n      previousUsers = stage.users;\n    });\n\n    return funnelStages;\n  }\n\n  private async calculateComparison(\n    filters: MetricsFilters,\n    previousPeriod: { startDate: Date; endDate: Date }\n  ): Promise<ComparisonResult> {\n    const [current, previous] = await Promise.all([\n      this.calculateMetrics(filters),\n      this.calculateMetrics({\n        ...filters,\n        startDate: previousPeriod.startDate,\n        endDate: previousPeriod.endDate,\n      }),\n    ]);\n\n    const changes = {} as ComparisonResult['changes'];\n    \n    (Object.keys(current) as (keyof KPIMetrics)[]).forEach(key => {\n      const currentValue = current[key];\n      const previousValue = previous[key];\n      const absolute = currentValue - previousValue;\n      const percentage = previousValue !== 0 ? (absolute / previousValue) * 100 : 0;\n      \n      changes[key] = { absolute, percentage };\n    });\n\n    return { current, previous, changes };\n  }\n\n  private getEmptyMetrics(): KPIMetrics {\n    return {\n      revenue: 0,\n      roas: 0,\n      roi: 0,\n      adSpend: 0,\n      cpc: 0,\n      cpm: 0,\n      cac: 0,\n      impressions: 0,\n      clicks: 0,\n      conversions: 0,\n      ctr: 0,\n      conversionRate: 0,\n      ltv: 0,\n      arpu: 0,\n      margin: 0,\n      profit: 0,\n    };\n  }\n\n  private generateCacheKey(operation: string, data: any): string {\n    const hash = Buffer.from(JSON.stringify(data)).toString('base64').slice(0, 32);\n    return `${operation}:${hash}`;\n  }\n\n  // Cache invalidation methods\n  public async invalidateCampaignCache(campaignId: string): Promise<void> {\n    await this.cache.invalidateCampaign(campaignId);\n  }\n\n  public async invalidateOrganizationCache(organizationId: string): Promise<void> {\n    await this.cache.invalidateOrganization(organizationId);\n  }\n\n  // Export data (with caching for large exports)\n  public async exportMetrics(\n    filters: MetricsFilters,\n    format: 'CSV' | 'XLSX' | 'JSON'\n  ): Promise<{ data: any; filename: string }> {\n    const cacheKey = this.generateCacheKey('export', { ...filters, format });\n    \n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating metrics export', { filters, format });\n        \n        const metrics = await this.calculateMetrics(filters);\n        const filename = `metrics_export_${Date.now()}.${format.toLowerCase()}`;\n        \n        return {\n          data: format === 'JSON' ? metrics : this.formatForExport(metrics, format),\n          filename,\n        };\n      },\n      {\n        ttl: CACHE_TTL.EXPORT,\n        prefix: CACHE_PREFIXES.EXPORT,\n      }\n    );\n  }\n\n  private formatForExport(metrics: KPIMetrics, format: 'CSV' | 'XLSX'): string {\n    if (format === 'CSV') {\n      const headers = Object.keys(metrics).join(',');\n      const values = Object.values(metrics).join(',');\n      return `${headers}\\n${values}`;\n    }\n    \n    // For XLSX, return JSON that can be converted to Excel\n    return JSON.stringify([metrics]);\n  }\n\n  // Ensure stored procedures availability is checked\n  private async ensureStoredProceduresChecked(): Promise<void> {\n    if (this.storedProceduresChecked) {\n      return;\n    }\n    \n    await this.checkStoredProceduresAvailability();\n    this.storedProceduresChecked = true;\n  }\n\n  // Check if stored procedures are available\n  private async checkStoredProceduresAvailability(): Promise<void> {\n    try {\n      const health = await this.storedProcedures.checkStoredProceduresHealth();\n      this.useStoredProcedures = health.available;\n      \n      if (!health.available) {\n        logger.warn('Stored procedures not available, using TypeScript fallback', {\n          missing: health.missing,\n        });\n      } else {\n        logger.info('Stored procedures are available and will be used for optimization');\n      }\n    } catch (error) {\n      logger.error('Error checking stored procedures health:', error);\n      this.useStoredProcedures = false;\n    }\n  }\n\n  // Map stored procedure result to KPIMetrics interface\n  private mapStoredProcedureResult(result: any): KPIMetrics {\n    return {\n      revenue: Number(result.revenue) || 0,\n      roas: Number(result.roas) || 0,\n      roi: Number(result.roi) || 0,\n      adSpend: Number(result.ad_spend) || 0,\n      cpc: Number(result.cpc) || 0,\n      cpm: Number(result.cpm) || 0,\n      cac: Number(result.cac) || 0,\n      impressions: Number(result.impressions) || 0,\n      clicks: Number(result.clicks) || 0,\n      conversions: Number(result.conversions) || 0,\n      ctr: Number(result.ctr) || 0,\n      conversionRate: Number(result.conversion_rate) || 0,\n      ltv: Number(result.ltv) || 0,\n      arpu: Number(result.arpu) || 0,\n      margin: Number(result.margin) || 0,\n      profit: Number(result.profit) || 0,\n    };\n  }\n\n  // Get stored procedures performance stats\n  public async getStoredProceduresStats(): Promise<any[]> {\n    if (!this.useStoredProcedures) {\n      return [];\n    }\n    \n    try {\n      return await this.storedProcedures.getPerformanceStats();\n    } catch (error) {\n      logger.error('Error getting stored procedures stats:', error);\n      return [];\n    }\n  }\n\n  // Force refresh stored procedures availability\n  public async refreshStoredProceduresStatus(): Promise<boolean> {\n    await this.checkStoredProceduresAvailability();\n    return this.useStoredProcedures;\n  }\n\n  // Get metrics history with grouping\n  public async getMetricsHistory(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    campaignIds?: string[],\n    groupBy: 'day' | 'week' | 'month' = 'day'\n  ): Promise<any[]> {\n    const cacheKey = this.generateCacheKey('history', {\n      organizationId,\n      startDate,\n      endDate,\n      campaignIds,\n      groupBy,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating metrics history', { organizationId, startDate, endDate, groupBy });\n        return this.generateMetricsHistory(organizationId, startDate, endDate, campaignIds, groupBy);\n      },\n      {\n        ttl: CACHE_TTL.METRICS,\n        prefix: CACHE_PREFIXES.METRICS,\n      }\n    );\n  }\n\n  // Generate metrics history data\n  private async generateMetricsHistory(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    campaignIds?: string[],\n    groupBy: 'day' | 'week' | 'month' = 'day'\n  ): Promise<any[]> {\n    try {\n      // Get campaigns if not specified\n      let targetCampaignIds = campaignIds;\n      if (!targetCampaignIds || targetCampaignIds.length === 0) {\n        const campaigns = await this.prisma.campaign.findMany({\n          where: { organizationId },\n          select: { id: true },\n        });\n        targetCampaignIds = campaigns.map(c => c.id);\n      }\n\n      if (targetCampaignIds.length === 0) {\n        return [];\n      }\n\n      // Query daily metrics\n      const dailyMetrics = await this.prisma.campaignMetrics.findMany({\n        where: {\n          campaignExternalId: { in: targetCampaignIds },\n          date: {\n            gte: startDate,\n            lte: endDate,\n          },\n        },\n        orderBy: {\n          date: 'asc',\n        },\n      });\n\n      // Group data based on groupBy parameter\n      return this.groupMetricsByPeriod(dailyMetrics, groupBy);\n    } catch (error) {\n      logger.error('Failed to generate metrics history:', error);\n      throw error;\n    }\n  }\n\n  // Group metrics by time period\n  private groupMetricsByPeriod(metrics: any[], groupBy: 'day' | 'week' | 'month'): any[] {\n    const grouped = new Map<string, any>();\n\n    metrics.forEach(metric => {\n      let key: string;\n      const date = new Date(metric.date);\n\n      switch (groupBy) {\n        case 'day':\n          key = date.toISOString().split('T')[0];\n          break;\n        case 'week':\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          key = weekStart.toISOString().split('T')[0];\n          break;\n        case 'month':\n          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          break;\n        default:\n          key = date.toISOString().split('T')[0];\n      }\n\n      if (!grouped.has(key)) {\n        grouped.set(key, {\n          date: key,\n          impressions: 0,\n          clicks: 0,\n          conversions: 0,\n          revenue: 0,\n          adSpend: 0,\n          ctr: 0,\n          cpc: 0,\n          cpm: 0,\n          conversionRate: 0,\n          roas: 0,\n        });\n      }\n\n      const group = grouped.get(key);\n      group.impressions += metric.impressions || 0;\n      group.clicks += metric.clicks || 0;\n      group.conversions += metric.conversions || 0;\n      group.revenue += 0; // Revenue not available in CampaignMetrics\n      group.adSpend += metric.spend || 0;\n    });\n\n    // Calculate derived metrics\n    const result = Array.from(grouped.values()).map(group => {\n      group.ctr = group.impressions > 0 ? (group.clicks / group.impressions) * 100 : 0;\n      group.cpc = group.clicks > 0 ? group.adSpend / group.clicks : 0;\n      group.cpm = group.impressions > 0 ? (group.adSpend / group.impressions) * 1000 : 0;\n      group.conversionRate = group.clicks > 0 ? (group.conversions / group.clicks) * 100 : 0;\n      group.roas = group.adSpend > 0 ? group.revenue / group.adSpend : 0;\n      \n      // Round numbers to 2 decimal places\n      Object.keys(group).forEach(key => {\n        if (typeof group[key] === 'number' && key !== 'impressions' && key !== 'clicks' && key !== 'conversions') {\n          group[key] = Math.round(group[key] * 100) / 100;\n        }\n      });\n      \n      return group;\n    });\n\n    return result.sort((a, b) => a.date.localeCompare(b.date));\n  }\n}"],"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","ignoreList":[]}