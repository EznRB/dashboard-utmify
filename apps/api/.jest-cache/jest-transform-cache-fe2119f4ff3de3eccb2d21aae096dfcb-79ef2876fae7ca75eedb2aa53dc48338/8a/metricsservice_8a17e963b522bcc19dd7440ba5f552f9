da7b06565a1b0852ed76ad9c0141c6f9
"use strict";

/* istanbul ignore next */
function cov_1ooxeg0p2z() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts";
  var hash = "16a810a84547317e3c867915cac15140a2b69499";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 24
        },
        end: {
          line: 4,
          column: 50
        }
      },
      "3": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 74
        }
      },
      "4": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "5": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 9,
          column: 50
        }
      },
      "6": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 11,
          column: 30
        }
      },
      "7": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 35
        }
      },
      "8": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 29
        }
      },
      "9": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 100
        }
      },
      "10": {
        start: {
          line: 19,
          column: 25
        },
        end: {
          line: 19,
          column: 68
        }
      },
      "11": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "12": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 83
        }
      },
      "13": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 55
        }
      },
      "14": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "15": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 34,
          column: 17
        }
      },
      "16": {
        start: {
          line: 27,
          column: 35
        },
        end: {
          line: 27,
          column: 163
        }
      },
      "17": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 30,
          column: 21
        }
      },
      "18": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 69
        }
      },
      "19": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 116
        }
      },
      "20": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 56
        }
      },
      "21": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "22": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "23": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 96
        }
      },
      "24": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 89
        }
      },
      "25": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 64,
          column: 10
        }
      },
      "26": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "27": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 91
        }
      },
      "28": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 87
        }
      },
      "29": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "30": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      },
      "31": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 99
        }
      },
      "32": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 69
        }
      },
      "33": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "34": {
        start: {
          line: 91,
          column: 24
        },
        end: {
          line: 91,
          column: 34
        }
      },
      "35": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 92,
          column: 104
        }
      },
      "36": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "37": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 59
        }
      },
      "38": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "39": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 80
        }
      },
      "40": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 24
        }
      },
      "41": {
        start: {
          line: 135,
          column: 68
        },
        end: {
          line: 135,
          column: 75
        }
      },
      "42": {
        start: {
          line: 137,
          column: 32
        },
        end: {
          line: 137,
          column: 43
        }
      },
      "43": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "44": {
        start: {
          line: 139,
          column: 30
        },
        end: {
          line: 142,
          column: 14
        }
      },
      "45": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 57
        }
      },
      "46": {
        start: {
          line: 143,
          column: 51
        },
        end: {
          line: 143,
          column: 55
        }
      },
      "47": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "48": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 42
        }
      },
      "49": {
        start: {
          line: 149,
          column: 29
        },
        end: {
          line: 163,
          column: 10
        }
      },
      "50": {
        start: {
          line: 164,
          column: 21
        },
        end: {
          line: 164,
          column: 38
        }
      },
      "51": {
        start: {
          line: 165,
          column: 28
        },
        end: {
          line: 165,
          column: 49
        }
      },
      "52": {
        start: {
          line: 166,
          column: 23
        },
        end: {
          line: 166,
          column: 39
        }
      },
      "53": {
        start: {
          line: 167,
          column: 28
        },
        end: {
          line: 167,
          column: 49
        }
      },
      "54": {
        start: {
          line: 168,
          column: 24
        },
        end: {
          line: 168,
          column: 25
        }
      },
      "55": {
        start: {
          line: 169,
          column: 24
        },
        end: {
          line: 169,
          column: 39
        }
      },
      "56": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 171,
          column: 70
        }
      },
      "57": {
        start: {
          line: 172,
          column: 31
        },
        end: {
          line: 172,
          column: 76
        }
      },
      "58": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 53
        }
      },
      "59": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 72
        }
      },
      "60": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 175,
          column: 63
        }
      },
      "61": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 176,
          column: 64
        }
      },
      "62": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 75
        }
      },
      "63": {
        start: {
          line: 178,
          column: 23
        },
        end: {
          line: 178,
          column: 40
        }
      },
      "64": {
        start: {
          line: 179,
          column: 23
        },
        end: {
          line: 179,
          column: 65
        }
      },
      "65": {
        start: {
          line: 180,
          column: 21
        },
        end: {
          line: 180,
          column: 64
        }
      },
      "66": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 182,
          column: 30
        }
      },
      "67": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 200,
          column: 10
        }
      },
      "68": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 209,
          column: 10
        }
      },
      "69": {
        start: {
          line: 211,
          column: 23
        },
        end: {
          line: 211,
          column: 89
        }
      },
      "70": {
        start: {
          line: 213,
          column: 29
        },
        end: {
          line: 213,
          column: 85
        }
      },
      "71": {
        start: {
          line: 215,
          column: 23
        },
        end: {
          line: 215,
          column: 51
        }
      },
      "72": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 221,
          column: 10
        }
      },
      "73": {
        start: {
          line: 224,
          column: 23
        },
        end: {
          line: 224,
          column: 25
        }
      },
      "74": {
        start: {
          line: 225,
          column: 25
        },
        end: {
          line: 225,
          column: 121
        }
      },
      "75": {
        start: {
          line: 226,
          column: 29
        },
        end: {
          line: 226,
          column: 66
        }
      },
      "76": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "77": {
        start: {
          line: 227,
          column: 21
        },
        end: {
          line: 227,
          column: 22
        }
      },
      "78": {
        start: {
          line: 228,
          column: 32
        },
        end: {
          line: 228,
          column: 61
        }
      },
      "79": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 76
        }
      },
      "80": {
        start: {
          line: 230,
          column: 30
        },
        end: {
          line: 230,
          column: 51
        }
      },
      "81": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 70
        }
      },
      "82": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "83": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 63
        }
      },
      "84": {
        start: {
          line: 235,
          column: 28
        },
        end: {
          line: 240,
          column: 14
        }
      },
      "85": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 244,
          column: 15
        }
      },
      "86": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 22
        }
      },
      "87": {
        start: {
          line: 250,
          column: 26
        },
        end: {
          line: 253,
          column: 10
        }
      },
      "88": {
        start: {
          line: 254,
          column: 32
        },
        end: {
          line: 266,
          column: 11
        }
      },
      "89": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 260,
          column: 14
        }
      },
      "90": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 265,
          column: 14
        }
      },
      "91": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 270,
          column: 29
        }
      },
      "92": {
        start: {
          line: 269,
          column: 28
        },
        end: {
          line: 269,
          column: 65
        }
      },
      "93": {
        start: {
          line: 273,
          column: 23
        },
        end: {
          line: 273,
          column: 25
        }
      },
      "94": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "95": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 282,
          column: 15
        }
      },
      "96": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "97": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 292,
          column: 15
        }
      },
      "98": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "99": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 302,
          column: 15
        }
      },
      "100": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 22
        }
      },
      "101": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 317,
          column: 10
        }
      },
      "102": {
        start: {
          line: 319,
          column: 25
        },
        end: {
          line: 319,
          column: 34
        }
      },
      "103": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 324,
          column: 11
        }
      },
      "104": {
        start: {
          line: 321,
          column: 29
        },
        end: {
          line: 321,
          column: 104
        }
      },
      "105": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 42
        }
      },
      "106": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 52
        }
      },
      "107": {
        start: {
          line: 326,
          column: 23
        },
        end: {
          line: 328,
          column: 56
        }
      },
      "108": {
        start: {
          line: 327,
          column: 41
        },
        end: {
          line: 327,
          column: 63
        }
      },
      "109": {
        start: {
          line: 328,
          column: 28
        },
        end: {
          line: 328,
          column: 55
        }
      },
      "110": {
        start: {
          line: 329,
          column: 29
        },
        end: {
          line: 329,
          column: 31
        }
      },
      "111": {
        start: {
          line: 330,
          column: 28
        },
        end: {
          line: 330,
          column: 29
        }
      },
      "112": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 341,
          column: 11
        }
      },
      "113": {
        start: {
          line: 332,
          column: 35
        },
        end: {
          line: 332,
          column: 114
        }
      },
      "114": {
        start: {
          line: 333,
          column: 32
        },
        end: {
          line: 333,
          column: 52
        }
      },
      "115": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 339,
          column: 15
        }
      },
      "116": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 40
        }
      },
      "117": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 342,
          column: 28
        }
      },
      "118": {
        start: {
          line: 345,
          column: 36
        },
        end: {
          line: 352,
          column: 10
        }
      },
      "119": {
        start: {
          line: 353,
          column: 24
        },
        end: {
          line: 353,
          column: 26
        }
      },
      "120": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 360,
          column: 11
        }
      },
      "121": {
        start: {
          line: 355,
          column: 33
        },
        end: {
          line: 355,
          column: 45
        }
      },
      "122": {
        start: {
          line: 356,
          column: 34
        },
        end: {
          line: 356,
          column: 47
        }
      },
      "123": {
        start: {
          line: 357,
          column: 29
        },
        end: {
          line: 357,
          column: 57
        }
      },
      "124": {
        start: {
          line: 358,
          column: 31
        },
        end: {
          line: 358,
          column: 89
        }
      },
      "125": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 52
        }
      },
      "126": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 46
        }
      },
      "127": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 381,
          column: 10
        }
      },
      "128": {
        start: {
          line: 384,
          column: 21
        },
        end: {
          line: 384,
          column: 86
        }
      },
      "129": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 38
        }
      },
      "130": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 56
        }
      },
      "131": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 64
        }
      },
      "132": {
        start: {
          line: 396,
          column: 25
        },
        end: {
          line: 396,
          column: 80
        }
      },
      "133": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 408,
          column: 11
        }
      },
      "134": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 83
        }
      },
      "135": {
        start: {
          line: 399,
          column: 28
        },
        end: {
          line: 399,
          column: 64
        }
      },
      "136": {
        start: {
          line: 400,
          column: 29
        },
        end: {
          line: 400,
          column: 83
        }
      },
      "137": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 404,
          column: 14
        }
      },
      "138": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "139": {
        start: {
          line: 412,
          column: 28
        },
        end: {
          line: 412,
          column: 58
        }
      },
      "140": {
        start: {
          line: 413,
          column: 27
        },
        end: {
          line: 413,
          column: 59
        }
      },
      "141": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 43
        }
      },
      "142": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 41
        }
      },
      "143": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "144": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 19
        }
      },
      "145": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 55
        }
      },
      "146": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 44
        }
      },
      "147": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 444,
          column: 9
        }
      },
      "148": {
        start: {
          line: 430,
          column: 27
        },
        end: {
          line: 430,
          column: 84
        }
      },
      "149": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 56
        }
      },
      "150": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 439,
          column: 13
        }
      },
      "151": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 435,
          column: 19
        }
      },
      "152": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 438,
          column: 106
        }
      },
      "153": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 85
        }
      },
      "154": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 45
        }
      },
      "155": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 465,
          column: 10
        }
      },
      "156": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "157": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 470,
          column: 22
        }
      },
      "158": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "159": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 69
        }
      },
      "160": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 83
        }
      },
      "161": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 22
        }
      },
      "162": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 482,
          column: 55
        }
      },
      "163": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 483,
          column: 40
        }
      },
      "164": {
        start: {
          line: 487,
          column: 25
        },
        end: {
          line: 493,
          column: 10
        }
      },
      "165": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 500,
          column: 11
        }
      },
      "166": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 495,
          column: 112
        }
      },
      "167": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 496,
          column: 105
        }
      },
      "168": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 536,
          column: 9
        }
      },
      "169": {
        start: {
          line: 506,
          column: 36
        },
        end: {
          line: 506,
          column: 47
        }
      },
      "170": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 513,
          column: 13
        }
      },
      "171": {
        start: {
          line: 508,
          column: 34
        },
        end: {
          line: 511,
          column: 18
        }
      },
      "172": {
        start: {
          line: 512,
          column: 16
        },
        end: {
          line: 512,
          column: 61
        }
      },
      "173": {
        start: {
          line: 512,
          column: 55
        },
        end: {
          line: 512,
          column: 59
        }
      },
      "174": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 516,
          column: 13
        }
      },
      "175": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 26
        }
      },
      "176": {
        start: {
          line: 518,
          column: 33
        },
        end: {
          line: 529,
          column: 14
        }
      },
      "177": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 531,
          column: 68
        }
      },
      "178": {
        start: {
          line: 534,
          column: 12
        },
        end: {
          line: 534,
          column: 80
        }
      },
      "179": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 535,
          column: 24
        }
      },
      "180": {
        start: {
          line: 540,
          column: 24
        },
        end: {
          line: 540,
          column: 33
        }
      },
      "181": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 580,
          column: 11
        }
      },
      "182": {
        start: {
          line: 543,
          column: 25
        },
        end: {
          line: 543,
          column: 46
        }
      },
      "183": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 558,
          column: 13
        }
      },
      "184": {
        start: {
          line: 546,
          column: 20
        },
        end: {
          line: 546,
          column: 59
        }
      },
      "185": {
        start: {
          line: 547,
          column: 20
        },
        end: {
          line: 547,
          column: 26
        }
      },
      "186": {
        start: {
          line: 549,
          column: 38
        },
        end: {
          line: 549,
          column: 52
        }
      },
      "187": {
        start: {
          line: 550,
          column: 20
        },
        end: {
          line: 550,
          column: 70
        }
      },
      "188": {
        start: {
          line: 551,
          column: 20
        },
        end: {
          line: 551,
          column: 64
        }
      },
      "189": {
        start: {
          line: 552,
          column: 20
        },
        end: {
          line: 552,
          column: 26
        }
      },
      "190": {
        start: {
          line: 554,
          column: 20
        },
        end: {
          line: 554,
          column: 98
        }
      },
      "191": {
        start: {
          line: 555,
          column: 20
        },
        end: {
          line: 555,
          column: 26
        }
      },
      "192": {
        start: {
          line: 557,
          column: 20
        },
        end: {
          line: 557,
          column: 59
        }
      },
      "193": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 573,
          column: 13
        }
      },
      "194": {
        start: {
          line: 560,
          column: 16
        },
        end: {
          line: 572,
          column: 19
        }
      },
      "195": {
        start: {
          line: 574,
          column: 26
        },
        end: {
          line: 574,
          column: 42
        }
      },
      "196": {
        start: {
          line: 575,
          column: 12
        },
        end: {
          line: 575,
          column: 57
        }
      },
      "197": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 576,
          column: 47
        }
      },
      "198": {
        start: {
          line: 577,
          column: 12
        },
        end: {
          line: 577,
          column: 57
        }
      },
      "199": {
        start: {
          line: 578,
          column: 12
        },
        end: {
          line: 578,
          column: 31
        }
      },
      "200": {
        start: {
          line: 579,
          column: 12
        },
        end: {
          line: 579,
          column: 47
        }
      },
      "201": {
        start: {
          line: 582,
          column: 23
        },
        end: {
          line: 595,
          column: 10
        }
      },
      "202": {
        start: {
          line: 583,
          column: 12
        },
        end: {
          line: 583,
          column: 93
        }
      },
      "203": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 584,
          column: 76
        }
      },
      "204": {
        start: {
          line: 585,
          column: 12
        },
        end: {
          line: 585,
          column: 95
        }
      },
      "205": {
        start: {
          line: 586,
          column: 12
        },
        end: {
          line: 586,
          column: 99
        }
      },
      "206": {
        start: {
          line: 587,
          column: 12
        },
        end: {
          line: 587,
          column: 79
        }
      },
      "207": {
        start: {
          line: 589,
          column: 12
        },
        end: {
          line: 593,
          column: 15
        }
      },
      "208": {
        start: {
          line: 590,
          column: 16
        },
        end: {
          line: 592,
          column: 17
        }
      },
      "209": {
        start: {
          line: 591,
          column: 20
        },
        end: {
          line: 591,
          column: 68
        }
      },
      "210": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 25
        }
      },
      "211": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 596,
          column: 67
        }
      },
      "212": {
        start: {
          line: 596,
          column: 37
        },
        end: {
          line: 596,
          column: 65
        }
      },
      "213": {
        start: {
          line: 599,
          column: 0
        },
        end: {
          line: 599,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 45
          },
          end: {
            line: 20,
            column: 46
          }
        },
        loc: {
          start: {
            line: 20,
            column: 57
          },
          end: {
            line: 38,
            column: 9
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 70
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 50,
            column: 45
          },
          end: {
            line: 50,
            column: 46
          }
        },
        loc: {
          start: {
            line: 50,
            column: 57
          },
          end: {
            line: 53,
            column: 9
          }
        },
        line: 50
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 67
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 59
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 45
          },
          end: {
            line: 65,
            column: 46
          }
        },
        loc: {
          start: {
            line: 65,
            column: 57
          },
          end: {
            line: 68,
            column: 9
          }
        },
        line: 65
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 50
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 74
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 79,
            column: 45
          },
          end: {
            line: 79,
            column: 46
          }
        },
        loc: {
          start: {
            line: 79,
            column: 57
          },
          end: {
            line: 82,
            column: 9
          }
        },
        line: 79
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 66
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 88
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 42
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 134
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 143,
            column: 46
          },
          end: {
            line: 143,
            column: 47
          }
        },
        loc: {
          start: {
            line: 143,
            column: 51
          },
          end: {
            line: 143,
            column: 55
          }
        },
        line: 143
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 75
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 202
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 66
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 223
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 60
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 248
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 254,
            column: 64
          },
          end: {
            line: 254,
            column: 65
          }
        },
        loc: {
          start: {
            line: 254,
            column: 84
          },
          end: {
            line: 266,
            column: 9
          }
        },
        line: 254
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 269,
            column: 18
          },
          end: {
            line: 269,
            column: 19
          }
        },
        loc: {
          start: {
            line: 269,
            column: 28
          },
          end: {
            line: 269,
            column: 65
          }
        },
        line: 269
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 28
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 272
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        loc: {
          start: {
            line: 306,
            column: 73
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 306
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 320,
            column: 27
          },
          end: {
            line: 320,
            column: 28
          }
        },
        loc: {
          start: {
            line: 320,
            column: 36
          },
          end: {
            line: 324,
            column: 9
          }
        },
        line: 320
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 327,
            column: 17
          },
          end: {
            line: 327,
            column: 18
          }
        },
        loc: {
          start: {
            line: 327,
            column: 41
          },
          end: {
            line: 327,
            column: 63
          }
        },
        line: 327
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 328,
            column: 18
          },
          end: {
            line: 328,
            column: 19
          }
        },
        loc: {
          start: {
            line: 328,
            column: 28
          },
          end: {
            line: 328,
            column: 55
          }
        },
        line: 328
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 331,
            column: 23
          },
          end: {
            line: 331,
            column: 24
          }
        },
        loc: {
          start: {
            line: 331,
            column: 41
          },
          end: {
            line: 341,
            column: 9
          }
        },
        line: 331
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 344,
            column: 4
          },
          end: {
            line: 344,
            column: 5
          }
        },
        loc: {
          start: {
            line: 344,
            column: 55
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 344
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 354,
            column: 37
          },
          end: {
            line: 354,
            column: 38
          }
        },
        loc: {
          start: {
            line: 354,
            column: 44
          },
          end: {
            line: 360,
            column: 9
          }
        },
        line: 354
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        },
        loc: {
          start: {
            line: 363,
            column: 22
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 363
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 383,
            column: 5
          }
        },
        loc: {
          start: {
            line: 383,
            column: 38
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 383
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 388,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        loc: {
          start: {
            line: 388,
            column: 46
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 388
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 391,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        loc: {
          start: {
            line: 391,
            column: 54
          },
          end: {
            line: 393,
            column: 5
          }
        },
        line: 391
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 41
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 395
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 397,
            column: 45
          },
          end: {
            line: 397,
            column: 46
          }
        },
        loc: {
          start: {
            line: 397,
            column: 57
          },
          end: {
            line: 405,
            column: 9
          }
        },
        line: 397
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 410,
            column: 4
          },
          end: {
            line: 410,
            column: 5
          }
        },
        loc: {
          start: {
            line: 410,
            column: 37
          },
          end: {
            line: 418,
            column: 5
          }
        },
        line: 410
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 420,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        loc: {
          start: {
            line: 420,
            column: 42
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 420
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 428,
            column: 4
          },
          end: {
            line: 428,
            column: 5
          }
        },
        loc: {
          start: {
            line: 428,
            column: 46
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 428
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        loc: {
          start: {
            line: 447,
            column: 37
          },
          end: {
            line: 466,
            column: 5
          }
        },
        line: 447
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 468,
            column: 5
          }
        },
        loc: {
          start: {
            line: 468,
            column: 37
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 468
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 481,
            column: 4
          },
          end: {
            line: 481,
            column: 5
          }
        },
        loc: {
          start: {
            line: 481,
            column: 42
          },
          end: {
            line: 484,
            column: 5
          }
        },
        line: 481
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 94
          },
          end: {
            line: 501,
            column: 5
          }
        },
        line: 486
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 494,
            column: 45
          },
          end: {
            line: 494,
            column: 46
          }
        },
        loc: {
          start: {
            line: 494,
            column: 57
          },
          end: {
            line: 497,
            column: 9
          }
        },
        line: 494
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 99
          },
          end: {
            line: 537,
            column: 5
          }
        },
        line: 503
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 512,
            column: 50
          },
          end: {
            line: 512,
            column: 51
          }
        },
        loc: {
          start: {
            line: 512,
            column: 55
          },
          end: {
            line: 512,
            column: 59
          }
        },
        line: 512
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 539,
            column: 4
          },
          end: {
            line: 539,
            column: 5
          }
        },
        loc: {
          start: {
            line: 539,
            column: 43
          },
          end: {
            line: 597,
            column: 5
          }
        },
        line: 539
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 541,
            column: 24
          },
          end: {
            line: 541,
            column: 25
          }
        },
        loc: {
          start: {
            line: 541,
            column: 34
          },
          end: {
            line: 580,
            column: 9
          }
        },
        line: 541
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 582,
            column: 56
          },
          end: {
            line: 582,
            column: 57
          }
        },
        loc: {
          start: {
            line: 582,
            column: 65
          },
          end: {
            line: 595,
            column: 9
          }
        },
        line: 582
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 589,
            column: 39
          },
          end: {
            line: 589,
            column: 40
          }
        },
        loc: {
          start: {
            line: 589,
            column: 46
          },
          end: {
            line: 593,
            column: 13
          }
        },
        line: 589
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 596,
            column: 27
          },
          end: {
            line: 596,
            column: 28
          }
        },
        loc: {
          start: {
            line: 596,
            column: 37
          },
          end: {
            line: 596,
            column: 65
          }
        },
        line: 596
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 20
          },
          end: {
            line: 30,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 20
          },
          end: {
            line: 30,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 101,
            column: 24
          },
          end: {
            line: 101,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 24
          },
          end: {
            line: 101,
            column: 45
          }
        }, {
          start: {
            line: 101,
            column: 49
          },
          end: {
            line: 101,
            column: 77
          }
        }],
        line: 101
      },
      "3": {
        loc: {
          start: {
            line: 102,
            column: 24
          },
          end: {
            line: 105,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 24
          },
          end: {
            line: 102,
            column: 50
          }
        }, {
          start: {
            line: 102,
            column: 54
          },
          end: {
            line: 105,
            column: 21
          }
        }],
        line: 102
      },
      "4": {
        loc: {
          start: {
            line: 104,
            column: 46
          },
          end: {
            line: 104,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 46
          },
          end: {
            line: 104,
            column: 61
          }
        }, {
          start: {
            line: 104,
            column: 65
          },
          end: {
            line: 104,
            column: 66
          }
        }],
        line: 104
      },
      "5": {
        loc: {
          start: {
            line: 106,
            column: 24
          },
          end: {
            line: 106,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 24
          },
          end: {
            line: 106,
            column: 44
          }
        }, {
          start: {
            line: 106,
            column: 48
          },
          end: {
            line: 106,
            column: 81
          }
        }],
        line: 106
      },
      "6": {
        loc: {
          start: {
            line: 112,
            column: 33
          },
          end: {
            line: 112,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 56
          },
          end: {
            line: 112,
            column: 57
          }
        }, {
          start: {
            line: 112,
            column: 60
          },
          end: {
            line: 112,
            column: 61
          }
        }],
        line: 112
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 28
          },
          end: {
            line: 113,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 52
          },
          end: {
            line: 113,
            column: 53
          }
        }, {
          start: {
            line: 113,
            column: 56
          },
          end: {
            line: 113,
            column: 57
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 114,
            column: 33
          },
          end: {
            line: 114,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 62
          },
          end: {
            line: 114,
            column: 63
          }
        }, {
          start: {
            line: 114,
            column: 66
          },
          end: {
            line: 114,
            column: 67
          }
        }],
        line: 114
      },
      "9": {
        loc: {
          start: {
            line: 115,
            column: 29
          },
          end: {
            line: 115,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 59
          },
          end: {
            line: 115,
            column: 79
          }
        }, {
          start: {
            line: 115,
            column: 83
          },
          end: {
            line: 115,
            column: 84
          }
        }],
        line: 115
      },
      "10": {
        loc: {
          start: {
            line: 115,
            column: 59
          },
          end: {
            line: 115,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 59
          },
          end: {
            line: 115,
            column: 74
          }
        }, {
          start: {
            line: 115,
            column: 78
          },
          end: {
            line: 115,
            column: 79
          }
        }],
        line: 115
      },
      "11": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "12": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 138,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 138,
            column: 30
          }
        }, {
          start: {
            line: 138,
            column: 34
          },
          end: {
            line: 138,
            column: 64
          }
        }],
        line: 138
      },
      "13": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "14": {
        loc: {
          start: {
            line: 165,
            column: 28
          },
          end: {
            line: 165,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 28
          },
          end: {
            line: 165,
            column: 44
          }
        }, {
          start: {
            line: 165,
            column: 48
          },
          end: {
            line: 165,
            column: 49
          }
        }],
        line: 165
      },
      "15": {
        loc: {
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 166,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 166,
            column: 34
          }
        }, {
          start: {
            line: 166,
            column: 38
          },
          end: {
            line: 166,
            column: 39
          }
        }],
        line: 166
      },
      "16": {
        loc: {
          start: {
            line: 167,
            column: 28
          },
          end: {
            line: 167,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 28
          },
          end: {
            line: 167,
            column: 44
          }
        }, {
          start: {
            line: 167,
            column: 48
          },
          end: {
            line: 167,
            column: 49
          }
        }],
        line: 167
      },
      "17": {
        loc: {
          start: {
            line: 169,
            column: 24
          },
          end: {
            line: 169,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 24
          },
          end: {
            line: 169,
            column: 34
          }
        }, {
          start: {
            line: 169,
            column: 38
          },
          end: {
            line: 169,
            column: 39
          }
        }],
        line: 169
      },
      "18": {
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 171,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 38
          },
          end: {
            line: 171,
            column: 66
          }
        }, {
          start: {
            line: 171,
            column: 69
          },
          end: {
            line: 171,
            column: 70
          }
        }],
        line: 171
      },
      "19": {
        loc: {
          start: {
            line: 172,
            column: 31
          },
          end: {
            line: 172,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 172,
            column: 44
          },
          end: {
            line: 172,
            column: 72
          }
        }, {
          start: {
            line: 172,
            column: 75
          },
          end: {
            line: 172,
            column: 76
          }
        }],
        line: 172
      },
      "20": {
        loc: {
          start: {
            line: 173,
            column: 20
          },
          end: {
            line: 173,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 33
          },
          end: {
            line: 173,
            column: 49
          }
        }, {
          start: {
            line: 173,
            column: 52
          },
          end: {
            line: 173,
            column: 53
          }
        }],
        line: 173
      },
      "21": {
        loc: {
          start: {
            line: 174,
            column: 20
          },
          end: {
            line: 174,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 38
          },
          end: {
            line: 174,
            column: 68
          }
        }, {
          start: {
            line: 174,
            column: 71
          },
          end: {
            line: 174,
            column: 72
          }
        }],
        line: 174
      },
      "22": {
        loc: {
          start: {
            line: 175,
            column: 20
          },
          end: {
            line: 175,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 38
          },
          end: {
            line: 175,
            column: 59
          }
        }, {
          start: {
            line: 175,
            column: 62
          },
          end: {
            line: 175,
            column: 63
          }
        }],
        line: 175
      },
      "23": {
        loc: {
          start: {
            line: 176,
            column: 21
          },
          end: {
            line: 176,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 35
          },
          end: {
            line: 176,
            column: 60
          }
        }, {
          start: {
            line: 176,
            column: 63
          },
          end: {
            line: 176,
            column: 64
          }
        }],
        line: 176
      },
      "24": {
        loc: {
          start: {
            line: 177,
            column: 20
          },
          end: {
            line: 177,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 34
          },
          end: {
            line: 177,
            column: 71
          }
        }, {
          start: {
            line: 177,
            column: 74
          },
          end: {
            line: 177,
            column: 75
          }
        }],
        line: 177
      },
      "25": {
        loc: {
          start: {
            line: 179,
            column: 23
          },
          end: {
            line: 179,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 179,
            column: 37
          },
          end: {
            line: 179,
            column: 61
          }
        }, {
          start: {
            line: 179,
            column: 64
          },
          end: {
            line: 179,
            column: 65
          }
        }],
        line: 179
      },
      "26": {
        loc: {
          start: {
            line: 180,
            column: 21
          },
          end: {
            line: 180,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 39
          },
          end: {
            line: 180,
            column: 60
          }
        }, {
          start: {
            line: 180,
            column: 63
          },
          end: {
            line: 180,
            column: 64
          }
        }],
        line: 180
      },
      "27": {
        loc: {
          start: {
            line: 227,
            column: 24
          },
          end: {
            line: 227,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 24
          },
          end: {
            line: 227,
            column: 29
          }
        }, {
          start: {
            line: 227,
            column: 33
          },
          end: {
            line: 227,
            column: 60
          }
        }],
        line: 227
      },
      "28": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "29": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "30": {
        loc: {
          start: {
            line: 277,
            column: 22
          },
          end: {
            line: 277,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 277,
            column: 43
          },
          end: {
            line: 277,
            column: 53
          }
        }, {
          start: {
            line: 277,
            column: 56
          },
          end: {
            line: 277,
            column: 65
          }
        }],
        line: 277
      },
      "31": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "32": {
        loc: {
          start: {
            line: 287,
            column: 22
          },
          end: {
            line: 287,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 287,
            column: 51
          },
          end: {
            line: 287,
            column: 61
          }
        }, {
          start: {
            line: 287,
            column: 64
          },
          end: {
            line: 287,
            column: 73
          }
        }],
        line: 287
      },
      "33": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "34": {
        loc: {
          start: {
            line: 297,
            column: 22
          },
          end: {
            line: 297,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 297,
            column: 42
          },
          end: {
            line: 297,
            column: 52
          }
        }, {
          start: {
            line: 297,
            column: 55
          },
          end: {
            line: 297,
            column: 64
          }
        }],
        line: 297
      },
      "35": {
        loc: {
          start: {
            line: 321,
            column: 29
          },
          end: {
            line: 321,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 29
          },
          end: {
            line: 321,
            column: 58
          }
        }, {
          start: {
            line: 321,
            column: 62
          },
          end: {
            line: 321,
            column: 104
          }
        }],
        line: 321
      },
      "36": {
        loc: {
          start: {
            line: 332,
            column: 35
          },
          end: {
            line: 332,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 49
          },
          end: {
            line: 332,
            column: 52
          }
        }, {
          start: {
            line: 332,
            column: 55
          },
          end: {
            line: 332,
            column: 114
          }
        }],
        line: 332
      },
      "37": {
        loc: {
          start: {
            line: 332,
            column: 55
          },
          end: {
            line: 332,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 75
          },
          end: {
            line: 332,
            column: 110
          }
        }, {
          start: {
            line: 332,
            column: 113
          },
          end: {
            line: 332,
            column: 114
          }
        }],
        line: 332
      },
      "38": {
        loc: {
          start: {
            line: 358,
            column: 31
          },
          end: {
            line: 358,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 358,
            column: 53
          },
          end: {
            line: 358,
            column: 85
          }
        }, {
          start: {
            line: 358,
            column: 88
          },
          end: {
            line: 358,
            column: 89
          }
        }],
        line: 358
      },
      "39": {
        loc: {
          start: {
            line: 402,
            column: 22
          },
          end: {
            line: 402,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 402,
            column: 42
          },
          end: {
            line: 402,
            column: 49
          }
        }, {
          start: {
            line: 402,
            column: 52
          },
          end: {
            line: 402,
            column: 89
          }
        }],
        line: 402
      },
      "40": {
        loc: {
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 415,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 415,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "41": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "42": {
        loc: {
          start: {
            line: 432,
            column: 12
          },
          end: {
            line: 439,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 12
          },
          end: {
            line: 439,
            column: 13
          }
        }, {
          start: {
            line: 437,
            column: 17
          },
          end: {
            line: 439,
            column: 13
          }
        }],
        line: 432
      },
      "43": {
        loc: {
          start: {
            line: 449,
            column: 21
          },
          end: {
            line: 449,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 449,
            column: 21
          },
          end: {
            line: 449,
            column: 43
          }
        }, {
          start: {
            line: 449,
            column: 47
          },
          end: {
            line: 449,
            column: 48
          }
        }],
        line: 449
      },
      "44": {
        loc: {
          start: {
            line: 450,
            column: 18
          },
          end: {
            line: 450,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 450,
            column: 18
          },
          end: {
            line: 450,
            column: 37
          }
        }, {
          start: {
            line: 450,
            column: 41
          },
          end: {
            line: 450,
            column: 42
          }
        }],
        line: 450
      },
      "45": {
        loc: {
          start: {
            line: 451,
            column: 17
          },
          end: {
            line: 451,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 451,
            column: 17
          },
          end: {
            line: 451,
            column: 35
          }
        }, {
          start: {
            line: 451,
            column: 39
          },
          end: {
            line: 451,
            column: 40
          }
        }],
        line: 451
      },
      "46": {
        loc: {
          start: {
            line: 452,
            column: 21
          },
          end: {
            line: 452,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 21
          },
          end: {
            line: 452,
            column: 44
          }
        }, {
          start: {
            line: 452,
            column: 48
          },
          end: {
            line: 452,
            column: 49
          }
        }],
        line: 452
      },
      "47": {
        loc: {
          start: {
            line: 453,
            column: 17
          },
          end: {
            line: 453,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 453,
            column: 17
          },
          end: {
            line: 453,
            column: 35
          }
        }, {
          start: {
            line: 453,
            column: 39
          },
          end: {
            line: 453,
            column: 40
          }
        }],
        line: 453
      },
      "48": {
        loc: {
          start: {
            line: 454,
            column: 17
          },
          end: {
            line: 454,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 454,
            column: 17
          },
          end: {
            line: 454,
            column: 35
          }
        }, {
          start: {
            line: 454,
            column: 39
          },
          end: {
            line: 454,
            column: 40
          }
        }],
        line: 454
      },
      "49": {
        loc: {
          start: {
            line: 455,
            column: 17
          },
          end: {
            line: 455,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 455,
            column: 17
          },
          end: {
            line: 455,
            column: 35
          }
        }, {
          start: {
            line: 455,
            column: 39
          },
          end: {
            line: 455,
            column: 40
          }
        }],
        line: 455
      },
      "50": {
        loc: {
          start: {
            line: 456,
            column: 25
          },
          end: {
            line: 456,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 456,
            column: 25
          },
          end: {
            line: 456,
            column: 51
          }
        }, {
          start: {
            line: 456,
            column: 55
          },
          end: {
            line: 456,
            column: 56
          }
        }],
        line: 456
      },
      "51": {
        loc: {
          start: {
            line: 457,
            column: 20
          },
          end: {
            line: 457,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 457,
            column: 20
          },
          end: {
            line: 457,
            column: 41
          }
        }, {
          start: {
            line: 457,
            column: 45
          },
          end: {
            line: 457,
            column: 46
          }
        }],
        line: 457
      },
      "52": {
        loc: {
          start: {
            line: 458,
            column: 25
          },
          end: {
            line: 458,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 25
          },
          end: {
            line: 458,
            column: 51
          }
        }, {
          start: {
            line: 458,
            column: 55
          },
          end: {
            line: 458,
            column: 56
          }
        }],
        line: 458
      },
      "53": {
        loc: {
          start: {
            line: 459,
            column: 17
          },
          end: {
            line: 459,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 459,
            column: 17
          },
          end: {
            line: 459,
            column: 35
          }
        }, {
          start: {
            line: 459,
            column: 39
          },
          end: {
            line: 459,
            column: 40
          }
        }],
        line: 459
      },
      "54": {
        loc: {
          start: {
            line: 460,
            column: 28
          },
          end: {
            line: 460,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 460,
            column: 28
          },
          end: {
            line: 460,
            column: 58
          }
        }, {
          start: {
            line: 460,
            column: 62
          },
          end: {
            line: 460,
            column: 63
          }
        }],
        line: 460
      },
      "55": {
        loc: {
          start: {
            line: 461,
            column: 17
          },
          end: {
            line: 461,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 17
          },
          end: {
            line: 461,
            column: 35
          }
        }, {
          start: {
            line: 461,
            column: 39
          },
          end: {
            line: 461,
            column: 40
          }
        }],
        line: 461
      },
      "56": {
        loc: {
          start: {
            line: 462,
            column: 18
          },
          end: {
            line: 462,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 462,
            column: 18
          },
          end: {
            line: 462,
            column: 37
          }
        }, {
          start: {
            line: 462,
            column: 41
          },
          end: {
            line: 462,
            column: 42
          }
        }],
        line: 462
      },
      "57": {
        loc: {
          start: {
            line: 463,
            column: 20
          },
          end: {
            line: 463,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 463,
            column: 20
          },
          end: {
            line: 463,
            column: 41
          }
        }, {
          start: {
            line: 463,
            column: 45
          },
          end: {
            line: 463,
            column: 46
          }
        }],
        line: 463
      },
      "58": {
        loc: {
          start: {
            line: 464,
            column: 20
          },
          end: {
            line: 464,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 464,
            column: 20
          },
          end: {
            line: 464,
            column: 41
          }
        }, {
          start: {
            line: 464,
            column: 45
          },
          end: {
            line: 464,
            column: 46
          }
        }],
        line: 464
      },
      "59": {
        loc: {
          start: {
            line: 469,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 469
      },
      "60": {
        loc: {
          start: {
            line: 486,
            column: 77
          },
          end: {
            line: 486,
            column: 92
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 486,
            column: 87
          },
          end: {
            line: 486,
            column: 92
          }
        }],
        line: 486
      },
      "61": {
        loc: {
          start: {
            line: 503,
            column: 82
          },
          end: {
            line: 503,
            column: 97
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 503,
            column: 92
          },
          end: {
            line: 503,
            column: 97
          }
        }],
        line: 503
      },
      "62": {
        loc: {
          start: {
            line: 507,
            column: 12
          },
          end: {
            line: 513,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 507,
            column: 12
          },
          end: {
            line: 513,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 507
      },
      "63": {
        loc: {
          start: {
            line: 507,
            column: 16
          },
          end: {
            line: 507,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 507,
            column: 16
          },
          end: {
            line: 507,
            column: 34
          }
        }, {
          start: {
            line: 507,
            column: 38
          },
          end: {
            line: 507,
            column: 68
          }
        }],
        line: 507
      },
      "64": {
        loc: {
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 514
      },
      "65": {
        loc: {
          start: {
            line: 544,
            column: 12
          },
          end: {
            line: 558,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 545,
            column: 16
          },
          end: {
            line: 547,
            column: 26
          }
        }, {
          start: {
            line: 548,
            column: 16
          },
          end: {
            line: 552,
            column: 26
          }
        }, {
          start: {
            line: 553,
            column: 16
          },
          end: {
            line: 555,
            column: 26
          }
        }, {
          start: {
            line: 556,
            column: 16
          },
          end: {
            line: 557,
            column: 59
          }
        }],
        line: 544
      },
      "66": {
        loc: {
          start: {
            line: 559,
            column: 12
          },
          end: {
            line: 573,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 559,
            column: 12
          },
          end: {
            line: 573,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 559
      },
      "67": {
        loc: {
          start: {
            line: 575,
            column: 33
          },
          end: {
            line: 575,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 575,
            column: 33
          },
          end: {
            line: 575,
            column: 51
          }
        }, {
          start: {
            line: 575,
            column: 55
          },
          end: {
            line: 575,
            column: 56
          }
        }],
        line: 575
      },
      "68": {
        loc: {
          start: {
            line: 576,
            column: 28
          },
          end: {
            line: 576,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 576,
            column: 28
          },
          end: {
            line: 576,
            column: 41
          }
        }, {
          start: {
            line: 576,
            column: 45
          },
          end: {
            line: 576,
            column: 46
          }
        }],
        line: 576
      },
      "69": {
        loc: {
          start: {
            line: 577,
            column: 33
          },
          end: {
            line: 577,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 577,
            column: 33
          },
          end: {
            line: 577,
            column: 51
          }
        }, {
          start: {
            line: 577,
            column: 55
          },
          end: {
            line: 577,
            column: 56
          }
        }],
        line: 577
      },
      "70": {
        loc: {
          start: {
            line: 579,
            column: 29
          },
          end: {
            line: 579,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 579,
            column: 29
          },
          end: {
            line: 579,
            column: 41
          }
        }, {
          start: {
            line: 579,
            column: 45
          },
          end: {
            line: 579,
            column: 46
          }
        }],
        line: 579
      },
      "71": {
        loc: {
          start: {
            line: 583,
            column: 24
          },
          end: {
            line: 583,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 583,
            column: 48
          },
          end: {
            line: 583,
            column: 88
          }
        }, {
          start: {
            line: 583,
            column: 91
          },
          end: {
            line: 583,
            column: 92
          }
        }],
        line: 583
      },
      "72": {
        loc: {
          start: {
            line: 584,
            column: 24
          },
          end: {
            line: 584,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 584,
            column: 43
          },
          end: {
            line: 584,
            column: 71
          }
        }, {
          start: {
            line: 584,
            column: 74
          },
          end: {
            line: 584,
            column: 75
          }
        }],
        line: 584
      },
      "73": {
        loc: {
          start: {
            line: 585,
            column: 24
          },
          end: {
            line: 585,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 585,
            column: 48
          },
          end: {
            line: 585,
            column: 90
          }
        }, {
          start: {
            line: 585,
            column: 93
          },
          end: {
            line: 585,
            column: 94
          }
        }],
        line: 585
      },
      "74": {
        loc: {
          start: {
            line: 586,
            column: 35
          },
          end: {
            line: 586,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 586,
            column: 54
          },
          end: {
            line: 586,
            column: 94
          }
        }, {
          start: {
            line: 586,
            column: 97
          },
          end: {
            line: 586,
            column: 98
          }
        }],
        line: 586
      },
      "75": {
        loc: {
          start: {
            line: 587,
            column: 25
          },
          end: {
            line: 587,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 587,
            column: 45
          },
          end: {
            line: 587,
            column: 74
          }
        }, {
          start: {
            line: 587,
            column: 77
          },
          end: {
            line: 587,
            column: 78
          }
        }],
        line: 587
      },
      "76": {
        loc: {
          start: {
            line: 590,
            column: 16
          },
          end: {
            line: 592,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 590,
            column: 16
          },
          end: {
            line: 592,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 590
      },
      "77": {
        loc: {
          start: {
            line: 590,
            column: 20
          },
          end: {
            line: 590,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 590,
            column: 20
          },
          end: {
            line: 590,
            column: 50
          }
        }, {
          start: {
            line: 590,
            column: 54
          },
          end: {
            line: 590,
            column: 75
          }
        }, {
          start: {
            line: 590,
            column: 79
          },
          end: {
            line: 590,
            column: 95
          }
        }, {
          start: {
            line: 590,
            column: 99
          },
          end: {
            line: 590,
            column: 120
          }
        }],
        line: 590
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0],
      "61": [0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0, 0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\metrics.service.ts"],
      sourcesContent: ["import { PrismaService } from '../database/prisma.service';\nimport { getCacheService, CACHE_PREFIXES, CACHE_TTL, Cached } from './cache.service';\nimport { getStoredProceduresService, StoredProceduresService } from './stored-procedures.service';\nimport { logger } from '../utils/logger';\n\n// Metrics calculation interfaces\nexport interface MetricsFilters {\n  campaignIds?: string[];\n  startDate: Date;\n  endDate: Date;\n  metricsTypes?: string[];\n  organizationId: string;\n  groupBy?: 'day' | 'hour' | 'campaign' | 'platform';\n}\n\nexport interface KPIMetrics {\n  // Revenue metrics\n  revenue: number;\n  roas: number; // Return on Ad Spend\n  roi: number; // Return on Investment\n  \n  // Cost metrics\n  adSpend: number;\n  cpc: number; // Cost Per Click\n  cpm: number; // Cost Per Mille (1000 impressions)\n  cac: number; // Customer Acquisition Cost\n  \n  // Performance metrics\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  ctr: number; // Click Through Rate\n  conversionRate: number;\n  \n  // Customer metrics\n  ltv: number; // Lifetime Value\n  arpu: number; // Average Revenue Per User\n  \n  // Profitability\n  margin: number;\n  profit: number;\n}\n\nexport interface DashboardMetrics {\n  summary: KPIMetrics;\n  trends: {\n    period: string;\n    metrics: KPIMetrics;\n  }[];\n  topCampaigns: {\n    campaignId: string;\n    campaignName: string;\n    metrics: KPIMetrics;\n  }[];\n  alerts: {\n    type: 'warning' | 'critical';\n    message: string;\n    metric: string;\n    value: number;\n    threshold: number;\n  }[];\n}\n\nexport interface FunnelStage {\n  stage: string;\n  users: number;\n  conversionRate: number;\n  dropoffRate: number;\n}\n\nexport interface ComparisonResult {\n  current: KPIMetrics;\n  previous: KPIMetrics;\n  changes: {\n    [key in keyof KPIMetrics]: {\n      absolute: number;\n      percentage: number;\n    };\n  };\n}\n\nexport class MetricsService {\n  private cache = getCacheService();\n  private storedProcedures: StoredProceduresService;\n  private useStoredProcedures = true; // Flag to enable/disable stored procedures\n  private storedProceduresChecked = false;\n\n  constructor(private prisma: PrismaService) {\n    this.storedProcedures = getStoredProceduresService(prisma);\n  }\n\n  // Calculate comprehensive metrics\n  public async calculateMetrics(filters: MetricsFilters): Promise<KPIMetrics> {\n    const cacheKey = this.generateCacheKey('calculate', filters);\n    \n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Calculating metrics from database', { filters });\n        \n        // Ensure stored procedures availability is checked\n        await this.ensureStoredProceduresChecked();\n        \n        // Try stored procedure first if available\n        if (this.useStoredProcedures) {\n          try {\n            const result = await this.storedProcedures.calculateKPIMetrics(\n              filters.organizationId,\n              filters.campaignIds,\n              filters.startDate,\n              filters.endDate\n            );\n            \n            if (result) {\n              return this.mapStoredProcedureResult(result);\n            }\n          } catch (error) {\n            logger.warn('Stored procedure failed, falling back to TypeScript calculation:', error);\n          }\n        }\n        \n        // Fallback to TypeScript calculation\n        return this.calculateMetricsFromDB(filters);\n      },\n      {\n        ttl: CACHE_TTL.METRICS,\n        prefix: CACHE_PREFIXES.METRICS,\n      }\n    );\n  }\n\n  // Get dashboard metrics with caching\n  public async getDashboardMetrics(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<DashboardMetrics> {\n    const cacheKey = this.generateCacheKey('dashboard', {\n      organizationId,\n      ...dateRange,\n      campaignIds,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating dashboard metrics', { organizationId, dateRange });\n        return this.generateDashboardMetrics(organizationId, dateRange, campaignIds);\n      },\n      {\n        ttl: CACHE_TTL.DASHBOARD,\n        prefix: CACHE_PREFIXES.DASHBOARD,\n      }\n    );\n  }\n\n  // Get funnel analysis with caching\n  public async getFunnelAnalysis(\n    campaignId: string,\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date }\n  ): Promise<FunnelStage[]> {\n    const cacheKey = this.generateCacheKey('funnel', {\n      campaignId,\n      organizationId,\n      ...dateRange,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Calculating funnel analysis', { campaignId, dateRange });\n        return this.calculateFunnelAnalysis(campaignId, organizationId, dateRange);\n      },\n      {\n        ttl: CACHE_TTL.FUNNEL,\n        prefix: CACHE_PREFIXES.FUNNEL,\n      }\n    );\n  }\n\n  // Compare metrics between periods\n  public async compareMetrics(\n    filters: MetricsFilters,\n    previousPeriod: { startDate: Date; endDate: Date }\n  ): Promise<ComparisonResult> {\n    const cacheKey = this.generateCacheKey('comparison', {\n      ...filters,\n      previousPeriod,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Comparing metrics between periods', { filters, previousPeriod });\n        return this.calculateComparison(filters, previousPeriod);\n      },\n      {\n        ttl: CACHE_TTL.COMPARISON,\n        prefix: CACHE_PREFIXES.COMPARISON,\n      }\n    );\n  }\n\n  // Update real-time metrics (no caching for real-time data)\n  public async updateRealTimeMetrics(\n    campaignId: string,\n    eventType: 'CLICK' | 'CONVERSION' | 'VIEW',\n    eventData: Record<string, any>\n  ): Promise<void> {\n    try {\n      // Update hourly metrics\n      const now = new Date();\n      const hourStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());\n\n      await this.prisma.metricsHourly.upsert({\n        where: {\n          campaignId_hour: {\n            campaignId,\n            hour: hourStart,\n          },\n        },\n        update: {\n          ...(eventType === 'CLICK' && { clicks: { increment: 1 } }),\n          ...(eventType === 'CONVERSION' && { \n            conversions: { increment: 1 },\n            revenue: { increment: eventData.value || 0 },\n          }),\n          ...(eventType === 'VIEW' && { impressions: { increment: 1 } }),\n          updatedAt: now,\n        },\n        create: {\n          campaignId,\n          hour: hourStart,\n          impressions: eventType === 'VIEW' ? 1 : 0,\n          clicks: eventType === 'CLICK' ? 1 : 0,\n          conversions: eventType === 'CONVERSION' ? 1 : 0,\n          revenue: eventType === 'CONVERSION' ? (eventData.value || 0) : 0,\n          adSpend: 0,\n          createdAt: now,\n          updatedAt: now,\n        },\n      });\n\n      // Invalidate related cache\n      await this.invalidateCampaignCache(campaignId);\n\n      logger.debug(`Real-time metrics updated for campaign ${campaignId}`, {\n        eventType,\n        eventData,\n      });\n    } catch (error) {\n      logger.error('Failed to update real-time metrics:', error);\n      throw error;\n    }\n  }\n\n  // Private methods for actual calculations\n  private async calculateMetricsFromDB(filters: MetricsFilters): Promise<KPIMetrics> {\n    const { campaignIds, startDate, endDate, organizationId } = filters;\n\n    // Get campaigns if not specified\n    let targetCampaignIds = campaignIds;\n    if (!targetCampaignIds || targetCampaignIds.length === 0) {\n      const campaigns = await this.prisma.campaign.findMany({\n        where: { organizationId },\n        select: { id: true },\n      });\n      targetCampaignIds = campaigns.map(c => c.id);\n    }\n\n    if (targetCampaignIds.length === 0) {\n      return this.getEmptyMetrics();\n    }\n\n    // Aggregate daily metrics\n    const dailyMetrics = await this.prisma.campaignMetrics.aggregate({\n      where: {\n        campaignExternalId: { in: targetCampaignIds },\n        date: {\n          gte: startDate,\n          lte: endDate,\n        },\n      },\n      _sum: {\n        impressions: true,\n        clicks: true,\n        conversions: true,\n        spend: true,\n      },\n    });\n\n    const sums = dailyMetrics._sum;\n    const impressions = sums.impressions || 0;\n    const clicks = sums.clicks || 0;\n    const conversions = sums.conversions || 0;\n    const revenue = 0; // Revenue not available in CampaignMetrics\n    const adSpend = sums.spend || 0;\n\n    // Calculate derived metrics\n    const ctr = impressions > 0 ? (clicks / impressions) * 100 : 0;\n    const conversionRate = clicks > 0 ? (conversions / clicks) * 100 : 0;\n    const cpc = clicks > 0 ? adSpend / clicks : 0;\n    const cpm = impressions > 0 ? (adSpend / impressions) * 1000 : 0;\n    const cac = conversions > 0 ? adSpend / conversions : 0;\n    const roas = adSpend > 0 ? (revenue / adSpend) * 100 : 0;\n    const roi = adSpend > 0 ? ((revenue - adSpend) / adSpend) * 100 : 0;\n    const profit = revenue - adSpend;\n    const margin = revenue > 0 ? (profit / revenue) * 100 : 0;\n    const arpu = conversions > 0 ? revenue / conversions : 0;\n    \n    // LTV calculation (simplified - could be more complex based on business model)\n    const ltv = arpu * 2.5; // Assuming 2.5x multiplier for LTV\n\n    return {\n      revenue,\n      roas,\n      roi,\n      adSpend,\n      cpc,\n      cpm,\n      cac,\n      impressions,\n      clicks,\n      conversions,\n      ctr,\n      conversionRate,\n      ltv,\n      arpu,\n      margin,\n      profit,\n    };\n  }\n\n  private async generateDashboardMetrics(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<DashboardMetrics> {\n    // Get summary metrics\n    const summary = await this.calculateMetrics({\n      organizationId,\n      startDate: dateRange.startDate,\n      endDate: dateRange.endDate,\n      campaignIds,\n    });\n\n    // Get trends (last 7 days)\n    const trends = await this.calculateTrends(organizationId, dateRange, campaignIds);\n\n    // Get top campaigns\n    const topCampaigns = await this.getTopCampaigns(organizationId, dateRange, 5);\n\n    // Generate alerts\n    const alerts = this.generateAlerts(summary);\n\n    return {\n      summary,\n      trends,\n      topCampaigns,\n      alerts,\n    };\n  }\n\n  private async calculateTrends(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    campaignIds?: string[]\n  ): Promise<{ period: string; metrics: KPIMetrics }[]> {\n    const trends = [];\n    const daysDiff = Math.ceil((dateRange.endDate.getTime() - dateRange.startDate.getTime()) / (1000 * 60 * 60 * 24));\n    const intervalDays = Math.max(1, Math.floor(daysDiff / 7)); // Max 7 data points\n\n    for (let i = 0; i < 7 && i * intervalDays < daysDiff; i++) {\n      const periodStart = new Date(dateRange.startDate);\n      periodStart.setDate(periodStart.getDate() + (i * intervalDays));\n      \n      const periodEnd = new Date(periodStart);\n      periodEnd.setDate(periodEnd.getDate() + intervalDays - 1);\n      \n      if (periodEnd > dateRange.endDate) {\n        periodEnd.setTime(dateRange.endDate.getTime());\n      }\n\n      const metrics = await this.calculateMetrics({\n        organizationId,\n        startDate: periodStart,\n        endDate: periodEnd,\n        campaignIds,\n      });\n\n      trends.push({\n        period: periodStart.toISOString().split('T')[0],\n        metrics,\n      });\n    }\n\n    return trends;\n  }\n\n  private async getTopCampaigns(\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date },\n    limit: number\n  ): Promise<{ campaignId: string; campaignName: string; metrics: KPIMetrics }[]> {\n    // Get campaigns with their metrics\n    const campaigns = await this.prisma.campaign.findMany({\n      where: { organizationId },\n      select: { id: true, name: true },\n    });\n\n    const campaignMetrics = await Promise.all(\n      campaigns.map(async (campaign) => {\n        const metrics = await this.calculateMetrics({\n          organizationId,\n          startDate: dateRange.startDate,\n          endDate: dateRange.endDate,\n          campaignIds: [campaign.id],\n        });\n\n        return {\n          campaignId: campaign.id,\n          campaignName: campaign.name,\n          metrics,\n        };\n      })\n    );\n\n    // Sort by revenue and return top campaigns\n    return campaignMetrics\n      .sort((a, b) => b.metrics.revenue - a.metrics.revenue)\n      .slice(0, limit);\n  }\n\n  private generateAlerts(metrics: KPIMetrics): DashboardMetrics['alerts'] {\n    const alerts: DashboardMetrics['alerts'] = [];\n\n    // ROAS alert\n    if (metrics.roas < 200) {\n      alerts.push({\n        type: metrics.roas < 100 ? 'critical' : 'warning',\n        message: 'ROAS is below target threshold',\n        metric: 'roas',\n        value: metrics.roas,\n        threshold: 200,\n      });\n    }\n\n    // Conversion rate alert\n    if (metrics.conversionRate < 2) {\n      alerts.push({\n        type: metrics.conversionRate < 1 ? 'critical' : 'warning',\n        message: 'Conversion rate is below target threshold',\n        metric: 'conversionRate',\n        value: metrics.conversionRate,\n        threshold: 2,\n      });\n    }\n\n    // CTR alert\n    if (metrics.ctr < 1) {\n      alerts.push({\n        type: metrics.ctr < 0.5 ? 'critical' : 'warning',\n        message: 'Click-through rate is below target threshold',\n        metric: 'ctr',\n        value: metrics.ctr,\n        threshold: 1,\n      });\n    }\n\n    return alerts;\n  }\n\n  private async calculateFunnelAnalysis(\n    campaignId: string,\n    organizationId: string,\n    dateRange: { startDate: Date; endDate: Date }\n  ): Promise<FunnelStage[]> {\n    // Get funnel stages from database\n    const funnelData = await this.prisma.funnelStage.findMany({\n      where: {\n        campaignId,\n        date: {\n          gte: dateRange.startDate,\n          lte: dateRange.endDate,\n        },\n      },\n      orderBy: { stageOrder: 'asc' },\n    });\n\n    // Aggregate by stage\n    const stageMap = new Map<string, { users: number; stageOrder: number }>();\n    \n    funnelData.forEach(stage => {\n      const existing = stageMap.get(stage.stageName) || { users: 0, stageOrder: stage.stageOrder };\n      existing.users += stage.users;\n      stageMap.set(stage.stageName, existing);\n    });\n\n    // Convert to array and calculate rates\n    const stages = Array.from(stageMap.entries())\n      .map(([stageName, data]) => ({ stageName, ...data }))\n      .sort((a, b) => a.stageOrder - b.stageOrder);\n\n    const funnelStages: FunnelStage[] = [];\n    let previousUsers = 0;\n\n    stages.forEach((stage, index) => {\n      const conversionRate = index === 0 ? 100 : previousUsers > 0 ? (stage.users / previousUsers) * 100 : 0;\n      const dropoffRate = 100 - conversionRate;\n\n      funnelStages.push({\n        stage: stage.stageName,\n        users: stage.users,\n        conversionRate,\n        dropoffRate,\n      });\n\n      previousUsers = stage.users;\n    });\n\n    return funnelStages;\n  }\n\n  private async calculateComparison(\n    filters: MetricsFilters,\n    previousPeriod: { startDate: Date; endDate: Date }\n  ): Promise<ComparisonResult> {\n    const [current, previous] = await Promise.all([\n      this.calculateMetrics(filters),\n      this.calculateMetrics({\n        ...filters,\n        startDate: previousPeriod.startDate,\n        endDate: previousPeriod.endDate,\n      }),\n    ]);\n\n    const changes = {} as ComparisonResult['changes'];\n    \n    (Object.keys(current) as (keyof KPIMetrics)[]).forEach(key => {\n      const currentValue = current[key];\n      const previousValue = previous[key];\n      const absolute = currentValue - previousValue;\n      const percentage = previousValue !== 0 ? (absolute / previousValue) * 100 : 0;\n      \n      changes[key] = { absolute, percentage };\n    });\n\n    return { current, previous, changes };\n  }\n\n  private getEmptyMetrics(): KPIMetrics {\n    return {\n      revenue: 0,\n      roas: 0,\n      roi: 0,\n      adSpend: 0,\n      cpc: 0,\n      cpm: 0,\n      cac: 0,\n      impressions: 0,\n      clicks: 0,\n      conversions: 0,\n      ctr: 0,\n      conversionRate: 0,\n      ltv: 0,\n      arpu: 0,\n      margin: 0,\n      profit: 0,\n    };\n  }\n\n  private generateCacheKey(operation: string, data: any): string {\n    const hash = Buffer.from(JSON.stringify(data)).toString('base64').slice(0, 32);\n    return `${operation}:${hash}`;\n  }\n\n  // Cache invalidation methods\n  public async invalidateCampaignCache(campaignId: string): Promise<void> {\n    await this.cache.invalidateCampaign(campaignId);\n  }\n\n  public async invalidateOrganizationCache(organizationId: string): Promise<void> {\n    await this.cache.invalidateOrganization(organizationId);\n  }\n\n  // Export data (with caching for large exports)\n  public async exportMetrics(\n    filters: MetricsFilters,\n    format: 'CSV' | 'XLSX' | 'JSON'\n  ): Promise<{ data: any; filename: string }> {\n    const cacheKey = this.generateCacheKey('export', { ...filters, format });\n    \n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating metrics export', { filters, format });\n        \n        const metrics = await this.calculateMetrics(filters);\n        const filename = `metrics_export_${Date.now()}.${format.toLowerCase()}`;\n        \n        return {\n          data: format === 'JSON' ? metrics : this.formatForExport(metrics, format),\n          filename,\n        };\n      },\n      {\n        ttl: CACHE_TTL.EXPORT,\n        prefix: CACHE_PREFIXES.EXPORT,\n      }\n    );\n  }\n\n  private formatForExport(metrics: KPIMetrics, format: 'CSV' | 'XLSX'): string {\n    if (format === 'CSV') {\n      const headers = Object.keys(metrics).join(',');\n      const values = Object.values(metrics).join(',');\n      return `${headers}\\n${values}`;\n    }\n    \n    // For XLSX, return JSON that can be converted to Excel\n    return JSON.stringify([metrics]);\n  }\n\n  // Ensure stored procedures availability is checked\n  private async ensureStoredProceduresChecked(): Promise<void> {\n    if (this.storedProceduresChecked) {\n      return;\n    }\n    \n    await this.checkStoredProceduresAvailability();\n    this.storedProceduresChecked = true;\n  }\n\n  // Check if stored procedures are available\n  private async checkStoredProceduresAvailability(): Promise<void> {\n    try {\n      const health = await this.storedProcedures.checkStoredProceduresHealth();\n      this.useStoredProcedures = health.available;\n      \n      if (!health.available) {\n        logger.warn('Stored procedures not available, using TypeScript fallback', {\n          missing: health.missing,\n        });\n      } else {\n        logger.info('Stored procedures are available and will be used for optimization');\n      }\n    } catch (error) {\n      logger.error('Error checking stored procedures health:', error);\n      this.useStoredProcedures = false;\n    }\n  }\n\n  // Map stored procedure result to KPIMetrics interface\n  private mapStoredProcedureResult(result: any): KPIMetrics {\n    return {\n      revenue: Number(result.revenue) || 0,\n      roas: Number(result.roas) || 0,\n      roi: Number(result.roi) || 0,\n      adSpend: Number(result.ad_spend) || 0,\n      cpc: Number(result.cpc) || 0,\n      cpm: Number(result.cpm) || 0,\n      cac: Number(result.cac) || 0,\n      impressions: Number(result.impressions) || 0,\n      clicks: Number(result.clicks) || 0,\n      conversions: Number(result.conversions) || 0,\n      ctr: Number(result.ctr) || 0,\n      conversionRate: Number(result.conversion_rate) || 0,\n      ltv: Number(result.ltv) || 0,\n      arpu: Number(result.arpu) || 0,\n      margin: Number(result.margin) || 0,\n      profit: Number(result.profit) || 0,\n    };\n  }\n\n  // Get stored procedures performance stats\n  public async getStoredProceduresStats(): Promise<any[]> {\n    if (!this.useStoredProcedures) {\n      return [];\n    }\n    \n    try {\n      return await this.storedProcedures.getPerformanceStats();\n    } catch (error) {\n      logger.error('Error getting stored procedures stats:', error);\n      return [];\n    }\n  }\n\n  // Force refresh stored procedures availability\n  public async refreshStoredProceduresStatus(): Promise<boolean> {\n    await this.checkStoredProceduresAvailability();\n    return this.useStoredProcedures;\n  }\n\n  // Get metrics history with grouping\n  public async getMetricsHistory(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    campaignIds?: string[],\n    groupBy: 'day' | 'week' | 'month' = 'day'\n  ): Promise<any[]> {\n    const cacheKey = this.generateCacheKey('history', {\n      organizationId,\n      startDate,\n      endDate,\n      campaignIds,\n      groupBy,\n    });\n\n    return this.cache.getOrSet(\n      cacheKey,\n      async () => {\n        logger.info('Generating metrics history', { organizationId, startDate, endDate, groupBy });\n        return this.generateMetricsHistory(organizationId, startDate, endDate, campaignIds, groupBy);\n      },\n      {\n        ttl: CACHE_TTL.METRICS,\n        prefix: CACHE_PREFIXES.METRICS,\n      }\n    );\n  }\n\n  // Generate metrics history data\n  private async generateMetricsHistory(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    campaignIds?: string[],\n    groupBy: 'day' | 'week' | 'month' = 'day'\n  ): Promise<any[]> {\n    try {\n      // Get campaigns if not specified\n      let targetCampaignIds = campaignIds;\n      if (!targetCampaignIds || targetCampaignIds.length === 0) {\n        const campaigns = await this.prisma.campaign.findMany({\n          where: { organizationId },\n          select: { id: true },\n        });\n        targetCampaignIds = campaigns.map(c => c.id);\n      }\n\n      if (targetCampaignIds.length === 0) {\n        return [];\n      }\n\n      // Query daily metrics\n      const dailyMetrics = await this.prisma.campaignMetrics.findMany({\n        where: {\n          campaignExternalId: { in: targetCampaignIds },\n          date: {\n            gte: startDate,\n            lte: endDate,\n          },\n        },\n        orderBy: {\n          date: 'asc',\n        },\n      });\n\n      // Group data based on groupBy parameter\n      return this.groupMetricsByPeriod(dailyMetrics, groupBy);\n    } catch (error) {\n      logger.error('Failed to generate metrics history:', error);\n      throw error;\n    }\n  }\n\n  // Group metrics by time period\n  private groupMetricsByPeriod(metrics: any[], groupBy: 'day' | 'week' | 'month'): any[] {\n    const grouped = new Map<string, any>();\n\n    metrics.forEach(metric => {\n      let key: string;\n      const date = new Date(metric.date);\n\n      switch (groupBy) {\n        case 'day':\n          key = date.toISOString().split('T')[0];\n          break;\n        case 'week':\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          key = weekStart.toISOString().split('T')[0];\n          break;\n        case 'month':\n          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          break;\n        default:\n          key = date.toISOString().split('T')[0];\n      }\n\n      if (!grouped.has(key)) {\n        grouped.set(key, {\n          date: key,\n          impressions: 0,\n          clicks: 0,\n          conversions: 0,\n          revenue: 0,\n          adSpend: 0,\n          ctr: 0,\n          cpc: 0,\n          cpm: 0,\n          conversionRate: 0,\n          roas: 0,\n        });\n      }\n\n      const group = grouped.get(key);\n      group.impressions += metric.impressions || 0;\n      group.clicks += metric.clicks || 0;\n      group.conversions += metric.conversions || 0;\n      group.revenue += 0; // Revenue not available in CampaignMetrics\n      group.adSpend += metric.spend || 0;\n    });\n\n    // Calculate derived metrics\n    const result = Array.from(grouped.values()).map(group => {\n      group.ctr = group.impressions > 0 ? (group.clicks / group.impressions) * 100 : 0;\n      group.cpc = group.clicks > 0 ? group.adSpend / group.clicks : 0;\n      group.cpm = group.impressions > 0 ? (group.adSpend / group.impressions) * 1000 : 0;\n      group.conversionRate = group.clicks > 0 ? (group.conversions / group.clicks) * 100 : 0;\n      group.roas = group.adSpend > 0 ? group.revenue / group.adSpend : 0;\n      \n      // Round numbers to 2 decimal places\n      Object.keys(group).forEach(key => {\n        if (typeof group[key] === 'number' && key !== 'impressions' && key !== 'clicks' && key !== 'conversions') {\n          group[key] = Math.round(group[key] * 100) / 100;\n        }\n      });\n      \n      return group;\n    });\n\n    return result.sort((a, b) => a.date.localeCompare(b.date));\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "16a810a84547317e3c867915cac15140a2b69499"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ooxeg0p2z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ooxeg0p2z();
cov_1ooxeg0p2z().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ooxeg0p2z().s[1]++;
exports.MetricsService = void 0;
const cache_service_1 =
/* istanbul ignore next */
(cov_1ooxeg0p2z().s[2]++, require("./cache.service"));
const stored_procedures_service_1 =
/* istanbul ignore next */
(cov_1ooxeg0p2z().s[3]++, require("./stored-procedures.service"));
const logger_1 =
/* istanbul ignore next */
(cov_1ooxeg0p2z().s[4]++, require("../utils/logger"));
class MetricsService {
  prisma;
  cache =
  /* istanbul ignore next */
  (cov_1ooxeg0p2z().s[5]++, (0, cache_service_1.getCacheService)());
  storedProcedures;
  useStoredProcedures =
  /* istanbul ignore next */
  (cov_1ooxeg0p2z().s[6]++, true); // Flag to enable/disable stored procedures
  storedProceduresChecked =
  /* istanbul ignore next */
  (cov_1ooxeg0p2z().s[7]++, false);
  constructor(prisma) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[0]++;
    cov_1ooxeg0p2z().s[8]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[9]++;
    this.storedProcedures = (0, stored_procedures_service_1.getStoredProceduresService)(prisma);
  }
  // Calculate comprehensive metrics
  async calculateMetrics(filters) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[1]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[10]++, this.generateCacheKey('calculate', filters));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[11]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[2]++;
      cov_1ooxeg0p2z().s[12]++;
      logger_1.logger.info('Calculating metrics from database', {
        filters
      });
      // Ensure stored procedures availability is checked
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[13]++;
      await this.ensureStoredProceduresChecked();
      // Try stored procedure first if available
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[14]++;
      if (this.useStoredProcedures) {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[0][0]++;
        cov_1ooxeg0p2z().s[15]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().s[16]++, await this.storedProcedures.calculateKPIMetrics(filters.organizationId, filters.campaignIds, filters.startDate, filters.endDate));
          /* istanbul ignore next */
          cov_1ooxeg0p2z().s[17]++;
          if (result) {
            /* istanbul ignore next */
            cov_1ooxeg0p2z().b[1][0]++;
            cov_1ooxeg0p2z().s[18]++;
            return this.mapStoredProcedureResult(result);
          } else
          /* istanbul ignore next */
          {
            cov_1ooxeg0p2z().b[1][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1ooxeg0p2z().s[19]++;
          logger_1.logger.warn('Stored procedure failed, falling back to TypeScript calculation:', error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1ooxeg0p2z().b[0][1]++;
      }
      // Fallback to TypeScript calculation
      cov_1ooxeg0p2z().s[20]++;
      return this.calculateMetricsFromDB(filters);
    }, {
      ttl: cache_service_1.CACHE_TTL.METRICS,
      prefix: cache_service_1.CACHE_PREFIXES.METRICS
    });
  }
  // Get dashboard metrics with caching
  async getDashboardMetrics(organizationId, dateRange, campaignIds) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[3]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[21]++, this.generateCacheKey('dashboard', {
      organizationId,
      ...dateRange,
      campaignIds
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[22]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[4]++;
      cov_1ooxeg0p2z().s[23]++;
      logger_1.logger.info('Generating dashboard metrics', {
        organizationId,
        dateRange
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[24]++;
      return this.generateDashboardMetrics(organizationId, dateRange, campaignIds);
    }, {
      ttl: cache_service_1.CACHE_TTL.DASHBOARD,
      prefix: cache_service_1.CACHE_PREFIXES.DASHBOARD
    });
  }
  // Get funnel analysis with caching
  async getFunnelAnalysis(campaignId, organizationId, dateRange) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[5]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[25]++, this.generateCacheKey('funnel', {
      campaignId,
      organizationId,
      ...dateRange
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[26]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[6]++;
      cov_1ooxeg0p2z().s[27]++;
      logger_1.logger.info('Calculating funnel analysis', {
        campaignId,
        dateRange
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[28]++;
      return this.calculateFunnelAnalysis(campaignId, organizationId, dateRange);
    }, {
      ttl: cache_service_1.CACHE_TTL.FUNNEL,
      prefix: cache_service_1.CACHE_PREFIXES.FUNNEL
    });
  }
  // Compare metrics between periods
  async compareMetrics(filters, previousPeriod) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[7]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[29]++, this.generateCacheKey('comparison', {
      ...filters,
      previousPeriod
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[30]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[8]++;
      cov_1ooxeg0p2z().s[31]++;
      logger_1.logger.info('Comparing metrics between periods', {
        filters,
        previousPeriod
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[32]++;
      return this.calculateComparison(filters, previousPeriod);
    }, {
      ttl: cache_service_1.CACHE_TTL.COMPARISON,
      prefix: cache_service_1.CACHE_PREFIXES.COMPARISON
    });
  }
  // Update real-time metrics (no caching for real-time data)
  async updateRealTimeMetrics(campaignId, eventType, eventData) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[9]++;
    cov_1ooxeg0p2z().s[33]++;
    try {
      // Update hourly metrics
      const now =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[34]++, new Date());
      const hourStart =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[35]++, new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[36]++;
      await this.prisma.metricsHourly.upsert({
        where: {
          campaignId_hour: {
            campaignId,
            hour: hourStart
          }
        },
        update: {
          ...(
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[2][0]++, eventType === 'CLICK') &&
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[2][1]++, {
            clicks: {
              increment: 1
            }
          })),
          ...(
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[3][0]++, eventType === 'CONVERSION') &&
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[3][1]++, {
            conversions: {
              increment: 1
            },
            revenue: {
              increment:
              /* istanbul ignore next */
              (cov_1ooxeg0p2z().b[4][0]++, eventData.value) ||
              /* istanbul ignore next */
              (cov_1ooxeg0p2z().b[4][1]++, 0)
            }
          })),
          ...(
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[5][0]++, eventType === 'VIEW') &&
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[5][1]++, {
            impressions: {
              increment: 1
            }
          })),
          updatedAt: now
        },
        create: {
          campaignId,
          hour: hourStart,
          impressions: eventType === 'VIEW' ?
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[6][0]++, 1) :
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[6][1]++, 0),
          clicks: eventType === 'CLICK' ?
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[7][0]++, 1) :
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[7][1]++, 0),
          conversions: eventType === 'CONVERSION' ?
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[8][0]++, 1) :
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[8][1]++, 0),
          revenue: eventType === 'CONVERSION' ?
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[9][0]++,
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[10][0]++, eventData.value) ||
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[10][1]++, 0)) :
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().b[9][1]++, 0),
          adSpend: 0,
          createdAt: now,
          updatedAt: now
        }
      });
      // Invalidate related cache
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[37]++;
      await this.invalidateCampaignCache(campaignId);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[38]++;
      logger_1.logger.debug(`Real-time metrics updated for campaign ${campaignId}`, {
        eventType,
        eventData
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[39]++;
      logger_1.logger.error('Failed to update real-time metrics:', error);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[40]++;
      throw error;
    }
  }
  // Private methods for actual calculations
  async calculateMetricsFromDB(filters) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[10]++;
    const {
      campaignIds,
      startDate,
      endDate,
      organizationId
    } =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[41]++, filters);
    // Get campaigns if not specified
    let targetCampaignIds =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[42]++, campaignIds);
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[43]++;
    if (
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[12][0]++, !targetCampaignIds) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[12][1]++, targetCampaignIds.length === 0)) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[11][0]++;
      const campaigns =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[44]++, await this.prisma.campaign.findMany({
        where: {
          organizationId
        },
        select: {
          id: true
        }
      }));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[45]++;
      targetCampaignIds = campaigns.map(c => {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().f[11]++;
        cov_1ooxeg0p2z().s[46]++;
        return c.id;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[11][1]++;
    }
    cov_1ooxeg0p2z().s[47]++;
    if (targetCampaignIds.length === 0) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[13][0]++;
      cov_1ooxeg0p2z().s[48]++;
      return this.getEmptyMetrics();
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[13][1]++;
    }
    // Aggregate daily metrics
    const dailyMetrics =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[49]++, await this.prisma.campaignMetrics.aggregate({
      where: {
        campaignExternalId: {
          in: targetCampaignIds
        },
        date: {
          gte: startDate,
          lte: endDate
        }
      },
      _sum: {
        impressions: true,
        clicks: true,
        conversions: true,
        spend: true
      }
    }));
    const sums =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[50]++, dailyMetrics._sum);
    const impressions =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[51]++,
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[14][0]++, sums.impressions) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[14][1]++, 0));
    const clicks =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[52]++,
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[15][0]++, sums.clicks) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[15][1]++, 0));
    const conversions =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[53]++,
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[16][0]++, sums.conversions) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[16][1]++, 0));
    const revenue =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[54]++, 0); // Revenue not available in CampaignMetrics
    const adSpend =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[55]++,
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[17][0]++, sums.spend) ||
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[17][1]++, 0));
    // Calculate derived metrics
    const ctr =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[56]++, impressions > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[18][0]++, clicks / impressions * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[18][1]++, 0));
    const conversionRate =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[57]++, clicks > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[19][0]++, conversions / clicks * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[19][1]++, 0));
    const cpc =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[58]++, clicks > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[20][0]++, adSpend / clicks) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[20][1]++, 0));
    const cpm =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[59]++, impressions > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[21][0]++, adSpend / impressions * 1000) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[21][1]++, 0));
    const cac =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[60]++, conversions > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[22][0]++, adSpend / conversions) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[22][1]++, 0));
    const roas =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[61]++, adSpend > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[23][0]++, revenue / adSpend * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[23][1]++, 0));
    const roi =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[62]++, adSpend > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[24][0]++, (revenue - adSpend) / adSpend * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[24][1]++, 0));
    const profit =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[63]++, revenue - adSpend);
    const margin =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[64]++, revenue > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[25][0]++, profit / revenue * 100) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[25][1]++, 0));
    const arpu =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[65]++, conversions > 0 ?
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[26][0]++, revenue / conversions) :
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[26][1]++, 0));
    // LTV calculation (simplified - could be more complex based on business model)
    const ltv =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[66]++, arpu * 2.5); // Assuming 2.5x multiplier for LTV
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[67]++;
    return {
      revenue,
      roas,
      roi,
      adSpend,
      cpc,
      cpm,
      cac,
      impressions,
      clicks,
      conversions,
      ctr,
      conversionRate,
      ltv,
      arpu,
      margin,
      profit
    };
  }
  async generateDashboardMetrics(organizationId, dateRange, campaignIds) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[12]++;
    // Get summary metrics
    const summary =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[68]++, await this.calculateMetrics({
      organizationId,
      startDate: dateRange.startDate,
      endDate: dateRange.endDate,
      campaignIds
    }));
    // Get trends (last 7 days)
    const trends =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[69]++, await this.calculateTrends(organizationId, dateRange, campaignIds));
    // Get top campaigns
    const topCampaigns =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[70]++, await this.getTopCampaigns(organizationId, dateRange, 5));
    // Generate alerts
    const alerts =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[71]++, this.generateAlerts(summary));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[72]++;
    return {
      summary,
      trends,
      topCampaigns,
      alerts
    };
  }
  async calculateTrends(organizationId, dateRange, campaignIds) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[13]++;
    const trends =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[73]++, []);
    const daysDiff =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[74]++, Math.ceil((dateRange.endDate.getTime() - dateRange.startDate.getTime()) / (1000 * 60 * 60 * 24)));
    const intervalDays =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[75]++, Math.max(1, Math.floor(daysDiff / 7))); // Max 7 data points
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[76]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[77]++, 0);
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[27][0]++, i < 7) &&
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().b[27][1]++, i * intervalDays < daysDiff); i++) {
      const periodStart =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[78]++, new Date(dateRange.startDate));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[79]++;
      periodStart.setDate(periodStart.getDate() + i * intervalDays);
      const periodEnd =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[80]++, new Date(periodStart));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[81]++;
      periodEnd.setDate(periodEnd.getDate() + intervalDays - 1);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[82]++;
      if (periodEnd > dateRange.endDate) {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[28][0]++;
        cov_1ooxeg0p2z().s[83]++;
        periodEnd.setTime(dateRange.endDate.getTime());
      } else
      /* istanbul ignore next */
      {
        cov_1ooxeg0p2z().b[28][1]++;
      }
      const metrics =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[84]++, await this.calculateMetrics({
        organizationId,
        startDate: periodStart,
        endDate: periodEnd,
        campaignIds
      }));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[85]++;
      trends.push({
        period: periodStart.toISOString().split('T')[0],
        metrics
      });
    }
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[86]++;
    return trends;
  }
  async getTopCampaigns(organizationId, dateRange, limit) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[14]++;
    // Get campaigns with their metrics
    const campaigns =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[87]++, await this.prisma.campaign.findMany({
      where: {
        organizationId
      },
      select: {
        id: true,
        name: true
      }
    }));
    const campaignMetrics =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[88]++, await Promise.all(campaigns.map(async campaign => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[15]++;
      const metrics =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[89]++, await this.calculateMetrics({
        organizationId,
        startDate: dateRange.startDate,
        endDate: dateRange.endDate,
        campaignIds: [campaign.id]
      }));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[90]++;
      return {
        campaignId: campaign.id,
        campaignName: campaign.name,
        metrics
      };
    })));
    // Sort by revenue and return top campaigns
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[91]++;
    return campaignMetrics.sort((a, b) => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[16]++;
      cov_1ooxeg0p2z().s[92]++;
      return b.metrics.revenue - a.metrics.revenue;
    }).slice(0, limit);
  }
  generateAlerts(metrics) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[17]++;
    const alerts =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[93]++, []);
    // ROAS alert
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[94]++;
    if (metrics.roas < 200) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[29][0]++;
      cov_1ooxeg0p2z().s[95]++;
      alerts.push({
        type: metrics.roas < 100 ?
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[30][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[30][1]++, 'warning'),
        message: 'ROAS is below target threshold',
        metric: 'roas',
        value: metrics.roas,
        threshold: 200
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[29][1]++;
    }
    // Conversion rate alert
    cov_1ooxeg0p2z().s[96]++;
    if (metrics.conversionRate < 2) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[31][0]++;
      cov_1ooxeg0p2z().s[97]++;
      alerts.push({
        type: metrics.conversionRate < 1 ?
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[32][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[32][1]++, 'warning'),
        message: 'Conversion rate is below target threshold',
        metric: 'conversionRate',
        value: metrics.conversionRate,
        threshold: 2
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[31][1]++;
    }
    // CTR alert
    cov_1ooxeg0p2z().s[98]++;
    if (metrics.ctr < 1) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[33][0]++;
      cov_1ooxeg0p2z().s[99]++;
      alerts.push({
        type: metrics.ctr < 0.5 ?
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[34][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[34][1]++, 'warning'),
        message: 'Click-through rate is below target threshold',
        metric: 'ctr',
        value: metrics.ctr,
        threshold: 1
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[33][1]++;
    }
    cov_1ooxeg0p2z().s[100]++;
    return alerts;
  }
  async calculateFunnelAnalysis(campaignId, organizationId, dateRange) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[18]++;
    // Get funnel stages from database
    const funnelData =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[101]++, await this.prisma.funnelStage.findMany({
      where: {
        campaignId,
        date: {
          gte: dateRange.startDate,
          lte: dateRange.endDate
        }
      },
      orderBy: {
        stageOrder: 'asc'
      }
    }));
    // Aggregate by stage
    const stageMap =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[102]++, new Map());
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[103]++;
    funnelData.forEach(stage => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[19]++;
      const existing =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[104]++,
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[35][0]++, stageMap.get(stage.stageName)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[35][1]++, {
        users: 0,
        stageOrder: stage.stageOrder
      }));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[105]++;
      existing.users += stage.users;
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[106]++;
      stageMap.set(stage.stageName, existing);
    });
    // Convert to array and calculate rates
    const stages =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[107]++, Array.from(stageMap.entries()).map(([stageName, data]) => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[20]++;
      cov_1ooxeg0p2z().s[108]++;
      return {
        stageName,
        ...data
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[21]++;
      cov_1ooxeg0p2z().s[109]++;
      return a.stageOrder - b.stageOrder;
    }));
    const funnelStages =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[110]++, []);
    let previousUsers =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[111]++, 0);
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[112]++;
    stages.forEach((stage, index) => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[22]++;
      const conversionRate =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[113]++, index === 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[36][0]++, 100) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[36][1]++, previousUsers > 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[37][0]++, stage.users / previousUsers * 100) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[37][1]++, 0)));
      const dropoffRate =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[114]++, 100 - conversionRate);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[115]++;
      funnelStages.push({
        stage: stage.stageName,
        users: stage.users,
        conversionRate,
        dropoffRate
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[116]++;
      previousUsers = stage.users;
    });
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[117]++;
    return funnelStages;
  }
  async calculateComparison(filters, previousPeriod) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[23]++;
    const [current, previous] =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[118]++, await Promise.all([this.calculateMetrics(filters), this.calculateMetrics({
      ...filters,
      startDate: previousPeriod.startDate,
      endDate: previousPeriod.endDate
    })]));
    const changes =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[119]++, {});
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[120]++;
    Object.keys(current).forEach(key => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[24]++;
      const currentValue =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[121]++, current[key]);
      const previousValue =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[122]++, previous[key]);
      const absolute =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[123]++, currentValue - previousValue);
      const percentage =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[124]++, previousValue !== 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[38][0]++, absolute / previousValue * 100) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[38][1]++, 0));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[125]++;
      changes[key] = {
        absolute,
        percentage
      };
    });
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[126]++;
    return {
      current,
      previous,
      changes
    };
  }
  getEmptyMetrics() {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[25]++;
    cov_1ooxeg0p2z().s[127]++;
    return {
      revenue: 0,
      roas: 0,
      roi: 0,
      adSpend: 0,
      cpc: 0,
      cpm: 0,
      cac: 0,
      impressions: 0,
      clicks: 0,
      conversions: 0,
      ctr: 0,
      conversionRate: 0,
      ltv: 0,
      arpu: 0,
      margin: 0,
      profit: 0
    };
  }
  generateCacheKey(operation, data) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[26]++;
    const hash =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[128]++, Buffer.from(JSON.stringify(data)).toString('base64').slice(0, 32));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[129]++;
    return `${operation}:${hash}`;
  }
  // Cache invalidation methods
  async invalidateCampaignCache(campaignId) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[27]++;
    cov_1ooxeg0p2z().s[130]++;
    await this.cache.invalidateCampaign(campaignId);
  }
  async invalidateOrganizationCache(organizationId) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[28]++;
    cov_1ooxeg0p2z().s[131]++;
    await this.cache.invalidateOrganization(organizationId);
  }
  // Export data (with caching for large exports)
  async exportMetrics(filters, format) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[29]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[132]++, this.generateCacheKey('export', {
      ...filters,
      format
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[133]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[30]++;
      cov_1ooxeg0p2z().s[134]++;
      logger_1.logger.info('Generating metrics export', {
        filters,
        format
      });
      const metrics =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[135]++, await this.calculateMetrics(filters));
      const filename =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[136]++, `metrics_export_${Date.now()}.${format.toLowerCase()}`);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[137]++;
      return {
        data: format === 'JSON' ?
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[39][0]++, metrics) :
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[39][1]++, this.formatForExport(metrics, format)),
        filename
      };
    }, {
      ttl: cache_service_1.CACHE_TTL.EXPORT,
      prefix: cache_service_1.CACHE_PREFIXES.EXPORT
    });
  }
  formatForExport(metrics, format) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[31]++;
    cov_1ooxeg0p2z().s[138]++;
    if (format === 'CSV') {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[40][0]++;
      const headers =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[139]++, Object.keys(metrics).join(','));
      const values =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[140]++, Object.values(metrics).join(','));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[141]++;
      return `${headers}\n${values}`;
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[40][1]++;
    }
    // For XLSX, return JSON that can be converted to Excel
    cov_1ooxeg0p2z().s[142]++;
    return JSON.stringify([metrics]);
  }
  // Ensure stored procedures availability is checked
  async ensureStoredProceduresChecked() {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[32]++;
    cov_1ooxeg0p2z().s[143]++;
    if (this.storedProceduresChecked) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[41][0]++;
      cov_1ooxeg0p2z().s[144]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[41][1]++;
    }
    cov_1ooxeg0p2z().s[145]++;
    await this.checkStoredProceduresAvailability();
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[146]++;
    this.storedProceduresChecked = true;
  }
  // Check if stored procedures are available
  async checkStoredProceduresAvailability() {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[33]++;
    cov_1ooxeg0p2z().s[147]++;
    try {
      const health =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[148]++, await this.storedProcedures.checkStoredProceduresHealth());
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[149]++;
      this.useStoredProcedures = health.available;
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[150]++;
      if (!health.available) {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[42][0]++;
        cov_1ooxeg0p2z().s[151]++;
        logger_1.logger.warn('Stored procedures not available, using TypeScript fallback', {
          missing: health.missing
        });
      } else {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[42][1]++;
        cov_1ooxeg0p2z().s[152]++;
        logger_1.logger.info('Stored procedures are available and will be used for optimization');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[153]++;
      logger_1.logger.error('Error checking stored procedures health:', error);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[154]++;
      this.useStoredProcedures = false;
    }
  }
  // Map stored procedure result to KPIMetrics interface
  mapStoredProcedureResult(result) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[34]++;
    cov_1ooxeg0p2z().s[155]++;
    return {
      revenue:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[43][0]++, Number(result.revenue)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[43][1]++, 0),
      roas:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[44][0]++, Number(result.roas)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[44][1]++, 0),
      roi:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[45][0]++, Number(result.roi)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[45][1]++, 0),
      adSpend:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[46][0]++, Number(result.ad_spend)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[46][1]++, 0),
      cpc:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[47][0]++, Number(result.cpc)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[47][1]++, 0),
      cpm:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[48][0]++, Number(result.cpm)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[48][1]++, 0),
      cac:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[49][0]++, Number(result.cac)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[49][1]++, 0),
      impressions:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[50][0]++, Number(result.impressions)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[50][1]++, 0),
      clicks:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[51][0]++, Number(result.clicks)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[51][1]++, 0),
      conversions:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[52][0]++, Number(result.conversions)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[52][1]++, 0),
      ctr:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[53][0]++, Number(result.ctr)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[53][1]++, 0),
      conversionRate:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[54][0]++, Number(result.conversion_rate)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[54][1]++, 0),
      ltv:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[55][0]++, Number(result.ltv)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[55][1]++, 0),
      arpu:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[56][0]++, Number(result.arpu)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[56][1]++, 0),
      margin:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[57][0]++, Number(result.margin)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[57][1]++, 0),
      profit:
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[58][0]++, Number(result.profit)) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[58][1]++, 0)
    };
  }
  // Get stored procedures performance stats
  async getStoredProceduresStats() {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[35]++;
    cov_1ooxeg0p2z().s[156]++;
    if (!this.useStoredProcedures) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().b[59][0]++;
      cov_1ooxeg0p2z().s[157]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_1ooxeg0p2z().b[59][1]++;
    }
    cov_1ooxeg0p2z().s[158]++;
    try {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[159]++;
      return await this.storedProcedures.getPerformanceStats();
    } catch (error) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[160]++;
      logger_1.logger.error('Error getting stored procedures stats:', error);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[161]++;
      return [];
    }
  }
  // Force refresh stored procedures availability
  async refreshStoredProceduresStatus() {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[36]++;
    cov_1ooxeg0p2z().s[162]++;
    await this.checkStoredProceduresAvailability();
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[163]++;
    return this.useStoredProcedures;
  }
  // Get metrics history with grouping
  async getMetricsHistory(organizationId, startDate, endDate, campaignIds, groupBy =
  /* istanbul ignore next */
  (cov_1ooxeg0p2z().b[60][0]++, 'day')) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[37]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[164]++, this.generateCacheKey('history', {
      organizationId,
      startDate,
      endDate,
      campaignIds,
      groupBy
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[165]++;
    return this.cache.getOrSet(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[38]++;
      cov_1ooxeg0p2z().s[166]++;
      logger_1.logger.info('Generating metrics history', {
        organizationId,
        startDate,
        endDate,
        groupBy
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[167]++;
      return this.generateMetricsHistory(organizationId, startDate, endDate, campaignIds, groupBy);
    }, {
      ttl: cache_service_1.CACHE_TTL.METRICS,
      prefix: cache_service_1.CACHE_PREFIXES.METRICS
    });
  }
  // Generate metrics history data
  async generateMetricsHistory(organizationId, startDate, endDate, campaignIds, groupBy =
  /* istanbul ignore next */
  (cov_1ooxeg0p2z().b[61][0]++, 'day')) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[39]++;
    cov_1ooxeg0p2z().s[168]++;
    try {
      // Get campaigns if not specified
      let targetCampaignIds =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[169]++, campaignIds);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[170]++;
      if (
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[63][0]++, !targetCampaignIds) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[63][1]++, targetCampaignIds.length === 0)) {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[62][0]++;
        const campaigns =
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().s[171]++, await this.prisma.campaign.findMany({
          where: {
            organizationId
          },
          select: {
            id: true
          }
        }));
        /* istanbul ignore next */
        cov_1ooxeg0p2z().s[172]++;
        targetCampaignIds = campaigns.map(c => {
          /* istanbul ignore next */
          cov_1ooxeg0p2z().f[40]++;
          cov_1ooxeg0p2z().s[173]++;
          return c.id;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ooxeg0p2z().b[62][1]++;
      }
      cov_1ooxeg0p2z().s[174]++;
      if (targetCampaignIds.length === 0) {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[64][0]++;
        cov_1ooxeg0p2z().s[175]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_1ooxeg0p2z().b[64][1]++;
      }
      // Query daily metrics
      const dailyMetrics =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[176]++, await this.prisma.campaignMetrics.findMany({
        where: {
          campaignExternalId: {
            in: targetCampaignIds
          },
          date: {
            gte: startDate,
            lte: endDate
          }
        },
        orderBy: {
          date: 'asc'
        }
      }));
      // Group data based on groupBy parameter
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[177]++;
      return this.groupMetricsByPeriod(dailyMetrics, groupBy);
    } catch (error) {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[178]++;
      logger_1.logger.error('Failed to generate metrics history:', error);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[179]++;
      throw error;
    }
  }
  // Group metrics by time period
  groupMetricsByPeriod(metrics, groupBy) {
    /* istanbul ignore next */
    cov_1ooxeg0p2z().f[41]++;
    const grouped =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[180]++, new Map());
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[181]++;
    metrics.forEach(metric => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[42]++;
      let key;
      const date =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[182]++, new Date(metric.date));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[183]++;
      switch (groupBy) {
        case 'day':
          /* istanbul ignore next */
          cov_1ooxeg0p2z().b[65][0]++;
          cov_1ooxeg0p2z().s[184]++;
          key = date.toISOString().split('T')[0];
          /* istanbul ignore next */
          cov_1ooxeg0p2z().s[185]++;
          break;
        case 'week':
          /* istanbul ignore next */
          cov_1ooxeg0p2z().b[65][1]++;
          const weekStart =
          /* istanbul ignore next */
          (cov_1ooxeg0p2z().s[186]++, new Date(date));
          /* istanbul ignore next */
          cov_1ooxeg0p2z().s[187]++;
          weekStart.setDate(date.getDate() - date.getDay());
          /* istanbul ignore next */
          cov_1ooxeg0p2z().s[188]++;
          key = weekStart.toISOString().split('T')[0];
          /* istanbul ignore next */
          cov_1ooxeg0p2z().s[189]++;
          break;
        case 'month':
          /* istanbul ignore next */
          cov_1ooxeg0p2z().b[65][2]++;
          cov_1ooxeg0p2z().s[190]++;
          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
          /* istanbul ignore next */
          cov_1ooxeg0p2z().s[191]++;
          break;
        default:
          /* istanbul ignore next */
          cov_1ooxeg0p2z().b[65][3]++;
          cov_1ooxeg0p2z().s[192]++;
          key = date.toISOString().split('T')[0];
      }
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[193]++;
      if (!grouped.has(key)) {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().b[66][0]++;
        cov_1ooxeg0p2z().s[194]++;
        grouped.set(key, {
          date: key,
          impressions: 0,
          clicks: 0,
          conversions: 0,
          revenue: 0,
          adSpend: 0,
          ctr: 0,
          cpc: 0,
          cpm: 0,
          conversionRate: 0,
          roas: 0
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ooxeg0p2z().b[66][1]++;
      }
      const group =
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().s[195]++, grouped.get(key));
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[196]++;
      group.impressions +=
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[67][0]++, metric.impressions) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[67][1]++, 0);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[197]++;
      group.clicks +=
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[68][0]++, metric.clicks) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[68][1]++, 0);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[198]++;
      group.conversions +=
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[69][0]++, metric.conversions) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[69][1]++, 0);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[199]++;
      group.revenue += 0; // Revenue not available in CampaignMetrics
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[200]++;
      group.adSpend +=
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[70][0]++, metric.spend) ||
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[70][1]++, 0);
    });
    // Calculate derived metrics
    const result =
    /* istanbul ignore next */
    (cov_1ooxeg0p2z().s[201]++, Array.from(grouped.values()).map(group => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[43]++;
      cov_1ooxeg0p2z().s[202]++;
      group.ctr = group.impressions > 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[71][0]++, group.clicks / group.impressions * 100) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[71][1]++, 0);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[203]++;
      group.cpc = group.clicks > 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[72][0]++, group.adSpend / group.clicks) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[72][1]++, 0);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[204]++;
      group.cpm = group.impressions > 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[73][0]++, group.adSpend / group.impressions * 1000) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[73][1]++, 0);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[205]++;
      group.conversionRate = group.clicks > 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[74][0]++, group.conversions / group.clicks * 100) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[74][1]++, 0);
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[206]++;
      group.roas = group.adSpend > 0 ?
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[75][0]++, group.revenue / group.adSpend) :
      /* istanbul ignore next */
      (cov_1ooxeg0p2z().b[75][1]++, 0);
      // Round numbers to 2 decimal places
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[207]++;
      Object.keys(group).forEach(key => {
        /* istanbul ignore next */
        cov_1ooxeg0p2z().f[44]++;
        cov_1ooxeg0p2z().s[208]++;
        if (
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[77][0]++, typeof group[key] === 'number') &&
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[77][1]++, key !== 'impressions') &&
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[77][2]++, key !== 'clicks') &&
        /* istanbul ignore next */
        (cov_1ooxeg0p2z().b[77][3]++, key !== 'conversions')) {
          /* istanbul ignore next */
          cov_1ooxeg0p2z().b[76][0]++;
          cov_1ooxeg0p2z().s[209]++;
          group[key] = Math.round(group[key] * 100) / 100;
        } else
        /* istanbul ignore next */
        {
          cov_1ooxeg0p2z().b[76][1]++;
        }
      });
      /* istanbul ignore next */
      cov_1ooxeg0p2z().s[210]++;
      return group;
    }));
    /* istanbul ignore next */
    cov_1ooxeg0p2z().s[211]++;
    return result.sort((a, b) => {
      /* istanbul ignore next */
      cov_1ooxeg0p2z().f[45]++;
      cov_1ooxeg0p2z().s[212]++;
      return a.date.localeCompare(b.date);
    });
  }
}
/* istanbul ignore next */
cov_1ooxeg0p2z().s[213]++;
exports.MetricsService = MetricsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW9veGVnMHAyeiIsImFjdHVhbENvdmVyYWdlIiwicyIsImNhY2hlX3NlcnZpY2VfMSIsInJlcXVpcmUiLCJzdG9yZWRfcHJvY2VkdXJlc19zZXJ2aWNlXzEiLCJsb2dnZXJfMSIsIk1ldHJpY3NTZXJ2aWNlIiwicHJpc21hIiwiY2FjaGUiLCJnZXRDYWNoZVNlcnZpY2UiLCJzdG9yZWRQcm9jZWR1cmVzIiwidXNlU3RvcmVkUHJvY2VkdXJlcyIsInN0b3JlZFByb2NlZHVyZXNDaGVja2VkIiwiY29uc3RydWN0b3IiLCJmIiwiZ2V0U3RvcmVkUHJvY2VkdXJlc1NlcnZpY2UiLCJjYWxjdWxhdGVNZXRyaWNzIiwiZmlsdGVycyIsImNhY2hlS2V5IiwiZ2VuZXJhdGVDYWNoZUtleSIsImdldE9yU2V0IiwibG9nZ2VyIiwiaW5mbyIsImVuc3VyZVN0b3JlZFByb2NlZHVyZXNDaGVja2VkIiwiYiIsInJlc3VsdCIsImNhbGN1bGF0ZUtQSU1ldHJpY3MiLCJvcmdhbml6YXRpb25JZCIsImNhbXBhaWduSWRzIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsIm1hcFN0b3JlZFByb2NlZHVyZVJlc3VsdCIsImVycm9yIiwid2FybiIsImNhbGN1bGF0ZU1ldHJpY3NGcm9tREIiLCJ0dGwiLCJDQUNIRV9UVEwiLCJNRVRSSUNTIiwicHJlZml4IiwiQ0FDSEVfUFJFRklYRVMiLCJnZXREYXNoYm9hcmRNZXRyaWNzIiwiZGF0ZVJhbmdlIiwiZ2VuZXJhdGVEYXNoYm9hcmRNZXRyaWNzIiwiREFTSEJPQVJEIiwiZ2V0RnVubmVsQW5hbHlzaXMiLCJjYW1wYWlnbklkIiwiY2FsY3VsYXRlRnVubmVsQW5hbHlzaXMiLCJGVU5ORUwiLCJjb21wYXJlTWV0cmljcyIsInByZXZpb3VzUGVyaW9kIiwiY2FsY3VsYXRlQ29tcGFyaXNvbiIsIkNPTVBBUklTT04iLCJ1cGRhdGVSZWFsVGltZU1ldHJpY3MiLCJldmVudFR5cGUiLCJldmVudERhdGEiLCJub3ciLCJEYXRlIiwiaG91clN0YXJ0IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsIm1ldHJpY3NIb3VybHkiLCJ1cHNlcnQiLCJ3aGVyZSIsImNhbXBhaWduSWRfaG91ciIsImhvdXIiLCJ1cGRhdGUiLCJjbGlja3MiLCJpbmNyZW1lbnQiLCJjb252ZXJzaW9ucyIsInJldmVudWUiLCJ2YWx1ZSIsImltcHJlc3Npb25zIiwidXBkYXRlZEF0IiwiY3JlYXRlIiwiYWRTcGVuZCIsImNyZWF0ZWRBdCIsImludmFsaWRhdGVDYW1wYWlnbkNhY2hlIiwiZGVidWciLCJ0YXJnZXRDYW1wYWlnbklkcyIsImxlbmd0aCIsImNhbXBhaWducyIsImNhbXBhaWduIiwiZmluZE1hbnkiLCJzZWxlY3QiLCJpZCIsIm1hcCIsImMiLCJnZXRFbXB0eU1ldHJpY3MiLCJkYWlseU1ldHJpY3MiLCJjYW1wYWlnbk1ldHJpY3MiLCJhZ2dyZWdhdGUiLCJjYW1wYWlnbkV4dGVybmFsSWQiLCJpbiIsImRhdGUiLCJndGUiLCJsdGUiLCJfc3VtIiwic3BlbmQiLCJzdW1zIiwiY3RyIiwiY29udmVyc2lvblJhdGUiLCJjcGMiLCJjcG0iLCJjYWMiLCJyb2FzIiwicm9pIiwicHJvZml0IiwibWFyZ2luIiwiYXJwdSIsImx0diIsInN1bW1hcnkiLCJ0cmVuZHMiLCJjYWxjdWxhdGVUcmVuZHMiLCJ0b3BDYW1wYWlnbnMiLCJnZXRUb3BDYW1wYWlnbnMiLCJhbGVydHMiLCJnZW5lcmF0ZUFsZXJ0cyIsImRheXNEaWZmIiwiTWF0aCIsImNlaWwiLCJnZXRUaW1lIiwiaW50ZXJ2YWxEYXlzIiwibWF4IiwiZmxvb3IiLCJpIiwicGVyaW9kU3RhcnQiLCJzZXREYXRlIiwicGVyaW9kRW5kIiwic2V0VGltZSIsIm1ldHJpY3MiLCJwdXNoIiwicGVyaW9kIiwidG9JU09TdHJpbmciLCJzcGxpdCIsImxpbWl0IiwibmFtZSIsIlByb21pc2UiLCJhbGwiLCJjYW1wYWlnbk5hbWUiLCJzb3J0IiwiYSIsInNsaWNlIiwidHlwZSIsIm1lc3NhZ2UiLCJtZXRyaWMiLCJ0aHJlc2hvbGQiLCJmdW5uZWxEYXRhIiwiZnVubmVsU3RhZ2UiLCJvcmRlckJ5Iiwic3RhZ2VPcmRlciIsInN0YWdlTWFwIiwiTWFwIiwiZm9yRWFjaCIsInN0YWdlIiwiZXhpc3RpbmciLCJnZXQiLCJzdGFnZU5hbWUiLCJ1c2VycyIsInNldCIsInN0YWdlcyIsIkFycmF5IiwiZnJvbSIsImVudHJpZXMiLCJkYXRhIiwiZnVubmVsU3RhZ2VzIiwicHJldmlvdXNVc2VycyIsImluZGV4IiwiZHJvcG9mZlJhdGUiLCJjdXJyZW50IiwicHJldmlvdXMiLCJjaGFuZ2VzIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImN1cnJlbnRWYWx1ZSIsInByZXZpb3VzVmFsdWUiLCJhYnNvbHV0ZSIsInBlcmNlbnRhZ2UiLCJvcGVyYXRpb24iLCJoYXNoIiwiQnVmZmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvU3RyaW5nIiwiaW52YWxpZGF0ZUNhbXBhaWduIiwiaW52YWxpZGF0ZU9yZ2FuaXphdGlvbkNhY2hlIiwiaW52YWxpZGF0ZU9yZ2FuaXphdGlvbiIsImV4cG9ydE1ldHJpY3MiLCJmb3JtYXQiLCJmaWxlbmFtZSIsInRvTG93ZXJDYXNlIiwiZm9ybWF0Rm9yRXhwb3J0IiwiRVhQT1JUIiwiaGVhZGVycyIsImpvaW4iLCJ2YWx1ZXMiLCJjaGVja1N0b3JlZFByb2NlZHVyZXNBdmFpbGFiaWxpdHkiLCJoZWFsdGgiLCJjaGVja1N0b3JlZFByb2NlZHVyZXNIZWFsdGgiLCJhdmFpbGFibGUiLCJtaXNzaW5nIiwiTnVtYmVyIiwiYWRfc3BlbmQiLCJjb252ZXJzaW9uX3JhdGUiLCJnZXRTdG9yZWRQcm9jZWR1cmVzU3RhdHMiLCJnZXRQZXJmb3JtYW5jZVN0YXRzIiwicmVmcmVzaFN0b3JlZFByb2NlZHVyZXNTdGF0dXMiLCJnZXRNZXRyaWNzSGlzdG9yeSIsImdyb3VwQnkiLCJnZW5lcmF0ZU1ldHJpY3NIaXN0b3J5IiwiZ3JvdXBNZXRyaWNzQnlQZXJpb2QiLCJncm91cGVkIiwid2Vla1N0YXJ0IiwiZ2V0RGF5IiwiU3RyaW5nIiwicGFkU3RhcnQiLCJoYXMiLCJncm91cCIsInJvdW5kIiwibG9jYWxlQ29tcGFyZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEVuem8gTWFyY2Vsb1xcRGVza3RvcFxcUHJvamV0b3MgRW1wcmVzYVxcU2FhcyBVdG1pZnlcXHV0bWlmeS1jbG9uZVxcYXBwc1xcYXBpXFxzcmNcXHNlcnZpY2VzXFxtZXRyaWNzLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hU2VydmljZSB9IGZyb20gJy4uL2RhdGFiYXNlL3ByaXNtYS5zZXJ2aWNlJztcbmltcG9ydCB7IGdldENhY2hlU2VydmljZSwgQ0FDSEVfUFJFRklYRVMsIENBQ0hFX1RUTCwgQ2FjaGVkIH0gZnJvbSAnLi9jYWNoZS5zZXJ2aWNlJztcbmltcG9ydCB7IGdldFN0b3JlZFByb2NlZHVyZXNTZXJ2aWNlLCBTdG9yZWRQcm9jZWR1cmVzU2VydmljZSB9IGZyb20gJy4vc3RvcmVkLXByb2NlZHVyZXMuc2VydmljZSc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi91dGlscy9sb2dnZXInO1xuXG4vLyBNZXRyaWNzIGNhbGN1bGF0aW9uIGludGVyZmFjZXNcbmV4cG9ydCBpbnRlcmZhY2UgTWV0cmljc0ZpbHRlcnMge1xuICBjYW1wYWlnbklkcz86IHN0cmluZ1tdO1xuICBzdGFydERhdGU6IERhdGU7XG4gIGVuZERhdGU6IERhdGU7XG4gIG1ldHJpY3NUeXBlcz86IHN0cmluZ1tdO1xuICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xuICBncm91cEJ5PzogJ2RheScgfCAnaG91cicgfCAnY2FtcGFpZ24nIHwgJ3BsYXRmb3JtJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBLUElNZXRyaWNzIHtcbiAgLy8gUmV2ZW51ZSBtZXRyaWNzXG4gIHJldmVudWU6IG51bWJlcjtcbiAgcm9hczogbnVtYmVyOyAvLyBSZXR1cm4gb24gQWQgU3BlbmRcbiAgcm9pOiBudW1iZXI7IC8vIFJldHVybiBvbiBJbnZlc3RtZW50XG4gIFxuICAvLyBDb3N0IG1ldHJpY3NcbiAgYWRTcGVuZDogbnVtYmVyO1xuICBjcGM6IG51bWJlcjsgLy8gQ29zdCBQZXIgQ2xpY2tcbiAgY3BtOiBudW1iZXI7IC8vIENvc3QgUGVyIE1pbGxlICgxMDAwIGltcHJlc3Npb25zKVxuICBjYWM6IG51bWJlcjsgLy8gQ3VzdG9tZXIgQWNxdWlzaXRpb24gQ29zdFxuICBcbiAgLy8gUGVyZm9ybWFuY2UgbWV0cmljc1xuICBpbXByZXNzaW9uczogbnVtYmVyO1xuICBjbGlja3M6IG51bWJlcjtcbiAgY29udmVyc2lvbnM6IG51bWJlcjtcbiAgY3RyOiBudW1iZXI7IC8vIENsaWNrIFRocm91Z2ggUmF0ZVxuICBjb252ZXJzaW9uUmF0ZTogbnVtYmVyO1xuICBcbiAgLy8gQ3VzdG9tZXIgbWV0cmljc1xuICBsdHY6IG51bWJlcjsgLy8gTGlmZXRpbWUgVmFsdWVcbiAgYXJwdTogbnVtYmVyOyAvLyBBdmVyYWdlIFJldmVudWUgUGVyIFVzZXJcbiAgXG4gIC8vIFByb2ZpdGFiaWxpdHlcbiAgbWFyZ2luOiBudW1iZXI7XG4gIHByb2ZpdDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhc2hib2FyZE1ldHJpY3Mge1xuICBzdW1tYXJ5OiBLUElNZXRyaWNzO1xuICB0cmVuZHM6IHtcbiAgICBwZXJpb2Q6IHN0cmluZztcbiAgICBtZXRyaWNzOiBLUElNZXRyaWNzO1xuICB9W107XG4gIHRvcENhbXBhaWduczoge1xuICAgIGNhbXBhaWduSWQ6IHN0cmluZztcbiAgICBjYW1wYWlnbk5hbWU6IHN0cmluZztcbiAgICBtZXRyaWNzOiBLUElNZXRyaWNzO1xuICB9W107XG4gIGFsZXJ0czoge1xuICAgIHR5cGU6ICd3YXJuaW5nJyB8ICdjcml0aWNhbCc7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIG1ldHJpYzogc3RyaW5nO1xuICAgIHZhbHVlOiBudW1iZXI7XG4gICAgdGhyZXNob2xkOiBudW1iZXI7XG4gIH1bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGdW5uZWxTdGFnZSB7XG4gIHN0YWdlOiBzdHJpbmc7XG4gIHVzZXJzOiBudW1iZXI7XG4gIGNvbnZlcnNpb25SYXRlOiBudW1iZXI7XG4gIGRyb3BvZmZSYXRlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGFyaXNvblJlc3VsdCB7XG4gIGN1cnJlbnQ6IEtQSU1ldHJpY3M7XG4gIHByZXZpb3VzOiBLUElNZXRyaWNzO1xuICBjaGFuZ2VzOiB7XG4gICAgW2tleSBpbiBrZXlvZiBLUElNZXRyaWNzXToge1xuICAgICAgYWJzb2x1dGU6IG51bWJlcjtcbiAgICAgIHBlcmNlbnRhZ2U6IG51bWJlcjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgTWV0cmljc1NlcnZpY2Uge1xuICBwcml2YXRlIGNhY2hlID0gZ2V0Q2FjaGVTZXJ2aWNlKCk7XG4gIHByaXZhdGUgc3RvcmVkUHJvY2VkdXJlczogU3RvcmVkUHJvY2VkdXJlc1NlcnZpY2U7XG4gIHByaXZhdGUgdXNlU3RvcmVkUHJvY2VkdXJlcyA9IHRydWU7IC8vIEZsYWcgdG8gZW5hYmxlL2Rpc2FibGUgc3RvcmVkIHByb2NlZHVyZXNcbiAgcHJpdmF0ZSBzdG9yZWRQcm9jZWR1cmVzQ2hlY2tlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJpc21hOiBQcmlzbWFTZXJ2aWNlKSB7XG4gICAgdGhpcy5zdG9yZWRQcm9jZWR1cmVzID0gZ2V0U3RvcmVkUHJvY2VkdXJlc1NlcnZpY2UocHJpc21hKTtcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBjb21wcmVoZW5zaXZlIG1ldHJpY3NcbiAgcHVibGljIGFzeW5jIGNhbGN1bGF0ZU1ldHJpY3MoZmlsdGVyczogTWV0cmljc0ZpbHRlcnMpOiBQcm9taXNlPEtQSU1ldHJpY3M+IHtcbiAgICBjb25zdCBjYWNoZUtleSA9IHRoaXMuZ2VuZXJhdGVDYWNoZUtleSgnY2FsY3VsYXRlJywgZmlsdGVycyk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0T3JTZXQoXG4gICAgICBjYWNoZUtleSxcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0NhbGN1bGF0aW5nIG1ldHJpY3MgZnJvbSBkYXRhYmFzZScsIHsgZmlsdGVycyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEVuc3VyZSBzdG9yZWQgcHJvY2VkdXJlcyBhdmFpbGFiaWxpdHkgaXMgY2hlY2tlZFxuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZVN0b3JlZFByb2NlZHVyZXNDaGVja2VkKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBUcnkgc3RvcmVkIHByb2NlZHVyZSBmaXJzdCBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKHRoaXMudXNlU3RvcmVkUHJvY2VkdXJlcykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnN0b3JlZFByb2NlZHVyZXMuY2FsY3VsYXRlS1BJTWV0cmljcyhcbiAgICAgICAgICAgICAgZmlsdGVycy5vcmdhbml6YXRpb25JZCxcbiAgICAgICAgICAgICAgZmlsdGVycy5jYW1wYWlnbklkcyxcbiAgICAgICAgICAgICAgZmlsdGVycy5zdGFydERhdGUsXG4gICAgICAgICAgICAgIGZpbHRlcnMuZW5kRGF0ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBTdG9yZWRQcm9jZWR1cmVSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1N0b3JlZCBwcm9jZWR1cmUgZmFpbGVkLCBmYWxsaW5nIGJhY2sgdG8gVHlwZVNjcmlwdCBjYWxjdWxhdGlvbjonLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBGYWxsYmFjayB0byBUeXBlU2NyaXB0IGNhbGN1bGF0aW9uXG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZU1ldHJpY3NGcm9tREIoZmlsdGVycyk7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0dGw6IENBQ0hFX1RUTC5NRVRSSUNTLFxuICAgICAgICBwcmVmaXg6IENBQ0hFX1BSRUZJWEVTLk1FVFJJQ1MsXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8vIEdldCBkYXNoYm9hcmQgbWV0cmljcyB3aXRoIGNhY2hpbmdcbiAgcHVibGljIGFzeW5jIGdldERhc2hib2FyZE1ldHJpY3MoXG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZyxcbiAgICBkYXRlUmFuZ2U6IHsgc3RhcnREYXRlOiBEYXRlOyBlbmREYXRlOiBEYXRlIH0sXG4gICAgY2FtcGFpZ25JZHM/OiBzdHJpbmdbXVxuICApOiBQcm9taXNlPERhc2hib2FyZE1ldHJpY3M+IHtcbiAgICBjb25zdCBjYWNoZUtleSA9IHRoaXMuZ2VuZXJhdGVDYWNoZUtleSgnZGFzaGJvYXJkJywge1xuICAgICAgb3JnYW5pemF0aW9uSWQsXG4gICAgICAuLi5kYXRlUmFuZ2UsXG4gICAgICBjYW1wYWlnbklkcyxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLmNhY2hlLmdldE9yU2V0KFxuICAgICAgY2FjaGVLZXksXG4gICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxvZ2dlci5pbmZvKCdHZW5lcmF0aW5nIGRhc2hib2FyZCBtZXRyaWNzJywgeyBvcmdhbml6YXRpb25JZCwgZGF0ZVJhbmdlIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZURhc2hib2FyZE1ldHJpY3Mob3JnYW5pemF0aW9uSWQsIGRhdGVSYW5nZSwgY2FtcGFpZ25JZHMpO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHRsOiBDQUNIRV9UVEwuREFTSEJPQVJELFxuICAgICAgICBwcmVmaXg6IENBQ0hFX1BSRUZJWEVTLkRBU0hCT0FSRCxcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgLy8gR2V0IGZ1bm5lbCBhbmFseXNpcyB3aXRoIGNhY2hpbmdcbiAgcHVibGljIGFzeW5jIGdldEZ1bm5lbEFuYWx5c2lzKFxuICAgIGNhbXBhaWduSWQ6IHN0cmluZyxcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nLFxuICAgIGRhdGVSYW5nZTogeyBzdGFydERhdGU6IERhdGU7IGVuZERhdGU6IERhdGUgfVxuICApOiBQcm9taXNlPEZ1bm5lbFN0YWdlW10+IHtcbiAgICBjb25zdCBjYWNoZUtleSA9IHRoaXMuZ2VuZXJhdGVDYWNoZUtleSgnZnVubmVsJywge1xuICAgICAgY2FtcGFpZ25JZCxcbiAgICAgIG9yZ2FuaXphdGlvbklkLFxuICAgICAgLi4uZGF0ZVJhbmdlLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0T3JTZXQoXG4gICAgICBjYWNoZUtleSxcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0NhbGN1bGF0aW5nIGZ1bm5lbCBhbmFseXNpcycsIHsgY2FtcGFpZ25JZCwgZGF0ZVJhbmdlIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVGdW5uZWxBbmFseXNpcyhjYW1wYWlnbklkLCBvcmdhbml6YXRpb25JZCwgZGF0ZVJhbmdlKTtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR0bDogQ0FDSEVfVFRMLkZVTk5FTCxcbiAgICAgICAgcHJlZml4OiBDQUNIRV9QUkVGSVhFUy5GVU5ORUwsXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8vIENvbXBhcmUgbWV0cmljcyBiZXR3ZWVuIHBlcmlvZHNcbiAgcHVibGljIGFzeW5jIGNvbXBhcmVNZXRyaWNzKFxuICAgIGZpbHRlcnM6IE1ldHJpY3NGaWx0ZXJzLFxuICAgIHByZXZpb3VzUGVyaW9kOiB7IHN0YXJ0RGF0ZTogRGF0ZTsgZW5kRGF0ZTogRGF0ZSB9XG4gICk6IFByb21pc2U8Q29tcGFyaXNvblJlc3VsdD4ge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KCdjb21wYXJpc29uJywge1xuICAgICAgLi4uZmlsdGVycyxcbiAgICAgIHByZXZpb3VzUGVyaW9kLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0T3JTZXQoXG4gICAgICBjYWNoZUtleSxcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0NvbXBhcmluZyBtZXRyaWNzIGJldHdlZW4gcGVyaW9kcycsIHsgZmlsdGVycywgcHJldmlvdXNQZXJpb2QgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUNvbXBhcmlzb24oZmlsdGVycywgcHJldmlvdXNQZXJpb2QpO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHRsOiBDQUNIRV9UVEwuQ09NUEFSSVNPTixcbiAgICAgICAgcHJlZml4OiBDQUNIRV9QUkVGSVhFUy5DT01QQVJJU09OLFxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICAvLyBVcGRhdGUgcmVhbC10aW1lIG1ldHJpY3MgKG5vIGNhY2hpbmcgZm9yIHJlYWwtdGltZSBkYXRhKVxuICBwdWJsaWMgYXN5bmMgdXBkYXRlUmVhbFRpbWVNZXRyaWNzKFxuICAgIGNhbXBhaWduSWQ6IHN0cmluZyxcbiAgICBldmVudFR5cGU6ICdDTElDSycgfCAnQ09OVkVSU0lPTicgfCAnVklFVycsXG4gICAgZXZlbnREYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBVcGRhdGUgaG91cmx5IG1ldHJpY3NcbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBob3VyU3RhcnQgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIG5vdy5nZXREYXRlKCksIG5vdy5nZXRIb3VycygpKTtcblxuICAgICAgYXdhaXQgdGhpcy5wcmlzbWEubWV0cmljc0hvdXJseS51cHNlcnQoe1xuICAgICAgICB3aGVyZToge1xuICAgICAgICAgIGNhbXBhaWduSWRfaG91cjoge1xuICAgICAgICAgICAgY2FtcGFpZ25JZCxcbiAgICAgICAgICAgIGhvdXI6IGhvdXJTdGFydCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGU6IHtcbiAgICAgICAgICAuLi4oZXZlbnRUeXBlID09PSAnQ0xJQ0snICYmIHsgY2xpY2tzOiB7IGluY3JlbWVudDogMSB9IH0pLFxuICAgICAgICAgIC4uLihldmVudFR5cGUgPT09ICdDT05WRVJTSU9OJyAmJiB7IFxuICAgICAgICAgICAgY29udmVyc2lvbnM6IHsgaW5jcmVtZW50OiAxIH0sXG4gICAgICAgICAgICByZXZlbnVlOiB7IGluY3JlbWVudDogZXZlbnREYXRhLnZhbHVlIHx8IDAgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAuLi4oZXZlbnRUeXBlID09PSAnVklFVycgJiYgeyBpbXByZXNzaW9uczogeyBpbmNyZW1lbnQ6IDEgfSB9KSxcbiAgICAgICAgICB1cGRhdGVkQXQ6IG5vdyxcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlOiB7XG4gICAgICAgICAgY2FtcGFpZ25JZCxcbiAgICAgICAgICBob3VyOiBob3VyU3RhcnQsXG4gICAgICAgICAgaW1wcmVzc2lvbnM6IGV2ZW50VHlwZSA9PT0gJ1ZJRVcnID8gMSA6IDAsXG4gICAgICAgICAgY2xpY2tzOiBldmVudFR5cGUgPT09ICdDTElDSycgPyAxIDogMCxcbiAgICAgICAgICBjb252ZXJzaW9uczogZXZlbnRUeXBlID09PSAnQ09OVkVSU0lPTicgPyAxIDogMCxcbiAgICAgICAgICByZXZlbnVlOiBldmVudFR5cGUgPT09ICdDT05WRVJTSU9OJyA/IChldmVudERhdGEudmFsdWUgfHwgMCkgOiAwLFxuICAgICAgICAgIGFkU3BlbmQ6IDAsXG4gICAgICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICAgICAgdXBkYXRlZEF0OiBub3csXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gSW52YWxpZGF0ZSByZWxhdGVkIGNhY2hlXG4gICAgICBhd2FpdCB0aGlzLmludmFsaWRhdGVDYW1wYWlnbkNhY2hlKGNhbXBhaWduSWQpO1xuXG4gICAgICBsb2dnZXIuZGVidWcoYFJlYWwtdGltZSBtZXRyaWNzIHVwZGF0ZWQgZm9yIGNhbXBhaWduICR7Y2FtcGFpZ25JZH1gLCB7XG4gICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgZXZlbnREYXRhLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHVwZGF0ZSByZWFsLXRpbWUgbWV0cmljczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvLyBQcml2YXRlIG1ldGhvZHMgZm9yIGFjdHVhbCBjYWxjdWxhdGlvbnNcbiAgcHJpdmF0ZSBhc3luYyBjYWxjdWxhdGVNZXRyaWNzRnJvbURCKGZpbHRlcnM6IE1ldHJpY3NGaWx0ZXJzKTogUHJvbWlzZTxLUElNZXRyaWNzPiB7XG4gICAgY29uc3QgeyBjYW1wYWlnbklkcywgc3RhcnREYXRlLCBlbmREYXRlLCBvcmdhbml6YXRpb25JZCB9ID0gZmlsdGVycztcblxuICAgIC8vIEdldCBjYW1wYWlnbnMgaWYgbm90IHNwZWNpZmllZFxuICAgIGxldCB0YXJnZXRDYW1wYWlnbklkcyA9IGNhbXBhaWduSWRzO1xuICAgIGlmICghdGFyZ2V0Q2FtcGFpZ25JZHMgfHwgdGFyZ2V0Q2FtcGFpZ25JZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zdCBjYW1wYWlnbnMgPSBhd2FpdCB0aGlzLnByaXNtYS5jYW1wYWlnbi5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7IG9yZ2FuaXphdGlvbklkIH0sXG4gICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSB9LFxuICAgICAgfSk7XG4gICAgICB0YXJnZXRDYW1wYWlnbklkcyA9IGNhbXBhaWducy5tYXAoYyA9PiBjLmlkKTtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0Q2FtcGFpZ25JZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRFbXB0eU1ldHJpY3MoKTtcbiAgICB9XG5cbiAgICAvLyBBZ2dyZWdhdGUgZGFpbHkgbWV0cmljc1xuICAgIGNvbnN0IGRhaWx5TWV0cmljcyA9IGF3YWl0IHRoaXMucHJpc21hLmNhbXBhaWduTWV0cmljcy5hZ2dyZWdhdGUoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgY2FtcGFpZ25FeHRlcm5hbElkOiB7IGluOiB0YXJnZXRDYW1wYWlnbklkcyB9LFxuICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgZ3RlOiBzdGFydERhdGUsXG4gICAgICAgICAgbHRlOiBlbmREYXRlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIF9zdW06IHtcbiAgICAgICAgaW1wcmVzc2lvbnM6IHRydWUsXG4gICAgICAgIGNsaWNrczogdHJ1ZSxcbiAgICAgICAgY29udmVyc2lvbnM6IHRydWUsXG4gICAgICAgIHNwZW5kOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHN1bXMgPSBkYWlseU1ldHJpY3MuX3N1bTtcbiAgICBjb25zdCBpbXByZXNzaW9ucyA9IHN1bXMuaW1wcmVzc2lvbnMgfHwgMDtcbiAgICBjb25zdCBjbGlja3MgPSBzdW1zLmNsaWNrcyB8fCAwO1xuICAgIGNvbnN0IGNvbnZlcnNpb25zID0gc3Vtcy5jb252ZXJzaW9ucyB8fCAwO1xuICAgIGNvbnN0IHJldmVudWUgPSAwOyAvLyBSZXZlbnVlIG5vdCBhdmFpbGFibGUgaW4gQ2FtcGFpZ25NZXRyaWNzXG4gICAgY29uc3QgYWRTcGVuZCA9IHN1bXMuc3BlbmQgfHwgMDtcblxuICAgIC8vIENhbGN1bGF0ZSBkZXJpdmVkIG1ldHJpY3NcbiAgICBjb25zdCBjdHIgPSBpbXByZXNzaW9ucyA+IDAgPyAoY2xpY2tzIC8gaW1wcmVzc2lvbnMpICogMTAwIDogMDtcbiAgICBjb25zdCBjb252ZXJzaW9uUmF0ZSA9IGNsaWNrcyA+IDAgPyAoY29udmVyc2lvbnMgLyBjbGlja3MpICogMTAwIDogMDtcbiAgICBjb25zdCBjcGMgPSBjbGlja3MgPiAwID8gYWRTcGVuZCAvIGNsaWNrcyA6IDA7XG4gICAgY29uc3QgY3BtID0gaW1wcmVzc2lvbnMgPiAwID8gKGFkU3BlbmQgLyBpbXByZXNzaW9ucykgKiAxMDAwIDogMDtcbiAgICBjb25zdCBjYWMgPSBjb252ZXJzaW9ucyA+IDAgPyBhZFNwZW5kIC8gY29udmVyc2lvbnMgOiAwO1xuICAgIGNvbnN0IHJvYXMgPSBhZFNwZW5kID4gMCA/IChyZXZlbnVlIC8gYWRTcGVuZCkgKiAxMDAgOiAwO1xuICAgIGNvbnN0IHJvaSA9IGFkU3BlbmQgPiAwID8gKChyZXZlbnVlIC0gYWRTcGVuZCkgLyBhZFNwZW5kKSAqIDEwMCA6IDA7XG4gICAgY29uc3QgcHJvZml0ID0gcmV2ZW51ZSAtIGFkU3BlbmQ7XG4gICAgY29uc3QgbWFyZ2luID0gcmV2ZW51ZSA+IDAgPyAocHJvZml0IC8gcmV2ZW51ZSkgKiAxMDAgOiAwO1xuICAgIGNvbnN0IGFycHUgPSBjb252ZXJzaW9ucyA+IDAgPyByZXZlbnVlIC8gY29udmVyc2lvbnMgOiAwO1xuICAgIFxuICAgIC8vIExUViBjYWxjdWxhdGlvbiAoc2ltcGxpZmllZCAtIGNvdWxkIGJlIG1vcmUgY29tcGxleCBiYXNlZCBvbiBidXNpbmVzcyBtb2RlbClcbiAgICBjb25zdCBsdHYgPSBhcnB1ICogMi41OyAvLyBBc3N1bWluZyAyLjV4IG11bHRpcGxpZXIgZm9yIExUVlxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJldmVudWUsXG4gICAgICByb2FzLFxuICAgICAgcm9pLFxuICAgICAgYWRTcGVuZCxcbiAgICAgIGNwYyxcbiAgICAgIGNwbSxcbiAgICAgIGNhYyxcbiAgICAgIGltcHJlc3Npb25zLFxuICAgICAgY2xpY2tzLFxuICAgICAgY29udmVyc2lvbnMsXG4gICAgICBjdHIsXG4gICAgICBjb252ZXJzaW9uUmF0ZSxcbiAgICAgIGx0dixcbiAgICAgIGFycHUsXG4gICAgICBtYXJnaW4sXG4gICAgICBwcm9maXQsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVEYXNoYm9hcmRNZXRyaWNzKFxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsXG4gICAgZGF0ZVJhbmdlOiB7IHN0YXJ0RGF0ZTogRGF0ZTsgZW5kRGF0ZTogRGF0ZSB9LFxuICAgIGNhbXBhaWduSWRzPzogc3RyaW5nW11cbiAgKTogUHJvbWlzZTxEYXNoYm9hcmRNZXRyaWNzPiB7XG4gICAgLy8gR2V0IHN1bW1hcnkgbWV0cmljc1xuICAgIGNvbnN0IHN1bW1hcnkgPSBhd2FpdCB0aGlzLmNhbGN1bGF0ZU1ldHJpY3Moe1xuICAgICAgb3JnYW5pemF0aW9uSWQsXG4gICAgICBzdGFydERhdGU6IGRhdGVSYW5nZS5zdGFydERhdGUsXG4gICAgICBlbmREYXRlOiBkYXRlUmFuZ2UuZW5kRGF0ZSxcbiAgICAgIGNhbXBhaWduSWRzLFxuICAgIH0pO1xuXG4gICAgLy8gR2V0IHRyZW5kcyAobGFzdCA3IGRheXMpXG4gICAgY29uc3QgdHJlbmRzID0gYXdhaXQgdGhpcy5jYWxjdWxhdGVUcmVuZHMob3JnYW5pemF0aW9uSWQsIGRhdGVSYW5nZSwgY2FtcGFpZ25JZHMpO1xuXG4gICAgLy8gR2V0IHRvcCBjYW1wYWlnbnNcbiAgICBjb25zdCB0b3BDYW1wYWlnbnMgPSBhd2FpdCB0aGlzLmdldFRvcENhbXBhaWducyhvcmdhbml6YXRpb25JZCwgZGF0ZVJhbmdlLCA1KTtcblxuICAgIC8vIEdlbmVyYXRlIGFsZXJ0c1xuICAgIGNvbnN0IGFsZXJ0cyA9IHRoaXMuZ2VuZXJhdGVBbGVydHMoc3VtbWFyeSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VtbWFyeSxcbiAgICAgIHRyZW5kcyxcbiAgICAgIHRvcENhbXBhaWducyxcbiAgICAgIGFsZXJ0cyxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjYWxjdWxhdGVUcmVuZHMoXG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZyxcbiAgICBkYXRlUmFuZ2U6IHsgc3RhcnREYXRlOiBEYXRlOyBlbmREYXRlOiBEYXRlIH0sXG4gICAgY2FtcGFpZ25JZHM/OiBzdHJpbmdbXVxuICApOiBQcm9taXNlPHsgcGVyaW9kOiBzdHJpbmc7IG1ldHJpY3M6IEtQSU1ldHJpY3MgfVtdPiB7XG4gICAgY29uc3QgdHJlbmRzID0gW107XG4gICAgY29uc3QgZGF5c0RpZmYgPSBNYXRoLmNlaWwoKGRhdGVSYW5nZS5lbmREYXRlLmdldFRpbWUoKSAtIGRhdGVSYW5nZS5zdGFydERhdGUuZ2V0VGltZSgpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG4gICAgY29uc3QgaW50ZXJ2YWxEYXlzID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihkYXlzRGlmZiAvIDcpKTsgLy8gTWF4IDcgZGF0YSBwb2ludHNcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNyAmJiBpICogaW50ZXJ2YWxEYXlzIDwgZGF5c0RpZmY7IGkrKykge1xuICAgICAgY29uc3QgcGVyaW9kU3RhcnQgPSBuZXcgRGF0ZShkYXRlUmFuZ2Uuc3RhcnREYXRlKTtcbiAgICAgIHBlcmlvZFN0YXJ0LnNldERhdGUocGVyaW9kU3RhcnQuZ2V0RGF0ZSgpICsgKGkgKiBpbnRlcnZhbERheXMpKTtcbiAgICAgIFxuICAgICAgY29uc3QgcGVyaW9kRW5kID0gbmV3IERhdGUocGVyaW9kU3RhcnQpO1xuICAgICAgcGVyaW9kRW5kLnNldERhdGUocGVyaW9kRW5kLmdldERhdGUoKSArIGludGVydmFsRGF5cyAtIDEpO1xuICAgICAgXG4gICAgICBpZiAocGVyaW9kRW5kID4gZGF0ZVJhbmdlLmVuZERhdGUpIHtcbiAgICAgICAgcGVyaW9kRW5kLnNldFRpbWUoZGF0ZVJhbmdlLmVuZERhdGUuZ2V0VGltZSgpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWV0cmljcyA9IGF3YWl0IHRoaXMuY2FsY3VsYXRlTWV0cmljcyh7XG4gICAgICAgIG9yZ2FuaXphdGlvbklkLFxuICAgICAgICBzdGFydERhdGU6IHBlcmlvZFN0YXJ0LFxuICAgICAgICBlbmREYXRlOiBwZXJpb2RFbmQsXG4gICAgICAgIGNhbXBhaWduSWRzLFxuICAgICAgfSk7XG5cbiAgICAgIHRyZW5kcy5wdXNoKHtcbiAgICAgICAgcGVyaW9kOiBwZXJpb2RTdGFydC50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0sXG4gICAgICAgIG1ldHJpY3MsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJlbmRzO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZXRUb3BDYW1wYWlnbnMoXG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZyxcbiAgICBkYXRlUmFuZ2U6IHsgc3RhcnREYXRlOiBEYXRlOyBlbmREYXRlOiBEYXRlIH0sXG4gICAgbGltaXQ6IG51bWJlclxuICApOiBQcm9taXNlPHsgY2FtcGFpZ25JZDogc3RyaW5nOyBjYW1wYWlnbk5hbWU6IHN0cmluZzsgbWV0cmljczogS1BJTWV0cmljcyB9W10+IHtcbiAgICAvLyBHZXQgY2FtcGFpZ25zIHdpdGggdGhlaXIgbWV0cmljc1xuICAgIGNvbnN0IGNhbXBhaWducyA9IGF3YWl0IHRoaXMucHJpc21hLmNhbXBhaWduLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7IG9yZ2FuaXphdGlvbklkIH0sXG4gICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGNhbXBhaWduTWV0cmljcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgY2FtcGFpZ25zLm1hcChhc3luYyAoY2FtcGFpZ24pID0+IHtcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IGF3YWl0IHRoaXMuY2FsY3VsYXRlTWV0cmljcyh7XG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgc3RhcnREYXRlOiBkYXRlUmFuZ2Uuc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGU6IGRhdGVSYW5nZS5lbmREYXRlLFxuICAgICAgICAgIGNhbXBhaWduSWRzOiBbY2FtcGFpZ24uaWRdLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNhbXBhaWduSWQ6IGNhbXBhaWduLmlkLFxuICAgICAgICAgIGNhbXBhaWduTmFtZTogY2FtcGFpZ24ubmFtZSxcbiAgICAgICAgICBtZXRyaWNzLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgLy8gU29ydCBieSByZXZlbnVlIGFuZCByZXR1cm4gdG9wIGNhbXBhaWduc1xuICAgIHJldHVybiBjYW1wYWlnbk1ldHJpY3NcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLm1ldHJpY3MucmV2ZW51ZSAtIGEubWV0cmljcy5yZXZlbnVlKVxuICAgICAgLnNsaWNlKDAsIGxpbWl0KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVBbGVydHMobWV0cmljczogS1BJTWV0cmljcyk6IERhc2hib2FyZE1ldHJpY3NbJ2FsZXJ0cyddIHtcbiAgICBjb25zdCBhbGVydHM6IERhc2hib2FyZE1ldHJpY3NbJ2FsZXJ0cyddID0gW107XG5cbiAgICAvLyBST0FTIGFsZXJ0XG4gICAgaWYgKG1ldHJpY3Mucm9hcyA8IDIwMCkge1xuICAgICAgYWxlcnRzLnB1c2goe1xuICAgICAgICB0eXBlOiBtZXRyaWNzLnJvYXMgPCAxMDAgPyAnY3JpdGljYWwnIDogJ3dhcm5pbmcnLFxuICAgICAgICBtZXNzYWdlOiAnUk9BUyBpcyBiZWxvdyB0YXJnZXQgdGhyZXNob2xkJyxcbiAgICAgICAgbWV0cmljOiAncm9hcycsXG4gICAgICAgIHZhbHVlOiBtZXRyaWNzLnJvYXMsXG4gICAgICAgIHRocmVzaG9sZDogMjAwLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVyc2lvbiByYXRlIGFsZXJ0XG4gICAgaWYgKG1ldHJpY3MuY29udmVyc2lvblJhdGUgPCAyKSB7XG4gICAgICBhbGVydHMucHVzaCh7XG4gICAgICAgIHR5cGU6IG1ldHJpY3MuY29udmVyc2lvblJhdGUgPCAxID8gJ2NyaXRpY2FsJyA6ICd3YXJuaW5nJyxcbiAgICAgICAgbWVzc2FnZTogJ0NvbnZlcnNpb24gcmF0ZSBpcyBiZWxvdyB0YXJnZXQgdGhyZXNob2xkJyxcbiAgICAgICAgbWV0cmljOiAnY29udmVyc2lvblJhdGUnLFxuICAgICAgICB2YWx1ZTogbWV0cmljcy5jb252ZXJzaW9uUmF0ZSxcbiAgICAgICAgdGhyZXNob2xkOiAyLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ1RSIGFsZXJ0XG4gICAgaWYgKG1ldHJpY3MuY3RyIDwgMSkge1xuICAgICAgYWxlcnRzLnB1c2goe1xuICAgICAgICB0eXBlOiBtZXRyaWNzLmN0ciA8IDAuNSA/ICdjcml0aWNhbCcgOiAnd2FybmluZycsXG4gICAgICAgIG1lc3NhZ2U6ICdDbGljay10aHJvdWdoIHJhdGUgaXMgYmVsb3cgdGFyZ2V0IHRocmVzaG9sZCcsXG4gICAgICAgIG1ldHJpYzogJ2N0cicsXG4gICAgICAgIHZhbHVlOiBtZXRyaWNzLmN0cixcbiAgICAgICAgdGhyZXNob2xkOiAxLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFsZXJ0cztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgY2FsY3VsYXRlRnVubmVsQW5hbHlzaXMoXG4gICAgY2FtcGFpZ25JZDogc3RyaW5nLFxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsXG4gICAgZGF0ZVJhbmdlOiB7IHN0YXJ0RGF0ZTogRGF0ZTsgZW5kRGF0ZTogRGF0ZSB9XG4gICk6IFByb21pc2U8RnVubmVsU3RhZ2VbXT4ge1xuICAgIC8vIEdldCBmdW5uZWwgc3RhZ2VzIGZyb20gZGF0YWJhc2VcbiAgICBjb25zdCBmdW5uZWxEYXRhID0gYXdhaXQgdGhpcy5wcmlzbWEuZnVubmVsU3RhZ2UuZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgY2FtcGFpZ25JZCxcbiAgICAgICAgZGF0ZToge1xuICAgICAgICAgIGd0ZTogZGF0ZVJhbmdlLnN0YXJ0RGF0ZSxcbiAgICAgICAgICBsdGU6IGRhdGVSYW5nZS5lbmREYXRlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIG9yZGVyQnk6IHsgc3RhZ2VPcmRlcjogJ2FzYycgfSxcbiAgICB9KTtcblxuICAgIC8vIEFnZ3JlZ2F0ZSBieSBzdGFnZVxuICAgIGNvbnN0IHN0YWdlTWFwID0gbmV3IE1hcDxzdHJpbmcsIHsgdXNlcnM6IG51bWJlcjsgc3RhZ2VPcmRlcjogbnVtYmVyIH0+KCk7XG4gICAgXG4gICAgZnVubmVsRGF0YS5mb3JFYWNoKHN0YWdlID0+IHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gc3RhZ2VNYXAuZ2V0KHN0YWdlLnN0YWdlTmFtZSkgfHwgeyB1c2VyczogMCwgc3RhZ2VPcmRlcjogc3RhZ2Uuc3RhZ2VPcmRlciB9O1xuICAgICAgZXhpc3RpbmcudXNlcnMgKz0gc3RhZ2UudXNlcnM7XG4gICAgICBzdGFnZU1hcC5zZXQoc3RhZ2Uuc3RhZ2VOYW1lLCBleGlzdGluZyk7XG4gICAgfSk7XG5cbiAgICAvLyBDb252ZXJ0IHRvIGFycmF5IGFuZCBjYWxjdWxhdGUgcmF0ZXNcbiAgICBjb25zdCBzdGFnZXMgPSBBcnJheS5mcm9tKHN0YWdlTWFwLmVudHJpZXMoKSlcbiAgICAgIC5tYXAoKFtzdGFnZU5hbWUsIGRhdGFdKSA9PiAoeyBzdGFnZU5hbWUsIC4uLmRhdGEgfSkpXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5zdGFnZU9yZGVyIC0gYi5zdGFnZU9yZGVyKTtcblxuICAgIGNvbnN0IGZ1bm5lbFN0YWdlczogRnVubmVsU3RhZ2VbXSA9IFtdO1xuICAgIGxldCBwcmV2aW91c1VzZXJzID0gMDtcblxuICAgIHN0YWdlcy5mb3JFYWNoKChzdGFnZSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnZlcnNpb25SYXRlID0gaW5kZXggPT09IDAgPyAxMDAgOiBwcmV2aW91c1VzZXJzID4gMCA/IChzdGFnZS51c2VycyAvIHByZXZpb3VzVXNlcnMpICogMTAwIDogMDtcbiAgICAgIGNvbnN0IGRyb3BvZmZSYXRlID0gMTAwIC0gY29udmVyc2lvblJhdGU7XG5cbiAgICAgIGZ1bm5lbFN0YWdlcy5wdXNoKHtcbiAgICAgICAgc3RhZ2U6IHN0YWdlLnN0YWdlTmFtZSxcbiAgICAgICAgdXNlcnM6IHN0YWdlLnVzZXJzLFxuICAgICAgICBjb252ZXJzaW9uUmF0ZSxcbiAgICAgICAgZHJvcG9mZlJhdGUsXG4gICAgICB9KTtcblxuICAgICAgcHJldmlvdXNVc2VycyA9IHN0YWdlLnVzZXJzO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ1bm5lbFN0YWdlcztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgY2FsY3VsYXRlQ29tcGFyaXNvbihcbiAgICBmaWx0ZXJzOiBNZXRyaWNzRmlsdGVycyxcbiAgICBwcmV2aW91c1BlcmlvZDogeyBzdGFydERhdGU6IERhdGU7IGVuZERhdGU6IERhdGUgfVxuICApOiBQcm9taXNlPENvbXBhcmlzb25SZXN1bHQ+IHtcbiAgICBjb25zdCBbY3VycmVudCwgcHJldmlvdXNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgdGhpcy5jYWxjdWxhdGVNZXRyaWNzKGZpbHRlcnMpLFxuICAgICAgdGhpcy5jYWxjdWxhdGVNZXRyaWNzKHtcbiAgICAgICAgLi4uZmlsdGVycyxcbiAgICAgICAgc3RhcnREYXRlOiBwcmV2aW91c1BlcmlvZC5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGU6IHByZXZpb3VzUGVyaW9kLmVuZERhdGUsXG4gICAgICB9KSxcbiAgICBdKTtcblxuICAgIGNvbnN0IGNoYW5nZXMgPSB7fSBhcyBDb21wYXJpc29uUmVzdWx0WydjaGFuZ2VzJ107XG4gICAgXG4gICAgKE9iamVjdC5rZXlzKGN1cnJlbnQpIGFzIChrZXlvZiBLUElNZXRyaWNzKVtdKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBjdXJyZW50W2tleV07XG4gICAgICBjb25zdCBwcmV2aW91c1ZhbHVlID0gcHJldmlvdXNba2V5XTtcbiAgICAgIGNvbnN0IGFic29sdXRlID0gY3VycmVudFZhbHVlIC0gcHJldmlvdXNWYWx1ZTtcbiAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBwcmV2aW91c1ZhbHVlICE9PSAwID8gKGFic29sdXRlIC8gcHJldmlvdXNWYWx1ZSkgKiAxMDAgOiAwO1xuICAgICAgXG4gICAgICBjaGFuZ2VzW2tleV0gPSB7IGFic29sdXRlLCBwZXJjZW50YWdlIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyBjdXJyZW50LCBwcmV2aW91cywgY2hhbmdlcyB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFbXB0eU1ldHJpY3MoKTogS1BJTWV0cmljcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJldmVudWU6IDAsXG4gICAgICByb2FzOiAwLFxuICAgICAgcm9pOiAwLFxuICAgICAgYWRTcGVuZDogMCxcbiAgICAgIGNwYzogMCxcbiAgICAgIGNwbTogMCxcbiAgICAgIGNhYzogMCxcbiAgICAgIGltcHJlc3Npb25zOiAwLFxuICAgICAgY2xpY2tzOiAwLFxuICAgICAgY29udmVyc2lvbnM6IDAsXG4gICAgICBjdHI6IDAsXG4gICAgICBjb252ZXJzaW9uUmF0ZTogMCxcbiAgICAgIGx0djogMCxcbiAgICAgIGFycHU6IDAsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwcm9maXQ6IDAsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVDYWNoZUtleShvcGVyYXRpb246IHN0cmluZywgZGF0YTogYW55KTogc3RyaW5nIHtcbiAgICBjb25zdCBoYXNoID0gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoZGF0YSkpLnRvU3RyaW5nKCdiYXNlNjQnKS5zbGljZSgwLCAzMik7XG4gICAgcmV0dXJuIGAke29wZXJhdGlvbn06JHtoYXNofWA7XG4gIH1cblxuICAvLyBDYWNoZSBpbnZhbGlkYXRpb24gbWV0aG9kc1xuICBwdWJsaWMgYXN5bmMgaW52YWxpZGF0ZUNhbXBhaWduQ2FjaGUoY2FtcGFpZ25JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5jYWNoZS5pbnZhbGlkYXRlQ2FtcGFpZ24oY2FtcGFpZ25JZCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW52YWxpZGF0ZU9yZ2FuaXphdGlvbkNhY2hlKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmNhY2hlLmludmFsaWRhdGVPcmdhbml6YXRpb24ob3JnYW5pemF0aW9uSWQpO1xuICB9XG5cbiAgLy8gRXhwb3J0IGRhdGEgKHdpdGggY2FjaGluZyBmb3IgbGFyZ2UgZXhwb3J0cylcbiAgcHVibGljIGFzeW5jIGV4cG9ydE1ldHJpY3MoXG4gICAgZmlsdGVyczogTWV0cmljc0ZpbHRlcnMsXG4gICAgZm9ybWF0OiAnQ1NWJyB8ICdYTFNYJyB8ICdKU09OJ1xuICApOiBQcm9taXNlPHsgZGF0YTogYW55OyBmaWxlbmFtZTogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBjYWNoZUtleSA9IHRoaXMuZ2VuZXJhdGVDYWNoZUtleSgnZXhwb3J0JywgeyAuLi5maWx0ZXJzLCBmb3JtYXQgfSk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0T3JTZXQoXG4gICAgICBjYWNoZUtleSxcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0dlbmVyYXRpbmcgbWV0cmljcyBleHBvcnQnLCB7IGZpbHRlcnMsIGZvcm1hdCB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCB0aGlzLmNhbGN1bGF0ZU1ldHJpY3MoZmlsdGVycyk7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gYG1ldHJpY3NfZXhwb3J0XyR7RGF0ZS5ub3coKX0uJHtmb3JtYXQudG9Mb3dlckNhc2UoKX1gO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiBmb3JtYXQgPT09ICdKU09OJyA/IG1ldHJpY3MgOiB0aGlzLmZvcm1hdEZvckV4cG9ydChtZXRyaWNzLCBmb3JtYXQpLFxuICAgICAgICAgIGZpbGVuYW1lLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHRsOiBDQUNIRV9UVEwuRVhQT1JULFxuICAgICAgICBwcmVmaXg6IENBQ0hFX1BSRUZJWEVTLkVYUE9SVCxcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBmb3JtYXRGb3JFeHBvcnQobWV0cmljczogS1BJTWV0cmljcywgZm9ybWF0OiAnQ1NWJyB8ICdYTFNYJyk6IHN0cmluZyB7XG4gICAgaWYgKGZvcm1hdCA9PT0gJ0NTVicpIHtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3Qua2V5cyhtZXRyaWNzKS5qb2luKCcsJyk7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKG1ldHJpY3MpLmpvaW4oJywnKTtcbiAgICAgIHJldHVybiBgJHtoZWFkZXJzfVxcbiR7dmFsdWVzfWA7XG4gICAgfVxuICAgIFxuICAgIC8vIEZvciBYTFNYLCByZXR1cm4gSlNPTiB0aGF0IGNhbiBiZSBjb252ZXJ0ZWQgdG8gRXhjZWxcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoW21ldHJpY3NdKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBzdG9yZWQgcHJvY2VkdXJlcyBhdmFpbGFiaWxpdHkgaXMgY2hlY2tlZFxuICBwcml2YXRlIGFzeW5jIGVuc3VyZVN0b3JlZFByb2NlZHVyZXNDaGVja2VkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLnN0b3JlZFByb2NlZHVyZXNDaGVja2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGF3YWl0IHRoaXMuY2hlY2tTdG9yZWRQcm9jZWR1cmVzQXZhaWxhYmlsaXR5KCk7XG4gICAgdGhpcy5zdG9yZWRQcm9jZWR1cmVzQ2hlY2tlZCA9IHRydWU7XG4gIH1cblxuICAvLyBDaGVjayBpZiBzdG9yZWQgcHJvY2VkdXJlcyBhcmUgYXZhaWxhYmxlXG4gIHByaXZhdGUgYXN5bmMgY2hlY2tTdG9yZWRQcm9jZWR1cmVzQXZhaWxhYmlsaXR5KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBoZWFsdGggPSBhd2FpdCB0aGlzLnN0b3JlZFByb2NlZHVyZXMuY2hlY2tTdG9yZWRQcm9jZWR1cmVzSGVhbHRoKCk7XG4gICAgICB0aGlzLnVzZVN0b3JlZFByb2NlZHVyZXMgPSBoZWFsdGguYXZhaWxhYmxlO1xuICAgICAgXG4gICAgICBpZiAoIWhlYWx0aC5hdmFpbGFibGUpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1N0b3JlZCBwcm9jZWR1cmVzIG5vdCBhdmFpbGFibGUsIHVzaW5nIFR5cGVTY3JpcHQgZmFsbGJhY2snLCB7XG4gICAgICAgICAgbWlzc2luZzogaGVhbHRoLm1pc3NpbmcsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ1N0b3JlZCBwcm9jZWR1cmVzIGFyZSBhdmFpbGFibGUgYW5kIHdpbGwgYmUgdXNlZCBmb3Igb3B0aW1pemF0aW9uJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgY2hlY2tpbmcgc3RvcmVkIHByb2NlZHVyZXMgaGVhbHRoOicsIGVycm9yKTtcbiAgICAgIHRoaXMudXNlU3RvcmVkUHJvY2VkdXJlcyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8vIE1hcCBzdG9yZWQgcHJvY2VkdXJlIHJlc3VsdCB0byBLUElNZXRyaWNzIGludGVyZmFjZVxuICBwcml2YXRlIG1hcFN0b3JlZFByb2NlZHVyZVJlc3VsdChyZXN1bHQ6IGFueSk6IEtQSU1ldHJpY3Mge1xuICAgIHJldHVybiB7XG4gICAgICByZXZlbnVlOiBOdW1iZXIocmVzdWx0LnJldmVudWUpIHx8IDAsXG4gICAgICByb2FzOiBOdW1iZXIocmVzdWx0LnJvYXMpIHx8IDAsXG4gICAgICByb2k6IE51bWJlcihyZXN1bHQucm9pKSB8fCAwLFxuICAgICAgYWRTcGVuZDogTnVtYmVyKHJlc3VsdC5hZF9zcGVuZCkgfHwgMCxcbiAgICAgIGNwYzogTnVtYmVyKHJlc3VsdC5jcGMpIHx8IDAsXG4gICAgICBjcG06IE51bWJlcihyZXN1bHQuY3BtKSB8fCAwLFxuICAgICAgY2FjOiBOdW1iZXIocmVzdWx0LmNhYykgfHwgMCxcbiAgICAgIGltcHJlc3Npb25zOiBOdW1iZXIocmVzdWx0LmltcHJlc3Npb25zKSB8fCAwLFxuICAgICAgY2xpY2tzOiBOdW1iZXIocmVzdWx0LmNsaWNrcykgfHwgMCxcbiAgICAgIGNvbnZlcnNpb25zOiBOdW1iZXIocmVzdWx0LmNvbnZlcnNpb25zKSB8fCAwLFxuICAgICAgY3RyOiBOdW1iZXIocmVzdWx0LmN0cikgfHwgMCxcbiAgICAgIGNvbnZlcnNpb25SYXRlOiBOdW1iZXIocmVzdWx0LmNvbnZlcnNpb25fcmF0ZSkgfHwgMCxcbiAgICAgIGx0djogTnVtYmVyKHJlc3VsdC5sdHYpIHx8IDAsXG4gICAgICBhcnB1OiBOdW1iZXIocmVzdWx0LmFycHUpIHx8IDAsXG4gICAgICBtYXJnaW46IE51bWJlcihyZXN1bHQubWFyZ2luKSB8fCAwLFxuICAgICAgcHJvZml0OiBOdW1iZXIocmVzdWx0LnByb2ZpdCkgfHwgMCxcbiAgICB9O1xuICB9XG5cbiAgLy8gR2V0IHN0b3JlZCBwcm9jZWR1cmVzIHBlcmZvcm1hbmNlIHN0YXRzXG4gIHB1YmxpYyBhc3luYyBnZXRTdG9yZWRQcm9jZWR1cmVzU3RhdHMoKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIGlmICghdGhpcy51c2VTdG9yZWRQcm9jZWR1cmVzKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIFxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdG9yZWRQcm9jZWR1cmVzLmdldFBlcmZvcm1hbmNlU3RhdHMoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBnZXR0aW5nIHN0b3JlZCBwcm9jZWR1cmVzIHN0YXRzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICAvLyBGb3JjZSByZWZyZXNoIHN0b3JlZCBwcm9jZWR1cmVzIGF2YWlsYWJpbGl0eVxuICBwdWJsaWMgYXN5bmMgcmVmcmVzaFN0b3JlZFByb2NlZHVyZXNTdGF0dXMoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgYXdhaXQgdGhpcy5jaGVja1N0b3JlZFByb2NlZHVyZXNBdmFpbGFiaWxpdHkoKTtcbiAgICByZXR1cm4gdGhpcy51c2VTdG9yZWRQcm9jZWR1cmVzO1xuICB9XG5cbiAgLy8gR2V0IG1ldHJpY3MgaGlzdG9yeSB3aXRoIGdyb3VwaW5nXG4gIHB1YmxpYyBhc3luYyBnZXRNZXRyaWNzSGlzdG9yeShcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nLFxuICAgIHN0YXJ0RGF0ZTogRGF0ZSxcbiAgICBlbmREYXRlOiBEYXRlLFxuICAgIGNhbXBhaWduSWRzPzogc3RyaW5nW10sXG4gICAgZ3JvdXBCeTogJ2RheScgfCAnd2VlaycgfCAnbW9udGgnID0gJ2RheSdcbiAgKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KCdoaXN0b3J5Jywge1xuICAgICAgb3JnYW5pemF0aW9uSWQsXG4gICAgICBzdGFydERhdGUsXG4gICAgICBlbmREYXRlLFxuICAgICAgY2FtcGFpZ25JZHMsXG4gICAgICBncm91cEJ5LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0T3JTZXQoXG4gICAgICBjYWNoZUtleSxcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0dlbmVyYXRpbmcgbWV0cmljcyBoaXN0b3J5JywgeyBvcmdhbml6YXRpb25JZCwgc3RhcnREYXRlLCBlbmREYXRlLCBncm91cEJ5IH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZU1ldHJpY3NIaXN0b3J5KG9yZ2FuaXphdGlvbklkLCBzdGFydERhdGUsIGVuZERhdGUsIGNhbXBhaWduSWRzLCBncm91cEJ5KTtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR0bDogQ0FDSEVfVFRMLk1FVFJJQ1MsXG4gICAgICAgIHByZWZpeDogQ0FDSEVfUFJFRklYRVMuTUVUUklDUyxcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgLy8gR2VuZXJhdGUgbWV0cmljcyBoaXN0b3J5IGRhdGFcbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZU1ldHJpY3NIaXN0b3J5KFxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsXG4gICAgc3RhcnREYXRlOiBEYXRlLFxuICAgIGVuZERhdGU6IERhdGUsXG4gICAgY2FtcGFpZ25JZHM/OiBzdHJpbmdbXSxcbiAgICBncm91cEJ5OiAnZGF5JyB8ICd3ZWVrJyB8ICdtb250aCcgPSAnZGF5J1xuICApOiBQcm9taXNlPGFueVtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBjYW1wYWlnbnMgaWYgbm90IHNwZWNpZmllZFxuICAgICAgbGV0IHRhcmdldENhbXBhaWduSWRzID0gY2FtcGFpZ25JZHM7XG4gICAgICBpZiAoIXRhcmdldENhbXBhaWduSWRzIHx8IHRhcmdldENhbXBhaWduSWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCBjYW1wYWlnbnMgPSBhd2FpdCB0aGlzLnByaXNtYS5jYW1wYWlnbi5maW5kTWFueSh7XG4gICAgICAgICAgd2hlcmU6IHsgb3JnYW5pemF0aW9uSWQgfSxcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRhcmdldENhbXBhaWduSWRzID0gY2FtcGFpZ25zLm1hcChjID0+IGMuaWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0Q2FtcGFpZ25JZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgLy8gUXVlcnkgZGFpbHkgbWV0cmljc1xuICAgICAgY29uc3QgZGFpbHlNZXRyaWNzID0gYXdhaXQgdGhpcy5wcmlzbWEuY2FtcGFpZ25NZXRyaWNzLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICBjYW1wYWlnbkV4dGVybmFsSWQ6IHsgaW46IHRhcmdldENhbXBhaWduSWRzIH0sXG4gICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgZ3RlOiBzdGFydERhdGUsXG4gICAgICAgICAgICBsdGU6IGVuZERhdGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgIGRhdGU6ICdhc2MnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEdyb3VwIGRhdGEgYmFzZWQgb24gZ3JvdXBCeSBwYXJhbWV0ZXJcbiAgICAgIHJldHVybiB0aGlzLmdyb3VwTWV0cmljc0J5UGVyaW9kKGRhaWx5TWV0cmljcywgZ3JvdXBCeSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIG1ldHJpY3MgaGlzdG9yeTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvLyBHcm91cCBtZXRyaWNzIGJ5IHRpbWUgcGVyaW9kXG4gIHByaXZhdGUgZ3JvdXBNZXRyaWNzQnlQZXJpb2QobWV0cmljczogYW55W10sIGdyb3VwQnk6ICdkYXknIHwgJ3dlZWsnIHwgJ21vbnRoJyk6IGFueVtdIHtcbiAgICBjb25zdCBncm91cGVkID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcblxuICAgIG1ldHJpY3MuZm9yRWFjaChtZXRyaWMgPT4ge1xuICAgICAgbGV0IGtleTogc3RyaW5nO1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKG1ldHJpYy5kYXRlKTtcblxuICAgICAgc3dpdGNoIChncm91cEJ5KSB7XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAga2V5ID0gZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgIGNvbnN0IHdlZWtTdGFydCA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICAgIHdlZWtTdGFydC5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gZGF0ZS5nZXREYXkoKSk7XG4gICAgICAgICAga2V5ID0gd2Vla1N0YXJ0LnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgIGtleSA9IGAke2RhdGUuZ2V0RnVsbFllYXIoKX0tJHtTdHJpbmcoZGF0ZS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKX1gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGtleSA9IGRhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWdyb3VwZWQuaGFzKGtleSkpIHtcbiAgICAgICAgZ3JvdXBlZC5zZXQoa2V5LCB7XG4gICAgICAgICAgZGF0ZToga2V5LFxuICAgICAgICAgIGltcHJlc3Npb25zOiAwLFxuICAgICAgICAgIGNsaWNrczogMCxcbiAgICAgICAgICBjb252ZXJzaW9uczogMCxcbiAgICAgICAgICByZXZlbnVlOiAwLFxuICAgICAgICAgIGFkU3BlbmQ6IDAsXG4gICAgICAgICAgY3RyOiAwLFxuICAgICAgICAgIGNwYzogMCxcbiAgICAgICAgICBjcG06IDAsXG4gICAgICAgICAgY29udmVyc2lvblJhdGU6IDAsXG4gICAgICAgICAgcm9hczogMCxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGdyb3VwID0gZ3JvdXBlZC5nZXQoa2V5KTtcbiAgICAgIGdyb3VwLmltcHJlc3Npb25zICs9IG1ldHJpYy5pbXByZXNzaW9ucyB8fCAwO1xuICAgICAgZ3JvdXAuY2xpY2tzICs9IG1ldHJpYy5jbGlja3MgfHwgMDtcbiAgICAgIGdyb3VwLmNvbnZlcnNpb25zICs9IG1ldHJpYy5jb252ZXJzaW9ucyB8fCAwO1xuICAgICAgZ3JvdXAucmV2ZW51ZSArPSAwOyAvLyBSZXZlbnVlIG5vdCBhdmFpbGFibGUgaW4gQ2FtcGFpZ25NZXRyaWNzXG4gICAgICBncm91cC5hZFNwZW5kICs9IG1ldHJpYy5zcGVuZCB8fCAwO1xuICAgIH0pO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGRlcml2ZWQgbWV0cmljc1xuICAgIGNvbnN0IHJlc3VsdCA9IEFycmF5LmZyb20oZ3JvdXBlZC52YWx1ZXMoKSkubWFwKGdyb3VwID0+IHtcbiAgICAgIGdyb3VwLmN0ciA9IGdyb3VwLmltcHJlc3Npb25zID4gMCA/IChncm91cC5jbGlja3MgLyBncm91cC5pbXByZXNzaW9ucykgKiAxMDAgOiAwO1xuICAgICAgZ3JvdXAuY3BjID0gZ3JvdXAuY2xpY2tzID4gMCA/IGdyb3VwLmFkU3BlbmQgLyBncm91cC5jbGlja3MgOiAwO1xuICAgICAgZ3JvdXAuY3BtID0gZ3JvdXAuaW1wcmVzc2lvbnMgPiAwID8gKGdyb3VwLmFkU3BlbmQgLyBncm91cC5pbXByZXNzaW9ucykgKiAxMDAwIDogMDtcbiAgICAgIGdyb3VwLmNvbnZlcnNpb25SYXRlID0gZ3JvdXAuY2xpY2tzID4gMCA/IChncm91cC5jb252ZXJzaW9ucyAvIGdyb3VwLmNsaWNrcykgKiAxMDAgOiAwO1xuICAgICAgZ3JvdXAucm9hcyA9IGdyb3VwLmFkU3BlbmQgPiAwID8gZ3JvdXAucmV2ZW51ZSAvIGdyb3VwLmFkU3BlbmQgOiAwO1xuICAgICAgXG4gICAgICAvLyBSb3VuZCBudW1iZXJzIHRvIDIgZGVjaW1hbCBwbGFjZXNcbiAgICAgIE9iamVjdC5rZXlzKGdyb3VwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZ3JvdXBba2V5XSA9PT0gJ251bWJlcicgJiYga2V5ICE9PSAnaW1wcmVzc2lvbnMnICYmIGtleSAhPT0gJ2NsaWNrcycgJiYga2V5ICE9PSAnY29udmVyc2lvbnMnKSB7XG4gICAgICAgICAgZ3JvdXBba2V5XSA9IE1hdGgucm91bmQoZ3JvdXBba2V5XSAqIDEwMCkgLyAxMDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0LnNvcnQoKGEsIGIpID0+IGEuZGF0ZS5sb2NhbGVDb21wYXJlKGIuZGF0ZSkpO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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