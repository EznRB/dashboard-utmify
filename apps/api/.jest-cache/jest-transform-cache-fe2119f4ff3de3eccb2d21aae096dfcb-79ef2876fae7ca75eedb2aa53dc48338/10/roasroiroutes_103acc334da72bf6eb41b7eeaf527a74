0e3a91ecdc3c2f183e8f32686d48f009
/* istanbul ignore next */
function cov_vi68go8jn() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\roas-roi.routes.ts";
  var hash = "3adad70555cb48e1ec3b5ede1ac5c0f7dd30422d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\roas-roi.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 10,
          column: 2
        }
      },
      "1": {
        start: {
          line: 7,
          column: 51
        },
        end: {
          line: 7,
          column: 102
        }
      },
      "2": {
        start: {
          line: 8,
          column: 49
        },
        end: {
          line: 8,
          column: 87
        }
      },
      "3": {
        start: {
          line: 9,
          column: 50
        },
        end: {
          line: 9,
          column: 74
        }
      },
      "4": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "5": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "6": {
        start: {
          line: 19,
          column: 27
        },
        end: {
          line: 19,
          column: 57
        }
      },
      "7": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 50
        }
      },
      "8": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 120,
          column: 7
        }
      },
      "9": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "10": {
        start: {
          line: 88,
          column: 50
        },
        end: {
          line: 88,
          column: 86
        }
      },
      "11": {
        start: {
          line: 89,
          column: 35
        },
        end: {
          line: 89,
          column: 62
        }
      },
      "12": {
        start: {
          line: 90,
          column: 33
        },
        end: {
          line: 90,
          column: 52
        }
      },
      "13": {
        start: {
          line: 91,
          column: 31
        },
        end: {
          line: 91,
          column: 48
        }
      },
      "14": {
        start: {
          line: 92,
          column: 37
        },
        end: {
          line: 92,
          column: 121
        }
      },
      "15": {
        start: {
          line: 94,
          column: 34
        },
        end: {
          line: 96,
          column: 32
        }
      },
      "16": {
        start: {
          line: 95,
          column: 32
        },
        end: {
          line: 95,
          column: 47
        }
      },
      "17": {
        start: {
          line: 97,
          column: 32
        },
        end: {
          line: 99,
          column: 19
        }
      },
      "18": {
        start: {
          line: 98,
          column: 57
        },
        end: {
          line: 98,
          column: 72
        }
      },
      "19": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "20": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 66
        }
      },
      "21": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "22": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 249,
          column: 7
        }
      },
      "23": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "24": {
        start: {
          line: 214,
          column: 50
        },
        end: {
          line: 214,
          column: 86
        }
      },
      "25": {
        start: {
          line: 215,
          column: 73
        },
        end: {
          line: 215,
          column: 108
        }
      },
      "26": {
        start: {
          line: 216,
          column: 35
        },
        end: {
          line: 216,
          column: 62
        }
      },
      "27": {
        start: {
          line: 217,
          column: 33
        },
        end: {
          line: 217,
          column: 52
        }
      },
      "28": {
        start: {
          line: 218,
          column: 31
        },
        end: {
          line: 218,
          column: 48
        }
      },
      "29": {
        start: {
          line: 219,
          column: 36
        },
        end: {
          line: 219,
          column: 169
        }
      },
      "30": {
        start: {
          line: 221,
          column: 34
        },
        end: {
          line: 223,
          column: 32
        }
      },
      "31": {
        start: {
          line: 222,
          column: 32
        },
        end: {
          line: 222,
          column: 45
        }
      },
      "32": {
        start: {
          line: 224,
          column: 31
        },
        end: {
          line: 226,
          column: 19
        }
      },
      "33": {
        start: {
          line: 225,
          column: 56
        },
        end: {
          line: 225,
          column: 70
        }
      },
      "34": {
        start: {
          line: 227,
          column: 32
        },
        end: {
          line: 227,
          column: 91
        }
      },
      "35": {
        start: {
          line: 227,
          column: 70
        },
        end: {
          line: 227,
          column: 87
        }
      },
      "36": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "37": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 65
        }
      },
      "38": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "39": {
        start: {
          line: 251,
          column: 4
        },
        end: {
          line: 337,
          column: 7
        }
      },
      "40": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "41": {
        start: {
          line: 315,
          column: 43
        },
        end: {
          line: 315,
          column: 79
        }
      },
      "42": {
        start: {
          line: 316,
          column: 36
        },
        end: {
          line: 316,
          column: 69
        }
      },
      "43": {
        start: {
          line: 317,
          column: 35
        },
        end: {
          line: 317,
          column: 62
        }
      },
      "44": {
        start: {
          line: 318,
          column: 33
        },
        end: {
          line: 318,
          column: 52
        }
      },
      "45": {
        start: {
          line: 319,
          column: 31
        },
        end: {
          line: 319,
          column: 48
        }
      },
      "46": {
        start: {
          line: 320,
          column: 27
        },
        end: {
          line: 320,
          column: 119
        }
      },
      "47": {
        start: {
          line: 321,
          column: 37
        },
        end: {
          line: 321,
          column: 75
        }
      },
      "48": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 328,
          column: 15
        }
      },
      "49": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 71
        }
      },
      "50": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 335,
          column: 15
        }
      },
      "51": {
        start: {
          line: 339,
          column: 4
        },
        end: {
          line: 433,
          column: 7
        }
      },
      "52": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "53": {
        start: {
          line: 416,
          column: 43
        },
        end: {
          line: 416,
          column: 79
        }
      },
      "54": {
        start: {
          line: 417,
          column: 35
        },
        end: {
          line: 417,
          column: 62
        }
      },
      "55": {
        start: {
          line: 418,
          column: 33
        },
        end: {
          line: 418,
          column: 52
        }
      },
      "56": {
        start: {
          line: 419,
          column: 31
        },
        end: {
          line: 419,
          column: 48
        }
      },
      "57": {
        start: {
          line: 420,
          column: 29
        },
        end: {
          line: 420,
          column: 115
        }
      },
      "58": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 424,
          column: 15
        }
      },
      "59": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 427,
          column: 78
        }
      },
      "60": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 431,
          column: 15
        }
      },
      "61": {
        start: {
          line: 435,
          column: 4
        },
        end: {
          line: 478,
          column: 7
        }
      },
      "62": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 477,
          column: 9
        }
      },
      "63": {
        start: {
          line: 461,
          column: 50
        },
        end: {
          line: 461,
          column: 86
        }
      },
      "64": {
        start: {
          line: 462,
          column: 35
        },
        end: {
          line: 462,
          column: 62
        }
      },
      "65": {
        start: {
          line: 463,
          column: 33
        },
        end: {
          line: 463,
          column: 52
        }
      },
      "66": {
        start: {
          line: 464,
          column: 31
        },
        end: {
          line: 464,
          column: 48
        }
      },
      "67": {
        start: {
          line: 465,
          column: 33
        },
        end: {
          line: 465,
          column: 124
        }
      },
      "68": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 469,
          column: 15
        }
      },
      "69": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 74
        }
      },
      "70": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 476,
          column: 15
        }
      },
      "71": {
        start: {
          line: 480,
          column: 4
        },
        end: {
          line: 523,
          column: 7
        }
      },
      "72": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 522,
          column: 9
        }
      },
      "73": {
        start: {
          line: 506,
          column: 50
        },
        end: {
          line: 506,
          column: 86
        }
      },
      "74": {
        start: {
          line: 507,
          column: 35
        },
        end: {
          line: 507,
          column: 62
        }
      },
      "75": {
        start: {
          line: 508,
          column: 33
        },
        end: {
          line: 508,
          column: 52
        }
      },
      "76": {
        start: {
          line: 509,
          column: 31
        },
        end: {
          line: 509,
          column: 48
        }
      },
      "77": {
        start: {
          line: 510,
          column: 33
        },
        end: {
          line: 510,
          column: 123
        }
      },
      "78": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 514,
          column: 15
        }
      },
      "79": {
        start: {
          line: 517,
          column: 12
        },
        end: {
          line: 517,
          column: 73
        }
      },
      "80": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 521,
          column: 15
        }
      },
      "81": {
        start: {
          line: 525,
          column: 4
        },
        end: {
          line: 588,
          column: 7
        }
      },
      "82": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 587,
          column: 9
        }
      },
      "83": {
        start: {
          line: 566,
          column: 41
        },
        end: {
          line: 566,
          column: 53
        }
      },
      "84": {
        start: {
          line: 567,
          column: 25
        },
        end: {
          line: 567,
          column: 71
        }
      },
      "85": {
        start: {
          line: 568,
          column: 35
        },
        end: {
          line: 568,
          column: 45
        }
      },
      "86": {
        start: {
          line: 569,
          column: 27
        },
        end: {
          line: 569,
          column: 61
        }
      },
      "87": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 579,
          column: 15
        }
      },
      "88": {
        start: {
          line: 582,
          column: 12
        },
        end: {
          line: 582,
          column: 66
        }
      },
      "89": {
        start: {
          line: 583,
          column: 12
        },
        end: {
          line: 586,
          column: 15
        }
      },
      "90": {
        start: {
          line: 590,
          column: 4
        },
        end: {
          line: 655,
          column: 7
        }
      },
      "91": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 654,
          column: 9
        }
      },
      "92": {
        start: {
          line: 632,
          column: 43
        },
        end: {
          line: 632,
          column: 55
        }
      },
      "93": {
        start: {
          line: 633,
          column: 24
        },
        end: {
          line: 633,
          column: 71
        }
      },
      "94": {
        start: {
          line: 634,
          column: 27
        },
        end: {
          line: 634,
          column: 46
        }
      },
      "95": {
        start: {
          line: 635,
          column: 27
        },
        end: {
          line: 635,
          column: 59
        }
      },
      "96": {
        start: {
          line: 636,
          column: 12
        },
        end: {
          line: 646,
          column: 15
        }
      },
      "97": {
        start: {
          line: 649,
          column: 12
        },
        end: {
          line: 649,
          column: 65
        }
      },
      "98": {
        start: {
          line: 650,
          column: 12
        },
        end: {
          line: 653,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 45
          },
          end: {
            line: 7,
            column: 46
          }
        },
        loc: {
          start: {
            line: 7,
            column: 51
          },
          end: {
            line: 7,
            column: 102
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 43
          },
          end: {
            line: 8,
            column: 44
          }
        },
        loc: {
          start: {
            line: 8,
            column: 49
          },
          end: {
            line: 8,
            column: 87
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 43
          },
          end: {
            line: 9,
            column: 44
          }
        },
        loc: {
          start: {
            line: 9,
            column: 50
          },
          end: {
            line: 9,
            column: 74
          }
        },
        line: 9
      },
      "3": {
        name: "roasRoiRoutes",
        decl: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 35
          }
        },
        loc: {
          start: {
            line: 18,
            column: 45
          },
          end: {
            line: 656,
            column: 1
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 86,
            column: 7
          },
          end: {
            line: 86,
            column: 8
          }
        },
        loc: {
          start: {
            line: 86,
            column: 33
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 86
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 95,
            column: 22
          },
          end: {
            line: 95,
            column: 23
          }
        },
        loc: {
          start: {
            line: 95,
            column: 32
          },
          end: {
            line: 95,
            column: 47
          }
        },
        line: 95
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 98,
            column: 42
          },
          end: {
            line: 98,
            column: 43
          }
        },
        loc: {
          start: {
            line: 98,
            column: 57
          },
          end: {
            line: 98,
            column: 72
          }
        },
        line: 98
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 212,
            column: 7
          },
          end: {
            line: 212,
            column: 8
          }
        },
        loc: {
          start: {
            line: 212,
            column: 33
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 212
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 222,
            column: 22
          },
          end: {
            line: 222,
            column: 23
          }
        },
        loc: {
          start: {
            line: 222,
            column: 32
          },
          end: {
            line: 222,
            column: 45
          }
        },
        line: 222
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 225,
            column: 41
          },
          end: {
            line: 225,
            column: 42
          }
        },
        loc: {
          start: {
            line: 225,
            column: 56
          },
          end: {
            line: 225,
            column: 70
          }
        },
        line: 225
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 227,
            column: 55
          },
          end: {
            line: 227,
            column: 56
          }
        },
        loc: {
          start: {
            line: 227,
            column: 70
          },
          end: {
            line: 227,
            column: 87
          }
        },
        line: 227
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 313,
            column: 7
          },
          end: {
            line: 313,
            column: 8
          }
        },
        loc: {
          start: {
            line: 313,
            column: 33
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 313
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 414,
            column: 7
          },
          end: {
            line: 414,
            column: 8
          }
        },
        loc: {
          start: {
            line: 414,
            column: 33
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 414
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 459,
            column: 7
          },
          end: {
            line: 459,
            column: 8
          }
        },
        loc: {
          start: {
            line: 459,
            column: 33
          },
          end: {
            line: 478,
            column: 5
          }
        },
        line: 459
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 504,
            column: 7
          },
          end: {
            line: 504,
            column: 8
          }
        },
        loc: {
          start: {
            line: 504,
            column: 33
          },
          end: {
            line: 523,
            column: 5
          }
        },
        line: 504
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 564,
            column: 7
          },
          end: {
            line: 564,
            column: 8
          }
        },
        loc: {
          start: {
            line: 564,
            column: 33
          },
          end: {
            line: 588,
            column: 5
          }
        },
        line: 564
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 630,
            column: 7
          },
          end: {
            line: 630,
            column: 8
          }
        },
        loc: {
          start: {
            line: 630,
            column: 33
          },
          end: {
            line: 655,
            column: 5
          }
        },
        line: 630
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 50
          },
          end: {
            line: 9,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 9,
            column: 56
          },
          end: {
            line: 9,
            column: 69
          }
        }, {
          start: {
            line: 9,
            column: 72
          },
          end: {
            line: 9,
            column: 74
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 97,
            column: 32
          },
          end: {
            line: 99,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 18
          },
          end: {
            line: 98,
            column: 102
          }
        }, {
          start: {
            line: 99,
            column: 18
          },
          end: {
            line: 99,
            column: 19
          }
        }],
        line: 97
      },
      "2": {
        loc: {
          start: {
            line: 224,
            column: 31
          },
          end: {
            line: 226,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 225,
            column: 18
          },
          end: {
            line: 225,
            column: 99
          }
        }, {
          start: {
            line: 226,
            column: 18
          },
          end: {
            line: 226,
            column: 19
          }
        }],
        line: 224
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\roas-roi.routes.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\roas-roi.routes.ts"],
      sourcesContent: ["import { FastifyInstance } from 'fastify';\nimport { ROASROIService } from '../services/roas-roi.service';\nimport { authMiddleware } from '../middleware/auth.middleware';\nimport { z } from 'zod';\nimport { subDays, parseISO } from 'date-fns';\n\n// Validation schemas\nconst dateRangeSchema = z.object({\n  startDate: z.string().optional().default(() => subDays(new Date(), 30).toISOString().split('T')[0]),\n  endDate: z.string().optional().default(() => new Date().toISOString().split('T')[0]),\n  limit: z.string().optional().transform(val => val ? parseInt(val) : 10)\n});\n\nconst roiConfigSchema = z.object({\n  operationalCostPercentage: z.number().min(0).max(1).optional().default(0.1),\n  platformFeePercentage: z.number().min(0).max(1).optional().default(0.05)\n});\n\nconst trendsSchema = z.object({\n  granularity: z.enum(['daily', 'weekly', 'monthly']).optional().default('daily')\n});\n\nexport async function roasRoiRoutes(fastify: FastifyInstance) {\n  const roasRoiService = new ROASROIService(fastify.db);\n\n  // Apply auth middleware to all routes\n  fastify.addHook('preHandler', authMiddleware);\n\n  // Get ROAS calculations for campaigns\n  fastify.get('/roas', {\n    schema: {\n      description: 'Calculate ROAS for campaigns in date range',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          limit: {\n            type: 'string',\n            description: 'Limit number of results'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  campaignId: { type: 'string' },\n                  campaignName: { type: 'string' },\n                  platform: { type: 'string' },\n                  revenue: { type: 'number' },\n                  adSpend: { type: 'number' },\n                  roas: { type: 'number' },\n                  roasPercentage: { type: 'number' },\n                  status: { type: 'string', enum: ['excellent', 'good', 'average', 'poor'] },\n                  period: { type: 'string' }\n                }\n              }\n            },\n            metadata: {\n              type: 'object',\n              properties: {\n                totalCampaigns: { type: 'number' },\n                dateRange: {\n                  type: 'object',\n                  properties: {\n                    startDate: { type: 'string' },\n                    endDate: { type: 'string' }\n                  }\n                },\n                averageROAS: { type: 'number' }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate, limit } = dateRangeSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const roasCalculations = await roasRoiService.calculateCampaignROAS(\n        organizationId,\n        startDateObj,\n        endDateObj\n      );\n\n      // Sort by ROAS and limit results\n      const sortedResults = roasCalculations\n        .sort((a, b) => b.roas - a.roas)\n        .slice(0, limit);\n\n      const averageROAS = roasCalculations.length > 0\n        ? roasCalculations.reduce((sum, calc) => sum + calc.roas, 0) / roasCalculations.length\n        : 0;\n\n      return reply.send({\n        success: true,\n        data: sortedResults,\n        metadata: {\n          totalCampaigns: roasCalculations.length,\n          dateRange: {\n            startDate,\n            endDate\n          },\n          averageROAS: parseFloat(averageROAS.toFixed(2))\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to calculate ROAS:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to calculate ROAS'\n      });\n    }\n  });\n\n  // Get ROI calculations for campaigns\n  fastify.post('/roi', {\n    schema: {\n      description: 'Calculate ROI for campaigns in date range with custom cost parameters',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          limit: {\n            type: 'string',\n            description: 'Limit number of results'\n          }\n        }\n      },\n      body: {\n        type: 'object',\n        properties: {\n          operationalCostPercentage: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1,\n            description: 'Operational cost as percentage of revenue (0.1 = 10%)'\n          },\n          platformFeePercentage: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1,\n            description: 'Platform fees as percentage of ad spend (0.05 = 5%)'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  campaignId: { type: 'string' },\n                  campaignName: { type: 'string' },\n                  platform: { type: 'string' },\n                  revenue: { type: 'number' },\n                  totalCost: { type: 'number' },\n                  profit: { type: 'number' },\n                  roi: { type: 'number' },\n                  roiPercentage: { type: 'number' },\n                  status: { type: 'string', enum: ['excellent', 'good', 'average', 'poor'] },\n                  costBreakdown: {\n                    type: 'object',\n                    properties: {\n                      adSpend: { type: 'number' },\n                      operationalCost: { type: 'number' },\n                      platformFees: { type: 'number' }\n                    }\n                  },\n                  period: { type: 'string' }\n                }\n              }\n            },\n            metadata: {\n              type: 'object',\n              properties: {\n                totalCampaigns: { type: 'number' },\n                dateRange: {\n                  type: 'object',\n                  properties: {\n                    startDate: { type: 'string' },\n                    endDate: { type: 'string' }\n                  }\n                },\n                averageROI: { type: 'number' },\n                totalProfit: { type: 'number' }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate, limit } = dateRangeSchema.parse(request.query);\n      const { operationalCostPercentage, platformFeePercentage } = roiConfigSchema.parse(request.body);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const roiCalculations = await roasRoiService.calculateCampaignROI(\n        organizationId,\n        startDateObj,\n        endDateObj,\n        operationalCostPercentage,\n        platformFeePercentage\n      );\n\n      // Sort by ROI and limit results\n      const sortedResults = roiCalculations\n        .sort((a, b) => b.roi - a.roi)\n        .slice(0, limit);\n\n      const averageROI = roiCalculations.length > 0\n        ? roiCalculations.reduce((sum, calc) => sum + calc.roi, 0) / roiCalculations.length\n        : 0;\n\n      const totalProfit = roiCalculations.reduce((sum, calc) => sum + calc.profit, 0);\n\n      return reply.send({\n        success: true,\n        data: sortedResults,\n        metadata: {\n          totalCampaigns: roiCalculations.length,\n          dateRange: {\n            startDate,\n            endDate\n          },\n          averageROI: parseFloat(averageROI.toFixed(2)),\n          totalProfit: parseFloat(totalProfit.toFixed(2))\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to calculate ROI:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to calculate ROI'\n      });\n    }\n  });\n\n  // Get ROAS/ROI trends over time\n  fastify.get('/trends', {\n    schema: {\n      description: 'Get ROAS/ROI trends over time',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          granularity: {\n            type: 'string',\n            enum: ['daily', 'weekly', 'monthly'],\n            description: 'Data granularity'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  date: { type: 'string' },\n                  roas: { type: 'number' },\n                  roi: { type: 'number' },\n                  revenue: { type: 'number' },\n                  adSpend: { type: 'number' },\n                  totalCost: { type: 'number' },\n                  profit: { type: 'number' }\n                }\n              }\n            },\n            analysis: {\n              type: 'object',\n              properties: {\n                roiTrend: {\n                  type: 'object',\n                  properties: {\n                    currentROI: { type: 'number' },\n                    previousROI: { type: 'number' },\n                    changePercentage: { type: 'number' },\n                    trend: { type: 'string', enum: ['improving', 'declining', 'stable', 'insufficient_data'] }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate } = dateRangeSchema.parse(request.query);\n      const { granularity } = trendsSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const trends = await roasRoiService.getROASROITrends(\n        organizationId,\n        startDateObj,\n        endDateObj,\n        granularity\n      );\n\n      const roiTrendAnalysis = roasRoiService.analyzeROITrend(trends);\n\n      return reply.send({\n        success: true,\n        data: trends,\n        analysis: {\n          roiTrend: roiTrendAnalysis\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get ROAS/ROI trends:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to get trends'\n      });\n    }\n  });\n\n  // Get comprehensive ROAS/ROI analysis\n  fastify.get('/analysis', {\n    schema: {\n      description: 'Get comprehensive ROAS/ROI analysis with alerts and insights',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                summary: {\n                  type: 'object',\n                  properties: {\n                    totalRevenue: { type: 'number' },\n                    totalAdSpend: { type: 'number' },\n                    totalCost: { type: 'number' },\n                    totalProfit: { type: 'number' },\n                    avgROAS: { type: 'number' },\n                    avgROI: { type: 'number' },\n                    bestPerformingCampaign: {\n                      type: 'object',\n                      properties: {\n                        name: { type: 'string' },\n                        roas: { type: 'number' },\n                        roi: { type: 'number' }\n                      }\n                    },\n                    worstPerformingCampaign: {\n                      type: 'object',\n                      properties: {\n                        name: { type: 'string' },\n                        roas: { type: 'number' },\n                        roi: { type: 'number' }\n                      }\n                    }\n                  }\n                },\n                alerts: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      type: { type: 'string', enum: ['critical', 'warning', 'info'] },\n                      message: { type: 'string' },\n                      campaignId: { type: 'string' },\n                      campaignName: { type: 'string' },\n                      metric: { type: 'string', enum: ['roas', 'roi'] },\n                      value: { type: 'number' },\n                      threshold: { type: 'number' }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate } = dateRangeSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const analysis = await roasRoiService.generateROASROIAnalysis(\n        organizationId,\n        startDateObj,\n        endDateObj\n      );\n\n      return reply.send({\n        success: true,\n        data: analysis\n      });\n    } catch (error) {\n      fastify.log.error('Failed to generate ROAS/ROI analysis:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to generate analysis'\n      });\n    }\n  });\n\n  // Get top performing campaigns by ROAS\n  fastify.get('/top-roas', {\n    schema: {\n      description: 'Get top performing campaigns by ROAS',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          limit: {\n            type: 'string',\n            description: 'Limit number of results'\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate, limit } = dateRangeSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const topCampaigns = await roasRoiService.getTopCampaignsByROAS(\n        organizationId,\n        startDateObj,\n        endDateObj,\n        limit\n      );\n\n      return reply.send({\n        success: true,\n        data: topCampaigns\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get top ROAS campaigns:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to get top campaigns'\n      });\n    }\n  });\n\n  // Get top performing campaigns by ROI\n  fastify.get('/top-roi', {\n    schema: {\n      description: 'Get top performing campaigns by ROI',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          limit: {\n            type: 'string',\n            description: 'Limit number of results'\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate, limit } = dateRangeSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const topCampaigns = await roasRoiService.getTopCampaignsByROI(\n        organizationId,\n        startDateObj,\n        endDateObj,\n        limit\n      );\n\n      return reply.send({\n        success: true,\n        data: topCampaigns\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get top ROI campaigns:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to get top campaigns'\n      });\n    }\n  });\n\n  // Simple ROAS calculator endpoint\n  fastify.post('/calculate/roas', {\n    schema: {\n      description: 'Calculate ROAS from revenue and ad spend',\n      tags: ['ROAS/ROI'],\n      body: {\n        type: 'object',\n        required: ['revenue', 'adSpend'],\n        properties: {\n          revenue: {\n            type: 'number',\n            minimum: 0,\n            description: 'Total revenue'\n          },\n          adSpend: {\n            type: 'number',\n            minimum: 0,\n            description: 'Total ad spend'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                revenue: { type: 'number' },\n                adSpend: { type: 'number' },\n                roas: { type: 'number' },\n                roasPercentage: { type: 'number' },\n                status: { type: 'string', enum: ['excellent', 'good', 'average', 'poor'] }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { revenue, adSpend } = request.body as { revenue: number; adSpend: number };\n      \n      const roas = roasRoiService.calculateROAS(revenue, adSpend);\n      const roasPercentage = roas * 100;\n      const status = roasRoiService.getROASStatus(roas);\n\n      return reply.send({\n        success: true,\n        data: {\n          revenue,\n          adSpend,\n          roas,\n          roasPercentage,\n          status\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to calculate ROAS:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to calculate ROAS'\n      });\n    }\n  });\n\n  // Simple ROI calculator endpoint\n  fastify.post('/calculate/roi', {\n    schema: {\n      description: 'Calculate ROI from revenue and total cost',\n      tags: ['ROAS/ROI'],\n      body: {\n        type: 'object',\n        required: ['revenue', 'totalCost'],\n        properties: {\n          revenue: {\n            type: 'number',\n            minimum: 0,\n            description: 'Total revenue'\n          },\n          totalCost: {\n            type: 'number',\n            minimum: 0,\n            description: 'Total cost (ad spend + operational costs + fees)'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                revenue: { type: 'number' },\n                totalCost: { type: 'number' },\n                profit: { type: 'number' },\n                roi: { type: 'number' },\n                roiPercentage: { type: 'number' },\n                status: { type: 'string', enum: ['excellent', 'good', 'average', 'poor'] }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { revenue, totalCost } = request.body as { revenue: number; totalCost: number };\n      \n      const roi = roasRoiService.calculateROI(revenue, totalCost);\n      const profit = revenue - totalCost;\n      const status = roasRoiService.getROIStatus(roi);\n\n      return reply.send({\n        success: true,\n        data: {\n          revenue,\n          totalCost,\n          profit,\n          roi,\n          roiPercentage: roi,\n          status\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to calculate ROI:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to calculate ROI'\n      });\n    }\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3adad70555cb48e1ec3b5ede1ac5c0f7dd30422d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vi68go8jn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vi68go8jn();
import { ROASROIService } from '../services/roas-roi.service';
import { authMiddleware } from '../middleware/auth.middleware';
import { z } from 'zod';
import { subDays, parseISO } from 'date-fns';
// Validation schemas
const dateRangeSchema =
/* istanbul ignore next */
(cov_vi68go8jn().s[0]++, z.object({
  startDate: z.string().optional().default(() => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[0]++;
    cov_vi68go8jn().s[1]++;
    return subDays(new Date(), 30).toISOString().split('T')[0];
  }),
  endDate: z.string().optional().default(() => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[1]++;
    cov_vi68go8jn().s[2]++;
    return new Date().toISOString().split('T')[0];
  }),
  limit: z.string().optional().transform(val => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[2]++;
    cov_vi68go8jn().s[3]++;
    return val ?
    /* istanbul ignore next */
    (cov_vi68go8jn().b[0][0]++, parseInt(val)) :
    /* istanbul ignore next */
    (cov_vi68go8jn().b[0][1]++, 10);
  })
}));
const roiConfigSchema =
/* istanbul ignore next */
(cov_vi68go8jn().s[4]++, z.object({
  operationalCostPercentage: z.number().min(0).max(1).optional().default(0.1),
  platformFeePercentage: z.number().min(0).max(1).optional().default(0.05)
}));
const trendsSchema =
/* istanbul ignore next */
(cov_vi68go8jn().s[5]++, z.object({
  granularity: z.enum(['daily', 'weekly', 'monthly']).optional().default('daily')
}));
export async function roasRoiRoutes(fastify) {
  /* istanbul ignore next */
  cov_vi68go8jn().f[3]++;
  const roasRoiService =
  /* istanbul ignore next */
  (cov_vi68go8jn().s[6]++, new ROASROIService(fastify.db));
  // Apply auth middleware to all routes
  /* istanbul ignore next */
  cov_vi68go8jn().s[7]++;
  fastify.addHook('preHandler', authMiddleware);
  // Get ROAS calculations for campaigns
  /* istanbul ignore next */
  cov_vi68go8jn().s[8]++;
  fastify.get('/roas', {
    schema: {
      description: 'Calculate ROAS for campaigns in date range',
      tags: ['ROAS/ROI'],
      querystring: {
        type: 'object',
        properties: {
          startDate: {
            type: 'string',
            format: 'date',
            description: 'Start date (YYYY-MM-DD)'
          },
          endDate: {
            type: 'string',
            format: 'date',
            description: 'End date (YYYY-MM-DD)'
          },
          limit: {
            type: 'string',
            description: 'Limit number of results'
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  campaignId: {
                    type: 'string'
                  },
                  campaignName: {
                    type: 'string'
                  },
                  platform: {
                    type: 'string'
                  },
                  revenue: {
                    type: 'number'
                  },
                  adSpend: {
                    type: 'number'
                  },
                  roas: {
                    type: 'number'
                  },
                  roasPercentage: {
                    type: 'number'
                  },
                  status: {
                    type: 'string',
                    enum: ['excellent', 'good', 'average', 'poor']
                  },
                  period: {
                    type: 'string'
                  }
                }
              }
            },
            metadata: {
              type: 'object',
              properties: {
                totalCampaigns: {
                  type: 'number'
                },
                dateRange: {
                  type: 'object',
                  properties: {
                    startDate: {
                      type: 'string'
                    },
                    endDate: {
                      type: 'string'
                    }
                  }
                },
                averageROAS: {
                  type: 'number'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[4]++;
    cov_vi68go8jn().s[9]++;
    try {
      const {
        startDate,
        endDate,
        limit
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[10]++, dateRangeSchema.parse(request.query));
      const organizationId =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[11]++, request.user.organizationId);
      const startDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[12]++, parseISO(startDate));
      const endDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[13]++, parseISO(endDate));
      const roasCalculations =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[14]++, await roasRoiService.calculateCampaignROAS(organizationId, startDateObj, endDateObj));
      // Sort by ROAS and limit results
      const sortedResults =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[15]++, roasCalculations.sort((a, b) => {
        /* istanbul ignore next */
        cov_vi68go8jn().f[5]++;
        cov_vi68go8jn().s[16]++;
        return b.roas - a.roas;
      }).slice(0, limit));
      const averageROAS =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[17]++, roasCalculations.length > 0 ?
      /* istanbul ignore next */
      (cov_vi68go8jn().b[1][0]++, roasCalculations.reduce((sum, calc) => {
        /* istanbul ignore next */
        cov_vi68go8jn().f[6]++;
        cov_vi68go8jn().s[18]++;
        return sum + calc.roas;
      }, 0) / roasCalculations.length) :
      /* istanbul ignore next */
      (cov_vi68go8jn().b[1][1]++, 0));
      /* istanbul ignore next */
      cov_vi68go8jn().s[19]++;
      return reply.send({
        success: true,
        data: sortedResults,
        metadata: {
          totalCampaigns: roasCalculations.length,
          dateRange: {
            startDate,
            endDate
          },
          averageROAS: parseFloat(averageROAS.toFixed(2))
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vi68go8jn().s[20]++;
      fastify.log.error('Failed to calculate ROAS:', error);
      /* istanbul ignore next */
      cov_vi68go8jn().s[21]++;
      return reply.status(500).send({
        success: false,
        error: 'Failed to calculate ROAS'
      });
    }
  });
  // Get ROI calculations for campaigns
  /* istanbul ignore next */
  cov_vi68go8jn().s[22]++;
  fastify.post('/roi', {
    schema: {
      description: 'Calculate ROI for campaigns in date range with custom cost parameters',
      tags: ['ROAS/ROI'],
      querystring: {
        type: 'object',
        properties: {
          startDate: {
            type: 'string',
            format: 'date',
            description: 'Start date (YYYY-MM-DD)'
          },
          endDate: {
            type: 'string',
            format: 'date',
            description: 'End date (YYYY-MM-DD)'
          },
          limit: {
            type: 'string',
            description: 'Limit number of results'
          }
        }
      },
      body: {
        type: 'object',
        properties: {
          operationalCostPercentage: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            description: 'Operational cost as percentage of revenue (0.1 = 10%)'
          },
          platformFeePercentage: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            description: 'Platform fees as percentage of ad spend (0.05 = 5%)'
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  campaignId: {
                    type: 'string'
                  },
                  campaignName: {
                    type: 'string'
                  },
                  platform: {
                    type: 'string'
                  },
                  revenue: {
                    type: 'number'
                  },
                  totalCost: {
                    type: 'number'
                  },
                  profit: {
                    type: 'number'
                  },
                  roi: {
                    type: 'number'
                  },
                  roiPercentage: {
                    type: 'number'
                  },
                  status: {
                    type: 'string',
                    enum: ['excellent', 'good', 'average', 'poor']
                  },
                  costBreakdown: {
                    type: 'object',
                    properties: {
                      adSpend: {
                        type: 'number'
                      },
                      operationalCost: {
                        type: 'number'
                      },
                      platformFees: {
                        type: 'number'
                      }
                    }
                  },
                  period: {
                    type: 'string'
                  }
                }
              }
            },
            metadata: {
              type: 'object',
              properties: {
                totalCampaigns: {
                  type: 'number'
                },
                dateRange: {
                  type: 'object',
                  properties: {
                    startDate: {
                      type: 'string'
                    },
                    endDate: {
                      type: 'string'
                    }
                  }
                },
                averageROI: {
                  type: 'number'
                },
                totalProfit: {
                  type: 'number'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[7]++;
    cov_vi68go8jn().s[23]++;
    try {
      const {
        startDate,
        endDate,
        limit
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[24]++, dateRangeSchema.parse(request.query));
      const {
        operationalCostPercentage,
        platformFeePercentage
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[25]++, roiConfigSchema.parse(request.body));
      const organizationId =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[26]++, request.user.organizationId);
      const startDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[27]++, parseISO(startDate));
      const endDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[28]++, parseISO(endDate));
      const roiCalculations =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[29]++, await roasRoiService.calculateCampaignROI(organizationId, startDateObj, endDateObj, operationalCostPercentage, platformFeePercentage));
      // Sort by ROI and limit results
      const sortedResults =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[30]++, roiCalculations.sort((a, b) => {
        /* istanbul ignore next */
        cov_vi68go8jn().f[8]++;
        cov_vi68go8jn().s[31]++;
        return b.roi - a.roi;
      }).slice(0, limit));
      const averageROI =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[32]++, roiCalculations.length > 0 ?
      /* istanbul ignore next */
      (cov_vi68go8jn().b[2][0]++, roiCalculations.reduce((sum, calc) => {
        /* istanbul ignore next */
        cov_vi68go8jn().f[9]++;
        cov_vi68go8jn().s[33]++;
        return sum + calc.roi;
      }, 0) / roiCalculations.length) :
      /* istanbul ignore next */
      (cov_vi68go8jn().b[2][1]++, 0));
      const totalProfit =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[34]++, roiCalculations.reduce((sum, calc) => {
        /* istanbul ignore next */
        cov_vi68go8jn().f[10]++;
        cov_vi68go8jn().s[35]++;
        return sum + calc.profit;
      }, 0));
      /* istanbul ignore next */
      cov_vi68go8jn().s[36]++;
      return reply.send({
        success: true,
        data: sortedResults,
        metadata: {
          totalCampaigns: roiCalculations.length,
          dateRange: {
            startDate,
            endDate
          },
          averageROI: parseFloat(averageROI.toFixed(2)),
          totalProfit: parseFloat(totalProfit.toFixed(2))
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vi68go8jn().s[37]++;
      fastify.log.error('Failed to calculate ROI:', error);
      /* istanbul ignore next */
      cov_vi68go8jn().s[38]++;
      return reply.status(500).send({
        success: false,
        error: 'Failed to calculate ROI'
      });
    }
  });
  // Get ROAS/ROI trends over time
  /* istanbul ignore next */
  cov_vi68go8jn().s[39]++;
  fastify.get('/trends', {
    schema: {
      description: 'Get ROAS/ROI trends over time',
      tags: ['ROAS/ROI'],
      querystring: {
        type: 'object',
        properties: {
          startDate: {
            type: 'string',
            format: 'date',
            description: 'Start date (YYYY-MM-DD)'
          },
          endDate: {
            type: 'string',
            format: 'date',
            description: 'End date (YYYY-MM-DD)'
          },
          granularity: {
            type: 'string',
            enum: ['daily', 'weekly', 'monthly'],
            description: 'Data granularity'
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  date: {
                    type: 'string'
                  },
                  roas: {
                    type: 'number'
                  },
                  roi: {
                    type: 'number'
                  },
                  revenue: {
                    type: 'number'
                  },
                  adSpend: {
                    type: 'number'
                  },
                  totalCost: {
                    type: 'number'
                  },
                  profit: {
                    type: 'number'
                  }
                }
              }
            },
            analysis: {
              type: 'object',
              properties: {
                roiTrend: {
                  type: 'object',
                  properties: {
                    currentROI: {
                      type: 'number'
                    },
                    previousROI: {
                      type: 'number'
                    },
                    changePercentage: {
                      type: 'number'
                    },
                    trend: {
                      type: 'string',
                      enum: ['improving', 'declining', 'stable', 'insufficient_data']
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[11]++;
    cov_vi68go8jn().s[40]++;
    try {
      const {
        startDate,
        endDate
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[41]++, dateRangeSchema.parse(request.query));
      const {
        granularity
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[42]++, trendsSchema.parse(request.query));
      const organizationId =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[43]++, request.user.organizationId);
      const startDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[44]++, parseISO(startDate));
      const endDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[45]++, parseISO(endDate));
      const trends =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[46]++, await roasRoiService.getROASROITrends(organizationId, startDateObj, endDateObj, granularity));
      const roiTrendAnalysis =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[47]++, roasRoiService.analyzeROITrend(trends));
      /* istanbul ignore next */
      cov_vi68go8jn().s[48]++;
      return reply.send({
        success: true,
        data: trends,
        analysis: {
          roiTrend: roiTrendAnalysis
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vi68go8jn().s[49]++;
      fastify.log.error('Failed to get ROAS/ROI trends:', error);
      /* istanbul ignore next */
      cov_vi68go8jn().s[50]++;
      return reply.status(500).send({
        success: false,
        error: 'Failed to get trends'
      });
    }
  });
  // Get comprehensive ROAS/ROI analysis
  /* istanbul ignore next */
  cov_vi68go8jn().s[51]++;
  fastify.get('/analysis', {
    schema: {
      description: 'Get comprehensive ROAS/ROI analysis with alerts and insights',
      tags: ['ROAS/ROI'],
      querystring: {
        type: 'object',
        properties: {
          startDate: {
            type: 'string',
            format: 'date',
            description: 'Start date (YYYY-MM-DD)'
          },
          endDate: {
            type: 'string',
            format: 'date',
            description: 'End date (YYYY-MM-DD)'
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                summary: {
                  type: 'object',
                  properties: {
                    totalRevenue: {
                      type: 'number'
                    },
                    totalAdSpend: {
                      type: 'number'
                    },
                    totalCost: {
                      type: 'number'
                    },
                    totalProfit: {
                      type: 'number'
                    },
                    avgROAS: {
                      type: 'number'
                    },
                    avgROI: {
                      type: 'number'
                    },
                    bestPerformingCampaign: {
                      type: 'object',
                      properties: {
                        name: {
                          type: 'string'
                        },
                        roas: {
                          type: 'number'
                        },
                        roi: {
                          type: 'number'
                        }
                      }
                    },
                    worstPerformingCampaign: {
                      type: 'object',
                      properties: {
                        name: {
                          type: 'string'
                        },
                        roas: {
                          type: 'number'
                        },
                        roi: {
                          type: 'number'
                        }
                      }
                    }
                  }
                },
                alerts: {
                  type: 'array',
                  items: {
                    type: 'object',
                    properties: {
                      type: {
                        type: 'string',
                        enum: ['critical', 'warning', 'info']
                      },
                      message: {
                        type: 'string'
                      },
                      campaignId: {
                        type: 'string'
                      },
                      campaignName: {
                        type: 'string'
                      },
                      metric: {
                        type: 'string',
                        enum: ['roas', 'roi']
                      },
                      value: {
                        type: 'number'
                      },
                      threshold: {
                        type: 'number'
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[12]++;
    cov_vi68go8jn().s[52]++;
    try {
      const {
        startDate,
        endDate
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[53]++, dateRangeSchema.parse(request.query));
      const organizationId =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[54]++, request.user.organizationId);
      const startDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[55]++, parseISO(startDate));
      const endDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[56]++, parseISO(endDate));
      const analysis =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[57]++, await roasRoiService.generateROASROIAnalysis(organizationId, startDateObj, endDateObj));
      /* istanbul ignore next */
      cov_vi68go8jn().s[58]++;
      return reply.send({
        success: true,
        data: analysis
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vi68go8jn().s[59]++;
      fastify.log.error('Failed to generate ROAS/ROI analysis:', error);
      /* istanbul ignore next */
      cov_vi68go8jn().s[60]++;
      return reply.status(500).send({
        success: false,
        error: 'Failed to generate analysis'
      });
    }
  });
  // Get top performing campaigns by ROAS
  /* istanbul ignore next */
  cov_vi68go8jn().s[61]++;
  fastify.get('/top-roas', {
    schema: {
      description: 'Get top performing campaigns by ROAS',
      tags: ['ROAS/ROI'],
      querystring: {
        type: 'object',
        properties: {
          startDate: {
            type: 'string',
            format: 'date',
            description: 'Start date (YYYY-MM-DD)'
          },
          endDate: {
            type: 'string',
            format: 'date',
            description: 'End date (YYYY-MM-DD)'
          },
          limit: {
            type: 'string',
            description: 'Limit number of results'
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[13]++;
    cov_vi68go8jn().s[62]++;
    try {
      const {
        startDate,
        endDate,
        limit
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[63]++, dateRangeSchema.parse(request.query));
      const organizationId =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[64]++, request.user.organizationId);
      const startDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[65]++, parseISO(startDate));
      const endDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[66]++, parseISO(endDate));
      const topCampaigns =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[67]++, await roasRoiService.getTopCampaignsByROAS(organizationId, startDateObj, endDateObj, limit));
      /* istanbul ignore next */
      cov_vi68go8jn().s[68]++;
      return reply.send({
        success: true,
        data: topCampaigns
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vi68go8jn().s[69]++;
      fastify.log.error('Failed to get top ROAS campaigns:', error);
      /* istanbul ignore next */
      cov_vi68go8jn().s[70]++;
      return reply.status(500).send({
        success: false,
        error: 'Failed to get top campaigns'
      });
    }
  });
  // Get top performing campaigns by ROI
  /* istanbul ignore next */
  cov_vi68go8jn().s[71]++;
  fastify.get('/top-roi', {
    schema: {
      description: 'Get top performing campaigns by ROI',
      tags: ['ROAS/ROI'],
      querystring: {
        type: 'object',
        properties: {
          startDate: {
            type: 'string',
            format: 'date',
            description: 'Start date (YYYY-MM-DD)'
          },
          endDate: {
            type: 'string',
            format: 'date',
            description: 'End date (YYYY-MM-DD)'
          },
          limit: {
            type: 'string',
            description: 'Limit number of results'
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[14]++;
    cov_vi68go8jn().s[72]++;
    try {
      const {
        startDate,
        endDate,
        limit
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[73]++, dateRangeSchema.parse(request.query));
      const organizationId =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[74]++, request.user.organizationId);
      const startDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[75]++, parseISO(startDate));
      const endDateObj =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[76]++, parseISO(endDate));
      const topCampaigns =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[77]++, await roasRoiService.getTopCampaignsByROI(organizationId, startDateObj, endDateObj, limit));
      /* istanbul ignore next */
      cov_vi68go8jn().s[78]++;
      return reply.send({
        success: true,
        data: topCampaigns
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vi68go8jn().s[79]++;
      fastify.log.error('Failed to get top ROI campaigns:', error);
      /* istanbul ignore next */
      cov_vi68go8jn().s[80]++;
      return reply.status(500).send({
        success: false,
        error: 'Failed to get top campaigns'
      });
    }
  });
  // Simple ROAS calculator endpoint
  /* istanbul ignore next */
  cov_vi68go8jn().s[81]++;
  fastify.post('/calculate/roas', {
    schema: {
      description: 'Calculate ROAS from revenue and ad spend',
      tags: ['ROAS/ROI'],
      body: {
        type: 'object',
        required: ['revenue', 'adSpend'],
        properties: {
          revenue: {
            type: 'number',
            minimum: 0,
            description: 'Total revenue'
          },
          adSpend: {
            type: 'number',
            minimum: 0,
            description: 'Total ad spend'
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                revenue: {
                  type: 'number'
                },
                adSpend: {
                  type: 'number'
                },
                roas: {
                  type: 'number'
                },
                roasPercentage: {
                  type: 'number'
                },
                status: {
                  type: 'string',
                  enum: ['excellent', 'good', 'average', 'poor']
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[15]++;
    cov_vi68go8jn().s[82]++;
    try {
      const {
        revenue,
        adSpend
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[83]++, request.body);
      const roas =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[84]++, roasRoiService.calculateROAS(revenue, adSpend));
      const roasPercentage =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[85]++, roas * 100);
      const status =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[86]++, roasRoiService.getROASStatus(roas));
      /* istanbul ignore next */
      cov_vi68go8jn().s[87]++;
      return reply.send({
        success: true,
        data: {
          revenue,
          adSpend,
          roas,
          roasPercentage,
          status
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vi68go8jn().s[88]++;
      fastify.log.error('Failed to calculate ROAS:', error);
      /* istanbul ignore next */
      cov_vi68go8jn().s[89]++;
      return reply.status(500).send({
        success: false,
        error: 'Failed to calculate ROAS'
      });
    }
  });
  // Simple ROI calculator endpoint
  /* istanbul ignore next */
  cov_vi68go8jn().s[90]++;
  fastify.post('/calculate/roi', {
    schema: {
      description: 'Calculate ROI from revenue and total cost',
      tags: ['ROAS/ROI'],
      body: {
        type: 'object',
        required: ['revenue', 'totalCost'],
        properties: {
          revenue: {
            type: 'number',
            minimum: 0,
            description: 'Total revenue'
          },
          totalCost: {
            type: 'number',
            minimum: 0,
            description: 'Total cost (ad spend + operational costs + fees)'
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                revenue: {
                  type: 'number'
                },
                totalCost: {
                  type: 'number'
                },
                profit: {
                  type: 'number'
                },
                roi: {
                  type: 'number'
                },
                roiPercentage: {
                  type: 'number'
                },
                status: {
                  type: 'string',
                  enum: ['excellent', 'good', 'average', 'poor']
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_vi68go8jn().f[16]++;
    cov_vi68go8jn().s[91]++;
    try {
      const {
        revenue,
        totalCost
      } =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[92]++, request.body);
      const roi =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[93]++, roasRoiService.calculateROI(revenue, totalCost));
      const profit =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[94]++, revenue - totalCost);
      const status =
      /* istanbul ignore next */
      (cov_vi68go8jn().s[95]++, roasRoiService.getROIStatus(roi));
      /* istanbul ignore next */
      cov_vi68go8jn().s[96]++;
      return reply.send({
        success: true,
        data: {
          revenue,
          totalCost,
          profit,
          roi,
          roiPercentage: roi,
          status
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vi68go8jn().s[97]++;
      fastify.log.error('Failed to calculate ROI:', error);
      /* istanbul ignore next */
      cov_vi68go8jn().s[98]++;
      return reply.status(500).send({
        success: false,
        error: 'Failed to calculate ROI'
      });
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,