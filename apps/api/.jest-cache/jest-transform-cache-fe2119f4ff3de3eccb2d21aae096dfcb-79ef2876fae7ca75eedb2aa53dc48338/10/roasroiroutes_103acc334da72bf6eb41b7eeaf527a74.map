{"version":3,"names":["cov_vi68go8jn","actualCoverage","ROASROIService","authMiddleware","z","subDays","parseISO","dateRangeSchema","s","object","startDate","string","optional","default","f","Date","toISOString","split","endDate","limit","transform","val","b","parseInt","roiConfigSchema","operationalCostPercentage","number","min","max","platformFeePercentage","trendsSchema","granularity","enum","roasRoiRoutes","fastify","roasRoiService","db","addHook","get","schema","description","tags","querystring","type","properties","format","response","success","data","items","campaignId","campaignName","platform","revenue","adSpend","roas","roasPercentage","status","period","metadata","totalCampaigns","dateRange","averageROAS","request","reply","parse","query","organizationId","user","startDateObj","endDateObj","roasCalculations","calculateCampaignROAS","sortedResults","sort","a","slice","length","reduce","sum","calc","send","parseFloat","toFixed","error","log","post","body","minimum","maximum","totalCost","profit","roi","roiPercentage","costBreakdown","operationalCost","platformFees","averageROI","totalProfit","roiCalculations","calculateCampaignROI","date","analysis","roiTrend","currentROI","previousROI","changePercentage","trend","trends","getROASROITrends","roiTrendAnalysis","analyzeROITrend","summary","totalRevenue","totalAdSpend","avgROAS","avgROI","bestPerformingCampaign","name","worstPerformingCampaign","alerts","message","metric","value","threshold","generateROASROIAnalysis","topCampaigns","getTopCampaignsByROAS","getTopCampaignsByROI","required","calculateROAS","getROASStatus","calculateROI","getROIStatus"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\roas-roi.routes.ts"],"sourcesContent":["import { FastifyInstance } from 'fastify';\nimport { ROASROIService } from '../services/roas-roi.service';\nimport { authMiddleware } from '../middleware/auth.middleware';\nimport { z } from 'zod';\nimport { subDays, parseISO } from 'date-fns';\n\n// Validation schemas\nconst dateRangeSchema = z.object({\n  startDate: z.string().optional().default(() => subDays(new Date(), 30).toISOString().split('T')[0]),\n  endDate: z.string().optional().default(() => new Date().toISOString().split('T')[0]),\n  limit: z.string().optional().transform(val => val ? parseInt(val) : 10)\n});\n\nconst roiConfigSchema = z.object({\n  operationalCostPercentage: z.number().min(0).max(1).optional().default(0.1),\n  platformFeePercentage: z.number().min(0).max(1).optional().default(0.05)\n});\n\nconst trendsSchema = z.object({\n  granularity: z.enum(['daily', 'weekly', 'monthly']).optional().default('daily')\n});\n\nexport async function roasRoiRoutes(fastify: FastifyInstance) {\n  const roasRoiService = new ROASROIService(fastify.db);\n\n  // Apply auth middleware to all routes\n  fastify.addHook('preHandler', authMiddleware);\n\n  // Get ROAS calculations for campaigns\n  fastify.get('/roas', {\n    schema: {\n      description: 'Calculate ROAS for campaigns in date range',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          limit: {\n            type: 'string',\n            description: 'Limit number of results'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  campaignId: { type: 'string' },\n                  campaignName: { type: 'string' },\n                  platform: { type: 'string' },\n                  revenue: { type: 'number' },\n                  adSpend: { type: 'number' },\n                  roas: { type: 'number' },\n                  roasPercentage: { type: 'number' },\n                  status: { type: 'string', enum: ['excellent', 'good', 'average', 'poor'] },\n                  period: { type: 'string' }\n                }\n              }\n            },\n            metadata: {\n              type: 'object',\n              properties: {\n                totalCampaigns: { type: 'number' },\n                dateRange: {\n                  type: 'object',\n                  properties: {\n                    startDate: { type: 'string' },\n                    endDate: { type: 'string' }\n                  }\n                },\n                averageROAS: { type: 'number' }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate, limit } = dateRangeSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const roasCalculations = await roasRoiService.calculateCampaignROAS(\n        organizationId,\n        startDateObj,\n        endDateObj\n      );\n\n      // Sort by ROAS and limit results\n      const sortedResults = roasCalculations\n        .sort((a, b) => b.roas - a.roas)\n        .slice(0, limit);\n\n      const averageROAS = roasCalculations.length > 0\n        ? roasCalculations.reduce((sum, calc) => sum + calc.roas, 0) / roasCalculations.length\n        : 0;\n\n      return reply.send({\n        success: true,\n        data: sortedResults,\n        metadata: {\n          totalCampaigns: roasCalculations.length,\n          dateRange: {\n            startDate,\n            endDate\n          },\n          averageROAS: parseFloat(averageROAS.toFixed(2))\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to calculate ROAS:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to calculate ROAS'\n      });\n    }\n  });\n\n  // Get ROI calculations for campaigns\n  fastify.post('/roi', {\n    schema: {\n      description: 'Calculate ROI for campaigns in date range with custom cost parameters',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          limit: {\n            type: 'string',\n            description: 'Limit number of results'\n          }\n        }\n      },\n      body: {\n        type: 'object',\n        properties: {\n          operationalCostPercentage: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1,\n            description: 'Operational cost as percentage of revenue (0.1 = 10%)'\n          },\n          platformFeePercentage: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1,\n            description: 'Platform fees as percentage of ad spend (0.05 = 5%)'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  campaignId: { type: 'string' },\n                  campaignName: { type: 'string' },\n                  platform: { type: 'string' },\n                  revenue: { type: 'number' },\n                  totalCost: { type: 'number' },\n                  profit: { type: 'number' },\n                  roi: { type: 'number' },\n                  roiPercentage: { type: 'number' },\n                  status: { type: 'string', enum: ['excellent', 'good', 'average', 'poor'] },\n                  costBreakdown: {\n                    type: 'object',\n                    properties: {\n                      adSpend: { type: 'number' },\n                      operationalCost: { type: 'number' },\n                      platformFees: { type: 'number' }\n                    }\n                  },\n                  period: { type: 'string' }\n                }\n              }\n            },\n            metadata: {\n              type: 'object',\n              properties: {\n                totalCampaigns: { type: 'number' },\n                dateRange: {\n                  type: 'object',\n                  properties: {\n                    startDate: { type: 'string' },\n                    endDate: { type: 'string' }\n                  }\n                },\n                averageROI: { type: 'number' },\n                totalProfit: { type: 'number' }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate, limit } = dateRangeSchema.parse(request.query);\n      const { operationalCostPercentage, platformFeePercentage } = roiConfigSchema.parse(request.body);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const roiCalculations = await roasRoiService.calculateCampaignROI(\n        organizationId,\n        startDateObj,\n        endDateObj,\n        operationalCostPercentage,\n        platformFeePercentage\n      );\n\n      // Sort by ROI and limit results\n      const sortedResults = roiCalculations\n        .sort((a, b) => b.roi - a.roi)\n        .slice(0, limit);\n\n      const averageROI = roiCalculations.length > 0\n        ? roiCalculations.reduce((sum, calc) => sum + calc.roi, 0) / roiCalculations.length\n        : 0;\n\n      const totalProfit = roiCalculations.reduce((sum, calc) => sum + calc.profit, 0);\n\n      return reply.send({\n        success: true,\n        data: sortedResults,\n        metadata: {\n          totalCampaigns: roiCalculations.length,\n          dateRange: {\n            startDate,\n            endDate\n          },\n          averageROI: parseFloat(averageROI.toFixed(2)),\n          totalProfit: parseFloat(totalProfit.toFixed(2))\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to calculate ROI:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to calculate ROI'\n      });\n    }\n  });\n\n  // Get ROAS/ROI trends over time\n  fastify.get('/trends', {\n    schema: {\n      description: 'Get ROAS/ROI trends over time',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          granularity: {\n            type: 'string',\n            enum: ['daily', 'weekly', 'monthly'],\n            description: 'Data granularity'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  date: { type: 'string' },\n                  roas: { type: 'number' },\n                  roi: { type: 'number' },\n                  revenue: { type: 'number' },\n                  adSpend: { type: 'number' },\n                  totalCost: { type: 'number' },\n                  profit: { type: 'number' }\n                }\n              }\n            },\n            analysis: {\n              type: 'object',\n              properties: {\n                roiTrend: {\n                  type: 'object',\n                  properties: {\n                    currentROI: { type: 'number' },\n                    previousROI: { type: 'number' },\n                    changePercentage: { type: 'number' },\n                    trend: { type: 'string', enum: ['improving', 'declining', 'stable', 'insufficient_data'] }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate } = dateRangeSchema.parse(request.query);\n      const { granularity } = trendsSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const trends = await roasRoiService.getROASROITrends(\n        organizationId,\n        startDateObj,\n        endDateObj,\n        granularity\n      );\n\n      const roiTrendAnalysis = roasRoiService.analyzeROITrend(trends);\n\n      return reply.send({\n        success: true,\n        data: trends,\n        analysis: {\n          roiTrend: roiTrendAnalysis\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get ROAS/ROI trends:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to get trends'\n      });\n    }\n  });\n\n  // Get comprehensive ROAS/ROI analysis\n  fastify.get('/analysis', {\n    schema: {\n      description: 'Get comprehensive ROAS/ROI analysis with alerts and insights',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                summary: {\n                  type: 'object',\n                  properties: {\n                    totalRevenue: { type: 'number' },\n                    totalAdSpend: { type: 'number' },\n                    totalCost: { type: 'number' },\n                    totalProfit: { type: 'number' },\n                    avgROAS: { type: 'number' },\n                    avgROI: { type: 'number' },\n                    bestPerformingCampaign: {\n                      type: 'object',\n                      properties: {\n                        name: { type: 'string' },\n                        roas: { type: 'number' },\n                        roi: { type: 'number' }\n                      }\n                    },\n                    worstPerformingCampaign: {\n                      type: 'object',\n                      properties: {\n                        name: { type: 'string' },\n                        roas: { type: 'number' },\n                        roi: { type: 'number' }\n                      }\n                    }\n                  }\n                },\n                alerts: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      type: { type: 'string', enum: ['critical', 'warning', 'info'] },\n                      message: { type: 'string' },\n                      campaignId: { type: 'string' },\n                      campaignName: { type: 'string' },\n                      metric: { type: 'string', enum: ['roas', 'roi'] },\n                      value: { type: 'number' },\n                      threshold: { type: 'number' }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate } = dateRangeSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const analysis = await roasRoiService.generateROASROIAnalysis(\n        organizationId,\n        startDateObj,\n        endDateObj\n      );\n\n      return reply.send({\n        success: true,\n        data: analysis\n      });\n    } catch (error) {\n      fastify.log.error('Failed to generate ROAS/ROI analysis:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to generate analysis'\n      });\n    }\n  });\n\n  // Get top performing campaigns by ROAS\n  fastify.get('/top-roas', {\n    schema: {\n      description: 'Get top performing campaigns by ROAS',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          limit: {\n            type: 'string',\n            description: 'Limit number of results'\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate, limit } = dateRangeSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const topCampaigns = await roasRoiService.getTopCampaignsByROAS(\n        organizationId,\n        startDateObj,\n        endDateObj,\n        limit\n      );\n\n      return reply.send({\n        success: true,\n        data: topCampaigns\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get top ROAS campaigns:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to get top campaigns'\n      });\n    }\n  });\n\n  // Get top performing campaigns by ROI\n  fastify.get('/top-roi', {\n    schema: {\n      description: 'Get top performing campaigns by ROI',\n      tags: ['ROAS/ROI'],\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: {\n            type: 'string',\n            format: 'date',\n            description: 'Start date (YYYY-MM-DD)'\n          },\n          endDate: {\n            type: 'string',\n            format: 'date',\n            description: 'End date (YYYY-MM-DD)'\n          },\n          limit: {\n            type: 'string',\n            description: 'Limit number of results'\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { startDate, endDate, limit } = dateRangeSchema.parse(request.query);\n      const organizationId = request.user.organizationId;\n\n      const startDateObj = parseISO(startDate);\n      const endDateObj = parseISO(endDate);\n\n      const topCampaigns = await roasRoiService.getTopCampaignsByROI(\n        organizationId,\n        startDateObj,\n        endDateObj,\n        limit\n      );\n\n      return reply.send({\n        success: true,\n        data: topCampaigns\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get top ROI campaigns:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to get top campaigns'\n      });\n    }\n  });\n\n  // Simple ROAS calculator endpoint\n  fastify.post('/calculate/roas', {\n    schema: {\n      description: 'Calculate ROAS from revenue and ad spend',\n      tags: ['ROAS/ROI'],\n      body: {\n        type: 'object',\n        required: ['revenue', 'adSpend'],\n        properties: {\n          revenue: {\n            type: 'number',\n            minimum: 0,\n            description: 'Total revenue'\n          },\n          adSpend: {\n            type: 'number',\n            minimum: 0,\n            description: 'Total ad spend'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                revenue: { type: 'number' },\n                adSpend: { type: 'number' },\n                roas: { type: 'number' },\n                roasPercentage: { type: 'number' },\n                status: { type: 'string', enum: ['excellent', 'good', 'average', 'poor'] }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { revenue, adSpend } = request.body as { revenue: number; adSpend: number };\n      \n      const roas = roasRoiService.calculateROAS(revenue, adSpend);\n      const roasPercentage = roas * 100;\n      const status = roasRoiService.getROASStatus(roas);\n\n      return reply.send({\n        success: true,\n        data: {\n          revenue,\n          adSpend,\n          roas,\n          roasPercentage,\n          status\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to calculate ROAS:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to calculate ROAS'\n      });\n    }\n  });\n\n  // Simple ROI calculator endpoint\n  fastify.post('/calculate/roi', {\n    schema: {\n      description: 'Calculate ROI from revenue and total cost',\n      tags: ['ROAS/ROI'],\n      body: {\n        type: 'object',\n        required: ['revenue', 'totalCost'],\n        properties: {\n          revenue: {\n            type: 'number',\n            minimum: 0,\n            description: 'Total revenue'\n          },\n          totalCost: {\n            type: 'number',\n            minimum: 0,\n            description: 'Total cost (ad spend + operational costs + fees)'\n          }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            data: {\n              type: 'object',\n              properties: {\n                revenue: { type: 'number' },\n                totalCost: { type: 'number' },\n                profit: { type: 'number' },\n                roi: { type: 'number' },\n                roiPercentage: { type: 'number' },\n                status: { type: 'string', enum: ['excellent', 'good', 'average', 'poor'] }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, async (request, reply) => {\n    try {\n      const { revenue, totalCost } = request.body as { revenue: number; totalCost: number };\n      \n      const roi = roasRoiService.calculateROI(revenue, totalCost);\n      const profit = revenue - totalCost;\n      const status = roasRoiService.getROIStatus(roi);\n\n      return reply.send({\n        success: true,\n        data: {\n          revenue,\n          totalCost,\n          profit,\n          roi,\n          roiPercentage: roi,\n          status\n        }\n      });\n    } catch (error) {\n      fastify.log.error('Failed to calculate ROI:', error);\n      return reply.status(500).send({\n        success: false,\n        error: 'Failed to calculate ROI'\n      });\n    }\n  });\n}"],"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","ignoreList":[]}