{"version":3,"names":["cov_jy6q72bxc","actualCoverage","Injectable","HttpException","HttpStatus","Logger","Reflector","TenantRateLimitService","s","RateLimit","type","identifier","f","target","propertyKey","descriptor","b","Reflect","defineMetadata","value","SkipRateLimit","CustomRateLimit","config","RateLimitInterceptor","RateLimitInterceptor_1","reflector","rateLimitService","logger","name","constructor","intercept","context","next","request","switchToHttp","getRequest","response","getResponse","handler","getHandler","controller","getClass","skipRateLimit","getAllAndOverride","handle","organizationId","getOrganizationId","customRateLimit","handleCustomRateLimit","rateLimitType","getDefaultRateLimitType","rateLimitIdentifier","getDefaultIdentifier","result","checkRateLimit","setRateLimitHeaders","allowed","warn","error","message","Date","resetTime","toISOString","retryAfter","Math","ceil","now","limit","remaining","TOO_MANY_REQUESTS","stack","user","headers","host","subdomain","split","method","toLowerCase","path","route","url","includes","ip","connection","remoteAddress","userId","id","set","toString","key","__decorate","_a","Object","_b","RateLimitGuard","RateLimitGuard_1","canActivate","_c"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\interceptors\\rate-limit.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\nimport { TenantRateLimitService } from '../services/tenant-rate-limit.service';\n\n// Decorator para definir tipo de rate limit\nexport const RateLimit = (type: string, identifier?: string) => {\n  return (target: any, propertyKey?: string, descriptor?: PropertyDescriptor) => {\n    if (descriptor) {\n      Reflect.defineMetadata('rate-limit-type', type, descriptor.value);\n      if (identifier) {\n        Reflect.defineMetadata('rate-limit-identifier', identifier, descriptor.value);\n      }\n    } else {\n      Reflect.defineMetadata('rate-limit-type', type, target);\n      if (identifier) {\n        Reflect.defineMetadata('rate-limit-identifier', identifier, target);\n      }\n    }\n  };\n};\n\n// Decorator para pular rate limiting\nexport const SkipRateLimit = () => {\n  return (target: any, propertyKey?: string, descriptor?: PropertyDescriptor) => {\n    if (descriptor) {\n      Reflect.defineMetadata('skip-rate-limit', true, descriptor.value);\n    } else {\n      Reflect.defineMetadata('skip-rate-limit', true, target);\n    }\n  };\n};\n\n// Decorator para rate limit customizado\nexport const CustomRateLimit = (config: {\n  requests: number;\n  windowMs: number;\n  type?: string;\n}) => {\n  return (target: any, propertyKey?: string, descriptor?: PropertyDescriptor) => {\n    if (descriptor) {\n      Reflect.defineMetadata('custom-rate-limit', config, descriptor.value);\n    } else {\n      Reflect.defineMetadata('custom-rate-limit', config, target);\n    }\n  };\n};\n\n@Injectable()\nexport class RateLimitInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(RateLimitInterceptor.name);\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly rateLimitService: TenantRateLimitService,\n  ) {}\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise<Observable<any>> {\n    const request = context.switchToHttp().getRequest();\n    const response = context.switchToHttp().getResponse();\n    const handler = context.getHandler();\n    const controller = context.getClass();\n\n    // Verificar se deve pular rate limiting\n    const skipRateLimit = this.reflector.getAllAndOverride<boolean>(\n      'skip-rate-limit',\n      [handler, controller],\n    );\n\n    if (skipRateLimit) {\n      return next.handle();\n    }\n\n    // Obter organização do usuário ou header\n    const organizationId = this.getOrganizationId(request);\n    \n    if (!organizationId) {\n      // Se não há organização, pular rate limiting\n      return next.handle();\n    }\n\n    try {\n      // Verificar rate limit customizado\n      const customRateLimit = this.reflector.getAllAndOverride<any>(\n        'custom-rate-limit',\n        [handler, controller],\n      );\n\n      if (customRateLimit) {\n        await this.handleCustomRateLimit(\n          request,\n          response,\n          organizationId,\n          customRateLimit,\n        );\n        return next.handle();\n      }\n\n      // Obter tipo de rate limit\n      const rateLimitType = this.reflector.getAllAndOverride<string>(\n        'rate-limit-type',\n        [handler, controller],\n      ) || this.getDefaultRateLimitType(request);\n\n      // Obter identificador adicional\n      const rateLimitIdentifier = this.reflector.getAllAndOverride<string>(\n        'rate-limit-identifier',\n        [handler, controller],\n      ) || this.getDefaultIdentifier(request);\n\n      // Verificar rate limit\n      const result = await this.rateLimitService.checkRateLimit(\n        organizationId,\n        rateLimitType as any,\n        rateLimitIdentifier,\n      );\n\n      // Adicionar headers de rate limit\n      this.setRateLimitHeaders(response, result);\n\n      if (!result.allowed) {\n        this.logger.warn(\n          `Rate limit exceeded for organization ${organizationId}, type ${rateLimitType}`,\n        );\n        \n        throw new HttpException(\n          {\n            error: 'Rate limit exceeded',\n            message: `Too many ${rateLimitType} requests. Try again after ${new Date(result.resetTime).toISOString()}`,\n            retryAfter: Math.ceil((result.resetTime - Date.now()) / 1000),\n            type: rateLimitType,\n            limit: result.limit,\n            remaining: result.remaining,\n            resetTime: result.resetTime,\n          },\n          HttpStatus.TOO_MANY_REQUESTS,\n        );\n      }\n\n      return next.handle();\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Rate limit interceptor error: ${error.message}`,\n        error.stack,\n      );\n      \n      // Em caso de erro, permitir a requisição\n      return next.handle();\n    }\n  }\n\n  private getOrganizationId(request: any): string | null {\n    // Tentar obter do usuário autenticado\n    if (request.user?.organizationId) {\n      return request.user.organizationId;\n    }\n\n    // Tentar obter do header\n    if (request.headers['x-organization-id']) {\n      return request.headers['x-organization-id'];\n    }\n\n    // Tentar obter do subdomain\n    if (request.headers.host) {\n      const subdomain = request.headers.host.split('.')[0];\n      if (subdomain && subdomain !== 'www' && subdomain !== 'api') {\n        return subdomain;\n      }\n    }\n\n    return null;\n  }\n\n  private getDefaultRateLimitType(request: any): string {\n    const method = request.method.toLowerCase();\n    const path = request.route?.path || request.url;\n\n    // Mapear rotas para tipos de rate limit\n    if (path.includes('/campaigns')) {\n      return 'campaigns';\n    }\n    \n    if (path.includes('/whatsapp') || path.includes('/messages')) {\n      return 'whatsapp';\n    }\n    \n    if (path.includes('/webhooks')) {\n      return 'webhooks';\n    }\n    \n    if (path.includes('/export') || path.includes('/download')) {\n      return 'exports';\n    }\n\n    // Default para API geral\n    return 'api';\n  }\n\n  private getDefaultIdentifier(request: any): string {\n    // Usar IP + User ID como identificador padrão\n    const ip = request.ip || request.connection.remoteAddress;\n    const userId = request.user?.id;\n    \n    return userId ? `${userId}:${ip}` : ip;\n  }\n\n  private setRateLimitHeaders(response: any, result: any): void {\n    response.set({\n      'X-RateLimit-Limit': result.limit.toString(),\n      'X-RateLimit-Remaining': result.remaining.toString(),\n      'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\n      'X-RateLimit-Reset-Timestamp': result.resetTime.toString(),\n    });\n  }\n\n  private async handleCustomRateLimit(\n    request: any,\n    response: any,\n    organizationId: string,\n    config: any,\n  ): Promise<void> {\n    const identifier = this.getDefaultIdentifier(request);\n    const key = `custom:${config.type || 'default'}`;\n    \n    // Implementar lógica de rate limit customizado\n    // Por simplicidade, usar o serviço padrão com configuração customizada\n    const result = await this.rateLimitService.checkRateLimit(\n      organizationId,\n      'api', // Usar tipo API como fallback\n      `${key}:${identifier}`,\n    );\n\n    this.setRateLimitHeaders(response, result);\n\n    if (!result.allowed) {\n      throw new HttpException(\n        {\n          error: 'Custom rate limit exceeded',\n          message: `Too many requests. Try again after ${new Date(result.resetTime).toISOString()}`,\n          retryAfter: Math.ceil((result.resetTime - Date.now()) / 1000),\n          limit: result.limit,\n          remaining: result.remaining,\n          resetTime: result.resetTime,\n        },\n        HttpStatus.TOO_MANY_REQUESTS,\n      );\n    }\n  }\n}\n\n// Guard para verificar rate limit antes da execução\n@Injectable()\nexport class RateLimitGuard {\n  private readonly logger = new Logger(RateLimitGuard.name);\n\n  constructor(\n    private readonly rateLimitService: TenantRateLimitService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const organizationId = request.user?.organizationId;\n\n    if (!organizationId) {\n      return true; // Permitir se não há organização\n    }\n\n    try {\n      const result = await this.rateLimitService.checkRateLimit(\n        organizationId,\n        'api',\n        request.ip,\n      );\n\n      return result.allowed;\n    } catch (error) {\n      this.logger.error(\n        `Rate limit guard error: ${error.message}`,\n        error.stack,\n      );\n      \n      // Em caso de erro, permitir acesso\n      return true;\n    }\n  }\n}"],"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","ignoreList":[]}