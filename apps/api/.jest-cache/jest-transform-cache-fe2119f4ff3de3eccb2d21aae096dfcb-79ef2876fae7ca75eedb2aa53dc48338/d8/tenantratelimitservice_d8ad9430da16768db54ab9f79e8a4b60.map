{"version":3,"names":["cov_15n8zicj8j","actualCoverage","Injectable","Logger","TenantCacheService","PrismaService","TenantDatabaseService","TenantRateLimitService","s","TenantRateLimitService_1","tenantCacheService","prisma","tenantDatabaseService","logger","name","planLimits","FREE","api","requests","windowMs","campaigns","whatsapp","webhooks","exports","BASIC","PRO","ENTERPRISE","constructor","f","checkRateLimit","organizationId","type","identifier","organization","getOrganizationPlan","b","planType","config","warn","allowed","remaining","resetTime","Date","now","limit","key","generateRateLimitKey","windowStart","Math","floor","windowEnd","currentCount","getCurrentCount","max","incrementCounter","result","error","message","stack","consumeRateLimit","count","newCount","getUsageStats","current","percentage","min","getAllUsageStats","types","stats","resetRateLimit","delete","log","canPerformAction","action","getPlanLimits","base","cacheKey","get","parseInt","increment","ttl","ceil","set","toString","findUnique","where","id","select","createRateLimitMiddleware","req","res","next","user","headers","status","json","ip","toISOString","retryAfter","cleanupOldCounters","pattern","keys","getKeys","deletedCount","parts","split","timestamp","length","__decorate","_a","Object","_b","_c"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-rate-limit.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { TenantCacheService } from './tenant-cache.service';\nimport { PrismaService } from './prisma.service';\nimport { TenantDatabaseService } from './tenant-database.service';\n\ninterface RateLimitConfig {\n  requests: number;\n  windowMs: number;\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n}\n\ninterface PlanLimits {\n  api: RateLimitConfig;\n  campaigns: RateLimitConfig;\n  whatsapp: RateLimitConfig;\n  webhooks: RateLimitConfig;\n  exports: RateLimitConfig;\n}\n\ninterface RateLimitResult {\n  allowed: boolean;\n  remaining: number;\n  resetTime: number;\n  limit: number;\n}\n\ninterface UsageStats {\n  current: number;\n  limit: number;\n  resetTime: number;\n  percentage: number;\n}\n\n@Injectable()\nexport class TenantRateLimitService {\n  private readonly logger = new Logger(TenantRateLimitService.name);\n\n  // Configurações de rate limit por plano\n  private readonly planLimits: Record<string, PlanLimits> = {\n    FREE: {\n      api: { requests: 100, windowMs: 60 * 1000 }, // 100 req/min\n      campaigns: { requests: 5, windowMs: 60 * 60 * 1000 }, // 5 campanhas/hora\n      whatsapp: { requests: 50, windowMs: 60 * 60 * 1000 }, // 50 mensagens/hora\n      webhooks: { requests: 10, windowMs: 60 * 1000 }, // 10 webhooks/min\n      exports: { requests: 2, windowMs: 60 * 60 * 1000 }, // 2 exports/hora\n    },\n    BASIC: {\n      api: { requests: 500, windowMs: 60 * 1000 }, // 500 req/min\n      campaigns: { requests: 20, windowMs: 60 * 60 * 1000 }, // 20 campanhas/hora\n      whatsapp: { requests: 200, windowMs: 60 * 60 * 1000 }, // 200 mensagens/hora\n      webhooks: { requests: 50, windowMs: 60 * 1000 }, // 50 webhooks/min\n      exports: { requests: 10, windowMs: 60 * 60 * 1000 }, // 10 exports/hora\n    },\n    PRO: {\n      api: { requests: 2000, windowMs: 60 * 1000 }, // 2000 req/min\n      campaigns: { requests: 100, windowMs: 60 * 60 * 1000 }, // 100 campanhas/hora\n      whatsapp: { requests: 1000, windowMs: 60 * 60 * 1000 }, // 1000 mensagens/hora\n      webhooks: { requests: 200, windowMs: 60 * 1000 }, // 200 webhooks/min\n      exports: { requests: 50, windowMs: 60 * 60 * 1000 }, // 50 exports/hora\n    },\n    ENTERPRISE: {\n      api: { requests: 10000, windowMs: 60 * 1000 }, // 10000 req/min\n      campaigns: { requests: 500, windowMs: 60 * 60 * 1000 }, // 500 campanhas/hora\n      whatsapp: { requests: 5000, windowMs: 60 * 60 * 1000 }, // 5000 mensagens/hora\n      webhooks: { requests: 1000, windowMs: 60 * 1000 }, // 1000 webhooks/min\n      exports: { requests: 200, windowMs: 60 * 60 * 1000 }, // 200 exports/hora\n    },\n  };\n\n  constructor(\n    private readonly tenantCacheService: TenantCacheService,\n    private readonly prisma: PrismaService,\n    private readonly tenantDatabaseService: TenantDatabaseService,\n  ) {}\n\n  // Verificar rate limit para uma organização\n  async checkRateLimit(\n    organizationId: string,\n    type: keyof PlanLimits,\n    identifier?: string,\n  ): Promise<RateLimitResult> {\n    try {\n      // Buscar plano da organização\n      const organization = await this.getOrganizationPlan(organizationId);\n      const planLimits = this.planLimits[organization.planType] || this.planLimits.FREE;\n      const config = planLimits[type];\n\n      if (!config) {\n        this.logger.warn(`Rate limit config not found for type: ${type}`);\n        return {\n          allowed: true,\n          remaining: 999999,\n          resetTime: Date.now() + 60000,\n          limit: 999999,\n        };\n      }\n\n      // Criar chave única para o rate limit\n      const key = this.generateRateLimitKey(organizationId, type, identifier);\n      const windowStart = Math.floor(Date.now() / config.windowMs) * config.windowMs;\n      const windowEnd = windowStart + config.windowMs;\n\n      // Buscar contador atual\n      const currentCount = await this.getCurrentCount(key, windowStart);\n      const remaining = Math.max(0, config.requests - currentCount);\n      const allowed = currentCount < config.requests;\n\n      if (allowed) {\n        // Incrementar contador\n        await this.incrementCounter(key, windowStart, config.windowMs);\n      }\n\n      const result: RateLimitResult = {\n        allowed,\n        remaining: allowed ? remaining - 1 : remaining,\n        resetTime: windowEnd,\n        limit: config.requests,\n      };\n\n      // Log quando próximo do limite\n      if (remaining <= config.requests * 0.1) {\n        this.logger.warn(\n          `Organization ${organizationId} approaching rate limit for ${type}: ${currentCount}/${config.requests}`,\n        );\n      }\n\n      return result;\n    } catch (error) {\n      this.logger.error(\n        `Failed to check rate limit for ${organizationId}:${type}: ${error.message}`,\n        error.stack,\n      );\n      \n      // Em caso de erro, permitir a requisição\n      return {\n        allowed: true,\n        remaining: 999999,\n        resetTime: Date.now() + 60000,\n        limit: 999999,\n      };\n    }\n  }\n\n  // Consumir rate limit (incrementar contador)\n  async consumeRateLimit(\n    organizationId: string,\n    type: keyof PlanLimits,\n    identifier?: string,\n    count: number = 1,\n  ): Promise<RateLimitResult> {\n    try {\n      const organization = await this.getOrganizationPlan(organizationId);\n      const planLimits = this.planLimits[organization.planType] || this.planLimits.FREE;\n      const config = planLimits[type];\n\n      if (!config) {\n        return {\n          allowed: true,\n          remaining: 999999,\n          resetTime: Date.now() + 60000,\n          limit: 999999,\n        };\n      }\n\n      const key = this.generateRateLimitKey(organizationId, type, identifier);\n      const windowStart = Math.floor(Date.now() / config.windowMs) * config.windowMs;\n      const windowEnd = windowStart + config.windowMs;\n\n      // Incrementar contador\n      const newCount = await this.incrementCounter(key, windowStart, config.windowMs, count);\n      const remaining = Math.max(0, config.requests - newCount);\n      const allowed = newCount <= config.requests;\n\n      return {\n        allowed,\n        remaining,\n        resetTime: windowEnd,\n        limit: config.requests,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Failed to consume rate limit: ${error.message}`,\n        error.stack,\n      );\n      \n      return {\n        allowed: true,\n        remaining: 999999,\n        resetTime: Date.now() + 60000,\n        limit: 999999,\n      };\n    }\n  }\n\n  // Obter estatísticas de uso\n  async getUsageStats(\n    organizationId: string,\n    type: keyof PlanLimits,\n    identifier?: string,\n  ): Promise<UsageStats> {\n    try {\n      const organization = await this.getOrganizationPlan(organizationId);\n      const planLimits = this.planLimits[organization.planType] || this.planLimits.FREE;\n      const config = planLimits[type];\n\n      if (!config) {\n        return {\n          current: 0,\n          limit: 999999,\n          resetTime: Date.now() + 60000,\n          percentage: 0,\n        };\n      }\n\n      const key = this.generateRateLimitKey(organizationId, type, identifier);\n      const windowStart = Math.floor(Date.now() / config.windowMs) * config.windowMs;\n      const windowEnd = windowStart + config.windowMs;\n      const currentCount = await this.getCurrentCount(key, windowStart);\n      const percentage = (currentCount / config.requests) * 100;\n\n      return {\n        current: currentCount,\n        limit: config.requests,\n        resetTime: windowEnd,\n        percentage: Math.min(100, percentage),\n      };\n    } catch (error) {\n      this.logger.error(\n        `Failed to get usage stats: ${error.message}`,\n        error.stack,\n      );\n      \n      return {\n        current: 0,\n        limit: 999999,\n        resetTime: Date.now() + 60000,\n        percentage: 0,\n      };\n    }\n  }\n\n  // Obter todas as estatísticas de uma organização\n  async getAllUsageStats(organizationId: string): Promise<Record<string, UsageStats>> {\n    const types: (keyof PlanLimits)[] = ['api', 'campaigns', 'whatsapp', 'webhooks', 'exports'];\n    const stats: Record<string, UsageStats> = {};\n\n    for (const type of types) {\n      stats[type] = await this.getUsageStats(organizationId, type);\n    }\n\n    return stats;\n  }\n\n  // Resetar rate limit (para testes ou emergências)\n  async resetRateLimit(\n    organizationId: string,\n    type: keyof PlanLimits,\n    identifier?: string,\n  ): Promise<void> {\n    try {\n      const key = this.generateRateLimitKey(organizationId, type, identifier);\n      const windowStart = Math.floor(Date.now() / 60000) * 60000; // Assumir janela de 1 minuto\n      \n      await this.tenantCacheService.delete(`${key}:${windowStart}`);\n      \n      this.logger.log(\n        `Rate limit reset for organization ${organizationId}, type ${type}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Failed to reset rate limit: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  // Verificar se organização pode executar ação\n  async canPerformAction(\n    organizationId: string,\n    action: keyof PlanLimits,\n    identifier?: string,\n  ): Promise<boolean> {\n    const result = await this.checkRateLimit(organizationId, action, identifier);\n    return result.allowed;\n  }\n\n  // Obter limites do plano\n  async getPlanLimits(organizationId: string): Promise<PlanLimits> {\n    try {\n      const organization = await this.getOrganizationPlan(organizationId);\n      return this.planLimits[organization.planType] || this.planLimits.FREE;\n    } catch (error) {\n      this.logger.error(\n        `Failed to get plan limits: ${error.message}`,\n        error.stack,\n      );\n      return this.planLimits.FREE;\n    }\n  }\n\n  // Métodos privados\n  private generateRateLimitKey(\n    organizationId: string,\n    type: string,\n    identifier?: string,\n  ): string {\n    const base = `rate_limit:${organizationId}:${type}`;\n    return identifier ? `${base}:${identifier}` : base;\n  }\n\n  private async getCurrentCount(key: string, windowStart: number): Promise<number> {\n    const cacheKey = `${key}:${windowStart}`;\n    const count = await this.tenantCacheService.get(cacheKey);\n    return count ? parseInt(count as string, 10) : 0;\n  }\n\n  private async incrementCounter(\n    key: string,\n    windowStart: number,\n    windowMs: number,\n    increment: number = 1,\n  ): Promise<number> {\n    const cacheKey = `${key}:${windowStart}`;\n    const ttl = Math.ceil(windowMs / 1000); // TTL em segundos\n    \n    // Usar operação atômica para incrementar\n    const currentCount = await this.getCurrentCount(key, windowStart);\n    const newCount = currentCount + increment;\n    \n    await this.tenantCacheService.set(cacheKey, newCount.toString(), ttl);\n    \n    return newCount;\n  }\n\n  private async getOrganizationPlan(organizationId: string): Promise<{ planType: string }> {\n    const cacheKey = `organization:${organizationId}:plan`;\n    \n    return await this.tenantCacheService.get(\n      cacheKey,\n      async () => {\n        const organization = await this.prisma.organization.findUnique({\n          where: { id: organizationId },\n          select: { planType: true },\n        });\n        \n        return organization || { planType: 'FREE' };\n      },\n      300, // 5 minutos de cache\n    );\n  }\n\n  // Middleware helper para Express\n  createRateLimitMiddleware(type: keyof PlanLimits) {\n    return async (req: any, res: any, next: any) => {\n      try {\n        const organizationId = req.user?.organizationId || req.headers['x-organization-id'];\n        \n        if (!organizationId) {\n          return res.status(400).json({\n            error: 'Organization ID required',\n          });\n        }\n\n        const result = await this.checkRateLimit(\n          organizationId,\n          type,\n          req.ip || req.user?.id,\n        );\n\n        // Adicionar headers de rate limit\n        res.set({\n          'X-RateLimit-Limit': result.limit.toString(),\n          'X-RateLimit-Remaining': result.remaining.toString(),\n          'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\n        });\n\n        if (!result.allowed) {\n          return res.status(429).json({\n            error: 'Rate limit exceeded',\n            message: `Too many ${type} requests. Try again after ${new Date(result.resetTime).toISOString()}`,\n            retryAfter: Math.ceil((result.resetTime - Date.now()) / 1000),\n          });\n        }\n\n        next();\n      } catch (error) {\n        this.logger.error(\n          `Rate limit middleware error: ${error.message}`,\n          error.stack,\n        );\n        \n        // Em caso de erro, permitir a requisição\n        next();\n      }\n    };\n  }\n\n  // Cleanup de contadores antigos\n  async cleanupOldCounters(): Promise<number> {\n    try {\n      const pattern = 'rate_limit:*';\n      const keys = await this.tenantCacheService.getKeys(pattern);\n      let deletedCount = 0;\n      \n      const now = Date.now();\n      \n      for (const key of keys) {\n        // Extrair timestamp da chave\n        const parts = key.split(':');\n        const timestamp = parseInt(parts[parts.length - 1], 10);\n        \n        // Deletar se mais antigo que 1 hora\n        if (now - timestamp > 60 * 60 * 1000) {\n          await this.tenantCacheService.delete(key);\n          deletedCount++;\n        }\n      }\n      \n      this.logger.log(`Cleaned up ${deletedCount} old rate limit counters`);\n      return deletedCount;\n    } catch (error) {\n      this.logger.error(\n        `Failed to cleanup old counters: ${error.message}`,\n        error.stack,\n      );\n      return 0;\n    }\n  }\n}"],"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","ignoreList":[]}