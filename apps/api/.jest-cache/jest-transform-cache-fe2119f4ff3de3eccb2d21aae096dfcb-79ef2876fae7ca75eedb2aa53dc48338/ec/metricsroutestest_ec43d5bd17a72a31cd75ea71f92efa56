873b90ac3b73c12fc9217c3a2af056eb
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('../services/metrics.service');
globals_1.jest.mock('../services/cache.service');
globals_1.jest.mock('../database/prisma.service');
globals_1.jest.mock('../middleware/auth.middleware');
const supertest_1 = __importDefault(require("supertest"));
// Mock Express app setup
const createTestApp = () => {
    const express = require('express');
    const app = express();
    app.use(express.json());
    // Mock auth middleware to always pass
    app.use((req, res, next) => {
        req.user = {
            id: '123e4567-e89b-12d3-a456-426614174000',
            organizationId: '123e4567-e89b-12d3-a456-426614174001',
        };
        next();
    });
    // Import and use metrics routes
    const metricsRoutes = require('../routes/metrics.routes');
    app.use('/api/metrics', metricsRoutes.default || metricsRoutes);
    return app;
};
(0, globals_1.describe)('Metrics Routes', () => {
    let app;
    let mockMetricsService;
    let mockCacheService;
    const mockUser = {
        id: '123e4567-e89b-12d3-a456-426614174000',
        organizationId: '123e4567-e89b-12d3-a456-426614174001',
    };
    const mockKPIMetrics = {
        revenue: 5000,
        roas: 250,
        roi: 150,
        adSpend: 2000,
        cpc: 4,
        cpm: 200,
        cac: 40,
        impressions: 10000,
        clicks: 500,
        conversions: 50,
        ctr: 5,
        conversionRate: 10,
        ltv: 250,
        arpu: 100,
        margin: 60,
        profit: 3000,
    };
    const mockDashboardMetrics = {
        summary: mockKPIMetrics,
        trends: [
            { period: '2024-01-01', metrics: mockKPIMetrics },
            { period: '2024-01-02', metrics: mockKPIMetrics },
        ],
        topCampaigns: [
            {
                campaignId: '123e4567-e89b-12d3-a456-426614174002',
                campaignName: 'Test Campaign',
                metrics: mockKPIMetrics,
            },
        ],
        alerts: [],
    };
    (0, globals_1.beforeEach)(() => {
        // Reset mocks
        globals_1.jest.clearAllMocks();
        // Setup service mocks
        mockMetricsService = {
            calculateMetrics: globals_1.jest.fn(),
            getDashboardMetrics: globals_1.jest.fn(),
            getMetricsHistory: globals_1.jest.fn(),
            compareMetrics: globals_1.jest.fn(),
            exportMetrics: globals_1.jest.fn(),
            updateRealTimeMetrics: globals_1.jest.fn(),
            invalidateCampaignCache: globals_1.jest.fn(),
            invalidateOrganizationCache: globals_1.jest.fn(),
        };
        mockCacheService = {
            healthCheck: globals_1.jest.fn(),
            getMetrics: globals_1.jest.fn(),
        };
        // Create test app
        app = createTestApp();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.restoreAllMocks();
    });
    (0, globals_1.describe)('POST /api/metrics/calculate', () => {
        (0, globals_1.it)('should calculate metrics successfully', async () => {
            mockMetricsService.calculateMetrics.mockResolvedValue(mockKPIMetrics);
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
            })
                .expect(200);
            (0, globals_1.expect)(response.body).toEqual({
                success: true,
                data: mockKPIMetrics,
            });
            (0, globals_1.expect)(mockMetricsService.calculateMetrics).toHaveBeenCalledWith({
                organizationId: mockUser.organizationId,
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-31'),
            });
        });
        (0, globals_1.it)('should handle optional campaign filter', async () => {
            mockMetricsService.calculateMetrics.mockResolvedValue(mockKPIMetrics);
            await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                campaignId: '123e4567-e89b-12d3-a456-426614174002',
            })
                .expect(200);
            (0, globals_1.expect)(mockMetricsService.calculateMetrics).toHaveBeenCalledWith({
                organizationId: mockUser.organizationId,
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-31'),
                campaignId: '123e4567-e89b-12d3-a456-426614174002',
            });
        });
        (0, globals_1.it)('should validate required fields', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send({})
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
            (0, globals_1.expect)(response.body).toHaveProperty('error');
        });
        (0, globals_1.it)('should validate date format', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send({
                startDate: 'invalid-date',
                endDate: '2024-01-31',
            })
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
            (0, globals_1.expect)(response.body.error).toContain('Invalid date format');
        });
        (0, globals_1.it)('should validate date range', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send({
                startDate: '2024-01-31',
                endDate: '2024-01-01', // End before start
            })
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
            (0, globals_1.expect)(response.body.error).toContain('End date must be after start date');
        });
        (0, globals_1.it)('should handle service errors', async () => {
            mockMetricsService.calculateMetrics.mockRejectedValue(new Error('Database connection failed'));
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
            })
                .expect(500);
            (0, globals_1.expect)(response.body).toEqual({
                success: false,
                error: 'Internal server error',
            });
        });
    });
    (0, globals_1.describe)('GET /api/metrics/dashboard', () => {
        (0, globals_1.it)('should get dashboard metrics successfully', async () => {
            mockMetricsService.getDashboardMetrics.mockResolvedValue(mockDashboardMetrics);
            const response = await (0, supertest_1.default)(app)
                .get('/api/metrics/dashboard')
                .query({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
            })
                .expect(200);
            (0, globals_1.expect)(response.body).toEqual({
                success: true,
                data: mockDashboardMetrics,
            });
            (0, globals_1.expect)(mockMetricsService.getDashboardMetrics).toHaveBeenCalledWith(mockUser.organizationId, {
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-31'),
            });
        });
        (0, globals_1.it)('should use default date range when not provided', async () => {
            mockMetricsService.getDashboardMetrics.mockResolvedValue(mockDashboardMetrics);
            await (0, supertest_1.default)(app)
                .get('/api/metrics/dashboard')
                .expect(200);
            (0, globals_1.expect)(mockMetricsService.getDashboardMetrics).toHaveBeenCalledWith(mockUser.organizationId, globals_1.expect.objectContaining({
                startDate: globals_1.expect.any(Date),
                endDate: globals_1.expect.any(Date),
            }));
        });
        (0, globals_1.it)('should handle optional filters', async () => {
            mockMetricsService.getDashboardMetrics.mockResolvedValue(mockDashboardMetrics);
            await (0, supertest_1.default)(app)
                .get('/api/metrics/dashboard')
                .query({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                campaignId: '123e4567-e89b-12d3-a456-426614174002',
                source: 'google',
            })
                .expect(200);
            (0, globals_1.expect)(mockMetricsService.getDashboardMetrics).toHaveBeenCalledWith(mockUser.organizationId, {
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-31'),
                campaignId: '123e4567-e89b-12d3-a456-426614174002',
                source: 'google',
            });
        });
    });
    (0, globals_1.describe)('GET /api/metrics/history', () => {
        (0, globals_1.it)('should get metrics history successfully', async () => {
            const mockHistory = [
                { period: '2024-01-01', metrics: mockKPIMetrics },
                { period: '2024-01-02', metrics: mockKPIMetrics },
            ];
            mockMetricsService.getMetricsHistory.mockResolvedValue(mockHistory);
            const response = await (0, supertest_1.default)(app)
                .get('/api/metrics/history')
                .query({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                granularity: 'daily',
            })
                .expect(200);
            (0, globals_1.expect)(response.body).toEqual({
                success: true,
                data: mockHistory,
            });
            (0, globals_1.expect)(mockMetricsService.getMetricsHistory).toHaveBeenCalledWith(mockUser.organizationId, {
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-31'),
                granularity: 'daily',
            });
        });
        (0, globals_1.it)('should validate granularity parameter', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/metrics/history')
                .query({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                granularity: 'invalid',
            })
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
            (0, globals_1.expect)(response.body.error).toContain('Invalid granularity');
        });
    });
    (0, globals_1.describe)('POST /api/metrics/compare', () => {
        (0, globals_1.it)('should compare metrics between periods successfully', async () => {
            const mockComparison = {
                current: mockKPIMetrics,
                previous: { ...mockKPIMetrics, revenue: 4000 },
                changes: {
                    revenue: { absolute: 1000, percentage: 25 },
                },
            };
            mockMetricsService.compareMetrics.mockResolvedValue(mockComparison);
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/compare')
                .send({
                currentPeriod: {
                    startDate: '2024-01-01',
                    endDate: '2024-01-31',
                },
                previousPeriod: {
                    startDate: '2023-12-01',
                    endDate: '2023-12-31',
                },
            })
                .expect(200);
            (0, globals_1.expect)(response.body).toEqual({
                success: true,
                data: mockComparison,
            });
        });
        (0, globals_1.it)('should validate period objects', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/compare')
                .send({
                currentPeriod: {
                    startDate: '2024-01-01',
                    // Missing endDate
                },
                previousPeriod: {
                    startDate: '2023-12-01',
                    endDate: '2023-12-31',
                },
            })
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
        });
    });
    (0, globals_1.describe)('POST /api/metrics/export', () => {
        (0, globals_1.it)('should export metrics in JSON format', async () => {
            const mockExport = {
                data: mockKPIMetrics,
                filename: 'metrics_export_1234567890.json',
            };
            mockMetricsService.exportMetrics.mockResolvedValue(mockExport);
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/export')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                format: 'JSON',
            })
                .expect(200);
            (0, globals_1.expect)(response.body).toEqual({
                success: true,
                data: mockExport,
            });
        });
        (0, globals_1.it)('should export metrics in CSV format', async () => {
            const mockExport = {
                data: 'revenue,roas,roi\n5000,250,150',
                filename: 'metrics_export_1234567890.csv',
            };
            mockMetricsService.exportMetrics.mockResolvedValue(mockExport);
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/export')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                format: 'CSV',
            })
                .expect(200);
            (0, globals_1.expect)(response.body).toEqual({
                success: true,
                data: mockExport,
            });
        });
        (0, globals_1.it)('should validate export format', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/export')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                format: 'INVALID',
            })
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
            (0, globals_1.expect)(response.body.error).toContain('Invalid export format');
        });
    });
    (0, globals_1.describe)('POST /api/metrics/events', () => {
        (0, globals_1.it)('should process real-time events successfully', async () => {
            mockMetricsService.updateRealTimeMetrics.mockResolvedValue(undefined);
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/events')
                .send({
                campaignId: '123e4567-e89b-12d3-a456-426614174002',
                eventType: 'CLICK',
                eventData: { source: 'google' },
            })
                .expect(200);
            (0, globals_1.expect)(response.body).toEqual({
                success: true,
                message: 'Event processed successfully',
            });
            (0, globals_1.expect)(mockMetricsService.updateRealTimeMetrics).toHaveBeenCalledWith('123e4567-e89b-12d3-a456-426614174002', 'CLICK', { source: 'google' });
        });
        (0, globals_1.it)('should validate event type', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/events')
                .send({
                campaignId: '123e4567-e89b-12d3-a456-426614174002',
                eventType: 'INVALID_EVENT',
                eventData: {},
            })
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
            (0, globals_1.expect)(response.body.error).toContain('Invalid event type');
        });
        (0, globals_1.it)('should validate campaign ID format', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/events')
                .send({
                campaignId: 'invalid-uuid',
                eventType: 'CLICK',
                eventData: {},
            })
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
            (0, globals_1.expect)(response.body.error).toContain('Invalid campaign ID');
        });
    });
    (0, globals_1.describe)('DELETE /api/metrics/cache/campaign/:campaignId', () => {
        (0, globals_1.it)('should invalidate campaign cache successfully', async () => {
            mockMetricsService.invalidateCampaignCache.mockResolvedValue(undefined);
            const campaignId = '123e4567-e89b-12d3-a456-426614174002';
            const response = await (0, supertest_1.default)(app)
                .delete(`/api/metrics/cache/campaign/${campaignId}`)
                .expect(200);
            (0, globals_1.expect)(response.body).toEqual({
                success: true,
                message: 'Campaign cache invalidated successfully',
            });
            (0, globals_1.expect)(mockMetricsService.invalidateCampaignCache).toHaveBeenCalledWith(campaignId);
        });
        (0, globals_1.it)('should validate campaign ID format', async () => {
            const response = await (0, supertest_1.default)(app)
                .delete('/api/metrics/cache/campaign/invalid-uuid')
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
            (0, globals_1.expect)(response.body.error).toContain('Invalid campaign ID');
        });
    });
    (0, globals_1.describe)('DELETE /api/metrics/cache/organization', () => {
        (0, globals_1.it)('should invalidate organization cache successfully', async () => {
            mockMetricsService.invalidateOrganizationCache.mockResolvedValue(undefined);
            const response = await (0, supertest_1.default)(app)
                .delete('/api/metrics/cache/organization')
                .expect(200);
            (0, globals_1.expect)(response.body).toEqual({
                success: true,
                message: 'Organization cache invalidated successfully',
            });
            (0, globals_1.expect)(mockMetricsService.invalidateOrganizationCache).toHaveBeenCalledWith(mockUser.organizationId);
        });
    });
    (0, globals_1.describe)('Authentication and Authorization', () => {
        (0, globals_1.it)('should require authentication for all endpoints', async () => {
            // Create app without auth middleware
            const express = require('express');
            const unauthenticatedApp = express();
            unauthenticatedApp.use(express.json());
            const metricsRoutes = require('../routes/metrics.routes');
            unauthenticatedApp.use('/api/metrics', metricsRoutes.default || metricsRoutes);
            const response = await (0, supertest_1.default)(unauthenticatedApp)
                .post('/api/metrics/calculate')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
            })
                .expect(401);
            (0, globals_1.expect)(response.body).toHaveProperty('error', 'Unauthorized');
        });
        (0, globals_1.it)('should validate organization access', async () => {
            // This would be tested with different organization IDs
            // Implementation depends on your auth middleware
        });
    });
    (0, globals_1.describe)('Rate Limiting', () => {
        (0, globals_1.it)('should handle rate limiting for expensive operations', async () => {
            // Mock rate limiter to reject requests
            const rateLimitedApp = createTestApp();
            // Add rate limiting middleware mock
            rateLimitedApp.use('/api/metrics/calculate', (req, res) => {
                res.status(429).json({
                    success: false,
                    error: 'Too many requests',
                });
            });
            const response = await (0, supertest_1.default)(rateLimitedApp)
                .post('/api/metrics/calculate')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
            })
                .expect(429);
            (0, globals_1.expect)(response.body).toHaveProperty('error', 'Too many requests');
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle malformed JSON requests', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .set('Content-Type', 'application/json')
                .send('{ invalid json }')
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('success', false);
        });
        (0, globals_1.it)('should handle large request payloads', async () => {
            const largePayload = {
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                data: 'x'.repeat(10000), // Large string
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send(largePayload)
                .expect(413); // Payload too large
            (0, globals_1.expect)(response.body).toHaveProperty('error');
        });
        (0, globals_1.it)('should handle service unavailable errors', async () => {
            mockMetricsService.calculateMetrics.mockRejectedValue(new Error('Service temporarily unavailable'));
            const response = await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
            })
                .expect(500);
            (0, globals_1.expect)(response.body).toEqual({
                success: false,
                error: 'Internal server error',
            });
        });
    });
    (0, globals_1.describe)('Performance', () => {
        (0, globals_1.it)('should respond within acceptable time limits', async () => {
            mockMetricsService.calculateMetrics.mockResolvedValue(mockKPIMetrics);
            const startTime = Date.now();
            await (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
            })
                .expect(200);
            const endTime = Date.now();
            // Should respond within 5 seconds (generous for testing)
            (0, globals_1.expect)(endTime - startTime).toBeLessThan(5000);
        });
        (0, globals_1.it)('should handle concurrent requests efficiently', async () => {
            mockMetricsService.calculateMetrics.mockResolvedValue(mockKPIMetrics);
            const concurrentRequests = 10;
            const promises = Array.from({ length: concurrentRequests }, () => (0, supertest_1.default)(app)
                .post('/api/metrics/calculate')
                .send({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
            }));
            const responses = await Promise.all(promises);
            responses.forEach(response => {
                (0, globals_1.expect)(response.status).toBe(200);
                (0, globals_1.expect)(response.body.success).toBe(true);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,