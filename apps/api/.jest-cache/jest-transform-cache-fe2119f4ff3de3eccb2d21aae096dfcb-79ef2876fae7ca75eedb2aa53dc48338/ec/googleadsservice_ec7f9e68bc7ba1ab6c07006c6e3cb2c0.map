{"version":3,"names":["cov_1av6fuuarn","actualCoverage","google_ads_api_1","s","require","axios_1","__importDefault","logger_1","errors_1","GoogleAdsService","prisma","cryptoService","maxRetries","retryDelay","googleAdsClients","Map","googleAdsConfig","constructor","f","generateAuthUrl","userId","redirectUri","b","ApiError","state","encrypt","JSON","stringify","scopes","params","URLSearchParams","client_id","clientId","redirect_uri","scope","join","response_type","access_type","prompt","toString","exchangeCodeForToken","code","response","default","post","client_secret","clientSecret","grant_type","data","error","logger","refreshAccessToken","refreshToken","refresh_token","storeTokens","tokens","encryptedAccessToken","access_token","encryptedRefreshToken","expiresAt","Date","now","expires_in","integration","upsert","where","userId_platform","platform","update","accessToken","isActive","lastSync","create","info","getAccessToken","findUnique","decrypt","newTokens","getGoogleAdsClient","cacheKey","has","get","client","GoogleAdsApi","developer_token","developerToken","Customer","credentials","set","getCustomerAccounts","query","customers","report","login_customer_id","loginCustomerId","map","customer","id","name","descriptive_name","currency","currency_code","timezone","time_zone","status","type","manager","getCampaigns","customerId","campaigns","customer_id","campaign","advertising_channel_type","start_date","end_date","budget_amount","campaign_budget","amount_micros","parseInt","undefined","budget_type","getKeywords","campaignIds","whereClause","length","campaignFilter","keywords","keyword","ad_group_criterion","criterion_id","text","match_type","quality_score","quality_info","first_page_cpc","position_estimates","first_page_cpc_micros","top_of_page_cpc","top_of_page_cpc_micros","campaign_id","ad_group_id","ad_group","getCampaignMetrics","dateRange","dateFilter","startDate","endDate","metrics","metric","impressions","clicks","cost_micros","conversions","parseFloat","ctr","average_cpc","cost_per_conversion","date","segments","getSearchTermsReport","searchTerms","term","search_term","search_term_view","keyword_id","syncUserData","force","accounts","account","syncAccountData","storeCampaignData","storeKeywordData","toISOString","split","storeCampaignMetrics","externalId_platform","externalId","budget","updatedAt","accountId","createdAt","matchType","qualityScore","firstPageCpc","topOfPageCpc","campaignId","adGroupId","campaignMetrics","campaignId_date_platform","cost","averageCpc","costPerConversion","disconnectIntegration","delete","scheduledSync","activeIntegrations","findMany","select","lastSyncThreshold","delay","ms","Promise","resolve","setTimeout","clearClientCache","clear","exports"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts"],"sourcesContent":["import { PrismaService } from '../database/prisma.service';\nimport { CryptoService } from './crypto.service';\nimport { GoogleAdsApi, Customer, enums } from 'google-ads-api';\nimport axios from 'axios';\nimport { logger } from '../utils/logger';\nimport { ApiError } from '../utils/errors';\n\ninterface GoogleOAuthTokens {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n  token_type: string;\n  scope: string;\n}\n\ninterface GoogleAdsAccount {\n  id: string;\n  name: string;\n  currency: string;\n  timezone: string;\n  status: string;\n  type: string;\n}\n\ninterface GoogleAdsCampaign {\n  id: string;\n  name: string;\n  status: string;\n  type: string;\n  start_date?: string;\n  end_date?: string;\n  budget_amount?: number;\n  budget_type?: string;\n  customer_id: string;\n}\n\ninterface GoogleAdsKeyword {\n  id: string;\n  text: string;\n  match_type: string;\n  status: string;\n  quality_score?: number;\n  first_page_cpc?: number;\n  top_of_page_cpc?: number;\n  campaign_id: string;\n  ad_group_id: string;\n}\n\ninterface GoogleAdsCampaignMetrics {\n  campaign_id: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  ctr: number;\n  average_cpc: number;\n  cost_per_conversion?: number;\n  date: string;\n}\n\ninterface SearchTermReport {\n  search_term: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  campaign_id: string;\n  ad_group_id: string;\n  keyword_id?: string;\n}\n\nexport class GoogleAdsService {\n  private readonly maxRetries = 3;\n  private readonly retryDelay = 1000;\n  private readonly googleAdsClients = new Map<string, GoogleAdsApi>();\n  private readonly googleAdsConfig: any;\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly cryptoService: CryptoService,\n    googleAdsConfig?: any\n  ) {\n    this.googleAdsConfig = googleAdsConfig;\n  }\n\n  /**\n   * Generate OAuth 2.0 authorization URL\n   */\n  generateAuthUrl(userId: string, redirectUri: string): string {\n    if (!this.googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    const state = this.cryptoService.encrypt(JSON.stringify({ userId, redirectUri }));\n    const scopes = ['https://www.googleapis.com/auth/adwords'];\n    \n    const params = new URLSearchParams({\n      client_id: this.googleAdsConfig.clientId,\n      redirect_uri: redirectUri,\n      scope: scopes.join(' '),\n      response_type: 'code',\n      access_type: 'offline',\n      prompt: 'consent',\n      state,\n    });\n\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  async exchangeCodeForToken(code: string, redirectUri: string): Promise<GoogleOAuthTokens> {\n    if (!this.googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: this.googleAdsConfig.clientId,\n        client_secret: this.googleAdsConfig.clientSecret,\n        code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      });\n\n      return response.data;\n    } catch (error) {\n      logger.error('Failed to exchange code for token', error);\n      throw new ApiError('Failed to exchange authorization code', 'TOKEN_EXCHANGE_FAILED', 400);\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshAccessToken(refreshToken: string): Promise<GoogleOAuthTokens> {\n    if (!this.googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: this.googleAdsConfig.clientId,\n        client_secret: this.googleAdsConfig.clientSecret,\n        refresh_token: refreshToken,\n        grant_type: 'refresh_token',\n      });\n\n      return {\n        ...response.data,\n        refresh_token: refreshToken, // Keep the original refresh token\n      };\n    } catch (error) {\n      logger.error('Failed to refresh access token', error);\n      throw new ApiError('Failed to refresh access token', 'TOKEN_REFRESH_FAILED', 401);\n    }\n  }\n\n  /**\n   * Store OAuth tokens securely\n   */\n  async storeTokens(userId: string, tokens: GoogleOAuthTokens): Promise<void> {\n    const encryptedAccessToken = this.cryptoService.encrypt(tokens.access_token);\n    const encryptedRefreshToken = this.cryptoService.encrypt(tokens.refresh_token);\n    const expiresAt = new Date(Date.now() + tokens.expires_in * 1000);\n\n    await this.prisma.integration.upsert({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n      create: {\n        userId,\n        platform: 'GOOGLE_ADS',\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n    });\n\n    logger.info(`Stored Google Ads tokens for user ${userId}`);\n  }\n\n  /**\n   * Get valid access token (refresh if needed)\n   */\n  async getAccessToken(userId: string): Promise<string> {\n    const integration = await this.prisma.integration.findUnique({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n    });\n\n    if (!integration || !integration.isActive) {\n      throw new ApiError('Google Ads integration not found or inactive', 'INTEGRATION_NOT_FOUND', 401);\n    }\n\n    // Check if token is expired\n    if (integration.expiresAt && integration.expiresAt <= new Date()) {\n      const refreshToken = this.cryptoService.decrypt(integration.refreshToken!);\n      const newTokens = await this.refreshAccessToken(refreshToken);\n      await this.storeTokens(userId, newTokens);\n      return newTokens.access_token;\n    }\n\n    return this.cryptoService.decrypt(integration.accessToken!);\n  }\n\n  /**\n   * Get Google Ads API client for user\n   */\n  private async getGoogleAdsClient(userId: string): Promise<GoogleAdsApi> {\n    if (!this.googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    const cacheKey = `google-ads-client-${userId}`;\n    \n    if (this.googleAdsClients.has(cacheKey)) {\n      return this.googleAdsClients.get(cacheKey)!;\n    }\n\n    const accessToken = await this.getAccessToken(userId);\n    \n    const client = new GoogleAdsApi({\n      client_id: this.googleAdsConfig.clientId,\n      client_secret: this.googleAdsConfig.clientSecret,\n      developer_token: this.googleAdsConfig.developerToken,\n    });\n\n    // Set the access token for the client\n    client.Customer.credentials = {\n      access_token: accessToken,\n    };\n\n    this.googleAdsClients.set(cacheKey, client);\n    return client;\n  }\n\n  /**\n   * Get accessible customer accounts\n   */\n  async getCustomerAccounts(userId: string): Promise<GoogleAdsAccount[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          customer.id,\n          customer.descriptive_name,\n          customer.currency_code,\n          customer.time_zone,\n          customer.status,\n          customer.manager\n        FROM customer\n        WHERE customer.status = 'ENABLED'\n      `;\n\n      const customers = await client.Customer().report({\n        query,\n        login_customer_id: this.googleAdsConfig?.loginCustomerId,\n      });\n\n      return customers.map((customer: any) => ({\n        id: customer.customer.id.toString(),\n        name: customer.customer.descriptive_name || `Customer ${customer.customer.id}`,\n        currency: customer.customer.currency_code,\n        timezone: customer.customer.time_zone,\n        status: customer.customer.status,\n        type: customer.customer.manager ? 'MANAGER' : 'CLIENT',\n      }));\n    } catch (error) {\n      logger.error('Failed to get customer accounts', error);\n      throw new ApiError('Failed to retrieve customer accounts', 'CUSTOMER_ACCOUNTS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get campaigns for a customer\n   */\n  async getCampaigns(userId: string, customerId: string): Promise<GoogleAdsCampaign[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          campaign.status,\n          campaign.advertising_channel_type,\n          campaign.start_date,\n          campaign.end_date,\n          campaign_budget.amount_micros,\n          campaign_budget.type\n        FROM campaign\n        WHERE campaign.status != 'REMOVED'\n        ORDER BY campaign.name\n      `;\n\n      const campaigns = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return campaigns.map((campaign: any) => ({\n        id: campaign.campaign.id.toString(),\n        name: campaign.campaign.name,\n        status: campaign.campaign.status,\n        type: campaign.campaign.advertising_channel_type,\n        start_date: campaign.campaign.start_date,\n        end_date: campaign.campaign.end_date,\n        budget_amount: campaign.campaign_budget?.amount_micros ? \n          parseInt(campaign.campaign_budget.amount_micros) / 1000000 : undefined,\n        budget_type: campaign.campaign_budget?.type,\n        customer_id: customerId,\n      }));\n    } catch (error) {\n      logger.error('Failed to get campaigns', error);\n      throw new ApiError('Failed to retrieve campaigns', 'CAMPAIGNS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get keywords for campaigns\n   */\n  async getKeywords(userId: string, customerId: string, campaignIds?: string[]): Promise<GoogleAdsKeyword[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let whereClause = 'ad_group_criterion.status != \"REMOVED\" AND ad_group_criterion.type = \"KEYWORD\"';\n      if (campaignIds && campaignIds.length > 0) {\n        const campaignFilter = campaignIds.map(id => `\"${id}\"`).join(',');\n        whereClause += ` AND campaign.id IN (${campaignFilter})`;\n      }\n\n      const query = `\n        SELECT \n          ad_group_criterion.criterion_id,\n          ad_group_criterion.keyword.text,\n          ad_group_criterion.keyword.match_type,\n          ad_group_criterion.status,\n          ad_group_criterion.quality_info.quality_score,\n          ad_group_criterion.position_estimates.first_page_cpc_micros,\n          ad_group_criterion.position_estimates.top_of_page_cpc_micros,\n          campaign.id,\n          ad_group.id\n        FROM keyword_view\n        WHERE ${whereClause}\n        ORDER BY ad_group_criterion.keyword.text\n      `;\n\n      const keywords = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return keywords.map((keyword: any) => ({\n        id: keyword.ad_group_criterion.criterion_id.toString(),\n        text: keyword.ad_group_criterion.keyword.text,\n        match_type: keyword.ad_group_criterion.keyword.match_type,\n        status: keyword.ad_group_criterion.status,\n        quality_score: keyword.ad_group_criterion.quality_info?.quality_score,\n        first_page_cpc: keyword.ad_group_criterion.position_estimates?.first_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.first_page_cpc_micros) / 1000000 : undefined,\n        top_of_page_cpc: keyword.ad_group_criterion.position_estimates?.top_of_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.top_of_page_cpc_micros) / 1000000 : undefined,\n        campaign_id: keyword.campaign.id.toString(),\n        ad_group_id: keyword.ad_group.id.toString(),\n      }));\n    } catch (error) {\n      logger.error('Failed to get keywords', error);\n      throw new ApiError('Failed to retrieve keywords', 'KEYWORDS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get campaign performance metrics\n   */\n  async getCampaignMetrics(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<GoogleAdsCampaignMetrics[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          campaign.id,\n          segments.date,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          metrics.ctr,\n          metrics.average_cpc\n        FROM campaign\n        WHERE campaign.status != 'REMOVED' ${dateFilter}\n        ORDER BY segments.date DESC, campaign.name\n      `;\n\n      const metrics = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return metrics.map((metric: any) => ({\n        campaign_id: metric.campaign.id.toString(),\n        impressions: parseInt(metric.metrics.impressions) || 0,\n        clicks: parseInt(metric.metrics.clicks) || 0,\n        cost_micros: parseInt(metric.metrics.cost_micros) || 0,\n        conversions: parseFloat(metric.metrics.conversions) || 0,\n        ctr: parseFloat(metric.metrics.ctr) || 0,\n        average_cpc: parseInt(metric.metrics.average_cpc) || 0,\n        cost_per_conversion: metric.metrics.conversions > 0 ?\n          parseInt(metric.metrics.cost_micros) / parseFloat(metric.metrics.conversions) / 1000000 : undefined,\n        date: metric.segments.date,\n      }));\n    } catch (error) {\n      logger.error('Failed to get campaign metrics', error);\n      throw new ApiError('Failed to retrieve campaign metrics', 'CAMPAIGN_METRICS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get search terms report\n   */\n  async getSearchTermsReport(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<SearchTermReport[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          search_term_view.search_term,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          campaign.id,\n          ad_group.id,\n          ad_group_criterion.criterion_id\n        FROM search_term_view\n        WHERE search_term_view.status != 'NONE' ${dateFilter}\n        ORDER BY metrics.impressions DESC\n      `;\n\n      const searchTerms = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return searchTerms.map((term: any) => ({\n        search_term: term.search_term_view.search_term,\n        impressions: parseInt(term.metrics.impressions) || 0,\n        clicks: parseInt(term.metrics.clicks) || 0,\n        cost_micros: parseInt(term.metrics.cost_micros) || 0,\n        conversions: parseFloat(term.metrics.conversions) || 0,\n        campaign_id: term.campaign.id.toString(),\n        ad_group_id: term.ad_group.id.toString(),\n        keyword_id: term.ad_group_criterion?.criterion_id?.toString(),\n      }));\n    } catch (error) {\n      logger.error('Failed to get search terms report', error);\n      throw new ApiError('Failed to retrieve search terms report', 'SEARCH_TERMS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Sync user data from Google Ads\n   */\n  async syncUserData(userId: string, force = false): Promise<void> {\n    try {\n      logger.info(`Starting Google Ads sync for user ${userId}`);\n      \n      const accounts = await this.getCustomerAccounts(userId);\n      \n      for (const account of accounts) {\n        if (account.type === 'CLIENT') { // Only sync client accounts, not manager accounts\n          await this.syncAccountData(userId, account);\n        }\n      }\n      \n      // Update last sync timestamp\n      await this.prisma.integration.update({\n        where: {\n          userId_platform: {\n            userId,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n        data: {\n          lastSync: new Date(),\n        },\n      });\n      \n      logger.info(`Completed Google Ads sync for user ${userId}`);\n    } catch (error) {\n      logger.error(`Failed to sync Google Ads data for user ${userId}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sync data for a specific account\n   */\n  private async syncAccountData(userId: string, account: GoogleAdsAccount): Promise<void> {\n    try {\n      // Sync campaigns\n      const campaigns = await this.getCampaigns(userId, account.id);\n      \n      for (const campaign of campaigns) {\n        await this.storeCampaignData(userId, account, campaign);\n        \n        // Sync keywords for this campaign\n        const keywords = await this.getKeywords(userId, account.id, [campaign.id]);\n        for (const keyword of keywords) {\n          await this.storeKeywordData(userId, keyword);\n        }\n        \n        // Sync metrics for the last 30 days\n        const endDate = new Date().toISOString().split('T')[0];\n        const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n        \n        const metrics = await this.getCampaignMetrics(userId, account.id, { startDate, endDate });\n        for (const metric of metrics) {\n          await this.storeCampaignMetrics(userId, metric);\n        }\n      }\n    } catch (error) {\n      logger.error(`Failed to sync account data for ${account.id}`, error);\n    }\n  }\n\n  /**\n   * Store campaign data in database\n   */\n  private async storeCampaignData(\n    userId: string,\n    account: GoogleAdsAccount,\n    campaign: GoogleAdsCampaign\n  ): Promise<void> {\n    await this.prisma.campaign.upsert({\n      where: {\n        externalId_platform: {\n          externalId: campaign.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: campaign.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        accountId: account.id,\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store keyword data in database\n   */\n  private async storeKeywordData(userId: string, keyword: GoogleAdsKeyword): Promise<void> {\n    await this.prisma.keyword.upsert({\n      where: {\n        externalId_platform: {\n          externalId: keyword.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: keyword.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        campaignId: keyword.campaign_id,\n        adGroupId: keyword.ad_group_id,\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store campaign metrics in database\n   */\n  private async storeCampaignMetrics(userId: string, metrics: GoogleAdsCampaignMetrics): Promise<void> {\n    await this.prisma.campaignMetrics.upsert({\n      where: {\n        campaignId_date_platform: {\n          campaignId: metrics.campaign_id,\n          date: new Date(metrics.date),\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000, // Convert micros to currency\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000, // Convert micros to currency\n        costPerConversion: metrics.cost_per_conversion,\n        updatedAt: new Date(),\n      },\n      create: {\n        campaignId: metrics.campaign_id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        date: new Date(metrics.date),\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000,\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000,\n        costPerConversion: metrics.cost_per_conversion,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Disconnect Google Ads integration\n   */\n  async disconnectIntegration(userId: string): Promise<void> {\n    await this.prisma.integration.update({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      data: {\n        isActive: false,\n        accessToken: null,\n        refreshToken: null,\n        expiresAt: null,\n      },\n    });\n\n    // Remove cached client\n    const cacheKey = `google-ads-client-${userId}`;\n    this.googleAdsClients.delete(cacheKey);\n\n    logger.info(`Disconnected Google Ads integration for user ${userId}`);\n  }\n\n  /**\n   * Scheduled sync job - runs every 30 minutes\n   */\n  async scheduledSync(): Promise<void> {\n    logger.info('Starting scheduled Google Ads sync');\n    \n    try {\n      const activeIntegrations = await this.prisma.integration.findMany({\n        where: {\n          platform: 'GOOGLE_ADS',\n          isActive: true,\n        },\n        select: {\n          userId: true,\n          lastSync: true,\n        },\n      });\n\n      for (const integration of activeIntegrations) {\n        try {\n          // Only sync if last sync was more than 25 minutes ago (to avoid overlapping)\n          const lastSyncThreshold = new Date(Date.now() - 25 * 60 * 1000);\n          if (!integration.lastSync || integration.lastSync < lastSyncThreshold) {\n            await this.syncUserData(integration.userId);\n            await this.delay(2000); // Rate limiting between users\n          }\n        } catch (error) {\n          logger.error(`Failed to sync user ${integration.userId}`, error);\n        }\n      }\n    } catch (error) {\n      logger.error('Failed to run scheduled sync', error);\n    }\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Clear cached clients (useful for testing or memory management)\n   */\n  clearClientCache(): void {\n    this.googleAdsClients.clear();\n  }\n}"],"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","ignoreList":[]}