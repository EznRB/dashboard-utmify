{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\metrics.routes.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\metrics.routes.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport request from 'supertest';\nimport { Express } from 'express';\nimport { MetricsService } from '../services/metrics.service';\nimport { CacheService } from '../services/cache.service';\nimport { PrismaService } from '../database/prisma.service';\n\n// Mock dependencies\njest.mock('../services/metrics.service');\njest.mock('../services/cache.service');\njest.mock('../database/prisma.service');\njest.mock('../middleware/auth.middleware');\n\n// Mock Express app setup\nconst createTestApp = (): Express => {\n  const express = require('express');\n  const app = express();\n  \n  app.use(express.json());\n  \n  // Mock auth middleware to always pass\n  app.use((req: any, res: any, next: any) => {\n    req.user = {\n      id: '123e4567-e89b-12d3-a456-426614174000',\n      organizationId: '123e4567-e89b-12d3-a456-426614174001',\n    };\n    next();\n  });\n  \n  // Import and use metrics routes\n  const metricsRoutes = require('../routes/metrics.routes');\n  app.use('/api/metrics', metricsRoutes.default || metricsRoutes);\n  \n  return app;\n};\n\ndescribe('Metrics Routes', () => {\n  let app: Express;\n  let mockMetricsService: jest.Mocked<MetricsService>;\n  let mockCacheService: jest.Mocked<CacheService>;\n\n  const mockUser = {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    organizationId: '123e4567-e89b-12d3-a456-426614174001',\n  };\n\n  const mockKPIMetrics = {\n    revenue: 5000,\n    roas: 250,\n    roi: 150,\n    adSpend: 2000,\n    cpc: 4,\n    cpm: 200,\n    cac: 40,\n    impressions: 10000,\n    clicks: 500,\n    conversions: 50,\n    ctr: 5,\n    conversionRate: 10,\n    ltv: 250,\n    arpu: 100,\n    margin: 60,\n    profit: 3000,\n  };\n\n  const mockDashboardMetrics = {\n    summary: mockKPIMetrics,\n    trends: [\n      { period: '2024-01-01', metrics: mockKPIMetrics },\n      { period: '2024-01-02', metrics: mockKPIMetrics },\n    ],\n    topCampaigns: [\n      {\n        campaignId: '123e4567-e89b-12d3-a456-426614174002',\n        campaignName: 'Test Campaign',\n        metrics: mockKPIMetrics,\n      },\n    ],\n    alerts: [],\n  };\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Setup service mocks\n    mockMetricsService = {\n      calculateMetrics: jest.fn(),\n      getDashboardMetrics: jest.fn(),\n      getMetricsHistory: jest.fn(),\n      compareMetrics: jest.fn(),\n      exportMetrics: jest.fn(),\n      updateRealTimeMetrics: jest.fn(),\n      invalidateCampaignCache: jest.fn(),\n      invalidateOrganizationCache: jest.fn(),\n    } as any;\n\n    mockCacheService = {\n      healthCheck: jest.fn(),\n      getMetrics: jest.fn(),\n    } as any;\n\n    // Create test app\n    app = createTestApp();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('POST /api/metrics/calculate', () => {\n    it('should calculate metrics successfully', async () => {\n      mockMetricsService.calculateMetrics.mockResolvedValue(mockKPIMetrics);\n\n      const response = await request(app)\n        .post('/api/metrics/calculate')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        })\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        data: mockKPIMetrics,\n      });\n\n      expect(mockMetricsService.calculateMetrics).toHaveBeenCalledWith({\n        organizationId: mockUser.organizationId,\n        startDate: new Date('2024-01-01'),\n        endDate: new Date('2024-01-31'),\n      });\n    });\n\n    it('should handle optional campaign filter', async () => {\n      mockMetricsService.calculateMetrics.mockResolvedValue(mockKPIMetrics);\n\n      await request(app)\n        .post('/api/metrics/calculate')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          campaignId: '123e4567-e89b-12d3-a456-426614174002',\n        })\n        .expect(200);\n\n      expect(mockMetricsService.calculateMetrics).toHaveBeenCalledWith({\n        organizationId: mockUser.organizationId,\n        startDate: new Date('2024-01-01'),\n        endDate: new Date('2024-01-31'),\n        campaignId: '123e4567-e89b-12d3-a456-426614174002',\n      });\n    });\n\n    it('should validate required fields', async () => {\n      const response = await request(app)\n        .post('/api/metrics/calculate')\n        .send({})\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should validate date format', async () => {\n      const response = await request(app)\n        .post('/api/metrics/calculate')\n        .send({\n          startDate: 'invalid-date',\n          endDate: '2024-01-31',\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body.error).toContain('Invalid date format');\n    });\n\n    it('should validate date range', async () => {\n      const response = await request(app)\n        .post('/api/metrics/calculate')\n        .send({\n          startDate: '2024-01-31',\n          endDate: '2024-01-01', // End before start\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body.error).toContain('End date must be after start date');\n    });\n\n    it('should handle service errors', async () => {\n      mockMetricsService.calculateMetrics.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .post('/api/metrics/calculate')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        })\n        .expect(500);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: 'Internal server error',\n      });\n    });\n  });\n\n  describe('GET /api/metrics/dashboard', () => {\n    it('should get dashboard metrics successfully', async () => {\n      mockMetricsService.getDashboardMetrics.mockResolvedValue(mockDashboardMetrics);\n\n      const response = await request(app)\n        .get('/api/metrics/dashboard')\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        })\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        data: mockDashboardMetrics,\n      });\n\n      expect(mockMetricsService.getDashboardMetrics).toHaveBeenCalledWith(\n        mockUser.organizationId,\n        {\n          startDate: new Date('2024-01-01'),\n          endDate: new Date('2024-01-31'),\n        }\n      );\n    });\n\n    it('should use default date range when not provided', async () => {\n      mockMetricsService.getDashboardMetrics.mockResolvedValue(mockDashboardMetrics);\n\n      await request(app)\n        .get('/api/metrics/dashboard')\n        .expect(200);\n\n      expect(mockMetricsService.getDashboardMetrics).toHaveBeenCalledWith(\n        mockUser.organizationId,\n        expect.objectContaining({\n          startDate: expect.any(Date),\n          endDate: expect.any(Date),\n        })\n      );\n    });\n\n    it('should handle optional filters', async () => {\n      mockMetricsService.getDashboardMetrics.mockResolvedValue(mockDashboardMetrics);\n\n      await request(app)\n        .get('/api/metrics/dashboard')\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          campaignId: '123e4567-e89b-12d3-a456-426614174002',\n          source: 'google',\n        })\n        .expect(200);\n\n      expect(mockMetricsService.getDashboardMetrics).toHaveBeenCalledWith(\n        mockUser.organizationId,\n        {\n          startDate: new Date('2024-01-01'),\n          endDate: new Date('2024-01-31'),\n          campaignId: '123e4567-e89b-12d3-a456-426614174002',\n          source: 'google',\n        }\n      );\n    });\n  });\n\n  describe('GET /api/metrics/history', () => {\n    it('should get metrics history successfully', async () => {\n      const mockHistory = [\n        { period: '2024-01-01', metrics: mockKPIMetrics },\n        { period: '2024-01-02', metrics: mockKPIMetrics },\n      ];\n\n      mockMetricsService.getMetricsHistory.mockResolvedValue(mockHistory);\n\n      const response = await request(app)\n        .get('/api/metrics/history')\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          granularity: 'daily',\n        })\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        data: mockHistory,\n      });\n\n      expect(mockMetricsService.getMetricsHistory).toHaveBeenCalledWith(\n        mockUser.organizationId,\n        {\n          startDate: new Date('2024-01-01'),\n          endDate: new Date('2024-01-31'),\n          granularity: 'daily',\n        }\n      );\n    });\n\n    it('should validate granularity parameter', async () => {\n      const response = await request(app)\n        .get('/api/metrics/history')\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          granularity: 'invalid',\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body.error).toContain('Invalid granularity');\n    });\n  });\n\n  describe('POST /api/metrics/compare', () => {\n    it('should compare metrics between periods successfully', async () => {\n      const mockComparison = {\n        current: mockKPIMetrics,\n        previous: { ...mockKPIMetrics, revenue: 4000 },\n        changes: {\n          revenue: { absolute: 1000, percentage: 25 },\n        },\n      };\n\n      mockMetricsService.compareMetrics.mockResolvedValue(mockComparison);\n\n      const response = await request(app)\n        .post('/api/metrics/compare')\n        .send({\n          currentPeriod: {\n            startDate: '2024-01-01',\n            endDate: '2024-01-31',\n          },\n          previousPeriod: {\n            startDate: '2023-12-01',\n            endDate: '2023-12-31',\n          },\n        })\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        data: mockComparison,\n      });\n    });\n\n    it('should validate period objects', async () => {\n      const response = await request(app)\n        .post('/api/metrics/compare')\n        .send({\n          currentPeriod: {\n            startDate: '2024-01-01',\n            // Missing endDate\n          },\n          previousPeriod: {\n            startDate: '2023-12-01',\n            endDate: '2023-12-31',\n          },\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n    });\n  });\n\n  describe('POST /api/metrics/export', () => {\n    it('should export metrics in JSON format', async () => {\n      const mockExport = {\n        data: mockKPIMetrics,\n        filename: 'metrics_export_1234567890.json',\n      };\n\n      mockMetricsService.exportMetrics.mockResolvedValue(mockExport);\n\n      const response = await request(app)\n        .post('/api/metrics/export')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          format: 'JSON',\n        })\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        data: mockExport,\n      });\n    });\n\n    it('should export metrics in CSV format', async () => {\n      const mockExport = {\n        data: 'revenue,roas,roi\\n5000,250,150',\n        filename: 'metrics_export_1234567890.csv',\n      };\n\n      mockMetricsService.exportMetrics.mockResolvedValue(mockExport);\n\n      const response = await request(app)\n        .post('/api/metrics/export')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          format: 'CSV',\n        })\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        data: mockExport,\n      });\n    });\n\n    it('should validate export format', async () => {\n      const response = await request(app)\n        .post('/api/metrics/export')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          format: 'INVALID',\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body.error).toContain('Invalid export format');\n    });\n  });\n\n  describe('POST /api/metrics/events', () => {\n    it('should process real-time events successfully', async () => {\n      mockMetricsService.updateRealTimeMetrics.mockResolvedValue(undefined);\n\n      const response = await request(app)\n        .post('/api/metrics/events')\n        .send({\n          campaignId: '123e4567-e89b-12d3-a456-426614174002',\n          eventType: 'CLICK',\n          eventData: { source: 'google' },\n        })\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Event processed successfully',\n      });\n\n      expect(mockMetricsService.updateRealTimeMetrics).toHaveBeenCalledWith(\n        '123e4567-e89b-12d3-a456-426614174002',\n        'CLICK',\n        { source: 'google' }\n      );\n    });\n\n    it('should validate event type', async () => {\n      const response = await request(app)\n        .post('/api/metrics/events')\n        .send({\n          campaignId: '123e4567-e89b-12d3-a456-426614174002',\n          eventType: 'INVALID_EVENT',\n          eventData: {},\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body.error).toContain('Invalid event type');\n    });\n\n    it('should validate campaign ID format', async () => {\n      const response = await request(app)\n        .post('/api/metrics/events')\n        .send({\n          campaignId: 'invalid-uuid',\n          eventType: 'CLICK',\n          eventData: {},\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body.error).toContain('Invalid campaign ID');\n    });\n  });\n\n  describe('DELETE /api/metrics/cache/campaign/:campaignId', () => {\n    it('should invalidate campaign cache successfully', async () => {\n      mockMetricsService.invalidateCampaignCache.mockResolvedValue(undefined);\n\n      const campaignId = '123e4567-e89b-12d3-a456-426614174002';\n      const response = await request(app)\n        .delete(`/api/metrics/cache/campaign/${campaignId}`)\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Campaign cache invalidated successfully',\n      });\n\n      expect(mockMetricsService.invalidateCampaignCache).toHaveBeenCalledWith(campaignId);\n    });\n\n    it('should validate campaign ID format', async () => {\n      const response = await request(app)\n        .delete('/api/metrics/cache/campaign/invalid-uuid')\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body.error).toContain('Invalid campaign ID');\n    });\n  });\n\n  describe('DELETE /api/metrics/cache/organization', () => {\n    it('should invalidate organization cache successfully', async () => {\n      mockMetricsService.invalidateOrganizationCache.mockResolvedValue(undefined);\n\n      const response = await request(app)\n        .delete('/api/metrics/cache/organization')\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Organization cache invalidated successfully',\n      });\n\n      expect(mockMetricsService.invalidateOrganizationCache).toHaveBeenCalledWith(\n        mockUser.organizationId\n      );\n    });\n  });\n\n  describe('Authentication and Authorization', () => {\n    it('should require authentication for all endpoints', async () => {\n      // Create app without auth middleware\n      const express = require('express');\n      const unauthenticatedApp = express();\n      unauthenticatedApp.use(express.json());\n      \n      const metricsRoutes = require('../routes/metrics.routes');\n      unauthenticatedApp.use('/api/metrics', metricsRoutes.default || metricsRoutes);\n\n      const response = await request(unauthenticatedApp)\n        .post('/api/metrics/calculate')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        })\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error', 'Unauthorized');\n    });\n\n    it('should validate organization access', async () => {\n      // This would be tested with different organization IDs\n      // Implementation depends on your auth middleware\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should handle rate limiting for expensive operations', async () => {\n      // Mock rate limiter to reject requests\n      const rateLimitedApp = createTestApp();\n      \n      // Add rate limiting middleware mock\n      rateLimitedApp.use('/api/metrics/calculate', (req, res) => {\n        res.status(429).json({\n          success: false,\n          error: 'Too many requests',\n        });\n      });\n\n      const response = await request(rateLimitedApp)\n        .post('/api/metrics/calculate')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        })\n        .expect(429);\n\n      expect(response.body).toHaveProperty('error', 'Too many requests');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle malformed JSON requests', async () => {\n      const response = await request(app)\n        .post('/api/metrics/calculate')\n        .set('Content-Type', 'application/json')\n        .send('{ invalid json }')\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n    });\n\n    it('should handle large request payloads', async () => {\n      const largePayload = {\n        startDate: '2024-01-01',\n        endDate: '2024-01-31',\n        data: 'x'.repeat(10000), // Large string\n      };\n\n      const response = await request(app)\n        .post('/api/metrics/calculate')\n        .send(largePayload)\n        .expect(413); // Payload too large\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should handle service unavailable errors', async () => {\n      mockMetricsService.calculateMetrics.mockRejectedValue(\n        new Error('Service temporarily unavailable')\n      );\n\n      const response = await request(app)\n        .post('/api/metrics/calculate')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        })\n        .expect(500);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: 'Internal server error',\n      });\n    });\n  });\n\n  describe('Performance', () => {\n    it('should respond within acceptable time limits', async () => {\n      mockMetricsService.calculateMetrics.mockResolvedValue(mockKPIMetrics);\n\n      const startTime = Date.now();\n      await request(app)\n        .post('/api/metrics/calculate')\n        .send({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        })\n        .expect(200);\n      const endTime = Date.now();\n\n      // Should respond within 5 seconds (generous for testing)\n      expect(endTime - startTime).toBeLessThan(5000);\n    });\n\n    it('should handle concurrent requests efficiently', async () => {\n      mockMetricsService.calculateMetrics.mockResolvedValue(mockKPIMetrics);\n\n      const concurrentRequests = 10;\n      const promises = Array.from({ length: concurrentRequests }, () =>\n        request(app)\n          .post('/api/metrics/calculate')\n          .send({\n            startDate: '2024-01-01',\n            endDate: '2024-01-31',\n          })\n      );\n\n      const responses = await Promise.all(promises);\n\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n        expect(response.body.success).toBe(true);\n      });\n    });\n  });\n});"],"version":3}