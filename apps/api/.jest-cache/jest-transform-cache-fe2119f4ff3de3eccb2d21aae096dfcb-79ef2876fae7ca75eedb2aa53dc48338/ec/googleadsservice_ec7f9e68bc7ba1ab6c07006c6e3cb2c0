3fd0575fe51e251ad1feab055ffd6600
"use strict";

/* istanbul ignore next */
function cov_1av6fuuarn() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts";
  var hash = "d0d41acadc07f59063b2a3ec72a8e3ad689a5aee";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "4": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 7,
          column: 50
        }
      },
      "5": {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 8,
          column: 49
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 43
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 43
        }
      },
      "8": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 18
        }
      },
      "9": {
        start: {
          line: 15,
          column: 17
        },
        end: {
          line: 15,
          column: 21
        }
      },
      "10": {
        start: {
          line: 16,
          column: 23
        },
        end: {
          line: 16,
          column: 32
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 29
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 43
        }
      },
      "13": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 47
        }
      },
      "14": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "15": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 115
        }
      },
      "16": {
        start: {
          line: 30,
          column: 22
        },
        end: {
          line: 30,
          column: 89
        }
      },
      "17": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 31,
          column: 66
        }
      },
      "18": {
        start: {
          line: 32,
          column: 23
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "19": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 83
        }
      },
      "20": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "21": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 115
        }
      },
      "22": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "23": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "24": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 33
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 78
        }
      },
      "26": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 111
        }
      },
      "27": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "28": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 115
        }
      },
      "29": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "30": {
        start: {
          line: 73,
          column: 29
        },
        end: {
          line: 78,
          column: 14
        }
      },
      "31": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 82,
          column: 14
        }
      },
      "32": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 75
        }
      },
      "33": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 103
        }
      },
      "34": {
        start: {
          line: 93,
          column: 37
        },
        end: {
          line: 93,
          column: 84
        }
      },
      "35": {
        start: {
          line: 94,
          column: 38
        },
        end: {
          line: 94,
          column: 86
        }
      },
      "36": {
        start: {
          line: 95,
          column: 26
        },
        end: {
          line: 95,
          column: 73
        }
      },
      "37": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "38": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 76
        }
      },
      "39": {
        start: {
          line: 126,
          column: 28
        },
        end: {
          line: 133,
          column: 10
        }
      },
      "40": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "41": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 118
        }
      },
      "42": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "43": {
        start: {
          line: 139,
          column: 33
        },
        end: {
          line: 139,
          column: 85
        }
      },
      "44": {
        start: {
          line: 140,
          column: 30
        },
        end: {
          line: 140,
          column: 73
        }
      },
      "45": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 54
        }
      },
      "46": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 42
        }
      },
      "47": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 67
        }
      },
      "48": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "49": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 115
        }
      },
      "50": {
        start: {
          line: 153,
          column: 25
        },
        end: {
          line: 153,
          column: 54
        }
      },
      "51": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "52": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 55
        }
      },
      "53": {
        start: {
          line: 157,
          column: 28
        },
        end: {
          line: 157,
          column: 61
        }
      },
      "54": {
        start: {
          line: 158,
          column: 23
        },
        end: {
          line: 162,
          column: 10
        }
      },
      "55": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 166,
          column: 10
        }
      },
      "56": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 52
        }
      },
      "57": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 22
        }
      },
      "58": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "59": {
        start: {
          line: 175,
          column: 27
        },
        end: {
          line: 175,
          column: 64
        }
      },
      "60": {
        start: {
          line: 176,
          column: 26
        },
        end: {
          line: 186,
          column: 7
        }
      },
      "61": {
        start: {
          line: 187,
          column: 30
        },
        end: {
          line: 190,
          column: 14
        }
      },
      "62": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 198,
          column: 16
        }
      },
      "63": {
        start: {
          line: 191,
          column: 48
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "64": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 76
        }
      },
      "65": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 113
        }
      },
      "66": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "67": {
        start: {
          line: 210,
          column: 27
        },
        end: {
          line: 210,
          column: 64
        }
      },
      "68": {
        start: {
          line: 211,
          column: 26
        },
        end: {
          line: 224,
          column: 7
        }
      },
      "69": {
        start: {
          line: 225,
          column: 30
        },
        end: {
          line: 227,
          column: 14
        }
      },
      "70": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 239,
          column: 16
        }
      },
      "71": {
        start: {
          line: 228,
          column: 48
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "72": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 68
        }
      },
      "73": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 97
        }
      },
      "74": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "75": {
        start: {
          line: 251,
          column: 27
        },
        end: {
          line: 251,
          column: 64
        }
      },
      "76": {
        start: {
          line: 252,
          column: 30
        },
        end: {
          line: 252,
          column: 110
        }
      },
      "77": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "78": {
        start: {
          line: 254,
          column: 39
        },
        end: {
          line: 254,
          column: 81
        }
      },
      "79": {
        start: {
          line: 254,
          column: 61
        },
        end: {
          line: 254,
          column: 70
        }
      },
      "80": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 73
        }
      },
      "81": {
        start: {
          line: 257,
          column: 26
        },
        end: {
          line: 271,
          column: 7
        }
      },
      "82": {
        start: {
          line: 272,
          column: 29
        },
        end: {
          line: 274,
          column: 14
        }
      },
      "83": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 287,
          column: 16
        }
      },
      "84": {
        start: {
          line: 275,
          column: 46
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "85": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 67
        }
      },
      "86": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 95
        }
      },
      "87": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "88": {
        start: {
          line: 299,
          column: 27
        },
        end: {
          line: 299,
          column: 64
        }
      },
      "89": {
        start: {
          line: 300,
          column: 29
        },
        end: {
          line: 300,
          column: 31
        }
      },
      "90": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "91": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 121
        }
      },
      "92": {
        start: {
          line: 304,
          column: 26
        },
        end: {
          line: 317,
          column: 7
        }
      },
      "93": {
        start: {
          line: 318,
          column: 28
        },
        end: {
          line: 320,
          column: 14
        }
      },
      "94": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 332,
          column: 16
        }
      },
      "95": {
        start: {
          line: 321,
          column: 44
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "96": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 75
        }
      },
      "97": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 111
        }
      },
      "98": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "99": {
        start: {
          line: 344,
          column: 27
        },
        end: {
          line: 344,
          column: 64
        }
      },
      "100": {
        start: {
          line: 345,
          column: 29
        },
        end: {
          line: 345,
          column: 31
        }
      },
      "101": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 348,
          column: 13
        }
      },
      "102": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 121
        }
      },
      "103": {
        start: {
          line: 349,
          column: 26
        },
        end: {
          line: 362,
          column: 7
        }
      },
      "104": {
        start: {
          line: 363,
          column: 32
        },
        end: {
          line: 365,
          column: 14
        }
      },
      "105": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 375,
          column: 16
        }
      },
      "106": {
        start: {
          line: 366,
          column: 46
        },
        end: {
          line: 375,
          column: 13
        }
      },
      "107": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 78
        }
      },
      "108": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 110
        }
      },
      "109": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "110": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 80
        }
      },
      "111": {
        start: {
          line: 388,
          column: 29
        },
        end: {
          line: 388,
          column: 67
        }
      },
      "112": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 393,
          column: 13
        }
      },
      "113": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 392,
          column: 17
        }
      },
      "114": {
        start: {
          line: 391,
          column: 20
        },
        end: {
          line: 391,
          column: 64
        }
      },
      "115": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 405,
          column: 15
        }
      },
      "116": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 81
        }
      },
      "117": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 94
        }
      },
      "118": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 24
        }
      },
      "119": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 438,
          column: 9
        }
      },
      "120": {
        start: {
          line: 419,
          column: 30
        },
        end: {
          line: 419,
          column: 73
        }
      },
      "121": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 434,
          column: 13
        }
      },
      "122": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 421,
          column: 72
        }
      },
      "123": {
        start: {
          line: 423,
          column: 33
        },
        end: {
          line: 423,
          column: 90
        }
      },
      "124": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 426,
          column: 17
        }
      },
      "125": {
        start: {
          line: 425,
          column: 20
        },
        end: {
          line: 425,
          column: 65
        }
      },
      "126": {
        start: {
          line: 428,
          column: 32
        },
        end: {
          line: 428,
          column: 70
        }
      },
      "127": {
        start: {
          line: 429,
          column: 34
        },
        end: {
          line: 429,
          column: 109
        }
      },
      "128": {
        start: {
          line: 430,
          column: 32
        },
        end: {
          line: 430,
          column: 105
        }
      },
      "129": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 433,
          column: 17
        }
      },
      "130": {
        start: {
          line: 432,
          column: 20
        },
        end: {
          line: 432,
          column: 68
        }
      },
      "131": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 90
        }
      },
      "132": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 474,
          column: 11
        }
      },
      "133": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 511,
          column: 11
        }
      },
      "134": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 550,
          column: 11
        }
      },
      "135": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 569,
          column: 11
        }
      },
      "136": {
        start: {
          line: 571,
          column: 25
        },
        end: {
          line: 571,
          column: 54
        }
      },
      "137": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 47
        }
      },
      "138": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 87
        }
      },
      "139": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 579,
          column: 67
        }
      },
      "140": {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 607,
          column: 9
        }
      },
      "141": {
        start: {
          line: 581,
          column: 39
        },
        end: {
          line: 590,
          column: 14
        }
      },
      "142": {
        start: {
          line: 591,
          column: 12
        },
        end: {
          line: 603,
          column: 13
        }
      },
      "143": {
        start: {
          line: 592,
          column: 16
        },
        end: {
          line: 602,
          column: 17
        }
      },
      "144": {
        start: {
          line: 594,
          column: 46
        },
        end: {
          line: 594,
          column: 83
        }
      },
      "145": {
        start: {
          line: 595,
          column: 20
        },
        end: {
          line: 598,
          column: 21
        }
      },
      "146": {
        start: {
          line: 596,
          column: 24
        },
        end: {
          line: 596,
          column: 68
        }
      },
      "147": {
        start: {
          line: 597,
          column: 24
        },
        end: {
          line: 597,
          column: 47
        }
      },
      "148": {
        start: {
          line: 601,
          column: 20
        },
        end: {
          line: 601,
          column: 94
        }
      },
      "149": {
        start: {
          line: 606,
          column: 12
        },
        end: {
          line: 606,
          column: 73
        }
      },
      "150": {
        start: {
          line: 613,
          column: 8
        },
        end: {
          line: 613,
          column: 63
        }
      },
      "151": {
        start: {
          line: 613,
          column: 38
        },
        end: {
          line: 613,
          column: 61
        }
      },
      "152": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 619,
          column: 38
        }
      },
      "153": {
        start: {
          line: 622,
          column: 0
        },
        end: {
          line: 622,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 56
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 41
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 50
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 46
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 43
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 68
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 38
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 92
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 33
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 125
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 37
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 149
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 38
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 173
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 191,
            column: 33
          },
          end: {
            line: 191,
            column: 34
          }
        },
        loc: {
          start: {
            line: 191,
            column: 48
          },
          end: {
            line: 198,
            column: 13
          }
        },
        line: 191
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 43
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 208
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 228,
            column: 33
          },
          end: {
            line: 228,
            column: 34
          }
        },
        loc: {
          start: {
            line: 228,
            column: 48
          },
          end: {
            line: 239,
            column: 13
          }
        },
        line: 228
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 55
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 249
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 254,
            column: 55
          },
          end: {
            line: 254,
            column: 56
          }
        },
        loc: {
          start: {
            line: 254,
            column: 61
          },
          end: {
            line: 254,
            column: 70
          }
        },
        line: 254
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 275,
            column: 32
          },
          end: {
            line: 275,
            column: 33
          }
        },
        loc: {
          start: {
            line: 275,
            column: 46
          },
          end: {
            line: 287,
            column: 13
          }
        },
        line: 275
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        loc: {
          start: {
            line: 297,
            column: 60
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 297
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 321,
            column: 31
          },
          end: {
            line: 321,
            column: 32
          }
        },
        loc: {
          start: {
            line: 321,
            column: 44
          },
          end: {
            line: 332,
            column: 13
          }
        },
        line: 321
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 62
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 342
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 366,
            column: 35
          },
          end: {
            line: 366,
            column: 36
          }
        },
        loc: {
          start: {
            line: 366,
            column: 46
          },
          end: {
            line: 375,
            column: 13
          }
        },
        line: 366
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 385,
            column: 5
          }
        },
        loc: {
          start: {
            line: 385,
            column: 46
          },
          end: {
            line: 412,
            column: 5
          }
        },
        line: 385
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 43
          },
          end: {
            line: 439,
            column: 5
          }
        },
        line: 416
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 443,
            column: 4
          },
          end: {
            line: 443,
            column: 5
          }
        },
        loc: {
          start: {
            line: 443,
            column: 55
          },
          end: {
            line: 475,
            column: 5
          }
        },
        line: 443
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 5
          }
        },
        loc: {
          start: {
            line: 479,
            column: 44
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 479
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 516,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        loc: {
          start: {
            line: 516,
            column: 48
          },
          end: {
            line: 551,
            column: 5
          }
        },
        line: 516
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 555,
            column: 4
          },
          end: {
            line: 555,
            column: 5
          }
        },
        loc: {
          start: {
            line: 555,
            column: 40
          },
          end: {
            line: 574,
            column: 5
          }
        },
        line: 555
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 578,
            column: 4
          },
          end: {
            line: 578,
            column: 5
          }
        },
        loc: {
          start: {
            line: 578,
            column: 26
          },
          end: {
            line: 608,
            column: 5
          }
        },
        line: 578
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 612,
            column: 4
          },
          end: {
            line: 612,
            column: 5
          }
        },
        loc: {
          start: {
            line: 612,
            column: 14
          },
          end: {
            line: 614,
            column: 5
          }
        },
        line: 612
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 613,
            column: 27
          },
          end: {
            line: 613,
            column: 28
          }
        },
        loc: {
          start: {
            line: 613,
            column: 38
          },
          end: {
            line: 613,
            column: 61
          }
        },
        line: 613
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 618,
            column: 4
          },
          end: {
            line: 618,
            column: 5
          }
        },
        loc: {
          start: {
            line: 618,
            column: 23
          },
          end: {
            line: 620,
            column: 5
          }
        },
        line: 618
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "7": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 24
          }
        }, {
          start: {
            line: 134,
            column: 28
          },
          end: {
            line: 134,
            column: 49
          }
        }],
        line: 134
      },
      "8": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "9": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 138,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 138,
            column: 33
          }
        }, {
          start: {
            line: 138,
            column: 37
          },
          end: {
            line: 138,
            column: 72
          }
        }],
        line: 138
      },
      "10": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "11": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "12": {
        loc: {
          start: {
            line: 193,
            column: 22
          },
          end: {
            line: 193,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 22
          },
          end: {
            line: 193,
            column: 56
          }
        }, {
          start: {
            line: 193,
            column: 60
          },
          end: {
            line: 193,
            column: 94
          }
        }],
        line: 193
      },
      "13": {
        loc: {
          start: {
            line: 197,
            column: 22
          },
          end: {
            line: 197,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 50
          },
          end: {
            line: 197,
            column: 59
          }
        }, {
          start: {
            line: 197,
            column: 62
          },
          end: {
            line: 197,
            column: 70
          }
        }],
        line: 197
      },
      "14": {
        loc: {
          start: {
            line: 235,
            column: 31
          },
          end: {
            line: 236,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 236,
            column: 20
          },
          end: {
            line: 236,
            column: 78
          }
        }, {
          start: {
            line: 236,
            column: 81
          },
          end: {
            line: 236,
            column: 90
          }
        }],
        line: 235
      },
      "15": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "16": {
        loc: {
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 27
          }
        }, {
          start: {
            line: 253,
            column: 31
          },
          end: {
            line: 253,
            column: 53
          }
        }],
        line: 253
      },
      "17": {
        loc: {
          start: {
            line: 281,
            column: 32
          },
          end: {
            line: 282,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 20
          },
          end: {
            line: 282,
            column: 107
          }
        }, {
          start: {
            line: 282,
            column: 110
          },
          end: {
            line: 282,
            column: 119
          }
        }],
        line: 281
      },
      "18": {
        loc: {
          start: {
            line: 283,
            column: 33
          },
          end: {
            line: 284,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 284,
            column: 108
          }
        }, {
          start: {
            line: 284,
            column: 111
          },
          end: {
            line: 284,
            column: 120
          }
        }],
        line: 283
      },
      "19": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "20": {
        loc: {
          start: {
            line: 323,
            column: 29
          },
          end: {
            line: 323,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 29
          },
          end: {
            line: 323,
            column: 65
          }
        }, {
          start: {
            line: 323,
            column: 69
          },
          end: {
            line: 323,
            column: 70
          }
        }],
        line: 323
      },
      "21": {
        loc: {
          start: {
            line: 324,
            column: 24
          },
          end: {
            line: 324,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 24
          },
          end: {
            line: 324,
            column: 55
          }
        }, {
          start: {
            line: 324,
            column: 59
          },
          end: {
            line: 324,
            column: 60
          }
        }],
        line: 324
      },
      "22": {
        loc: {
          start: {
            line: 325,
            column: 29
          },
          end: {
            line: 325,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 29
          },
          end: {
            line: 325,
            column: 65
          }
        }, {
          start: {
            line: 325,
            column: 69
          },
          end: {
            line: 325,
            column: 70
          }
        }],
        line: 325
      },
      "23": {
        loc: {
          start: {
            line: 326,
            column: 29
          },
          end: {
            line: 326,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 29
          },
          end: {
            line: 326,
            column: 67
          }
        }, {
          start: {
            line: 326,
            column: 71
          },
          end: {
            line: 326,
            column: 72
          }
        }],
        line: 326
      },
      "24": {
        loc: {
          start: {
            line: 327,
            column: 21
          },
          end: {
            line: 327,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 21
          },
          end: {
            line: 327,
            column: 51
          }
        }, {
          start: {
            line: 327,
            column: 55
          },
          end: {
            line: 327,
            column: 56
          }
        }],
        line: 327
      },
      "25": {
        loc: {
          start: {
            line: 328,
            column: 29
          },
          end: {
            line: 328,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 328,
            column: 29
          },
          end: {
            line: 328,
            column: 65
          }
        }, {
          start: {
            line: 328,
            column: 69
          },
          end: {
            line: 328,
            column: 70
          }
        }],
        line: 328
      },
      "26": {
        loc: {
          start: {
            line: 329,
            column: 37
          },
          end: {
            line: 330,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 330,
            column: 20
          },
          end: {
            line: 330,
            column: 107
          }
        }, {
          start: {
            line: 330,
            column: 110
          },
          end: {
            line: 330,
            column: 119
          }
        }],
        line: 329
      },
      "27": {
        loc: {
          start: {
            line: 346,
            column: 12
          },
          end: {
            line: 348,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 12
          },
          end: {
            line: 348,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "28": {
        loc: {
          start: {
            line: 368,
            column: 29
          },
          end: {
            line: 368,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 29
          },
          end: {
            line: 368,
            column: 63
          }
        }, {
          start: {
            line: 368,
            column: 67
          },
          end: {
            line: 368,
            column: 68
          }
        }],
        line: 368
      },
      "29": {
        loc: {
          start: {
            line: 369,
            column: 24
          },
          end: {
            line: 369,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 24
          },
          end: {
            line: 369,
            column: 53
          }
        }, {
          start: {
            line: 369,
            column: 57
          },
          end: {
            line: 369,
            column: 58
          }
        }],
        line: 369
      },
      "30": {
        loc: {
          start: {
            line: 370,
            column: 29
          },
          end: {
            line: 370,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 29
          },
          end: {
            line: 370,
            column: 63
          }
        }, {
          start: {
            line: 370,
            column: 67
          },
          end: {
            line: 370,
            column: 68
          }
        }],
        line: 370
      },
      "31": {
        loc: {
          start: {
            line: 371,
            column: 29
          },
          end: {
            line: 371,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 29
          },
          end: {
            line: 371,
            column: 65
          }
        }, {
          start: {
            line: 371,
            column: 69
          },
          end: {
            line: 371,
            column: 70
          }
        }],
        line: 371
      },
      "32": {
        loc: {
          start: {
            line: 385,
            column: 31
          },
          end: {
            line: 385,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 385,
            column: 39
          },
          end: {
            line: 385,
            column: 44
          }
        }],
        line: 385
      },
      "33": {
        loc: {
          start: {
            line: 390,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "34": {
        loc: {
          start: {
            line: 455,
            column: 27
          },
          end: {
            line: 455,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 455,
            column: 49
          },
          end: {
            line: 455,
            column: 78
          }
        }, {
          start: {
            line: 455,
            column: 81
          },
          end: {
            line: 455,
            column: 85
          }
        }],
        line: 455
      },
      "35": {
        loc: {
          start: {
            line: 456,
            column: 25
          },
          end: {
            line: 456,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 456,
            column: 45
          },
          end: {
            line: 456,
            column: 72
          }
        }, {
          start: {
            line: 456,
            column: 75
          },
          end: {
            line: 456,
            column: 79
          }
        }],
        line: 456
      },
      "36": {
        loc: {
          start: {
            line: 468,
            column: 27
          },
          end: {
            line: 468,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 468,
            column: 49
          },
          end: {
            line: 468,
            column: 78
          }
        }, {
          start: {
            line: 468,
            column: 81
          },
          end: {
            line: 468,
            column: 85
          }
        }],
        line: 468
      },
      "37": {
        loc: {
          start: {
            line: 469,
            column: 25
          },
          end: {
            line: 469,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 469,
            column: 45
          },
          end: {
            line: 469,
            column: 72
          }
        }, {
          start: {
            line: 469,
            column: 75
          },
          end: {
            line: 469,
            column: 79
          }
        }],
        line: 469
      },
      "38": {
        loc: {
          start: {
            line: 595,
            column: 20
          },
          end: {
            line: 598,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 595,
            column: 20
          },
          end: {
            line: 598,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 595
      },
      "39": {
        loc: {
          start: {
            line: 595,
            column: 24
          },
          end: {
            line: 595,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 595,
            column: 24
          },
          end: {
            line: 595,
            column: 45
          }
        }, {
          start: {
            line: 595,
            column: 49
          },
          end: {
            line: 595,
            column: 89
          }
        }],
        line: 595
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts"],
      sourcesContent: ["import { PrismaService } from '../database/prisma.service';\nimport { CryptoService } from './crypto.service';\nimport { GoogleAdsApi, Customer, enums } from 'google-ads-api';\nimport axios from 'axios';\nimport { logger } from '../utils/logger';\nimport { ApiError } from '../utils/errors';\n\ninterface GoogleOAuthTokens {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n  token_type: string;\n  scope: string;\n}\n\ninterface GoogleAdsAccount {\n  id: string;\n  name: string;\n  currency: string;\n  timezone: string;\n  status: string;\n  type: string;\n}\n\ninterface GoogleAdsCampaign {\n  id: string;\n  name: string;\n  status: string;\n  type: string;\n  start_date?: string;\n  end_date?: string;\n  budget_amount?: number;\n  budget_type?: string;\n  customer_id: string;\n}\n\ninterface GoogleAdsKeyword {\n  id: string;\n  text: string;\n  match_type: string;\n  status: string;\n  quality_score?: number;\n  first_page_cpc?: number;\n  top_of_page_cpc?: number;\n  campaign_id: string;\n  ad_group_id: string;\n}\n\ninterface GoogleAdsCampaignMetrics {\n  campaign_id: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  ctr: number;\n  average_cpc: number;\n  cost_per_conversion?: number;\n  date: string;\n}\n\ninterface SearchTermReport {\n  search_term: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  campaign_id: string;\n  ad_group_id: string;\n  keyword_id?: string;\n}\n\nexport class GoogleAdsService {\n  private readonly maxRetries = 3;\n  private readonly retryDelay = 1000;\n  private readonly googleAdsClients = new Map<string, GoogleAdsApi>();\n  private readonly googleAdsConfig: any;\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly cryptoService: CryptoService,\n    googleAdsConfig?: any\n  ) {\n    this.googleAdsConfig = googleAdsConfig;\n  }\n\n  /**\n   * Generate OAuth 2.0 authorization URL\n   */\n  generateAuthUrl(userId: string, redirectUri: string): string {\n    if (!this.googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    const state = this.cryptoService.encrypt(JSON.stringify({ userId, redirectUri }));\n    const scopes = ['https://www.googleapis.com/auth/adwords'];\n    \n    const params = new URLSearchParams({\n      client_id: this.googleAdsConfig.clientId,\n      redirect_uri: redirectUri,\n      scope: scopes.join(' '),\n      response_type: 'code',\n      access_type: 'offline',\n      prompt: 'consent',\n      state,\n    });\n\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  async exchangeCodeForToken(code: string, redirectUri: string): Promise<GoogleOAuthTokens> {\n    if (!this.googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: this.googleAdsConfig.clientId,\n        client_secret: this.googleAdsConfig.clientSecret,\n        code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      });\n\n      return response.data;\n    } catch (error) {\n      logger.error('Failed to exchange code for token', error);\n      throw new ApiError('Failed to exchange authorization code', 'TOKEN_EXCHANGE_FAILED', 400);\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshAccessToken(refreshToken: string): Promise<GoogleOAuthTokens> {\n    if (!this.googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: this.googleAdsConfig.clientId,\n        client_secret: this.googleAdsConfig.clientSecret,\n        refresh_token: refreshToken,\n        grant_type: 'refresh_token',\n      });\n\n      return {\n        ...response.data,\n        refresh_token: refreshToken, // Keep the original refresh token\n      };\n    } catch (error) {\n      logger.error('Failed to refresh access token', error);\n      throw new ApiError('Failed to refresh access token', 'TOKEN_REFRESH_FAILED', 401);\n    }\n  }\n\n  /**\n   * Store OAuth tokens securely\n   */\n  async storeTokens(userId: string, tokens: GoogleOAuthTokens): Promise<void> {\n    const encryptedAccessToken = this.cryptoService.encrypt(tokens.access_token);\n    const encryptedRefreshToken = this.cryptoService.encrypt(tokens.refresh_token);\n    const expiresAt = new Date(Date.now() + tokens.expires_in * 1000);\n\n    await this.prisma.integration.upsert({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n      create: {\n        userId,\n        platform: 'GOOGLE_ADS',\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n    });\n\n    logger.info(`Stored Google Ads tokens for user ${userId}`);\n  }\n\n  /**\n   * Get valid access token (refresh if needed)\n   */\n  async getAccessToken(userId: string): Promise<string> {\n    const integration = await this.prisma.integration.findUnique({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n    });\n\n    if (!integration || !integration.isActive) {\n      throw new ApiError('Google Ads integration not found or inactive', 'INTEGRATION_NOT_FOUND', 401);\n    }\n\n    // Check if token is expired\n    if (integration.expiresAt && integration.expiresAt <= new Date()) {\n      const refreshToken = this.cryptoService.decrypt(integration.refreshToken!);\n      const newTokens = await this.refreshAccessToken(refreshToken);\n      await this.storeTokens(userId, newTokens);\n      return newTokens.access_token;\n    }\n\n    return this.cryptoService.decrypt(integration.accessToken!);\n  }\n\n  /**\n   * Get Google Ads API client for user\n   */\n  private async getGoogleAdsClient(userId: string): Promise<GoogleAdsApi> {\n    if (!this.googleAdsConfig) {\n      throw new ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);\n    }\n\n    const cacheKey = `google-ads-client-${userId}`;\n    \n    if (this.googleAdsClients.has(cacheKey)) {\n      return this.googleAdsClients.get(cacheKey)!;\n    }\n\n    const accessToken = await this.getAccessToken(userId);\n    \n    const client = new GoogleAdsApi({\n      client_id: this.googleAdsConfig.clientId,\n      client_secret: this.googleAdsConfig.clientSecret,\n      developer_token: this.googleAdsConfig.developerToken,\n    });\n\n    // Set the access token for the client\n    client.Customer.credentials = {\n      access_token: accessToken,\n    };\n\n    this.googleAdsClients.set(cacheKey, client);\n    return client;\n  }\n\n  /**\n   * Get accessible customer accounts\n   */\n  async getCustomerAccounts(userId: string): Promise<GoogleAdsAccount[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          customer.id,\n          customer.descriptive_name,\n          customer.currency_code,\n          customer.time_zone,\n          customer.status,\n          customer.manager\n        FROM customer\n        WHERE customer.status = 'ENABLED'\n      `;\n\n      const customers = await client.Customer().report({\n        query,\n        login_customer_id: this.googleAdsConfig?.loginCustomerId,\n      });\n\n      return customers.map((customer: any) => ({\n        id: customer.customer.id.toString(),\n        name: customer.customer.descriptive_name || `Customer ${customer.customer.id}`,\n        currency: customer.customer.currency_code,\n        timezone: customer.customer.time_zone,\n        status: customer.customer.status,\n        type: customer.customer.manager ? 'MANAGER' : 'CLIENT',\n      }));\n    } catch (error) {\n      logger.error('Failed to get customer accounts', error);\n      throw new ApiError('Failed to retrieve customer accounts', 'CUSTOMER_ACCOUNTS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get campaigns for a customer\n   */\n  async getCampaigns(userId: string, customerId: string): Promise<GoogleAdsCampaign[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          campaign.status,\n          campaign.advertising_channel_type,\n          campaign.start_date,\n          campaign.end_date,\n          campaign_budget.amount_micros,\n          campaign_budget.type\n        FROM campaign\n        WHERE campaign.status != 'REMOVED'\n        ORDER BY campaign.name\n      `;\n\n      const campaigns = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return campaigns.map((campaign: any) => ({\n        id: campaign.campaign.id.toString(),\n        name: campaign.campaign.name,\n        status: campaign.campaign.status,\n        type: campaign.campaign.advertising_channel_type,\n        start_date: campaign.campaign.start_date,\n        end_date: campaign.campaign.end_date,\n        budget_amount: campaign.campaign_budget?.amount_micros ? \n          parseInt(campaign.campaign_budget.amount_micros) / 1000000 : undefined,\n        budget_type: campaign.campaign_budget?.type,\n        customer_id: customerId,\n      }));\n    } catch (error) {\n      logger.error('Failed to get campaigns', error);\n      throw new ApiError('Failed to retrieve campaigns', 'CAMPAIGNS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get keywords for campaigns\n   */\n  async getKeywords(userId: string, customerId: string, campaignIds?: string[]): Promise<GoogleAdsKeyword[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let whereClause = 'ad_group_criterion.status != \"REMOVED\" AND ad_group_criterion.type = \"KEYWORD\"';\n      if (campaignIds && campaignIds.length > 0) {\n        const campaignFilter = campaignIds.map(id => `\"${id}\"`).join(',');\n        whereClause += ` AND campaign.id IN (${campaignFilter})`;\n      }\n\n      const query = `\n        SELECT \n          ad_group_criterion.criterion_id,\n          ad_group_criterion.keyword.text,\n          ad_group_criterion.keyword.match_type,\n          ad_group_criterion.status,\n          ad_group_criterion.quality_info.quality_score,\n          ad_group_criterion.position_estimates.first_page_cpc_micros,\n          ad_group_criterion.position_estimates.top_of_page_cpc_micros,\n          campaign.id,\n          ad_group.id\n        FROM keyword_view\n        WHERE ${whereClause}\n        ORDER BY ad_group_criterion.keyword.text\n      `;\n\n      const keywords = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return keywords.map((keyword: any) => ({\n        id: keyword.ad_group_criterion.criterion_id.toString(),\n        text: keyword.ad_group_criterion.keyword.text,\n        match_type: keyword.ad_group_criterion.keyword.match_type,\n        status: keyword.ad_group_criterion.status,\n        quality_score: keyword.ad_group_criterion.quality_info?.quality_score,\n        first_page_cpc: keyword.ad_group_criterion.position_estimates?.first_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.first_page_cpc_micros) / 1000000 : undefined,\n        top_of_page_cpc: keyword.ad_group_criterion.position_estimates?.top_of_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.top_of_page_cpc_micros) / 1000000 : undefined,\n        campaign_id: keyword.campaign.id.toString(),\n        ad_group_id: keyword.ad_group.id.toString(),\n      }));\n    } catch (error) {\n      logger.error('Failed to get keywords', error);\n      throw new ApiError('Failed to retrieve keywords', 'KEYWORDS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get campaign performance metrics\n   */\n  async getCampaignMetrics(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<GoogleAdsCampaignMetrics[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          campaign.id,\n          segments.date,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          metrics.ctr,\n          metrics.average_cpc\n        FROM campaign\n        WHERE campaign.status != 'REMOVED' ${dateFilter}\n        ORDER BY segments.date DESC, campaign.name\n      `;\n\n      const metrics = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return metrics.map((metric: any) => ({\n        campaign_id: metric.campaign.id.toString(),\n        impressions: parseInt(metric.metrics.impressions) || 0,\n        clicks: parseInt(metric.metrics.clicks) || 0,\n        cost_micros: parseInt(metric.metrics.cost_micros) || 0,\n        conversions: parseFloat(metric.metrics.conversions) || 0,\n        ctr: parseFloat(metric.metrics.ctr) || 0,\n        average_cpc: parseInt(metric.metrics.average_cpc) || 0,\n        cost_per_conversion: metric.metrics.conversions > 0 ?\n          parseInt(metric.metrics.cost_micros) / parseFloat(metric.metrics.conversions) / 1000000 : undefined,\n        date: metric.segments.date,\n      }));\n    } catch (error) {\n      logger.error('Failed to get campaign metrics', error);\n      throw new ApiError('Failed to retrieve campaign metrics', 'CAMPAIGN_METRICS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Get search terms report\n   */\n  async getSearchTermsReport(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<SearchTermReport[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          search_term_view.search_term,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          campaign.id,\n          ad_group.id,\n          ad_group_criterion.criterion_id\n        FROM search_term_view\n        WHERE search_term_view.status != 'NONE' ${dateFilter}\n        ORDER BY metrics.impressions DESC\n      `;\n\n      const searchTerms = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return searchTerms.map((term: any) => ({\n        search_term: term.search_term_view.search_term,\n        impressions: parseInt(term.metrics.impressions) || 0,\n        clicks: parseInt(term.metrics.clicks) || 0,\n        cost_micros: parseInt(term.metrics.cost_micros) || 0,\n        conversions: parseFloat(term.metrics.conversions) || 0,\n        campaign_id: term.campaign.id.toString(),\n        ad_group_id: term.ad_group.id.toString(),\n        keyword_id: term.ad_group_criterion?.criterion_id?.toString(),\n      }));\n    } catch (error) {\n      logger.error('Failed to get search terms report', error);\n      throw new ApiError('Failed to retrieve search terms report', 'SEARCH_TERMS_FAILED', 400);\n    }\n  }\n\n  /**\n   * Sync user data from Google Ads\n   */\n  async syncUserData(userId: string, force = false): Promise<void> {\n    try {\n      logger.info(`Starting Google Ads sync for user ${userId}`);\n      \n      const accounts = await this.getCustomerAccounts(userId);\n      \n      for (const account of accounts) {\n        if (account.type === 'CLIENT') { // Only sync client accounts, not manager accounts\n          await this.syncAccountData(userId, account);\n        }\n      }\n      \n      // Update last sync timestamp\n      await this.prisma.integration.update({\n        where: {\n          userId_platform: {\n            userId,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n        data: {\n          lastSync: new Date(),\n        },\n      });\n      \n      logger.info(`Completed Google Ads sync for user ${userId}`);\n    } catch (error) {\n      logger.error(`Failed to sync Google Ads data for user ${userId}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sync data for a specific account\n   */\n  private async syncAccountData(userId: string, account: GoogleAdsAccount): Promise<void> {\n    try {\n      // Sync campaigns\n      const campaigns = await this.getCampaigns(userId, account.id);\n      \n      for (const campaign of campaigns) {\n        await this.storeCampaignData(userId, account, campaign);\n        \n        // Sync keywords for this campaign\n        const keywords = await this.getKeywords(userId, account.id, [campaign.id]);\n        for (const keyword of keywords) {\n          await this.storeKeywordData(userId, keyword);\n        }\n        \n        // Sync metrics for the last 30 days\n        const endDate = new Date().toISOString().split('T')[0];\n        const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n        \n        const metrics = await this.getCampaignMetrics(userId, account.id, { startDate, endDate });\n        for (const metric of metrics) {\n          await this.storeCampaignMetrics(userId, metric);\n        }\n      }\n    } catch (error) {\n      logger.error(`Failed to sync account data for ${account.id}`, error);\n    }\n  }\n\n  /**\n   * Store campaign data in database\n   */\n  private async storeCampaignData(\n    userId: string,\n    account: GoogleAdsAccount,\n    campaign: GoogleAdsCampaign\n  ): Promise<void> {\n    await this.prisma.campaign.upsert({\n      where: {\n        externalId_platform: {\n          externalId: campaign.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: campaign.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        accountId: account.id,\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store keyword data in database\n   */\n  private async storeKeywordData(userId: string, keyword: GoogleAdsKeyword): Promise<void> {\n    await this.prisma.keyword.upsert({\n      where: {\n        externalId_platform: {\n          externalId: keyword.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: keyword.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        campaignId: keyword.campaign_id,\n        adGroupId: keyword.ad_group_id,\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store campaign metrics in database\n   */\n  private async storeCampaignMetrics(userId: string, metrics: GoogleAdsCampaignMetrics): Promise<void> {\n    await this.prisma.campaignMetrics.upsert({\n      where: {\n        campaignId_date_platform: {\n          campaignId: metrics.campaign_id,\n          date: new Date(metrics.date),\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000, // Convert micros to currency\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000, // Convert micros to currency\n        costPerConversion: metrics.cost_per_conversion,\n        updatedAt: new Date(),\n      },\n      create: {\n        campaignId: metrics.campaign_id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        date: new Date(metrics.date),\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000,\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000,\n        costPerConversion: metrics.cost_per_conversion,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Disconnect Google Ads integration\n   */\n  async disconnectIntegration(userId: string): Promise<void> {\n    await this.prisma.integration.update({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      data: {\n        isActive: false,\n        accessToken: null,\n        refreshToken: null,\n        expiresAt: null,\n      },\n    });\n\n    // Remove cached client\n    const cacheKey = `google-ads-client-${userId}`;\n    this.googleAdsClients.delete(cacheKey);\n\n    logger.info(`Disconnected Google Ads integration for user ${userId}`);\n  }\n\n  /**\n   * Scheduled sync job - runs every 30 minutes\n   */\n  async scheduledSync(): Promise<void> {\n    logger.info('Starting scheduled Google Ads sync');\n    \n    try {\n      const activeIntegrations = await this.prisma.integration.findMany({\n        where: {\n          platform: 'GOOGLE_ADS',\n          isActive: true,\n        },\n        select: {\n          userId: true,\n          lastSync: true,\n        },\n      });\n\n      for (const integration of activeIntegrations) {\n        try {\n          // Only sync if last sync was more than 25 minutes ago (to avoid overlapping)\n          const lastSyncThreshold = new Date(Date.now() - 25 * 60 * 1000);\n          if (!integration.lastSync || integration.lastSync < lastSyncThreshold) {\n            await this.syncUserData(integration.userId);\n            await this.delay(2000); // Rate limiting between users\n          }\n        } catch (error) {\n          logger.error(`Failed to sync user ${integration.userId}`, error);\n        }\n      }\n    } catch (error) {\n      logger.error('Failed to run scheduled sync', error);\n    }\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Clear cached clients (useful for testing or memory management)\n   */\n  clearClientCache(): void {\n    this.googleAdsClients.clear();\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d0d41acadc07f59063b2a3ec72a8e3ad689a5aee"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1av6fuuarn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1av6fuuarn();
var __importDefault =
/* istanbul ignore next */
(cov_1av6fuuarn().s[0]++,
/* istanbul ignore next */
(cov_1av6fuuarn().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1av6fuuarn().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1av6fuuarn().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1av6fuuarn().f[0]++;
  cov_1av6fuuarn().s[1]++;
  return /* istanbul ignore next */(cov_1av6fuuarn().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1av6fuuarn().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1av6fuuarn().s[3]++;
exports.GoogleAdsService = void 0;
const google_ads_api_1 =
/* istanbul ignore next */
(cov_1av6fuuarn().s[4]++, require("google-ads-api"));
const axios_1 =
/* istanbul ignore next */
(cov_1av6fuuarn().s[5]++, __importDefault(require("axios")));
const logger_1 =
/* istanbul ignore next */
(cov_1av6fuuarn().s[6]++, require("../utils/logger"));
const errors_1 =
/* istanbul ignore next */
(cov_1av6fuuarn().s[7]++, require("../utils/errors"));
class GoogleAdsService {
  prisma;
  cryptoService;
  maxRetries =
  /* istanbul ignore next */
  (cov_1av6fuuarn().s[8]++, 3);
  retryDelay =
  /* istanbul ignore next */
  (cov_1av6fuuarn().s[9]++, 1000);
  googleAdsClients =
  /* istanbul ignore next */
  (cov_1av6fuuarn().s[10]++, new Map());
  googleAdsConfig;
  constructor(prisma, cryptoService, googleAdsConfig) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[1]++;
    cov_1av6fuuarn().s[11]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_1av6fuuarn().s[12]++;
    this.cryptoService = cryptoService;
    /* istanbul ignore next */
    cov_1av6fuuarn().s[13]++;
    this.googleAdsConfig = googleAdsConfig;
  }
  /**
   * Generate OAuth 2.0 authorization URL
   */
  generateAuthUrl(userId, redirectUri) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[2]++;
    cov_1av6fuuarn().s[14]++;
    if (!this.googleAdsConfig) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[3][0]++;
      cov_1av6fuuarn().s[15]++;
      throw new errors_1.ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[3][1]++;
    }
    const state =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[16]++, this.cryptoService.encrypt(JSON.stringify({
      userId,
      redirectUri
    })));
    const scopes =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[17]++, ['https://www.googleapis.com/auth/adwords']);
    const params =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[18]++, new URLSearchParams({
      client_id: this.googleAdsConfig.clientId,
      redirect_uri: redirectUri,
      scope: scopes.join(' '),
      response_type: 'code',
      access_type: 'offline',
      prompt: 'consent',
      state
    }));
    /* istanbul ignore next */
    cov_1av6fuuarn().s[19]++;
    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
  }
  /**
   * Exchange authorization code for tokens
   */
  async exchangeCodeForToken(code, redirectUri) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[3]++;
    cov_1av6fuuarn().s[20]++;
    if (!this.googleAdsConfig) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[4][0]++;
      cov_1av6fuuarn().s[21]++;
      throw new errors_1.ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[4][1]++;
    }
    cov_1av6fuuarn().s[22]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[23]++, await axios_1.default.post('https://oauth2.googleapis.com/token', {
        client_id: this.googleAdsConfig.clientId,
        client_secret: this.googleAdsConfig.clientSecret,
        code,
        grant_type: 'authorization_code',
        redirect_uri: redirectUri
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[24]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[25]++;
      logger_1.logger.error('Failed to exchange code for token', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[26]++;
      throw new errors_1.ApiError('Failed to exchange authorization code', 'TOKEN_EXCHANGE_FAILED', 400);
    }
  }
  /**
   * Refresh access token
   */
  async refreshAccessToken(refreshToken) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[4]++;
    cov_1av6fuuarn().s[27]++;
    if (!this.googleAdsConfig) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[5][0]++;
      cov_1av6fuuarn().s[28]++;
      throw new errors_1.ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[5][1]++;
    }
    cov_1av6fuuarn().s[29]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[30]++, await axios_1.default.post('https://oauth2.googleapis.com/token', {
        client_id: this.googleAdsConfig.clientId,
        client_secret: this.googleAdsConfig.clientSecret,
        refresh_token: refreshToken,
        grant_type: 'refresh_token'
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[31]++;
      return {
        ...response.data,
        refresh_token: refreshToken // Keep the original refresh token
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[32]++;
      logger_1.logger.error('Failed to refresh access token', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[33]++;
      throw new errors_1.ApiError('Failed to refresh access token', 'TOKEN_REFRESH_FAILED', 401);
    }
  }
  /**
   * Store OAuth tokens securely
   */
  async storeTokens(userId, tokens) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[5]++;
    const encryptedAccessToken =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[34]++, this.cryptoService.encrypt(tokens.access_token));
    const encryptedRefreshToken =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[35]++, this.cryptoService.encrypt(tokens.refresh_token));
    const expiresAt =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[36]++, new Date(Date.now() + tokens.expires_in * 1000));
    /* istanbul ignore next */
    cov_1av6fuuarn().s[37]++;
    await this.prisma.integration.upsert({
      where: {
        userId_platform: {
          userId,
          platform: 'GOOGLE_ADS'
        }
      },
      update: {
        accessToken: encryptedAccessToken,
        refreshToken: encryptedRefreshToken,
        expiresAt,
        isActive: true,
        lastSync: new Date()
      },
      create: {
        userId,
        platform: 'GOOGLE_ADS',
        accessToken: encryptedAccessToken,
        refreshToken: encryptedRefreshToken,
        expiresAt,
        isActive: true,
        lastSync: new Date()
      }
    });
    /* istanbul ignore next */
    cov_1av6fuuarn().s[38]++;
    logger_1.logger.info(`Stored Google Ads tokens for user ${userId}`);
  }
  /**
   * Get valid access token (refresh if needed)
   */
  async getAccessToken(userId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[6]++;
    const integration =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[39]++, await this.prisma.integration.findUnique({
      where: {
        userId_platform: {
          userId,
          platform: 'GOOGLE_ADS'
        }
      }
    }));
    /* istanbul ignore next */
    cov_1av6fuuarn().s[40]++;
    if (
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[7][0]++, !integration) ||
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[7][1]++, !integration.isActive)) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[6][0]++;
      cov_1av6fuuarn().s[41]++;
      throw new errors_1.ApiError('Google Ads integration not found or inactive', 'INTEGRATION_NOT_FOUND', 401);
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[6][1]++;
    }
    // Check if token is expired
    cov_1av6fuuarn().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[9][0]++, integration.expiresAt) &&
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[9][1]++, integration.expiresAt <= new Date())) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[8][0]++;
      const refreshToken =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[43]++, this.cryptoService.decrypt(integration.refreshToken));
      const newTokens =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[44]++, await this.refreshAccessToken(refreshToken));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[45]++;
      await this.storeTokens(userId, newTokens);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[46]++;
      return newTokens.access_token;
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[8][1]++;
    }
    cov_1av6fuuarn().s[47]++;
    return this.cryptoService.decrypt(integration.accessToken);
  }
  /**
   * Get Google Ads API client for user
   */
  async getGoogleAdsClient(userId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[7]++;
    cov_1av6fuuarn().s[48]++;
    if (!this.googleAdsConfig) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[10][0]++;
      cov_1av6fuuarn().s[49]++;
      throw new errors_1.ApiError('Google Ads integration not configured', 'GOOGLE_ADS_NOT_CONFIGURED', 400);
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[10][1]++;
    }
    const cacheKey =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[50]++, `google-ads-client-${userId}`);
    /* istanbul ignore next */
    cov_1av6fuuarn().s[51]++;
    if (this.googleAdsClients.has(cacheKey)) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[11][0]++;
      cov_1av6fuuarn().s[52]++;
      return this.googleAdsClients.get(cacheKey);
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[11][1]++;
    }
    const accessToken =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[53]++, await this.getAccessToken(userId));
    const client =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[54]++, new google_ads_api_1.GoogleAdsApi({
      client_id: this.googleAdsConfig.clientId,
      client_secret: this.googleAdsConfig.clientSecret,
      developer_token: this.googleAdsConfig.developerToken
    }));
    // Set the access token for the client
    /* istanbul ignore next */
    cov_1av6fuuarn().s[55]++;
    client.Customer.credentials = {
      access_token: accessToken
    };
    /* istanbul ignore next */
    cov_1av6fuuarn().s[56]++;
    this.googleAdsClients.set(cacheKey, client);
    /* istanbul ignore next */
    cov_1av6fuuarn().s[57]++;
    return client;
  }
  /**
   * Get accessible customer accounts
   */
  async getCustomerAccounts(userId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[8]++;
    cov_1av6fuuarn().s[58]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[59]++, await this.getGoogleAdsClient(userId));
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[60]++, `
        SELECT 
          customer.id,
          customer.descriptive_name,
          customer.currency_code,
          customer.time_zone,
          customer.status,
          customer.manager
        FROM customer
        WHERE customer.status = 'ENABLED'
      `);
      const customers =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[61]++, await client.Customer().report({
        query,
        login_customer_id: this.googleAdsConfig?.loginCustomerId
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[62]++;
      return customers.map(customer => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[9]++;
        cov_1av6fuuarn().s[63]++;
        return {
          id: customer.customer.id.toString(),
          name:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[12][0]++, customer.customer.descriptive_name) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[12][1]++, `Customer ${customer.customer.id}`),
          currency: customer.customer.currency_code,
          timezone: customer.customer.time_zone,
          status: customer.customer.status,
          type: customer.customer.manager ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[13][0]++, 'MANAGER') :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[13][1]++, 'CLIENT')
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[64]++;
      logger_1.logger.error('Failed to get customer accounts', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[65]++;
      throw new errors_1.ApiError('Failed to retrieve customer accounts', 'CUSTOMER_ACCOUNTS_FAILED', 400);
    }
  }
  /**
   * Get campaigns for a customer
   */
  async getCampaigns(userId, customerId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[10]++;
    cov_1av6fuuarn().s[66]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[67]++, await this.getGoogleAdsClient(userId));
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[68]++, `
        SELECT 
          campaign.id,
          campaign.name,
          campaign.status,
          campaign.advertising_channel_type,
          campaign.start_date,
          campaign.end_date,
          campaign_budget.amount_micros,
          campaign_budget.type
        FROM campaign
        WHERE campaign.status != 'REMOVED'
        ORDER BY campaign.name
      `);
      const campaigns =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[69]++, await client.Customer({
        customer_id: customerId
      }).report({
        query
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[70]++;
      return campaigns.map(campaign => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[11]++;
        cov_1av6fuuarn().s[71]++;
        return {
          id: campaign.campaign.id.toString(),
          name: campaign.campaign.name,
          status: campaign.campaign.status,
          type: campaign.campaign.advertising_channel_type,
          start_date: campaign.campaign.start_date,
          end_date: campaign.campaign.end_date,
          budget_amount: campaign.campaign_budget?.amount_micros ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[14][0]++, parseInt(campaign.campaign_budget.amount_micros) / 1000000) :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[14][1]++, undefined),
          budget_type: campaign.campaign_budget?.type,
          customer_id: customerId
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[72]++;
      logger_1.logger.error('Failed to get campaigns', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[73]++;
      throw new errors_1.ApiError('Failed to retrieve campaigns', 'CAMPAIGNS_FAILED', 400);
    }
  }
  /**
   * Get keywords for campaigns
   */
  async getKeywords(userId, customerId, campaignIds) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[12]++;
    cov_1av6fuuarn().s[74]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[75]++, await this.getGoogleAdsClient(userId));
      let whereClause =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[76]++, 'ad_group_criterion.status != "REMOVED" AND ad_group_criterion.type = "KEYWORD"');
      /* istanbul ignore next */
      cov_1av6fuuarn().s[77]++;
      if (
      /* istanbul ignore next */
      (cov_1av6fuuarn().b[16][0]++, campaignIds) &&
      /* istanbul ignore next */
      (cov_1av6fuuarn().b[16][1]++, campaignIds.length > 0)) {
        /* istanbul ignore next */
        cov_1av6fuuarn().b[15][0]++;
        const campaignFilter =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[78]++, campaignIds.map(id => {
          /* istanbul ignore next */
          cov_1av6fuuarn().f[13]++;
          cov_1av6fuuarn().s[79]++;
          return `"${id}"`;
        }).join(','));
        /* istanbul ignore next */
        cov_1av6fuuarn().s[80]++;
        whereClause += ` AND campaign.id IN (${campaignFilter})`;
      } else
      /* istanbul ignore next */
      {
        cov_1av6fuuarn().b[15][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[81]++, `
        SELECT 
          ad_group_criterion.criterion_id,
          ad_group_criterion.keyword.text,
          ad_group_criterion.keyword.match_type,
          ad_group_criterion.status,
          ad_group_criterion.quality_info.quality_score,
          ad_group_criterion.position_estimates.first_page_cpc_micros,
          ad_group_criterion.position_estimates.top_of_page_cpc_micros,
          campaign.id,
          ad_group.id
        FROM keyword_view
        WHERE ${whereClause}
        ORDER BY ad_group_criterion.keyword.text
      `);
      const keywords =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[82]++, await client.Customer({
        customer_id: customerId
      }).report({
        query
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[83]++;
      return keywords.map(keyword => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[14]++;
        cov_1av6fuuarn().s[84]++;
        return {
          id: keyword.ad_group_criterion.criterion_id.toString(),
          text: keyword.ad_group_criterion.keyword.text,
          match_type: keyword.ad_group_criterion.keyword.match_type,
          status: keyword.ad_group_criterion.status,
          quality_score: keyword.ad_group_criterion.quality_info?.quality_score,
          first_page_cpc: keyword.ad_group_criterion.position_estimates?.first_page_cpc_micros ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[17][0]++, parseInt(keyword.ad_group_criterion.position_estimates.first_page_cpc_micros) / 1000000) :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[17][1]++, undefined),
          top_of_page_cpc: keyword.ad_group_criterion.position_estimates?.top_of_page_cpc_micros ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[18][0]++, parseInt(keyword.ad_group_criterion.position_estimates.top_of_page_cpc_micros) / 1000000) :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[18][1]++, undefined),
          campaign_id: keyword.campaign.id.toString(),
          ad_group_id: keyword.ad_group.id.toString()
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[85]++;
      logger_1.logger.error('Failed to get keywords', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[86]++;
      throw new errors_1.ApiError('Failed to retrieve keywords', 'KEYWORDS_FAILED', 400);
    }
  }
  /**
   * Get campaign performance metrics
   */
  async getCampaignMetrics(userId, customerId, dateRange) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[15]++;
    cov_1av6fuuarn().s[87]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[88]++, await this.getGoogleAdsClient(userId));
      let dateFilter =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[89]++, '');
      /* istanbul ignore next */
      cov_1av6fuuarn().s[90]++;
      if (dateRange) {
        /* istanbul ignore next */
        cov_1av6fuuarn().b[19][0]++;
        cov_1av6fuuarn().s[91]++;
        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;
      } else
      /* istanbul ignore next */
      {
        cov_1av6fuuarn().b[19][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[92]++, `
        SELECT 
          campaign.id,
          segments.date,
          metrics.impressions,
          metrics.clicks,
          metrics.cost_micros,
          metrics.conversions,
          metrics.ctr,
          metrics.average_cpc
        FROM campaign
        WHERE campaign.status != 'REMOVED' ${dateFilter}
        ORDER BY segments.date DESC, campaign.name
      `);
      const metrics =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[93]++, await client.Customer({
        customer_id: customerId
      }).report({
        query
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[94]++;
      return metrics.map(metric => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[16]++;
        cov_1av6fuuarn().s[95]++;
        return {
          campaign_id: metric.campaign.id.toString(),
          impressions:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[20][0]++, parseInt(metric.metrics.impressions)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[20][1]++, 0),
          clicks:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[21][0]++, parseInt(metric.metrics.clicks)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[21][1]++, 0),
          cost_micros:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[22][0]++, parseInt(metric.metrics.cost_micros)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[22][1]++, 0),
          conversions:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[23][0]++, parseFloat(metric.metrics.conversions)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[23][1]++, 0),
          ctr:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[24][0]++, parseFloat(metric.metrics.ctr)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[24][1]++, 0),
          average_cpc:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[25][0]++, parseInt(metric.metrics.average_cpc)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[25][1]++, 0),
          cost_per_conversion: metric.metrics.conversions > 0 ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[26][0]++, parseInt(metric.metrics.cost_micros) / parseFloat(metric.metrics.conversions) / 1000000) :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[26][1]++, undefined),
          date: metric.segments.date
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[96]++;
      logger_1.logger.error('Failed to get campaign metrics', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[97]++;
      throw new errors_1.ApiError('Failed to retrieve campaign metrics', 'CAMPAIGN_METRICS_FAILED', 400);
    }
  }
  /**
   * Get search terms report
   */
  async getSearchTermsReport(userId, customerId, dateRange) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[17]++;
    cov_1av6fuuarn().s[98]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[99]++, await this.getGoogleAdsClient(userId));
      let dateFilter =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[100]++, '');
      /* istanbul ignore next */
      cov_1av6fuuarn().s[101]++;
      if (dateRange) {
        /* istanbul ignore next */
        cov_1av6fuuarn().b[27][0]++;
        cov_1av6fuuarn().s[102]++;
        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;
      } else
      /* istanbul ignore next */
      {
        cov_1av6fuuarn().b[27][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[103]++, `
        SELECT 
          search_term_view.search_term,
          metrics.impressions,
          metrics.clicks,
          metrics.cost_micros,
          metrics.conversions,
          campaign.id,
          ad_group.id,
          ad_group_criterion.criterion_id
        FROM search_term_view
        WHERE search_term_view.status != 'NONE' ${dateFilter}
        ORDER BY metrics.impressions DESC
      `);
      const searchTerms =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[104]++, await client.Customer({
        customer_id: customerId
      }).report({
        query
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[105]++;
      return searchTerms.map(term => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[18]++;
        cov_1av6fuuarn().s[106]++;
        return {
          search_term: term.search_term_view.search_term,
          impressions:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[28][0]++, parseInt(term.metrics.impressions)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[28][1]++, 0),
          clicks:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[29][0]++, parseInt(term.metrics.clicks)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[29][1]++, 0),
          cost_micros:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[30][0]++, parseInt(term.metrics.cost_micros)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[30][1]++, 0),
          conversions:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[31][0]++, parseFloat(term.metrics.conversions)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[31][1]++, 0),
          campaign_id: term.campaign.id.toString(),
          ad_group_id: term.ad_group.id.toString(),
          keyword_id: term.ad_group_criterion?.criterion_id?.toString()
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[107]++;
      logger_1.logger.error('Failed to get search terms report', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[108]++;
      throw new errors_1.ApiError('Failed to retrieve search terms report', 'SEARCH_TERMS_FAILED', 400);
    }
  }
  /**
   * Sync user data from Google Ads
   */
  async syncUserData(userId, force =
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[32][0]++, false)) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[19]++;
    cov_1av6fuuarn().s[109]++;
    try {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[110]++;
      logger_1.logger.info(`Starting Google Ads sync for user ${userId}`);
      const accounts =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[111]++, await this.getCustomerAccounts(userId));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[112]++;
      for (const account of accounts) {
        /* istanbul ignore next */
        cov_1av6fuuarn().s[113]++;
        if (account.type === 'CLIENT') {
          /* istanbul ignore next */
          cov_1av6fuuarn().b[33][0]++;
          cov_1av6fuuarn().s[114]++;
          // Only sync client accounts, not manager accounts
          await this.syncAccountData(userId, account);
        } else
        /* istanbul ignore next */
        {
          cov_1av6fuuarn().b[33][1]++;
        }
      }
      // Update last sync timestamp
      /* istanbul ignore next */
      cov_1av6fuuarn().s[115]++;
      await this.prisma.integration.update({
        where: {
          userId_platform: {
            userId,
            platform: 'GOOGLE_ADS'
          }
        },
        data: {
          lastSync: new Date()
        }
      });
      /* istanbul ignore next */
      cov_1av6fuuarn().s[116]++;
      logger_1.logger.info(`Completed Google Ads sync for user ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[117]++;
      logger_1.logger.error(`Failed to sync Google Ads data for user ${userId}`, error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[118]++;
      throw error;
    }
  }
  /**
   * Sync data for a specific account
   */
  async syncAccountData(userId, account) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[20]++;
    cov_1av6fuuarn().s[119]++;
    try {
      // Sync campaigns
      const campaigns =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[120]++, await this.getCampaigns(userId, account.id));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[121]++;
      for (const campaign of campaigns) {
        /* istanbul ignore next */
        cov_1av6fuuarn().s[122]++;
        await this.storeCampaignData(userId, account, campaign);
        // Sync keywords for this campaign
        const keywords =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[123]++, await this.getKeywords(userId, account.id, [campaign.id]));
        /* istanbul ignore next */
        cov_1av6fuuarn().s[124]++;
        for (const keyword of keywords) {
          /* istanbul ignore next */
          cov_1av6fuuarn().s[125]++;
          await this.storeKeywordData(userId, keyword);
        }
        // Sync metrics for the last 30 days
        const endDate =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[126]++, new Date().toISOString().split('T')[0]);
        const startDate =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[127]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]);
        const metrics =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[128]++, await this.getCampaignMetrics(userId, account.id, {
          startDate,
          endDate
        }));
        /* istanbul ignore next */
        cov_1av6fuuarn().s[129]++;
        for (const metric of metrics) {
          /* istanbul ignore next */
          cov_1av6fuuarn().s[130]++;
          await this.storeCampaignMetrics(userId, metric);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[131]++;
      logger_1.logger.error(`Failed to sync account data for ${account.id}`, error);
    }
  }
  /**
   * Store campaign data in database
   */
  async storeCampaignData(userId, account, campaign) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[21]++;
    cov_1av6fuuarn().s[132]++;
    await this.prisma.campaign.upsert({
      where: {
        externalId_platform: {
          externalId: campaign.id,
          platform: 'GOOGLE_ADS'
        }
      },
      update: {
        name: campaign.name,
        status: campaign.status,
        type: campaign.type,
        startDate: campaign.start_date ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[34][0]++, new Date(campaign.start_date)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[34][1]++, null),
        endDate: campaign.end_date ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[35][0]++, new Date(campaign.end_date)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[35][1]++, null),
        budget: campaign.budget_amount,
        updatedAt: new Date()
      },
      create: {
        externalId: campaign.id,
        platform: 'GOOGLE_ADS',
        userId,
        accountId: account.id,
        name: campaign.name,
        status: campaign.status,
        type: campaign.type,
        startDate: campaign.start_date ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[36][0]++, new Date(campaign.start_date)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[36][1]++, null),
        endDate: campaign.end_date ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[37][0]++, new Date(campaign.end_date)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[37][1]++, null),
        budget: campaign.budget_amount,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
  }
  /**
   * Store keyword data in database
   */
  async storeKeywordData(userId, keyword) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[22]++;
    cov_1av6fuuarn().s[133]++;
    await this.prisma.keyword.upsert({
      where: {
        externalId_platform: {
          externalId: keyword.id,
          platform: 'GOOGLE_ADS'
        }
      },
      update: {
        text: keyword.text,
        matchType: keyword.match_type,
        status: keyword.status,
        qualityScore: keyword.quality_score,
        firstPageCpc: keyword.first_page_cpc,
        topOfPageCpc: keyword.top_of_page_cpc,
        updatedAt: new Date()
      },
      create: {
        externalId: keyword.id,
        platform: 'GOOGLE_ADS',
        userId,
        campaignId: keyword.campaign_id,
        adGroupId: keyword.ad_group_id,
        text: keyword.text,
        matchType: keyword.match_type,
        status: keyword.status,
        qualityScore: keyword.quality_score,
        firstPageCpc: keyword.first_page_cpc,
        topOfPageCpc: keyword.top_of_page_cpc,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
  }
  /**
   * Store campaign metrics in database
   */
  async storeCampaignMetrics(userId, metrics) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[23]++;
    cov_1av6fuuarn().s[134]++;
    await this.prisma.campaignMetrics.upsert({
      where: {
        campaignId_date_platform: {
          campaignId: metrics.campaign_id,
          date: new Date(metrics.date),
          platform: 'GOOGLE_ADS'
        }
      },
      update: {
        impressions: metrics.impressions,
        clicks: metrics.clicks,
        cost: metrics.cost_micros / 1000000,
        // Convert micros to currency
        conversions: metrics.conversions,
        ctr: metrics.ctr,
        averageCpc: metrics.average_cpc / 1000000,
        // Convert micros to currency
        costPerConversion: metrics.cost_per_conversion,
        updatedAt: new Date()
      },
      create: {
        campaignId: metrics.campaign_id,
        platform: 'GOOGLE_ADS',
        userId,
        date: new Date(metrics.date),
        impressions: metrics.impressions,
        clicks: metrics.clicks,
        cost: metrics.cost_micros / 1000000,
        conversions: metrics.conversions,
        ctr: metrics.ctr,
        averageCpc: metrics.average_cpc / 1000000,
        costPerConversion: metrics.cost_per_conversion,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
  }
  /**
   * Disconnect Google Ads integration
   */
  async disconnectIntegration(userId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[24]++;
    cov_1av6fuuarn().s[135]++;
    await this.prisma.integration.update({
      where: {
        userId_platform: {
          userId,
          platform: 'GOOGLE_ADS'
        }
      },
      data: {
        isActive: false,
        accessToken: null,
        refreshToken: null,
        expiresAt: null
      }
    });
    // Remove cached client
    const cacheKey =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[136]++, `google-ads-client-${userId}`);
    /* istanbul ignore next */
    cov_1av6fuuarn().s[137]++;
    this.googleAdsClients.delete(cacheKey);
    /* istanbul ignore next */
    cov_1av6fuuarn().s[138]++;
    logger_1.logger.info(`Disconnected Google Ads integration for user ${userId}`);
  }
  /**
   * Scheduled sync job - runs every 30 minutes
   */
  async scheduledSync() {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[25]++;
    cov_1av6fuuarn().s[139]++;
    logger_1.logger.info('Starting scheduled Google Ads sync');
    /* istanbul ignore next */
    cov_1av6fuuarn().s[140]++;
    try {
      const activeIntegrations =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[141]++, await this.prisma.integration.findMany({
        where: {
          platform: 'GOOGLE_ADS',
          isActive: true
        },
        select: {
          userId: true,
          lastSync: true
        }
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[142]++;
      for (const integration of activeIntegrations) {
        /* istanbul ignore next */
        cov_1av6fuuarn().s[143]++;
        try {
          // Only sync if last sync was more than 25 minutes ago (to avoid overlapping)
          const lastSyncThreshold =
          /* istanbul ignore next */
          (cov_1av6fuuarn().s[144]++, new Date(Date.now() - 25 * 60 * 1000));
          /* istanbul ignore next */
          cov_1av6fuuarn().s[145]++;
          if (
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[39][0]++, !integration.lastSync) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[39][1]++, integration.lastSync < lastSyncThreshold)) {
            /* istanbul ignore next */
            cov_1av6fuuarn().b[38][0]++;
            cov_1av6fuuarn().s[146]++;
            await this.syncUserData(integration.userId);
            /* istanbul ignore next */
            cov_1av6fuuarn().s[147]++;
            await this.delay(2000); // Rate limiting between users
          } else
          /* istanbul ignore next */
          {
            cov_1av6fuuarn().b[38][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1av6fuuarn().s[148]++;
          logger_1.logger.error(`Failed to sync user ${integration.userId}`, error);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[149]++;
      logger_1.logger.error('Failed to run scheduled sync', error);
    }
  }
  /**
   * Utility method to add delay
   */
  delay(ms) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[26]++;
    cov_1av6fuuarn().s[150]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1av6fuuarn().f[27]++;
      cov_1av6fuuarn().s[151]++;
      return setTimeout(resolve, ms);
    });
  }
  /**
   * Clear cached clients (useful for testing or memory management)
   */
  clearClientCache() {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[28]++;
    cov_1av6fuuarn().s[152]++;
    this.googleAdsClients.clear();
  }
}
/* istanbul ignore next */
cov_1av6fuuarn().s[153]++;
exports.GoogleAdsService = GoogleAdsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,