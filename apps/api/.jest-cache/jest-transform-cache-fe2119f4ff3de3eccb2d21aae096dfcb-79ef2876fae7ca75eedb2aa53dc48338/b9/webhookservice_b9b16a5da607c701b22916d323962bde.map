{"version":3,"names":["cov_1auaghvgeg","actualCoverage","logger","ApiError","getQueueManager","crypto","axios","WebhookService","db","constructor","f","s","processIncomingWebhook","webhookData","signature","b","isValid","validateWebhookSignature","provider","payload","warn","sourceIp","organizationId","findOrganizationForWebhook","webhook","create","data","eventType","headers","userAgent","status","queueManager","addJob","webhookId","id","info","error","validateMetaSignature","validateStripeSignature","secret","process","env","META_WEBHOOK_SECRET","expectedSignature","createHmac","update","JSON","stringify","digest","timingSafeEqual","Buffer","from","STRIPE_WEBHOOK_SECRET","elements","split","signatureHash","find","el","startsWith","timestamp","organization","findFirst","where","isActive","select","createWebhookConfig","configData","config","webhookConfig","name","url","eventTypes","timeout","configId","getWebhookConfigs","configs","findMany","orderBy","createdAt","updateWebhookConfig","updateData","updateMany","count","updatedConfig","findUnique","deleteWebhookConfig","result","deleteMany","getWebhookLogs","filters","isSuccess","limit","offset","logs","total","Promise","all","webhookLog","take","skip","statusCode","responseTime","attempt","hasMore","sendOutgoingWebhook","has","sendWebhookToEndpoint","startTime","Date","now","logData","response","post","validateStatus","responseBody","substring","totalSent","increment","lastSentAt","totalFailed","lastFailedAt","delay","errorMessage","Error","message","sendTestWebhook","testData","test","toISOString","generateTestPayload","log","logId","retryWebhook","include","newLog","baseData","conversion","campaignId","value","currency","goal","target","current","percentage","budget","budgetLimit","currentSpend","campaign","reason","pausedAt"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\webhook.service.ts"],"sourcesContent":["import { PrismaClient } from '@utmify/database';\nimport { logger } from '../utils/logger';\nimport { ApiError } from '../utils/errors';\nimport { getQueueManager } from '../queue';\nimport crypto from 'crypto';\nimport axios from 'axios';\n\nexport interface IncomingWebhookData {\n  provider: 'META_ADS' | 'GOOGLE_ADS' | 'STRIPE' | 'PAYPAL' | 'WHATSAPP';\n  signature?: string;\n  payload: any;\n  headers: Record<string, any>;\n  sourceIp?: string;\n  userAgent?: string;\n}\n\nexport interface WebhookConfigData {\n  name: string;\n  url: string;\n  eventTypes: ('NEW_CONVERSION' | 'GOAL_REACHED' | 'BUDGET_EXCEEDED' | 'CAMPAIGN_PAUSED')[];\n  secret?: string;\n  headers?: Record<string, string>;\n  timeout?: number;\n  isActive?: boolean;\n}\n\nexport interface OutgoingWebhookData {\n  eventType: 'NEW_CONVERSION' | 'GOAL_REACHED' | 'BUDGET_EXCEEDED' | 'CAMPAIGN_PAUSED';\n  organizationId: string;\n  data: any;\n  timestamp: Date;\n}\n\nexport class WebhookService {\n  constructor(private db: PrismaClient) {}\n\n  /**\n   * Process incoming webhook from external providers\n   */\n  async processIncomingWebhook(webhookData: IncomingWebhookData): Promise<void> {\n    try {\n      // Validate signature if provided\n      if (webhookData.signature) {\n        const isValid = await this.validateWebhookSignature(\n          webhookData.provider,\n          webhookData.payload,\n          webhookData.signature\n        );\n        \n        if (!isValid) {\n          logger.warn('Invalid webhook signature', {\n            provider: webhookData.provider,\n            sourceIp: webhookData.sourceIp,\n          });\n          throw new ApiError('Invalid signature', 'INVALID_SIGNATURE', 401);\n        }\n      }\n\n      // Find organization based on webhook configuration or payload\n      const organizationId = await this.findOrganizationForWebhook(webhookData);\n      \n      if (!organizationId) {\n        logger.warn('No organization found for webhook', {\n          provider: webhookData.provider,\n          sourceIp: webhookData.sourceIp,\n        });\n        return;\n      }\n\n      // Store webhook in database\n      const webhook = await this.db.webhook.create({\n        data: {\n          organizationId,\n          eventType: 'INCOMING',\n          provider: webhookData.provider,\n          payload: webhookData.payload,\n          headers: webhookData.headers,\n          sourceIp: webhookData.sourceIp,\n          userAgent: webhookData.userAgent,\n          signature: webhookData.signature,\n          status: 'PENDING',\n        },\n      });\n\n      // Add to processing queue\n      const queueManager = getQueueManager();\n      await queueManager.addJob('webhook-processing', {\n        webhookId: webhook.id,\n        provider: webhookData.provider,\n        payload: webhookData.payload,\n      });\n\n      logger.info('Incoming webhook queued for processing', {\n        webhookId: webhook.id,\n        provider: webhookData.provider,\n        organizationId,\n      });\n    } catch (error) {\n      logger.error('Error processing incoming webhook:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate webhook signature based on provider\n   */\n  private async validateWebhookSignature(\n    provider: string,\n    payload: any,\n    signature: string\n  ): Promise<boolean> {\n    try {\n      switch (provider) {\n        case 'META_ADS':\n        case 'WHATSAPP':\n          return this.validateMetaSignature(payload, signature);\n        case 'STRIPE':\n          return this.validateStripeSignature(payload, signature);\n        case 'GOOGLE_ADS':\n          // Google uses different authentication method\n          return true;\n        default:\n          return false;\n      }\n    } catch (error) {\n      logger.error('Error validating webhook signature:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Validate Meta/WhatsApp webhook signature\n   */\n  private validateMetaSignature(payload: any, signature: string): boolean {\n    const secret = process.env.META_WEBHOOK_SECRET;\n    if (!secret) {\n      logger.warn('Meta webhook secret not configured');\n      return false;\n    }\n\n    const expectedSignature = 'sha256=' + crypto\n      .createHmac('sha256', secret)\n      .update(JSON.stringify(payload))\n      .digest('hex');\n\n    return crypto.timingSafeEqual(\n      Buffer.from(signature),\n      Buffer.from(expectedSignature)\n    );\n  }\n\n  /**\n   * Validate Stripe webhook signature\n   */\n  private validateStripeSignature(payload: any, signature: string): boolean {\n    const secret = process.env.STRIPE_WEBHOOK_SECRET;\n    if (!secret) {\n      logger.warn('Stripe webhook secret not configured');\n      return false;\n    }\n\n    try {\n      const elements = signature.split(',');\n      const signatureHash = elements.find(el => el.startsWith('v1='))?.split('=')[1];\n      const timestamp = elements.find(el => el.startsWith('t='))?.split('=')[1];\n\n      if (!signatureHash || !timestamp) {\n        return false;\n      }\n\n      const expectedSignature = crypto\n        .createHmac('sha256', secret)\n        .update(timestamp + '.' + JSON.stringify(payload))\n        .digest('hex');\n\n      return crypto.timingSafeEqual(\n        Buffer.from(signatureHash),\n        Buffer.from(expectedSignature)\n      );\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Find organization for incoming webhook\n   */\n  private async findOrganizationForWebhook(\n    webhookData: IncomingWebhookData\n  ): Promise<string | null> {\n    // This is a simplified implementation\n    // In a real scenario, you'd need to map webhook data to organizations\n    // based on account IDs, API keys, or other identifiers in the payload\n    \n    try {\n      // For now, return the first active organization\n      // TODO: Implement proper organization mapping based on webhook payload\n      const organization = await this.db.organization.findFirst({\n        where: { isActive: true },\n        select: { id: true },\n      });\n      \n      return organization?.id || null;\n    } catch (error) {\n      logger.error('Error finding organization for webhook:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Create webhook configuration\n   */\n  async createWebhookConfig(\n    organizationId: string,\n    configData: WebhookConfigData\n  ): Promise<any> {\n    try {\n      const config = await this.db.webhookConfig.create({\n        data: {\n          organizationId,\n          name: configData.name,\n          url: configData.url,\n          eventTypes: configData.eventTypes,\n          secret: configData.secret,\n          headers: configData.headers,\n          timeout: configData.timeout || 30,\n          isActive: configData.isActive ?? true,\n        },\n      });\n\n      logger.info('Webhook configuration created', {\n        configId: config.id,\n        organizationId,\n        url: configData.url,\n      });\n\n      return config;\n    } catch (error) {\n      logger.error('Error creating webhook config:', error);\n      throw new ApiError('Failed to create webhook configuration', 'WEBHOOK_CONFIG_ERROR', 500);\n    }\n  }\n\n  /**\n   * Get webhook configurations for organization\n   */\n  async getWebhookConfigs(organizationId: string): Promise<any[]> {\n    try {\n      const configs = await this.db.webhookConfig.findMany({\n        where: { organizationId },\n        orderBy: { createdAt: 'desc' },\n      });\n\n      return configs;\n    } catch (error) {\n      logger.error('Error getting webhook configs:', error);\n      throw new ApiError('Failed to get webhook configurations', 'WEBHOOK_CONFIGS_ERROR', 500);\n    }\n  }\n\n  /**\n   * Update webhook configuration\n   */\n  async updateWebhookConfig(\n    organizationId: string,\n    configId: string,\n    updateData: Partial<WebhookConfigData>\n  ): Promise<any> {\n    try {\n      const config = await this.db.webhookConfig.updateMany({\n        where: {\n          id: configId,\n          organizationId,\n        },\n        data: updateData,\n      });\n\n      if (config.count === 0) {\n        throw new ApiError('Webhook configuration not found', 'WEBHOOK_CONFIG_NOT_FOUND', 404);\n      }\n\n      const updatedConfig = await this.db.webhookConfig.findUnique({\n        where: { id: configId },\n      });\n\n      logger.info('Webhook configuration updated', {\n        configId,\n        organizationId,\n      });\n\n      return updatedConfig;\n    } catch (error) {\n      logger.error('Error updating webhook config:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete webhook configuration\n   */\n  async deleteWebhookConfig(organizationId: string, configId: string): Promise<void> {\n    try {\n      const result = await this.db.webhookConfig.deleteMany({\n        where: {\n          id: configId,\n          organizationId,\n        },\n      });\n\n      if (result.count === 0) {\n        throw new ApiError('Webhook configuration not found', 'WEBHOOK_CONFIG_NOT_FOUND', 404);\n      }\n\n      logger.info('Webhook configuration deleted', {\n        configId,\n        organizationId,\n      });\n    } catch (error) {\n      logger.error('Error deleting webhook config:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get webhook logs\n   */\n  async getWebhookLogs(\n    organizationId: string,\n    filters: {\n      configId?: string;\n      eventType?: string;\n      isSuccess?: boolean;\n      limit?: number;\n      offset?: number;\n    }\n  ): Promise<{ logs: any[]; total: number; hasMore: boolean }> {\n    try {\n      const { configId, eventType, isSuccess, limit = 20, offset = 0 } = filters;\n\n      const where: any = { organizationId };\n      if (configId) where.configId = configId;\n      if (eventType) where.eventType = eventType;\n      if (typeof isSuccess === 'boolean') where.isSuccess = isSuccess;\n\n      const [logs, total] = await Promise.all([\n        this.db.webhookLog.findMany({\n          where,\n          orderBy: { createdAt: 'desc' },\n          take: limit,\n          skip: offset,\n          select: {\n            id: true,\n            url: true,\n            eventType: true,\n            statusCode: true,\n            responseTime: true,\n            isSuccess: true,\n            attempt: true,\n            error: true,\n            createdAt: true,\n          },\n        }),\n        this.db.webhookLog.count({ where }),\n      ]);\n\n      return {\n        logs,\n        total,\n        hasMore: offset + limit < total,\n      };\n    } catch (error) {\n      logger.error('Error getting webhook logs:', error);\n      throw new ApiError('Failed to get webhook logs', 'WEBHOOK_LOGS_ERROR', 500);\n    }\n  }\n\n  /**\n   * Send outgoing webhook\n   */\n  async sendOutgoingWebhook(webhookData: OutgoingWebhookData): Promise<void> {\n    try {\n      // Get all active webhook configurations for this event type\n      const configs = await this.db.webhookConfig.findMany({\n        where: {\n          organizationId: webhookData.organizationId,\n          isActive: true,\n          eventTypes: {\n            has: webhookData.eventType,\n          },\n        },\n      });\n\n      // Send webhook to each configured endpoint\n      for (const config of configs) {\n        await this.sendWebhookToEndpoint(config, webhookData);\n      }\n    } catch (error) {\n      logger.error('Error sending outgoing webhooks:', error);\n    }\n  }\n\n  /**\n   * Send webhook to specific endpoint\n   */\n  private async sendWebhookToEndpoint(\n    config: any,\n    webhookData: OutgoingWebhookData\n  ): Promise<void> {\n    const startTime = Date.now();\n    let logData: any = {\n      organizationId: webhookData.organizationId,\n      configId: config.id,\n      url: config.url,\n      eventType: webhookData.eventType,\n      payload: webhookData.data,\n      headers: config.headers || {},\n    };\n\n    try {\n      // Prepare headers\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n        'User-Agent': 'Utmify-Webhooks/1.0',\n        ...config.headers,\n      };\n\n      // Add HMAC signature if secret is configured\n      if (config.secret) {\n        const signature = crypto\n          .createHmac('sha256', config.secret)\n          .update(JSON.stringify(webhookData.data))\n          .digest('hex');\n        headers['X-Utmify-Signature'] = `sha256=${signature}`;\n      }\n\n      // Send webhook\n      const response = await axios.post(config.url, webhookData.data, {\n        headers,\n        timeout: config.timeout * 1000,\n        validateStatus: () => true, // Don't throw on non-2xx status codes\n      });\n\n      const responseTime = Date.now() - startTime;\n      const isSuccess = response.status >= 200 && response.status < 300;\n\n      // Log the webhook attempt\n      logData = {\n        ...logData,\n        statusCode: response.status,\n        responseBody: response.data ? JSON.stringify(response.data).substring(0, 1000) : null,\n        responseTime,\n        isSuccess,\n      };\n\n      await this.db.webhookLog.create({ data: logData });\n\n      // Update config statistics\n      await this.db.webhookConfig.update({\n        where: { id: config.id },\n        data: {\n          totalSent: { increment: 1 },\n          ...(isSuccess ? { lastSentAt: new Date() } : { totalFailed: { increment: 1 }, lastFailedAt: new Date() }),\n        },\n      });\n\n      if (isSuccess) {\n        logger.info('Webhook sent successfully', {\n          configId: config.id,\n          url: config.url,\n          statusCode: response.status,\n          responseTime,\n        });\n      } else {\n        logger.warn('Webhook failed', {\n          configId: config.id,\n          url: config.url,\n          statusCode: response.status,\n          responseTime,\n        });\n\n        // Add to retry queue if not a client error (4xx)\n        if (response.status >= 500) {\n          const queueManager = getQueueManager();\n          await queueManager.addJob('webhook-retry', {\n            configId: config.id,\n            webhookData,\n            attempt: 1,\n          }, {\n            delay: 1000, // 1 second delay for first retry\n          });\n        }\n      }\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n\n      // Log the failed attempt\n      logData = {\n        ...logData,\n        responseTime,\n        isSuccess: false,\n        error: errorMessage,\n      };\n\n      await this.db.webhookLog.create({ data: logData });\n\n      // Update config statistics\n      await this.db.webhookConfig.update({\n        where: { id: config.id },\n        data: {\n          totalSent: { increment: 1 },\n          totalFailed: { increment: 1 },\n          lastFailedAt: new Date(),\n        },\n      });\n\n      logger.error('Webhook request failed', {\n        configId: config.id,\n        url: config.url,\n        error: errorMessage,\n        responseTime,\n      });\n\n      // Add to retry queue\n      const queueManager = getQueueManager();\n      await queueManager.addJob('webhook-retry', {\n        configId: config.id,\n        webhookData,\n        attempt: 1,\n      }, {\n        delay: 1000, // 1 second delay for first retry\n      });\n    }\n  }\n\n  /**\n   * Send test webhook\n   */\n  async sendTestWebhook(\n    organizationId: string,\n    configId: string,\n    eventType: string\n  ): Promise<any> {\n    try {\n      const config = await this.db.webhookConfig.findFirst({\n        where: {\n          id: configId,\n          organizationId,\n        },\n      });\n\n      if (!config) {\n        throw new ApiError('Webhook configuration not found', 'WEBHOOK_CONFIG_NOT_FOUND', 404);\n      }\n\n      // Create test payload\n      const testData = {\n        eventType,\n        organizationId,\n        data: {\n          test: true,\n          eventType,\n          timestamp: new Date().toISOString(),\n          data: this.generateTestPayload(eventType),\n        },\n        timestamp: new Date(),\n      };\n\n      // Send test webhook\n      await this.sendWebhookToEndpoint(config, testData);\n\n      // Get the latest log for this config\n      const log = await this.db.webhookLog.findFirst({\n        where: {\n          configId,\n          organizationId,\n        },\n        orderBy: { createdAt: 'desc' },\n      });\n\n      return {\n        logId: log?.id,\n        statusCode: log?.statusCode,\n        responseTime: log?.responseTime,\n        isSuccess: log?.isSuccess,\n      };\n    } catch (error) {\n      logger.error('Error sending test webhook:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retry failed webhook\n   */\n  async retryWebhook(organizationId: string, logId: string): Promise<any> {\n    try {\n      const log = await this.db.webhookLog.findFirst({\n        where: {\n          id: logId,\n          organizationId,\n        },\n        include: {\n          config: true,\n        },\n      });\n\n      if (!log || !log.config) {\n        throw new ApiError('Webhook log not found', 'WEBHOOK_LOG_NOT_FOUND', 404);\n      }\n\n      // Recreate webhook data from log\n      const webhookData = {\n        eventType: log.eventType as any,\n        organizationId,\n        data: log.payload,\n        timestamp: new Date(),\n      };\n\n      // Send webhook again\n      await this.sendWebhookToEndpoint(log.config, webhookData);\n\n      // Get the latest log for this config\n      const newLog = await this.db.webhookLog.findFirst({\n        where: {\n          configId: log.configId!,\n          organizationId,\n        },\n        orderBy: { createdAt: 'desc' },\n      });\n\n      return {\n        logId: newLog?.id,\n        statusCode: newLog?.statusCode,\n        responseTime: newLog?.responseTime,\n        isSuccess: newLog?.isSuccess,\n      };\n    } catch (error) {\n      logger.error('Error retrying webhook:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate test payload for different event types\n   */\n  private generateTestPayload(eventType: string): any {\n    const baseData = {\n      organizationId: 'test-org-id',\n      timestamp: new Date().toISOString(),\n    };\n\n    switch (eventType) {\n      case 'NEW_CONVERSION':\n        return {\n          ...baseData,\n          conversion: {\n            id: 'conv_test_123',\n            campaignId: 'camp_test_456',\n            value: 99.99,\n            currency: 'USD',\n            eventType: 'PURCHASE',\n          },\n        };\n      case 'GOAL_REACHED':\n        return {\n          ...baseData,\n          goal: {\n            id: 'goal_test_123',\n            name: 'Monthly Revenue Target',\n            target: 10000,\n            current: 10500,\n            percentage: 105,\n          },\n        };\n      case 'BUDGET_EXCEEDED':\n        return {\n          ...baseData,\n          budget: {\n            campaignId: 'camp_test_456',\n            budgetLimit: 1000,\n            currentSpend: 1050,\n            percentage: 105,\n          },\n        };\n      case 'CAMPAIGN_PAUSED':\n        return {\n          ...baseData,\n          campaign: {\n            id: 'camp_test_456',\n            name: 'Test Campaign',\n            reason: 'Budget exceeded',\n            pausedAt: new Date().toISOString(),\n          },\n        };\n      default:\n        return baseData;\n    }\n  }\n}"],"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","ignoreList":[]}