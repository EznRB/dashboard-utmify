{"version":3,"names":["cov_10e3wbyie3","actualCoverage","Queue","Worker","Redis","redisConfig","logger","MetricsService","QUEUE_NAMES","s","CONVERSION_EVENTS","METRICS_CALCULATION","DATA_EXPORT","CAMPAIGN_SYNC","NOTIFICATIONS","WEBHOOK_PROCESSING","WEBHOOK_RETRY","WEBHOOK_DLQ","redisConnection","getRedisConnection","f","b","on","error","info","defaultQueueOptions","connection","defaultJobOptions","removeOnComplete","removeOnFail","attempts","backoff","type","delay","QueueManager","instance","queues","Map","workers","prisma","metricsService","constructor","getInstance","Error","initialize","initializeQueues","initializeWorkers","queueConfigs","name","options","config","queue","set","workerConfigs","processor","processConversionEvent","bind","concurrency","processMetricsCalculation","processDataExport","processCampaignSync","processNotification","processWebhook","processWebhookRetry","processWebhookDLQ","workerOptions","worker","job","id","err","eventId","campaignId","organizationId","eventType","eventData","timestamp","data","conversionEvent","create","Date","createdAt","updateRealTimeMetrics","dateRange","metricsTypes","startDate","endDate","metrics","calculateMetrics","campaignIds","userId","exportType","filters","email","fileName","platform","syncType","template","addJob","queueName","jobData","get","add","getQueue","getWorker","getHealthStatus","queuesStatus","overallHealthy","waiting","getWaiting","active","getActive","completed","getCompleted","failed","getFailed","length","status","processIncomingWebhook","retryWebhook","handleDeadLetterWebhook","shutdown","close","quit","getQueueManager"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\queue\\index.ts"],"sourcesContent":["import { Queue, Worker, QueueOptions, Job } from 'bull';\nimport { Redis } from 'ioredis';\nimport { redisConfig } from '../config/env';\nimport { logger } from '../utils/logger';\nimport { PrismaService } from '../database/prisma.service';\nimport { MetricsService } from '../services/metrics.service';\n\n// Queue names\nexport const QUEUE_NAMES = {\n  CONVERSION_EVENTS: 'conversion-events',\n  METRICS_CALCULATION: 'metrics-calculation',\n  DATA_EXPORT: 'data-export',\n  CAMPAIGN_SYNC: 'campaign-sync',\n  NOTIFICATIONS: 'notifications',\n  WEBHOOK_PROCESSING: 'webhook-processing',\n  WEBHOOK_RETRY: 'webhook-retry',\n  WEBHOOK_DLQ: 'webhook-dlq',\n} as const;\n\n// Job types\nexport interface ConversionEventJobData {\n  eventId: string;\n  campaignId: string;\n  organizationId: string;\n  eventType: 'CLICK' | 'CONVERSION' | 'VIEW';\n  eventData: Record<string, any>;\n  timestamp: string;\n}\n\nexport interface MetricsCalculationJobData {\n  campaignId: string;\n  organizationId: string;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  metricsTypes: string[];\n  priority?: 'low' | 'normal' | 'high';\n}\n\nexport interface DataExportJobData {\n  userId: string;\n  organizationId: string;\n  exportType: 'CSV' | 'XLSX' | 'PDF';\n  filters: Record<string, any>;\n  email: string;\n  fileName: string;\n}\n\nexport interface CampaignSyncJobData {\n  campaignId: string;\n  organizationId: string;\n  platform: 'META' | 'GOOGLE' | 'TIKTOK';\n  syncType: 'FULL' | 'INCREMENTAL';\n  lastSyncAt?: string;\n}\n\nexport interface NotificationJobData {\n  userId: string;\n  organizationId: string;\n  type: 'EMAIL' | 'SMS' | 'PUSH' | 'SLACK';\n  template: string;\n  data: Record<string, any>;\n  priority?: 'low' | 'normal' | 'high';\n}\n\nexport interface WebhookProcessingJobData {\n  webhookId: string;\n  provider: 'META_ADS' | 'GOOGLE_ADS' | 'STRIPE' | 'PAYPAL' | 'WHATSAPP';\n  payload: any;\n}\n\nexport interface WebhookRetryJobData {\n  configId: string;\n  webhookData: any;\n  attempt: number;\n}\n\nexport interface WebhookDLQJobData {\n  configId: string;\n  webhookData: any;\n  finalAttempt: number;\n  error: string;\n  failedAt: string;\n}\n\n// Redis connection\nlet redisConnection: Redis | null = null;\n\nexport function getRedisConnection(): Redis {\n  if (!redisConnection) {\n    redisConnection = new Redis(redisConfig);\n\n    redisConnection.on('error', (error) => {\n      logger.error('Redis connection error:', error);\n    });\n\n    redisConnection.on('connect', () => {\n      logger.info('Redis connected successfully');\n    });\n  }\n\n  return redisConnection;\n}\n\n// Queue configuration\nconst defaultQueueOptions: QueueOptions = {\n  connection: getRedisConnection(),\n  defaultJobOptions: {\n    removeOnComplete: 100, // Keep last 100 completed jobs\n    removeOnFail: 50, // Keep last 50 failed jobs\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 2000,\n    },\n  },\n};\n\n// Queue Manager\nexport class QueueManager {\n  private static instance: QueueManager;\n  private queues: Map<string, Queue> = new Map();\n  private workers: Map<string, Worker> = new Map();\n  private prisma: PrismaService;\n  private metricsService: MetricsService;\n\n  private constructor(prisma: PrismaService) {\n    this.prisma = prisma;\n    this.metricsService = new MetricsService(prisma);\n  }\n\n  public static getInstance(prisma?: PrismaService): QueueManager {\n    if (!QueueManager.instance) {\n      if (!prisma) {\n        throw new Error('Prisma instance is required for first initialization');\n      }\n      QueueManager.instance = new QueueManager(prisma);\n    }\n    return QueueManager.instance;\n  }\n\n  // Initialize all queues and workers\n  public async initialize(): Promise<void> {\n    try {\n      logger.info('Initializing queue system...');\n\n      // Initialize queues\n      await this.initializeQueues();\n\n      // Initialize workers\n      await this.initializeWorkers();\n\n      logger.info('Queue system initialized successfully');\n    } catch (error) {\n      logger.error('Failed to initialize queue system:', error);\n      throw error;\n    }\n  }\n\n  // Initialize all queues\n  private async initializeQueues(): Promise<void> {\n    const queueConfigs = [\n      { name: QUEUE_NAMES.CONVERSION_EVENTS, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.METRICS_CALCULATION, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.DATA_EXPORT, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.CAMPAIGN_SYNC, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.NOTIFICATIONS, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.WEBHOOK_PROCESSING, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.WEBHOOK_RETRY, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.WEBHOOK_DLQ, options: { ...defaultQueueOptions } },\n    ];\n\n    for (const config of queueConfigs) {\n      const queue = new Queue(config.name, config.options);\n      this.queues.set(config.name, queue);\n      logger.info(`Queue '${config.name}' initialized`);\n    }\n  }\n\n  // Initialize all workers\n  private async initializeWorkers(): Promise<void> {\n    const workerConfigs = [\n      {\n        name: QUEUE_NAMES.CONVERSION_EVENTS,\n        processor: this.processConversionEvent.bind(this),\n        options: { concurrency: 10 },\n      },\n      {\n        name: QUEUE_NAMES.METRICS_CALCULATION,\n        processor: this.processMetricsCalculation.bind(this),\n        options: { concurrency: 5 },\n      },\n      {\n        name: QUEUE_NAMES.DATA_EXPORT,\n        processor: this.processDataExport.bind(this),\n        options: { concurrency: 2 },\n      },\n      {\n        name: QUEUE_NAMES.CAMPAIGN_SYNC,\n        processor: this.processCampaignSync.bind(this),\n        options: { concurrency: 3 },\n      },\n      {\n        name: QUEUE_NAMES.NOTIFICATIONS,\n        processor: this.processNotification.bind(this),\n        options: { concurrency: 10 },\n      },\n      {\n        name: QUEUE_NAMES.WEBHOOK_PROCESSING,\n        processor: this.processWebhook.bind(this),\n        options: { concurrency: 5 },\n      },\n      {\n        name: QUEUE_NAMES.WEBHOOK_RETRY,\n        processor: this.processWebhookRetry.bind(this),\n        options: { concurrency: 3 },\n      },\n      {\n        name: QUEUE_NAMES.WEBHOOK_DLQ,\n        processor: this.processWebhookDLQ.bind(this),\n        options: { concurrency: 1 },\n      },\n    ];\n\n    for (const config of workerConfigs) {\n      const workerOptions: WorkerOptions = {\n        connection: getRedisConnection(),\n        concurrency: config.options.concurrency,\n      };\n\n      const worker = new Worker(config.name, config.processor, workerOptions);\n      \n      // Add event listeners\n      worker.on('completed', (job) => {\n        logger.info(`Job ${job.id} in queue '${config.name}' completed`);\n      });\n\n      worker.on('failed', (job, err) => {\n        logger.error(`Job ${job?.id} in queue '${config.name}' failed:`, err);\n      });\n\n      worker.on('error', (err) => {\n        logger.error(`Worker error in queue '${config.name}':`, err);\n      });\n\n      this.workers.set(config.name, worker);\n      logger.info(`Worker for queue '${config.name}' initialized`);\n    }\n  }\n\n  // Job processors\n  private async processConversionEvent(job: Job<ConversionEventJobData>): Promise<void> {\n    const { eventId, campaignId, organizationId, eventType, eventData, timestamp } = job.data;\n    \n    try {\n      // Store conversion event\n      await this.prisma.conversionEvent.create({\n        data: {\n          id: eventId,\n          campaignId,\n          eventType,\n          eventData,\n          timestamp: new Date(timestamp),\n          createdAt: new Date(),\n        },\n      });\n\n      // Update real-time metrics\n      await this.metricsService.updateRealTimeMetrics(campaignId, eventType, eventData);\n\n      logger.info(`Conversion event ${eventId} processed successfully`);\n    } catch (error) {\n      logger.error(`Failed to process conversion event ${eventId}:`, error);\n      throw error;\n    }\n  }\n\n  private async processMetricsCalculation(job: Job<MetricsCalculationJobData>): Promise<void> {\n    const { campaignId, organizationId, dateRange, metricsTypes } = job.data;\n    \n    try {\n      const startDate = new Date(dateRange.startDate);\n      const endDate = new Date(dateRange.endDate);\n\n      // Calculate metrics for the specified date range\n      const metrics = await this.metricsService.calculateMetrics({\n        campaignIds: [campaignId],\n        startDate,\n        endDate,\n        metricsTypes,\n      });\n\n      logger.info(`Metrics calculation for campaign ${campaignId} completed`);\n    } catch (error) {\n      logger.error(`Failed to calculate metrics for campaign ${campaignId}:`, error);\n      throw error;\n    }\n  }\n\n  private async processDataExport(job: Job<DataExportJobData>): Promise<void> {\n    const { userId, organizationId, exportType, filters, email, fileName } = job.data;\n    \n    try {\n      // TODO: Implement data export logic\n      logger.info(`Data export ${fileName} for user ${userId} completed`);\n    } catch (error) {\n      logger.error(`Failed to export data for user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  private async processCampaignSync(job: Job<CampaignSyncJobData>): Promise<void> {\n    const { campaignId, organizationId, platform, syncType } = job.data;\n    \n    try {\n      // TODO: Implement campaign sync logic\n      logger.info(`Campaign sync ${campaignId} from ${platform} completed`);\n    } catch (error) {\n      logger.error(`Failed to sync campaign ${campaignId}:`, error);\n      throw error;\n    }\n  }\n\n  private async processNotification(job: Job<NotificationJobData>): Promise<void> {\n    const { userId, organizationId, type, template, data } = job.data;\n    \n    try {\n      // TODO: Implement notification logic\n      logger.info(`Notification ${type} for user ${userId} sent`);\n    } catch (error) {\n      logger.error(`Failed to send notification to user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  // Queue operations\n  public async addJob<T>(\n    queueName: string,\n    jobData: T,\n    options?: {\n      priority?: number;\n      delay?: number;\n      repeat?: { cron: string };\n    }\n  ): Promise<Job<T>> {\n    const queue = this.queues.get(queueName);\n    if (!queue) {\n      throw new Error(`Queue '${queueName}' not found`);\n    }\n\n    return queue.add(`${queueName}-job`, jobData, options);\n  }\n\n  public getQueue(name: string): Queue | undefined {\n    return this.queues.get(name);\n  }\n\n  public getWorker(name: string): Worker | undefined {\n    return this.workers.get(name);\n  }\n\n  // Health check\n  public async getHealthStatus(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    queues: Record<string, { waiting: number; active: number; completed: number; failed: number }>;\n  }> {\n    const queuesStatus: Record<string, any> = {};\n    let overallHealthy = true;\n\n    for (const [name, queue] of this.queues) {\n      try {\n        const waiting = await queue.getWaiting();\n        const active = await queue.getActive();\n        const completed = await queue.getCompleted();\n        const failed = await queue.getFailed();\n\n        queuesStatus[name] = {\n          waiting: waiting.length,\n          active: active.length,\n          completed: completed.length,\n          failed: failed.length,\n        };\n      } catch (error) {\n        logger.error(`Failed to get status for queue '${name}':`, error);\n        queuesStatus[name] = { error: 'Failed to get status' };\n        overallHealthy = false;\n      }\n    }\n\n    return {\n      status: overallHealthy ? 'healthy' : 'unhealthy',\n      queues: queuesStatus,\n    };\n  }\n\n  // Webhook processing methods\n  private async processWebhook(job: Job<WebhookProcessingJobData>): Promise<void> {\n    const { processIncomingWebhook } = await import('../workers/webhook.worker');\n    return processIncomingWebhook(job);\n  }\n\n  private async processWebhookRetry(job: Job<WebhookRetryJobData>): Promise<void> {\n    const { retryWebhook } = await import('../workers/webhook.worker');\n    return retryWebhook(job);\n  }\n\n  private async processWebhookDLQ(job: Job<WebhookDLQJobData>): Promise<void> {\n    const { handleDeadLetterWebhook } = await import('../workers/webhook.worker');\n    return handleDeadLetterWebhook(job);\n  }\n\n  // Shutdown\n  public async shutdown(): Promise<void> {\n    logger.info('Shutting down queue system...');\n\n    // Close all workers\n    for (const [name, worker] of this.workers) {\n      try {\n        await worker.close();\n        logger.info(`Worker '${name}' closed`);\n      } catch (error) {\n        logger.error(`Failed to close worker '${name}':`, error);\n      }\n    }\n\n    // Close all queues\n    for (const [name, queue] of this.queues) {\n      try {\n        await queue.close();\n        logger.info(`Queue '${name}' closed`);\n      } catch (error) {\n        logger.error(`Failed to close queue '${name}':`, error);\n      }\n    }\n\n    // Close Redis connection\n    if (redisConnection) {\n      await redisConnection.quit();\n      redisConnection = null;\n      logger.info('Redis connection closed');\n    }\n\n    logger.info('Queue system shutdown completed');\n  }\n}\n\n// Export singleton getter\nexport function getQueueManager(prisma?: PrismaService): QueueManager {\n  return QueueManager.getInstance(prisma);\n}"],"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","ignoreList":[]}