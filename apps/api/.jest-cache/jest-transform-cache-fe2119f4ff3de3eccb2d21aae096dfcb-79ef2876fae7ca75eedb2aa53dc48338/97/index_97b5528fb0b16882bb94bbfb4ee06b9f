4413d458ff19e8164e3c85d92ca7250f
/* istanbul ignore next */
function cov_10e3wbyie3() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\queue\\index.ts";
  var hash = "d0bc0827e0e6ea4c716576b423d3d674920a53ab";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\queue\\index.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 16,
          column: 1
        }
      },
      "1": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 18,
          column: 26
        }
      },
      "2": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "3": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 49
        }
      },
      "4": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 24,
          column: 11
        }
      },
      "5": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 59
        }
      },
      "6": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 11
        }
      },
      "7": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 56
        }
      },
      "8": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 27
        }
      },
      "9": {
        start: {
          line: 32,
          column: 28
        },
        end: {
          line: 43,
          column: 1
        }
      },
      "10": {
        start: {
          line: 47,
          column: 13
        },
        end: {
          line: 47,
          column: 22
        }
      },
      "11": {
        start: {
          line: 48,
          column: 14
        },
        end: {
          line: 48,
          column: 23
        }
      },
      "12": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 29
        }
      },
      "13": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 57
        }
      },
      "14": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "15": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "16": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 88
        }
      },
      "17": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 61
        }
      },
      "18": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 37
        }
      },
      "19": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "20": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 56
        }
      },
      "21": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 42
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 43
        }
      },
      "23": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 65
        }
      },
      "24": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 70
        }
      },
      "25": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 24
        }
      },
      "26": {
        start: {
          line: 81,
          column: 29
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "27": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "28": {
        start: {
          line: 92,
          column: 26
        },
        end: {
          line: 92,
          column: 64
        }
      },
      "29": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 48
        }
      },
      "30": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 62
        }
      },
      "31": {
        start: {
          line: 99,
          column: 30
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "32": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "33": {
        start: {
          line: 142,
          column: 34
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "34": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 146,
          column: 83
        }
      },
      "35": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "36": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 81
        }
      },
      "37": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 153,
          column: 15
        }
      },
      "38": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 86
        }
      },
      "39": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 156,
          column: 15
        }
      },
      "40": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 77
        }
      },
      "41": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 50
        }
      },
      "42": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 73
        }
      },
      "43": {
        start: {
          line: 163,
          column: 89
        },
        end: {
          line: 163,
          column: 97
        }
      },
      "44": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "45": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 175,
          column: 15
        }
      },
      "46": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 94
        }
      },
      "47": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 78
        }
      },
      "48": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 82
        }
      },
      "49": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 24
        }
      },
      "50": {
        start: {
          line: 186,
          column: 72
        },
        end: {
          line: 186,
          column: 80
        }
      },
      "51": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "52": {
        start: {
          line: 188,
          column: 30
        },
        end: {
          line: 188,
          column: 59
        }
      },
      "53": {
        start: {
          line: 189,
          column: 28
        },
        end: {
          line: 189,
          column: 55
        }
      },
      "54": {
        start: {
          line: 191,
          column: 28
        },
        end: {
          line: 196,
          column: 14
        }
      },
      "55": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 84
        }
      },
      "56": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 91
        }
      },
      "57": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 24
        }
      },
      "58": {
        start: {
          line: 205,
          column: 81
        },
        end: {
          line: 205,
          column: 89
        }
      },
      "59": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "60": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 80
        }
      },
      "61": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 77
        }
      },
      "62": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 24
        }
      },
      "63": {
        start: {
          line: 216,
          column: 67
        },
        end: {
          line: 216,
          column: 75
        }
      },
      "64": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "65": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 82
        }
      },
      "66": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 74
        }
      },
      "67": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 24
        }
      },
      "68": {
        start: {
          line: 227,
          column: 65
        },
        end: {
          line: 227,
          column: 73
        }
      },
      "69": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "70": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 72
        }
      },
      "71": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 82
        }
      },
      "72": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 24
        }
      },
      "73": {
        start: {
          line: 239,
          column: 22
        },
        end: {
          line: 239,
          column: 48
        }
      },
      "74": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "75": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 62
        }
      },
      "76": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 63
        }
      },
      "77": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 37
        }
      },
      "78": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 38
        }
      },
      "79": {
        start: {
          line: 253,
          column: 29
        },
        end: {
          line: 253,
          column: 31
        }
      },
      "80": {
        start: {
          line: 254,
          column: 29
        },
        end: {
          line: 254,
          column: 33
        }
      },
      "81": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "82": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "83": {
        start: {
          line: 257,
          column: 32
        },
        end: {
          line: 257,
          column: 56
        }
      },
      "84": {
        start: {
          line: 258,
          column: 31
        },
        end: {
          line: 258,
          column: 54
        }
      },
      "85": {
        start: {
          line: 259,
          column: 34
        },
        end: {
          line: 259,
          column: 60
        }
      },
      "86": {
        start: {
          line: 260,
          column: 31
        },
        end: {
          line: 260,
          column: 54
        }
      },
      "87": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 266,
          column: 18
        }
      },
      "88": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 81
        }
      },
      "89": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 71
        }
      },
      "90": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 39
        }
      },
      "91": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 277,
          column: 10
        }
      },
      "92": {
        start: {
          line: 281,
          column: 43
        },
        end: {
          line: 281,
          column: 84
        }
      },
      "93": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 43
        }
      },
      "94": {
        start: {
          line: 285,
          column: 33
        },
        end: {
          line: 285,
          column: 74
        }
      },
      "95": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 33
        }
      },
      "96": {
        start: {
          line: 289,
          column: 44
        },
        end: {
          line: 289,
          column: 85
        }
      },
      "97": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 44
        }
      },
      "98": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 53
        }
      },
      "99": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "100": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "101": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 298,
          column: 37
        }
      },
      "102": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 55
        }
      },
      "103": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 73
        }
      },
      "104": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "105": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "106": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 36
        }
      },
      "107": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 54
        }
      },
      "108": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 72
        }
      },
      "109": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "110": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 41
        }
      },
      "111": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 35
        }
      },
      "112": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 51
        }
      },
      "113": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 55
        }
      },
      "114": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 326,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "getRedisConnection",
        decl: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 34
          }
        },
        loc: {
          start: {
            line: 19,
            column: 37
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 36
          },
          end: {
            line: 22,
            column: 37
          }
        },
        loc: {
          start: {
            line: 22,
            column: 47
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 38
          },
          end: {
            line: 25,
            column: 39
          }
        },
        loc: {
          start: {
            line: 25,
            column: 44
          },
          end: {
            line: 27,
            column: 9
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 24
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 51
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 31
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 23
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 65
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 29
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 80
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 30
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 98
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 148,
            column: 35
          },
          end: {
            line: 148,
            column: 36
          }
        },
        loc: {
          start: {
            line: 148,
            column: 44
          },
          end: {
            line: 150,
            column: 13
          }
        },
        line: 148
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 151,
            column: 32
          },
          end: {
            line: 151,
            column: 33
          }
        },
        loc: {
          start: {
            line: 151,
            column: 46
          },
          end: {
            line: 153,
            column: 13
          }
        },
        line: 151
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 154,
            column: 31
          },
          end: {
            line: 154,
            column: 32
          }
        },
        loc: {
          start: {
            line: 154,
            column: 40
          },
          end: {
            line: 156,
            column: 13
          }
        },
        line: 154
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 38
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 162
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 41
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 185
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 33
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 204
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 35
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 215
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 35
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 226
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 238,
            column: 5
          }
        },
        loc: {
          start: {
            line: 238,
            column: 46
          },
          end: {
            line: 244,
            column: 5
          }
        },
        line: 238
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 19
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 245
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 20
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 248
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 28
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 252
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 30
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 280
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 35
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 284
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 33
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 288
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 21
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 293
      },
      "24": {
        name: "getQueueManager",
        decl: {
          start: {
            line: 325,
            column: 16
          },
          end: {
            line: 325,
            column: 31
          }
        },
        loc: {
          start: {
            line: 325,
            column: 40
          },
          end: {
            line: 327,
            column: 1
          }
        },
        line: 325
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "4": {
        loc: {
          start: {
            line: 275,
            column: 20
          },
          end: {
            line: 275,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 275,
            column: 37
          },
          end: {
            line: 275,
            column: 46
          }
        }, {
          start: {
            line: 275,
            column: 49
          },
          end: {
            line: 275,
            column: 60
          }
        }],
        line: 275
      },
      "5": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\queue\\index.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\queue\\index.ts"],
      sourcesContent: ["import { Queue, Worker, QueueOptions, Job } from 'bull';\nimport { Redis } from 'ioredis';\nimport { redisConfig } from '../config/env';\nimport { logger } from '../utils/logger';\nimport { PrismaService } from '../database/prisma.service';\nimport { MetricsService } from '../services/metrics.service';\n\n// Queue names\nexport const QUEUE_NAMES = {\n  CONVERSION_EVENTS: 'conversion-events',\n  METRICS_CALCULATION: 'metrics-calculation',\n  DATA_EXPORT: 'data-export',\n  CAMPAIGN_SYNC: 'campaign-sync',\n  NOTIFICATIONS: 'notifications',\n  WEBHOOK_PROCESSING: 'webhook-processing',\n  WEBHOOK_RETRY: 'webhook-retry',\n  WEBHOOK_DLQ: 'webhook-dlq',\n} as const;\n\n// Job types\nexport interface ConversionEventJobData {\n  eventId: string;\n  campaignId: string;\n  organizationId: string;\n  eventType: 'CLICK' | 'CONVERSION' | 'VIEW';\n  eventData: Record<string, any>;\n  timestamp: string;\n}\n\nexport interface MetricsCalculationJobData {\n  campaignId: string;\n  organizationId: string;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  metricsTypes: string[];\n  priority?: 'low' | 'normal' | 'high';\n}\n\nexport interface DataExportJobData {\n  userId: string;\n  organizationId: string;\n  exportType: 'CSV' | 'XLSX' | 'PDF';\n  filters: Record<string, any>;\n  email: string;\n  fileName: string;\n}\n\nexport interface CampaignSyncJobData {\n  campaignId: string;\n  organizationId: string;\n  platform: 'META' | 'GOOGLE' | 'TIKTOK';\n  syncType: 'FULL' | 'INCREMENTAL';\n  lastSyncAt?: string;\n}\n\nexport interface NotificationJobData {\n  userId: string;\n  organizationId: string;\n  type: 'EMAIL' | 'SMS' | 'PUSH' | 'SLACK';\n  template: string;\n  data: Record<string, any>;\n  priority?: 'low' | 'normal' | 'high';\n}\n\nexport interface WebhookProcessingJobData {\n  webhookId: string;\n  provider: 'META_ADS' | 'GOOGLE_ADS' | 'STRIPE' | 'PAYPAL' | 'WHATSAPP';\n  payload: any;\n}\n\nexport interface WebhookRetryJobData {\n  configId: string;\n  webhookData: any;\n  attempt: number;\n}\n\nexport interface WebhookDLQJobData {\n  configId: string;\n  webhookData: any;\n  finalAttempt: number;\n  error: string;\n  failedAt: string;\n}\n\n// Redis connection\nlet redisConnection: Redis | null = null;\n\nexport function getRedisConnection(): Redis {\n  if (!redisConnection) {\n    redisConnection = new Redis(redisConfig);\n\n    redisConnection.on('error', (error) => {\n      logger.error('Redis connection error:', error);\n    });\n\n    redisConnection.on('connect', () => {\n      logger.info('Redis connected successfully');\n    });\n  }\n\n  return redisConnection;\n}\n\n// Queue configuration\nconst defaultQueueOptions: QueueOptions = {\n  connection: getRedisConnection(),\n  defaultJobOptions: {\n    removeOnComplete: 100, // Keep last 100 completed jobs\n    removeOnFail: 50, // Keep last 50 failed jobs\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 2000,\n    },\n  },\n};\n\n// Queue Manager\nexport class QueueManager {\n  private static instance: QueueManager;\n  private queues: Map<string, Queue> = new Map();\n  private workers: Map<string, Worker> = new Map();\n  private prisma: PrismaService;\n  private metricsService: MetricsService;\n\n  private constructor(prisma: PrismaService) {\n    this.prisma = prisma;\n    this.metricsService = new MetricsService(prisma);\n  }\n\n  public static getInstance(prisma?: PrismaService): QueueManager {\n    if (!QueueManager.instance) {\n      if (!prisma) {\n        throw new Error('Prisma instance is required for first initialization');\n      }\n      QueueManager.instance = new QueueManager(prisma);\n    }\n    return QueueManager.instance;\n  }\n\n  // Initialize all queues and workers\n  public async initialize(): Promise<void> {\n    try {\n      logger.info('Initializing queue system...');\n\n      // Initialize queues\n      await this.initializeQueues();\n\n      // Initialize workers\n      await this.initializeWorkers();\n\n      logger.info('Queue system initialized successfully');\n    } catch (error) {\n      logger.error('Failed to initialize queue system:', error);\n      throw error;\n    }\n  }\n\n  // Initialize all queues\n  private async initializeQueues(): Promise<void> {\n    const queueConfigs = [\n      { name: QUEUE_NAMES.CONVERSION_EVENTS, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.METRICS_CALCULATION, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.DATA_EXPORT, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.CAMPAIGN_SYNC, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.NOTIFICATIONS, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.WEBHOOK_PROCESSING, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.WEBHOOK_RETRY, options: { ...defaultQueueOptions } },\n      { name: QUEUE_NAMES.WEBHOOK_DLQ, options: { ...defaultQueueOptions } },\n    ];\n\n    for (const config of queueConfigs) {\n      const queue = new Queue(config.name, config.options);\n      this.queues.set(config.name, queue);\n      logger.info(`Queue '${config.name}' initialized`);\n    }\n  }\n\n  // Initialize all workers\n  private async initializeWorkers(): Promise<void> {\n    const workerConfigs = [\n      {\n        name: QUEUE_NAMES.CONVERSION_EVENTS,\n        processor: this.processConversionEvent.bind(this),\n        options: { concurrency: 10 },\n      },\n      {\n        name: QUEUE_NAMES.METRICS_CALCULATION,\n        processor: this.processMetricsCalculation.bind(this),\n        options: { concurrency: 5 },\n      },\n      {\n        name: QUEUE_NAMES.DATA_EXPORT,\n        processor: this.processDataExport.bind(this),\n        options: { concurrency: 2 },\n      },\n      {\n        name: QUEUE_NAMES.CAMPAIGN_SYNC,\n        processor: this.processCampaignSync.bind(this),\n        options: { concurrency: 3 },\n      },\n      {\n        name: QUEUE_NAMES.NOTIFICATIONS,\n        processor: this.processNotification.bind(this),\n        options: { concurrency: 10 },\n      },\n      {\n        name: QUEUE_NAMES.WEBHOOK_PROCESSING,\n        processor: this.processWebhook.bind(this),\n        options: { concurrency: 5 },\n      },\n      {\n        name: QUEUE_NAMES.WEBHOOK_RETRY,\n        processor: this.processWebhookRetry.bind(this),\n        options: { concurrency: 3 },\n      },\n      {\n        name: QUEUE_NAMES.WEBHOOK_DLQ,\n        processor: this.processWebhookDLQ.bind(this),\n        options: { concurrency: 1 },\n      },\n    ];\n\n    for (const config of workerConfigs) {\n      const workerOptions: WorkerOptions = {\n        connection: getRedisConnection(),\n        concurrency: config.options.concurrency,\n      };\n\n      const worker = new Worker(config.name, config.processor, workerOptions);\n      \n      // Add event listeners\n      worker.on('completed', (job) => {\n        logger.info(`Job ${job.id} in queue '${config.name}' completed`);\n      });\n\n      worker.on('failed', (job, err) => {\n        logger.error(`Job ${job?.id} in queue '${config.name}' failed:`, err);\n      });\n\n      worker.on('error', (err) => {\n        logger.error(`Worker error in queue '${config.name}':`, err);\n      });\n\n      this.workers.set(config.name, worker);\n      logger.info(`Worker for queue '${config.name}' initialized`);\n    }\n  }\n\n  // Job processors\n  private async processConversionEvent(job: Job<ConversionEventJobData>): Promise<void> {\n    const { eventId, campaignId, organizationId, eventType, eventData, timestamp } = job.data;\n    \n    try {\n      // Store conversion event\n      await this.prisma.conversionEvent.create({\n        data: {\n          id: eventId,\n          campaignId,\n          eventType,\n          eventData,\n          timestamp: new Date(timestamp),\n          createdAt: new Date(),\n        },\n      });\n\n      // Update real-time metrics\n      await this.metricsService.updateRealTimeMetrics(campaignId, eventType, eventData);\n\n      logger.info(`Conversion event ${eventId} processed successfully`);\n    } catch (error) {\n      logger.error(`Failed to process conversion event ${eventId}:`, error);\n      throw error;\n    }\n  }\n\n  private async processMetricsCalculation(job: Job<MetricsCalculationJobData>): Promise<void> {\n    const { campaignId, organizationId, dateRange, metricsTypes } = job.data;\n    \n    try {\n      const startDate = new Date(dateRange.startDate);\n      const endDate = new Date(dateRange.endDate);\n\n      // Calculate metrics for the specified date range\n      const metrics = await this.metricsService.calculateMetrics({\n        campaignIds: [campaignId],\n        startDate,\n        endDate,\n        metricsTypes,\n      });\n\n      logger.info(`Metrics calculation for campaign ${campaignId} completed`);\n    } catch (error) {\n      logger.error(`Failed to calculate metrics for campaign ${campaignId}:`, error);\n      throw error;\n    }\n  }\n\n  private async processDataExport(job: Job<DataExportJobData>): Promise<void> {\n    const { userId, organizationId, exportType, filters, email, fileName } = job.data;\n    \n    try {\n      // TODO: Implement data export logic\n      logger.info(`Data export ${fileName} for user ${userId} completed`);\n    } catch (error) {\n      logger.error(`Failed to export data for user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  private async processCampaignSync(job: Job<CampaignSyncJobData>): Promise<void> {\n    const { campaignId, organizationId, platform, syncType } = job.data;\n    \n    try {\n      // TODO: Implement campaign sync logic\n      logger.info(`Campaign sync ${campaignId} from ${platform} completed`);\n    } catch (error) {\n      logger.error(`Failed to sync campaign ${campaignId}:`, error);\n      throw error;\n    }\n  }\n\n  private async processNotification(job: Job<NotificationJobData>): Promise<void> {\n    const { userId, organizationId, type, template, data } = job.data;\n    \n    try {\n      // TODO: Implement notification logic\n      logger.info(`Notification ${type} for user ${userId} sent`);\n    } catch (error) {\n      logger.error(`Failed to send notification to user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  // Queue operations\n  public async addJob<T>(\n    queueName: string,\n    jobData: T,\n    options?: {\n      priority?: number;\n      delay?: number;\n      repeat?: { cron: string };\n    }\n  ): Promise<Job<T>> {\n    const queue = this.queues.get(queueName);\n    if (!queue) {\n      throw new Error(`Queue '${queueName}' not found`);\n    }\n\n    return queue.add(`${queueName}-job`, jobData, options);\n  }\n\n  public getQueue(name: string): Queue | undefined {\n    return this.queues.get(name);\n  }\n\n  public getWorker(name: string): Worker | undefined {\n    return this.workers.get(name);\n  }\n\n  // Health check\n  public async getHealthStatus(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    queues: Record<string, { waiting: number; active: number; completed: number; failed: number }>;\n  }> {\n    const queuesStatus: Record<string, any> = {};\n    let overallHealthy = true;\n\n    for (const [name, queue] of this.queues) {\n      try {\n        const waiting = await queue.getWaiting();\n        const active = await queue.getActive();\n        const completed = await queue.getCompleted();\n        const failed = await queue.getFailed();\n\n        queuesStatus[name] = {\n          waiting: waiting.length,\n          active: active.length,\n          completed: completed.length,\n          failed: failed.length,\n        };\n      } catch (error) {\n        logger.error(`Failed to get status for queue '${name}':`, error);\n        queuesStatus[name] = { error: 'Failed to get status' };\n        overallHealthy = false;\n      }\n    }\n\n    return {\n      status: overallHealthy ? 'healthy' : 'unhealthy',\n      queues: queuesStatus,\n    };\n  }\n\n  // Webhook processing methods\n  private async processWebhook(job: Job<WebhookProcessingJobData>): Promise<void> {\n    const { processIncomingWebhook } = await import('../workers/webhook.worker');\n    return processIncomingWebhook(job);\n  }\n\n  private async processWebhookRetry(job: Job<WebhookRetryJobData>): Promise<void> {\n    const { retryWebhook } = await import('../workers/webhook.worker');\n    return retryWebhook(job);\n  }\n\n  private async processWebhookDLQ(job: Job<WebhookDLQJobData>): Promise<void> {\n    const { handleDeadLetterWebhook } = await import('../workers/webhook.worker');\n    return handleDeadLetterWebhook(job);\n  }\n\n  // Shutdown\n  public async shutdown(): Promise<void> {\n    logger.info('Shutting down queue system...');\n\n    // Close all workers\n    for (const [name, worker] of this.workers) {\n      try {\n        await worker.close();\n        logger.info(`Worker '${name}' closed`);\n      } catch (error) {\n        logger.error(`Failed to close worker '${name}':`, error);\n      }\n    }\n\n    // Close all queues\n    for (const [name, queue] of this.queues) {\n      try {\n        await queue.close();\n        logger.info(`Queue '${name}' closed`);\n      } catch (error) {\n        logger.error(`Failed to close queue '${name}':`, error);\n      }\n    }\n\n    // Close Redis connection\n    if (redisConnection) {\n      await redisConnection.quit();\n      redisConnection = null;\n      logger.info('Redis connection closed');\n    }\n\n    logger.info('Queue system shutdown completed');\n  }\n}\n\n// Export singleton getter\nexport function getQueueManager(prisma?: PrismaService): QueueManager {\n  return QueueManager.getInstance(prisma);\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d0bc0827e0e6ea4c716576b423d3d674920a53ab"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10e3wbyie3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10e3wbyie3();
import { Queue, Worker } from 'bull';
import { Redis } from 'ioredis';
import { redisConfig } from '../config/env';
import { logger } from '../utils/logger';
import { MetricsService } from '../services/metrics.service';
// Queue names
export const QUEUE_NAMES =
/* istanbul ignore next */
(cov_10e3wbyie3().s[0]++, {
  CONVERSION_EVENTS: 'conversion-events',
  METRICS_CALCULATION: 'metrics-calculation',
  DATA_EXPORT: 'data-export',
  CAMPAIGN_SYNC: 'campaign-sync',
  NOTIFICATIONS: 'notifications',
  WEBHOOK_PROCESSING: 'webhook-processing',
  WEBHOOK_RETRY: 'webhook-retry',
  WEBHOOK_DLQ: 'webhook-dlq'
});
// Redis connection
let redisConnection =
/* istanbul ignore next */
(cov_10e3wbyie3().s[1]++, null);
export function getRedisConnection() {
  /* istanbul ignore next */
  cov_10e3wbyie3().f[0]++;
  cov_10e3wbyie3().s[2]++;
  if (!redisConnection) {
    /* istanbul ignore next */
    cov_10e3wbyie3().b[0][0]++;
    cov_10e3wbyie3().s[3]++;
    redisConnection = new Redis(redisConfig);
    /* istanbul ignore next */
    cov_10e3wbyie3().s[4]++;
    redisConnection.on('error', error => {
      /* istanbul ignore next */
      cov_10e3wbyie3().f[1]++;
      cov_10e3wbyie3().s[5]++;
      logger.error('Redis connection error:', error);
    });
    /* istanbul ignore next */
    cov_10e3wbyie3().s[6]++;
    redisConnection.on('connect', () => {
      /* istanbul ignore next */
      cov_10e3wbyie3().f[2]++;
      cov_10e3wbyie3().s[7]++;
      logger.info('Redis connected successfully');
    });
  } else
  /* istanbul ignore next */
  {
    cov_10e3wbyie3().b[0][1]++;
  }
  cov_10e3wbyie3().s[8]++;
  return redisConnection;
}
// Queue configuration
const defaultQueueOptions =
/* istanbul ignore next */
(cov_10e3wbyie3().s[9]++, {
  connection: getRedisConnection(),
  defaultJobOptions: {
    removeOnComplete: 100,
    // Keep last 100 completed jobs
    removeOnFail: 50,
    // Keep last 50 failed jobs
    attempts: 3,
    backoff: {
      type: 'exponential',
      delay: 2000
    }
  }
});
// Queue Manager
export class QueueManager {
  static instance;
  queues =
  /* istanbul ignore next */
  (cov_10e3wbyie3().s[10]++, new Map());
  workers =
  /* istanbul ignore next */
  (cov_10e3wbyie3().s[11]++, new Map());
  prisma;
  metricsService;
  constructor(prisma) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[3]++;
    cov_10e3wbyie3().s[12]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_10e3wbyie3().s[13]++;
    this.metricsService = new MetricsService(prisma);
  }
  static getInstance(prisma) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[4]++;
    cov_10e3wbyie3().s[14]++;
    if (!QueueManager.instance) {
      /* istanbul ignore next */
      cov_10e3wbyie3().b[1][0]++;
      cov_10e3wbyie3().s[15]++;
      if (!prisma) {
        /* istanbul ignore next */
        cov_10e3wbyie3().b[2][0]++;
        cov_10e3wbyie3().s[16]++;
        throw new Error('Prisma instance is required for first initialization');
      } else
      /* istanbul ignore next */
      {
        cov_10e3wbyie3().b[2][1]++;
      }
      cov_10e3wbyie3().s[17]++;
      QueueManager.instance = new QueueManager(prisma);
    } else
    /* istanbul ignore next */
    {
      cov_10e3wbyie3().b[1][1]++;
    }
    cov_10e3wbyie3().s[18]++;
    return QueueManager.instance;
  }
  // Initialize all queues and workers
  async initialize() {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[5]++;
    cov_10e3wbyie3().s[19]++;
    try {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[20]++;
      logger.info('Initializing queue system...');
      // Initialize queues
      /* istanbul ignore next */
      cov_10e3wbyie3().s[21]++;
      await this.initializeQueues();
      // Initialize workers
      /* istanbul ignore next */
      cov_10e3wbyie3().s[22]++;
      await this.initializeWorkers();
      /* istanbul ignore next */
      cov_10e3wbyie3().s[23]++;
      logger.info('Queue system initialized successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[24]++;
      logger.error('Failed to initialize queue system:', error);
      /* istanbul ignore next */
      cov_10e3wbyie3().s[25]++;
      throw error;
    }
  }
  // Initialize all queues
  async initializeQueues() {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[6]++;
    const queueConfigs =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[26]++, [{
      name: QUEUE_NAMES.CONVERSION_EVENTS,
      options: {
        ...defaultQueueOptions
      }
    }, {
      name: QUEUE_NAMES.METRICS_CALCULATION,
      options: {
        ...defaultQueueOptions
      }
    }, {
      name: QUEUE_NAMES.DATA_EXPORT,
      options: {
        ...defaultQueueOptions
      }
    }, {
      name: QUEUE_NAMES.CAMPAIGN_SYNC,
      options: {
        ...defaultQueueOptions
      }
    }, {
      name: QUEUE_NAMES.NOTIFICATIONS,
      options: {
        ...defaultQueueOptions
      }
    }, {
      name: QUEUE_NAMES.WEBHOOK_PROCESSING,
      options: {
        ...defaultQueueOptions
      }
    }, {
      name: QUEUE_NAMES.WEBHOOK_RETRY,
      options: {
        ...defaultQueueOptions
      }
    }, {
      name: QUEUE_NAMES.WEBHOOK_DLQ,
      options: {
        ...defaultQueueOptions
      }
    }]);
    /* istanbul ignore next */
    cov_10e3wbyie3().s[27]++;
    for (const config of queueConfigs) {
      const queue =
      /* istanbul ignore next */
      (cov_10e3wbyie3().s[28]++, new Queue(config.name, config.options));
      /* istanbul ignore next */
      cov_10e3wbyie3().s[29]++;
      this.queues.set(config.name, queue);
      /* istanbul ignore next */
      cov_10e3wbyie3().s[30]++;
      logger.info(`Queue '${config.name}' initialized`);
    }
  }
  // Initialize all workers
  async initializeWorkers() {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[7]++;
    const workerConfigs =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[31]++, [{
      name: QUEUE_NAMES.CONVERSION_EVENTS,
      processor: this.processConversionEvent.bind(this),
      options: {
        concurrency: 10
      }
    }, {
      name: QUEUE_NAMES.METRICS_CALCULATION,
      processor: this.processMetricsCalculation.bind(this),
      options: {
        concurrency: 5
      }
    }, {
      name: QUEUE_NAMES.DATA_EXPORT,
      processor: this.processDataExport.bind(this),
      options: {
        concurrency: 2
      }
    }, {
      name: QUEUE_NAMES.CAMPAIGN_SYNC,
      processor: this.processCampaignSync.bind(this),
      options: {
        concurrency: 3
      }
    }, {
      name: QUEUE_NAMES.NOTIFICATIONS,
      processor: this.processNotification.bind(this),
      options: {
        concurrency: 10
      }
    }, {
      name: QUEUE_NAMES.WEBHOOK_PROCESSING,
      processor: this.processWebhook.bind(this),
      options: {
        concurrency: 5
      }
    }, {
      name: QUEUE_NAMES.WEBHOOK_RETRY,
      processor: this.processWebhookRetry.bind(this),
      options: {
        concurrency: 3
      }
    }, {
      name: QUEUE_NAMES.WEBHOOK_DLQ,
      processor: this.processWebhookDLQ.bind(this),
      options: {
        concurrency: 1
      }
    }]);
    /* istanbul ignore next */
    cov_10e3wbyie3().s[32]++;
    for (const config of workerConfigs) {
      const workerOptions =
      /* istanbul ignore next */
      (cov_10e3wbyie3().s[33]++, {
        connection: getRedisConnection(),
        concurrency: config.options.concurrency
      });
      const worker =
      /* istanbul ignore next */
      (cov_10e3wbyie3().s[34]++, new Worker(config.name, config.processor, workerOptions));
      // Add event listeners
      /* istanbul ignore next */
      cov_10e3wbyie3().s[35]++;
      worker.on('completed', job => {
        /* istanbul ignore next */
        cov_10e3wbyie3().f[8]++;
        cov_10e3wbyie3().s[36]++;
        logger.info(`Job ${job.id} in queue '${config.name}' completed`);
      });
      /* istanbul ignore next */
      cov_10e3wbyie3().s[37]++;
      worker.on('failed', (job, err) => {
        /* istanbul ignore next */
        cov_10e3wbyie3().f[9]++;
        cov_10e3wbyie3().s[38]++;
        logger.error(`Job ${job?.id} in queue '${config.name}' failed:`, err);
      });
      /* istanbul ignore next */
      cov_10e3wbyie3().s[39]++;
      worker.on('error', err => {
        /* istanbul ignore next */
        cov_10e3wbyie3().f[10]++;
        cov_10e3wbyie3().s[40]++;
        logger.error(`Worker error in queue '${config.name}':`, err);
      });
      /* istanbul ignore next */
      cov_10e3wbyie3().s[41]++;
      this.workers.set(config.name, worker);
      /* istanbul ignore next */
      cov_10e3wbyie3().s[42]++;
      logger.info(`Worker for queue '${config.name}' initialized`);
    }
  }
  // Job processors
  async processConversionEvent(job) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[11]++;
    const {
      eventId,
      campaignId,
      organizationId,
      eventType,
      eventData,
      timestamp
    } =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[43]++, job.data);
    /* istanbul ignore next */
    cov_10e3wbyie3().s[44]++;
    try {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[45]++;
      // Store conversion event
      await this.prisma.conversionEvent.create({
        data: {
          id: eventId,
          campaignId,
          eventType,
          eventData,
          timestamp: new Date(timestamp),
          createdAt: new Date()
        }
      });
      // Update real-time metrics
      /* istanbul ignore next */
      cov_10e3wbyie3().s[46]++;
      await this.metricsService.updateRealTimeMetrics(campaignId, eventType, eventData);
      /* istanbul ignore next */
      cov_10e3wbyie3().s[47]++;
      logger.info(`Conversion event ${eventId} processed successfully`);
    } catch (error) {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[48]++;
      logger.error(`Failed to process conversion event ${eventId}:`, error);
      /* istanbul ignore next */
      cov_10e3wbyie3().s[49]++;
      throw error;
    }
  }
  async processMetricsCalculation(job) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[12]++;
    const {
      campaignId,
      organizationId,
      dateRange,
      metricsTypes
    } =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[50]++, job.data);
    /* istanbul ignore next */
    cov_10e3wbyie3().s[51]++;
    try {
      const startDate =
      /* istanbul ignore next */
      (cov_10e3wbyie3().s[52]++, new Date(dateRange.startDate));
      const endDate =
      /* istanbul ignore next */
      (cov_10e3wbyie3().s[53]++, new Date(dateRange.endDate));
      // Calculate metrics for the specified date range
      const metrics =
      /* istanbul ignore next */
      (cov_10e3wbyie3().s[54]++, await this.metricsService.calculateMetrics({
        campaignIds: [campaignId],
        startDate,
        endDate,
        metricsTypes
      }));
      /* istanbul ignore next */
      cov_10e3wbyie3().s[55]++;
      logger.info(`Metrics calculation for campaign ${campaignId} completed`);
    } catch (error) {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[56]++;
      logger.error(`Failed to calculate metrics for campaign ${campaignId}:`, error);
      /* istanbul ignore next */
      cov_10e3wbyie3().s[57]++;
      throw error;
    }
  }
  async processDataExport(job) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[13]++;
    const {
      userId,
      organizationId,
      exportType,
      filters,
      email,
      fileName
    } =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[58]++, job.data);
    /* istanbul ignore next */
    cov_10e3wbyie3().s[59]++;
    try {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[60]++;
      // TODO: Implement data export logic
      logger.info(`Data export ${fileName} for user ${userId} completed`);
    } catch (error) {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[61]++;
      logger.error(`Failed to export data for user ${userId}:`, error);
      /* istanbul ignore next */
      cov_10e3wbyie3().s[62]++;
      throw error;
    }
  }
  async processCampaignSync(job) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[14]++;
    const {
      campaignId,
      organizationId,
      platform,
      syncType
    } =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[63]++, job.data);
    /* istanbul ignore next */
    cov_10e3wbyie3().s[64]++;
    try {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[65]++;
      // TODO: Implement campaign sync logic
      logger.info(`Campaign sync ${campaignId} from ${platform} completed`);
    } catch (error) {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[66]++;
      logger.error(`Failed to sync campaign ${campaignId}:`, error);
      /* istanbul ignore next */
      cov_10e3wbyie3().s[67]++;
      throw error;
    }
  }
  async processNotification(job) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[15]++;
    const {
      userId,
      organizationId,
      type,
      template,
      data
    } =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[68]++, job.data);
    /* istanbul ignore next */
    cov_10e3wbyie3().s[69]++;
    try {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[70]++;
      // TODO: Implement notification logic
      logger.info(`Notification ${type} for user ${userId} sent`);
    } catch (error) {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[71]++;
      logger.error(`Failed to send notification to user ${userId}:`, error);
      /* istanbul ignore next */
      cov_10e3wbyie3().s[72]++;
      throw error;
    }
  }
  // Queue operations
  async addJob(queueName, jobData, options) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[16]++;
    const queue =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[73]++, this.queues.get(queueName));
    /* istanbul ignore next */
    cov_10e3wbyie3().s[74]++;
    if (!queue) {
      /* istanbul ignore next */
      cov_10e3wbyie3().b[3][0]++;
      cov_10e3wbyie3().s[75]++;
      throw new Error(`Queue '${queueName}' not found`);
    } else
    /* istanbul ignore next */
    {
      cov_10e3wbyie3().b[3][1]++;
    }
    cov_10e3wbyie3().s[76]++;
    return queue.add(`${queueName}-job`, jobData, options);
  }
  getQueue(name) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[17]++;
    cov_10e3wbyie3().s[77]++;
    return this.queues.get(name);
  }
  getWorker(name) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[18]++;
    cov_10e3wbyie3().s[78]++;
    return this.workers.get(name);
  }
  // Health check
  async getHealthStatus() {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[19]++;
    const queuesStatus =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[79]++, {});
    let overallHealthy =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[80]++, true);
    /* istanbul ignore next */
    cov_10e3wbyie3().s[81]++;
    for (const [name, queue] of this.queues) {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[82]++;
      try {
        const waiting =
        /* istanbul ignore next */
        (cov_10e3wbyie3().s[83]++, await queue.getWaiting());
        const active =
        /* istanbul ignore next */
        (cov_10e3wbyie3().s[84]++, await queue.getActive());
        const completed =
        /* istanbul ignore next */
        (cov_10e3wbyie3().s[85]++, await queue.getCompleted());
        const failed =
        /* istanbul ignore next */
        (cov_10e3wbyie3().s[86]++, await queue.getFailed());
        /* istanbul ignore next */
        cov_10e3wbyie3().s[87]++;
        queuesStatus[name] = {
          waiting: waiting.length,
          active: active.length,
          completed: completed.length,
          failed: failed.length
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_10e3wbyie3().s[88]++;
        logger.error(`Failed to get status for queue '${name}':`, error);
        /* istanbul ignore next */
        cov_10e3wbyie3().s[89]++;
        queuesStatus[name] = {
          error: 'Failed to get status'
        };
        /* istanbul ignore next */
        cov_10e3wbyie3().s[90]++;
        overallHealthy = false;
      }
    }
    /* istanbul ignore next */
    cov_10e3wbyie3().s[91]++;
    return {
      status: overallHealthy ?
      /* istanbul ignore next */
      (cov_10e3wbyie3().b[4][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_10e3wbyie3().b[4][1]++, 'unhealthy'),
      queues: queuesStatus
    };
  }
  // Webhook processing methods
  async processWebhook(job) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[20]++;
    const {
      processIncomingWebhook
    } =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[92]++, await import('../workers/webhook.worker'));
    /* istanbul ignore next */
    cov_10e3wbyie3().s[93]++;
    return processIncomingWebhook(job);
  }
  async processWebhookRetry(job) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[21]++;
    const {
      retryWebhook
    } =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[94]++, await import('../workers/webhook.worker'));
    /* istanbul ignore next */
    cov_10e3wbyie3().s[95]++;
    return retryWebhook(job);
  }
  async processWebhookDLQ(job) {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[22]++;
    const {
      handleDeadLetterWebhook
    } =
    /* istanbul ignore next */
    (cov_10e3wbyie3().s[96]++, await import('../workers/webhook.worker'));
    /* istanbul ignore next */
    cov_10e3wbyie3().s[97]++;
    return handleDeadLetterWebhook(job);
  }
  // Shutdown
  async shutdown() {
    /* istanbul ignore next */
    cov_10e3wbyie3().f[23]++;
    cov_10e3wbyie3().s[98]++;
    logger.info('Shutting down queue system...');
    // Close all workers
    /* istanbul ignore next */
    cov_10e3wbyie3().s[99]++;
    for (const [name, worker] of this.workers) {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[100]++;
      try {
        /* istanbul ignore next */
        cov_10e3wbyie3().s[101]++;
        await worker.close();
        /* istanbul ignore next */
        cov_10e3wbyie3().s[102]++;
        logger.info(`Worker '${name}' closed`);
      } catch (error) {
        /* istanbul ignore next */
        cov_10e3wbyie3().s[103]++;
        logger.error(`Failed to close worker '${name}':`, error);
      }
    }
    // Close all queues
    /* istanbul ignore next */
    cov_10e3wbyie3().s[104]++;
    for (const [name, queue] of this.queues) {
      /* istanbul ignore next */
      cov_10e3wbyie3().s[105]++;
      try {
        /* istanbul ignore next */
        cov_10e3wbyie3().s[106]++;
        await queue.close();
        /* istanbul ignore next */
        cov_10e3wbyie3().s[107]++;
        logger.info(`Queue '${name}' closed`);
      } catch (error) {
        /* istanbul ignore next */
        cov_10e3wbyie3().s[108]++;
        logger.error(`Failed to close queue '${name}':`, error);
      }
    }
    // Close Redis connection
    /* istanbul ignore next */
    cov_10e3wbyie3().s[109]++;
    if (redisConnection) {
      /* istanbul ignore next */
      cov_10e3wbyie3().b[5][0]++;
      cov_10e3wbyie3().s[110]++;
      await redisConnection.quit();
      /* istanbul ignore next */
      cov_10e3wbyie3().s[111]++;
      redisConnection = null;
      /* istanbul ignore next */
      cov_10e3wbyie3().s[112]++;
      logger.info('Redis connection closed');
    } else
    /* istanbul ignore next */
    {
      cov_10e3wbyie3().b[5][1]++;
    }
    cov_10e3wbyie3().s[113]++;
    logger.info('Queue system shutdown completed');
  }
}
// Export singleton getter
export function getQueueManager(prisma) {
  /* istanbul ignore next */
  cov_10e3wbyie3().f[24]++;
  cov_10e3wbyie3().s[114]++;
  return QueueManager.getInstance(prisma);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,