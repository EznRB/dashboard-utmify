{"version":3,"names":["cov_2gg0njr88v","actualCoverage","EventEmitter","reportError","reportMessage","addBreadcrumb","DEFAULT_CONFIG","s","metricsInterval","alertThresholds","cpuUsage","memoryUsage","responseTime","errorRate","activeConnections","retentionPeriod","SystemMonitor","config","isRunning","systemMetrics","applicationMetrics","businessMetrics","requestStats","total","successful","failed","responseTimes","lastReset","Date","now","errorStats","byType","databaseStats","queries","queryTimes","slowQueries","cacheStats","hits","misses","constructor","b","f","start","setInterval","collectMetrics","stop","clearInterval","timestamp","collectSystemMetrics","push","collectApplicationMetrics","collectBusinessMetrics","checkAlerts","cleanupOldMetrics","emit","system","application","business","error","context","memUsage","process","cpu","usage","calculateCpuUsage","loadAverage","memory","used","rss","heapTotal","heapUsed","disk","free","network","bytesIn","bytesOut","timeSinceReset","requestsPerSecond","averageResponseTime","length","reduce","a","averageQueryTime","cacheHitRate","requests","database","connections","cache","hitRate","errors","rate","users","active","new","returning","utm","created","clicked","conversionRate","campaigns","paused","completed","revenue","subscriptions","upgrades","alerts","toFixed","join","cutoff","filter","m","user","trackRequest","success","slice","trackError","type","errorType","name","trackDatabaseQuery","queryTime","slow","trackCacheHit","trackCacheMiss","getSystemMetrics","limit","getApplicationMetrics","getBusinessMetrics","getCurrentStats","resetStats","monitor","startMonitoring","customMonitor","stopMonitoring"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\lib\\monitoring.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { performance } from 'perf_hooks';\nimport { reportError, reportMessage, addBreadcrumb } from './sentry';\n\n// Monitoring configuration\ninterface MonitoringConfig {\n  metricsInterval: number; // milliseconds\n  alertThresholds: {\n    cpuUsage: number;\n    memoryUsage: number;\n    responseTime: number;\n    errorRate: number;\n    activeConnections: number;\n  };\n  retentionPeriod: number; // milliseconds\n}\n\nconst DEFAULT_CONFIG: MonitoringConfig = {\n  metricsInterval: 30000, // 30 seconds\n  alertThresholds: {\n    cpuUsage: 80, // percentage\n    memoryUsage: 85, // percentage\n    responseTime: 5000, // milliseconds\n    errorRate: 5, // percentage\n    activeConnections: 1000,\n  },\n  retentionPeriod: 24 * 60 * 60 * 1000, // 24 hours\n};\n\n// Metric types\ninterface SystemMetrics {\n  timestamp: number;\n  cpu: {\n    usage: number;\n    loadAverage: number[];\n  };\n  memory: {\n    used: number;\n    total: number;\n    usage: number;\n    heapUsed: number;\n    heapTotal: number;\n  };\n  disk: {\n    usage: number;\n    free: number;\n    total: number;\n  };\n  network: {\n    bytesIn: number;\n    bytesOut: number;\n  };\n}\n\ninterface ApplicationMetrics {\n  timestamp: number;\n  requests: {\n    total: number;\n    successful: number;\n    failed: number;\n    averageResponseTime: number;\n    requestsPerSecond: number;\n  };\n  database: {\n    connections: number;\n    queries: number;\n    averageQueryTime: number;\n    slowQueries: number;\n  };\n  cache: {\n    hits: number;\n    misses: number;\n    hitRate: number;\n  };\n  errors: {\n    total: number;\n    rate: number;\n    byType: Record<string, number>;\n  };\n}\n\ninterface BusinessMetrics {\n  timestamp: number;\n  users: {\n    active: number;\n    new: number;\n    returning: number;\n  };\n  utm: {\n    created: number;\n    clicked: number;\n    conversionRate: number;\n  };\n  campaigns: {\n    active: number;\n    paused: number;\n    completed: number;\n  };\n  revenue: {\n    total: number;\n    subscriptions: number;\n    upgrades: number;\n  };\n}\n\n// Monitoring class\nclass SystemMonitor extends EventEmitter {\n  private config: MonitoringConfig;\n  private isRunning = false;\n  private metricsInterval: NodeJS.Timeout | null = null;\n  private systemMetrics: SystemMetrics[] = [];\n  private applicationMetrics: ApplicationMetrics[] = [];\n  private businessMetrics: BusinessMetrics[] = [];\n  private requestStats = {\n    total: 0,\n    successful: 0,\n    failed: 0,\n    responseTimes: [] as number[],\n    lastReset: Date.now(),\n  };\n  private errorStats = {\n    total: 0,\n    byType: {} as Record<string, number>,\n    lastReset: Date.now(),\n  };\n  private databaseStats = {\n    queries: 0,\n    queryTimes: [] as number[],\n    slowQueries: 0,\n    lastReset: Date.now(),\n  };\n  private cacheStats = {\n    hits: 0,\n    misses: 0,\n    lastReset: Date.now(),\n  };\n\n  constructor(config: Partial<MonitoringConfig> = {}) {\n    super();\n    this.config = { ...DEFAULT_CONFIG, ...config };\n  }\n\n  start() {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.isRunning = true;\n    this.metricsInterval = setInterval(() => {\n      this.collectMetrics();\n    }, this.config.metricsInterval);\n\n    addBreadcrumb('System monitoring started', 'monitoring');\n    reportMessage('System monitoring started', 'info');\n  }\n\n  stop() {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n    if (this.metricsInterval) {\n      clearInterval(this.metricsInterval);\n      this.metricsInterval = null;\n    }\n\n    addBreadcrumb('System monitoring stopped', 'monitoring');\n    reportMessage('System monitoring stopped', 'info');\n  }\n\n  private async collectMetrics() {\n    try {\n      const timestamp = Date.now();\n\n      // Collect system metrics\n      const systemMetrics = await this.collectSystemMetrics(timestamp);\n      this.systemMetrics.push(systemMetrics);\n\n      // Collect application metrics\n      const applicationMetrics = this.collectApplicationMetrics(timestamp);\n      this.applicationMetrics.push(applicationMetrics);\n\n      // Collect business metrics\n      const businessMetrics = await this.collectBusinessMetrics(timestamp);\n      this.businessMetrics.push(businessMetrics);\n\n      // Check for alerts\n      this.checkAlerts(systemMetrics, applicationMetrics);\n\n      // Clean up old metrics\n      this.cleanupOldMetrics();\n\n      // Emit metrics event\n      this.emit('metrics', {\n        system: systemMetrics,\n        application: applicationMetrics,\n        business: businessMetrics,\n      });\n    } catch (error) {\n      reportError(error as Error, { context: 'metrics_collection' });\n    }\n  }\n\n  private async collectSystemMetrics(timestamp: number): Promise<SystemMetrics> {\n    const memUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n    \n    // Get system information (would need additional libraries for full system metrics)\n    return {\n      timestamp,\n      cpu: {\n        usage: this.calculateCpuUsage(cpuUsage),\n        loadAverage: [0, 0, 0], // Would use os.loadavg() in Node.js\n      },\n      memory: {\n        used: memUsage.rss,\n        total: memUsage.rss + memUsage.heapTotal,\n        usage: (memUsage.rss / (memUsage.rss + memUsage.heapTotal)) * 100,\n        heapUsed: memUsage.heapUsed,\n        heapTotal: memUsage.heapTotal,\n      },\n      disk: {\n        usage: 0, // Would need fs.statSync() or similar\n        free: 0,\n        total: 0,\n      },\n      network: {\n        bytesIn: 0, // Would need network monitoring\n        bytesOut: 0,\n      },\n    };\n  }\n\n  private collectApplicationMetrics(timestamp: number): ApplicationMetrics {\n    const now = Date.now();\n    const timeSinceReset = now - this.requestStats.lastReset;\n    const requestsPerSecond = this.requestStats.total / (timeSinceReset / 1000);\n    const averageResponseTime = this.requestStats.responseTimes.length > 0\n      ? this.requestStats.responseTimes.reduce((a, b) => a + b, 0) / this.requestStats.responseTimes.length\n      : 0;\n    const errorRate = this.requestStats.total > 0\n      ? (this.errorStats.total / this.requestStats.total) * 100\n      : 0;\n    const averageQueryTime = this.databaseStats.queryTimes.length > 0\n      ? this.databaseStats.queryTimes.reduce((a, b) => a + b, 0) / this.databaseStats.queryTimes.length\n      : 0;\n    const cacheHitRate = (this.cacheStats.hits + this.cacheStats.misses) > 0\n      ? (this.cacheStats.hits / (this.cacheStats.hits + this.cacheStats.misses)) * 100\n      : 0;\n\n    return {\n      timestamp,\n      requests: {\n        total: this.requestStats.total,\n        successful: this.requestStats.successful,\n        failed: this.requestStats.failed,\n        averageResponseTime,\n        requestsPerSecond,\n      },\n      database: {\n        connections: 0, // Would get from database pool\n        queries: this.databaseStats.queries,\n        averageQueryTime,\n        slowQueries: this.databaseStats.slowQueries,\n      },\n      cache: {\n        hits: this.cacheStats.hits,\n        misses: this.cacheStats.misses,\n        hitRate: cacheHitRate,\n      },\n      errors: {\n        total: this.errorStats.total,\n        rate: errorRate,\n        byType: { ...this.errorStats.byType },\n      },\n    };\n  }\n\n  private async collectBusinessMetrics(timestamp: number): Promise<BusinessMetrics> {\n    // This would typically query your database for business metrics\n    // Placeholder implementation\n    return {\n      timestamp,\n      users: {\n        active: 0,\n        new: 0,\n        returning: 0,\n      },\n      utm: {\n        created: 0,\n        clicked: 0,\n        conversionRate: 0,\n      },\n      campaigns: {\n        active: 0,\n        paused: 0,\n        completed: 0,\n      },\n      revenue: {\n        total: 0,\n        subscriptions: 0,\n        upgrades: 0,\n      },\n    };\n  }\n\n  private checkAlerts(systemMetrics: SystemMetrics, applicationMetrics: ApplicationMetrics) {\n    const alerts: string[] = [];\n\n    // Check system alerts\n    if (systemMetrics.cpu.usage > this.config.alertThresholds.cpuUsage) {\n      alerts.push(`High CPU usage: ${systemMetrics.cpu.usage.toFixed(2)}%`);\n    }\n\n    if (systemMetrics.memory.usage > this.config.alertThresholds.memoryUsage) {\n      alerts.push(`High memory usage: ${systemMetrics.memory.usage.toFixed(2)}%`);\n    }\n\n    // Check application alerts\n    if (applicationMetrics.requests.averageResponseTime > this.config.alertThresholds.responseTime) {\n      alerts.push(`High response time: ${applicationMetrics.requests.averageResponseTime.toFixed(2)}ms`);\n    }\n\n    if (applicationMetrics.errors.rate > this.config.alertThresholds.errorRate) {\n      alerts.push(`High error rate: ${applicationMetrics.errors.rate.toFixed(2)}%`);\n    }\n\n    // Send alerts\n    if (alerts.length > 0) {\n      this.emit('alert', {\n        timestamp: Date.now(),\n        alerts,\n        systemMetrics,\n        applicationMetrics,\n      });\n\n      reportMessage(`System alerts: ${alerts.join(', ')}`, 'warning');\n    }\n  }\n\n  private cleanupOldMetrics() {\n    const cutoff = Date.now() - this.config.retentionPeriod;\n\n    this.systemMetrics = this.systemMetrics.filter(m => m.timestamp > cutoff);\n    this.applicationMetrics = this.applicationMetrics.filter(m => m.timestamp > cutoff);\n    this.businessMetrics = this.businessMetrics.filter(m => m.timestamp > cutoff);\n  }\n\n  private calculateCpuUsage(cpuUsage: NodeJS.CpuUsage): number {\n    // Simplified CPU usage calculation\n    // In a real implementation, you'd track this over time\n    return (cpuUsage.user + cpuUsage.system) / 1000000; // Convert to percentage\n  }\n\n  // Public methods for tracking application events\n  trackRequest(responseTime: number, success: boolean) {\n    this.requestStats.total++;\n    this.requestStats.responseTimes.push(responseTime);\n    \n    if (success) {\n      this.requestStats.successful++;\n    } else {\n      this.requestStats.failed++;\n    }\n\n    // Keep only recent response times\n    if (this.requestStats.responseTimes.length > 1000) {\n      this.requestStats.responseTimes = this.requestStats.responseTimes.slice(-500);\n    }\n  }\n\n  trackError(error: Error, type?: string) {\n    this.errorStats.total++;\n    const errorType = type || error.constructor.name;\n    this.errorStats.byType[errorType] = (this.errorStats.byType[errorType] || 0) + 1;\n  }\n\n  trackDatabaseQuery(queryTime: number, slow: boolean = false) {\n    this.databaseStats.queries++;\n    this.databaseStats.queryTimes.push(queryTime);\n    \n    if (slow) {\n      this.databaseStats.slowQueries++;\n    }\n\n    // Keep only recent query times\n    if (this.databaseStats.queryTimes.length > 1000) {\n      this.databaseStats.queryTimes = this.databaseStats.queryTimes.slice(-500);\n    }\n  }\n\n  trackCacheHit() {\n    this.cacheStats.hits++;\n  }\n\n  trackCacheMiss() {\n    this.cacheStats.misses++;\n  }\n\n  // Getters for current metrics\n  getSystemMetrics(limit: number = 100): SystemMetrics[] {\n    return this.systemMetrics.slice(-limit);\n  }\n\n  getApplicationMetrics(limit: number = 100): ApplicationMetrics[] {\n    return this.applicationMetrics.slice(-limit);\n  }\n\n  getBusinessMetrics(limit: number = 100): BusinessMetrics[] {\n    return this.businessMetrics.slice(-limit);\n  }\n\n  getCurrentStats() {\n    return {\n      requests: { ...this.requestStats },\n      errors: { ...this.errorStats },\n      database: { ...this.databaseStats },\n      cache: { ...this.cacheStats },\n    };\n  }\n\n  resetStats() {\n    const now = Date.now();\n    this.requestStats = {\n      total: 0,\n      successful: 0,\n      failed: 0,\n      responseTimes: [],\n      lastReset: now,\n    };\n    this.errorStats = {\n      total: 0,\n      byType: {},\n      lastReset: now,\n    };\n    this.databaseStats = {\n      queries: 0,\n      queryTimes: [],\n      slowQueries: 0,\n      lastReset: now,\n    };\n    this.cacheStats = {\n      hits: 0,\n      misses: 0,\n      lastReset: now,\n    };\n  }\n}\n\n// Create singleton instance\nconst monitor = new SystemMonitor();\n\nexport default monitor;\nexport { SystemMonitor, SystemMetrics, ApplicationMetrics, BusinessMetrics };\n\n// Convenience functions\nexport const startMonitoring = (config?: Partial<MonitoringConfig>) => {\n  if (config) {\n    // Create new instance with custom config\n    const customMonitor = new SystemMonitor(config);\n    customMonitor.start();\n    return customMonitor;\n  }\n  monitor.start();\n  return monitor;\n};\n\nexport const stopMonitoring = () => {\n  monitor.stop();\n};\n\nexport const trackRequest = (responseTime: number, success: boolean) => {\n  monitor.trackRequest(responseTime, success);\n};\n\nexport const trackError = (error: Error, type?: string) => {\n  monitor.trackError(error, type);\n};\n\nexport const trackDatabaseQuery = (queryTime: number, slow?: boolean) => {\n  monitor.trackDatabaseQuery(queryTime, slow);\n};\n\nexport const trackCacheHit = () => {\n  monitor.trackCacheHit();\n};\n\nexport const trackCacheMiss = () => {\n  monitor.trackCacheMiss();\n};"],"mappingsmC;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AA3GnC,SAASE,YAAY,QAAQ,QAAQ;AAErC,SAASC,WAAW,EAAEC,aAAa,EAAEC,aAAa,QAAQ,UAAU;AAepE,MAAMC,cAAc;AAAA;AAAA,CAAAN,cAAA,GAAAO,CAAA,OAAqB;EACvCC,eAAe,EAAE,KAAK;EAAE;EACxBC,eAAe,EAAE;IACfC,QAAQ,EAAE,EAAE;IAAE;IACdC,WAAW,EAAE,EAAE;IAAE;IACjBC,YAAY,EAAE,IAAI;IAAE;IACpBC,SAAS,EAAE,CAAC;IAAE;IACdC,iBAAiB,EAAE;GACpB;EACDC,eAAe,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAE;CACvC;AA8ED;AACA,MAAMC,aAAc,SAAQd,YAAY;EAC9Be,MAAM;EACNC,SAAS;EAAA;EAAA,CAAAlB,cAAA,GAAAO,CAAA,OAAG,KAAK;EACjBC,eAAe;EAAA;EAAA,CAAAR,cAAA,GAAAO,CAAA,OAA0B,IAAI;EAC7CY,aAAa;EAAA;EAAA,CAAAnB,cAAA,GAAAO,CAAA,OAAoB,EAAE;EACnCa,kBAAkB;EAAA;EAAA,CAAApB,cAAA,GAAAO,CAAA,OAAyB,EAAE;EAC7Cc,eAAe;EAAA;EAAA,CAAArB,cAAA,GAAAO,CAAA,OAAsB,EAAE;EACvCe,YAAY;EAAA;EAAA,CAAAtB,cAAA,GAAAO,CAAA,OAAG;IACrBgB,KAAK,EAAE,CAAC;IACRC,UAAU,EAAE,CAAC;IACbC,MAAM,EAAE,CAAC;IACTC,aAAa,EAAE,EAAc;IAC7BC,SAAS,EAAEC,IAAI,CAACC,GAAG;GACpB;EACOC,UAAU;EAAA;EAAA,CAAA9B,cAAA,GAAAO,CAAA,OAAG;IACnBgB,KAAK,EAAE,CAAC;IACRQ,MAAM,EAAE,EAA4B;IACpCJ,SAAS,EAAEC,IAAI,CAACC,GAAG;GACpB;EACOG,aAAa;EAAA;EAAA,CAAAhC,cAAA,GAAAO,CAAA,OAAG;IACtB0B,OAAO,EAAE,CAAC;IACVC,UAAU,EAAE,EAAc;IAC1BC,WAAW,EAAE,CAAC;IACdR,SAAS,EAAEC,IAAI,CAACC,GAAG;GACpB;EACOO,UAAU;EAAA;EAAA,CAAApC,cAAA,GAAAO,CAAA,OAAG;IACnB8B,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE,CAAC;IACTX,SAAS,EAAEC,IAAI,CAACC,GAAG;GACpB;EAEDU,YAAYtB,MAAA;EAAA;EAAA,CAAAjB,cAAA,GAAAwC,CAAA,UAAoC,EAAE;IAAA;IAAAxC,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IAChD,KAAK,EAAE;IAAC;IAAAP,cAAA,GAAAO,CAAA;IACR,IAAI,CAACU,MAAM,GAAG;MAAE,GAAGX,cAAc;MAAE,GAAGW;IAAM,CAAE;EAChD;EAEAyB,KAAKA,CAAA;IAAA;IAAA1C,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACH,IAAI,IAAI,CAACW,SAAS,EAAE;MAAA;MAAAlB,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MAClB;IACF,CAAC;IAAA;IAAA;MAAAP,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAO,CAAA;IAED,IAAI,CAACW,SAAS,GAAG,IAAI;IAAC;IAAAlB,cAAA,GAAAO,CAAA;IACtB,IAAI,CAACC,eAAe,GAAGmC,WAAW,CAAC,MAAK;MAAA;MAAA3C,cAAA,GAAAyC,CAAA;MAAAzC,cAAA,GAAAO,CAAA;MACtC,IAAI,CAACqC,cAAc,EAAE;IACvB,CAAC,EAAE,IAAI,CAAC3B,MAAM,CAACT,eAAe,CAAC;IAAC;IAAAR,cAAA,GAAAO,CAAA;IAEhCF,aAAa,CAAC,2BAA2B,EAAE,YAAY,CAAC;IAAC;IAAAL,cAAA,GAAAO,CAAA;IACzDH,aAAa,CAAC,2BAA2B,EAAE,MAAM,CAAC;EACpD;EAEAyC,IAAIA,CAAA;IAAA;IAAA7C,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACF,IAAI,CAAC,IAAI,CAACW,SAAS,EAAE;MAAA;MAAAlB,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MACnB;IACF,CAAC;IAAA;IAAA;MAAAP,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAO,CAAA;IAED,IAAI,CAACW,SAAS,GAAG,KAAK;IAAC;IAAAlB,cAAA,GAAAO,CAAA;IACvB,IAAI,IAAI,CAACC,eAAe,EAAE;MAAA;MAAAR,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MACxBuC,aAAa,CAAC,IAAI,CAACtC,eAAe,CAAC;MAAC;MAAAR,cAAA,GAAAO,CAAA;MACpC,IAAI,CAACC,eAAe,GAAG,IAAI;IAC7B,CAAC;IAAA;IAAA;MAAAR,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAO,CAAA;IAEDF,aAAa,CAAC,2BAA2B,EAAE,YAAY,CAAC;IAAC;IAAAL,cAAA,GAAAO,CAAA;IACzDH,aAAa,CAAC,2BAA2B,EAAE,MAAM,CAAC;EACpD;EAEQ,MAAMwC,cAAcA,CAAA;IAAA;IAAA5C,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IAC1B,IAAI;MACF,MAAMwC,SAAS;MAAA;MAAA,CAAA/C,cAAA,GAAAO,CAAA,QAAGqB,IAAI,CAACC,GAAG,EAAE;MAE5B;MACA,MAAMV,aAAa;MAAA;MAAA,CAAAnB,cAAA,GAAAO,CAAA,QAAG,MAAM,IAAI,CAACyC,oBAAoB,CAACD,SAAS,CAAC;MAAC;MAAA/C,cAAA,GAAAO,CAAA;MACjE,IAAI,CAACY,aAAa,CAAC8B,IAAI,CAAC9B,aAAa,CAAC;MAEtC;MACA,MAAMC,kBAAkB;MAAA;MAAA,CAAApB,cAAA,GAAAO,CAAA,QAAG,IAAI,CAAC2C,yBAAyB,CAACH,SAAS,CAAC;MAAC;MAAA/C,cAAA,GAAAO,CAAA;MACrE,IAAI,CAACa,kBAAkB,CAAC6B,IAAI,CAAC7B,kBAAkB,CAAC;MAEhD;MACA,MAAMC,eAAe;MAAA;MAAA,CAAArB,cAAA,GAAAO,CAAA,QAAG,MAAM,IAAI,CAAC4C,sBAAsB,CAACJ,SAAS,CAAC;MAAC;MAAA/C,cAAA,GAAAO,CAAA;MACrE,IAAI,CAACc,eAAe,CAAC4B,IAAI,CAAC5B,eAAe,CAAC;MAE1C;MAAA;MAAArB,cAAA,GAAAO,CAAA;MACA,IAAI,CAAC6C,WAAW,CAACjC,aAAa,EAAEC,kBAAkB,CAAC;MAEnD;MAAA;MAAApB,cAAA,GAAAO,CAAA;MACA,IAAI,CAAC8C,iBAAiB,EAAE;MAExB;MAAA;MAAArD,cAAA,GAAAO,CAAA;MACA,IAAI,CAAC+C,IAAI,CAAC,SAAS,EAAE;QACnBC,MAAM,EAAEpC,aAAa;QACrBqC,WAAW,EAAEpC,kBAAkB;QAC/BqC,QAAQ,EAAEpC;OACX,CAAC;IACJ,CAAC,CAAC,OAAOqC,KAAK,EAAE;MAAA;MAAA1D,cAAA,GAAAO,CAAA;MACdJ,WAAW,CAACuD,KAAc,EAAE;QAAEC,OAAO,EAAE;MAAoB,CAAE,CAAC;IAChE;EACF;EAEQ,MAAMX,oBAAoBA,CAACD,SAAiB;IAAA;IAAA/C,cAAA,GAAAyC,CAAA;IAClD,MAAMmB,QAAQ;IAAA;IAAA,CAAA5D,cAAA,GAAAO,CAAA,QAAGsD,OAAO,CAAClD,WAAW,EAAE;IACtC,MAAMD,QAAQ;IAAA;IAAA,CAAAV,cAAA,GAAAO,CAAA,QAAGsD,OAAO,CAACnD,QAAQ,EAAE;IAEnC;IAAA;IAAAV,cAAA,GAAAO,CAAA;IACA,OAAO;MACLwC,SAAS;MACTe,GAAG,EAAE;QACHC,KAAK,EAAE,IAAI,CAACC,iBAAiB,CAACtD,QAAQ,CAAC;QACvCuD,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAE;OACzB;MACDC,MAAM,EAAE;QACNC,IAAI,EAAEP,QAAQ,CAACQ,GAAG;QAClB7C,KAAK,EAAEqC,QAAQ,CAACQ,GAAG,GAAGR,QAAQ,CAACS,SAAS;QACxCN,KAAK,EAAGH,QAAQ,CAACQ,GAAG,IAAIR,QAAQ,CAACQ,GAAG,GAAGR,QAAQ,CAACS,SAAS,CAAC,GAAI,GAAG;QACjEC,QAAQ,EAAEV,QAAQ,CAACU,QAAQ;QAC3BD,SAAS,EAAET,QAAQ,CAACS;OACrB;MACDE,IAAI,EAAE;QACJR,KAAK,EAAE,CAAC;QAAE;QACVS,IAAI,EAAE,CAAC;QACPjD,KAAK,EAAE;OACR;MACDkD,OAAO,EAAE;QACPC,OAAO,EAAE,CAAC;QAAE;QACZC,QAAQ,EAAE;;KAEb;EACH;EAEQzB,yBAAyBA,CAACH,SAAiB;IAAA;IAAA/C,cAAA,GAAAyC,CAAA;IACjD,MAAMZ,GAAG;IAAA;IAAA,CAAA7B,cAAA,GAAAO,CAAA,QAAGqB,IAAI,CAACC,GAAG,EAAE;IACtB,MAAM+C,cAAc;IAAA;IAAA,CAAA5E,cAAA,GAAAO,CAAA,QAAGsB,GAAG,GAAG,IAAI,CAACP,YAAY,CAACK,SAAS;IACxD,MAAMkD,iBAAiB;IAAA;IAAA,CAAA7E,cAAA,GAAAO,CAAA,QAAG,IAAI,CAACe,YAAY,CAACC,KAAK,IAAIqD,cAAc,GAAG,IAAI,CAAC;IAC3E,MAAME,mBAAmB;IAAA;IAAA,CAAA9E,cAAA,GAAAO,CAAA,QAAG,IAAI,CAACe,YAAY,CAACI,aAAa,CAACqD,MAAM,GAAG,CAAC;IAAA;IAAA,CAAA/E,cAAA,GAAAwC,CAAA,UAClE,IAAI,CAAClB,YAAY,CAACI,aAAa,CAACsD,MAAM,CAAC,CAACC,CAAC,EAAEzC,CAAC,KAAK;MAAA;MAAAxC,cAAA,GAAAyC,CAAA;MAAAzC,cAAA,GAAAO,CAAA;MAAA,OAAA0E,CAAC,GAAGzC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAClB,YAAY,CAACI,aAAa,CAACqD,MAAM;IAAA;IAAA,CAAA/E,cAAA,GAAAwC,CAAA,UACnG,CAAC;IACL,MAAM3B,SAAS;IAAA;IAAA,CAAAb,cAAA,GAAAO,CAAA,QAAG,IAAI,CAACe,YAAY,CAACC,KAAK,GAAG,CAAC;IAAA;IAAA,CAAAvB,cAAA,GAAAwC,CAAA,UACxC,IAAI,CAACV,UAAU,CAACP,KAAK,GAAG,IAAI,CAACD,YAAY,CAACC,KAAK,GAAI,GAAG;IAAA;IAAA,CAAAvB,cAAA,GAAAwC,CAAA,UACvD,CAAC;IACL,MAAM0C,gBAAgB;IAAA;IAAA,CAAAlF,cAAA,GAAAO,CAAA,QAAG,IAAI,CAACyB,aAAa,CAACE,UAAU,CAAC6C,MAAM,GAAG,CAAC;IAAA;IAAA,CAAA/E,cAAA,GAAAwC,CAAA,UAC7D,IAAI,CAACR,aAAa,CAACE,UAAU,CAAC8C,MAAM,CAAC,CAACC,CAAC,EAAEzC,CAAC,KAAK;MAAA;MAAAxC,cAAA,GAAAyC,CAAA;MAAAzC,cAAA,GAAAO,CAAA;MAAA,OAAA0E,CAAC,GAAGzC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAACR,aAAa,CAACE,UAAU,CAAC6C,MAAM;IAAA;IAAA,CAAA/E,cAAA,GAAAwC,CAAA,UAC/F,CAAC;IACL,MAAM2C,YAAY;IAAA;IAAA,CAAAnF,cAAA,GAAAO,CAAA,QAAI,IAAI,CAAC6B,UAAU,CAACC,IAAI,GAAG,IAAI,CAACD,UAAU,CAACE,MAAM,GAAI,CAAC;IAAA;IAAA,CAAAtC,cAAA,GAAAwC,CAAA,UACnE,IAAI,CAACJ,UAAU,CAACC,IAAI,IAAI,IAAI,CAACD,UAAU,CAACC,IAAI,GAAG,IAAI,CAACD,UAAU,CAACE,MAAM,CAAC,GAAI,GAAG;IAAA;IAAA,CAAAtC,cAAA,GAAAwC,CAAA,UAC9E,CAAC;IAAC;IAAAxC,cAAA,GAAAO,CAAA;IAEN,OAAO;MACLwC,SAAS;MACTqC,QAAQ,EAAE;QACR7D,KAAK,EAAE,IAAI,CAACD,YAAY,CAACC,KAAK;QAC9BC,UAAU,EAAE,IAAI,CAACF,YAAY,CAACE,UAAU;QACxCC,MAAM,EAAE,IAAI,CAACH,YAAY,CAACG,MAAM;QAChCqD,mBAAmB;QACnBD;OACD;MACDQ,QAAQ,EAAE;QACRC,WAAW,EAAE,CAAC;QAAE;QAChBrD,OAAO,EAAE,IAAI,CAACD,aAAa,CAACC,OAAO;QACnCiD,gBAAgB;QAChB/C,WAAW,EAAE,IAAI,CAACH,aAAa,CAACG;OACjC;MACDoD,KAAK,EAAE;QACLlD,IAAI,EAAE,IAAI,CAACD,UAAU,CAACC,IAAI;QAC1BC,MAAM,EAAE,IAAI,CAACF,UAAU,CAACE,MAAM;QAC9BkD,OAAO,EAAEL;OACV;MACDM,MAAM,EAAE;QACNlE,KAAK,EAAE,IAAI,CAACO,UAAU,CAACP,KAAK;QAC5BmE,IAAI,EAAE7E,SAAS;QACfkB,MAAM,EAAE;UAAE,GAAG,IAAI,CAACD,UAAU,CAACC;QAAM;;KAEtC;EACH;EAEQ,MAAMoB,sBAAsBA,CAACJ,SAAiB;IAAA;IAAA/C,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACpD;IACA;IACA,OAAO;MACLwC,SAAS;MACT4C,KAAK,EAAE;QACLC,MAAM,EAAE,CAAC;QACTC,GAAG,EAAE,CAAC;QACNC,SAAS,EAAE;OACZ;MACDC,GAAG,EAAE;QACHC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE,CAAC;QACVC,cAAc,EAAE;OACjB;MACDC,SAAS,EAAE;QACTP,MAAM,EAAE,CAAC;QACTQ,MAAM,EAAE,CAAC;QACTC,SAAS,EAAE;OACZ;MACDC,OAAO,EAAE;QACP/E,KAAK,EAAE,CAAC;QACRgF,aAAa,EAAE,CAAC;QAChBC,QAAQ,EAAE;;KAEb;EACH;EAEQpD,WAAWA,CAACjC,aAA4B,EAAEC,kBAAsC;IAAA;IAAApB,cAAA,GAAAyC,CAAA;IACtF,MAAMgE,MAAM;IAAA;IAAA,CAAAzG,cAAA,GAAAO,CAAA,QAAa,EAAE;IAE3B;IAAA;IAAAP,cAAA,GAAAO,CAAA;IACA,IAAIY,aAAa,CAAC2C,GAAG,CAACC,KAAK,GAAG,IAAI,CAAC9C,MAAM,CAACR,eAAe,CAACC,QAAQ,EAAE;MAAA;MAAAV,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MAClEkG,MAAM,CAACxD,IAAI,CAAC,mBAAmB9B,aAAa,CAAC2C,GAAG,CAACC,KAAK,CAAC2C,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IACvE,CAAC;IAAA;IAAA;MAAA1G,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAO,CAAA;IAED,IAAIY,aAAa,CAAC+C,MAAM,CAACH,KAAK,GAAG,IAAI,CAAC9C,MAAM,CAACR,eAAe,CAACE,WAAW,EAAE;MAAA;MAAAX,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MACxEkG,MAAM,CAACxD,IAAI,CAAC,sBAAsB9B,aAAa,CAAC+C,MAAM,CAACH,KAAK,CAAC2C,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IAC7E,CAAC;IAAA;IAAA;MAAA1G,cAAA,GAAAwC,CAAA;IAAA;IAED;IAAAxC,cAAA,GAAAO,CAAA;IACA,IAAIa,kBAAkB,CAACgE,QAAQ,CAACN,mBAAmB,GAAG,IAAI,CAAC7D,MAAM,CAACR,eAAe,CAACG,YAAY,EAAE;MAAA;MAAAZ,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MAC9FkG,MAAM,CAACxD,IAAI,CAAC,uBAAuB7B,kBAAkB,CAACgE,QAAQ,CAACN,mBAAmB,CAAC4B,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IACpG,CAAC;IAAA;IAAA;MAAA1G,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAO,CAAA;IAED,IAAIa,kBAAkB,CAACqE,MAAM,CAACC,IAAI,GAAG,IAAI,CAACzE,MAAM,CAACR,eAAe,CAACI,SAAS,EAAE;MAAA;MAAAb,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MAC1EkG,MAAM,CAACxD,IAAI,CAAC,oBAAoB7B,kBAAkB,CAACqE,MAAM,CAACC,IAAI,CAACgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IAC/E,CAAC;IAAA;IAAA;MAAA1G,cAAA,GAAAwC,CAAA;IAAA;IAED;IAAAxC,cAAA,GAAAO,CAAA;IACA,IAAIkG,MAAM,CAAC1B,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA/E,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MACrB,IAAI,CAAC+C,IAAI,CAAC,OAAO,EAAE;QACjBP,SAAS,EAAEnB,IAAI,CAACC,GAAG,EAAE;QACrB4E,MAAM;QACNtF,aAAa;QACbC;OACD,CAAC;MAAC;MAAApB,cAAA,GAAAO,CAAA;MAEHH,aAAa,CAAC,kBAAkBqG,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC;IACjE,CAAC;IAAA;IAAA;MAAA3G,cAAA,GAAAwC,CAAA;IAAA;EACH;EAEQa,iBAAiBA,CAAA;IAAA;IAAArD,cAAA,GAAAyC,CAAA;IACvB,MAAMmE,MAAM;IAAA;IAAA,CAAA5G,cAAA,GAAAO,CAAA,QAAGqB,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACZ,MAAM,CAACF,eAAe;IAAC;IAAAf,cAAA,GAAAO,CAAA;IAExD,IAAI,CAACY,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC0F,MAAM,CAACC,CAAC,IAAI;MAAA;MAAA9G,cAAA,GAAAyC,CAAA;MAAAzC,cAAA,GAAAO,CAAA;MAAA,OAAAuG,CAAC,CAAC/D,SAAS,GAAG6D,MAAM;IAAN,CAAM,CAAC;IAAC;IAAA5G,cAAA,GAAAO,CAAA;IAC1E,IAAI,CAACa,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAACyF,MAAM,CAACC,CAAC,IAAI;MAAA;MAAA9G,cAAA,GAAAyC,CAAA;MAAAzC,cAAA,GAAAO,CAAA;MAAA,OAAAuG,CAAC,CAAC/D,SAAS,GAAG6D,MAAM;IAAN,CAAM,CAAC;IAAC;IAAA5G,cAAA,GAAAO,CAAA;IACpF,IAAI,CAACc,eAAe,GAAG,IAAI,CAACA,eAAe,CAACwF,MAAM,CAACC,CAAC,IAAI;MAAA;MAAA9G,cAAA,GAAAyC,CAAA;MAAAzC,cAAA,GAAAO,CAAA;MAAA,OAAAuG,CAAC,CAAC/D,SAAS,GAAG6D,MAAM;IAAN,CAAM,CAAC;EAC/E;EAEQ5C,iBAAiBA,CAACtD,QAAyB;IAAA;IAAAV,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACjD;IACA;IACA,OAAO,CAACG,QAAQ,CAACqG,IAAI,GAAGrG,QAAQ,CAAC6C,MAAM,IAAI,OAAO,CAAC,CAAC;EACtD;EAEA;EACAyD,YAAYA,CAACpG,YAAoB,EAAEqG,OAAgB;IAAA;IAAAjH,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACjD,IAAI,CAACe,YAAY,CAACC,KAAK,EAAE;IAAC;IAAAvB,cAAA,GAAAO,CAAA;IAC1B,IAAI,CAACe,YAAY,CAACI,aAAa,CAACuB,IAAI,CAACrC,YAAY,CAAC;IAAC;IAAAZ,cAAA,GAAAO,CAAA;IAEnD,IAAI0G,OAAO,EAAE;MAAA;MAAAjH,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MACX,IAAI,CAACe,YAAY,CAACE,UAAU,EAAE;IAChC,CAAC,MAAM;MAAA;MAAAxB,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MACL,IAAI,CAACe,YAAY,CAACG,MAAM,EAAE;IAC5B;IAEA;IAAA;IAAAzB,cAAA,GAAAO,CAAA;IACA,IAAI,IAAI,CAACe,YAAY,CAACI,aAAa,CAACqD,MAAM,GAAG,IAAI,EAAE;MAAA;MAAA/E,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MACjD,IAAI,CAACe,YAAY,CAACI,aAAa,GAAG,IAAI,CAACJ,YAAY,CAACI,aAAa,CAACwF,KAAK,CAAC,CAAC,GAAG,CAAC;IAC/E,CAAC;IAAA;IAAA;MAAAlH,cAAA,GAAAwC,CAAA;IAAA;EACH;EAEA2E,UAAUA,CAACzD,KAAY,EAAE0D,IAAa;IAAA;IAAApH,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACpC,IAAI,CAACuB,UAAU,CAACP,KAAK,EAAE;IACvB,MAAM8F,SAAS;IAAA;IAAA,CAAArH,cAAA,GAAAO,CAAA;IAAG;IAAA,CAAAP,cAAA,GAAAwC,CAAA,WAAA4E,IAAI;IAAA;IAAA,CAAApH,cAAA,GAAAwC,CAAA,WAAIkB,KAAK,CAACnB,WAAW,CAAC+E,IAAI;IAAC;IAAAtH,cAAA,GAAAO,CAAA;IACjD,IAAI,CAACuB,UAAU,CAACC,MAAM,CAACsF,SAAS,CAAC,GAAG;IAAC;IAAA,CAAArH,cAAA,GAAAwC,CAAA,eAAI,CAACV,UAAU,CAACC,MAAM,CAACsF,SAAS,CAAC;IAAA;IAAA,CAAArH,cAAA,GAAAwC,CAAA,WAAI,CAAC,KAAI,CAAC;EAClF;EAEA+E,kBAAkBA,CAACC,SAAiB,EAAEC,IAAA;EAAA;EAAA,CAAAzH,cAAA,GAAAwC,CAAA,WAAgB,KAAK;IAAA;IAAAxC,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACzD,IAAI,CAACyB,aAAa,CAACC,OAAO,EAAE;IAAC;IAAAjC,cAAA,GAAAO,CAAA;IAC7B,IAAI,CAACyB,aAAa,CAACE,UAAU,CAACe,IAAI,CAACuE,SAAS,CAAC;IAAC;IAAAxH,cAAA,GAAAO,CAAA;IAE9C,IAAIkH,IAAI,EAAE;MAAA;MAAAzH,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MACR,IAAI,CAACyB,aAAa,CAACG,WAAW,EAAE;IAClC,CAAC;IAAA;IAAA;MAAAnC,cAAA,GAAAwC,CAAA;IAAA;IAED;IAAAxC,cAAA,GAAAO,CAAA;IACA,IAAI,IAAI,CAACyB,aAAa,CAACE,UAAU,CAAC6C,MAAM,GAAG,IAAI,EAAE;MAAA;MAAA/E,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAO,CAAA;MAC/C,IAAI,CAACyB,aAAa,CAACE,UAAU,GAAG,IAAI,CAACF,aAAa,CAACE,UAAU,CAACgF,KAAK,CAAC,CAAC,GAAG,CAAC;IAC3E,CAAC;IAAA;IAAA;MAAAlH,cAAA,GAAAwC,CAAA;IAAA;EACH;EAEAkF,aAAaA,CAAA;IAAA;IAAA1H,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACX,IAAI,CAAC6B,UAAU,CAACC,IAAI,EAAE;EACxB;EAEAsF,cAAcA,CAAA;IAAA;IAAA3H,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACZ,IAAI,CAAC6B,UAAU,CAACE,MAAM,EAAE;EAC1B;EAEA;EACAsF,gBAAgBA,CAACC,KAAA;EAAA;EAAA,CAAA7H,cAAA,GAAAwC,CAAA,WAAgB,GAAG;IAAA;IAAAxC,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IAClC,OAAO,IAAI,CAACY,aAAa,CAAC+F,KAAK,CAAC,CAACW,KAAK,CAAC;EACzC;EAEAC,qBAAqBA,CAACD,KAAA;EAAA;EAAA,CAAA7H,cAAA,GAAAwC,CAAA,WAAgB,GAAG;IAAA;IAAAxC,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACvC,OAAO,IAAI,CAACa,kBAAkB,CAAC8F,KAAK,CAAC,CAACW,KAAK,CAAC;EAC9C;EAEAE,kBAAkBA,CAACF,KAAA;EAAA;EAAA,CAAA7H,cAAA,GAAAwC,CAAA,WAAgB,GAAG;IAAA;IAAAxC,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACpC,OAAO,IAAI,CAACc,eAAe,CAAC6F,KAAK,CAAC,CAACW,KAAK,CAAC;EAC3C;EAEAG,eAAeA,CAAA;IAAA;IAAAhI,cAAA,GAAAyC,CAAA;IAAAzC,cAAA,GAAAO,CAAA;IACb,OAAO;MACL6E,QAAQ,EAAE;QAAE,GAAG,IAAI,CAAC9D;MAAY,CAAE;MAClCmE,MAAM,EAAE;QAAE,GAAG,IAAI,CAAC3D;MAAU,CAAE;MAC9BuD,QAAQ,EAAE;QAAE,GAAG,IAAI,CAACrD;MAAa,CAAE;MACnCuD,KAAK,EAAE;QAAE,GAAG,IAAI,CAACnD;MAAU;KAC5B;EACH;EAEA6F,UAAUA,CAAA;IAAA;IAAAjI,cAAA,GAAAyC,CAAA;IACR,MAAMZ,GAAG;IAAA;IAAA,CAAA7B,cAAA,GAAAO,CAAA,QAAGqB,IAAI,CAACC,GAAG,EAAE;IAAC;IAAA7B,cAAA,GAAAO,CAAA;IACvB,IAAI,CAACe,YAAY,GAAG;MAClBC,KAAK,EAAE,CAAC;MACRC,UAAU,EAAE,CAAC;MACbC,MAAM,EAAE,CAAC;MACTC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAEE;KACZ;IAAC;IAAA7B,cAAA,GAAAO,CAAA;IACF,IAAI,CAACuB,UAAU,GAAG;MAChBP,KAAK,EAAE,CAAC;MACRQ,MAAM,EAAE,EAAE;MACVJ,SAAS,EAAEE;KACZ;IAAC;IAAA7B,cAAA,GAAAO,CAAA;IACF,IAAI,CAACyB,aAAa,GAAG;MACnBC,OAAO,EAAE,CAAC;MACVC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE,CAAC;MACdR,SAAS,EAAEE;KACZ;IAAC;IAAA7B,cAAA,GAAAO,CAAA;IACF,IAAI,CAAC6B,UAAU,GAAG;MAChBC,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE,CAAC;MACTX,SAAS,EAAEE;KACZ;EACH;;AAGF;AACA,MAAMqG,OAAO;AAAA;AAAA,CAAAlI,cAAA,GAAAO,CAAA,SAAG,IAAIS,aAAa,EAAE;AAEnC,eAAekH,OAAO;AACtB,SAASlH,aAAa;AAEtB;AAAA;AAAAhB,cAAA,GAAAO,CAAA;AACA,OAAO,MAAM4H,eAAe,GAAIlH,MAAkC,IAAI;EAAA;EAAAjB,cAAA,GAAAyC,CAAA;EAAAzC,cAAA,GAAAO,CAAA;EACpE,IAAIU,MAAM,EAAE;IAAA;IAAAjB,cAAA,GAAAwC,CAAA;IACV;IACA,MAAM4F,aAAa;IAAA;IAAA,CAAApI,cAAA,GAAAO,CAAA,SAAG,IAAIS,aAAa,CAACC,MAAM,CAAC;IAAC;IAAAjB,cAAA,GAAAO,CAAA;IAChD6H,aAAa,CAAC1F,KAAK,EAAE;IAAC;IAAA1C,cAAA,GAAAO,CAAA;IACtB,OAAO6H,aAAa;EACtB,CAAC;EAAA;EAAA;IAAApI,cAAA,GAAAwC,CAAA;EAAA;EAAAxC,cAAA,GAAAO,CAAA;EACD2H,OAAO,CAACxF,KAAK,EAAE;EAAC;EAAA1C,cAAA,GAAAO,CAAA;EAChB,OAAO2H,OAAO;AAChB,CAAC;AAAC;AAAAlI,cAAA,GAAAO,CAAA;AAEF,OAAO,MAAM8H,cAAc,GAAGA,CAAA,KAAK;EAAA;EAAArI,cAAA,GAAAyC,CAAA;EAAAzC,cAAA,GAAAO,CAAA;EACjC2H,OAAO,CAACrF,IAAI,EAAE;AAChB,CAAC;AAAC;AAAA7C,cAAA,GAAAO,CAAA;AAEF,OAAO,MAAMyG,YAAY,GAAGA,CAACpG,YAAoB,EAAEqG,OAAgB,KAAI;EAAA;EAAAjH,cAAA,GAAAyC,CAAA;EAAAzC,cAAA,GAAAO,CAAA;EACrE2H,OAAO,CAAClB,YAAY,CAACpG,YAAY,EAAEqG,OAAO,CAAC;AAC7C,CAAC;AAAC;AAAAjH,cAAA,GAAAO,CAAA;AAEF,OAAO,MAAM4G,UAAU,GAAGA,CAACzD,KAAY,EAAE0D,IAAa,KAAI;EAAA;EAAApH,cAAA,GAAAyC,CAAA;EAAAzC,cAAA,GAAAO,CAAA;EACxD2H,OAAO,CAACf,UAAU,CAACzD,KAAK,EAAE0D,IAAI,CAAC;AACjC,CAAC;AAAC;AAAApH,cAAA,GAAAO,CAAA;AAEF,OAAO,MAAMgH,kBAAkB,GAAGA,CAACC,SAAiB,EAAEC,IAAc,KAAI;EAAA;EAAAzH,cAAA,GAAAyC,CAAA;EAAAzC,cAAA,GAAAO,CAAA;EACtE2H,OAAO,CAACX,kBAAkB,CAACC,SAAS,EAAEC,IAAI,CAAC;AAC7C,CAAC;AAAC;AAAAzH,cAAA,GAAAO,CAAA;AAEF,OAAO,MAAMmH,aAAa,GAAGA,CAAA,KAAK;EAAA;EAAA1H,cAAA,GAAAyC,CAAA;EAAAzC,cAAA,GAAAO,CAAA;EAChC2H,OAAO,CAACR,aAAa,EAAE;AACzB,CAAC;AAAC;AAAA1H,cAAA,GAAAO,CAAA;AAEF,OAAO,MAAMoH,cAAc,GAAGA,CAAA,KAAK;EAAA;EAAA3H,cAAA,GAAAyC,CAAA;EAAAzC,cAAA,GAAAO,CAAA;EACjC2H,OAAO,CAACP,cAAc,EAAE;AAC1B,CAAC","ignoreList":[]}