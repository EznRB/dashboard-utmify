{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\cache.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\tests\\cache.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport Redis from 'ioredis';\nimport { CacheService } from '../services/cache.service';\n\n// Mock Redis\njest.mock('ioredis');\n\ndescribe('CacheService', () => {\n  let cacheService: CacheService;\n  let mockRedis: jest.Mocked<Redis>;\n\n  const mockKey = 'test:key';\n  const mockValue = { data: 'test value', timestamp: Date.now() };\n  const mockTTL = 300; // 5 minutes\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Setup Redis mock\n    mockRedis = {\n      get: jest.fn(),\n      set: jest.fn(),\n      setex: jest.fn(),\n      del: jest.fn(),\n      keys: jest.fn(),\n      pipeline: jest.fn(),\n      ping: jest.fn(),\n      info: jest.fn(),\n      dbsize: jest.fn(),\n      flushdb: jest.fn(),\n      exists: jest.fn(),\n      ttl: jest.fn(),\n      expire: jest.fn(),\n      incr: jest.fn(),\n      decr: jest.fn(),\n      hget: jest.fn(),\n      hset: jest.fn(),\n      hdel: jest.fn(),\n      hgetall: jest.fn(),\n      zadd: jest.fn(),\n      zrange: jest.fn(),\n      zrem: jest.fn(),\n      zcard: jest.fn(),\n      disconnect: jest.fn(),\n    } as any;\n\n    // Mock Redis constructor\n    (Redis as jest.MockedClass<typeof Redis>).mockImplementation(() => mockRedis);\n\n    cacheService = new CacheService();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('get', () => {\n    it('should retrieve and parse cached value', async () => {\n      const serializedValue = JSON.stringify(mockValue);\n      mockRedis.get.mockResolvedValue(serializedValue);\n\n      const result = await cacheService.get(mockKey);\n\n      expect(mockRedis.get).toHaveBeenCalledWith(mockKey);\n      expect(result).toEqual(mockValue);\n    });\n\n    it('should return null when key does not exist', async () => {\n      mockRedis.get.mockResolvedValue(null);\n\n      const result = await cacheService.get(mockKey);\n\n      expect(result).toBeNull();\n    });\n\n    it('should handle JSON parsing errors gracefully', async () => {\n      mockRedis.get.mockResolvedValue('invalid json');\n\n      const result = await cacheService.get(mockKey);\n\n      expect(result).toBeNull();\n    });\n\n    it('should handle Redis errors', async () => {\n      mockRedis.get.mockRejectedValue(new Error('Redis connection failed'));\n\n      await expect(cacheService.get(mockKey)).rejects.toThrow('Redis connection failed');\n    });\n  });\n\n  describe('set', () => {\n    it('should store value with TTL', async () => {\n      mockRedis.setex.mockResolvedValue('OK');\n\n      await cacheService.set(mockKey, mockValue, mockTTL);\n\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        mockKey,\n        mockTTL,\n        JSON.stringify(mockValue)\n      );\n    });\n\n    it('should store value without TTL', async () => {\n      mockRedis.set.mockResolvedValue('OK');\n\n      await cacheService.set(mockKey, mockValue);\n\n      expect(mockRedis.set).toHaveBeenCalledWith(mockKey, JSON.stringify(mockValue));\n    });\n\n    it('should handle Redis errors during set', async () => {\n      mockRedis.setex.mockRejectedValue(new Error('Redis write failed'));\n\n      await expect(cacheService.set(mockKey, mockValue, mockTTL)).rejects.toThrow(\n        'Redis write failed'\n      );\n    });\n  });\n\n  describe('del', () => {\n    it('should delete single key', async () => {\n      mockRedis.del.mockResolvedValue(1);\n\n      const result = await cacheService.del(mockKey);\n\n      expect(mockRedis.del).toHaveBeenCalledWith(mockKey);\n      expect(result).toBe(1);\n    });\n\n    it('should delete multiple keys', async () => {\n      const keys = ['key1', 'key2', 'key3'];\n      mockRedis.del.mockResolvedValue(3);\n\n      const result = await cacheService.del(...keys);\n\n      expect(mockRedis.del).toHaveBeenCalledWith(...keys);\n      expect(result).toBe(3);\n    });\n\n    it('should return 0 when no keys are deleted', async () => {\n      mockRedis.del.mockResolvedValue(0);\n\n      const result = await cacheService.del('nonexistent:key');\n\n      expect(result).toBe(0);\n    });\n  });\n\n  describe('getOrSet', () => {\n    it('should return cached value when available', async () => {\n      const serializedValue = JSON.stringify(mockValue);\n      mockRedis.get.mockResolvedValue(serializedValue);\n\n      const fetchFn = jest.fn().mockResolvedValue('fresh data');\n      const result = await cacheService.getOrSet(mockKey, fetchFn, mockTTL);\n\n      expect(mockRedis.get).toHaveBeenCalledWith(mockKey);\n      expect(fetchFn).not.toHaveBeenCalled();\n      expect(result).toEqual(mockValue);\n    });\n\n    it('should fetch and cache value when not in cache', async () => {\n      const freshData = { fresh: 'data' };\n      mockRedis.get.mockResolvedValue(null);\n      mockRedis.setex.mockResolvedValue('OK');\n\n      const fetchFn = jest.fn().mockResolvedValue(freshData);\n      const result = await cacheService.getOrSet(mockKey, fetchFn, mockTTL);\n\n      expect(mockRedis.get).toHaveBeenCalledWith(mockKey);\n      expect(fetchFn).toHaveBeenCalled();\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        mockKey,\n        mockTTL,\n        JSON.stringify(freshData)\n      );\n      expect(result).toEqual(freshData);\n    });\n\n    it('should handle fetch function errors', async () => {\n      mockRedis.get.mockResolvedValue(null);\n      const fetchFn = jest.fn().mockRejectedValue(new Error('Fetch failed'));\n\n      await expect(cacheService.getOrSet(mockKey, fetchFn, mockTTL)).rejects.toThrow(\n        'Fetch failed'\n      );\n    });\n\n    it('should return fresh data even if caching fails', async () => {\n      const freshData = { fresh: 'data' };\n      mockRedis.get.mockResolvedValue(null);\n      mockRedis.setex.mockRejectedValue(new Error('Cache write failed'));\n\n      const fetchFn = jest.fn().mockResolvedValue(freshData);\n      const result = await cacheService.getOrSet(mockKey, fetchFn, mockTTL);\n\n      expect(result).toEqual(freshData);\n    });\n  });\n\n  describe('invalidatePattern', () => {\n    it('should delete keys matching pattern', async () => {\n      const pattern = 'metrics:org:123:*';\n      const matchingKeys = [\n        'metrics:org:123:campaign:1',\n        'metrics:org:123:campaign:2',\n        'metrics:org:123:dashboard',\n      ];\n\n      mockRedis.keys.mockResolvedValue(matchingKeys);\n      mockRedis.del.mockResolvedValue(matchingKeys.length);\n\n      const result = await cacheService.invalidatePattern(pattern);\n\n      expect(mockRedis.keys).toHaveBeenCalledWith(pattern);\n      expect(mockRedis.del).toHaveBeenCalledWith(...matchingKeys);\n      expect(result).toBe(matchingKeys.length);\n    });\n\n    it('should handle empty pattern matches', async () => {\n      const pattern = 'nonexistent:*';\n      mockRedis.keys.mockResolvedValue([]);\n\n      const result = await cacheService.invalidatePattern(pattern);\n\n      expect(mockRedis.keys).toHaveBeenCalledWith(pattern);\n      expect(mockRedis.del).not.toHaveBeenCalled();\n      expect(result).toBe(0);\n    });\n  });\n\n  describe('invalidateCampaign', () => {\n    it('should invalidate all campaign-related cache keys', async () => {\n      const campaignId = '123e4567-e89b-12d3-a456-426614174001';\n      const matchingKeys = [\n        `metrics:campaign:${campaignId}:*`,\n        `dashboard:campaign:${campaignId}`,\n      ];\n\n      mockRedis.keys.mockResolvedValue(matchingKeys);\n      mockRedis.del.mockResolvedValue(matchingKeys.length);\n\n      await cacheService.invalidateCampaign(campaignId);\n\n      expect(mockRedis.keys).toHaveBeenCalledWith(`*:campaign:${campaignId}:*`);\n      expect(mockRedis.del).toHaveBeenCalledWith(...matchingKeys);\n    });\n  });\n\n  describe('invalidateOrganization', () => {\n    it('should invalidate all organization-related cache keys', async () => {\n      const organizationId = '123e4567-e89b-12d3-a456-426614174000';\n      const matchingKeys = [\n        `metrics:org:${organizationId}:*`,\n        `dashboard:org:${organizationId}`,\n      ];\n\n      mockRedis.keys.mockResolvedValue(matchingKeys);\n      mockRedis.del.mockResolvedValue(matchingKeys.length);\n\n      await cacheService.invalidateOrganization(organizationId);\n\n      expect(mockRedis.keys).toHaveBeenCalledWith(`*:org:${organizationId}:*`);\n      expect(mockRedis.del).toHaveBeenCalledWith(...matchingKeys);\n    });\n  });\n\n  describe('getMetrics', () => {\n    it('should return cache metrics', async () => {\n      const mockInfo = 'used_memory:1048576\\r\\nused_memory_human:1.00M\\r\\n';\n      mockRedis.dbsize.mockResolvedValue(100);\n      mockRedis.info.mockResolvedValue(mockInfo);\n\n      const metrics = await cacheService.getMetrics();\n\n      expect(metrics).toHaveProperty('totalKeys', 100);\n      expect(metrics).toHaveProperty('memoryUsage');\n      expect(metrics).toHaveProperty('hitRate');\n      expect(metrics).toHaveProperty('missRate');\n      expect(typeof metrics.memoryUsage).toBe('string');\n    });\n\n    it('should handle Redis info parsing errors', async () => {\n      mockRedis.dbsize.mockResolvedValue(100);\n      mockRedis.info.mockResolvedValue('invalid info format');\n\n      const metrics = await cacheService.getMetrics();\n\n      expect(metrics.memoryUsage).toBe('Unknown');\n    });\n  });\n\n  describe('healthCheck', () => {\n    it('should return healthy status when Redis is responsive', async () => {\n      mockRedis.ping.mockResolvedValue('PONG');\n\n      const health = await cacheService.healthCheck();\n\n      expect(health).toEqual({\n        status: 'healthy',\n        latency: expect.any(Number),\n        connected: true,\n      });\n      expect(health.latency).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should return unhealthy status when Redis is unresponsive', async () => {\n      mockRedis.ping.mockRejectedValue(new Error('Connection timeout'));\n\n      const health = await cacheService.healthCheck();\n\n      expect(health).toEqual({\n        status: 'unhealthy',\n        latency: -1,\n        connected: false,\n        error: 'Connection timeout',\n      });\n    });\n  });\n\n  describe('Cache Decorators', () => {\n    class TestService {\n      private cacheService: CacheService;\n\n      constructor(cacheService: CacheService) {\n        this.cacheService = cacheService;\n      }\n\n      @CacheService.cached('test:method', 300)\n      async expensiveMethod(param: string): Promise<string> {\n        // Simulate expensive operation\n        await new Promise(resolve => setTimeout(resolve, 100));\n        return `result-${param}`;\n      }\n    }\n\n    it('should cache method results', async () => {\n      const testService = new TestService(cacheService);\n      const param = 'test-param';\n      const expectedResult = `result-${param}`;\n\n      // Mock cache miss, then hit\n      mockRedis.get.mockResolvedValueOnce(null);\n      mockRedis.setex.mockResolvedValue('OK');\n      mockRedis.get.mockResolvedValueOnce(JSON.stringify(expectedResult));\n\n      // First call - should execute method and cache result\n      const result1 = await testService.expensiveMethod(param);\n      expect(result1).toBe(expectedResult);\n\n      // Second call - should return cached result\n      const result2 = await testService.expensiveMethod(param);\n      expect(result2).toBe(expectedResult);\n\n      expect(mockRedis.get).toHaveBeenCalledTimes(2);\n      expect(mockRedis.setex).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Performance', () => {\n    it('should handle high-frequency operations', async () => {\n      const operations = 100;\n      const promises: Promise<any>[] = [];\n\n      mockRedis.get.mockResolvedValue(JSON.stringify(mockValue));\n\n      for (let i = 0; i < operations; i++) {\n        promises.push(cacheService.get(`key:${i}`));\n      }\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(operations);\n      expect(mockRedis.get).toHaveBeenCalledTimes(operations);\n    });\n\n    it('should complete operations within reasonable time', async () => {\n      mockRedis.get.mockResolvedValue(JSON.stringify(mockValue));\n\n      const startTime = Date.now();\n      await cacheService.get(mockKey);\n      const endTime = Date.now();\n\n      // Should complete within 100ms (generous for testing)\n      expect(endTime - startTime).toBeLessThan(100);\n    });\n  });\n\n  describe('Memory Management', () => {\n    it('should handle large data sets', async () => {\n      const largeData = {\n        items: Array.from({ length: 10000 }, (_, i) => ({\n          id: i,\n          data: `item-${i}`.repeat(100),\n        })),\n      };\n\n      mockRedis.setex.mockResolvedValue('OK');\n\n      await expect(cacheService.set(mockKey, largeData, mockTTL)).resolves.not.toThrow();\n\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        mockKey,\n        mockTTL,\n        JSON.stringify(largeData)\n      );\n    });\n  });\n\n  describe('Concurrent Operations', () => {\n    it('should handle concurrent getOrSet operations safely', async () => {\n      const concurrentCalls = 10;\n      const fetchFn = jest.fn().mockResolvedValue(mockValue);\n\n      // First call gets cache miss, others should wait\n      mockRedis.get.mockResolvedValueOnce(null);\n      mockRedis.setex.mockResolvedValue('OK');\n\n      const promises = Array.from({ length: concurrentCalls }, () =>\n        cacheService.getOrSet(mockKey, fetchFn, mockTTL)\n      );\n\n      const results = await Promise.all(promises);\n\n      // All should return the same result\n      results.forEach(result => {\n        expect(result).toEqual(mockValue);\n      });\n\n      // Fetch function should only be called once\n      expect(fetchFn).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n\n// Integration tests\ndescribe('CacheService Integration', () => {\n  // These tests would require a real Redis connection\n  // and should be run in a separate test environment\n  \n  it.skip('should integrate with real Redis instance', async () => {\n    // Integration test implementation\n  });\n\n  it.skip('should handle Redis failover scenarios', async () => {\n    // Integration test implementation\n  });\n\n  it.skip('should maintain data consistency under load', async () => {\n    // Integration test implementation\n  });\n});"],"version":3}