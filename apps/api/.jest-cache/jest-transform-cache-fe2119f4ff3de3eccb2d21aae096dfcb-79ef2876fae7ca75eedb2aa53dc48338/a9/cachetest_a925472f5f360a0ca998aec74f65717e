4f58ead1bc08e7dcb54cfab65a14a956
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock Redis
globals_1.jest.mock('ioredis');
const ioredis_1 = __importDefault(require("ioredis"));
const cache_service_1 = require("../services/cache.service");
(0, globals_1.describe)('CacheService', () => {
    let cacheService;
    let mockRedis;
    const mockKey = 'test:key';
    const mockValue = { data: 'test value', timestamp: Date.now() };
    const mockTTL = 300; // 5 minutes
    (0, globals_1.beforeEach)(() => {
        // Reset mocks
        globals_1.jest.clearAllMocks();
        // Setup Redis mock
        mockRedis = {
            get: globals_1.jest.fn(),
            set: globals_1.jest.fn(),
            setex: globals_1.jest.fn(),
            del: globals_1.jest.fn(),
            keys: globals_1.jest.fn(),
            pipeline: globals_1.jest.fn(),
            ping: globals_1.jest.fn(),
            info: globals_1.jest.fn(),
            dbsize: globals_1.jest.fn(),
            flushdb: globals_1.jest.fn(),
            exists: globals_1.jest.fn(),
            ttl: globals_1.jest.fn(),
            expire: globals_1.jest.fn(),
            incr: globals_1.jest.fn(),
            decr: globals_1.jest.fn(),
            hget: globals_1.jest.fn(),
            hset: globals_1.jest.fn(),
            hdel: globals_1.jest.fn(),
            hgetall: globals_1.jest.fn(),
            zadd: globals_1.jest.fn(),
            zrange: globals_1.jest.fn(),
            zrem: globals_1.jest.fn(),
            zcard: globals_1.jest.fn(),
            disconnect: globals_1.jest.fn(),
        };
        // Mock Redis constructor
        ioredis_1.default.mockImplementation(() => mockRedis);
        cacheService = new cache_service_1.CacheService();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.restoreAllMocks();
    });
    (0, globals_1.describe)('get', () => {
        (0, globals_1.it)('should retrieve and parse cached value', async () => {
            const serializedValue = JSON.stringify(mockValue);
            mockRedis.get.mockResolvedValue(serializedValue);
            const result = await cacheService.get(mockKey);
            (0, globals_1.expect)(mockRedis.get).toHaveBeenCalledWith(mockKey);
            (0, globals_1.expect)(result).toEqual(mockValue);
        });
        (0, globals_1.it)('should return null when key does not exist', async () => {
            mockRedis.get.mockResolvedValue(null);
            const result = await cacheService.get(mockKey);
            (0, globals_1.expect)(result).toBeNull();
        });
        (0, globals_1.it)('should handle JSON parsing errors gracefully', async () => {
            mockRedis.get.mockResolvedValue('invalid json');
            const result = await cacheService.get(mockKey);
            (0, globals_1.expect)(result).toBeNull();
        });
        (0, globals_1.it)('should handle Redis errors', async () => {
            mockRedis.get.mockRejectedValue(new Error('Redis connection failed'));
            await (0, globals_1.expect)(cacheService.get(mockKey)).rejects.toThrow('Redis connection failed');
        });
    });
    (0, globals_1.describe)('set', () => {
        (0, globals_1.it)('should store value with TTL', async () => {
            mockRedis.setex.mockResolvedValue('OK');
            await cacheService.set(mockKey, mockValue, mockTTL);
            (0, globals_1.expect)(mockRedis.setex).toHaveBeenCalledWith(mockKey, mockTTL, JSON.stringify(mockValue));
        });
        (0, globals_1.it)('should store value without TTL', async () => {
            mockRedis.set.mockResolvedValue('OK');
            await cacheService.set(mockKey, mockValue);
            (0, globals_1.expect)(mockRedis.set).toHaveBeenCalledWith(mockKey, JSON.stringify(mockValue));
        });
        (0, globals_1.it)('should handle Redis errors during set', async () => {
            mockRedis.setex.mockRejectedValue(new Error('Redis write failed'));
            await (0, globals_1.expect)(cacheService.set(mockKey, mockValue, mockTTL)).rejects.toThrow('Redis write failed');
        });
    });
    (0, globals_1.describe)('del', () => {
        (0, globals_1.it)('should delete single key', async () => {
            mockRedis.del.mockResolvedValue(1);
            const result = await cacheService.del(mockKey);
            (0, globals_1.expect)(mockRedis.del).toHaveBeenCalledWith(mockKey);
            (0, globals_1.expect)(result).toBe(1);
        });
        (0, globals_1.it)('should delete multiple keys', async () => {
            const keys = ['key1', 'key2', 'key3'];
            mockRedis.del.mockResolvedValue(3);
            const result = await cacheService.del(...keys);
            (0, globals_1.expect)(mockRedis.del).toHaveBeenCalledWith(...keys);
            (0, globals_1.expect)(result).toBe(3);
        });
        (0, globals_1.it)('should return 0 when no keys are deleted', async () => {
            mockRedis.del.mockResolvedValue(0);
            const result = await cacheService.del('nonexistent:key');
            (0, globals_1.expect)(result).toBe(0);
        });
    });
    (0, globals_1.describe)('getOrSet', () => {
        (0, globals_1.it)('should return cached value when available', async () => {
            const serializedValue = JSON.stringify(mockValue);
            mockRedis.get.mockResolvedValue(serializedValue);
            const fetchFn = globals_1.jest.fn().mockResolvedValue('fresh data');
            const result = await cacheService.getOrSet(mockKey, fetchFn, mockTTL);
            (0, globals_1.expect)(mockRedis.get).toHaveBeenCalledWith(mockKey);
            (0, globals_1.expect)(fetchFn).not.toHaveBeenCalled();
            (0, globals_1.expect)(result).toEqual(mockValue);
        });
        (0, globals_1.it)('should fetch and cache value when not in cache', async () => {
            const freshData = { fresh: 'data' };
            mockRedis.get.mockResolvedValue(null);
            mockRedis.setex.mockResolvedValue('OK');
            const fetchFn = globals_1.jest.fn().mockResolvedValue(freshData);
            const result = await cacheService.getOrSet(mockKey, fetchFn, mockTTL);
            (0, globals_1.expect)(mockRedis.get).toHaveBeenCalledWith(mockKey);
            (0, globals_1.expect)(fetchFn).toHaveBeenCalled();
            (0, globals_1.expect)(mockRedis.setex).toHaveBeenCalledWith(mockKey, mockTTL, JSON.stringify(freshData));
            (0, globals_1.expect)(result).toEqual(freshData);
        });
        (0, globals_1.it)('should handle fetch function errors', async () => {
            mockRedis.get.mockResolvedValue(null);
            const fetchFn = globals_1.jest.fn().mockRejectedValue(new Error('Fetch failed'));
            await (0, globals_1.expect)(cacheService.getOrSet(mockKey, fetchFn, mockTTL)).rejects.toThrow('Fetch failed');
        });
        (0, globals_1.it)('should return fresh data even if caching fails', async () => {
            const freshData = { fresh: 'data' };
            mockRedis.get.mockResolvedValue(null);
            mockRedis.setex.mockRejectedValue(new Error('Cache write failed'));
            const fetchFn = globals_1.jest.fn().mockResolvedValue(freshData);
            const result = await cacheService.getOrSet(mockKey, fetchFn, mockTTL);
            (0, globals_1.expect)(result).toEqual(freshData);
        });
    });
    (0, globals_1.describe)('invalidatePattern', () => {
        (0, globals_1.it)('should delete keys matching pattern', async () => {
            const pattern = 'metrics:org:123:*';
            const matchingKeys = [
                'metrics:org:123:campaign:1',
                'metrics:org:123:campaign:2',
                'metrics:org:123:dashboard',
            ];
            mockRedis.keys.mockResolvedValue(matchingKeys);
            mockRedis.del.mockResolvedValue(matchingKeys.length);
            const result = await cacheService.invalidatePattern(pattern);
            (0, globals_1.expect)(mockRedis.keys).toHaveBeenCalledWith(pattern);
            (0, globals_1.expect)(mockRedis.del).toHaveBeenCalledWith(...matchingKeys);
            (0, globals_1.expect)(result).toBe(matchingKeys.length);
        });
        (0, globals_1.it)('should handle empty pattern matches', async () => {
            const pattern = 'nonexistent:*';
            mockRedis.keys.mockResolvedValue([]);
            const result = await cacheService.invalidatePattern(pattern);
            (0, globals_1.expect)(mockRedis.keys).toHaveBeenCalledWith(pattern);
            (0, globals_1.expect)(mockRedis.del).not.toHaveBeenCalled();
            (0, globals_1.expect)(result).toBe(0);
        });
    });
    (0, globals_1.describe)('invalidateCampaign', () => {
        (0, globals_1.it)('should invalidate all campaign-related cache keys', async () => {
            const campaignId = '123e4567-e89b-12d3-a456-426614174001';
            const matchingKeys = [
                `metrics:campaign:${campaignId}:*`,
                `dashboard:campaign:${campaignId}`,
            ];
            mockRedis.keys.mockResolvedValue(matchingKeys);
            mockRedis.del.mockResolvedValue(matchingKeys.length);
            await cacheService.invalidateCampaign(campaignId);
            (0, globals_1.expect)(mockRedis.keys).toHaveBeenCalledWith(`*:campaign:${campaignId}:*`);
            (0, globals_1.expect)(mockRedis.del).toHaveBeenCalledWith(...matchingKeys);
        });
    });
    (0, globals_1.describe)('invalidateOrganization', () => {
        (0, globals_1.it)('should invalidate all organization-related cache keys', async () => {
            const organizationId = '123e4567-e89b-12d3-a456-426614174000';
            const matchingKeys = [
                `metrics:org:${organizationId}:*`,
                `dashboard:org:${organizationId}`,
            ];
            mockRedis.keys.mockResolvedValue(matchingKeys);
            mockRedis.del.mockResolvedValue(matchingKeys.length);
            await cacheService.invalidateOrganization(organizationId);
            (0, globals_1.expect)(mockRedis.keys).toHaveBeenCalledWith(`*:org:${organizationId}:*`);
            (0, globals_1.expect)(mockRedis.del).toHaveBeenCalledWith(...matchingKeys);
        });
    });
    (0, globals_1.describe)('getMetrics', () => {
        (0, globals_1.it)('should return cache metrics', async () => {
            const mockInfo = 'used_memory:1048576\r\nused_memory_human:1.00M\r\n';
            mockRedis.dbsize.mockResolvedValue(100);
            mockRedis.info.mockResolvedValue(mockInfo);
            const metrics = await cacheService.getMetrics();
            (0, globals_1.expect)(metrics).toHaveProperty('totalKeys', 100);
            (0, globals_1.expect)(metrics).toHaveProperty('memoryUsage');
            (0, globals_1.expect)(metrics).toHaveProperty('hitRate');
            (0, globals_1.expect)(metrics).toHaveProperty('missRate');
            (0, globals_1.expect)(typeof metrics.memoryUsage).toBe('string');
        });
        (0, globals_1.it)('should handle Redis info parsing errors', async () => {
            mockRedis.dbsize.mockResolvedValue(100);
            mockRedis.info.mockResolvedValue('invalid info format');
            const metrics = await cacheService.getMetrics();
            (0, globals_1.expect)(metrics.memoryUsage).toBe('Unknown');
        });
    });
    (0, globals_1.describe)('healthCheck', () => {
        (0, globals_1.it)('should return healthy status when Redis is responsive', async () => {
            mockRedis.ping.mockResolvedValue('PONG');
            const health = await cacheService.healthCheck();
            (0, globals_1.expect)(health).toEqual({
                status: 'healthy',
                latency: globals_1.expect.any(Number),
                connected: true,
            });
            (0, globals_1.expect)(health.latency).toBeGreaterThanOrEqual(0);
        });
        (0, globals_1.it)('should return unhealthy status when Redis is unresponsive', async () => {
            mockRedis.ping.mockRejectedValue(new Error('Connection timeout'));
            const health = await cacheService.healthCheck();
            (0, globals_1.expect)(health).toEqual({
                status: 'unhealthy',
                latency: -1,
                connected: false,
                error: 'Connection timeout',
            });
        });
    });
    (0, globals_1.describe)('Cache Decorators', () => {
        var _a;
        class TestService {
            cacheService;
            constructor(cacheService) {
                this.cacheService = cacheService;
            }
            async expensiveMethod(param) {
                // Simulate expensive operation
                await new Promise(resolve => setTimeout(resolve, 100));
                return `result-${param}`;
            }
        }
        __decorate([
            cache_service_1.CacheService.cached('test:method', 300),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [String]),
            __metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
        ], TestService.prototype, "expensiveMethod", null);
        (0, globals_1.it)('should cache method results', async () => {
            const testService = new TestService(cacheService);
            const param = 'test-param';
            const expectedResult = `result-${param}`;
            // Mock cache miss, then hit
            mockRedis.get.mockResolvedValueOnce(null);
            mockRedis.setex.mockResolvedValue('OK');
            mockRedis.get.mockResolvedValueOnce(JSON.stringify(expectedResult));
            // First call - should execute method and cache result
            const result1 = await testService.expensiveMethod(param);
            (0, globals_1.expect)(result1).toBe(expectedResult);
            // Second call - should return cached result
            const result2 = await testService.expensiveMethod(param);
            (0, globals_1.expect)(result2).toBe(expectedResult);
            (0, globals_1.expect)(mockRedis.get).toHaveBeenCalledTimes(2);
            (0, globals_1.expect)(mockRedis.setex).toHaveBeenCalledTimes(1);
        });
    });
    (0, globals_1.describe)('Performance', () => {
        (0, globals_1.it)('should handle high-frequency operations', async () => {
            const operations = 100;
            const promises = [];
            mockRedis.get.mockResolvedValue(JSON.stringify(mockValue));
            for (let i = 0; i < operations; i++) {
                promises.push(cacheService.get(`key:${i}`));
            }
            const results = await Promise.all(promises);
            (0, globals_1.expect)(results).toHaveLength(operations);
            (0, globals_1.expect)(mockRedis.get).toHaveBeenCalledTimes(operations);
        });
        (0, globals_1.it)('should complete operations within reasonable time', async () => {
            mockRedis.get.mockResolvedValue(JSON.stringify(mockValue));
            const startTime = Date.now();
            await cacheService.get(mockKey);
            const endTime = Date.now();
            // Should complete within 100ms (generous for testing)
            (0, globals_1.expect)(endTime - startTime).toBeLessThan(100);
        });
    });
    (0, globals_1.describe)('Memory Management', () => {
        (0, globals_1.it)('should handle large data sets', async () => {
            const largeData = {
                items: Array.from({ length: 10000 }, (_, i) => ({
                    id: i,
                    data: `item-${i}`.repeat(100),
                })),
            };
            mockRedis.setex.mockResolvedValue('OK');
            await (0, globals_1.expect)(cacheService.set(mockKey, largeData, mockTTL)).resolves.not.toThrow();
            (0, globals_1.expect)(mockRedis.setex).toHaveBeenCalledWith(mockKey, mockTTL, JSON.stringify(largeData));
        });
    });
    (0, globals_1.describe)('Concurrent Operations', () => {
        (0, globals_1.it)('should handle concurrent getOrSet operations safely', async () => {
            const concurrentCalls = 10;
            const fetchFn = globals_1.jest.fn().mockResolvedValue(mockValue);
            // First call gets cache miss, others should wait
            mockRedis.get.mockResolvedValueOnce(null);
            mockRedis.setex.mockResolvedValue('OK');
            const promises = Array.from({ length: concurrentCalls }, () => cacheService.getOrSet(mockKey, fetchFn, mockTTL));
            const results = await Promise.all(promises);
            // All should return the same result
            results.forEach(result => {
                (0, globals_1.expect)(result).toEqual(mockValue);
            });
            // Fetch function should only be called once
            (0, globals_1.expect)(fetchFn).toHaveBeenCalledTimes(1);
        });
    });
});
// Integration tests
(0, globals_1.describe)('CacheService Integration', () => {
    // These tests would require a real Redis connection
    // and should be run in a separate test environment
    globals_1.it.skip('should integrate with real Redis instance', async () => {
        // Integration test implementation
    });
    globals_1.it.skip('should handle Redis failover scenarios', async () => {
        // Integration test implementation
    });
    globals_1.it.skip('should maintain data consistency under load', async () => {
        // Integration test implementation
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,