f143e93ce35ff961265435cabc55bd30
/* istanbul ignore next */
function cov_1owcusxl34() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\analytics.ts";
  var hash = "8c36cb83399aba6f5e4da2d68dc3a5c8cef26680";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\analytics.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 29
        },
        end: {
          line: 11,
          column: 2
        }
      },
      "1": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "2": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 50,
          column: 7
        }
      },
      "3": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "4": {
        start: {
          line: 32,
          column: 26
        },
        end: {
          line: 32,
          column: 38
        }
      },
      "5": {
        start: {
          line: 33,
          column: 28
        },
        end: {
          line: 33,
          column: 71
        }
      },
      "6": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "7": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "8": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 75
        }
      },
      "9": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "10": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 97,
          column: 7
        }
      },
      "11": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "12": {
        start: {
          line: 68,
          column: 31
        },
        end: {
          line: 68,
          column: 43
        }
      },
      "13": {
        start: {
          line: 69,
          column: 29
        },
        end: {
          line: 69,
          column: 31
        }
      },
      "14": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "15": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "16": {
        start: {
          line: 72,
          column: 36
        },
        end: {
          line: 72,
          column: 79
        }
      },
      "17": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 43
        }
      },
      "18": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 79
        }
      },
      "19": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "20": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "21": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 82
        }
      },
      "22": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 95,
          column: 15
        }
      },
      "23": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 129,
          column: 7
        }
      },
      "24": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "25": {
        start: {
          line: 114,
          column: 62
        },
        end: {
          line: 114,
          column: 75
        }
      },
      "26": {
        start: {
          line: 115,
          column: 34
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "27": {
        start: {
          line: 115,
          column: 94
        },
        end: {
          line: 120,
          column: 14
        }
      },
      "28": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 55
        }
      },
      "29": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 75
        }
      },
      "30": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "31": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 149,
          column: 7
        }
      },
      "32": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "33": {
        start: {
          line: 135,
          column: 31
        },
        end: {
          line: 135,
          column: 45
        }
      },
      "34": {
        start: {
          line: 136,
          column: 43
        },
        end: {
          line: 136,
          column: 56
        }
      },
      "35": {
        start: {
          line: 137,
          column: 34
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "36": {
        start: {
          line: 137,
          column: 89
        },
        end: {
          line: 140,
          column: 14
        }
      },
      "37": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 55
        }
      },
      "38": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 70
        }
      },
      "39": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "40": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 170,
          column: 7
        }
      },
      "41": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "42": {
        start: {
          line: 155,
          column: 34
        },
        end: {
          line: 155,
          column: 48
        }
      },
      "43": {
        start: {
          line: 156,
          column: 52
        },
        end: {
          line: 156,
          column: 65
        }
      },
      "44": {
        start: {
          line: 157,
          column: 33
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "45": {
        start: {
          line: 157,
          column: 87
        },
        end: {
          line: 161,
          column: 14
        }
      },
      "46": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 54
        }
      },
      "47": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 69
        }
      },
      "48": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "49": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 37
        }
      },
      "50": {
        start: {
          line: 175,
          column: 22
        },
        end: {
          line: 175,
          column: 51
        }
      },
      "51": {
        start: {
          line: 176,
          column: 22
        },
        end: {
          line: 176,
          column: 32
        }
      },
      "52": {
        start: {
          line: 177,
          column: 22
        },
        end: {
          line: 177,
          column: 51
        }
      },
      "53": {
        start: {
          line: 179,
          column: 26
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "54": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 188,
          column: 45
        }
      },
      "55": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 190,
          column: 50
        }
      },
      "56": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 191,
          column: 19
        }
      },
      "57": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 221,
          column: 5
        }
      },
      "58": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "59": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 58
        }
      },
      "60": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 65
        }
      },
      "61": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 20
        }
      },
      "62": {
        start: {
          line: 226,
          column: 4
        },
        end: {
          line: 240,
          column: 5
        }
      },
      "63": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "64": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "65": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 71
        }
      },
      "66": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 252,
          column: 6
        }
      },
      "67": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 264,
          column: 6
        }
      },
      "68": {
        start: {
          line: 269,
          column: 4
        },
        end: {
          line: 275,
          column: 6
        }
      },
      "69": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 278,
          column: 74
        }
      }
    },
    fnMap: {
      "0": {
        name: "analyticsRoutes",
        decl: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 15,
            column: 45
          }
        },
        loc: {
          start: {
            line: 15,
            column: 55
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 30,
            column: 7
          },
          end: {
            line: 30,
            column: 8
          }
        },
        loc: {
          start: {
            line: 30,
            column: 33
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 7
          },
          end: {
            line: 66,
            column: 8
          }
        },
        loc: {
          start: {
            line: 66,
            column: 33
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 112,
            column: 7
          },
          end: {
            line: 112,
            column: 8
          }
        },
        loc: {
          start: {
            line: 112,
            column: 33
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 112
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 115,
            column: 88
          },
          end: {
            line: 115,
            column: 89
          }
        },
        loc: {
          start: {
            line: 115,
            column: 94
          },
          end: {
            line: 120,
            column: 14
          }
        },
        line: 115
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 133,
            column: 7
          },
          end: {
            line: 133,
            column: 8
          }
        },
        loc: {
          start: {
            line: 133,
            column: 33
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 133
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 137,
            column: 83
          },
          end: {
            line: 137,
            column: 84
          }
        },
        loc: {
          start: {
            line: 137,
            column: 89
          },
          end: {
            line: 140,
            column: 14
          }
        },
        line: 137
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 153,
            column: 7
          },
          end: {
            line: 153,
            column: 8
          }
        },
        loc: {
          start: {
            line: 153,
            column: 33
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 153
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 157,
            column: 81
          },
          end: {
            line: 157,
            column: 82
          }
        },
        loc: {
          start: {
            line: 157,
            column: 87
          },
          end: {
            line: 161,
            column: 14
          }
        },
        line: 157
      },
      "9": {
        name: "processAnalyticsEvent",
        decl: {
          start: {
            line: 173,
            column: 15
          },
          end: {
            line: 173,
            column: 36
          }
        },
        loc: {
          start: {
            line: 173,
            column: 53
          },
          end: {
            line: 192,
            column: 1
          }
        },
        line: 173
      },
      "10": {
        name: "storeAnalyticsEvent",
        decl: {
          start: {
            line: 193,
            column: 15
          },
          end: {
            line: 193,
            column: 34
          }
        },
        loc: {
          start: {
            line: 193,
            column: 42
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 193
      },
      "11": {
        name: "processRealTimeAnalytics",
        decl: {
          start: {
            line: 223,
            column: 15
          },
          end: {
            line: 223,
            column: 39
          }
        },
        loc: {
          start: {
            line: 223,
            column: 47
          },
          end: {
            line: 241,
            column: 1
          }
        },
        line: 223
      },
      "12": {
        name: "getAnalyticsDashboard",
        decl: {
          start: {
            line: 242,
            column: 15
          },
          end: {
            line: 242,
            column: 36
          }
        },
        loc: {
          start: {
            line: 242,
            column: 46
          },
          end: {
            line: 253,
            column: 1
          }
        },
        line: 242
      },
      "13": {
        name: "getUserAnalytics",
        decl: {
          start: {
            line: 254,
            column: 15
          },
          end: {
            line: 254,
            column: 31
          }
        },
        loc: {
          start: {
            line: 254,
            column: 49
          },
          end: {
            line: 265,
            column: 1
          }
        },
        line: 254
      },
      "14": {
        name: "getEventMetrics",
        decl: {
          start: {
            line: 266,
            column: 15
          },
          end: {
            line: 266,
            column: 30
          }
        },
        loc: {
          start: {
            line: 266,
            column: 51
          },
          end: {
            line: 276,
            column: 1
          }
        },
        line: 266
      },
      "15": {
        name: "generateEventId",
        decl: {
          start: {
            line: 277,
            column: 9
          },
          end: {
            line: 277,
            column: 24
          }
        },
        loc: {
          start: {
            line: 277,
            column: 27
          },
          end: {
            line: 279,
            column: 1
          }
        },
        line: 277
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 116,
            column: 27
          },
          end: {
            line: 116,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 116,
            column: 39
          },
          end: {
            line: 116,
            column: 58
          }
        }, {
          start: {
            line: 116,
            column: 61
          },
          end: {
            line: 116,
            column: 108
          }
        }],
        line: 116
      },
      "1": {
        loc: {
          start: {
            line: 117,
            column: 25
          },
          end: {
            line: 117,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 35
          },
          end: {
            line: 117,
            column: 52
          }
        }, {
          start: {
            line: 117,
            column: 55
          },
          end: {
            line: 117,
            column: 65
          }
        }],
        line: 117
      },
      "2": {
        loc: {
          start: {
            line: 138,
            column: 27
          },
          end: {
            line: 138,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 39
          },
          end: {
            line: 138,
            column: 58
          }
        }, {
          start: {
            line: 138,
            column: 61
          },
          end: {
            line: 138,
            column: 108
          }
        }],
        line: 138
      },
      "3": {
        loc: {
          start: {
            line: 139,
            column: 25
          },
          end: {
            line: 139,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 35
          },
          end: {
            line: 139,
            column: 52
          }
        }, {
          start: {
            line: 139,
            column: 55
          },
          end: {
            line: 139,
            column: 65
          }
        }],
        line: 139
      },
      "4": {
        loc: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 39
          },
          end: {
            line: 158,
            column: 58
          }
        }, {
          start: {
            line: 158,
            column: 61
          },
          end: {
            line: 158,
            column: 108
          }
        }],
        line: 158
      },
      "5": {
        loc: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 35
          },
          end: {
            line: 159,
            column: 52
          }
        }, {
          start: {
            line: 159,
            column: 55
          },
          end: {
            line: 159,
            column: 65
          }
        }],
        line: 159
      },
      "6": {
        loc: {
          start: {
            line: 160,
            column: 25
          },
          end: {
            line: 160,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 25
          },
          end: {
            line: 160,
            column: 32
          }
        }, {
          start: {
            line: 160,
            column: 36
          },
          end: {
            line: 160,
            column: 41
          }
        }],
        line: 160
      },
      "7": {
        loc: {
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 37
          }
        }, {
          start: {
            line: 175,
            column: 41
          },
          end: {
            line: 175,
            column: 51
          }
        }],
        line: 175
      },
      "8": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "9": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "10": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\analytics.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\analytics.ts"],
      sourcesContent: ["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { z } from 'zod';\nimport { monitorDatabaseQuery, addBreadcrumb } from '../lib/sentry';\n\n// Validation schemas\nconst analyticsEventSchema = z.object({\n  name: z.string().min(1).max(100),\n  properties: z.record(z.any()).optional(),\n  userId: z.string().optional(),\n  timestamp: z.number().optional(),\n  sessionId: z.string().optional(),\n  deviceId: z.string().optional(),\n});\n\nconst batchAnalyticsSchema = z.object({\n  events: z.array(analyticsEventSchema).max(100),\n});\n\ninterface AnalyticsEvent {\n  name: string;\n  properties?: Record<string, any>;\n  userId?: string;\n  timestamp?: number;\n  sessionId?: string;\n  deviceId?: string;\n}\n\ninterface AnalyticsRequest extends FastifyRequest {\n  body: AnalyticsEvent | { events: AnalyticsEvent[] };\n}\n\nexport default async function analyticsRoutes(fastify: FastifyInstance) {\n  // Single event tracking\n  fastify.post('/analytics', {\n    schema: {\n      body: analyticsEventSchema,\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            eventId: { type: 'string' },\n          },\n        },\n      },\n    },\n  }, async (request: AnalyticsRequest, reply: FastifyReply) => {\n    try {\n      const event = request.body as AnalyticsEvent;\n      const eventId = await processAnalyticsEvent(event, request);\n      \n      addBreadcrumb('Analytics event processed', 'analytics', {\n        eventName: event.name,\n        eventId,\n      });\n      \n      return reply.code(200).send({\n        success: true,\n        eventId,\n      });\n    } catch (error) {\n      fastify.log.error('Failed to process analytics event:', error);\n      return reply.code(500).send({\n        success: false,\n        error: 'Failed to process analytics event',\n      });\n    }\n  });\n\n  // Batch event tracking\n  fastify.post('/analytics/batch', {\n    schema: {\n      body: batchAnalyticsSchema,\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            processedCount: { type: 'number' },\n            eventIds: { type: 'array', items: { type: 'string' } },\n          },\n        },\n      },\n    },\n  }, async (request: AnalyticsRequest, reply: FastifyReply) => {\n    try {\n      const { events } = request.body as { events: AnalyticsEvent[] };\n      const eventIds: string[] = [];\n      \n      for (const event of events) {\n        try {\n          const eventId = await processAnalyticsEvent(event, request);\n          eventIds.push(eventId);\n        } catch (error) {\n          fastify.log.error('Failed to process batch event:', error);\n          // Continue processing other events\n        }\n      }\n      \n      addBreadcrumb('Batch analytics events processed', 'analytics', {\n        totalEvents: events.length,\n        processedCount: eventIds.length,\n      });\n      \n      return reply.code(200).send({\n        success: true,\n        processedCount: eventIds.length,\n        eventIds,\n      });\n    } catch (error) {\n      fastify.log.error('Failed to process batch analytics events:', error);\n      return reply.code(500).send({\n        success: false,\n        error: 'Failed to process batch analytics events',\n      });\n    }\n  });\n\n  // Analytics dashboard data\n  fastify.get('/analytics/dashboard', {\n    preHandler: [fastify.authenticate], // Require authentication\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: { type: 'string', format: 'date' },\n          endDate: { type: 'string', format: 'date' },\n          userId: { type: 'string' },\n          eventName: { type: 'string' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { startDate, endDate, userId, eventName } = request.query as any;\n      \n      const dashboardData = await monitorDatabaseQuery(\n        'get_analytics_dashboard',\n        () => getAnalyticsDashboard({\n          startDate: startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n          endDate: endDate ? new Date(endDate) : new Date(),\n          userId,\n          eventName,\n        })\n      );\n      \n      return reply.code(200).send(dashboardData);\n    } catch (error) {\n      fastify.log.error('Failed to get analytics dashboard:', error);\n      return reply.code(500).send({\n        error: 'Failed to get analytics dashboard',\n      });\n    }\n  });\n\n  // User analytics\n  fastify.get('/analytics/users/:userId', {\n    preHandler: [fastify.authenticate],\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { userId } = request.params as { userId: string };\n      const { startDate, endDate } = request.query as any;\n      \n      const userAnalytics = await monitorDatabaseQuery(\n        'get_user_analytics',\n        () => getUserAnalytics(userId, {\n          startDate: startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n          endDate: endDate ? new Date(endDate) : new Date(),\n        })\n      );\n      \n      return reply.code(200).send(userAnalytics);\n    } catch (error) {\n      fastify.log.error('Failed to get user analytics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get user analytics',\n      });\n    }\n  });\n\n  // Event metrics\n  fastify.get('/analytics/events/:eventName/metrics', {\n    preHandler: [fastify.authenticate],\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { eventName } = request.params as { eventName: string };\n      const { startDate, endDate, groupBy } = request.query as any;\n      \n      const eventMetrics = await monitorDatabaseQuery(\n        'get_event_metrics',\n        () => getEventMetrics(eventName, {\n          startDate: startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n          endDate: endDate ? new Date(endDate) : new Date(),\n          groupBy: groupBy || 'day',\n        })\n      );\n      \n      return reply.code(200).send(eventMetrics);\n    } catch (error) {\n      fastify.log.error('Failed to get event metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get event metrics',\n      });\n    }\n  });\n}\n\n// Helper functions\nasync function processAnalyticsEvent(event: AnalyticsEvent, request: FastifyRequest): Promise<string> {\n  const eventId = generateEventId();\n  const timestamp = event.timestamp || Date.now();\n  const ipAddress = request.ip;\n  const userAgent = request.headers['user-agent'];\n  \n  // Enrich event with request metadata\n  const enrichedEvent = {\n    ...event,\n    id: eventId,\n    timestamp,\n    ipAddress,\n    userAgent,\n    createdAt: new Date(),\n  };\n  \n  // Store in database\n  await storeAnalyticsEvent(enrichedEvent);\n  \n  // Process real-time analytics if needed\n  await processRealTimeAnalytics(enrichedEvent);\n  \n  return eventId;\n}\n\nasync function storeAnalyticsEvent(event: any): Promise<void> {\n  // This would typically use your database client (Prisma, etc.)\n  // For now, we'll use a placeholder implementation\n  \n  try {\n    // Example with Prisma (uncomment when Prisma is set up)\n    /*\n    await prisma.analyticsEvent.create({\n      data: {\n        id: event.id,\n        name: event.name,\n        properties: event.properties || {},\n        userId: event.userId,\n        sessionId: event.sessionId,\n        deviceId: event.deviceId,\n        timestamp: new Date(event.timestamp),\n        ipAddress: event.ipAddress,\n        userAgent: event.userAgent,\n      },\n    });\n    */\n    \n    // Placeholder: Log to console in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Analytics event stored:', event);\n    }\n  } catch (error) {\n    console.error('Failed to store analytics event:', error);\n    throw error;\n  }\n}\n\nasync function processRealTimeAnalytics(event: any): Promise<void> {\n  // Process real-time analytics (e.g., update counters, trigger alerts)\n  // This could involve Redis, WebSocket notifications, etc.\n  \n  try {\n    // Example: Update real-time counters\n    if (event.name === 'utm_clicked') {\n      // Increment UTM click counter\n      // await redis.incr(`utm_clicks:${event.properties.utm_id}`);\n    }\n    \n    if (event.name === 'page_view') {\n      // Update active users counter\n      // await redis.sadd('active_users', event.userId);\n    }\n  } catch (error) {\n    console.error('Failed to process real-time analytics:', error);\n    // Don't throw here to avoid failing the main event processing\n  }\n}\n\nasync function getAnalyticsDashboard(filters: {\n  startDate: Date;\n  endDate: Date;\n  userId?: string;\n  eventName?: string;\n}) {\n  // This would query your database for dashboard metrics\n  // Placeholder implementation\n  return {\n    totalEvents: 0,\n    uniqueUsers: 0,\n    topEvents: [],\n    eventsByDay: [],\n    usersByDay: [],\n    conversionRates: {},\n  };\n}\n\nasync function getUserAnalytics(userId: string, filters: {\n  startDate: Date;\n  endDate: Date;\n}) {\n  // This would query user-specific analytics\n  // Placeholder implementation\n  return {\n    userId,\n    totalEvents: 0,\n    lastActive: null,\n    topEvents: [],\n    sessionCount: 0,\n    averageSessionDuration: 0,\n  };\n}\n\nasync function getEventMetrics(eventName: string, filters: {\n  startDate: Date;\n  endDate: Date;\n  groupBy: string;\n}) {\n  // This would query event-specific metrics\n  // Placeholder implementation\n  return {\n    eventName,\n    totalCount: 0,\n    uniqueUsers: 0,\n    averagePropertiesValues: {},\n    timeSeriesData: [],\n  };\n}\n\nfunction generateEventId(): string {\n  return `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8c36cb83399aba6f5e4da2d68dc3a5c8cef26680"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1owcusxl34 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1owcusxl34();
import { z } from 'zod';
import { monitorDatabaseQuery, addBreadcrumb } from '../lib/sentry';
// Validation schemas
const analyticsEventSchema =
/* istanbul ignore next */
(cov_1owcusxl34().s[0]++, z.object({
  name: z.string().min(1).max(100),
  properties: z.record(z.any()).optional(),
  userId: z.string().optional(),
  timestamp: z.number().optional(),
  sessionId: z.string().optional(),
  deviceId: z.string().optional()
}));
const batchAnalyticsSchema =
/* istanbul ignore next */
(cov_1owcusxl34().s[1]++, z.object({
  events: z.array(analyticsEventSchema).max(100)
}));
export default async function analyticsRoutes(fastify) {
  /* istanbul ignore next */
  cov_1owcusxl34().f[0]++;
  cov_1owcusxl34().s[2]++;
  // Single event tracking
  fastify.post('/analytics', {
    schema: {
      body: analyticsEventSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            eventId: {
              type: 'string'
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1owcusxl34().f[1]++;
    cov_1owcusxl34().s[3]++;
    try {
      const event =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[4]++, request.body);
      const eventId =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[5]++, await processAnalyticsEvent(event, request));
      /* istanbul ignore next */
      cov_1owcusxl34().s[6]++;
      addBreadcrumb('Analytics event processed', 'analytics', {
        eventName: event.name,
        eventId
      });
      /* istanbul ignore next */
      cov_1owcusxl34().s[7]++;
      return reply.code(200).send({
        success: true,
        eventId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1owcusxl34().s[8]++;
      fastify.log.error('Failed to process analytics event:', error);
      /* istanbul ignore next */
      cov_1owcusxl34().s[9]++;
      return reply.code(500).send({
        success: false,
        error: 'Failed to process analytics event'
      });
    }
  });
  // Batch event tracking
  /* istanbul ignore next */
  cov_1owcusxl34().s[10]++;
  fastify.post('/analytics/batch', {
    schema: {
      body: batchAnalyticsSchema,
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            processedCount: {
              type: 'number'
            },
            eventIds: {
              type: 'array',
              items: {
                type: 'string'
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1owcusxl34().f[2]++;
    cov_1owcusxl34().s[11]++;
    try {
      const {
        events
      } =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[12]++, request.body);
      const eventIds =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[13]++, []);
      /* istanbul ignore next */
      cov_1owcusxl34().s[14]++;
      for (const event of events) {
        /* istanbul ignore next */
        cov_1owcusxl34().s[15]++;
        try {
          const eventId =
          /* istanbul ignore next */
          (cov_1owcusxl34().s[16]++, await processAnalyticsEvent(event, request));
          /* istanbul ignore next */
          cov_1owcusxl34().s[17]++;
          eventIds.push(eventId);
        } catch (error) {
          /* istanbul ignore next */
          cov_1owcusxl34().s[18]++;
          fastify.log.error('Failed to process batch event:', error);
          // Continue processing other events
        }
      }
      /* istanbul ignore next */
      cov_1owcusxl34().s[19]++;
      addBreadcrumb('Batch analytics events processed', 'analytics', {
        totalEvents: events.length,
        processedCount: eventIds.length
      });
      /* istanbul ignore next */
      cov_1owcusxl34().s[20]++;
      return reply.code(200).send({
        success: true,
        processedCount: eventIds.length,
        eventIds
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1owcusxl34().s[21]++;
      fastify.log.error('Failed to process batch analytics events:', error);
      /* istanbul ignore next */
      cov_1owcusxl34().s[22]++;
      return reply.code(500).send({
        success: false,
        error: 'Failed to process batch analytics events'
      });
    }
  });
  // Analytics dashboard data
  /* istanbul ignore next */
  cov_1owcusxl34().s[23]++;
  fastify.get('/analytics/dashboard', {
    preHandler: [fastify.authenticate],
    // Require authentication
    schema: {
      querystring: {
        type: 'object',
        properties: {
          startDate: {
            type: 'string',
            format: 'date'
          },
          endDate: {
            type: 'string',
            format: 'date'
          },
          userId: {
            type: 'string'
          },
          eventName: {
            type: 'string'
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1owcusxl34().f[3]++;
    cov_1owcusxl34().s[24]++;
    try {
      const {
        startDate,
        endDate,
        userId,
        eventName
      } =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[25]++, request.query);
      const dashboardData =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[26]++, await monitorDatabaseQuery('get_analytics_dashboard', () => {
        /* istanbul ignore next */
        cov_1owcusxl34().f[4]++;
        cov_1owcusxl34().s[27]++;
        return getAnalyticsDashboard({
          startDate: startDate ?
          /* istanbul ignore next */
          (cov_1owcusxl34().b[0][0]++, new Date(startDate)) :
          /* istanbul ignore next */
          (cov_1owcusxl34().b[0][1]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)),
          endDate: endDate ?
          /* istanbul ignore next */
          (cov_1owcusxl34().b[1][0]++, new Date(endDate)) :
          /* istanbul ignore next */
          (cov_1owcusxl34().b[1][1]++, new Date()),
          userId,
          eventName
        });
      }));
      /* istanbul ignore next */
      cov_1owcusxl34().s[28]++;
      return reply.code(200).send(dashboardData);
    } catch (error) {
      /* istanbul ignore next */
      cov_1owcusxl34().s[29]++;
      fastify.log.error('Failed to get analytics dashboard:', error);
      /* istanbul ignore next */
      cov_1owcusxl34().s[30]++;
      return reply.code(500).send({
        error: 'Failed to get analytics dashboard'
      });
    }
  });
  // User analytics
  /* istanbul ignore next */
  cov_1owcusxl34().s[31]++;
  fastify.get('/analytics/users/:userId', {
    preHandler: [fastify.authenticate]
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1owcusxl34().f[5]++;
    cov_1owcusxl34().s[32]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[33]++, request.params);
      const {
        startDate,
        endDate
      } =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[34]++, request.query);
      const userAnalytics =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[35]++, await monitorDatabaseQuery('get_user_analytics', () => {
        /* istanbul ignore next */
        cov_1owcusxl34().f[6]++;
        cov_1owcusxl34().s[36]++;
        return getUserAnalytics(userId, {
          startDate: startDate ?
          /* istanbul ignore next */
          (cov_1owcusxl34().b[2][0]++, new Date(startDate)) :
          /* istanbul ignore next */
          (cov_1owcusxl34().b[2][1]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)),
          endDate: endDate ?
          /* istanbul ignore next */
          (cov_1owcusxl34().b[3][0]++, new Date(endDate)) :
          /* istanbul ignore next */
          (cov_1owcusxl34().b[3][1]++, new Date())
        });
      }));
      /* istanbul ignore next */
      cov_1owcusxl34().s[37]++;
      return reply.code(200).send(userAnalytics);
    } catch (error) {
      /* istanbul ignore next */
      cov_1owcusxl34().s[38]++;
      fastify.log.error('Failed to get user analytics:', error);
      /* istanbul ignore next */
      cov_1owcusxl34().s[39]++;
      return reply.code(500).send({
        error: 'Failed to get user analytics'
      });
    }
  });
  // Event metrics
  /* istanbul ignore next */
  cov_1owcusxl34().s[40]++;
  fastify.get('/analytics/events/:eventName/metrics', {
    preHandler: [fastify.authenticate]
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_1owcusxl34().f[7]++;
    cov_1owcusxl34().s[41]++;
    try {
      const {
        eventName
      } =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[42]++, request.params);
      const {
        startDate,
        endDate,
        groupBy
      } =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[43]++, request.query);
      const eventMetrics =
      /* istanbul ignore next */
      (cov_1owcusxl34().s[44]++, await monitorDatabaseQuery('get_event_metrics', () => {
        /* istanbul ignore next */
        cov_1owcusxl34().f[8]++;
        cov_1owcusxl34().s[45]++;
        return getEventMetrics(eventName, {
          startDate: startDate ?
          /* istanbul ignore next */
          (cov_1owcusxl34().b[4][0]++, new Date(startDate)) :
          /* istanbul ignore next */
          (cov_1owcusxl34().b[4][1]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)),
          endDate: endDate ?
          /* istanbul ignore next */
          (cov_1owcusxl34().b[5][0]++, new Date(endDate)) :
          /* istanbul ignore next */
          (cov_1owcusxl34().b[5][1]++, new Date()),
          groupBy:
          /* istanbul ignore next */
          (cov_1owcusxl34().b[6][0]++, groupBy) ||
          /* istanbul ignore next */
          (cov_1owcusxl34().b[6][1]++, 'day')
        });
      }));
      /* istanbul ignore next */
      cov_1owcusxl34().s[46]++;
      return reply.code(200).send(eventMetrics);
    } catch (error) {
      /* istanbul ignore next */
      cov_1owcusxl34().s[47]++;
      fastify.log.error('Failed to get event metrics:', error);
      /* istanbul ignore next */
      cov_1owcusxl34().s[48]++;
      return reply.code(500).send({
        error: 'Failed to get event metrics'
      });
    }
  });
}
// Helper functions
async function processAnalyticsEvent(event, request) {
  /* istanbul ignore next */
  cov_1owcusxl34().f[9]++;
  const eventId =
  /* istanbul ignore next */
  (cov_1owcusxl34().s[49]++, generateEventId());
  const timestamp =
  /* istanbul ignore next */
  (cov_1owcusxl34().s[50]++,
  /* istanbul ignore next */
  (cov_1owcusxl34().b[7][0]++, event.timestamp) ||
  /* istanbul ignore next */
  (cov_1owcusxl34().b[7][1]++, Date.now()));
  const ipAddress =
  /* istanbul ignore next */
  (cov_1owcusxl34().s[51]++, request.ip);
  const userAgent =
  /* istanbul ignore next */
  (cov_1owcusxl34().s[52]++, request.headers['user-agent']);
  // Enrich event with request metadata
  const enrichedEvent =
  /* istanbul ignore next */
  (cov_1owcusxl34().s[53]++, {
    ...event,
    id: eventId,
    timestamp,
    ipAddress,
    userAgent,
    createdAt: new Date()
  });
  // Store in database
  /* istanbul ignore next */
  cov_1owcusxl34().s[54]++;
  await storeAnalyticsEvent(enrichedEvent);
  // Process real-time analytics if needed
  /* istanbul ignore next */
  cov_1owcusxl34().s[55]++;
  await processRealTimeAnalytics(enrichedEvent);
  /* istanbul ignore next */
  cov_1owcusxl34().s[56]++;
  return eventId;
}
async function storeAnalyticsEvent(event) {
  /* istanbul ignore next */
  cov_1owcusxl34().f[10]++;
  cov_1owcusxl34().s[57]++;
  // This would typically use your database client (Prisma, etc.)
  // For now, we'll use a placeholder implementation
  try {
    /* istanbul ignore next */
    cov_1owcusxl34().s[58]++;
    // Example with Prisma (uncomment when Prisma is set up)
    /*
    await prisma.analyticsEvent.create({
      data: {
        id: event.id,
        name: event.name,
        properties: event.properties || {},
        userId: event.userId,
        sessionId: event.sessionId,
        deviceId: event.deviceId,
        timestamp: new Date(event.timestamp),
        ipAddress: event.ipAddress,
        userAgent: event.userAgent,
      },
    });
    */
    // Placeholder: Log to console in development
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_1owcusxl34().b[8][0]++;
      cov_1owcusxl34().s[59]++;
      console.log('Analytics event stored:', event);
    } else
    /* istanbul ignore next */
    {
      cov_1owcusxl34().b[8][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1owcusxl34().s[60]++;
    console.error('Failed to store analytics event:', error);
    /* istanbul ignore next */
    cov_1owcusxl34().s[61]++;
    throw error;
  }
}
async function processRealTimeAnalytics(event) {
  /* istanbul ignore next */
  cov_1owcusxl34().f[11]++;
  cov_1owcusxl34().s[62]++;
  // Process real-time analytics (e.g., update counters, trigger alerts)
  // This could involve Redis, WebSocket notifications, etc.
  try {
    /* istanbul ignore next */
    cov_1owcusxl34().s[63]++;
    // Example: Update real-time counters
    if (event.name === 'utm_clicked') {
      /* istanbul ignore next */
      cov_1owcusxl34().b[9][0]++;
    } // Increment UTM click counter
    // await redis.incr(`utm_clicks:${event.properties.utm_id}`);
    else
    /* istanbul ignore next */
    {
      cov_1owcusxl34().b[9][1]++;
    }
    cov_1owcusxl34().s[64]++;
    if (event.name === 'page_view') {
      /* istanbul ignore next */
      cov_1owcusxl34().b[10][0]++;
    } // Update active users counter
    // await redis.sadd('active_users', event.userId);
    else
    /* istanbul ignore next */
    {
      cov_1owcusxl34().b[10][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1owcusxl34().s[65]++;
    console.error('Failed to process real-time analytics:', error);
    // Don't throw here to avoid failing the main event processing
  }
}
async function getAnalyticsDashboard(filters) {
  /* istanbul ignore next */
  cov_1owcusxl34().f[12]++;
  cov_1owcusxl34().s[66]++;
  // This would query your database for dashboard metrics
  // Placeholder implementation
  return {
    totalEvents: 0,
    uniqueUsers: 0,
    topEvents: [],
    eventsByDay: [],
    usersByDay: [],
    conversionRates: {}
  };
}
async function getUserAnalytics(userId, filters) {
  /* istanbul ignore next */
  cov_1owcusxl34().f[13]++;
  cov_1owcusxl34().s[67]++;
  // This would query user-specific analytics
  // Placeholder implementation
  return {
    userId,
    totalEvents: 0,
    lastActive: null,
    topEvents: [],
    sessionCount: 0,
    averageSessionDuration: 0
  };
}
async function getEventMetrics(eventName, filters) {
  /* istanbul ignore next */
  cov_1owcusxl34().f[14]++;
  cov_1owcusxl34().s[68]++;
  // This would query event-specific metrics
  // Placeholder implementation
  return {
    eventName,
    totalCount: 0,
    uniqueUsers: 0,
    averagePropertiesValues: {},
    timeSeriesData: []
  };
}
function generateEventId() {
  /* istanbul ignore next */
  cov_1owcusxl34().f[15]++;
  cov_1owcusxl34().s[69]++;
  return `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,