{"version":3,"names":["cov_1owcusxl34","actualCoverage","z","monitorDatabaseQuery","addBreadcrumb","analyticsEventSchema","s","object","name","string","min","max","properties","record","any","optional","userId","timestamp","number","sessionId","deviceId","batchAnalyticsSchema","events","array","analyticsRoutes","fastify","f","post","schema","body","response","type","success","eventId","request","reply","event","processAnalyticsEvent","eventName","code","send","error","log","processedCount","eventIds","items","push","totalEvents","length","get","preHandler","authenticate","querystring","startDate","format","endDate","query","dashboardData","getAnalyticsDashboard","b","Date","now","params","userAnalytics","getUserAnalytics","groupBy","eventMetrics","getEventMetrics","generateEventId","ipAddress","ip","userAgent","headers","enrichedEvent","id","createdAt","storeAnalyticsEvent","processRealTimeAnalytics","process","env","NODE_ENV","console","filters","uniqueUsers","topEvents","eventsByDay","usersByDay","conversionRates","lastActive","sessionCount","averageSessionDuration","totalCount","averagePropertiesValues","timeSeriesData","Math","random","toString","substr"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\analytics.ts"],"sourcesContent":["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { z } from 'zod';\nimport { monitorDatabaseQuery, addBreadcrumb } from '../lib/sentry';\n\n// Validation schemas\nconst analyticsEventSchema = z.object({\n  name: z.string().min(1).max(100),\n  properties: z.record(z.any()).optional(),\n  userId: z.string().optional(),\n  timestamp: z.number().optional(),\n  sessionId: z.string().optional(),\n  deviceId: z.string().optional(),\n});\n\nconst batchAnalyticsSchema = z.object({\n  events: z.array(analyticsEventSchema).max(100),\n});\n\ninterface AnalyticsEvent {\n  name: string;\n  properties?: Record<string, any>;\n  userId?: string;\n  timestamp?: number;\n  sessionId?: string;\n  deviceId?: string;\n}\n\ninterface AnalyticsRequest extends FastifyRequest {\n  body: AnalyticsEvent | { events: AnalyticsEvent[] };\n}\n\nexport default async function analyticsRoutes(fastify: FastifyInstance) {\n  // Single event tracking\n  fastify.post('/analytics', {\n    schema: {\n      body: analyticsEventSchema,\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            eventId: { type: 'string' },\n          },\n        },\n      },\n    },\n  }, async (request: AnalyticsRequest, reply: FastifyReply) => {\n    try {\n      const event = request.body as AnalyticsEvent;\n      const eventId = await processAnalyticsEvent(event, request);\n      \n      addBreadcrumb('Analytics event processed', 'analytics', {\n        eventName: event.name,\n        eventId,\n      });\n      \n      return reply.code(200).send({\n        success: true,\n        eventId,\n      });\n    } catch (error) {\n      fastify.log.error('Failed to process analytics event:', error);\n      return reply.code(500).send({\n        success: false,\n        error: 'Failed to process analytics event',\n      });\n    }\n  });\n\n  // Batch event tracking\n  fastify.post('/analytics/batch', {\n    schema: {\n      body: batchAnalyticsSchema,\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            processedCount: { type: 'number' },\n            eventIds: { type: 'array', items: { type: 'string' } },\n          },\n        },\n      },\n    },\n  }, async (request: AnalyticsRequest, reply: FastifyReply) => {\n    try {\n      const { events } = request.body as { events: AnalyticsEvent[] };\n      const eventIds: string[] = [];\n      \n      for (const event of events) {\n        try {\n          const eventId = await processAnalyticsEvent(event, request);\n          eventIds.push(eventId);\n        } catch (error) {\n          fastify.log.error('Failed to process batch event:', error);\n          // Continue processing other events\n        }\n      }\n      \n      addBreadcrumb('Batch analytics events processed', 'analytics', {\n        totalEvents: events.length,\n        processedCount: eventIds.length,\n      });\n      \n      return reply.code(200).send({\n        success: true,\n        processedCount: eventIds.length,\n        eventIds,\n      });\n    } catch (error) {\n      fastify.log.error('Failed to process batch analytics events:', error);\n      return reply.code(500).send({\n        success: false,\n        error: 'Failed to process batch analytics events',\n      });\n    }\n  });\n\n  // Analytics dashboard data\n  fastify.get('/analytics/dashboard', {\n    preHandler: [fastify.authenticate], // Require authentication\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          startDate: { type: 'string', format: 'date' },\n          endDate: { type: 'string', format: 'date' },\n          userId: { type: 'string' },\n          eventName: { type: 'string' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { startDate, endDate, userId, eventName } = request.query as any;\n      \n      const dashboardData = await monitorDatabaseQuery(\n        'get_analytics_dashboard',\n        () => getAnalyticsDashboard({\n          startDate: startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n          endDate: endDate ? new Date(endDate) : new Date(),\n          userId,\n          eventName,\n        })\n      );\n      \n      return reply.code(200).send(dashboardData);\n    } catch (error) {\n      fastify.log.error('Failed to get analytics dashboard:', error);\n      return reply.code(500).send({\n        error: 'Failed to get analytics dashboard',\n      });\n    }\n  });\n\n  // User analytics\n  fastify.get('/analytics/users/:userId', {\n    preHandler: [fastify.authenticate],\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { userId } = request.params as { userId: string };\n      const { startDate, endDate } = request.query as any;\n      \n      const userAnalytics = await monitorDatabaseQuery(\n        'get_user_analytics',\n        () => getUserAnalytics(userId, {\n          startDate: startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n          endDate: endDate ? new Date(endDate) : new Date(),\n        })\n      );\n      \n      return reply.code(200).send(userAnalytics);\n    } catch (error) {\n      fastify.log.error('Failed to get user analytics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get user analytics',\n      });\n    }\n  });\n\n  // Event metrics\n  fastify.get('/analytics/events/:eventName/metrics', {\n    preHandler: [fastify.authenticate],\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { eventName } = request.params as { eventName: string };\n      const { startDate, endDate, groupBy } = request.query as any;\n      \n      const eventMetrics = await monitorDatabaseQuery(\n        'get_event_metrics',\n        () => getEventMetrics(eventName, {\n          startDate: startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n          endDate: endDate ? new Date(endDate) : new Date(),\n          groupBy: groupBy || 'day',\n        })\n      );\n      \n      return reply.code(200).send(eventMetrics);\n    } catch (error) {\n      fastify.log.error('Failed to get event metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get event metrics',\n      });\n    }\n  });\n}\n\n// Helper functions\nasync function processAnalyticsEvent(event: AnalyticsEvent, request: FastifyRequest): Promise<string> {\n  const eventId = generateEventId();\n  const timestamp = event.timestamp || Date.now();\n  const ipAddress = request.ip;\n  const userAgent = request.headers['user-agent'];\n  \n  // Enrich event with request metadata\n  const enrichedEvent = {\n    ...event,\n    id: eventId,\n    timestamp,\n    ipAddress,\n    userAgent,\n    createdAt: new Date(),\n  };\n  \n  // Store in database\n  await storeAnalyticsEvent(enrichedEvent);\n  \n  // Process real-time analytics if needed\n  await processRealTimeAnalytics(enrichedEvent);\n  \n  return eventId;\n}\n\nasync function storeAnalyticsEvent(event: any): Promise<void> {\n  // This would typically use your database client (Prisma, etc.)\n  // For now, we'll use a placeholder implementation\n  \n  try {\n    // Example with Prisma (uncomment when Prisma is set up)\n    /*\n    await prisma.analyticsEvent.create({\n      data: {\n        id: event.id,\n        name: event.name,\n        properties: event.properties || {},\n        userId: event.userId,\n        sessionId: event.sessionId,\n        deviceId: event.deviceId,\n        timestamp: new Date(event.timestamp),\n        ipAddress: event.ipAddress,\n        userAgent: event.userAgent,\n      },\n    });\n    */\n    \n    // Placeholder: Log to console in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Analytics event stored:', event);\n    }\n  } catch (error) {\n    console.error('Failed to store analytics event:', error);\n    throw error;\n  }\n}\n\nasync function processRealTimeAnalytics(event: any): Promise<void> {\n  // Process real-time analytics (e.g., update counters, trigger alerts)\n  // This could involve Redis, WebSocket notifications, etc.\n  \n  try {\n    // Example: Update real-time counters\n    if (event.name === 'utm_clicked') {\n      // Increment UTM click counter\n      // await redis.incr(`utm_clicks:${event.properties.utm_id}`);\n    }\n    \n    if (event.name === 'page_view') {\n      // Update active users counter\n      // await redis.sadd('active_users', event.userId);\n    }\n  } catch (error) {\n    console.error('Failed to process real-time analytics:', error);\n    // Don't throw here to avoid failing the main event processing\n  }\n}\n\nasync function getAnalyticsDashboard(filters: {\n  startDate: Date;\n  endDate: Date;\n  userId?: string;\n  eventName?: string;\n}) {\n  // This would query your database for dashboard metrics\n  // Placeholder implementation\n  return {\n    totalEvents: 0,\n    uniqueUsers: 0,\n    topEvents: [],\n    eventsByDay: [],\n    usersByDay: [],\n    conversionRates: {},\n  };\n}\n\nasync function getUserAnalytics(userId: string, filters: {\n  startDate: Date;\n  endDate: Date;\n}) {\n  // This would query user-specific analytics\n  // Placeholder implementation\n  return {\n    userId,\n    totalEvents: 0,\n    lastActive: null,\n    topEvents: [],\n    sessionCount: 0,\n    averageSessionDuration: 0,\n  };\n}\n\nasync function getEventMetrics(eventName: string, filters: {\n  startDate: Date;\n  endDate: Date;\n  groupBy: string;\n}) {\n  // This would query event-specific metrics\n  // Placeholder implementation\n  return {\n    eventName,\n    totalCount: 0,\n    uniqueUsers: 0,\n    averagePropertiesValues: {},\n    timeSeriesData: [],\n  };\n}\n\nfunction generateEventId(): string {\n  return `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}