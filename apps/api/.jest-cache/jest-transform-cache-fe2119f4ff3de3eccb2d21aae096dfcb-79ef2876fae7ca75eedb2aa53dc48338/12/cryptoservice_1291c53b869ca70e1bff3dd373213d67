28c0b9cceb1620110008b9ac56f9cb98
/* istanbul ignore next */
function cov_zxnczykvr() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\crypto.service.ts";
  var hash = "edb9c1d7ae1e45a499ba64e1b7b0b683887f9ba7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\crypto.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 101,
          column: 1
        }
      },
      "14": {
        start: {
          line: 16,
          column: 16
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "15": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 18
        }
      },
      "16": {
        start: {
          line: 18,
          column: 15
        },
        end: {
          line: 18,
          column: 17
        }
      },
      "17": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 18
        }
      },
      "18": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "19": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 60
        }
      },
      "20": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "21": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 79
        }
      },
      "22": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 76
        }
      },
      "23": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "24": {
        start: {
          line: 35,
          column: 23
        },
        end: {
          line: 35,
          column: 56
        }
      },
      "25": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 36,
          column: 82
        }
      },
      "26": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 66
        }
      },
      "27": {
        start: {
          line: 38,
          column: 28
        },
        end: {
          line: 38,
          column: 62
        }
      },
      "28": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 45
        }
      },
      "29": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 40,
          column: 43
        }
      },
      "30": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 79
        }
      },
      "31": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 26
        }
      },
      "32": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 67
        }
      },
      "33": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "34": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 55,
          column: 67
        }
      },
      "35": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 103
        }
      },
      "36": {
        start: {
          line: 57,
          column: 30
        },
        end: {
          line: 57,
          column: 87
        }
      },
      "37": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 48
        }
      },
      "38": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 59,
          column: 50
        }
      },
      "39": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 60,
          column: 86
        }
      },
      "40": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 68
        }
      },
      "41": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 37
        }
      },
      "42": {
        start: {
          line: 63,
          column: 28
        },
        end: {
          line: 63,
          column: 69
        }
      },
      "43": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 48
        }
      },
      "44": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 29
        }
      },
      "45": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 67
        }
      },
      "46": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 58
        }
      },
      "47": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 70
        }
      },
      "48": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "49": {
        start: {
          line: 89,
          column: 30
        },
        end: {
          line: 89,
          column: 70
        }
      },
      "50": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "51": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 29
        }
      },
      "52": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 40
        }
      },
      "53": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "54": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 25
        }
      },
      "55": {
        start: {
          line: 102,
          column: 0
        },
        end: {
          line: 105,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 18
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 33
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 27
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 52
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 38
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 15
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 80
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 40
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 86
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "14": {
        loc: {
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 34
          },
          end: {
            line: 74,
            column: 36
          }
        }],
        line: 74
      },
      "15": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "16": {
        loc: {
          start: {
            line: 104,
            column: 37
          },
          end: {
            line: 104,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 122
          },
          end: {
            line: 104,
            column: 124
          }
        }, {
          start: {
            line: 104,
            column: 127
          },
          end: {
            line: 104,
            column: 133
          }
        }],
        line: 104
      },
      "17": {
        loc: {
          start: {
            line: 104,
            column: 50
          },
          end: {
            line: 104,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 50
          },
          end: {
            line: 104,
            column: 86
          }
        }, {
          start: {
            line: 104,
            column: 90
          },
          end: {
            line: 104,
            column: 103
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\crypto.service.ts",
      mappings: ";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC/C,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAG1B,IAAM,aAAa,GAAnB,MAAM,aAAa;IAOK;IANZ,SAAS,GAAG,aAAa,CAAC;IAC1B,SAAS,GAAG,EAAE,CAAC,CAAC,WAAW;IAC3B,QAAQ,GAAG,EAAE,CAAC,CAAC,WAAW;IAC1B,SAAS,GAAG,EAAE,CAAC,CAAC,WAAW;IAC3B,aAAa,CAAS;IAEvC,YAA6B,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QACvD,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,gBAAgB,CAAC,CAAC;QAC7D,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QACrE,CAAC;QAED,wDAAwD;QACxD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACtE,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7C,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YACvE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;YAEtD,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;YACnD,SAAS,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAEjC,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;YAEhC,oCAAoC;YACpC,MAAM,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;YACpE,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,sBAAsB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,aAAqB;QAC3B,IAAI,CAAC;YACH,sCAAsC;YACtC,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5F,MAAM,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAE5E,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACrC,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAEvC,MAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC3E,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;YACxD,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAEzB,IAAI,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAC1D,SAAS,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAEpC,OAAO,SAAS,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,sBAAsB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,SAAiB,EAAE;QACtC,OAAO,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,IAAY;QACf,OAAO,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,aAAqB;QACxC,IAAI,CAAC;YACH,8CAA8C;YAC9C,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3D,IAAI,aAAa,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC;gBACrC,OAAO,KAAK,CAAC;YACf,CAAC;YAED,yCAAyC;YACzC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAC5B,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;CACF,CAAA;AAjGY,aAAa;IADzB,UAAU,EAAE;yDAQiC,aAAa,oBAAb,aAAa;GAP9C,aAAa,CAiGzB",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\crypto.service.ts"],
      sourcesContent: ["import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class CryptoService {\n  private readonly algorithm = 'aes-256-gcm';\n  private readonly keyLength = 32; // 256 bits\n  private readonly ivLength = 16; // 128 bits\n  private readonly tagLength = 16; // 128 bits\n  private readonly encryptionKey: Buffer;\n\n  constructor(private readonly configService: ConfigService) {\n    const key = this.configService.get<string>('ENCRYPTION_KEY');\n    if (!key) {\n      throw new Error('ENCRYPTION_KEY environment variable is required');\n    }\n    \n    // Derive a consistent key from the environment variable\n    this.encryptionKey = crypto.scryptSync(key, 'salt', this.keyLength);\n  }\n\n  /**\n   * Encrypt a string value\n   */\n  encrypt(text: string): string {\n    try {\n      const iv = crypto.randomBytes(this.ivLength);\n      const cipher = crypto.createCipher(this.algorithm, this.encryptionKey);\n      cipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));\n      \n      let encrypted = cipher.update(text, 'utf8', 'hex');\n      encrypted += cipher.final('hex');\n      \n      const tag = cipher.getAuthTag();\n      \n      // Combine iv + tag + encrypted data\n      const result = iv.toString('hex') + tag.toString('hex') + encrypted;\n      return result;\n    } catch (error) {\n      throw new Error(`Encryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Decrypt a string value\n   */\n  decrypt(encryptedData: string): string {\n    try {\n      // Extract iv, tag, and encrypted data\n      const ivHex = encryptedData.slice(0, this.ivLength * 2);\n      const tagHex = encryptedData.slice(this.ivLength * 2, (this.ivLength + this.tagLength) * 2);\n      const encrypted = encryptedData.slice((this.ivLength + this.tagLength) * 2);\n      \n      const iv = Buffer.from(ivHex, 'hex');\n      const tag = Buffer.from(tagHex, 'hex');\n      \n      const decipher = crypto.createDecipher(this.algorithm, this.encryptionKey);\n      decipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));\n      decipher.setAuthTag(tag);\n      \n      let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n      \n      return decrypted;\n    } catch (error) {\n      throw new Error(`Decryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate a secure random string\n   */\n  generateRandomString(length: number = 32): string {\n    return crypto.randomBytes(length).toString('hex');\n  }\n\n  /**\n   * Hash a string using SHA-256\n   */\n  hash(text: string): string {\n    return crypto.createHash('sha256').update(text).digest('hex');\n  }\n\n  /**\n   * Verify if encrypted data is valid\n   */\n  isValidEncryptedData(encryptedData: string): boolean {\n    try {\n      // Check minimum length (iv + tag + some data)\n      const minLength = (this.ivLength + this.tagLength) * 2 + 2;\n      if (encryptedData.length < minLength) {\n        return false;\n      }\n      \n      // Try to decrypt (will throw if invalid)\n      this.decrypt(encryptedData);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "edb9c1d7ae1e45a499ba64e1b7b0b683887f9ba7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_zxnczykvr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_zxnczykvr();
var __decorate =
/* istanbul ignore next */
(cov_zxnczykvr().s[0]++,
/* istanbul ignore next */
(cov_zxnczykvr().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_zxnczykvr().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_zxnczykvr().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_zxnczykvr().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_zxnczykvr().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_zxnczykvr().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_zxnczykvr().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_zxnczykvr().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_zxnczykvr().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_zxnczykvr().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_zxnczykvr().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_zxnczykvr().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_zxnczykvr().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_zxnczykvr().b[3][0]++;
    cov_zxnczykvr().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_zxnczykvr().b[3][1]++;
    cov_zxnczykvr().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_zxnczykvr().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_zxnczykvr().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_zxnczykvr().b[5][0]++;
        cov_zxnczykvr().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_zxnczykvr().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_zxnczykvr().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_zxnczykvr().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_zxnczykvr().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_zxnczykvr().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_zxnczykvr().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_zxnczykvr().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_zxnczykvr().s[9]++;
  return /* istanbul ignore next */(cov_zxnczykvr().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_zxnczykvr().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_zxnczykvr().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_zxnczykvr().s[10]++,
/* istanbul ignore next */
(cov_zxnczykvr().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_zxnczykvr().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_zxnczykvr().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_zxnczykvr().f[1]++;
  cov_zxnczykvr().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_zxnczykvr().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_zxnczykvr().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_zxnczykvr().b[11][0]++;
    cov_zxnczykvr().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_zxnczykvr().b[11][1]++;
  }
}));
var _a;
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as crypto from 'crypto';
/* istanbul ignore next */
cov_zxnczykvr().s[13]++;
let CryptoService = class CryptoService {
  configService;
  algorithm =
  /* istanbul ignore next */
  (cov_zxnczykvr().s[14]++, 'aes-256-gcm');
  keyLength =
  /* istanbul ignore next */
  (cov_zxnczykvr().s[15]++, 32); // 256 bits
  ivLength =
  /* istanbul ignore next */
  (cov_zxnczykvr().s[16]++, 16); // 128 bits
  tagLength =
  /* istanbul ignore next */
  (cov_zxnczykvr().s[17]++, 16); // 128 bits
  encryptionKey;
  constructor(configService) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[2]++;
    cov_zxnczykvr().s[18]++;
    this.configService = configService;
    const key =
    /* istanbul ignore next */
    (cov_zxnczykvr().s[19]++, this.configService.get('ENCRYPTION_KEY'));
    /* istanbul ignore next */
    cov_zxnczykvr().s[20]++;
    if (!key) {
      /* istanbul ignore next */
      cov_zxnczykvr().b[13][0]++;
      cov_zxnczykvr().s[21]++;
      throw new Error('ENCRYPTION_KEY environment variable is required');
    } else
    /* istanbul ignore next */
    {
      cov_zxnczykvr().b[13][1]++;
    }
    // Derive a consistent key from the environment variable
    cov_zxnczykvr().s[22]++;
    this.encryptionKey = crypto.scryptSync(key, 'salt', this.keyLength);
  }
  /**
   * Encrypt a string value
   */
  encrypt(text) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[3]++;
    cov_zxnczykvr().s[23]++;
    try {
      const iv =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[24]++, crypto.randomBytes(this.ivLength));
      const cipher =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[25]++, crypto.createCipher(this.algorithm, this.encryptionKey));
      /* istanbul ignore next */
      cov_zxnczykvr().s[26]++;
      cipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));
      let encrypted =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[27]++, cipher.update(text, 'utf8', 'hex'));
      /* istanbul ignore next */
      cov_zxnczykvr().s[28]++;
      encrypted += cipher.final('hex');
      const tag =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[29]++, cipher.getAuthTag());
      // Combine iv + tag + encrypted data
      const result =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[30]++, iv.toString('hex') + tag.toString('hex') + encrypted);
      /* istanbul ignore next */
      cov_zxnczykvr().s[31]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_zxnczykvr().s[32]++;
      throw new Error(`Encryption failed: ${error.message}`);
    }
  }
  /**
   * Decrypt a string value
   */
  decrypt(encryptedData) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[4]++;
    cov_zxnczykvr().s[33]++;
    try {
      // Extract iv, tag, and encrypted data
      const ivHex =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[34]++, encryptedData.slice(0, this.ivLength * 2));
      const tagHex =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[35]++, encryptedData.slice(this.ivLength * 2, (this.ivLength + this.tagLength) * 2));
      const encrypted =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[36]++, encryptedData.slice((this.ivLength + this.tagLength) * 2));
      const iv =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[37]++, Buffer.from(ivHex, 'hex'));
      const tag =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[38]++, Buffer.from(tagHex, 'hex'));
      const decipher =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[39]++, crypto.createDecipher(this.algorithm, this.encryptionKey));
      /* istanbul ignore next */
      cov_zxnczykvr().s[40]++;
      decipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));
      /* istanbul ignore next */
      cov_zxnczykvr().s[41]++;
      decipher.setAuthTag(tag);
      let decrypted =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[42]++, decipher.update(encrypted, 'hex', 'utf8'));
      /* istanbul ignore next */
      cov_zxnczykvr().s[43]++;
      decrypted += decipher.final('utf8');
      /* istanbul ignore next */
      cov_zxnczykvr().s[44]++;
      return decrypted;
    } catch (error) {
      /* istanbul ignore next */
      cov_zxnczykvr().s[45]++;
      throw new Error(`Decryption failed: ${error.message}`);
    }
  }
  /**
   * Generate a secure random string
   */
  generateRandomString(length =
  /* istanbul ignore next */
  (cov_zxnczykvr().b[14][0]++, 32)) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[5]++;
    cov_zxnczykvr().s[46]++;
    return crypto.randomBytes(length).toString('hex');
  }
  /**
   * Hash a string using SHA-256
   */
  hash(text) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[6]++;
    cov_zxnczykvr().s[47]++;
    return crypto.createHash('sha256').update(text).digest('hex');
  }
  /**
   * Verify if encrypted data is valid
   */
  isValidEncryptedData(encryptedData) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[7]++;
    cov_zxnczykvr().s[48]++;
    try {
      // Check minimum length (iv + tag + some data)
      const minLength =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[49]++, (this.ivLength + this.tagLength) * 2 + 2);
      /* istanbul ignore next */
      cov_zxnczykvr().s[50]++;
      if (encryptedData.length < minLength) {
        /* istanbul ignore next */
        cov_zxnczykvr().b[15][0]++;
        cov_zxnczykvr().s[51]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_zxnczykvr().b[15][1]++;
      }
      // Try to decrypt (will throw if invalid)
      cov_zxnczykvr().s[52]++;
      this.decrypt(encryptedData);
      /* istanbul ignore next */
      cov_zxnczykvr().s[53]++;
      return true;
    } catch {
      /* istanbul ignore next */
      cov_zxnczykvr().s[54]++;
      return false;
    }
  }
};
/* istanbul ignore next */
cov_zxnczykvr().s[55]++;
CryptoService = __decorate([Injectable(), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_zxnczykvr().b[17][0]++, typeof ConfigService !== "undefined") &&
/* istanbul ignore next */
(cov_zxnczykvr().b[17][1]++, ConfigService)) === "function" ?
/* istanbul ignore next */
(cov_zxnczykvr().b[16][0]++, _a) :
/* istanbul ignore next */
(cov_zxnczykvr().b[16][1]++, Object)])], CryptoService);
export { CryptoService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,