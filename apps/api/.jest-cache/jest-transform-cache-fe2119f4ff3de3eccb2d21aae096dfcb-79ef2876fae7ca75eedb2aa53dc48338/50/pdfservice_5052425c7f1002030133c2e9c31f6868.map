{"version":3,"names":["cov_1e4g1tojr8","actualCoverage","Injectable","Logger","format","ptBR","s","formatDate","date","f","locale","formatNumber","value","type","b","Intl","NumberFormat","style","currency","toFixed","generatePDFContent","report","name","organization","user","firstName","lastName","data","metadata","generatedAt","JSON","stringify","summary","totalRecords","processingTime","PDFService","PDFService_1","logger","generateReportPDF","log","id","pdfContent","pdfBuffer","Buffer","from","fileName","Date","now","fileUrl","uploadPDFToStorage","url","size","length","error","buffer","generateChartImage","chartData","chartType","generateCustomPDF","templateData","content","title","sections","forEach","section","index","String","Array","isArray","__decorate"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\pdf.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ChartType } from '@prisma/client';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\ninterface ReportPDFProps {\n  report: {\n    id: string;\n    name: string;\n    type: string;\n    data: {\n      summary: Record<string, number>;\n      data: Record<string, any>[];\n      charts: {\n        type: ChartType;\n        title: string;\n        data: any[];\n      }[];\n      metadata: {\n        generatedAt: Date;\n        dateRange: { start: Date; end: Date };\n        totalRecords: number;\n        processingTime: number;\n      };\n    };\n    user: {\n      firstName: string;\n      lastName: string;\n    };\n    organization: {\n      name: string;\n    };\n  };\n}\n\n// PDF Styles\n// PDF generation utilities\nconst formatDate = (date: Date): string => {\n  return format(date, 'dd/MM/yyyy HH:mm', { locale: ptBR });\n};\n\nconst formatNumber = (value: number, type: string): string => {\n  switch (type) {\n    case 'currency':\n      return new Intl.NumberFormat('pt-BR', {\n        style: 'currency',\n        currency: 'BRL'\n      }).format(value);\n    case 'percentage':\n      return `${(value * 100).toFixed(2)}%`;\n    default:\n      return new Intl.NumberFormat('pt-BR').format(value);\n  }\n};\n\n// Simple PDF generation helper\nconst generatePDFContent = (report: any): string => {\n  const formatDate = (date: Date): string => {\n    return format(date, 'dd/MM/yyyy HH:mm', { locale: ptBR });\n  };\n\n  const formatNumber = (value: number, type: string): string => {\n    switch (type) {\n      case 'currency':\n        return new Intl.NumberFormat('pt-BR', {\n          style: 'currency',\n          currency: 'BRL'\n        }).format(value);\n      case 'percentage':\n        return `${(value * 100).toFixed(2)}%`;\n      default:\n        return new Intl.NumberFormat('pt-BR').format(value);\n    }\n  };\n\n  return `\n    PDF Report: ${report.name}\n    Organization: ${report.organization.name}\n    Generated by: ${report.user.firstName} ${report.user.lastName}\n    Date: ${formatDate(report.data.metadata.generatedAt)}\n    \n    Summary:\n    ${JSON.stringify(report.data.summary, null, 2)}\n    \n    Data Records: ${report.data.metadata.totalRecords}\n    Processing Time: ${report.data.metadata.processingTime}ms\n  `;\n};\n\n@Injectable()\nexport class PDFService {\n  private readonly logger = new Logger(PDFService.name);\n\n  async generateReportPDF(report: any): Promise<{ url: string; size: number }> {\n    try {\n      this.logger.log(`Generating PDF for report: ${report.id}`);\n      \n      // Generate PDF content as text (simplified approach)\n      const pdfContent = generatePDFContent(report);\n      const pdfBuffer = Buffer.from(pdfContent, 'utf-8');\n      \n      // Upload to storage (implement your storage logic)\n      const fileName = `report_${report.id}_${Date.now()}.txt`;\n      const fileUrl = await this.uploadPDFToStorage(fileName, pdfBuffer);\n      \n      this.logger.log(`PDF generated successfully: ${fileName}`);\n      \n      return {\n        url: fileUrl,\n        size: pdfBuffer.length\n      };\n    } catch (error) {\n      this.logger.error(`Failed to generate PDF for report ${report.id}:`, error);\n      throw error;\n    }\n  }\n\n  private async uploadPDFToStorage(fileName: string, buffer: Buffer): Promise<string> {\n    // Implement your file upload logic here\n    // This could be AWS S3, Google Cloud Storage, Azure Blob Storage, etc.\n    \n    // For now, return a placeholder URL\n    // In a real implementation, you would:\n    // 1. Upload the buffer to your storage service\n    // 2. Return the public URL of the uploaded file\n    \n    return `https://storage.example.com/reports/pdf/${fileName}`;\n  }\n\n  async generateChartImage(chartData: any, chartType: ChartType): Promise<Buffer> {\n    // This method would generate chart images for inclusion in PDFs\n    // You could use libraries like Chart.js with canvas or similar\n    // For now, return a placeholder\n    \n    return Buffer.from('placeholder-chart-image');\n  }\n\n  // Utility method to create custom PDF templates\n  async generateCustomPDF(\n    templateData: {\n      title: string;\n      sections: {\n        title: string;\n        content: string | any[];\n        type: 'text' | 'table' | 'chart';\n      }[];\n      metadata: Record<string, any>;\n    }\n  ): Promise<Buffer> {\n    this.logger.log('Generating custom PDF');\n    \n    let content = `Custom PDF: ${templateData.title}\\n\\n`;\n    \n    templateData.sections.forEach((section, index) => {\n      content += `Section ${index + 1}: ${section.title}\\n`;\n      if (section.type === 'text') {\n        content += `${String(section.content)}\\n\\n`;\n      } else if (section.type === 'table' && Array.isArray(section.content)) {\n        content += `Table data: ${JSON.stringify(section.content, null, 2)}\\n\\n`;\n      } else if (section.type === 'chart') {\n        content += `Chart data: ${JSON.stringify(section.content, null, 2)}\\n\\n`;\n      }\n    });\n    \n    content += `\\nMetadata: ${JSON.stringify(templateData.metadata, null, 2)}`;\n    \n    return Buffer.from(content, 'utf-8');\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}