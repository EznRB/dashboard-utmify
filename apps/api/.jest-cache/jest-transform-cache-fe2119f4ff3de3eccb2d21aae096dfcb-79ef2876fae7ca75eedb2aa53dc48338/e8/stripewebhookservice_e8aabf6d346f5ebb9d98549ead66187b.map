{"version":3,"names":["PrismaService","StripeService","logger","SubscriptionStatus","InvoiceStatus","StripeWebhookService","prisma","stripeService","constructor","cov_vlnq7ry4i","f","s","handleWebhook","event","info","type","eventId","id","b","handleSubscriptionCreated","data","object","handleSubscriptionUpdated","handleSubscriptionDeleted","handleInvoicePaymentSucceeded","handleInvoicePaymentFailed","handleCustomerCreated","handleCustomerUpdated","handlePaymentMethodAttached","warn","logWebhookEvent","error","message","subscription","customerId","customer","priceId","items","price","organization","findFirst","where","stripeCustomerId","Error","plan","stripePriceId","create","organizationId","planId","stripeSubscriptionId","status","mapStripeStatus","currentPeriodStart","Date","current_period_start","currentPeriodEnd","current_period_end","trialStart","trial_start","trialEnd","trial_end","cancelAtPeriodEnd","cancel_at_period_end","canceledAt","canceled_at","update","planType","subscriptionId","existingSubscription","include","newPlan","CANCELED","deletedAt","freePlan","invoice","invoiceId","upsert","stripeInvoiceId","PAID","paidAt","status_transitions","paid_at","hostedInvoiceUrl","hosted_invoice_url","invoicePdf","invoice_pdf","number","total","currency","toUpperCase","PAST_DUE","ACTIVE","amount","FAILED","email","name","paymentMethod","stripePaymentMethodId","last4","card","brand","expiryMonth","exp_month","expiryYear","exp_year","stripeStatus","statusMap","active","canceled","incomplete","INCOMPLETE","incomplete_expired","INCOMPLETE_EXPIRED","past_due","trialing","TRIALING","unpaid","UNPAID","errorMessage","billingEvent","eventType","stripeEventId","processedAt"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stripe-webhook.service.ts"],"sourcesContent":["import Stripe from 'stripe';\nimport { PrismaService } from '../database/prisma.service';\nimport { StripeService } from './stripe.service';\nimport { logger } from '../utils/logger';\nimport { SubscriptionStatus, InvoiceStatus } from '@prisma/client';\n\nexport class StripeWebhookService {\n  private prisma: PrismaService;\n  private stripeService: StripeService;\n\n  constructor() {\n    this.prisma = new PrismaService();\n    this.stripeService = new StripeService();\n  }\n\n  async handleWebhook(event: Stripe.Event): Promise<void> {\n    logger.info(`Processing Stripe webhook: ${event.type}`, { eventId: event.id });\n\n    try {\n      switch (event.type) {\n        case 'customer.subscription.created':\n          await this.handleSubscriptionCreated(event.data.object as Stripe.Subscription);\n          break;\n\n        case 'customer.subscription.updated':\n          await this.handleSubscriptionUpdated(event.data.object as Stripe.Subscription);\n          break;\n\n        case 'customer.subscription.deleted':\n          await this.handleSubscriptionDeleted(event.data.object as Stripe.Subscription);\n          break;\n\n        case 'invoice.payment_succeeded':\n          await this.handleInvoicePaymentSucceeded(event.data.object as Stripe.Invoice);\n          break;\n\n        case 'invoice.payment_failed':\n          await this.handleInvoicePaymentFailed(event.data.object as Stripe.Invoice);\n          break;\n\n        case 'customer.created':\n          await this.handleCustomerCreated(event.data.object as Stripe.Customer);\n          break;\n\n        case 'customer.updated':\n          await this.handleCustomerUpdated(event.data.object as Stripe.Customer);\n          break;\n\n        case 'payment_method.attached':\n          await this.handlePaymentMethodAttached(event.data.object as Stripe.PaymentMethod);\n          break;\n\n        default:\n          logger.warn(`Unhandled webhook event type: ${event.type}`);\n      }\n\n      // Log successful webhook processing\n      await this.logWebhookEvent(event, 'success');\n      logger.info(`Successfully processed webhook: ${event.type}`, { eventId: event.id });\n\n    } catch (error) {\n      logger.error(`Error processing webhook ${event.type}:`, error, { eventId: event.id });\n      await this.logWebhookEvent(event, 'failed', error.message);\n      throw error;\n    }\n  }\n\n  private async handleSubscriptionCreated(subscription: Stripe.Subscription): Promise<void> {\n    const customerId = subscription.customer as string;\n    const priceId = subscription.items.data[0]?.price.id;\n\n    // Find organization by Stripe customer ID\n    const organization = await this.prisma.organization.findFirst({\n      where: { stripeCustomerId: customerId },\n    });\n\n    if (!organization) {\n      throw new Error(`Organization not found for customer ID: ${customerId}`);\n    }\n\n    // Find plan by Stripe price ID\n    const plan = await this.prisma.plan.findFirst({\n      where: { stripePriceId: priceId },\n    });\n\n    if (!plan) {\n      throw new Error(`Plan not found for price ID: ${priceId}`);\n    }\n\n    // Create subscription record\n    await this.prisma.subscription.create({\n      data: {\n        organizationId: organization.id,\n        planId: plan.id,\n        stripeSubscriptionId: subscription.id,\n        status: this.mapStripeStatus(subscription.status),\n        currentPeriodStart: new Date(subscription.current_period_start * 1000),\n        currentPeriodEnd: new Date(subscription.current_period_end * 1000),\n        trialStart: subscription.trial_start ? new Date(subscription.trial_start * 1000) : null,\n        trialEnd: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null,\n        cancelAtPeriodEnd: subscription.cancel_at_period_end,\n        canceledAt: subscription.canceled_at ? new Date(subscription.canceled_at * 1000) : null,\n      },\n    });\n\n    // Update organization plan type\n    await this.prisma.organization.update({\n      where: { id: organization.id },\n      data: { planType: plan.type },\n    });\n\n    logger.info(`Subscription created for organization ${organization.id}`, {\n      subscriptionId: subscription.id,\n      planType: plan.type,\n    });\n  }\n\n  private async handleSubscriptionUpdated(subscription: Stripe.Subscription): Promise<void> {\n    const existingSubscription = await this.prisma.subscription.findFirst({\n      where: { stripeSubscriptionId: subscription.id },\n      include: { plan: true, organization: true },\n    });\n\n    if (!existingSubscription) {\n      logger.warn(`Subscription not found for update: ${subscription.id}`);\n      return;\n    }\n\n    const priceId = subscription.items.data[0]?.price.id;\n    let planId = existingSubscription.planId;\n\n    // Check if plan changed\n    if (priceId && priceId !== existingSubscription.plan.stripePriceId) {\n      const newPlan = await this.prisma.plan.findFirst({\n        where: { stripePriceId: priceId },\n      });\n\n      if (newPlan) {\n        planId = newPlan.id;\n        \n        // Update organization plan type\n        await this.prisma.organization.update({\n          where: { id: existingSubscription.organizationId },\n          data: { planType: newPlan.type },\n        });\n      }\n    }\n\n    // Update subscription\n    await this.prisma.subscription.update({\n      where: { id: existingSubscription.id },\n      data: {\n        planId,\n        status: this.mapStripeStatus(subscription.status),\n        currentPeriodStart: new Date(subscription.current_period_start * 1000),\n        currentPeriodEnd: new Date(subscription.current_period_end * 1000),\n        trialStart: subscription.trial_start ? new Date(subscription.trial_start * 1000) : null,\n        trialEnd: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null,\n        cancelAtPeriodEnd: subscription.cancel_at_period_end,\n        canceledAt: subscription.canceled_at ? new Date(subscription.canceled_at * 1000) : null,\n      },\n    });\n\n    logger.info(`Subscription updated: ${subscription.id}`, {\n      organizationId: existingSubscription.organizationId,\n      status: subscription.status,\n    });\n  }\n\n  private async handleSubscriptionDeleted(subscription: Stripe.Subscription): Promise<void> {\n    const existingSubscription = await this.prisma.subscription.findFirst({\n      where: { stripeSubscriptionId: subscription.id },\n      include: { organization: true },\n    });\n\n    if (!existingSubscription) {\n      logger.warn(`Subscription not found for deletion: ${subscription.id}`);\n      return;\n    }\n\n    // Soft delete: update status instead of deleting\n    await this.prisma.subscription.update({\n      where: { id: existingSubscription.id },\n      data: {\n        status: SubscriptionStatus.CANCELED,\n        canceledAt: new Date(),\n        deletedAt: new Date(), // Soft delete\n      },\n    });\n\n    // Downgrade organization to free plan\n    const freePlan = await this.prisma.plan.findFirst({\n      where: { type: 'FREE' },\n    });\n\n    if (freePlan) {\n      await this.prisma.organization.update({\n        where: { id: existingSubscription.organizationId },\n        data: { planType: freePlan.type },\n      });\n    }\n\n    logger.info(`Subscription deleted (soft): ${subscription.id}`, {\n      organizationId: existingSubscription.organizationId,\n    });\n  }\n\n  private async handleInvoicePaymentSucceeded(invoice: Stripe.Invoice): Promise<void> {\n    const subscriptionId = invoice.subscription as string;\n    \n    if (!subscriptionId) {\n      logger.warn('Invoice payment succeeded but no subscription ID found', { invoiceId: invoice.id });\n      return;\n    }\n\n    const subscription = await this.prisma.subscription.findFirst({\n      where: { stripeSubscriptionId: subscriptionId },\n    });\n\n    if (!subscription) {\n      logger.warn(`Subscription not found for invoice: ${invoice.id}`);\n      return;\n    }\n\n    // Create or update invoice record\n    await this.prisma.invoice.upsert({\n      where: { stripeInvoiceId: invoice.id },\n      update: {\n        status: InvoiceStatus.PAID,\n        paidAt: new Date(invoice.status_transitions.paid_at! * 1000),\n        hostedInvoiceUrl: invoice.hosted_invoice_url,\n        invoicePdf: invoice.invoice_pdf,\n      },\n      create: {\n        subscriptionId: subscription.id,\n        stripeInvoiceId: invoice.id,\n        number: invoice.number || `INV-${invoice.id}`,\n        status: InvoiceStatus.PAID,\n        total: invoice.total,\n        currency: invoice.currency.toUpperCase(),\n        paidAt: new Date(invoice.status_transitions.paid_at! * 1000),\n        hostedInvoiceUrl: invoice.hosted_invoice_url,\n        invoicePdf: invoice.invoice_pdf,\n      },\n    });\n\n    // Update subscription status if it was past due\n    if (subscription.status === SubscriptionStatus.PAST_DUE) {\n      await this.prisma.subscription.update({\n        where: { id: subscription.id },\n        data: { status: SubscriptionStatus.ACTIVE },\n      });\n    }\n\n    logger.info(`Invoice payment succeeded: ${invoice.id}`, {\n      subscriptionId: subscription.id,\n      amount: invoice.total,\n    });\n  }\n\n  private async handleInvoicePaymentFailed(invoice: Stripe.Invoice): Promise<void> {\n    const subscriptionId = invoice.subscription as string;\n    \n    if (!subscriptionId) {\n      logger.warn('Invoice payment failed but no subscription ID found', { invoiceId: invoice.id });\n      return;\n    }\n\n    const subscription = await this.prisma.subscription.findFirst({\n      where: { stripeSubscriptionId: subscriptionId },\n    });\n\n    if (!subscription) {\n      logger.warn(`Subscription not found for failed invoice: ${invoice.id}`);\n      return;\n    }\n\n    // Create or update invoice record\n    await this.prisma.invoice.upsert({\n      where: { stripeInvoiceId: invoice.id },\n      update: {\n        status: InvoiceStatus.FAILED,\n      },\n      create: {\n        subscriptionId: subscription.id,\n        stripeInvoiceId: invoice.id,\n        number: invoice.number || `INV-${invoice.id}`,\n        status: InvoiceStatus.FAILED,\n        total: invoice.total,\n        currency: invoice.currency.toUpperCase(),\n        hostedInvoiceUrl: invoice.hosted_invoice_url,\n        invoicePdf: invoice.invoice_pdf,\n      },\n    });\n\n    // Update subscription status to past due\n    await this.prisma.subscription.update({\n      where: { id: subscription.id },\n      data: { status: SubscriptionStatus.PAST_DUE },\n    });\n\n    logger.error(`Invoice payment failed: ${invoice.id}`, {\n      subscriptionId: subscription.id,\n      amount: invoice.total,\n    });\n\n    // TODO: Send dunning emails or notifications\n  }\n\n  private async handleCustomerCreated(customer: Stripe.Customer): Promise<void> {\n    logger.info(`Customer created: ${customer.id}`, {\n      email: customer.email,\n      name: customer.name,\n    });\n    // Customer creation is handled in the billing service when creating checkout\n  }\n\n  private async handleCustomerUpdated(customer: Stripe.Customer): Promise<void> {\n    const organization = await this.prisma.organization.findFirst({\n      where: { stripeCustomerId: customer.id },\n    });\n\n    if (organization) {\n      logger.info(`Customer updated: ${customer.id}`, {\n        organizationId: organization.id,\n        email: customer.email,\n      });\n    }\n  }\n\n  private async handlePaymentMethodAttached(paymentMethod: Stripe.PaymentMethod): Promise<void> {\n    const customerId = paymentMethod.customer as string;\n    \n    const organization = await this.prisma.organization.findFirst({\n      where: { stripeCustomerId: customerId },\n    });\n\n    if (!organization) {\n      logger.warn(`Organization not found for payment method: ${paymentMethod.id}`);\n      return;\n    }\n\n    // Create or update payment method record\n    await this.prisma.paymentMethod.upsert({\n      where: { stripePaymentMethodId: paymentMethod.id },\n      update: {\n        type: paymentMethod.type,\n        last4: paymentMethod.card?.last4 || null,\n        brand: paymentMethod.card?.brand || null,\n        expiryMonth: paymentMethod.card?.exp_month || null,\n        expiryYear: paymentMethod.card?.exp_year || null,\n      },\n      create: {\n        organizationId: organization.id,\n        stripePaymentMethodId: paymentMethod.id,\n        type: paymentMethod.type,\n        last4: paymentMethod.card?.last4 || null,\n        brand: paymentMethod.card?.brand || null,\n        expiryMonth: paymentMethod.card?.exp_month || null,\n        expiryYear: paymentMethod.card?.exp_year || null,\n      },\n    });\n\n    logger.info(`Payment method attached: ${paymentMethod.id}`, {\n      organizationId: organization.id,\n      type: paymentMethod.type,\n    });\n  }\n\n  private mapStripeStatus(stripeStatus: Stripe.Subscription.Status): SubscriptionStatus {\n    const statusMap: Record<Stripe.Subscription.Status, SubscriptionStatus> = {\n      active: SubscriptionStatus.ACTIVE,\n      canceled: SubscriptionStatus.CANCELED,\n      incomplete: SubscriptionStatus.INCOMPLETE,\n      incomplete_expired: SubscriptionStatus.INCOMPLETE_EXPIRED,\n      past_due: SubscriptionStatus.PAST_DUE,\n      trialing: SubscriptionStatus.TRIALING,\n      unpaid: SubscriptionStatus.UNPAID,\n    };\n\n    return statusMap[stripeStatus] || SubscriptionStatus.INCOMPLETE;\n  }\n\n  private async logWebhookEvent(\n    event: Stripe.Event,\n    status: 'success' | 'failed',\n    errorMessage?: string\n  ): Promise<void> {\n    try {\n      await this.prisma.billingEvent.create({\n        data: {\n          eventType: event.type,\n          stripeEventId: event.id,\n          status,\n          data: event.data.object as any,\n          errorMessage,\n          processedAt: new Date(),\n        },\n      });\n    } catch (error) {\n      logger.error('Failed to log webhook event:', error);\n    }\n  }\n}"],"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","ignoreList":[]}