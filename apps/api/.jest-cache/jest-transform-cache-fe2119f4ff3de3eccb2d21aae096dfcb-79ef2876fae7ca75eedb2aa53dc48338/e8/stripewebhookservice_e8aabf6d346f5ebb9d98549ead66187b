0b7a481bd67de71893b3208a20e2c491
/* istanbul ignore next */
function cov_vlnq7ry4i() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stripe-webhook.service.ts";
  var hash = "a36371f415286e03b15da9ad6b97a1d373bb30b8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stripe-webhook.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 42
        }
      },
      "1": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 49
        }
      },
      "2": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 87
        }
      },
      "3": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "4": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "5": {
        start: {
          line: 17,
          column: 20
        },
        end: {
          line: 17,
          column: 76
        }
      },
      "6": {
        start: {
          line: 18,
          column: 20
        },
        end: {
          line: 18,
          column: 26
        }
      },
      "7": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 76
        }
      },
      "8": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 26
        }
      },
      "9": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 76
        }
      },
      "10": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 26
        }
      },
      "11": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 80
        }
      },
      "12": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 26
        }
      },
      "13": {
        start: {
          line: 29,
          column: 20
        },
        end: {
          line: 29,
          column: 77
        }
      },
      "14": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 26
        }
      },
      "15": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 72
        }
      },
      "16": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 26
        }
      },
      "17": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 35,
          column: 72
        }
      },
      "18": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 26
        }
      },
      "19": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 78
        }
      },
      "20": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 26
        }
      },
      "21": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 79
        }
      },
      "22": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 57
        }
      },
      "23": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 96
        }
      },
      "24": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 98
        }
      },
      "25": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 71
        }
      },
      "26": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 24
        }
      },
      "27": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 54,
          column: 48
        }
      },
      "28": {
        start: {
          line: 55,
          column: 24
        },
        end: {
          line: 55,
          column: 60
        }
      },
      "29": {
        start: {
          line: 57,
          column: 29
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "30": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "31": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 85
        }
      },
      "32": {
        start: {
          line: 64,
          column: 21
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "33": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "34": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 71
        }
      },
      "35": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "36": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "37": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "38": {
        start: {
          line: 96,
          column: 37
        },
        end: {
          line: 99,
          column: 10
        }
      },
      "39": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "40": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 81
        }
      },
      "41": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 19
        }
      },
      "42": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 104,
          column: 60
        }
      },
      "43": {
        start: {
          line: 105,
          column: 21
        },
        end: {
          line: 105,
          column: 48
        }
      },
      "44": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "45": {
        start: {
          line: 108,
          column: 28
        },
        end: {
          line: 110,
          column: 14
        }
      },
      "46": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "47": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 36
        }
      },
      "48": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 117,
          column: 19
        }
      },
      "49": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      },
      "50": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "51": {
        start: {
          line: 140,
          column: 37
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "52": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "53": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 83
        }
      },
      "54": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 19
        }
      },
      "55": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      },
      "56": {
        start: {
          line: 158,
          column: 25
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "57": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "58": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 165,
          column: 15
        }
      },
      "59": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "60": {
        start: {
          line: 172,
          column: 31
        },
        end: {
          line: 172,
          column: 51
        }
      },
      "61": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "62": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 109
        }
      },
      "63": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 19
        }
      },
      "64": {
        start: {
          line: 177,
          column: 29
        },
        end: {
          line: 179,
          column: 10
        }
      },
      "65": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "66": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 77
        }
      },
      "67": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 19
        }
      },
      "68": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "69": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "70": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 210,
          column: 15
        }
      },
      "71": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      },
      "72": {
        start: {
          line: 218,
          column: 31
        },
        end: {
          line: 218,
          column: 51
        }
      },
      "73": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "74": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 106
        }
      },
      "75": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 19
        }
      },
      "76": {
        start: {
          line: 223,
          column: 29
        },
        end: {
          line: 225,
          column: 10
        }
      },
      "77": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "78": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 84
        }
      },
      "79": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 19
        }
      },
      "80": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 246,
          column: 11
        }
      },
      "81": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "82": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 255,
          column: 11
        }
      },
      "83": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "84": {
        start: {
          line: 266,
          column: 29
        },
        end: {
          line: 268,
          column: 10
        }
      },
      "85": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "86": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 273,
          column: 15
        }
      },
      "87": {
        start: {
          line: 277,
          column: 27
        },
        end: {
          line: 277,
          column: 49
        }
      },
      "88": {
        start: {
          line: 278,
          column: 29
        },
        end: {
          line: 280,
          column: 10
        }
      },
      "89": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "90": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 90
        }
      },
      "91": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 19
        }
      },
      "92": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "93": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 308,
          column: 11
        }
      },
      "94": {
        start: {
          line: 311,
          column: 26
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "95": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 72
        }
      },
      "96": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "97": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 333,
          column: 15
        }
      },
      "98": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 31
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 50
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 50
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 95
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 50
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 139
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 49
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 171
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 46
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 217
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 42
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 258
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 42
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 265
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        loc: {
          start: {
            line: 276,
            column: 53
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 276
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 34
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 310
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 55
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 322
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 26
          }
        }, {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 21,
            column: 26
          }
        }, {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 24,
            column: 26
          }
        }, {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 27,
            column: 26
          }
        }, {
          start: {
            line: 28,
            column: 16
          },
          end: {
            line: 30,
            column: 26
          }
        }, {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 33,
            column: 26
          }
        }, {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 36,
            column: 26
          }
        }, {
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 39,
            column: 26
          }
        }, {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 41,
            column: 79
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 28
          },
          end: {
            line: 79,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 79,
            column: 55
          },
          end: {
            line: 79,
            column: 96
          }
        }, {
          start: {
            line: 79,
            column: 99
          },
          end: {
            line: 79,
            column: 103
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 26
          },
          end: {
            line: 80,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 51
          },
          end: {
            line: 80,
            column: 90
          }
        }, {
          start: {
            line: 80,
            column: 93
          },
          end: {
            line: 80,
            column: 97
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 28
          },
          end: {
            line: 82,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 55
          },
          end: {
            line: 82,
            column: 96
          }
        }, {
          start: {
            line: 82,
            column: 99
          },
          end: {
            line: 82,
            column: 103
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 19
          }
        }, {
          start: {
            line: 107,
            column: 23
          },
          end: {
            line: 107,
            column: 74
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "10": {
        loc: {
          start: {
            line: 128,
            column: 28
          },
          end: {
            line: 128,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 55
          },
          end: {
            line: 128,
            column: 96
          }
        }, {
          start: {
            line: 128,
            column: 99
          },
          end: {
            line: 128,
            column: 103
          }
        }],
        line: 128
      },
      "11": {
        loc: {
          start: {
            line: 129,
            column: 26
          },
          end: {
            line: 129,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 51
          },
          end: {
            line: 129,
            column: 90
          }
        }, {
          start: {
            line: 129,
            column: 93
          },
          end: {
            line: 129,
            column: 97
          }
        }],
        line: 129
      },
      "12": {
        loc: {
          start: {
            line: 131,
            column: 28
          },
          end: {
            line: 131,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 55
          },
          end: {
            line: 131,
            column: 96
          }
        }, {
          start: {
            line: 131,
            column: 99
          },
          end: {
            line: 131,
            column: 103
          }
        }],
        line: 131
      },
      "13": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "14": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "15": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "16": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "17": {
        loc: {
          start: {
            line: 196,
            column: 24
          },
          end: {
            line: 196,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 24
          },
          end: {
            line: 196,
            column: 38
          }
        }, {
          start: {
            line: 196,
            column: 42
          },
          end: {
            line: 196,
            column: 61
          }
        }],
        line: 196
      },
      "18": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "19": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "20": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "21": {
        loc: {
          start: {
            line: 239,
            column: 24
          },
          end: {
            line: 239,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 24
          },
          end: {
            line: 239,
            column: 38
          }
        }, {
          start: {
            line: 239,
            column: 42
          },
          end: {
            line: 239,
            column: 61
          }
        }],
        line: 239
      },
      "22": {
        loc: {
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "23": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "24": {
        loc: {
          start: {
            line: 290,
            column: 23
          },
          end: {
            line: 290,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 290,
            column: 23
          },
          end: {
            line: 290,
            column: 48
          }
        }, {
          start: {
            line: 290,
            column: 52
          },
          end: {
            line: 290,
            column: 56
          }
        }],
        line: 290
      },
      "25": {
        loc: {
          start: {
            line: 291,
            column: 23
          },
          end: {
            line: 291,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 23
          },
          end: {
            line: 291,
            column: 48
          }
        }, {
          start: {
            line: 291,
            column: 52
          },
          end: {
            line: 291,
            column: 56
          }
        }],
        line: 291
      },
      "26": {
        loc: {
          start: {
            line: 292,
            column: 29
          },
          end: {
            line: 292,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 29
          },
          end: {
            line: 292,
            column: 58
          }
        }, {
          start: {
            line: 292,
            column: 62
          },
          end: {
            line: 292,
            column: 66
          }
        }],
        line: 292
      },
      "27": {
        loc: {
          start: {
            line: 293,
            column: 28
          },
          end: {
            line: 293,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 28
          },
          end: {
            line: 293,
            column: 56
          }
        }, {
          start: {
            line: 293,
            column: 60
          },
          end: {
            line: 293,
            column: 64
          }
        }],
        line: 293
      },
      "28": {
        loc: {
          start: {
            line: 299,
            column: 23
          },
          end: {
            line: 299,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 23
          },
          end: {
            line: 299,
            column: 48
          }
        }, {
          start: {
            line: 299,
            column: 52
          },
          end: {
            line: 299,
            column: 56
          }
        }],
        line: 299
      },
      "29": {
        loc: {
          start: {
            line: 300,
            column: 23
          },
          end: {
            line: 300,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 23
          },
          end: {
            line: 300,
            column: 48
          }
        }, {
          start: {
            line: 300,
            column: 52
          },
          end: {
            line: 300,
            column: 56
          }
        }],
        line: 300
      },
      "30": {
        loc: {
          start: {
            line: 301,
            column: 29
          },
          end: {
            line: 301,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 29
          },
          end: {
            line: 301,
            column: 58
          }
        }, {
          start: {
            line: 301,
            column: 62
          },
          end: {
            line: 301,
            column: 66
          }
        }],
        line: 301
      },
      "31": {
        loc: {
          start: {
            line: 302,
            column: 28
          },
          end: {
            line: 302,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 28
          },
          end: {
            line: 302,
            column: 56
          }
        }, {
          start: {
            line: 302,
            column: 60
          },
          end: {
            line: 302,
            column: 64
          }
        }],
        line: 302
      },
      "32": {
        loc: {
          start: {
            line: 320,
            column: 15
          },
          end: {
            line: 320,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 320,
            column: 15
          },
          end: {
            line: 320,
            column: 38
          }
        }, {
          start: {
            line: 320,
            column: 42
          },
          end: {
            line: 320,
            column: 71
          }
        }],
        line: 320
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stripe-webhook.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stripe-webhook.service.ts"],
      sourcesContent: ["import Stripe from 'stripe';\nimport { PrismaService } from '../database/prisma.service';\nimport { StripeService } from './stripe.service';\nimport { logger } from '../utils/logger';\nimport { SubscriptionStatus, InvoiceStatus } from '@prisma/client';\n\nexport class StripeWebhookService {\n  private prisma: PrismaService;\n  private stripeService: StripeService;\n\n  constructor() {\n    this.prisma = new PrismaService();\n    this.stripeService = new StripeService();\n  }\n\n  async handleWebhook(event: Stripe.Event): Promise<void> {\n    logger.info(`Processing Stripe webhook: ${event.type}`, { eventId: event.id });\n\n    try {\n      switch (event.type) {\n        case 'customer.subscription.created':\n          await this.handleSubscriptionCreated(event.data.object as Stripe.Subscription);\n          break;\n\n        case 'customer.subscription.updated':\n          await this.handleSubscriptionUpdated(event.data.object as Stripe.Subscription);\n          break;\n\n        case 'customer.subscription.deleted':\n          await this.handleSubscriptionDeleted(event.data.object as Stripe.Subscription);\n          break;\n\n        case 'invoice.payment_succeeded':\n          await this.handleInvoicePaymentSucceeded(event.data.object as Stripe.Invoice);\n          break;\n\n        case 'invoice.payment_failed':\n          await this.handleInvoicePaymentFailed(event.data.object as Stripe.Invoice);\n          break;\n\n        case 'customer.created':\n          await this.handleCustomerCreated(event.data.object as Stripe.Customer);\n          break;\n\n        case 'customer.updated':\n          await this.handleCustomerUpdated(event.data.object as Stripe.Customer);\n          break;\n\n        case 'payment_method.attached':\n          await this.handlePaymentMethodAttached(event.data.object as Stripe.PaymentMethod);\n          break;\n\n        default:\n          logger.warn(`Unhandled webhook event type: ${event.type}`);\n      }\n\n      // Log successful webhook processing\n      await this.logWebhookEvent(event, 'success');\n      logger.info(`Successfully processed webhook: ${event.type}`, { eventId: event.id });\n\n    } catch (error) {\n      logger.error(`Error processing webhook ${event.type}:`, error, { eventId: event.id });\n      await this.logWebhookEvent(event, 'failed', error.message);\n      throw error;\n    }\n  }\n\n  private async handleSubscriptionCreated(subscription: Stripe.Subscription): Promise<void> {\n    const customerId = subscription.customer as string;\n    const priceId = subscription.items.data[0]?.price.id;\n\n    // Find organization by Stripe customer ID\n    const organization = await this.prisma.organization.findFirst({\n      where: { stripeCustomerId: customerId },\n    });\n\n    if (!organization) {\n      throw new Error(`Organization not found for customer ID: ${customerId}`);\n    }\n\n    // Find plan by Stripe price ID\n    const plan = await this.prisma.plan.findFirst({\n      where: { stripePriceId: priceId },\n    });\n\n    if (!plan) {\n      throw new Error(`Plan not found for price ID: ${priceId}`);\n    }\n\n    // Create subscription record\n    await this.prisma.subscription.create({\n      data: {\n        organizationId: organization.id,\n        planId: plan.id,\n        stripeSubscriptionId: subscription.id,\n        status: this.mapStripeStatus(subscription.status),\n        currentPeriodStart: new Date(subscription.current_period_start * 1000),\n        currentPeriodEnd: new Date(subscription.current_period_end * 1000),\n        trialStart: subscription.trial_start ? new Date(subscription.trial_start * 1000) : null,\n        trialEnd: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null,\n        cancelAtPeriodEnd: subscription.cancel_at_period_end,\n        canceledAt: subscription.canceled_at ? new Date(subscription.canceled_at * 1000) : null,\n      },\n    });\n\n    // Update organization plan type\n    await this.prisma.organization.update({\n      where: { id: organization.id },\n      data: { planType: plan.type },\n    });\n\n    logger.info(`Subscription created for organization ${organization.id}`, {\n      subscriptionId: subscription.id,\n      planType: plan.type,\n    });\n  }\n\n  private async handleSubscriptionUpdated(subscription: Stripe.Subscription): Promise<void> {\n    const existingSubscription = await this.prisma.subscription.findFirst({\n      where: { stripeSubscriptionId: subscription.id },\n      include: { plan: true, organization: true },\n    });\n\n    if (!existingSubscription) {\n      logger.warn(`Subscription not found for update: ${subscription.id}`);\n      return;\n    }\n\n    const priceId = subscription.items.data[0]?.price.id;\n    let planId = existingSubscription.planId;\n\n    // Check if plan changed\n    if (priceId && priceId !== existingSubscription.plan.stripePriceId) {\n      const newPlan = await this.prisma.plan.findFirst({\n        where: { stripePriceId: priceId },\n      });\n\n      if (newPlan) {\n        planId = newPlan.id;\n        \n        // Update organization plan type\n        await this.prisma.organization.update({\n          where: { id: existingSubscription.organizationId },\n          data: { planType: newPlan.type },\n        });\n      }\n    }\n\n    // Update subscription\n    await this.prisma.subscription.update({\n      where: { id: existingSubscription.id },\n      data: {\n        planId,\n        status: this.mapStripeStatus(subscription.status),\n        currentPeriodStart: new Date(subscription.current_period_start * 1000),\n        currentPeriodEnd: new Date(subscription.current_period_end * 1000),\n        trialStart: subscription.trial_start ? new Date(subscription.trial_start * 1000) : null,\n        trialEnd: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null,\n        cancelAtPeriodEnd: subscription.cancel_at_period_end,\n        canceledAt: subscription.canceled_at ? new Date(subscription.canceled_at * 1000) : null,\n      },\n    });\n\n    logger.info(`Subscription updated: ${subscription.id}`, {\n      organizationId: existingSubscription.organizationId,\n      status: subscription.status,\n    });\n  }\n\n  private async handleSubscriptionDeleted(subscription: Stripe.Subscription): Promise<void> {\n    const existingSubscription = await this.prisma.subscription.findFirst({\n      where: { stripeSubscriptionId: subscription.id },\n      include: { organization: true },\n    });\n\n    if (!existingSubscription) {\n      logger.warn(`Subscription not found for deletion: ${subscription.id}`);\n      return;\n    }\n\n    // Soft delete: update status instead of deleting\n    await this.prisma.subscription.update({\n      where: { id: existingSubscription.id },\n      data: {\n        status: SubscriptionStatus.CANCELED,\n        canceledAt: new Date(),\n        deletedAt: new Date(), // Soft delete\n      },\n    });\n\n    // Downgrade organization to free plan\n    const freePlan = await this.prisma.plan.findFirst({\n      where: { type: 'FREE' },\n    });\n\n    if (freePlan) {\n      await this.prisma.organization.update({\n        where: { id: existingSubscription.organizationId },\n        data: { planType: freePlan.type },\n      });\n    }\n\n    logger.info(`Subscription deleted (soft): ${subscription.id}`, {\n      organizationId: existingSubscription.organizationId,\n    });\n  }\n\n  private async handleInvoicePaymentSucceeded(invoice: Stripe.Invoice): Promise<void> {\n    const subscriptionId = invoice.subscription as string;\n    \n    if (!subscriptionId) {\n      logger.warn('Invoice payment succeeded but no subscription ID found', { invoiceId: invoice.id });\n      return;\n    }\n\n    const subscription = await this.prisma.subscription.findFirst({\n      where: { stripeSubscriptionId: subscriptionId },\n    });\n\n    if (!subscription) {\n      logger.warn(`Subscription not found for invoice: ${invoice.id}`);\n      return;\n    }\n\n    // Create or update invoice record\n    await this.prisma.invoice.upsert({\n      where: { stripeInvoiceId: invoice.id },\n      update: {\n        status: InvoiceStatus.PAID,\n        paidAt: new Date(invoice.status_transitions.paid_at! * 1000),\n        hostedInvoiceUrl: invoice.hosted_invoice_url,\n        invoicePdf: invoice.invoice_pdf,\n      },\n      create: {\n        subscriptionId: subscription.id,\n        stripeInvoiceId: invoice.id,\n        number: invoice.number || `INV-${invoice.id}`,\n        status: InvoiceStatus.PAID,\n        total: invoice.total,\n        currency: invoice.currency.toUpperCase(),\n        paidAt: new Date(invoice.status_transitions.paid_at! * 1000),\n        hostedInvoiceUrl: invoice.hosted_invoice_url,\n        invoicePdf: invoice.invoice_pdf,\n      },\n    });\n\n    // Update subscription status if it was past due\n    if (subscription.status === SubscriptionStatus.PAST_DUE) {\n      await this.prisma.subscription.update({\n        where: { id: subscription.id },\n        data: { status: SubscriptionStatus.ACTIVE },\n      });\n    }\n\n    logger.info(`Invoice payment succeeded: ${invoice.id}`, {\n      subscriptionId: subscription.id,\n      amount: invoice.total,\n    });\n  }\n\n  private async handleInvoicePaymentFailed(invoice: Stripe.Invoice): Promise<void> {\n    const subscriptionId = invoice.subscription as string;\n    \n    if (!subscriptionId) {\n      logger.warn('Invoice payment failed but no subscription ID found', { invoiceId: invoice.id });\n      return;\n    }\n\n    const subscription = await this.prisma.subscription.findFirst({\n      where: { stripeSubscriptionId: subscriptionId },\n    });\n\n    if (!subscription) {\n      logger.warn(`Subscription not found for failed invoice: ${invoice.id}`);\n      return;\n    }\n\n    // Create or update invoice record\n    await this.prisma.invoice.upsert({\n      where: { stripeInvoiceId: invoice.id },\n      update: {\n        status: InvoiceStatus.FAILED,\n      },\n      create: {\n        subscriptionId: subscription.id,\n        stripeInvoiceId: invoice.id,\n        number: invoice.number || `INV-${invoice.id}`,\n        status: InvoiceStatus.FAILED,\n        total: invoice.total,\n        currency: invoice.currency.toUpperCase(),\n        hostedInvoiceUrl: invoice.hosted_invoice_url,\n        invoicePdf: invoice.invoice_pdf,\n      },\n    });\n\n    // Update subscription status to past due\n    await this.prisma.subscription.update({\n      where: { id: subscription.id },\n      data: { status: SubscriptionStatus.PAST_DUE },\n    });\n\n    logger.error(`Invoice payment failed: ${invoice.id}`, {\n      subscriptionId: subscription.id,\n      amount: invoice.total,\n    });\n\n    // TODO: Send dunning emails or notifications\n  }\n\n  private async handleCustomerCreated(customer: Stripe.Customer): Promise<void> {\n    logger.info(`Customer created: ${customer.id}`, {\n      email: customer.email,\n      name: customer.name,\n    });\n    // Customer creation is handled in the billing service when creating checkout\n  }\n\n  private async handleCustomerUpdated(customer: Stripe.Customer): Promise<void> {\n    const organization = await this.prisma.organization.findFirst({\n      where: { stripeCustomerId: customer.id },\n    });\n\n    if (organization) {\n      logger.info(`Customer updated: ${customer.id}`, {\n        organizationId: organization.id,\n        email: customer.email,\n      });\n    }\n  }\n\n  private async handlePaymentMethodAttached(paymentMethod: Stripe.PaymentMethod): Promise<void> {\n    const customerId = paymentMethod.customer as string;\n    \n    const organization = await this.prisma.organization.findFirst({\n      where: { stripeCustomerId: customerId },\n    });\n\n    if (!organization) {\n      logger.warn(`Organization not found for payment method: ${paymentMethod.id}`);\n      return;\n    }\n\n    // Create or update payment method record\n    await this.prisma.paymentMethod.upsert({\n      where: { stripePaymentMethodId: paymentMethod.id },\n      update: {\n        type: paymentMethod.type,\n        last4: paymentMethod.card?.last4 || null,\n        brand: paymentMethod.card?.brand || null,\n        expiryMonth: paymentMethod.card?.exp_month || null,\n        expiryYear: paymentMethod.card?.exp_year || null,\n      },\n      create: {\n        organizationId: organization.id,\n        stripePaymentMethodId: paymentMethod.id,\n        type: paymentMethod.type,\n        last4: paymentMethod.card?.last4 || null,\n        brand: paymentMethod.card?.brand || null,\n        expiryMonth: paymentMethod.card?.exp_month || null,\n        expiryYear: paymentMethod.card?.exp_year || null,\n      },\n    });\n\n    logger.info(`Payment method attached: ${paymentMethod.id}`, {\n      organizationId: organization.id,\n      type: paymentMethod.type,\n    });\n  }\n\n  private mapStripeStatus(stripeStatus: Stripe.Subscription.Status): SubscriptionStatus {\n    const statusMap: Record<Stripe.Subscription.Status, SubscriptionStatus> = {\n      active: SubscriptionStatus.ACTIVE,\n      canceled: SubscriptionStatus.CANCELED,\n      incomplete: SubscriptionStatus.INCOMPLETE,\n      incomplete_expired: SubscriptionStatus.INCOMPLETE_EXPIRED,\n      past_due: SubscriptionStatus.PAST_DUE,\n      trialing: SubscriptionStatus.TRIALING,\n      unpaid: SubscriptionStatus.UNPAID,\n    };\n\n    return statusMap[stripeStatus] || SubscriptionStatus.INCOMPLETE;\n  }\n\n  private async logWebhookEvent(\n    event: Stripe.Event,\n    status: 'success' | 'failed',\n    errorMessage?: string\n  ): Promise<void> {\n    try {\n      await this.prisma.billingEvent.create({\n        data: {\n          eventType: event.type,\n          stripeEventId: event.id,\n          status,\n          data: event.data.object as any,\n          errorMessage,\n          processedAt: new Date(),\n        },\n      });\n    } catch (error) {\n      logger.error('Failed to log webhook event:', error);\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a36371f415286e03b15da9ad6b97a1d373bb30b8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vlnq7ry4i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vlnq7ry4i();
import { PrismaService } from '../database/prisma.service';
import { StripeService } from './stripe.service';
import { logger } from '../utils/logger';
import { SubscriptionStatus, InvoiceStatus } from '@prisma/client';
export class StripeWebhookService {
  prisma;
  stripeService;
  constructor() {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[0]++;
    cov_vlnq7ry4i().s[0]++;
    this.prisma = new PrismaService();
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[1]++;
    this.stripeService = new StripeService();
  }
  async handleWebhook(event) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[1]++;
    cov_vlnq7ry4i().s[2]++;
    logger.info(`Processing Stripe webhook: ${event.type}`, {
      eventId: event.id
    });
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[3]++;
    try {
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[4]++;
      switch (event.type) {
        case 'customer.subscription.created':
          /* istanbul ignore next */
          cov_vlnq7ry4i().b[0][0]++;
          cov_vlnq7ry4i().s[5]++;
          await this.handleSubscriptionCreated(event.data.object);
          /* istanbul ignore next */
          cov_vlnq7ry4i().s[6]++;
          break;
        case 'customer.subscription.updated':
          /* istanbul ignore next */
          cov_vlnq7ry4i().b[0][1]++;
          cov_vlnq7ry4i().s[7]++;
          await this.handleSubscriptionUpdated(event.data.object);
          /* istanbul ignore next */
          cov_vlnq7ry4i().s[8]++;
          break;
        case 'customer.subscription.deleted':
          /* istanbul ignore next */
          cov_vlnq7ry4i().b[0][2]++;
          cov_vlnq7ry4i().s[9]++;
          await this.handleSubscriptionDeleted(event.data.object);
          /* istanbul ignore next */
          cov_vlnq7ry4i().s[10]++;
          break;
        case 'invoice.payment_succeeded':
          /* istanbul ignore next */
          cov_vlnq7ry4i().b[0][3]++;
          cov_vlnq7ry4i().s[11]++;
          await this.handleInvoicePaymentSucceeded(event.data.object);
          /* istanbul ignore next */
          cov_vlnq7ry4i().s[12]++;
          break;
        case 'invoice.payment_failed':
          /* istanbul ignore next */
          cov_vlnq7ry4i().b[0][4]++;
          cov_vlnq7ry4i().s[13]++;
          await this.handleInvoicePaymentFailed(event.data.object);
          /* istanbul ignore next */
          cov_vlnq7ry4i().s[14]++;
          break;
        case 'customer.created':
          /* istanbul ignore next */
          cov_vlnq7ry4i().b[0][5]++;
          cov_vlnq7ry4i().s[15]++;
          await this.handleCustomerCreated(event.data.object);
          /* istanbul ignore next */
          cov_vlnq7ry4i().s[16]++;
          break;
        case 'customer.updated':
          /* istanbul ignore next */
          cov_vlnq7ry4i().b[0][6]++;
          cov_vlnq7ry4i().s[17]++;
          await this.handleCustomerUpdated(event.data.object);
          /* istanbul ignore next */
          cov_vlnq7ry4i().s[18]++;
          break;
        case 'payment_method.attached':
          /* istanbul ignore next */
          cov_vlnq7ry4i().b[0][7]++;
          cov_vlnq7ry4i().s[19]++;
          await this.handlePaymentMethodAttached(event.data.object);
          /* istanbul ignore next */
          cov_vlnq7ry4i().s[20]++;
          break;
        default:
          /* istanbul ignore next */
          cov_vlnq7ry4i().b[0][8]++;
          cov_vlnq7ry4i().s[21]++;
          logger.warn(`Unhandled webhook event type: ${event.type}`);
      }
      // Log successful webhook processing
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[22]++;
      await this.logWebhookEvent(event, 'success');
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[23]++;
      logger.info(`Successfully processed webhook: ${event.type}`, {
        eventId: event.id
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[24]++;
      logger.error(`Error processing webhook ${event.type}:`, error, {
        eventId: event.id
      });
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[25]++;
      await this.logWebhookEvent(event, 'failed', error.message);
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[26]++;
      throw error;
    }
  }
  async handleSubscriptionCreated(subscription) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[2]++;
    const customerId =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[27]++, subscription.customer);
    const priceId =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[28]++, subscription.items.data[0]?.price.id);
    // Find organization by Stripe customer ID
    const organization =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[29]++, await this.prisma.organization.findFirst({
      where: {
        stripeCustomerId: customerId
      }
    }));
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[30]++;
    if (!organization) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[1][0]++;
      cov_vlnq7ry4i().s[31]++;
      throw new Error(`Organization not found for customer ID: ${customerId}`);
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[1][1]++;
    }
    // Find plan by Stripe price ID
    const plan =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[32]++, await this.prisma.plan.findFirst({
      where: {
        stripePriceId: priceId
      }
    }));
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[33]++;
    if (!plan) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[2][0]++;
      cov_vlnq7ry4i().s[34]++;
      throw new Error(`Plan not found for price ID: ${priceId}`);
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[2][1]++;
    }
    // Create subscription record
    cov_vlnq7ry4i().s[35]++;
    await this.prisma.subscription.create({
      data: {
        organizationId: organization.id,
        planId: plan.id,
        stripeSubscriptionId: subscription.id,
        status: this.mapStripeStatus(subscription.status),
        currentPeriodStart: new Date(subscription.current_period_start * 1000),
        currentPeriodEnd: new Date(subscription.current_period_end * 1000),
        trialStart: subscription.trial_start ?
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[3][0]++, new Date(subscription.trial_start * 1000)) :
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[3][1]++, null),
        trialEnd: subscription.trial_end ?
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[4][0]++, new Date(subscription.trial_end * 1000)) :
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[4][1]++, null),
        cancelAtPeriodEnd: subscription.cancel_at_period_end,
        canceledAt: subscription.canceled_at ?
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[5][0]++, new Date(subscription.canceled_at * 1000)) :
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[5][1]++, null)
      }
    });
    // Update organization plan type
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[36]++;
    await this.prisma.organization.update({
      where: {
        id: organization.id
      },
      data: {
        planType: plan.type
      }
    });
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[37]++;
    logger.info(`Subscription created for organization ${organization.id}`, {
      subscriptionId: subscription.id,
      planType: plan.type
    });
  }
  async handleSubscriptionUpdated(subscription) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[3]++;
    const existingSubscription =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[38]++, await this.prisma.subscription.findFirst({
      where: {
        stripeSubscriptionId: subscription.id
      },
      include: {
        plan: true,
        organization: true
      }
    }));
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[39]++;
    if (!existingSubscription) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[6][0]++;
      cov_vlnq7ry4i().s[40]++;
      logger.warn(`Subscription not found for update: ${subscription.id}`);
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[41]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[6][1]++;
    }
    const priceId =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[42]++, subscription.items.data[0]?.price.id);
    let planId =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[43]++, existingSubscription.planId);
    // Check if plan changed
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_vlnq7ry4i().b[8][0]++, priceId) &&
    /* istanbul ignore next */
    (cov_vlnq7ry4i().b[8][1]++, priceId !== existingSubscription.plan.stripePriceId)) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[7][0]++;
      const newPlan =
      /* istanbul ignore next */
      (cov_vlnq7ry4i().s[45]++, await this.prisma.plan.findFirst({
        where: {
          stripePriceId: priceId
        }
      }));
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[46]++;
      if (newPlan) {
        /* istanbul ignore next */
        cov_vlnq7ry4i().b[9][0]++;
        cov_vlnq7ry4i().s[47]++;
        planId = newPlan.id;
        // Update organization plan type
        /* istanbul ignore next */
        cov_vlnq7ry4i().s[48]++;
        await this.prisma.organization.update({
          where: {
            id: existingSubscription.organizationId
          },
          data: {
            planType: newPlan.type
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_vlnq7ry4i().b[9][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[7][1]++;
    }
    // Update subscription
    cov_vlnq7ry4i().s[49]++;
    await this.prisma.subscription.update({
      where: {
        id: existingSubscription.id
      },
      data: {
        planId,
        status: this.mapStripeStatus(subscription.status),
        currentPeriodStart: new Date(subscription.current_period_start * 1000),
        currentPeriodEnd: new Date(subscription.current_period_end * 1000),
        trialStart: subscription.trial_start ?
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[10][0]++, new Date(subscription.trial_start * 1000)) :
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[10][1]++, null),
        trialEnd: subscription.trial_end ?
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[11][0]++, new Date(subscription.trial_end * 1000)) :
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[11][1]++, null),
        cancelAtPeriodEnd: subscription.cancel_at_period_end,
        canceledAt: subscription.canceled_at ?
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[12][0]++, new Date(subscription.canceled_at * 1000)) :
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[12][1]++, null)
      }
    });
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[50]++;
    logger.info(`Subscription updated: ${subscription.id}`, {
      organizationId: existingSubscription.organizationId,
      status: subscription.status
    });
  }
  async handleSubscriptionDeleted(subscription) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[4]++;
    const existingSubscription =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[51]++, await this.prisma.subscription.findFirst({
      where: {
        stripeSubscriptionId: subscription.id
      },
      include: {
        organization: true
      }
    }));
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[52]++;
    if (!existingSubscription) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[13][0]++;
      cov_vlnq7ry4i().s[53]++;
      logger.warn(`Subscription not found for deletion: ${subscription.id}`);
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[54]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[13][1]++;
    }
    // Soft delete: update status instead of deleting
    cov_vlnq7ry4i().s[55]++;
    await this.prisma.subscription.update({
      where: {
        id: existingSubscription.id
      },
      data: {
        status: SubscriptionStatus.CANCELED,
        canceledAt: new Date(),
        deletedAt: new Date() // Soft delete
      }
    });
    // Downgrade organization to free plan
    const freePlan =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[56]++, await this.prisma.plan.findFirst({
      where: {
        type: 'FREE'
      }
    }));
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[57]++;
    if (freePlan) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[14][0]++;
      cov_vlnq7ry4i().s[58]++;
      await this.prisma.organization.update({
        where: {
          id: existingSubscription.organizationId
        },
        data: {
          planType: freePlan.type
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[14][1]++;
    }
    cov_vlnq7ry4i().s[59]++;
    logger.info(`Subscription deleted (soft): ${subscription.id}`, {
      organizationId: existingSubscription.organizationId
    });
  }
  async handleInvoicePaymentSucceeded(invoice) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[5]++;
    const subscriptionId =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[60]++, invoice.subscription);
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[61]++;
    if (!subscriptionId) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[15][0]++;
      cov_vlnq7ry4i().s[62]++;
      logger.warn('Invoice payment succeeded but no subscription ID found', {
        invoiceId: invoice.id
      });
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[63]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[15][1]++;
    }
    const subscription =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[64]++, await this.prisma.subscription.findFirst({
      where: {
        stripeSubscriptionId: subscriptionId
      }
    }));
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[65]++;
    if (!subscription) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[16][0]++;
      cov_vlnq7ry4i().s[66]++;
      logger.warn(`Subscription not found for invoice: ${invoice.id}`);
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[67]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[16][1]++;
    }
    // Create or update invoice record
    cov_vlnq7ry4i().s[68]++;
    await this.prisma.invoice.upsert({
      where: {
        stripeInvoiceId: invoice.id
      },
      update: {
        status: InvoiceStatus.PAID,
        paidAt: new Date(invoice.status_transitions.paid_at * 1000),
        hostedInvoiceUrl: invoice.hosted_invoice_url,
        invoicePdf: invoice.invoice_pdf
      },
      create: {
        subscriptionId: subscription.id,
        stripeInvoiceId: invoice.id,
        number:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[17][0]++, invoice.number) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[17][1]++, `INV-${invoice.id}`),
        status: InvoiceStatus.PAID,
        total: invoice.total,
        currency: invoice.currency.toUpperCase(),
        paidAt: new Date(invoice.status_transitions.paid_at * 1000),
        hostedInvoiceUrl: invoice.hosted_invoice_url,
        invoicePdf: invoice.invoice_pdf
      }
    });
    // Update subscription status if it was past due
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[69]++;
    if (subscription.status === SubscriptionStatus.PAST_DUE) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[18][0]++;
      cov_vlnq7ry4i().s[70]++;
      await this.prisma.subscription.update({
        where: {
          id: subscription.id
        },
        data: {
          status: SubscriptionStatus.ACTIVE
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[18][1]++;
    }
    cov_vlnq7ry4i().s[71]++;
    logger.info(`Invoice payment succeeded: ${invoice.id}`, {
      subscriptionId: subscription.id,
      amount: invoice.total
    });
  }
  async handleInvoicePaymentFailed(invoice) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[6]++;
    const subscriptionId =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[72]++, invoice.subscription);
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[73]++;
    if (!subscriptionId) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[19][0]++;
      cov_vlnq7ry4i().s[74]++;
      logger.warn('Invoice payment failed but no subscription ID found', {
        invoiceId: invoice.id
      });
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[75]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[19][1]++;
    }
    const subscription =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[76]++, await this.prisma.subscription.findFirst({
      where: {
        stripeSubscriptionId: subscriptionId
      }
    }));
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[77]++;
    if (!subscription) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[20][0]++;
      cov_vlnq7ry4i().s[78]++;
      logger.warn(`Subscription not found for failed invoice: ${invoice.id}`);
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[79]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[20][1]++;
    }
    // Create or update invoice record
    cov_vlnq7ry4i().s[80]++;
    await this.prisma.invoice.upsert({
      where: {
        stripeInvoiceId: invoice.id
      },
      update: {
        status: InvoiceStatus.FAILED
      },
      create: {
        subscriptionId: subscription.id,
        stripeInvoiceId: invoice.id,
        number:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[21][0]++, invoice.number) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[21][1]++, `INV-${invoice.id}`),
        status: InvoiceStatus.FAILED,
        total: invoice.total,
        currency: invoice.currency.toUpperCase(),
        hostedInvoiceUrl: invoice.hosted_invoice_url,
        invoicePdf: invoice.invoice_pdf
      }
    });
    // Update subscription status to past due
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[81]++;
    await this.prisma.subscription.update({
      where: {
        id: subscription.id
      },
      data: {
        status: SubscriptionStatus.PAST_DUE
      }
    });
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[82]++;
    logger.error(`Invoice payment failed: ${invoice.id}`, {
      subscriptionId: subscription.id,
      amount: invoice.total
    });
    // TODO: Send dunning emails or notifications
  }
  async handleCustomerCreated(customer) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[7]++;
    cov_vlnq7ry4i().s[83]++;
    logger.info(`Customer created: ${customer.id}`, {
      email: customer.email,
      name: customer.name
    });
    // Customer creation is handled in the billing service when creating checkout
  }
  async handleCustomerUpdated(customer) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[8]++;
    const organization =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[84]++, await this.prisma.organization.findFirst({
      where: {
        stripeCustomerId: customer.id
      }
    }));
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[85]++;
    if (organization) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[22][0]++;
      cov_vlnq7ry4i().s[86]++;
      logger.info(`Customer updated: ${customer.id}`, {
        organizationId: organization.id,
        email: customer.email
      });
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[22][1]++;
    }
  }
  async handlePaymentMethodAttached(paymentMethod) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[9]++;
    const customerId =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[87]++, paymentMethod.customer);
    const organization =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[88]++, await this.prisma.organization.findFirst({
      where: {
        stripeCustomerId: customerId
      }
    }));
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[89]++;
    if (!organization) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().b[23][0]++;
      cov_vlnq7ry4i().s[90]++;
      logger.warn(`Organization not found for payment method: ${paymentMethod.id}`);
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[91]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_vlnq7ry4i().b[23][1]++;
    }
    // Create or update payment method record
    cov_vlnq7ry4i().s[92]++;
    await this.prisma.paymentMethod.upsert({
      where: {
        stripePaymentMethodId: paymentMethod.id
      },
      update: {
        type: paymentMethod.type,
        last4:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[24][0]++, paymentMethod.card?.last4) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[24][1]++, null),
        brand:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[25][0]++, paymentMethod.card?.brand) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[25][1]++, null),
        expiryMonth:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[26][0]++, paymentMethod.card?.exp_month) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[26][1]++, null),
        expiryYear:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[27][0]++, paymentMethod.card?.exp_year) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[27][1]++, null)
      },
      create: {
        organizationId: organization.id,
        stripePaymentMethodId: paymentMethod.id,
        type: paymentMethod.type,
        last4:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[28][0]++, paymentMethod.card?.last4) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[28][1]++, null),
        brand:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[29][0]++, paymentMethod.card?.brand) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[29][1]++, null),
        expiryMonth:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[30][0]++, paymentMethod.card?.exp_month) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[30][1]++, null),
        expiryYear:
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[31][0]++, paymentMethod.card?.exp_year) ||
        /* istanbul ignore next */
        (cov_vlnq7ry4i().b[31][1]++, null)
      }
    });
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[93]++;
    logger.info(`Payment method attached: ${paymentMethod.id}`, {
      organizationId: organization.id,
      type: paymentMethod.type
    });
  }
  mapStripeStatus(stripeStatus) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[10]++;
    const statusMap =
    /* istanbul ignore next */
    (cov_vlnq7ry4i().s[94]++, {
      active: SubscriptionStatus.ACTIVE,
      canceled: SubscriptionStatus.CANCELED,
      incomplete: SubscriptionStatus.INCOMPLETE,
      incomplete_expired: SubscriptionStatus.INCOMPLETE_EXPIRED,
      past_due: SubscriptionStatus.PAST_DUE,
      trialing: SubscriptionStatus.TRIALING,
      unpaid: SubscriptionStatus.UNPAID
    });
    /* istanbul ignore next */
    cov_vlnq7ry4i().s[95]++;
    return /* istanbul ignore next */(cov_vlnq7ry4i().b[32][0]++, statusMap[stripeStatus]) ||
    /* istanbul ignore next */
    (cov_vlnq7ry4i().b[32][1]++, SubscriptionStatus.INCOMPLETE);
  }
  async logWebhookEvent(event, status, errorMessage) {
    /* istanbul ignore next */
    cov_vlnq7ry4i().f[11]++;
    cov_vlnq7ry4i().s[96]++;
    try {
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[97]++;
      await this.prisma.billingEvent.create({
        data: {
          eventType: event.type,
          stripeEventId: event.id,
          status,
          data: event.data.object,
          errorMessage,
          processedAt: new Date()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vlnq7ry4i().s[98]++;
      logger.error('Failed to log webhook event:', error);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,