1b6303d296e4ac4c8f5c59b8c1851777
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock logger to avoid env import
jest.mock('../../utils/logger', () => ({
    logger: {
        info: jest.fn(),
        error: jest.fn(),
        warn: jest.fn(),
        debug: jest.fn(),
    }
}));
// Mock dependencies
jest.mock('axios');
jest.mock('google-ads-api');
jest.mock('../../database/prisma.service');
jest.mock('../crypto.service');
const google_ads_service_1 = require("../google-ads.service");
const google_ads_api_1 = require("google-ads-api");
const axios_1 = __importDefault(require("axios"));
const mockedAxios = axios_1.default;
const MockedGoogleAdsApi = google_ads_api_1.GoogleAdsApi;
describe('GoogleAdsService', () => {
    let service;
    let mockPrismaService;
    let mockCryptoService;
    let mockGoogleAdsClient;
    const mockUser = {
        id: 'user-1',
        email: 'test@example.com',
        organizationId: 'org-1',
    };
    const mockIntegration = {
        id: 'integration-1',
        organizationId: 'org-1',
        platform: 'google_ads',
        isActive: true,
        accessToken: 'encrypted-access-token',
        refreshToken: 'encrypted-refresh-token',
        expiresAt: new Date(Date.now() + 3600000), // 1 hour from now
        settings: {
            customerId: '123-456-7890',
            developerToken: 'test-developer-token',
        },
    };
    const mockGoogleAdsAccount = {
        customer: {
            resource_name: 'customers/1234567890',
            id: '1234567890',
            descriptive_name: 'Test Account',
            currency_code: 'USD',
            time_zone: 'America/New_York',
            status: 'ENABLED',
            type: 'STANDARD',
        },
    };
    const mockCampaign = {
        campaign: {
            resource_name: 'customers/1234567890/campaigns/987654321',
            id: '987654321',
            name: 'Test Campaign',
            status: 'ENABLED',
            advertising_channel_type: 'SEARCH',
            start_date: '2024-01-01',
            end_date: '2024-12-31',
        },
        campaign_budget: {
            amount_micros: '10000000', // $10 in micros
            delivery_method: 'STANDARD',
        },
        metrics: {
            impressions: '1000',
            clicks: '50',
            cost_micros: '5000000', // $5 in micros
            conversions: '5',
            ctr: '0.05',
            average_cpc: '100000', // $0.10 in micros
        },
    };
    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        // Mock PrismaService
        mockPrismaService = {
            integration: {
                findFirst: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn(),
                upsert: jest.fn(),
                findMany: jest.fn(),
            },
            googleAdsAccount: {
                findMany: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
            },
            googleAdsCampaign: {
                findMany: jest.fn(),
                create: jest.fn(),
                createMany: jest.fn(),
                update: jest.fn(),
                upsert: jest.fn(),
            },
            googleAdsKeyword: {
                findMany: jest.fn(),
                create: jest.fn(),
                createMany: jest.fn(),
                update: jest.fn(),
                upsert: jest.fn(),
            },
            googleAdsDailyMetrics: {
                findMany: jest.fn(),
                create: jest.fn(),
                createMany: jest.fn(),
                upsert: jest.fn(),
            },
            googleAdsSyncLog: {
                create: jest.fn(),
                findMany: jest.fn(),
            },
            campaign: {
                upsert: jest.fn(),
            },
            keyword: {
                upsert: jest.fn(),
            },
            campaignMetrics: {
                upsert: jest.fn(),
            },
            $transaction: jest.fn(),
        };
        // Mock CryptoService
        mockCryptoService = {
            encrypt: jest.fn().mockReturnValue('encrypted-token'),
            decrypt: jest.fn().mockReturnValue('decrypted-token'),
        };
        // Mock Google Ads API client
        mockGoogleAdsClient = {
            Customer: jest.fn().mockReturnValue({
                query: jest.fn(),
                listAccessibleCustomers: jest.fn(),
            }),
        };
        MockedGoogleAdsApi.mockImplementation(() => mockGoogleAdsClient);
        // Mock Google Ads config
        const mockGoogleAdsConfig = {
            clientId: 'test-client-id',
            clientSecret: 'test-client-secret',
            developerToken: 'test-developer-token',
            loginCustomerId: 'test-login-customer-id',
            scopes: ['https://www.googleapis.com/auth/adwords']
        };
        // Create service instance
        service = new google_ads_service_1.GoogleAdsService(mockPrismaService, mockCryptoService, mockGoogleAdsConfig);
    });
    describe('generateAuthUrl', () => {
        it('should generate a valid OAuth URL', () => {
            const userId = 'test-user-id';
            const redirectUri = 'http://localhost:3000/callback';
            const result = service.generateAuthUrl(userId, redirectUri);
            expect(typeof result).toBe('string');
            expect(result).toContain('accounts.google.com/o/oauth2/v2/auth');
            expect(result).toContain('client_id=test-client-id');
            expect(result).toContain('redirect_uri=' + encodeURIComponent(redirectUri));
            expect(result).toContain('scope=' + encodeURIComponent('https://www.googleapis.com/auth/adwords'));
        });
    });
    describe('exchangeCodeForToken', () => {
        const mockTokenResponse = {
            data: {
                access_token: 'new-access-token',
                refresh_token: 'new-refresh-token',
                expires_in: 3600,
                token_type: 'Bearer',
                scope: 'https://www.googleapis.com/auth/adwords'
            },
        };
        beforeEach(() => {
            mockAxios.post.mockResolvedValue(mockTokenResponse);
        });
        it('should exchange authorization code for tokens', async () => {
            const code = 'auth-code';
            const redirectUri = 'http://localhost:3000/callback';
            const result = await service.exchangeCodeForToken(code, redirectUri);
            expect(mockAxios.post).toHaveBeenCalledWith('https://oauth2.googleapis.com/token', expect.objectContaining({
                client_id: 'test-client-id',
                client_secret: 'test-client-secret',
                code,
                grant_type: 'authorization_code',
                redirect_uri: redirectUri,
            }));
            expect(result).toEqual({
                access_token: 'new-access-token',
                refresh_token: 'new-refresh-token',
                expires_in: 3600,
                token_type: 'Bearer',
                scope: 'https://www.googleapis.com/auth/adwords'
            });
        });
        it('should throw error for invalid authorization code', async () => {
            mockAxios.post.mockRejectedValue(new Error('Invalid authorization code'));
            await expect(service.exchangeCodeForToken('invalid-code', 'redirect-uri')).rejects.toThrow();
        });
    });
    describe('getCustomerAccounts', () => {
        it('should fetch Google Ads customer accounts', async () => {
            const accessToken = 'test-access-token';
            // Mock the GoogleAdsClient constructor and methods
            const mockQuery = jest.fn().mockResolvedValue([mockGoogleAdsAccount]);
            const mockCustomer = jest.fn().mockReturnValue({ query: mockQuery });
            mockGoogleAdsClient.Customer = mockCustomer;
            const result = await service.getCustomerAccounts(accessToken);
            expect(mockCustomer).toHaveBeenCalled();
            expect(mockQuery).toHaveBeenCalled();
            expect(result).toHaveLength(1);
            expect(result[0]).toEqual({
                id: '1234567890',
                name: 'Test Account',
                currency: 'USD',
                timezone: 'America/New_York',
                status: 'ENABLED',
                type: 'STANDARD',
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,