09ff89a6dd798b2010055e19cc75b379
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testConfig = exports.MockFactory = exports.expectAsync = exports.getMemoryUsage = exports.measurePerformance = exports.createTestRedis = exports.createTestDatabase = exports.restoreDate = exports.mockDate = exports.waitFor = exports.createMockMetrics = exports.createMockCampaign = exports.createMockUser = void 0;
const globals_1 = require("@jest/globals");
// Mock external services by default
globals_1.jest.mock('ioredis', () => {
    return globals_1.jest.fn().mockImplementation(() => ({
        get: globals_1.jest.fn(),
        set: globals_1.jest.fn(),
        setex: globals_1.jest.fn(),
        del: globals_1.jest.fn(),
        keys: globals_1.jest.fn(),
        pipeline: globals_1.jest.fn(),
        ping: globals_1.jest.fn().mockResolvedValue('PONG'),
        info: globals_1.jest.fn(),
        dbsize: globals_1.jest.fn(),
        flushdb: globals_1.jest.fn(),
        exists: globals_1.jest.fn(),
        ttl: globals_1.jest.fn(),
        expire: globals_1.jest.fn(),
        incr: globals_1.jest.fn(),
        decr: globals_1.jest.fn(),
        hget: globals_1.jest.fn(),
        hset: globals_1.jest.fn(),
        hdel: globals_1.jest.fn(),
        hgetall: globals_1.jest.fn(),
        zadd: globals_1.jest.fn(),
        zrange: globals_1.jest.fn(),
        zrem: globals_1.jest.fn(),
        zcard: globals_1.jest.fn(),
        disconnect: globals_1.jest.fn(),
    }));
});
// Mock Bull queue
globals_1.jest.mock('bull', () => {
    return globals_1.jest.fn().mockImplementation(() => ({
        add: globals_1.jest.fn(),
        process: globals_1.jest.fn(),
        on: globals_1.jest.fn(),
        getJobs: globals_1.jest.fn(),
        clean: globals_1.jest.fn(),
        getJobCounts: globals_1.jest.fn(),
        pause: globals_1.jest.fn(),
        resume: globals_1.jest.fn(),
        close: globals_1.jest.fn(),
    }));
});
// Global test setup
beforeAll(async () => {
    // Set test environment variables
    process.env.NODE_ENV = 'test';
    process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://test:test@localhost:5432/utmify_test';
    process.env.REDIS_URL = process.env.TEST_REDIS_URL || 'redis://localhost:6379/1';
    process.env.JWT_SECRET = 'test-jwt-secret';
    process.env.LOG_LEVEL = 'error'; // Reduce log noise during tests
    // Set timezone for consistent date testing
    process.env.TZ = 'UTC';
});
// Global test teardown
afterAll(async () => {
    // Clean up any global resources
    await new Promise(resolve => setTimeout(resolve, 100));
});
// Mock console methods to reduce noise during tests
const originalConsole = { ...console };
beforeEach(() => {
    // Mock console methods but allow them in debug mode
    if (process.env.DEBUG !== 'true') {
        globals_1.jest.spyOn(console, 'log').mockImplementation(() => { });
        globals_1.jest.spyOn(console, 'info').mockImplementation(() => { });
        globals_1.jest.spyOn(console, 'warn').mockImplementation(() => { });
        globals_1.jest.spyOn(console, 'debug').mockImplementation(() => { });
    }
});
afterEach(() => {
    // Restore console methods
    if (process.env.DEBUG !== 'true') {
        globals_1.jest.restoreAllMocks();
    }
});
// Global error handler for unhandled promises
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
});
// Extend Jest matchers
expect.extend({
    toBeValidUUID(received) {
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        const pass = uuidRegex.test(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid UUID`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid UUID`,
                pass: false,
            };
        }
    },
    toBeValidDate(received) {
        const pass = received instanceof Date && !isNaN(received.getTime());
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid Date`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid Date`,
                pass: false,
            };
        }
    },
    toBeWithinRange(received, floor, ceiling) {
        const pass = received >= floor && received <= ceiling;
        if (pass) {
            return {
                message: () => `expected ${received} not to be within range ${floor} - ${ceiling}`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be within range ${floor} - ${ceiling}`,
                pass: false,
            };
        }
    },
});
// Mock console for logging
global.console = {
    ...console,
    log: globals_1.jest.fn(),
    error: globals_1.jest.fn(),
    warn: globals_1.jest.fn(),
    info: globals_1.jest.fn(),
    debug: globals_1.jest.fn(),
};
// Test utilities
const createMockUser = () => ({
    id: '123e4567-e89b-12d3-a456-426614174000',
    organizationId: '123e4567-e89b-12d3-a456-426614174001',
    email: 'test@example.com',
    name: 'Test User',
});
exports.createMockUser = createMockUser;
const createMockCampaign = () => ({
    id: '123e4567-e89b-12d3-a456-426614174002',
    name: 'Test Campaign',
    organizationId: '123e4567-e89b-12d3-a456-426614174001',
    status: 'ACTIVE',
    createdAt: new Date(),
    updatedAt: new Date(),
});
exports.createMockCampaign = createMockCampaign;
const createMockMetrics = () => ({
    revenue: 5000,
    roas: 250,
    roi: 150,
    adSpend: 2000,
    cpc: 4,
    cpm: 200,
    cac: 40,
    impressions: 10000,
    clicks: 500,
    conversions: 50,
    ctr: 5,
    conversionRate: 10,
    ltv: 250,
    arpu: 100,
    margin: 60,
    profit: 3000,
});
exports.createMockMetrics = createMockMetrics;
const waitFor = (ms) => new Promise(resolve => setTimeout(resolve, ms));
exports.waitFor = waitFor;
const mockDate = (date) => {
    const mockDate = new Date(date);
    globals_1.jest.spyOn(global, 'Date').mockImplementation(() => mockDate);
    return mockDate;
};
exports.mockDate = mockDate;
const restoreDate = () => {
    globals_1.jest.restoreAllMocks();
};
exports.restoreDate = restoreDate;
// Database test utilities
const createTestDatabase = async () => {
    // This would be implemented based on your database setup
    // For now, we'll just return a mock
    return {
        cleanup: async () => { },
        seed: async () => { },
    };
};
exports.createTestDatabase = createTestDatabase;
// Redis test utilities
const createTestRedis = async () => {
    // This would be implemented based on your Redis setup
    return {
        cleanup: async () => { },
        flush: async () => { },
    };
};
exports.createTestRedis = createTestRedis;
// Performance testing utilities
const measurePerformance = async (fn) => {
    const start = process.hrtime.bigint();
    const result = await fn();
    const end = process.hrtime.bigint();
    const duration = Number(end - start) / 1000000; // Convert to milliseconds
    return {
        result,
        duration,
    };
};
exports.measurePerformance = measurePerformance;
// Memory usage utilities
const getMemoryUsage = () => {
    const usage = process.memoryUsage();
    return {
        rss: Math.round(usage.rss / 1024 / 1024 * 100) / 100, // MB
        heapTotal: Math.round(usage.heapTotal / 1024 / 1024 * 100) / 100, // MB
        heapUsed: Math.round(usage.heapUsed / 1024 / 1024 * 100) / 100, // MB
        external: Math.round(usage.external / 1024 / 1024 * 100) / 100, // MB
    };
};
exports.getMemoryUsage = getMemoryUsage;
// Async test utilities
const expectAsync = async (promise) => {
    try {
        const result = await promise;
        return expect(result);
    }
    catch (error) {
        return expect(error);
    }
};
exports.expectAsync = expectAsync;
// Mock factory for creating consistent test data
class MockFactory {
    static createMetricsFilters(overrides = {}) {
        return {
            organizationId: '123e4567-e89b-12d3-a456-426614174001',
            startDate: new Date('2024-01-01'),
            endDate: new Date('2024-01-31'),
            ...overrides,
        };
    }
    static createKPIMetrics(overrides = {}) {
        return {
            ...(0, exports.createMockMetrics)(),
            ...overrides,
        };
    }
    static createDashboardMetrics(overrides = {}) {
        const baseMetrics = (0, exports.createMockMetrics)();
        return {
            summary: baseMetrics,
            trends: [
                { period: '2024-01-01', metrics: baseMetrics },
                { period: '2024-01-02', metrics: baseMetrics },
            ],
            topCampaigns: [
                {
                    campaignId: '123e4567-e89b-12d3-a456-426614174002',
                    campaignName: 'Test Campaign',
                    metrics: baseMetrics,
                },
            ],
            alerts: [],
            ...overrides,
        };
    }
}
exports.MockFactory = MockFactory;
// Export test configuration
exports.testConfig = {
    timeout: 30000,
    retries: 3,
    parallel: true,
    coverage: true,
    verbose: process.env.DEBUG === 'true',
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,