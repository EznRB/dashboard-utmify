{"version":3,"names":["cov_8wiz20d2f","actualCoverage","Injectable","Logger","BadRequestException","NotFoundException","PrismaService","TenantDatabaseService","TenantCacheService","TenantQueueService","crypto","bcrypt","InvitationService","s","InvitationService_1","prisma","tenantDatabaseService","tenantCacheService","tenantQueueService","logger","name","constructor","f","createInvitation","data","existingUser","user","findUnique","where","email","b","organizationId","existingInvitation","executeInTenantContext","invitation","findFirst","status","token","generateInvitationToken","expiresAt","Date","setDate","getDate","create","role","invitedById","invitedName","include","organization","select","id","slug","invitedBy","addJob","invitationId","organizationName","inviterName","customMessage","priority","attempts","invalidateInvitationCache","log","error","message","stack","acceptInvitation","hashedPassword","hash","password","update","acceptedAt","inviterEmail","acceptedUserName","acceptedUserEmail","delete","rejectInvitation","rejectedAt","cancelInvitation","resendInvitation","inv","newExpiresAt","getInvitationsByOrganization","cacheKey","get","findMany","orderBy","createdAt","getInvitationByToken","cleanupExpiredInvitations","result","updateMany","lt","count","randomBytes","toString","patterns","pattern","deletePattern","validateInvitationEmail","__decorate","_a","Object","_b","_c","_d"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\invitation.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { TenantDatabaseService } from './tenant-database.service';\nimport { TenantCacheService } from './tenant-cache.service';\nimport { TenantQueueService } from './tenant-queue.service';\nimport { UserRole } from '@prisma/client';\nimport * as crypto from 'crypto';\nimport * as bcrypt from 'bcrypt';\n\ninterface CreateInvitationDto {\n  email: string;\n  role: UserRole;\n  organizationId: string;\n  invitedById: string;\n  invitedName?: string;\n  customMessage?: string;\n}\n\ninterface AcceptInvitationDto {\n  token: string;\n  name: string;\n  password: string;\n}\n\ninterface InvitationWithDetails {\n  id: string;\n  email: string;\n  role: UserRole;\n  status: string;\n  token: string;\n  expiresAt: Date;\n  organizationId: string;\n  invitedById: string;\n  invitedName?: string;\n  acceptedAt?: Date;\n  rejectedAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n  organization: {\n    id: string;\n    name: string;\n    slug: string;\n  };\n  invitedBy: {\n    id: string;\n    email: string;\n    name?: string;\n  };\n}\n\n@Injectable()\nexport class InvitationService {\n  private readonly logger = new Logger(InvitationService.name);\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly tenantDatabaseService: TenantDatabaseService,\n    private readonly tenantCacheService: TenantCacheService,\n    private readonly tenantQueueService: TenantQueueService,\n  ) {}\n\n  // Criar convite\n  async createInvitation(data: CreateInvitationDto): Promise<InvitationWithDetails> {\n    try {\n      // Verificar se o usuário já existe\n      const existingUser = await this.prisma.user.findUnique({\n        where: { email: data.email },\n      });\n\n      if (existingUser && existingUser.organizationId) {\n        throw new BadRequestException(\n          'Usuário já pertence a uma organização',\n        );\n      }\n\n      // Verificar se já existe um convite pendente\n      const existingInvitation = await this.tenantDatabaseService.executeInTenantContext(\n        data.organizationId,\n        async () => {\n          return await this.prisma.invitation.findFirst({\n            where: {\n              email: data.email,\n              organizationId: data.organizationId,\n              status: 'PENDING',\n            },\n          });\n        },\n      );\n\n      if (existingInvitation) {\n        throw new BadRequestException(\n          'Já existe um convite pendente para este email',\n        );\n      }\n\n      // Gerar token único\n      const token = this.generateInvitationToken();\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7); // Expira em 7 dias\n\n      // Criar o convite\n      const invitation = await this.tenantDatabaseService.executeInTenantContext(\n        data.organizationId,\n        async () => {\n          return await this.prisma.invitation.create({\n            data: {\n              email: data.email,\n              role: data.role,\n              token,\n              expiresAt,\n              organizationId: data.organizationId,\n              invitedById: data.invitedById,\n              invitedName: data.invitedName,\n              status: 'PENDING',\n            },\n            include: {\n              organization: {\n                select: {\n                  id: true,\n                  name: true,\n                  slug: true,\n                },\n              },\n              invitedBy: {\n                select: {\n                  id: true,\n                  email: true,\n                  name: true,\n                },\n              },\n            },\n          });\n        },\n      );\n\n      // Adicionar job para enviar email\n      await this.tenantQueueService.addJob(\n        data.organizationId,\n        'email',\n        'send-invitation',\n        {\n          invitationId: invitation.id,\n          email: data.email,\n          organizationName: invitation.organization.name,\n          inviterName: invitation.invitedBy.name || invitation.invitedBy.email,\n          role: data.role,\n          token,\n          customMessage: data.customMessage,\n          expiresAt,\n        },\n        {\n          priority: 1,\n          attempts: 3,\n        },\n        data.invitedById,\n      );\n\n      // Invalidar cache de convites\n      await this.invalidateInvitationCache(data.organizationId);\n\n      this.logger.log(\n        `Invitation created for ${data.email} to organization ${data.organizationId}`,\n      );\n\n      return invitation;\n    } catch (error) {\n      this.logger.error(\n        `Failed to create invitation: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  // Aceitar convite\n  async acceptInvitation(data: AcceptInvitationDto): Promise<{ user: any; organization: any }> {\n    try {\n      // Buscar convite pelo token\n      const invitation = await this.prisma.invitation.findUnique({\n        where: { token: data.token },\n        include: {\n          organization: true,\n          invitedBy: {\n            select: {\n              id: true,\n              email: true,\n              name: true,\n            },\n          },\n        },\n      });\n\n      if (!invitation) {\n        throw new NotFoundException('Convite não encontrado');\n      }\n\n      // Verificar se o convite ainda é válido\n      if (invitation.status !== 'PENDING') {\n        throw new BadRequestException('Convite já foi processado');\n      }\n\n      if (invitation.expiresAt < new Date()) {\n        throw new BadRequestException('Convite expirado');\n      }\n\n      // Verificar se o usuário já existe\n      let user = await this.prisma.user.findUnique({\n        where: { email: invitation.email },\n      });\n\n      const hashedPassword = await bcrypt.hash(data.password, 10);\n\n      if (user) {\n        // Atualizar usuário existente\n        if (user.organizationId) {\n          throw new BadRequestException(\n            'Usuário já pertence a uma organização',\n          );\n        }\n\n        user = await this.prisma.user.update({\n          where: { id: user.id },\n          data: {\n            name: data.name,\n            password: hashedPassword,\n            organizationId: invitation.organizationId,\n            role: invitation.role,\n          },\n        });\n      } else {\n        // Criar novo usuário\n        user = await this.prisma.user.create({\n          data: {\n            email: invitation.email,\n            name: data.name,\n            password: hashedPassword,\n            organizationId: invitation.organizationId,\n            role: invitation.role,\n          },\n        });\n      }\n\n      // Atualizar status do convite\n      await this.tenantDatabaseService.executeInTenantContext(\n        invitation.organizationId,\n        async () => {\n          await this.prisma.invitation.update({\n            where: { id: invitation.id },\n            data: {\n              status: 'ACCEPTED',\n              acceptedAt: new Date(),\n            },\n          });\n        },\n      );\n\n      // Adicionar job para notificar o convidador\n      await this.tenantQueueService.addJob(\n        invitation.organizationId,\n        'email',\n        'invitation-accepted',\n        {\n          inviterEmail: invitation.invitedBy.email,\n          inviterName: invitation.invitedBy.name,\n          acceptedUserName: data.name,\n          acceptedUserEmail: invitation.email,\n          organizationName: invitation.organization.name,\n        },\n        { priority: 2 },\n      );\n\n      // Invalidar caches\n      await this.invalidateInvitationCache(invitation.organizationId);\n      await this.tenantCacheService.delete(`user:${user.id}:profile`);\n\n      this.logger.log(\n        `Invitation accepted by ${invitation.email} for organization ${invitation.organizationId}`,\n      );\n\n      return {\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n          organizationId: user.organizationId,\n        },\n        organization: invitation.organization,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Failed to accept invitation: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  // Rejeitar convite\n  async rejectInvitation(token: string): Promise<void> {\n    try {\n      const invitation = await this.prisma.invitation.findUnique({\n        where: { token },\n      });\n\n      if (!invitation) {\n        throw new NotFoundException('Convite não encontrado');\n      }\n\n      if (invitation.status !== 'PENDING') {\n        throw new BadRequestException('Convite já foi processado');\n      }\n\n      // Atualizar status do convite\n      await this.tenantDatabaseService.executeInTenantContext(\n        invitation.organizationId,\n        async () => {\n          await this.prisma.invitation.update({\n            where: { id: invitation.id },\n            data: {\n              status: 'REJECTED',\n              rejectedAt: new Date(),\n            },\n          });\n        },\n      );\n\n      // Invalidar cache\n      await this.invalidateInvitationCache(invitation.organizationId);\n\n      this.logger.log(\n        `Invitation rejected by ${invitation.email} for organization ${invitation.organizationId}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Failed to reject invitation: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  // Cancelar convite\n  async cancelInvitation(invitationId: string, organizationId: string): Promise<void> {\n    try {\n      await this.tenantDatabaseService.executeInTenantContext(\n        organizationId,\n        async () => {\n          const invitation = await this.prisma.invitation.findFirst({\n            where: {\n              id: invitationId,\n              organizationId,\n              status: 'PENDING',\n            },\n          });\n\n          if (!invitation) {\n            throw new NotFoundException('Convite não encontrado');\n          }\n\n          await this.prisma.invitation.delete({\n            where: { id: invitationId },\n          });\n        },\n      );\n\n      // Invalidar cache\n      await this.invalidateInvitationCache(organizationId);\n\n      this.logger.log(\n        `Invitation ${invitationId} cancelled for organization ${organizationId}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Failed to cancel invitation: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  // Reenviar convite\n  async resendInvitation(invitationId: string, organizationId: string): Promise<void> {\n    try {\n      const invitation = await this.tenantDatabaseService.executeInTenantContext(\n        organizationId,\n        async () => {\n          const inv = await this.prisma.invitation.findFirst({\n            where: {\n              id: invitationId,\n              organizationId,\n              status: 'PENDING',\n            },\n            include: {\n              organization: {\n                select: {\n                  name: true,\n                },\n              },\n              invitedBy: {\n                select: {\n                  name: true,\n                  email: true,\n                },\n              },\n            },\n          });\n\n          if (!inv) {\n            throw new NotFoundException('Convite não encontrado');\n          }\n\n          // Verificar se não expirou\n          if (inv.expiresAt < new Date()) {\n            // Estender prazo por mais 7 dias\n            const newExpiresAt = new Date();\n            newExpiresAt.setDate(newExpiresAt.getDate() + 7);\n\n            return await this.prisma.invitation.update({\n              where: { id: invitationId },\n              data: { expiresAt: newExpiresAt },\n              include: {\n                organization: {\n                  select: {\n                    name: true,\n                  },\n                },\n                invitedBy: {\n                  select: {\n                    name: true,\n                    email: true,\n                  },\n                },\n              },\n            });\n          }\n\n          return inv;\n        },\n      );\n\n      // Adicionar job para reenviar email\n      await this.tenantQueueService.addJob(\n        organizationId,\n        'email',\n        'resend-invitation',\n        {\n          invitationId: invitation.id,\n          email: invitation.email,\n          organizationName: invitation.organization.name,\n          inviterName: invitation.invitedBy.name || invitation.invitedBy.email,\n          role: invitation.role,\n          token: invitation.token,\n          expiresAt: invitation.expiresAt,\n        },\n        {\n          priority: 1,\n          attempts: 3,\n        },\n      );\n\n      this.logger.log(\n        `Invitation ${invitationId} resent for organization ${organizationId}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Failed to resend invitation: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  // Buscar convites por organização\n  async getInvitationsByOrganization(\n    organizationId: string,\n    status?: string,\n  ): Promise<InvitationWithDetails[]> {\n    const cacheKey = `invitations:${organizationId}:${status || 'all'}`;\n    \n    return await this.tenantCacheService.get(\n      cacheKey,\n      async () => {\n        return await this.tenantDatabaseService.executeInTenantContext(\n          organizationId,\n          async () => {\n            return await this.prisma.invitation.findMany({\n              where: {\n                organizationId,\n                ...(status && { status }),\n              },\n              include: {\n                organization: {\n                  select: {\n                    id: true,\n                    name: true,\n                    slug: true,\n                  },\n                },\n                invitedBy: {\n                  select: {\n                    id: true,\n                    email: true,\n                    name: true,\n                  },\n                },\n              },\n              orderBy: { createdAt: 'desc' },\n            });\n          },\n        );\n      },\n      300, // 5 minutos de cache\n    );\n  }\n\n  // Buscar convite por token\n  async getInvitationByToken(token: string): Promise<InvitationWithDetails | null> {\n    try {\n      return await this.prisma.invitation.findUnique({\n        where: { token },\n        include: {\n          organization: {\n            select: {\n              id: true,\n              name: true,\n              slug: true,\n            },\n          },\n          invitedBy: {\n            select: {\n              id: true,\n              email: true,\n              name: true,\n            },\n          },\n        },\n      });\n    } catch (error) {\n      this.logger.error(\n        `Failed to get invitation by token: ${error.message}`,\n      );\n      return null;\n    }\n  }\n\n  // Limpar convites expirados\n  async cleanupExpiredInvitations(): Promise<number> {\n    try {\n      const result = await this.prisma.invitation.updateMany({\n        where: {\n          status: 'PENDING',\n          expiresAt: {\n            lt: new Date(),\n          },\n        },\n        data: {\n          status: 'EXPIRED',\n        },\n      });\n\n      this.logger.log(`Marked ${result.count} invitations as expired`);\n      return result.count;\n    } catch (error) {\n      this.logger.error(\n        `Failed to cleanup expired invitations: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  // Gerar token único para convite\n  private generateInvitationToken(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  // Invalidar cache de convites\n  private async invalidateInvitationCache(organizationId: string): Promise<void> {\n    const patterns = [\n      `invitations:${organizationId}:*`,\n      `organization:${organizationId}:stats`,\n    ];\n\n    for (const pattern of patterns) {\n      await this.tenantCacheService.deletePattern(pattern);\n    }\n  }\n\n  // Validar se o email pode ser convidado\n  async validateInvitationEmail(email: string, organizationId: string): Promise<boolean> {\n    try {\n      // Verificar se o usuário já existe e pertence a uma organização\n      const existingUser = await this.prisma.user.findUnique({\n        where: { email },\n      });\n\n      if (existingUser && existingUser.organizationId) {\n        return false;\n      }\n\n      // Verificar se já existe convite pendente\n      const existingInvitation = await this.tenantDatabaseService.executeInTenantContext(\n        organizationId,\n        async () => {\n          return await this.prisma.invitation.findFirst({\n            where: {\n              email,\n              organizationId,\n              status: 'PENDING',\n            },\n          });\n        },\n      );\n\n      return !existingInvitation;\n    } catch (error) {\n      this.logger.error(\n        `Failed to validate invitation email: ${error.message}`,\n      );\n      return false;\n    }\n  }\n}"],"mappingsaAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJT,SAASE,UAAU,EAAEC,MAAM,EAAEC,mBAAmB,EAAEC,iBAAiB,QAAQ,gBAAgB;AAC3F,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,qBAAqB,QAAQ,2BAA2B;AACjE,SAASC,kBAAkB,QAAQ,wBAAwB;AAC3D,SAASC,kBAAkB,QAAQ,wBAAwB;AAE3D,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAChC,OAAO,KAAKC,MAAM,MAAM,QAAQ;AA4CzB,IAAMC,iBAAiB;AAAA;AAAA,CAAAZ,aAAA,GAAAa,CAAA,QAAAC,mBAAA,GAAvB,MAAMF,iBAAiB;EAITG,MAAA;EACAC,qBAAA;EACAC,kBAAA;EACAC,kBAAA;EANFC,MAAM;EAAA;EAAA,CAAAnB,aAAA,GAAAa,CAAA,QAAG,IAAIV,MAAM,CAACW,mBAAiB,CAACM,IAAI,CAAC;EAE5DC,YACmBN,MAAqB,EACrBC,qBAA4C,EAC5CC,kBAAsC,EACtCC,kBAAsC;IAAA;IAAAlB,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IAHtC,KAAAE,MAAM,GAANA,MAAM;IAAe;IAAAf,aAAA,GAAAa,CAAA;IACrB,KAAAG,qBAAqB,GAArBA,qBAAqB;IAAuB;IAAAhB,aAAA,GAAAa,CAAA;IAC5C,KAAAI,kBAAkB,GAAlBA,kBAAkB;IAAoB;IAAAjB,aAAA,GAAAa,CAAA;IACtC,KAAAK,kBAAkB,GAAlBA,kBAAkB;EAClC;EAEH;EACA,MAAMK,gBAAgBA,CAACC,IAAyB;IAAA;IAAAxB,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IAC9C,IAAI;MACF;MACA,MAAMY,YAAY;MAAA;MAAA,CAAAzB,aAAA,GAAAa,CAAA,QAAG,MAAM,IAAI,CAACE,MAAM,CAACW,IAAI,CAACC,UAAU,CAAC;QACrDC,KAAK,EAAE;UAAEC,KAAK,EAAEL,IAAI,CAACK;QAAK;OAC3B,CAAC;MAAC;MAAA7B,aAAA,GAAAa,CAAA;MAEH;MAAI;MAAA,CAAAb,aAAA,GAAA8B,CAAA,WAAAL,YAAY;MAAA;MAAA,CAAAzB,aAAA,GAAA8B,CAAA,WAAIL,YAAY,CAACM,cAAc,GAAE;QAAA;QAAA/B,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QAC/C,MAAM,IAAIT,mBAAmB,CAC3B,uCAAuC,CACxC;MACH,CAAC;MAAA;MAAA;QAAAJ,aAAA,GAAA8B,CAAA;MAAA;MAED;MACA,MAAME,kBAAkB;MAAA;MAAA,CAAAhC,aAAA,GAAAa,CAAA,QAAG,MAAM,IAAI,CAACG,qBAAqB,CAACiB,sBAAsB,CAChFT,IAAI,CAACO,cAAc,EACnB,YAAW;QAAA;QAAA/B,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAa,CAAA;QACT,OAAO,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACC,SAAS,CAAC;UAC5CP,KAAK,EAAE;YACLC,KAAK,EAAEL,IAAI,CAACK,KAAK;YACjBE,cAAc,EAAEP,IAAI,CAACO,cAAc;YACnCK,MAAM,EAAE;;SAEX,CAAC;MACJ,CAAC,CACF;MAAC;MAAApC,aAAA,GAAAa,CAAA;MAEF,IAAImB,kBAAkB,EAAE;QAAA;QAAAhC,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QACtB,MAAM,IAAIT,mBAAmB,CAC3B,+CAA+C,CAChD;MACH,CAAC;MAAA;MAAA;QAAAJ,aAAA,GAAA8B,CAAA;MAAA;MAED;MACA,MAAMO,KAAK;MAAA;MAAA,CAAArC,aAAA,GAAAa,CAAA,QAAG,IAAI,CAACyB,uBAAuB,EAAE;MAC5C,MAAMC,SAAS;MAAA;MAAA,CAAAvC,aAAA,GAAAa,CAAA,QAAG,IAAI2B,IAAI,EAAE;MAAC;MAAAxC,aAAA,GAAAa,CAAA;MAC7B0B,SAAS,CAACE,OAAO,CAACF,SAAS,CAACG,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;MAE5C;MACA,MAAMR,UAAU;MAAA;MAAA,CAAAlC,aAAA,GAAAa,CAAA,QAAG,MAAM,IAAI,CAACG,qBAAqB,CAACiB,sBAAsB,CACxET,IAAI,CAACO,cAAc,EACnB,YAAW;QAAA;QAAA/B,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAa,CAAA;QACT,OAAO,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACS,MAAM,CAAC;UACzCnB,IAAI,EAAE;YACJK,KAAK,EAAEL,IAAI,CAACK,KAAK;YACjBe,IAAI,EAAEpB,IAAI,CAACoB,IAAI;YACfP,KAAK;YACLE,SAAS;YACTR,cAAc,EAAEP,IAAI,CAACO,cAAc;YACnCc,WAAW,EAAErB,IAAI,CAACqB,WAAW;YAC7BC,WAAW,EAAEtB,IAAI,CAACsB,WAAW;YAC7BV,MAAM,EAAE;WACT;UACDW,OAAO,EAAE;YACPC,YAAY,EAAE;cACZC,MAAM,EAAE;gBACNC,EAAE,EAAE,IAAI;gBACR9B,IAAI,EAAE,IAAI;gBACV+B,IAAI,EAAE;;aAET;YACDC,SAAS,EAAE;cACTH,MAAM,EAAE;gBACNC,EAAE,EAAE,IAAI;gBACRrB,KAAK,EAAE,IAAI;gBACXT,IAAI,EAAE;;;;SAIb,CAAC;MACJ,CAAC,CACF;MAED;MAAA;MAAApB,aAAA,GAAAa,CAAA;MACA,MAAM,IAAI,CAACK,kBAAkB,CAACmC,MAAM,CAClC7B,IAAI,CAACO,cAAc,EACnB,OAAO,EACP,iBAAiB,EACjB;QACEuB,YAAY,EAAEpB,UAAU,CAACgB,EAAE;QAC3BrB,KAAK,EAAEL,IAAI,CAACK,KAAK;QACjB0B,gBAAgB,EAAErB,UAAU,CAACc,YAAY,CAAC5B,IAAI;QAC9CoC,WAAW;QAAE;QAAA,CAAAxD,aAAA,GAAA8B,CAAA,WAAAI,UAAU,CAACkB,SAAS,CAAChC,IAAI;QAAA;QAAA,CAAApB,aAAA,GAAA8B,CAAA,WAAII,UAAU,CAACkB,SAAS,CAACvB,KAAK;QACpEe,IAAI,EAAEpB,IAAI,CAACoB,IAAI;QACfP,KAAK;QACLoB,aAAa,EAAEjC,IAAI,CAACiC,aAAa;QACjClB;OACD,EACD;QACEmB,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE;OACX,EACDnC,IAAI,CAACqB,WAAW,CACjB;MAED;MAAA;MAAA7C,aAAA,GAAAa,CAAA;MACA,MAAM,IAAI,CAAC+C,yBAAyB,CAACpC,IAAI,CAACO,cAAc,CAAC;MAAC;MAAA/B,aAAA,GAAAa,CAAA;MAE1D,IAAI,CAACM,MAAM,CAAC0C,GAAG,CACb,0BAA0BrC,IAAI,CAACK,KAAK,oBAAoBL,IAAI,CAACO,cAAc,EAAE,CAC9E;MAAC;MAAA/B,aAAA,GAAAa,CAAA;MAEF,OAAOqB,UAAU;IACnB,CAAC,CAAC,OAAO4B,KAAK,EAAE;MAAA;MAAA9D,aAAA,GAAAa,CAAA;MACd,IAAI,CAACM,MAAM,CAAC2C,KAAK,CACf,gCAAgCA,KAAK,CAACC,OAAO,EAAE,EAC/CD,KAAK,CAACE,KAAK,CACZ;MAAC;MAAAhE,aAAA,GAAAa,CAAA;MACF,MAAMiD,KAAK;IACb;EACF;EAEA;EACA,MAAMG,gBAAgBA,CAACzC,IAAyB;IAAA;IAAAxB,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IAC9C,IAAI;MACF;MACA,MAAMqB,UAAU;MAAA;MAAA,CAAAlC,aAAA,GAAAa,CAAA,QAAG,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACP,UAAU,CAAC;QACzDC,KAAK,EAAE;UAAES,KAAK,EAAEb,IAAI,CAACa;QAAK,CAAE;QAC5BU,OAAO,EAAE;UACPC,YAAY,EAAE,IAAI;UAClBI,SAAS,EAAE;YACTH,MAAM,EAAE;cACNC,EAAE,EAAE,IAAI;cACRrB,KAAK,EAAE,IAAI;cACXT,IAAI,EAAE;;;;OAIb,CAAC;MAAC;MAAApB,aAAA,GAAAa,CAAA;MAEH,IAAI,CAACqB,UAAU,EAAE;QAAA;QAAAlC,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QACf,MAAM,IAAIR,iBAAiB,CAAC,wBAAwB,CAAC;MACvD,CAAC;MAAA;MAAA;QAAAL,aAAA,GAAA8B,CAAA;MAAA;MAED;MAAA9B,aAAA,GAAAa,CAAA;MACA,IAAIqB,UAAU,CAACE,MAAM,KAAK,SAAS,EAAE;QAAA;QAAApC,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QACnC,MAAM,IAAIT,mBAAmB,CAAC,2BAA2B,CAAC;MAC5D,CAAC;MAAA;MAAA;QAAAJ,aAAA,GAAA8B,CAAA;MAAA;MAAA9B,aAAA,GAAAa,CAAA;MAED,IAAIqB,UAAU,CAACK,SAAS,GAAG,IAAIC,IAAI,EAAE,EAAE;QAAA;QAAAxC,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QACrC,MAAM,IAAIT,mBAAmB,CAAC,kBAAkB,CAAC;MACnD,CAAC;MAAA;MAAA;QAAAJ,aAAA,GAAA8B,CAAA;MAAA;MAED;MACA,IAAIJ,IAAI;MAAA;MAAA,CAAA1B,aAAA,GAAAa,CAAA,QAAG,MAAM,IAAI,CAACE,MAAM,CAACW,IAAI,CAACC,UAAU,CAAC;QAC3CC,KAAK,EAAE;UAAEC,KAAK,EAAEK,UAAU,CAACL;QAAK;OACjC,CAAC;MAEF,MAAMqC,cAAc;MAAA;MAAA,CAAAlE,aAAA,GAAAa,CAAA,QAAG,MAAMF,MAAM,CAACwD,IAAI,CAAC3C,IAAI,CAAC4C,QAAQ,EAAE,EAAE,CAAC;MAAC;MAAApE,aAAA,GAAAa,CAAA;MAE5D,IAAIa,IAAI,EAAE;QAAA;QAAA1B,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QACR;QACA,IAAIa,IAAI,CAACK,cAAc,EAAE;UAAA;UAAA/B,aAAA,GAAA8B,CAAA;UAAA9B,aAAA,GAAAa,CAAA;UACvB,MAAM,IAAIT,mBAAmB,CAC3B,uCAAuC,CACxC;QACH,CAAC;QAAA;QAAA;UAAAJ,aAAA,GAAA8B,CAAA;QAAA;QAAA9B,aAAA,GAAAa,CAAA;QAEDa,IAAI,GAAG,MAAM,IAAI,CAACX,MAAM,CAACW,IAAI,CAAC2C,MAAM,CAAC;UACnCzC,KAAK,EAAE;YAAEsB,EAAE,EAAExB,IAAI,CAACwB;UAAE,CAAE;UACtB1B,IAAI,EAAE;YACJJ,IAAI,EAAEI,IAAI,CAACJ,IAAI;YACfgD,QAAQ,EAAEF,cAAc;YACxBnC,cAAc,EAAEG,UAAU,CAACH,cAAc;YACzCa,IAAI,EAAEV,UAAU,CAACU;;SAEpB,CAAC;MACJ,CAAC,MAAM;QAAA;QAAA5C,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QACL;QACAa,IAAI,GAAG,MAAM,IAAI,CAACX,MAAM,CAACW,IAAI,CAACiB,MAAM,CAAC;UACnCnB,IAAI,EAAE;YACJK,KAAK,EAAEK,UAAU,CAACL,KAAK;YACvBT,IAAI,EAAEI,IAAI,CAACJ,IAAI;YACfgD,QAAQ,EAAEF,cAAc;YACxBnC,cAAc,EAAEG,UAAU,CAACH,cAAc;YACzCa,IAAI,EAAEV,UAAU,CAACU;;SAEpB,CAAC;MACJ;MAEA;MAAA;MAAA5C,aAAA,GAAAa,CAAA;MACA,MAAM,IAAI,CAACG,qBAAqB,CAACiB,sBAAsB,CACrDC,UAAU,CAACH,cAAc,EACzB,YAAW;QAAA;QAAA/B,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAa,CAAA;QACT,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACmC,MAAM,CAAC;UAClCzC,KAAK,EAAE;YAAEsB,EAAE,EAAEhB,UAAU,CAACgB;UAAE,CAAE;UAC5B1B,IAAI,EAAE;YACJY,MAAM,EAAE,UAAU;YAClBkC,UAAU,EAAE,IAAI9B,IAAI;;SAEvB,CAAC;MACJ,CAAC,CACF;MAED;MAAA;MAAAxC,aAAA,GAAAa,CAAA;MACA,MAAM,IAAI,CAACK,kBAAkB,CAACmC,MAAM,CAClCnB,UAAU,CAACH,cAAc,EACzB,OAAO,EACP,qBAAqB,EACrB;QACEwC,YAAY,EAAErC,UAAU,CAACkB,SAAS,CAACvB,KAAK;QACxC2B,WAAW,EAAEtB,UAAU,CAACkB,SAAS,CAAChC,IAAI;QACtCoD,gBAAgB,EAAEhD,IAAI,CAACJ,IAAI;QAC3BqD,iBAAiB,EAAEvC,UAAU,CAACL,KAAK;QACnC0B,gBAAgB,EAAErB,UAAU,CAACc,YAAY,CAAC5B;OAC3C,EACD;QAAEsC,QAAQ,EAAE;MAAC,CAAE,CAChB;MAED;MAAA;MAAA1D,aAAA,GAAAa,CAAA;MACA,MAAM,IAAI,CAAC+C,yBAAyB,CAAC1B,UAAU,CAACH,cAAc,CAAC;MAAC;MAAA/B,aAAA,GAAAa,CAAA;MAChE,MAAM,IAAI,CAACI,kBAAkB,CAACyD,MAAM,CAAC,QAAQhD,IAAI,CAACwB,EAAE,UAAU,CAAC;MAAC;MAAAlD,aAAA,GAAAa,CAAA;MAEhE,IAAI,CAACM,MAAM,CAAC0C,GAAG,CACb,0BAA0B3B,UAAU,CAACL,KAAK,qBAAqBK,UAAU,CAACH,cAAc,EAAE,CAC3F;MAAC;MAAA/B,aAAA,GAAAa,CAAA;MAEF,OAAO;QACLa,IAAI,EAAE;UACJwB,EAAE,EAAExB,IAAI,CAACwB,EAAE;UACXrB,KAAK,EAAEH,IAAI,CAACG,KAAK;UACjBT,IAAI,EAAEM,IAAI,CAACN,IAAI;UACfwB,IAAI,EAAElB,IAAI,CAACkB,IAAI;UACfb,cAAc,EAAEL,IAAI,CAACK;SACtB;QACDiB,YAAY,EAAEd,UAAU,CAACc;OAC1B;IACH,CAAC,CAAC,OAAOc,KAAK,EAAE;MAAA;MAAA9D,aAAA,GAAAa,CAAA;MACd,IAAI,CAACM,MAAM,CAAC2C,KAAK,CACf,gCAAgCA,KAAK,CAACC,OAAO,EAAE,EAC/CD,KAAK,CAACE,KAAK,CACZ;MAAC;MAAAhE,aAAA,GAAAa,CAAA;MACF,MAAMiD,KAAK;IACb;EACF;EAEA;EACA,MAAMa,gBAAgBA,CAACtC,KAAa;IAAA;IAAArC,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IAClC,IAAI;MACF,MAAMqB,UAAU;MAAA;MAAA,CAAAlC,aAAA,GAAAa,CAAA,QAAG,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACP,UAAU,CAAC;QACzDC,KAAK,EAAE;UAAES;QAAK;OACf,CAAC;MAAC;MAAArC,aAAA,GAAAa,CAAA;MAEH,IAAI,CAACqB,UAAU,EAAE;QAAA;QAAAlC,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QACf,MAAM,IAAIR,iBAAiB,CAAC,wBAAwB,CAAC;MACvD,CAAC;MAAA;MAAA;QAAAL,aAAA,GAAA8B,CAAA;MAAA;MAAA9B,aAAA,GAAAa,CAAA;MAED,IAAIqB,UAAU,CAACE,MAAM,KAAK,SAAS,EAAE;QAAA;QAAApC,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QACnC,MAAM,IAAIT,mBAAmB,CAAC,2BAA2B,CAAC;MAC5D,CAAC;MAAA;MAAA;QAAAJ,aAAA,GAAA8B,CAAA;MAAA;MAED;MAAA9B,aAAA,GAAAa,CAAA;MACA,MAAM,IAAI,CAACG,qBAAqB,CAACiB,sBAAsB,CACrDC,UAAU,CAACH,cAAc,EACzB,YAAW;QAAA;QAAA/B,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAa,CAAA;QACT,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACmC,MAAM,CAAC;UAClCzC,KAAK,EAAE;YAAEsB,EAAE,EAAEhB,UAAU,CAACgB;UAAE,CAAE;UAC5B1B,IAAI,EAAE;YACJY,MAAM,EAAE,UAAU;YAClBwC,UAAU,EAAE,IAAIpC,IAAI;;SAEvB,CAAC;MACJ,CAAC,CACF;MAED;MAAA;MAAAxC,aAAA,GAAAa,CAAA;MACA,MAAM,IAAI,CAAC+C,yBAAyB,CAAC1B,UAAU,CAACH,cAAc,CAAC;MAAC;MAAA/B,aAAA,GAAAa,CAAA;MAEhE,IAAI,CAACM,MAAM,CAAC0C,GAAG,CACb,0BAA0B3B,UAAU,CAACL,KAAK,qBAAqBK,UAAU,CAACH,cAAc,EAAE,CAC3F;IACH,CAAC,CAAC,OAAO+B,KAAK,EAAE;MAAA;MAAA9D,aAAA,GAAAa,CAAA;MACd,IAAI,CAACM,MAAM,CAAC2C,KAAK,CACf,gCAAgCA,KAAK,CAACC,OAAO,EAAE,EAC/CD,KAAK,CAACE,KAAK,CACZ;MAAC;MAAAhE,aAAA,GAAAa,CAAA;MACF,MAAMiD,KAAK;IACb;EACF;EAEA;EACA,MAAMe,gBAAgBA,CAACvB,YAAoB,EAAEvB,cAAsB;IAAA;IAAA/B,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IACjE,IAAI;MAAA;MAAAb,aAAA,GAAAa,CAAA;MACF,MAAM,IAAI,CAACG,qBAAqB,CAACiB,sBAAsB,CACrDF,cAAc,EACd,YAAW;QAAA;QAAA/B,aAAA,GAAAsB,CAAA;QACT,MAAMY,UAAU;QAAA;QAAA,CAAAlC,aAAA,GAAAa,CAAA,QAAG,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACC,SAAS,CAAC;UACxDP,KAAK,EAAE;YACLsB,EAAE,EAAEI,YAAY;YAChBvB,cAAc;YACdK,MAAM,EAAE;;SAEX,CAAC;QAAC;QAAApC,aAAA,GAAAa,CAAA;QAEH,IAAI,CAACqB,UAAU,EAAE;UAAA;UAAAlC,aAAA,GAAA8B,CAAA;UAAA9B,aAAA,GAAAa,CAAA;UACf,MAAM,IAAIR,iBAAiB,CAAC,wBAAwB,CAAC;QACvD,CAAC;QAAA;QAAA;UAAAL,aAAA,GAAA8B,CAAA;QAAA;QAAA9B,aAAA,GAAAa,CAAA;QAED,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACwC,MAAM,CAAC;UAClC9C,KAAK,EAAE;YAAEsB,EAAE,EAAEI;UAAY;SAC1B,CAAC;MACJ,CAAC,CACF;MAED;MAAA;MAAAtD,aAAA,GAAAa,CAAA;MACA,MAAM,IAAI,CAAC+C,yBAAyB,CAAC7B,cAAc,CAAC;MAAC;MAAA/B,aAAA,GAAAa,CAAA;MAErD,IAAI,CAACM,MAAM,CAAC0C,GAAG,CACb,cAAcP,YAAY,+BAA+BvB,cAAc,EAAE,CAC1E;IACH,CAAC,CAAC,OAAO+B,KAAK,EAAE;MAAA;MAAA9D,aAAA,GAAAa,CAAA;MACd,IAAI,CAACM,MAAM,CAAC2C,KAAK,CACf,gCAAgCA,KAAK,CAACC,OAAO,EAAE,EAC/CD,KAAK,CAACE,KAAK,CACZ;MAAC;MAAAhE,aAAA,GAAAa,CAAA;MACF,MAAMiD,KAAK;IACb;EACF;EAEA;EACA,MAAMgB,gBAAgBA,CAACxB,YAAoB,EAAEvB,cAAsB;IAAA;IAAA/B,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IACjE,IAAI;MACF,MAAMqB,UAAU;MAAA;MAAA,CAAAlC,aAAA,GAAAa,CAAA,QAAG,MAAM,IAAI,CAACG,qBAAqB,CAACiB,sBAAsB,CACxEF,cAAc,EACd,YAAW;QAAA;QAAA/B,aAAA,GAAAsB,CAAA;QACT,MAAMyD,GAAG;QAAA;QAAA,CAAA/E,aAAA,GAAAa,CAAA,QAAG,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACC,SAAS,CAAC;UACjDP,KAAK,EAAE;YACLsB,EAAE,EAAEI,YAAY;YAChBvB,cAAc;YACdK,MAAM,EAAE;WACT;UACDW,OAAO,EAAE;YACPC,YAAY,EAAE;cACZC,MAAM,EAAE;gBACN7B,IAAI,EAAE;;aAET;YACDgC,SAAS,EAAE;cACTH,MAAM,EAAE;gBACN7B,IAAI,EAAE,IAAI;gBACVS,KAAK,EAAE;;;;SAId,CAAC;QAAC;QAAA7B,aAAA,GAAAa,CAAA;QAEH,IAAI,CAACkE,GAAG,EAAE;UAAA;UAAA/E,aAAA,GAAA8B,CAAA;UAAA9B,aAAA,GAAAa,CAAA;UACR,MAAM,IAAIR,iBAAiB,CAAC,wBAAwB,CAAC;QACvD,CAAC;QAAA;QAAA;UAAAL,aAAA,GAAA8B,CAAA;QAAA;QAED;QAAA9B,aAAA,GAAAa,CAAA;QACA,IAAIkE,GAAG,CAACxC,SAAS,GAAG,IAAIC,IAAI,EAAE,EAAE;UAAA;UAAAxC,aAAA,GAAA8B,CAAA;UAC9B;UACA,MAAMkD,YAAY;UAAA;UAAA,CAAAhF,aAAA,GAAAa,CAAA,QAAG,IAAI2B,IAAI,EAAE;UAAC;UAAAxC,aAAA,GAAAa,CAAA;UAChCmE,YAAY,CAACvC,OAAO,CAACuC,YAAY,CAACtC,OAAO,EAAE,GAAG,CAAC,CAAC;UAAC;UAAA1C,aAAA,GAAAa,CAAA;UAEjD,OAAO,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACmC,MAAM,CAAC;YACzCzC,KAAK,EAAE;cAAEsB,EAAE,EAAEI;YAAY,CAAE;YAC3B9B,IAAI,EAAE;cAAEe,SAAS,EAAEyC;YAAY,CAAE;YACjCjC,OAAO,EAAE;cACPC,YAAY,EAAE;gBACZC,MAAM,EAAE;kBACN7B,IAAI,EAAE;;eAET;cACDgC,SAAS,EAAE;gBACTH,MAAM,EAAE;kBACN7B,IAAI,EAAE,IAAI;kBACVS,KAAK,EAAE;;;;WAId,CAAC;QACJ,CAAC;QAAA;QAAA;UAAA7B,aAAA,GAAA8B,CAAA;QAAA;QAAA9B,aAAA,GAAAa,CAAA;QAED,OAAOkE,GAAG;MACZ,CAAC,CACF;MAED;MAAA;MAAA/E,aAAA,GAAAa,CAAA;MACA,MAAM,IAAI,CAACK,kBAAkB,CAACmC,MAAM,CAClCtB,cAAc,EACd,OAAO,EACP,mBAAmB,EACnB;QACEuB,YAAY,EAAEpB,UAAU,CAACgB,EAAE;QAC3BrB,KAAK,EAAEK,UAAU,CAACL,KAAK;QACvB0B,gBAAgB,EAAErB,UAAU,CAACc,YAAY,CAAC5B,IAAI;QAC9CoC,WAAW;QAAE;QAAA,CAAAxD,aAAA,GAAA8B,CAAA,WAAAI,UAAU,CAACkB,SAAS,CAAChC,IAAI;QAAA;QAAA,CAAApB,aAAA,GAAA8B,CAAA,WAAII,UAAU,CAACkB,SAAS,CAACvB,KAAK;QACpEe,IAAI,EAAEV,UAAU,CAACU,IAAI;QACrBP,KAAK,EAAEH,UAAU,CAACG,KAAK;QACvBE,SAAS,EAAEL,UAAU,CAACK;OACvB,EACD;QACEmB,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE;OACX,CACF;MAAC;MAAA3D,aAAA,GAAAa,CAAA;MAEF,IAAI,CAACM,MAAM,CAAC0C,GAAG,CACb,cAAcP,YAAY,4BAA4BvB,cAAc,EAAE,CACvE;IACH,CAAC,CAAC,OAAO+B,KAAK,EAAE;MAAA;MAAA9D,aAAA,GAAAa,CAAA;MACd,IAAI,CAACM,MAAM,CAAC2C,KAAK,CACf,gCAAgCA,KAAK,CAACC,OAAO,EAAE,EAC/CD,KAAK,CAACE,KAAK,CACZ;MAAC;MAAAhE,aAAA,GAAAa,CAAA;MACF,MAAMiD,KAAK;IACb;EACF;EAEA;EACA,MAAMmB,4BAA4BA,CAChClD,cAAsB,EACtBK,MAAe;IAAA;IAAApC,aAAA,GAAAsB,CAAA;IAEf,MAAM4D,QAAQ;IAAA;IAAA,CAAAlF,aAAA,GAAAa,CAAA,QAAG,eAAekB,cAAc;IAAI;IAAA,CAAA/B,aAAA,GAAA8B,CAAA,WAAAM,MAAM;IAAA;IAAA,CAAApC,aAAA,GAAA8B,CAAA,WAAI,KAAK,GAAE;IAAC;IAAA9B,aAAA,GAAAa,CAAA;IAEpE,OAAO,MAAM,IAAI,CAACI,kBAAkB,CAACkE,GAAG,CACtCD,QAAQ,EACR,YAAW;MAAA;MAAAlF,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAa,CAAA;MACT,OAAO,MAAM,IAAI,CAACG,qBAAqB,CAACiB,sBAAsB,CAC5DF,cAAc,EACd,YAAW;QAAA;QAAA/B,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAa,CAAA;QACT,OAAO,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACkD,QAAQ,CAAC;UAC3CxD,KAAK,EAAE;YACLG,cAAc;YACd;YAAI;YAAA,CAAA/B,aAAA,GAAA8B,CAAA,WAAAM,MAAM;YAAA;YAAA,CAAApC,aAAA,GAAA8B,CAAA,WAAI;cAAEM;YAAM,CAAE;WACzB;UACDW,OAAO,EAAE;YACPC,YAAY,EAAE;cACZC,MAAM,EAAE;gBACNC,EAAE,EAAE,IAAI;gBACR9B,IAAI,EAAE,IAAI;gBACV+B,IAAI,EAAE;;aAET;YACDC,SAAS,EAAE;cACTH,MAAM,EAAE;gBACNC,EAAE,EAAE,IAAI;gBACRrB,KAAK,EAAE,IAAI;gBACXT,IAAI,EAAE;;;WAGX;UACDiE,OAAO,EAAE;YAAEC,SAAS,EAAE;UAAM;SAC7B,CAAC;MACJ,CAAC,CACF;IACH,CAAC,EACD,GAAG,CACJ;EACH;EAEA;EACA,MAAMC,oBAAoBA,CAAClD,KAAa;IAAA;IAAArC,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IACtC,IAAI;MAAA;MAAAb,aAAA,GAAAa,CAAA;MACF,OAAO,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACP,UAAU,CAAC;QAC7CC,KAAK,EAAE;UAAES;QAAK,CAAE;QAChBU,OAAO,EAAE;UACPC,YAAY,EAAE;YACZC,MAAM,EAAE;cACNC,EAAE,EAAE,IAAI;cACR9B,IAAI,EAAE,IAAI;cACV+B,IAAI,EAAE;;WAET;UACDC,SAAS,EAAE;YACTH,MAAM,EAAE;cACNC,EAAE,EAAE,IAAI;cACRrB,KAAK,EAAE,IAAI;cACXT,IAAI,EAAE;;;;OAIb,CAAC;IACJ,CAAC,CAAC,OAAO0C,KAAK,EAAE;MAAA;MAAA9D,aAAA,GAAAa,CAAA;MACd,IAAI,CAACM,MAAM,CAAC2C,KAAK,CACf,sCAAsCA,KAAK,CAACC,OAAO,EAAE,CACtD;MAAC;MAAA/D,aAAA,GAAAa,CAAA;MACF,OAAO,IAAI;IACb;EACF;EAEA;EACA,MAAM2E,yBAAyBA,CAAA;IAAA;IAAAxF,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IAC7B,IAAI;MACF,MAAM4E,MAAM;MAAA;MAAA,CAAAzF,aAAA,GAAAa,CAAA,SAAG,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACwD,UAAU,CAAC;QACrD9D,KAAK,EAAE;UACLQ,MAAM,EAAE,SAAS;UACjBG,SAAS,EAAE;YACToD,EAAE,EAAE,IAAInD,IAAI;;SAEf;QACDhB,IAAI,EAAE;UACJY,MAAM,EAAE;;OAEX,CAAC;MAAC;MAAApC,aAAA,GAAAa,CAAA;MAEH,IAAI,CAACM,MAAM,CAAC0C,GAAG,CAAC,UAAU4B,MAAM,CAACG,KAAK,yBAAyB,CAAC;MAAC;MAAA5F,aAAA,GAAAa,CAAA;MACjE,OAAO4E,MAAM,CAACG,KAAK;IACrB,CAAC,CAAC,OAAO9B,KAAK,EAAE;MAAA;MAAA9D,aAAA,GAAAa,CAAA;MACd,IAAI,CAACM,MAAM,CAAC2C,KAAK,CACf,0CAA0CA,KAAK,CAACC,OAAO,EAAE,CAC1D;MAAC;MAAA/D,aAAA,GAAAa,CAAA;MACF,MAAMiD,KAAK;IACb;EACF;EAEA;EACQxB,uBAAuBA,CAAA;IAAA;IAAAtC,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IAC7B,OAAOH,MAAM,CAACmF,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;EAC/C;EAEA;EACQ,MAAMlC,yBAAyBA,CAAC7B,cAAsB;IAAA;IAAA/B,aAAA,GAAAsB,CAAA;IAC5D,MAAMyE,QAAQ;IAAA;IAAA,CAAA/F,aAAA,GAAAa,CAAA,SAAG,CACf,eAAekB,cAAc,IAAI,EACjC,gBAAgBA,cAAc,QAAQ,CACvC;IAAC;IAAA/B,aAAA,GAAAa,CAAA;IAEF,KAAK,MAAMmF,OAAO,IAAID,QAAQ,EAAE;MAAA;MAAA/F,aAAA,GAAAa,CAAA;MAC9B,MAAM,IAAI,CAACI,kBAAkB,CAACgF,aAAa,CAACD,OAAO,CAAC;IACtD;EACF;EAEA;EACA,MAAME,uBAAuBA,CAACrE,KAAa,EAAEE,cAAsB;IAAA;IAAA/B,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAa,CAAA;IACjE,IAAI;MACF;MACA,MAAMY,YAAY;MAAA;MAAA,CAAAzB,aAAA,GAAAa,CAAA,SAAG,MAAM,IAAI,CAACE,MAAM,CAACW,IAAI,CAACC,UAAU,CAAC;QACrDC,KAAK,EAAE;UAAEC;QAAK;OACf,CAAC;MAAC;MAAA7B,aAAA,GAAAa,CAAA;MAEH;MAAI;MAAA,CAAAb,aAAA,GAAA8B,CAAA,WAAAL,YAAY;MAAA;MAAA,CAAAzB,aAAA,GAAA8B,CAAA,WAAIL,YAAY,CAACM,cAAc,GAAE;QAAA;QAAA/B,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAa,CAAA;QAC/C,OAAO,KAAK;MACd,CAAC;MAAA;MAAA;QAAAb,aAAA,GAAA8B,CAAA;MAAA;MAED;MACA,MAAME,kBAAkB;MAAA;MAAA,CAAAhC,aAAA,GAAAa,CAAA,SAAG,MAAM,IAAI,CAACG,qBAAqB,CAACiB,sBAAsB,CAChFF,cAAc,EACd,YAAW;QAAA;QAAA/B,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAa,CAAA;QACT,OAAO,MAAM,IAAI,CAACE,MAAM,CAACmB,UAAU,CAACC,SAAS,CAAC;UAC5CP,KAAK,EAAE;YACLC,KAAK;YACLE,cAAc;YACdK,MAAM,EAAE;;SAEX,CAAC;MACJ,CAAC,CACF;MAAC;MAAApC,aAAA,GAAAa,CAAA;MAEF,OAAO,CAACmB,kBAAkB;IAC5B,CAAC,CAAC,OAAO8B,KAAK,EAAE;MAAA;MAAA9D,aAAA,GAAAa,CAAA;MACd,IAAI,CAACM,MAAM,CAAC2C,KAAK,CACf,wCAAwCA,KAAK,CAACC,OAAO,EAAE,CACxD;MAAC;MAAA/D,aAAA,GAAAa,CAAA;MACF,OAAO,KAAK;IACd;EACF;CACD;AAAA;AAAAb,aAAA,GAAAa,CAAA;AA3jBYD,iBAAiB,GAAAE,mBAAA,GAAAqF,UAAA,EAD7BjG,UAAU,EAAE,E;;oCAKgBI,aAAa;AAAA;AAAA,CAAAN,aAAA,GAAA8B,CAAA,WAAbxB,aAAa;AAAA;AAAA,CAAAN,aAAA,GAAA8B,CAAA,WAAAsE,EAAA;AAAA;AAAA,CAAApG,aAAA,GAAA8B,CAAA,WAAAuE,MAAA,WAAAC,EAAA;AAAA;AAAA,CAAAtG,aAAA,GAAA8B,CAAA,kBACEvB,qBAAqB;AAAA;AAAA,CAAAP,aAAA,GAAA8B,CAAA,WAArBvB,qBAAqB;AAAA;AAAA,CAAAP,aAAA,GAAA8B,CAAA,WAAAwE,EAAA;AAAA;AAAA,CAAAtG,aAAA,GAAA8B,CAAA,WAAAuE,MAAA,WAAAE,EAAA;AAAA;AAAA,CAAAvG,aAAA,GAAA8B,CAAA,kBACxBtB,kBAAkB;AAAA;AAAA,CAAAR,aAAA,GAAA8B,CAAA,WAAlBtB,kBAAkB;AAAA;AAAA,CAAAR,aAAA,GAAA8B,CAAA,WAAAyE,EAAA;AAAA;AAAA,CAAAvG,aAAA,GAAA8B,CAAA,WAAAuE,MAAA,WAAAG,EAAA;AAAA;AAAA,CAAAxG,aAAA,GAAA8B,CAAA,kBAClBrB,kBAAkB;AAAA;AAAA,CAAAT,aAAA,GAAA8B,CAAA,WAAlBrB,kBAAkB;AAAA;AAAA,CAAAT,aAAA,GAAA8B,CAAA,WAAA0E,EAAA;AAAA;AAAA,CAAAxG,aAAA,GAAA8B,CAAA,WAAAuE,MAAA,I,EAP9CzF,iBAAiB,CA2jB7B","ignoreList":[]}