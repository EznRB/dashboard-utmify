5a6c72995c2d297654db0509a8b0d2dc
/* istanbul ignore next */
function cov_2cvjmfs90d() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\conversion-events.worker.ts";
  var hash = "92e7edc57dfdee180f9e21ebc36207b64e474fd8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\conversion-events.worker.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 29
        }
      },
      "1": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 45
        }
      },
      "2": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 19,
          column: 11
        }
      },
      "3": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 34
        }
      },
      "4": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 30,
          column: 11
        }
      },
      "5": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "6": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "7": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 38,
          column: 15
        }
      },
      "8": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "9": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 47
        }
      },
      "10": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 28
        }
      },
      "11": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "12": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "13": {
        start: {
          line: 50,
          column: 40
        },
        end: {
          line: 66,
          column: 18
        }
      },
      "14": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 59
        }
      },
      "15": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 72,
          column: 17
        }
      },
      "16": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 71,
          column: 59
        }
      },
      "17": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 58
        }
      },
      "18": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 80,
          column: 19
        }
      },
      "19": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "20": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 24
        }
      },
      "21": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 32
        }
      },
      "22": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 35
        }
      },
      "23": {
        start: {
          line: 96,
          column: 32
        },
        end: {
          line: 101,
          column: 10
        }
      },
      "24": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "25": {
        start: {
          line: 104,
          column: 31
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "26": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "27": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 63
        }
      },
      "28": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      },
      "29": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "30": {
        start: {
          line: 139,
          column: 31
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "31": {
        start: {
          line: 146,
          column: 22
        },
        end: {
          line: 146,
          column: 52
        }
      },
      "32": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "33": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "34": {
        start: {
          line: 149,
          column: 22
        },
        end: {
          line: 149,
          column: 32
        }
      },
      "35": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 35
        }
      },
      "36": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "37": {
        start: {
          line: 176,
          column: 25
        },
        end: {
          line: 183,
          column: 10
        }
      },
      "38": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 185,
          column: 19
        }
      },
      "39": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 19
        }
      },
      "40": {
        start: {
          line: 186,
          column: 27
        },
        end: {
          line: 186,
          column: 51
        }
      },
      "41": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "42": {
        start: {
          line: 189,
          column: 28
        },
        end: {
          line: 189,
          column: 65
        }
      },
      "43": {
        start: {
          line: 190,
          column: 38
        },
        end: {
          line: 195,
          column: 14
        }
      },
      "44": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "45": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 203,
          column: 19
        }
      },
      "46": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 97
        }
      },
      "47": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 34
        }
      },
      "48": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 55
        }
      },
      "49": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 27
        }
      },
      "50": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 237,
          column: 11
        }
      },
      "51": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 243,
          column: 11
        }
      },
      "52": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 26
        }
      },
      "53": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 33
        }
      },
      "54": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 40
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 25
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 37
          }
        },
        loc: {
          start: {
            line: 23,
            column: 45
          },
          end: {
            line: 30,
            column: 9
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 33
          },
          end: {
            line: 31,
            column: 34
          }
        },
        loc: {
          start: {
            line: 31,
            column: 47
          },
          end: {
            line: 39,
            column: 9
          }
        },
        line: 31
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 40,
            column: 32
          },
          end: {
            line: 40,
            column: 33
          }
        },
        loc: {
          start: {
            line: 40,
            column: 41
          },
          end: {
            line: 42,
            column: 9
          }
        },
        line: 40
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 38
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 44
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 48,
            column: 43
          },
          end: {
            line: 48,
            column: 44
          }
        },
        loc: {
          start: {
            line: 48,
            column: 57
          },
          end: {
            line: 81,
            column: 13
          }
        },
        line: 48
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 42
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 92
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 38
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 138
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 41
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 174
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 29
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 207
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 18
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 210
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 16
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 214
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 5
          }
        },
        loc: {
          start: {
            line: 221,
            column: 18
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 221
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 44
          },
          end: {
            line: 244,
            column: 5
          }
        },
        line: 239
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 21
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 245
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 18
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 248
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 44
          }
        }, {
          start: {
            line: 12,
            column: 48
          },
          end: {
            line: 12,
            column: 59
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 13,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 13,
            column: 53
          }
        }, {
          start: {
            line: 13,
            column: 57
          },
          end: {
            line: 13,
            column: 63
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 31
          },
          end: {
            line: 54,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 31
          },
          end: {
            line: 54,
            column: 41
          }
        }, {
          start: {
            line: 54,
            column: 45
          },
          end: {
            line: 54,
            column: 46
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 34
          },
          end: {
            line: 55,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 34
          },
          end: {
            line: 55,
            column: 47
          }
        }, {
          start: {
            line: 55,
            column: 51
          },
          end: {
            line: 55,
            column: 56
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 34
          },
          end: {
            line: 63,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 34
          },
          end: {
            line: 63,
            column: 47
          }
        }, {
          start: {
            line: 63,
            column: 51
          },
          end: {
            line: 63,
            column: 53
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 72,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 72,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "6": {
        loc: {
          start: {
            line: 87,
            column: 23
          },
          end: {
            line: 87,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 48
          },
          end: {
            line: 87,
            column: 61
          }
        }, {
          start: {
            line: 87,
            column: 64
          },
          end: {
            line: 87,
            column: 79
          }
        }],
        line: 87
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: 116,
            column: 13
          },
          end: {
            line: 136,
            column: 9
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 108,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 108,
            column: 26
          }
        }, {
          start: {
            line: 108,
            column: 30
          },
          end: {
            line: 108,
            column: 44
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 123,
            column: 29
          },
          end: {
            line: 123,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 29
          },
          end: {
            line: 123,
            column: 39
          }
        }, {
          start: {
            line: 123,
            column: 43
          },
          end: {
            line: 123,
            column: 44
          }
        }],
        line: 123
      },
      "11": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 148,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 148,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "12": {
        loc: {
          start: {
            line: 162,
            column: 23
          },
          end: {
            line: 162,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 36
          },
          end: {
            line: 162,
            column: 61
          }
        }, {
          start: {
            line: 162,
            column: 64
          },
          end: {
            line: 162,
            column: 73
          }
        }],
        line: 162
      },
      "13": {
        loc: {
          start: {
            line: 170,
            column: 23
          },
          end: {
            line: 170,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 23
          },
          end: {
            line: 170,
            column: 33
          }
        }, {
          start: {
            line: 170,
            column: 37
          },
          end: {
            line: 170,
            column: 38
          }
        }],
        line: 170
      },
      "14": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 185,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 185,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "15": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "16": {
        loc: {
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "17": {
        loc: {
          start: {
            line: 224,
            column: 22
          },
          end: {
            line: 224,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 22
          },
          end: {
            line: 224,
            column: 44
          }
        }, {
          start: {
            line: 224,
            column: 48
          },
          end: {
            line: 224,
            column: 59
          }
        }],
        line: 224
      },
      "18": {
        loc: {
          start: {
            line: 225,
            column: 31
          },
          end: {
            line: 225,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 31
          },
          end: {
            line: 225,
            column: 53
          }
        }, {
          start: {
            line: 225,
            column: 57
          },
          end: {
            line: 225,
            column: 63
          }
        }],
        line: 225
      },
      "19": {
        loc: {
          start: {
            line: 241,
            column: 22
          },
          end: {
            line: 241,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 22
          },
          end: {
            line: 241,
            column: 39
          }
        }, {
          start: {
            line: 241,
            column: 43
          },
          end: {
            line: 241,
            column: 44
          }
        }],
        line: 241
      },
      "20": {
        loc: {
          start: {
            line: 242,
            column: 19
          },
          end: {
            line: 242,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 19
          },
          end: {
            line: 242,
            column: 33
          }
        }, {
          start: {
            line: 242,
            column: 37
          },
          end: {
            line: 242,
            column: 38
          }
        }],
        line: 242
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\conversion-events.worker.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\conversion-events.worker.ts"],
      sourcesContent: ["import { Job, Worker, Queue } from 'bull';\nimport { PrismaClient } from '@prisma/client';\nimport { logger } from '../utils/logger';\nimport { MetricsService } from '../services/metrics.service';\n\ninterface ConversionEventData {\n  campaignId: string;\n  eventType: 'purchase' | 'lead' | 'signup' | 'add_to_cart' | 'view_content';\n  value?: number;\n  currency?: string;\n  userId?: string;\n  sessionId?: string;\n  utmSource?: string;\n  utmMedium?: string;\n  utmCampaign?: string;\n  utmContent?: string;\n  utmTerm?: string;\n  metadata?: Record<string, any>;\n  timestamp: Date;\n}\n\ninterface ConversionEventJob extends Job {\n  data: ConversionEventData;\n}\n\nexport class ConversionEventsWorker {\n  private worker: Worker;\n  private prisma: PrismaClient;\n  private metricsService: MetricsService;\n\n  constructor(prisma: PrismaClient, metricsService: MetricsService) {\n    this.prisma = prisma;\n    this.metricsService = metricsService;\n    \n    this.worker = new Worker(\n      'conversion-events',\n      this.processConversionEvent.bind(this),\n      {\n        connection: {\n          host: process.env.REDIS_HOST || 'localhost',\n          port: parseInt(process.env.REDIS_PORT || '6379'),\n          password: process.env.REDIS_PASSWORD,\n        },\n        concurrency: 10, // Process up to 10 jobs concurrently\n        removeOnComplete: 100, // Keep last 100 completed jobs\n        removeOnFail: 50, // Keep last 50 failed jobs\n      }\n    );\n\n    this.setupEventHandlers();\n  }\n\n  private setupEventHandlers(): void {\n    this.worker.on('completed', (job) => {\n      logger.info(`Conversion event processed successfully`, {\n        jobId: job.id,\n        campaignId: job.data.campaignId,\n        eventType: job.data.eventType,\n        processingTime: Date.now() - job.processedOn!,\n      });\n    });\n\n    this.worker.on('failed', (job, err) => {\n      logger.error(`Conversion event processing failed`, {\n        jobId: job?.id,\n        campaignId: job?.data?.campaignId,\n        eventType: job?.data?.eventType,\n        error: err.message,\n        stack: err.stack,\n      });\n    });\n\n    this.worker.on('error', (err) => {\n      logger.error('Worker error:', err);\n    });\n  }\n\n  private async processConversionEvent(job: ConversionEventJob): Promise<void> {\n    const { data } = job;\n    \n    try {\n      // Start transaction for data consistency\n      await this.prisma.$transaction(async (tx) => {\n        // 1. Store the conversion event\n        const conversionEvent = await tx.conversionEvent.create({\n          data: {\n            campaignId: data.campaignId,\n            eventType: data.eventType,\n            value: data.value || 0,\n            currency: data.currency || 'BRL',\n            userId: data.userId,\n            sessionId: data.sessionId,\n            utmSource: data.utmSource,\n            utmMedium: data.utmMedium,\n            utmCampaign: data.utmCampaign,\n            utmContent: data.utmContent,\n            utmTerm: data.utmTerm,\n            metadata: data.metadata || {},\n            timestamp: data.timestamp,\n          },\n        });\n\n        // 2. Update real-time metrics cache\n        await this.updateRealTimeMetrics(data, tx);\n\n        // 3. Update funnel stage if applicable\n        if (this.isFunnelEvent(data.eventType)) {\n          await this.updateFunnelStage(data, tx);\n        }\n\n        // 4. Trigger alerts if thresholds are met\n        await this.checkAlertThresholds(data, tx);\n\n        logger.info('Conversion event stored successfully', {\n          eventId: conversionEvent.id,\n          campaignId: data.campaignId,\n          eventType: data.eventType,\n          value: data.value,\n        });\n      });\n\n    } catch (error) {\n      logger.error('Error processing conversion event', {\n        campaignId: data.campaignId,\n        eventType: data.eventType,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  }\n\n  private async updateRealTimeMetrics(\n    data: ConversionEventData,\n    tx: any\n  ): Promise<void> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Update or create daily metrics\n    const existingMetrics = await tx.metricsDaily.findFirst({\n      where: {\n        campaignId: data.campaignId,\n        date: today,\n      },\n    });\n\n    if (existingMetrics) {\n      // Update existing metrics\n      const updateData: any = {\n        conversions: { increment: 1 },\n        updatedAt: new Date(),\n      };\n\n      if (data.value && data.value > 0) {\n        updateData.revenue = { increment: data.value };\n      }\n\n      await tx.metricsDaily.update({\n        where: { id: existingMetrics.id },\n        data: updateData,\n      });\n    } else {\n      // Create new daily metrics entry\n      await tx.metricsDaily.create({\n        data: {\n          campaignId: data.campaignId,\n          date: today,\n          conversions: 1,\n          revenue: data.value || 0,\n          // Initialize other metrics with 0\n          impressions: 0,\n          clicks: 0,\n          spend: 0,\n          cpc: 0,\n          cpm: 0,\n          ctr: 0,\n          conversionRate: 0,\n          roas: 0,\n          roi: 0,\n        },\n      });\n    }\n  }\n\n  private async updateFunnelStage(\n    data: ConversionEventData,\n    tx: any\n  ): Promise<void> {\n    const funnelStageMap: Record<string, string> = {\n      'view_content': 'awareness',\n      'add_to_cart': 'consideration',\n      'lead': 'interest',\n      'signup': 'intent',\n      'purchase': 'conversion',\n    };\n\n    const stage = funnelStageMap[data.eventType];\n    if (!stage) return;\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Update or create funnel stage metrics\n    await tx.funnelStage.upsert({\n      where: {\n        campaignId_stage_date: {\n          campaignId: data.campaignId,\n          stage,\n          date: today,\n        },\n      },\n      update: {\n        count: { increment: 1 },\n        value: data.value ? { increment: data.value } : undefined,\n        updatedAt: new Date(),\n      },\n      create: {\n        campaignId: data.campaignId,\n        stage,\n        date: today,\n        count: 1,\n        value: data.value || 0,\n      },\n    });\n  }\n\n  private async checkAlertThresholds(\n    data: ConversionEventData,\n    tx: any\n  ): Promise<void> {\n    // Get campaign settings for alert thresholds\n    const campaign = await tx.campaign.findUnique({\n      where: { id: data.campaignId },\n      select: {\n        name: true,\n        alertThresholds: true,\n        organizationId: true,\n      },\n    });\n\n    if (!campaign?.alertThresholds) return;\n\n    const thresholds = campaign.alertThresholds as any;\n    \n    // Check conversion threshold\n    if (thresholds.maxConversionsPerHour) {\n      const hourAgo = new Date(Date.now() - 60 * 60 * 1000);\n      const recentConversions = await tx.conversionEvent.count({\n        where: {\n          campaignId: data.campaignId,\n          timestamp: { gte: hourAgo },\n        },\n      });\n\n      if (recentConversions >= thresholds.maxConversionsPerHour) {\n        // Trigger alert (implement alert service later)\n        logger.warn('Conversion threshold exceeded', {\n          campaignId: data.campaignId,\n          campaignName: campaign.name,\n          conversions: recentConversions,\n          threshold: thresholds.maxConversionsPerHour,\n        });\n      }\n    }\n  }\n\n  private isFunnelEvent(eventType: string): boolean {\n    return ['view_content', 'add_to_cart', 'lead', 'signup', 'purchase'].includes(eventType);\n  }\n\n  public async close(): Promise<void> {\n    await this.worker.close();\n    logger.info('Conversion events worker closed');\n  }\n\n  public getWorker(): Worker {\n    return this.worker;\n  }\n}\n\n// Queue for adding conversion events\nexport class ConversionEventsQueue {\n  private queue: Queue;\n\n  constructor() {\n    this.queue = new Queue('conversion-events', {\n      connection: {\n        host: process.env.REDIS_HOST || 'localhost',\n        port: parseInt(process.env.REDIS_PORT || '6379'),\n        password: process.env.REDIS_PASSWORD,\n      },\n      defaultJobOptions: {\n        removeOnComplete: 100,\n        removeOnFail: 50,\n        attempts: 3,\n        backoff: {\n          type: 'exponential',\n          delay: 2000,\n        },\n      },\n    });\n  }\n\n  public async addConversionEvent(\n    data: ConversionEventData,\n    options?: {\n      priority?: number;\n      delay?: number;\n    }\n  ): Promise<Job> {\n    return this.queue.add('process-conversion', data, {\n      priority: options?.priority || 0,\n      delay: options?.delay || 0,\n    });\n  }\n\n  public async getQueue(): Promise<Queue> {\n    return this.queue;\n  }\n\n  public async close(): Promise<void> {\n    await this.queue.close();\n    logger.info('Conversion events queue closed');\n  }\n}\n\n// Export types for use in other modules\nexport type { ConversionEventData, ConversionEventJob };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "92e7edc57dfdee180f9e21ebc36207b64e474fd8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2cvjmfs90d = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2cvjmfs90d();
import { Worker, Queue } from 'bull';
import { logger } from '../utils/logger';
export class ConversionEventsWorker {
  worker;
  prisma;
  metricsService;
  constructor(prisma, metricsService) {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[0]++;
    cov_2cvjmfs90d().s[0]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[1]++;
    this.metricsService = metricsService;
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[2]++;
    this.worker = new Worker('conversion-events', this.processConversionEvent.bind(this), {
      connection: {
        host:
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[0][0]++, process.env.REDIS_HOST) ||
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[0][1]++, 'localhost'),
        port: parseInt(
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[1][0]++, process.env.REDIS_PORT) ||
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[1][1]++, '6379')),
        password: process.env.REDIS_PASSWORD
      },
      concurrency: 10,
      // Process up to 10 jobs concurrently
      removeOnComplete: 100,
      // Keep last 100 completed jobs
      removeOnFail: 50 // Keep last 50 failed jobs
    });
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[3]++;
    this.setupEventHandlers();
  }
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[1]++;
    cov_2cvjmfs90d().s[4]++;
    this.worker.on('completed', job => {
      /* istanbul ignore next */
      cov_2cvjmfs90d().f[2]++;
      cov_2cvjmfs90d().s[5]++;
      logger.info(`Conversion event processed successfully`, {
        jobId: job.id,
        campaignId: job.data.campaignId,
        eventType: job.data.eventType,
        processingTime: Date.now() - job.processedOn
      });
    });
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[6]++;
    this.worker.on('failed', (job, err) => {
      /* istanbul ignore next */
      cov_2cvjmfs90d().f[3]++;
      cov_2cvjmfs90d().s[7]++;
      logger.error(`Conversion event processing failed`, {
        jobId: job?.id,
        campaignId: job?.data?.campaignId,
        eventType: job?.data?.eventType,
        error: err.message,
        stack: err.stack
      });
    });
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[8]++;
    this.worker.on('error', err => {
      /* istanbul ignore next */
      cov_2cvjmfs90d().f[4]++;
      cov_2cvjmfs90d().s[9]++;
      logger.error('Worker error:', err);
    });
  }
  async processConversionEvent(job) {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[5]++;
    const {
      data
    } =
    /* istanbul ignore next */
    (cov_2cvjmfs90d().s[10]++, job);
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[11]++;
    try {
      /* istanbul ignore next */
      cov_2cvjmfs90d().s[12]++;
      // Start transaction for data consistency
      await this.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_2cvjmfs90d().f[6]++;
        // 1. Store the conversion event
        const conversionEvent =
        /* istanbul ignore next */
        (cov_2cvjmfs90d().s[13]++, await tx.conversionEvent.create({
          data: {
            campaignId: data.campaignId,
            eventType: data.eventType,
            value:
            /* istanbul ignore next */
            (cov_2cvjmfs90d().b[2][0]++, data.value) ||
            /* istanbul ignore next */
            (cov_2cvjmfs90d().b[2][1]++, 0),
            currency:
            /* istanbul ignore next */
            (cov_2cvjmfs90d().b[3][0]++, data.currency) ||
            /* istanbul ignore next */
            (cov_2cvjmfs90d().b[3][1]++, 'BRL'),
            userId: data.userId,
            sessionId: data.sessionId,
            utmSource: data.utmSource,
            utmMedium: data.utmMedium,
            utmCampaign: data.utmCampaign,
            utmContent: data.utmContent,
            utmTerm: data.utmTerm,
            metadata:
            /* istanbul ignore next */
            (cov_2cvjmfs90d().b[4][0]++, data.metadata) ||
            /* istanbul ignore next */
            (cov_2cvjmfs90d().b[4][1]++, {}),
            timestamp: data.timestamp
          }
        }));
        // 2. Update real-time metrics cache
        /* istanbul ignore next */
        cov_2cvjmfs90d().s[14]++;
        await this.updateRealTimeMetrics(data, tx);
        // 3. Update funnel stage if applicable
        /* istanbul ignore next */
        cov_2cvjmfs90d().s[15]++;
        if (this.isFunnelEvent(data.eventType)) {
          /* istanbul ignore next */
          cov_2cvjmfs90d().b[5][0]++;
          cov_2cvjmfs90d().s[16]++;
          await this.updateFunnelStage(data, tx);
        } else
        /* istanbul ignore next */
        {
          cov_2cvjmfs90d().b[5][1]++;
        }
        // 4. Trigger alerts if thresholds are met
        cov_2cvjmfs90d().s[17]++;
        await this.checkAlertThresholds(data, tx);
        /* istanbul ignore next */
        cov_2cvjmfs90d().s[18]++;
        logger.info('Conversion event stored successfully', {
          eventId: conversionEvent.id,
          campaignId: data.campaignId,
          eventType: data.eventType,
          value: data.value
        });
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvjmfs90d().s[19]++;
      logger.error('Error processing conversion event', {
        campaignId: data.campaignId,
        eventType: data.eventType,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[6][1]++, 'Unknown error')
      });
      /* istanbul ignore next */
      cov_2cvjmfs90d().s[20]++;
      throw error;
    }
  }
  async updateRealTimeMetrics(data, tx) {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[7]++;
    const today =
    /* istanbul ignore next */
    (cov_2cvjmfs90d().s[21]++, new Date());
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[22]++;
    today.setHours(0, 0, 0, 0);
    // Update or create daily metrics
    const existingMetrics =
    /* istanbul ignore next */
    (cov_2cvjmfs90d().s[23]++, await tx.metricsDaily.findFirst({
      where: {
        campaignId: data.campaignId,
        date: today
      }
    }));
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[24]++;
    if (existingMetrics) {
      /* istanbul ignore next */
      cov_2cvjmfs90d().b[7][0]++;
      // Update existing metrics
      const updateData =
      /* istanbul ignore next */
      (cov_2cvjmfs90d().s[25]++, {
        conversions: {
          increment: 1
        },
        updatedAt: new Date()
      });
      /* istanbul ignore next */
      cov_2cvjmfs90d().s[26]++;
      if (
      /* istanbul ignore next */
      (cov_2cvjmfs90d().b[9][0]++, data.value) &&
      /* istanbul ignore next */
      (cov_2cvjmfs90d().b[9][1]++, data.value > 0)) {
        /* istanbul ignore next */
        cov_2cvjmfs90d().b[8][0]++;
        cov_2cvjmfs90d().s[27]++;
        updateData.revenue = {
          increment: data.value
        };
      } else
      /* istanbul ignore next */
      {
        cov_2cvjmfs90d().b[8][1]++;
      }
      cov_2cvjmfs90d().s[28]++;
      await tx.metricsDaily.update({
        where: {
          id: existingMetrics.id
        },
        data: updateData
      });
    } else {
      /* istanbul ignore next */
      cov_2cvjmfs90d().b[7][1]++;
      cov_2cvjmfs90d().s[29]++;
      // Create new daily metrics entry
      await tx.metricsDaily.create({
        data: {
          campaignId: data.campaignId,
          date: today,
          conversions: 1,
          revenue:
          /* istanbul ignore next */
          (cov_2cvjmfs90d().b[10][0]++, data.value) ||
          /* istanbul ignore next */
          (cov_2cvjmfs90d().b[10][1]++, 0),
          // Initialize other metrics with 0
          impressions: 0,
          clicks: 0,
          spend: 0,
          cpc: 0,
          cpm: 0,
          ctr: 0,
          conversionRate: 0,
          roas: 0,
          roi: 0
        }
      });
    }
  }
  async updateFunnelStage(data, tx) {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[8]++;
    const funnelStageMap =
    /* istanbul ignore next */
    (cov_2cvjmfs90d().s[30]++, {
      'view_content': 'awareness',
      'add_to_cart': 'consideration',
      'lead': 'interest',
      'signup': 'intent',
      'purchase': 'conversion'
    });
    const stage =
    /* istanbul ignore next */
    (cov_2cvjmfs90d().s[31]++, funnelStageMap[data.eventType]);
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[32]++;
    if (!stage) {
      /* istanbul ignore next */
      cov_2cvjmfs90d().b[11][0]++;
      cov_2cvjmfs90d().s[33]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2cvjmfs90d().b[11][1]++;
    }
    const today =
    /* istanbul ignore next */
    (cov_2cvjmfs90d().s[34]++, new Date());
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[35]++;
    today.setHours(0, 0, 0, 0);
    // Update or create funnel stage metrics
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[36]++;
    await tx.funnelStage.upsert({
      where: {
        campaignId_stage_date: {
          campaignId: data.campaignId,
          stage,
          date: today
        }
      },
      update: {
        count: {
          increment: 1
        },
        value: data.value ?
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[12][0]++, {
          increment: data.value
        }) :
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[12][1]++, undefined),
        updatedAt: new Date()
      },
      create: {
        campaignId: data.campaignId,
        stage,
        date: today,
        count: 1,
        value:
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[13][0]++, data.value) ||
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[13][1]++, 0)
      }
    });
  }
  async checkAlertThresholds(data, tx) {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[9]++;
    // Get campaign settings for alert thresholds
    const campaign =
    /* istanbul ignore next */
    (cov_2cvjmfs90d().s[37]++, await tx.campaign.findUnique({
      where: {
        id: data.campaignId
      },
      select: {
        name: true,
        alertThresholds: true,
        organizationId: true
      }
    }));
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[38]++;
    if (!campaign?.alertThresholds) {
      /* istanbul ignore next */
      cov_2cvjmfs90d().b[14][0]++;
      cov_2cvjmfs90d().s[39]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2cvjmfs90d().b[14][1]++;
    }
    const thresholds =
    /* istanbul ignore next */
    (cov_2cvjmfs90d().s[40]++, campaign.alertThresholds);
    // Check conversion threshold
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[41]++;
    if (thresholds.maxConversionsPerHour) {
      /* istanbul ignore next */
      cov_2cvjmfs90d().b[15][0]++;
      const hourAgo =
      /* istanbul ignore next */
      (cov_2cvjmfs90d().s[42]++, new Date(Date.now() - 60 * 60 * 1000));
      const recentConversions =
      /* istanbul ignore next */
      (cov_2cvjmfs90d().s[43]++, await tx.conversionEvent.count({
        where: {
          campaignId: data.campaignId,
          timestamp: {
            gte: hourAgo
          }
        }
      }));
      /* istanbul ignore next */
      cov_2cvjmfs90d().s[44]++;
      if (recentConversions >= thresholds.maxConversionsPerHour) {
        /* istanbul ignore next */
        cov_2cvjmfs90d().b[16][0]++;
        cov_2cvjmfs90d().s[45]++;
        // Trigger alert (implement alert service later)
        logger.warn('Conversion threshold exceeded', {
          campaignId: data.campaignId,
          campaignName: campaign.name,
          conversions: recentConversions,
          threshold: thresholds.maxConversionsPerHour
        });
      } else
      /* istanbul ignore next */
      {
        cov_2cvjmfs90d().b[16][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2cvjmfs90d().b[15][1]++;
    }
  }
  isFunnelEvent(eventType) {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[10]++;
    cov_2cvjmfs90d().s[46]++;
    return ['view_content', 'add_to_cart', 'lead', 'signup', 'purchase'].includes(eventType);
  }
  async close() {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[11]++;
    cov_2cvjmfs90d().s[47]++;
    await this.worker.close();
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[48]++;
    logger.info('Conversion events worker closed');
  }
  getWorker() {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[12]++;
    cov_2cvjmfs90d().s[49]++;
    return this.worker;
  }
}
// Queue for adding conversion events
export class ConversionEventsQueue {
  queue;
  constructor() {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[13]++;
    cov_2cvjmfs90d().s[50]++;
    this.queue = new Queue('conversion-events', {
      connection: {
        host:
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[17][0]++, process.env.REDIS_HOST) ||
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[17][1]++, 'localhost'),
        port: parseInt(
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[18][0]++, process.env.REDIS_PORT) ||
        /* istanbul ignore next */
        (cov_2cvjmfs90d().b[18][1]++, '6379')),
        password: process.env.REDIS_PASSWORD
      },
      defaultJobOptions: {
        removeOnComplete: 100,
        removeOnFail: 50,
        attempts: 3,
        backoff: {
          type: 'exponential',
          delay: 2000
        }
      }
    });
  }
  async addConversionEvent(data, options) {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[14]++;
    cov_2cvjmfs90d().s[51]++;
    return this.queue.add('process-conversion', data, {
      priority:
      /* istanbul ignore next */
      (cov_2cvjmfs90d().b[19][0]++, options?.priority) ||
      /* istanbul ignore next */
      (cov_2cvjmfs90d().b[19][1]++, 0),
      delay:
      /* istanbul ignore next */
      (cov_2cvjmfs90d().b[20][0]++, options?.delay) ||
      /* istanbul ignore next */
      (cov_2cvjmfs90d().b[20][1]++, 0)
    });
  }
  async getQueue() {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[15]++;
    cov_2cvjmfs90d().s[52]++;
    return this.queue;
  }
  async close() {
    /* istanbul ignore next */
    cov_2cvjmfs90d().f[16]++;
    cov_2cvjmfs90d().s[53]++;
    await this.queue.close();
    /* istanbul ignore next */
    cov_2cvjmfs90d().s[54]++;
    logger.info('Conversion events queue closed');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,