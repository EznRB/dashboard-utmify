{"version":3,"names":["cov_2cvjmfs90d","actualCoverage","Worker","Queue","logger","ConversionEventsWorker","worker","prisma","metricsService","constructor","f","s","processConversionEvent","bind","connection","host","b","process","env","REDIS_HOST","port","parseInt","REDIS_PORT","password","REDIS_PASSWORD","concurrency","removeOnComplete","removeOnFail","setupEventHandlers","on","job","info","jobId","id","campaignId","data","eventType","processingTime","Date","now","processedOn","err","error","message","stack","$transaction","tx","conversionEvent","create","value","currency","userId","sessionId","utmSource","utmMedium","utmCampaign","utmContent","utmTerm","metadata","timestamp","updateRealTimeMetrics","isFunnelEvent","updateFunnelStage","checkAlertThresholds","eventId","Error","today","setHours","existingMetrics","metricsDaily","findFirst","where","date","updateData","conversions","increment","updatedAt","revenue","update","impressions","clicks","spend","cpc","cpm","ctr","conversionRate","roas","roi","funnelStageMap","stage","funnelStage","upsert","campaignId_stage_date","count","undefined","campaign","findUnique","select","name","alertThresholds","organizationId","thresholds","maxConversionsPerHour","hourAgo","recentConversions","gte","warn","campaignName","threshold","includes","close","getWorker","ConversionEventsQueue","queue","defaultJobOptions","attempts","backoff","type","delay","addConversionEvent","options","add","priority","getQueue"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\workers\\conversion-events.worker.ts"],"sourcesContent":["import { Job, Worker, Queue } from 'bull';\nimport { PrismaClient } from '@prisma/client';\nimport { logger } from '../utils/logger';\nimport { MetricsService } from '../services/metrics.service';\n\ninterface ConversionEventData {\n  campaignId: string;\n  eventType: 'purchase' | 'lead' | 'signup' | 'add_to_cart' | 'view_content';\n  value?: number;\n  currency?: string;\n  userId?: string;\n  sessionId?: string;\n  utmSource?: string;\n  utmMedium?: string;\n  utmCampaign?: string;\n  utmContent?: string;\n  utmTerm?: string;\n  metadata?: Record<string, any>;\n  timestamp: Date;\n}\n\ninterface ConversionEventJob extends Job {\n  data: ConversionEventData;\n}\n\nexport class ConversionEventsWorker {\n  private worker: Worker;\n  private prisma: PrismaClient;\n  private metricsService: MetricsService;\n\n  constructor(prisma: PrismaClient, metricsService: MetricsService) {\n    this.prisma = prisma;\n    this.metricsService = metricsService;\n    \n    this.worker = new Worker(\n      'conversion-events',\n      this.processConversionEvent.bind(this),\n      {\n        connection: {\n          host: process.env.REDIS_HOST || 'localhost',\n          port: parseInt(process.env.REDIS_PORT || '6379'),\n          password: process.env.REDIS_PASSWORD,\n        },\n        concurrency: 10, // Process up to 10 jobs concurrently\n        removeOnComplete: 100, // Keep last 100 completed jobs\n        removeOnFail: 50, // Keep last 50 failed jobs\n      }\n    );\n\n    this.setupEventHandlers();\n  }\n\n  private setupEventHandlers(): void {\n    this.worker.on('completed', (job) => {\n      logger.info(`Conversion event processed successfully`, {\n        jobId: job.id,\n        campaignId: job.data.campaignId,\n        eventType: job.data.eventType,\n        processingTime: Date.now() - job.processedOn!,\n      });\n    });\n\n    this.worker.on('failed', (job, err) => {\n      logger.error(`Conversion event processing failed`, {\n        jobId: job?.id,\n        campaignId: job?.data?.campaignId,\n        eventType: job?.data?.eventType,\n        error: err.message,\n        stack: err.stack,\n      });\n    });\n\n    this.worker.on('error', (err) => {\n      logger.error('Worker error:', err);\n    });\n  }\n\n  private async processConversionEvent(job: ConversionEventJob): Promise<void> {\n    const { data } = job;\n    \n    try {\n      // Start transaction for data consistency\n      await this.prisma.$transaction(async (tx) => {\n        // 1. Store the conversion event\n        const conversionEvent = await tx.conversionEvent.create({\n          data: {\n            campaignId: data.campaignId,\n            eventType: data.eventType,\n            value: data.value || 0,\n            currency: data.currency || 'BRL',\n            userId: data.userId,\n            sessionId: data.sessionId,\n            utmSource: data.utmSource,\n            utmMedium: data.utmMedium,\n            utmCampaign: data.utmCampaign,\n            utmContent: data.utmContent,\n            utmTerm: data.utmTerm,\n            metadata: data.metadata || {},\n            timestamp: data.timestamp,\n          },\n        });\n\n        // 2. Update real-time metrics cache\n        await this.updateRealTimeMetrics(data, tx);\n\n        // 3. Update funnel stage if applicable\n        if (this.isFunnelEvent(data.eventType)) {\n          await this.updateFunnelStage(data, tx);\n        }\n\n        // 4. Trigger alerts if thresholds are met\n        await this.checkAlertThresholds(data, tx);\n\n        logger.info('Conversion event stored successfully', {\n          eventId: conversionEvent.id,\n          campaignId: data.campaignId,\n          eventType: data.eventType,\n          value: data.value,\n        });\n      });\n\n    } catch (error) {\n      logger.error('Error processing conversion event', {\n        campaignId: data.campaignId,\n        eventType: data.eventType,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  }\n\n  private async updateRealTimeMetrics(\n    data: ConversionEventData,\n    tx: any\n  ): Promise<void> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Update or create daily metrics\n    const existingMetrics = await tx.metricsDaily.findFirst({\n      where: {\n        campaignId: data.campaignId,\n        date: today,\n      },\n    });\n\n    if (existingMetrics) {\n      // Update existing metrics\n      const updateData: any = {\n        conversions: { increment: 1 },\n        updatedAt: new Date(),\n      };\n\n      if (data.value && data.value > 0) {\n        updateData.revenue = { increment: data.value };\n      }\n\n      await tx.metricsDaily.update({\n        where: { id: existingMetrics.id },\n        data: updateData,\n      });\n    } else {\n      // Create new daily metrics entry\n      await tx.metricsDaily.create({\n        data: {\n          campaignId: data.campaignId,\n          date: today,\n          conversions: 1,\n          revenue: data.value || 0,\n          // Initialize other metrics with 0\n          impressions: 0,\n          clicks: 0,\n          spend: 0,\n          cpc: 0,\n          cpm: 0,\n          ctr: 0,\n          conversionRate: 0,\n          roas: 0,\n          roi: 0,\n        },\n      });\n    }\n  }\n\n  private async updateFunnelStage(\n    data: ConversionEventData,\n    tx: any\n  ): Promise<void> {\n    const funnelStageMap: Record<string, string> = {\n      'view_content': 'awareness',\n      'add_to_cart': 'consideration',\n      'lead': 'interest',\n      'signup': 'intent',\n      'purchase': 'conversion',\n    };\n\n    const stage = funnelStageMap[data.eventType];\n    if (!stage) return;\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Update or create funnel stage metrics\n    await tx.funnelStage.upsert({\n      where: {\n        campaignId_stage_date: {\n          campaignId: data.campaignId,\n          stage,\n          date: today,\n        },\n      },\n      update: {\n        count: { increment: 1 },\n        value: data.value ? { increment: data.value } : undefined,\n        updatedAt: new Date(),\n      },\n      create: {\n        campaignId: data.campaignId,\n        stage,\n        date: today,\n        count: 1,\n        value: data.value || 0,\n      },\n    });\n  }\n\n  private async checkAlertThresholds(\n    data: ConversionEventData,\n    tx: any\n  ): Promise<void> {\n    // Get campaign settings for alert thresholds\n    const campaign = await tx.campaign.findUnique({\n      where: { id: data.campaignId },\n      select: {\n        name: true,\n        alertThresholds: true,\n        organizationId: true,\n      },\n    });\n\n    if (!campaign?.alertThresholds) return;\n\n    const thresholds = campaign.alertThresholds as any;\n    \n    // Check conversion threshold\n    if (thresholds.maxConversionsPerHour) {\n      const hourAgo = new Date(Date.now() - 60 * 60 * 1000);\n      const recentConversions = await tx.conversionEvent.count({\n        where: {\n          campaignId: data.campaignId,\n          timestamp: { gte: hourAgo },\n        },\n      });\n\n      if (recentConversions >= thresholds.maxConversionsPerHour) {\n        // Trigger alert (implement alert service later)\n        logger.warn('Conversion threshold exceeded', {\n          campaignId: data.campaignId,\n          campaignName: campaign.name,\n          conversions: recentConversions,\n          threshold: thresholds.maxConversionsPerHour,\n        });\n      }\n    }\n  }\n\n  private isFunnelEvent(eventType: string): boolean {\n    return ['view_content', 'add_to_cart', 'lead', 'signup', 'purchase'].includes(eventType);\n  }\n\n  public async close(): Promise<void> {\n    await this.worker.close();\n    logger.info('Conversion events worker closed');\n  }\n\n  public getWorker(): Worker {\n    return this.worker;\n  }\n}\n\n// Queue for adding conversion events\nexport class ConversionEventsQueue {\n  private queue: Queue;\n\n  constructor() {\n    this.queue = new Queue('conversion-events', {\n      connection: {\n        host: process.env.REDIS_HOST || 'localhost',\n        port: parseInt(process.env.REDIS_PORT || '6379'),\n        password: process.env.REDIS_PASSWORD,\n      },\n      defaultJobOptions: {\n        removeOnComplete: 100,\n        removeOnFail: 50,\n        attempts: 3,\n        backoff: {\n          type: 'exponential',\n          delay: 2000,\n        },\n      },\n    });\n  }\n\n  public async addConversionEvent(\n    data: ConversionEventData,\n    options?: {\n      priority?: number;\n      delay?: number;\n    }\n  ): Promise<Job> {\n    return this.queue.add('process-conversion', data, {\n      priority: options?.priority || 0,\n      delay: options?.delay || 0,\n    });\n  }\n\n  public async getQueue(): Promise<Queue> {\n    return this.queue;\n  }\n\n  public async close(): Promise<void> {\n    await this.queue.close();\n    logger.info('Conversion events queue closed');\n  }\n}\n\n// Export types for use in other modules\nexport type { ConversionEventData, ConversionEventJob };"],"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","ignoreList":[]}