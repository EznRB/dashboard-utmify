{"version":3,"names":["logger","StoredProceduresService","prisma","constructor","cov_2m5wgvitkk","f","s","calculateKPIMetrics","organizationId","campaignIds","startDate","endDate","start","b","Date","now","end","debug","result","$queryRaw","map","id","join","error","Error","getTopCampaigns","limit","calculateFunnelMetrics","campaignId","getRealtimeDashboard","hoursBack","aggregateHourlyToDaily","targetDate","date","processedCount","aggregate_hourly_to_daily","info","toISOString","split","cleanupOldMetrics","retentionDays","deletedCount","cleanup_old_metrics","executeCustomQuery","query","params","$queryRawUnsafe","checkStoredProceduresHealth","expectedProcedures","p","availableProcedures","r","routine_name","missingProcedures","filter","proc","includes","available","length","procedures","missing","installStoredProcedures","warn","getPerformanceStats","storedProceduresService","getStoredProceduresService"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stored-procedures.service.ts"],"sourcesContent":["import { PrismaService } from '../database/prisma.service';\nimport { logger } from '../utils/logger';\n\n// Interfaces for stored procedure results\nexport interface StoredProcedureKPIResult {\n  revenue: number;\n  ad_spend: number;\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  roas: number;\n  roi: number;\n  cpc: number;\n  cpm: number;\n  cac: number;\n  ctr: number;\n  conversion_rate: number;\n  arpu: number;\n  ltv: number;\n  margin: number;\n  profit: number;\n}\n\nexport interface TopCampaignResult {\n  campaign_id: string;\n  campaign_name: string;\n  revenue: number;\n  ad_spend: number;\n  roas: number;\n  conversions: number;\n}\n\nexport interface FunnelMetricResult {\n  stage_name: string;\n  stage_order: number;\n  users: number;\n  conversion_rate: number;\n  dropoff_rate: number;\n}\n\nexport interface RealtimeDashboardResult {\n  total_impressions: number;\n  total_clicks: number;\n  total_conversions: number;\n  total_revenue: number;\n  total_ad_spend: number;\n  avg_ctr: number;\n  avg_conversion_rate: number;\n  current_roas: number;\n}\n\nexport class StoredProceduresService {\n  constructor(private prisma: PrismaService) {}\n\n  /**\n   * Calculate KPI metrics using optimized stored procedure\n   */\n  async calculateKPIMetrics(\n    organizationId: string,\n    campaignIds?: string[],\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<StoredProcedureKPIResult | null> {\n    try {\n      const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // Default: 30 days ago\n      const end = endDate || new Date();\n\n      logger.debug('Executing calculate_kpi_metrics stored procedure', {\n        organizationId,\n        campaignIds,\n        startDate: start,\n        endDate: end,\n      });\n\n      const result = await this.prisma.$queryRaw<StoredProcedureKPIResult[]>`\n        SELECT * FROM calculate_kpi_metrics(\n          ${organizationId}::uuid,\n          ${campaignIds ? `ARRAY[${campaignIds.map(id => `'${id}'::uuid`).join(',')}]` : 'NULL'}::uuid[],\n          ${start}::date,\n          ${end}::date\n        )\n      `;\n\n      return result[0] || null;\n    } catch (error) {\n      logger.error('Error executing calculate_kpi_metrics stored procedure:', error);\n      throw new Error('Failed to calculate KPI metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Get top performing campaigns using stored procedure\n   */\n  async getTopCampaigns(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    limit: number = 10\n  ): Promise<TopCampaignResult[]> {\n    try {\n      logger.debug('Executing get_top_campaigns stored procedure', {\n        organizationId,\n        startDate,\n        endDate,\n        limit,\n      });\n\n      const result = await this.prisma.$queryRaw<TopCampaignResult[]>`\n        SELECT * FROM get_top_campaigns(\n          ${organizationId}::uuid,\n          ${startDate}::date,\n          ${endDate}::date,\n          ${limit}::integer\n        )\n      `;\n\n      return result;\n    } catch (error) {\n      logger.error('Error executing get_top_campaigns stored procedure:', error);\n      throw new Error('Failed to get top campaigns using stored procedure');\n    }\n  }\n\n  /**\n   * Calculate funnel metrics using stored procedure\n   */\n  async calculateFunnelMetrics(\n    campaignId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<FunnelMetricResult[]> {\n    try {\n      logger.debug('Executing calculate_funnel_metrics stored procedure', {\n        campaignId,\n        startDate,\n        endDate,\n      });\n\n      const result = await this.prisma.$queryRaw<FunnelMetricResult[]>`\n        SELECT * FROM calculate_funnel_metrics(\n          ${campaignId}::uuid,\n          ${startDate}::date,\n          ${endDate}::date\n        )\n      `;\n\n      return result;\n    } catch (error) {\n      logger.error('Error executing calculate_funnel_metrics stored procedure:', error);\n      throw new Error('Failed to calculate funnel metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Get real-time dashboard metrics using stored procedure\n   */\n  async getRealtimeDashboard(\n    organizationId: string,\n    hoursBack: number = 24\n  ): Promise<RealtimeDashboardResult | null> {\n    try {\n      logger.debug('Executing get_realtime_dashboard stored procedure', {\n        organizationId,\n        hoursBack,\n      });\n\n      const result = await this.prisma.$queryRaw<RealtimeDashboardResult[]>`\n        SELECT * FROM get_realtime_dashboard(\n          ${organizationId}::uuid,\n          ${hoursBack}::integer\n        )\n      `;\n\n      return result[0] || null;\n    } catch (error) {\n      logger.error('Error executing get_realtime_dashboard stored procedure:', error);\n      throw new Error('Failed to get realtime dashboard using stored procedure');\n    }\n  }\n\n  /**\n   * Aggregate hourly metrics to daily using stored procedure\n   */\n  async aggregateHourlyToDaily(targetDate?: Date): Promise<number> {\n    try {\n      const date = targetDate || new Date(Date.now() - 24 * 60 * 60 * 1000); // Default: yesterday\n\n      logger.debug('Executing aggregate_hourly_to_daily stored procedure', {\n        targetDate: date,\n      });\n\n      const result = await this.prisma.$queryRaw<{ aggregate_hourly_to_daily: number }[]>`\n        SELECT aggregate_hourly_to_daily(${date}::date) as aggregate_hourly_to_daily\n      `;\n\n      const processedCount = result[0]?.aggregate_hourly_to_daily || 0;\n      \n      logger.info(`Aggregated ${processedCount} campaign metrics for date ${date.toISOString().split('T')[0]}`);\n      \n      return processedCount;\n    } catch (error) {\n      logger.error('Error executing aggregate_hourly_to_daily stored procedure:', error);\n      throw new Error('Failed to aggregate hourly metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Clean up old metrics data using stored procedure\n   */\n  async cleanupOldMetrics(retentionDays: number = 90): Promise<number> {\n    try {\n      logger.debug('Executing cleanup_old_metrics stored procedure', {\n        retentionDays,\n      });\n\n      const result = await this.prisma.$queryRaw<{ cleanup_old_metrics: number }[]>`\n        SELECT cleanup_old_metrics(${retentionDays}::integer) as cleanup_old_metrics\n      `;\n\n      const deletedCount = result[0]?.cleanup_old_metrics || 0;\n      \n      logger.info(`Cleaned up ${deletedCount} old metric records with retention of ${retentionDays} days`);\n      \n      return deletedCount;\n    } catch (error) {\n      logger.error('Error executing cleanup_old_metrics stored procedure:', error);\n      throw new Error('Failed to cleanup old metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Execute custom SQL query with proper error handling\n   */\n  async executeCustomQuery<T = any>(query: string, params: any[] = []): Promise<T[]> {\n    try {\n      logger.debug('Executing custom SQL query', { query, params });\n\n      const result = await this.prisma.$queryRawUnsafe<T[]>(query, ...params);\n      \n      return result;\n    } catch (error) {\n      logger.error('Error executing custom SQL query:', error);\n      throw new Error('Failed to execute custom SQL query');\n    }\n  }\n\n  /**\n   * Check if stored procedures are available\n   */\n  async checkStoredProceduresHealth(): Promise<{\n    available: boolean;\n    procedures: string[];\n    missing: string[];\n  }> {\n    try {\n      const expectedProcedures = [\n        'calculate_kpi_metrics',\n        'get_top_campaigns',\n        'calculate_funnel_metrics',\n        'aggregate_hourly_to_daily',\n        'cleanup_old_metrics',\n        'get_realtime_dashboard',\n      ];\n\n      const result = await this.prisma.$queryRaw<{ routine_name: string }[]>`\n        SELECT routine_name \n        FROM information_schema.routines \n        WHERE routine_type = 'FUNCTION' \n        AND routine_name = ANY(ARRAY[${expectedProcedures.map(p => `'${p}'`).join(',')}])\n      `;\n\n      const availableProcedures = result.map(r => r.routine_name);\n      const missingProcedures = expectedProcedures.filter(\n        proc => !availableProcedures.includes(proc)\n      );\n\n      return {\n        available: missingProcedures.length === 0,\n        procedures: availableProcedures,\n        missing: missingProcedures,\n      };\n    } catch (error) {\n      logger.error('Error checking stored procedures health:', error);\n      return {\n        available: false,\n        procedures: [],\n        missing: [],\n      };\n    }\n  }\n\n  /**\n   * Install stored procedures from migration file\n   */\n  async installStoredProcedures(): Promise<void> {\n    try {\n      logger.info('Installing stored procedures...');\n\n      // This would typically be handled by a migration system\n      // For now, we'll just log that procedures should be installed manually\n      logger.warn('Stored procedures should be installed via migration system');\n      logger.info('Run the SQL file: prisma/migrations/001_create_metrics_procedures.sql');\n      \n    } catch (error) {\n      logger.error('Error installing stored procedures:', error);\n      throw new Error('Failed to install stored procedures');\n    }\n  }\n\n  /**\n   * Get performance statistics for stored procedures\n   */\n  async getPerformanceStats(): Promise<{\n    procedure_name: string;\n    calls: number;\n    total_time: number;\n    mean_time: number;\n  }[]> {\n    try {\n      // This requires pg_stat_statements extension\n      const result = await this.prisma.$queryRaw<{\n        procedure_name: string;\n        calls: number;\n        total_time: number;\n        mean_time: number;\n      }[]>`\n        SELECT \n          regexp_replace(query, '^SELECT \\* FROM (\\w+)\\(.*', '\\\\1') as procedure_name,\n          calls,\n          total_exec_time as total_time,\n          mean_exec_time as mean_time\n        FROM pg_stat_statements \n        WHERE query LIKE 'SELECT * FROM calculate_%' \n           OR query LIKE 'SELECT * FROM get_%'\n           OR query LIKE 'SELECT * FROM aggregate_%'\n           OR query LIKE 'SELECT * FROM cleanup_%'\n        ORDER BY calls DESC\n      `;\n\n      return result;\n    } catch (error) {\n      logger.warn('Performance stats not available (pg_stat_statements extension may not be enabled)');\n      return [];\n    }\n  }\n}\n\n// Singleton instance\nlet storedProceduresService: StoredProceduresService;\n\nexport const getStoredProceduresService = (prisma?: PrismaService): StoredProceduresService => {\n  if (!storedProceduresService) {\n    if (!prisma) {\n      throw new Error('PrismaService is required to initialize StoredProceduresService');\n    }\n    storedProceduresService = new StoredProceduresService(prisma);\n  }\n  return storedProceduresService;\n};"],"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","ignoreList":[]}