861268ed11b4aabad3f079ff97676765
/* istanbul ignore next */
function cov_2m5wgvitkk() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stored-procedures.service.ts";
  var hash = "d571824bbd980422c1693e5569577ab219ba22ca";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stored-procedures.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 8
        },
        end: {
          line: 5,
          column: 29
        }
      },
      "1": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "2": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 12,
          column: 86
        }
      },
      "3": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "4": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 19,
          column: 15
        }
      },
      "5": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 27,
          column: 7
        }
      },
      "6": {
        start: {
          line: 23,
          column: 57
        },
        end: {
          line: 23,
          column: 72
        }
      },
      "7": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 37
        }
      },
      "8": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 91
        }
      },
      "9": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 86
        }
      },
      "10": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "11": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "12": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 53,
          column: 7
        }
      },
      "13": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 26
        }
      },
      "14": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 87
        }
      },
      "15": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 82
        }
      },
      "16": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "17": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "18": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 77,
          column: 7
        }
      },
      "19": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 26
        }
      },
      "20": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 94
        }
      },
      "21": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 89
        }
      },
      "22": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "23": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 93,
          column: 15
        }
      },
      "24": {
        start: {
          line: 94,
          column: 27
        },
        end: {
          line: 99,
          column: 7
        }
      },
      "25": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 37
        }
      },
      "26": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 92
        }
      },
      "27": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 87
        }
      },
      "28": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "29": {
        start: {
          line: 112,
          column: 25
        },
        end: {
          line: 112,
          column: 81
        }
      },
      "30": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "31": {
        start: {
          line: 116,
          column: 27
        },
        end: {
          line: 118,
          column: 7
        }
      },
      "32": {
        start: {
          line: 119,
          column: 35
        },
        end: {
          line: 119,
          column: 76
        }
      },
      "33": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 118
        }
      },
      "34": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 34
        }
      },
      "35": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 95
        }
      },
      "36": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 89
        }
      },
      "37": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "38": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "39": {
        start: {
          line: 136,
          column: 27
        },
        end: {
          line: 138,
          column: 7
        }
      },
      "40": {
        start: {
          line: 139,
          column: 33
        },
        end: {
          line: 139,
          column: 68
        }
      },
      "41": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 113
        }
      },
      "42": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 32
        }
      },
      "43": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 89
        }
      },
      "44": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 84
        }
      },
      "45": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "46": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 74
        }
      },
      "47": {
        start: {
          line: 154,
          column: 27
        },
        end: {
          line: 154,
          column: 78
        }
      },
      "48": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 26
        }
      },
      "49": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 69
        }
      },
      "50": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 66
        }
      },
      "51": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "52": {
        start: {
          line: 167,
          column: 39
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "53": {
        start: {
          line: 175,
          column: 27
        },
        end: {
          line: 180,
          column: 7
        }
      },
      "54": {
        start: {
          line: 179,
          column: 67
        },
        end: {
          line: 179,
          column: 75
        }
      },
      "55": {
        start: {
          line: 181,
          column: 40
        },
        end: {
          line: 181,
          column: 71
        }
      },
      "56": {
        start: {
          line: 181,
          column: 56
        },
        end: {
          line: 181,
          column: 70
        }
      },
      "57": {
        start: {
          line: 182,
          column: 38
        },
        end: {
          line: 182,
          column: 108
        }
      },
      "58": {
        start: {
          line: 182,
          column: 72
        },
        end: {
          line: 182,
          column: 107
        }
      },
      "59": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 187,
          column: 14
        }
      },
      "60": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 76
        }
      },
      "61": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 195,
          column: 14
        }
      },
      "62": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "63": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 59
        }
      },
      "64": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 86
        }
      },
      "65": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 97
        }
      },
      "66": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 71
        }
      },
      "67": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 67
        }
      },
      "68": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "69": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 232,
          column: 7
        }
      },
      "70": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 26
        }
      },
      "71": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 109
        }
      },
      "72": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 22
        }
      },
      "73": {
        start: {
          line: 243,
          column: 42
        },
        end: {
          line: 251,
          column: 1
        }
      },
      "74": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 249,
          column: 5
        }
      },
      "75": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "76": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 95
        }
      },
      "77": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 70
        }
      },
      "78": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 250,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 4,
            column: 5
          }
        },
        loc: {
          start: {
            line: 4,
            column: 24
          },
          end: {
            line: 6,
            column: 5
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 79
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 51
          },
          end: {
            line: 23,
            column: 52
          }
        },
        loc: {
          start: {
            line: 23,
            column: 57
          },
          end: {
            line: 23,
            column: 72
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 74
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 65
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 64
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 63
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 88
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 45
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 110
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 48
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 131
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 49
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 151
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 40
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 165
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 179,
            column: 62
          },
          end: {
            line: 179,
            column: 63
          }
        },
        loc: {
          start: {
            line: 179,
            column: 67
          },
          end: {
            line: 179,
            column: 75
          }
        },
        line: 179
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 181,
            column: 51
          },
          end: {
            line: 181,
            column: 52
          }
        },
        loc: {
          start: {
            line: 181,
            column: 56
          },
          end: {
            line: 181,
            column: 70
          }
        },
        line: 181
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 182,
            column: 64
          },
          end: {
            line: 182,
            column: 65
          }
        },
        loc: {
          start: {
            line: 182,
            column: 72
          },
          end: {
            line: 182,
            column: 107
          }
        },
        line: 182
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 36
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 201
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 32
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 217
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 243,
            column: 42
          },
          end: {
            line: 243,
            column: 43
          }
        },
        loc: {
          start: {
            line: 243,
            column: 54
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 243
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 35
          }
        }, {
          start: {
            line: 12,
            column: 39
          },
          end: {
            line: 12,
            column: 86
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 13,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 13,
            column: 31
          }
        }, {
          start: {
            line: 13,
            column: 35
          },
          end: {
            line: 13,
            column: 45
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 26
          },
          end: {
            line: 23,
            column: 86
          }
        }, {
          start: {
            line: 23,
            column: 89
          },
          end: {
            line: 23,
            column: 95
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 28
          }
        }, {
          start: {
            line: 28,
            column: 32
          },
          end: {
            line: 28,
            column: 36
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 62
          },
          end: {
            line: 38,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 38,
            column: 70
          },
          end: {
            line: 38,
            column: 72
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 88,
            column: 47
          },
          end: {
            line: 88,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 88,
            column: 59
          },
          end: {
            line: 88,
            column: 61
          }
        }],
        line: 88
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 19
          },
          end: {
            line: 100,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 19
          },
          end: {
            line: 100,
            column: 28
          }
        }, {
          start: {
            line: 100,
            column: 32
          },
          end: {
            line: 100,
            column: 36
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 112,
            column: 25
          },
          end: {
            line: 112,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 25
          },
          end: {
            line: 112,
            column: 35
          }
        }, {
          start: {
            line: 112,
            column: 39
          },
          end: {
            line: 112,
            column: 81
          }
        }],
        line: 112
      },
      "8": {
        loc: {
          start: {
            line: 119,
            column: 35
          },
          end: {
            line: 119,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 35
          },
          end: {
            line: 119,
            column: 71
          }
        }, {
          start: {
            line: 119,
            column: 75
          },
          end: {
            line: 119,
            column: 76
          }
        }],
        line: 119
      },
      "9": {
        loc: {
          start: {
            line: 131,
            column: 28
          },
          end: {
            line: 131,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 131,
            column: 44
          },
          end: {
            line: 131,
            column: 46
          }
        }],
        line: 131
      },
      "10": {
        loc: {
          start: {
            line: 139,
            column: 33
          },
          end: {
            line: 139,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 33
          },
          end: {
            line: 139,
            column: 63
          }
        }, {
          start: {
            line: 139,
            column: 67
          },
          end: {
            line: 139,
            column: 68
          }
        }],
        line: 139
      },
      "11": {
        loc: {
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 151,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 151,
            column: 45
          },
          end: {
            line: 151,
            column: 47
          }
        }],
        line: 151
      },
      "12": {
        loc: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "13": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stored-procedures.service.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\stored-procedures.service.ts"],
      sourcesContent: ["import { PrismaService } from '../database/prisma.service';\nimport { logger } from '../utils/logger';\n\n// Interfaces for stored procedure results\nexport interface StoredProcedureKPIResult {\n  revenue: number;\n  ad_spend: number;\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  roas: number;\n  roi: number;\n  cpc: number;\n  cpm: number;\n  cac: number;\n  ctr: number;\n  conversion_rate: number;\n  arpu: number;\n  ltv: number;\n  margin: number;\n  profit: number;\n}\n\nexport interface TopCampaignResult {\n  campaign_id: string;\n  campaign_name: string;\n  revenue: number;\n  ad_spend: number;\n  roas: number;\n  conversions: number;\n}\n\nexport interface FunnelMetricResult {\n  stage_name: string;\n  stage_order: number;\n  users: number;\n  conversion_rate: number;\n  dropoff_rate: number;\n}\n\nexport interface RealtimeDashboardResult {\n  total_impressions: number;\n  total_clicks: number;\n  total_conversions: number;\n  total_revenue: number;\n  total_ad_spend: number;\n  avg_ctr: number;\n  avg_conversion_rate: number;\n  current_roas: number;\n}\n\nexport class StoredProceduresService {\n  constructor(private prisma: PrismaService) {}\n\n  /**\n   * Calculate KPI metrics using optimized stored procedure\n   */\n  async calculateKPIMetrics(\n    organizationId: string,\n    campaignIds?: string[],\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<StoredProcedureKPIResult | null> {\n    try {\n      const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // Default: 30 days ago\n      const end = endDate || new Date();\n\n      logger.debug('Executing calculate_kpi_metrics stored procedure', {\n        organizationId,\n        campaignIds,\n        startDate: start,\n        endDate: end,\n      });\n\n      const result = await this.prisma.$queryRaw<StoredProcedureKPIResult[]>`\n        SELECT * FROM calculate_kpi_metrics(\n          ${organizationId}::uuid,\n          ${campaignIds ? `ARRAY[${campaignIds.map(id => `'${id}'::uuid`).join(',')}]` : 'NULL'}::uuid[],\n          ${start}::date,\n          ${end}::date\n        )\n      `;\n\n      return result[0] || null;\n    } catch (error) {\n      logger.error('Error executing calculate_kpi_metrics stored procedure:', error);\n      throw new Error('Failed to calculate KPI metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Get top performing campaigns using stored procedure\n   */\n  async getTopCampaigns(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date,\n    limit: number = 10\n  ): Promise<TopCampaignResult[]> {\n    try {\n      logger.debug('Executing get_top_campaigns stored procedure', {\n        organizationId,\n        startDate,\n        endDate,\n        limit,\n      });\n\n      const result = await this.prisma.$queryRaw<TopCampaignResult[]>`\n        SELECT * FROM get_top_campaigns(\n          ${organizationId}::uuid,\n          ${startDate}::date,\n          ${endDate}::date,\n          ${limit}::integer\n        )\n      `;\n\n      return result;\n    } catch (error) {\n      logger.error('Error executing get_top_campaigns stored procedure:', error);\n      throw new Error('Failed to get top campaigns using stored procedure');\n    }\n  }\n\n  /**\n   * Calculate funnel metrics using stored procedure\n   */\n  async calculateFunnelMetrics(\n    campaignId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<FunnelMetricResult[]> {\n    try {\n      logger.debug('Executing calculate_funnel_metrics stored procedure', {\n        campaignId,\n        startDate,\n        endDate,\n      });\n\n      const result = await this.prisma.$queryRaw<FunnelMetricResult[]>`\n        SELECT * FROM calculate_funnel_metrics(\n          ${campaignId}::uuid,\n          ${startDate}::date,\n          ${endDate}::date\n        )\n      `;\n\n      return result;\n    } catch (error) {\n      logger.error('Error executing calculate_funnel_metrics stored procedure:', error);\n      throw new Error('Failed to calculate funnel metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Get real-time dashboard metrics using stored procedure\n   */\n  async getRealtimeDashboard(\n    organizationId: string,\n    hoursBack: number = 24\n  ): Promise<RealtimeDashboardResult | null> {\n    try {\n      logger.debug('Executing get_realtime_dashboard stored procedure', {\n        organizationId,\n        hoursBack,\n      });\n\n      const result = await this.prisma.$queryRaw<RealtimeDashboardResult[]>`\n        SELECT * FROM get_realtime_dashboard(\n          ${organizationId}::uuid,\n          ${hoursBack}::integer\n        )\n      `;\n\n      return result[0] || null;\n    } catch (error) {\n      logger.error('Error executing get_realtime_dashboard stored procedure:', error);\n      throw new Error('Failed to get realtime dashboard using stored procedure');\n    }\n  }\n\n  /**\n   * Aggregate hourly metrics to daily using stored procedure\n   */\n  async aggregateHourlyToDaily(targetDate?: Date): Promise<number> {\n    try {\n      const date = targetDate || new Date(Date.now() - 24 * 60 * 60 * 1000); // Default: yesterday\n\n      logger.debug('Executing aggregate_hourly_to_daily stored procedure', {\n        targetDate: date,\n      });\n\n      const result = await this.prisma.$queryRaw<{ aggregate_hourly_to_daily: number }[]>`\n        SELECT aggregate_hourly_to_daily(${date}::date) as aggregate_hourly_to_daily\n      `;\n\n      const processedCount = result[0]?.aggregate_hourly_to_daily || 0;\n      \n      logger.info(`Aggregated ${processedCount} campaign metrics for date ${date.toISOString().split('T')[0]}`);\n      \n      return processedCount;\n    } catch (error) {\n      logger.error('Error executing aggregate_hourly_to_daily stored procedure:', error);\n      throw new Error('Failed to aggregate hourly metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Clean up old metrics data using stored procedure\n   */\n  async cleanupOldMetrics(retentionDays: number = 90): Promise<number> {\n    try {\n      logger.debug('Executing cleanup_old_metrics stored procedure', {\n        retentionDays,\n      });\n\n      const result = await this.prisma.$queryRaw<{ cleanup_old_metrics: number }[]>`\n        SELECT cleanup_old_metrics(${retentionDays}::integer) as cleanup_old_metrics\n      `;\n\n      const deletedCount = result[0]?.cleanup_old_metrics || 0;\n      \n      logger.info(`Cleaned up ${deletedCount} old metric records with retention of ${retentionDays} days`);\n      \n      return deletedCount;\n    } catch (error) {\n      logger.error('Error executing cleanup_old_metrics stored procedure:', error);\n      throw new Error('Failed to cleanup old metrics using stored procedure');\n    }\n  }\n\n  /**\n   * Execute custom SQL query with proper error handling\n   */\n  async executeCustomQuery<T = any>(query: string, params: any[] = []): Promise<T[]> {\n    try {\n      logger.debug('Executing custom SQL query', { query, params });\n\n      const result = await this.prisma.$queryRawUnsafe<T[]>(query, ...params);\n      \n      return result;\n    } catch (error) {\n      logger.error('Error executing custom SQL query:', error);\n      throw new Error('Failed to execute custom SQL query');\n    }\n  }\n\n  /**\n   * Check if stored procedures are available\n   */\n  async checkStoredProceduresHealth(): Promise<{\n    available: boolean;\n    procedures: string[];\n    missing: string[];\n  }> {\n    try {\n      const expectedProcedures = [\n        'calculate_kpi_metrics',\n        'get_top_campaigns',\n        'calculate_funnel_metrics',\n        'aggregate_hourly_to_daily',\n        'cleanup_old_metrics',\n        'get_realtime_dashboard',\n      ];\n\n      const result = await this.prisma.$queryRaw<{ routine_name: string }[]>`\n        SELECT routine_name \n        FROM information_schema.routines \n        WHERE routine_type = 'FUNCTION' \n        AND routine_name = ANY(ARRAY[${expectedProcedures.map(p => `'${p}'`).join(',')}])\n      `;\n\n      const availableProcedures = result.map(r => r.routine_name);\n      const missingProcedures = expectedProcedures.filter(\n        proc => !availableProcedures.includes(proc)\n      );\n\n      return {\n        available: missingProcedures.length === 0,\n        procedures: availableProcedures,\n        missing: missingProcedures,\n      };\n    } catch (error) {\n      logger.error('Error checking stored procedures health:', error);\n      return {\n        available: false,\n        procedures: [],\n        missing: [],\n      };\n    }\n  }\n\n  /**\n   * Install stored procedures from migration file\n   */\n  async installStoredProcedures(): Promise<void> {\n    try {\n      logger.info('Installing stored procedures...');\n\n      // This would typically be handled by a migration system\n      // For now, we'll just log that procedures should be installed manually\n      logger.warn('Stored procedures should be installed via migration system');\n      logger.info('Run the SQL file: prisma/migrations/001_create_metrics_procedures.sql');\n      \n    } catch (error) {\n      logger.error('Error installing stored procedures:', error);\n      throw new Error('Failed to install stored procedures');\n    }\n  }\n\n  /**\n   * Get performance statistics for stored procedures\n   */\n  async getPerformanceStats(): Promise<{\n    procedure_name: string;\n    calls: number;\n    total_time: number;\n    mean_time: number;\n  }[]> {\n    try {\n      // This requires pg_stat_statements extension\n      const result = await this.prisma.$queryRaw<{\n        procedure_name: string;\n        calls: number;\n        total_time: number;\n        mean_time: number;\n      }[]>`\n        SELECT \n          regexp_replace(query, '^SELECT \\* FROM (\\w+)\\(.*', '\\\\1') as procedure_name,\n          calls,\n          total_exec_time as total_time,\n          mean_exec_time as mean_time\n        FROM pg_stat_statements \n        WHERE query LIKE 'SELECT * FROM calculate_%' \n           OR query LIKE 'SELECT * FROM get_%'\n           OR query LIKE 'SELECT * FROM aggregate_%'\n           OR query LIKE 'SELECT * FROM cleanup_%'\n        ORDER BY calls DESC\n      `;\n\n      return result;\n    } catch (error) {\n      logger.warn('Performance stats not available (pg_stat_statements extension may not be enabled)');\n      return [];\n    }\n  }\n}\n\n// Singleton instance\nlet storedProceduresService: StoredProceduresService;\n\nexport const getStoredProceduresService = (prisma?: PrismaService): StoredProceduresService => {\n  if (!storedProceduresService) {\n    if (!prisma) {\n      throw new Error('PrismaService is required to initialize StoredProceduresService');\n    }\n    storedProceduresService = new StoredProceduresService(prisma);\n  }\n  return storedProceduresService;\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d571824bbd980422c1693e5569577ab219ba22ca"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2m5wgvitkk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2m5wgvitkk();
import { logger } from '../utils/logger';
export class StoredProceduresService {
  prisma;
  constructor(prisma) {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[0]++;
    cov_2m5wgvitkk().s[0]++;
    this.prisma = prisma;
  }
  /**
   * Calculate KPI metrics using optimized stored procedure
   */
  async calculateKPIMetrics(organizationId, campaignIds, startDate, endDate) {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[1]++;
    cov_2m5wgvitkk().s[1]++;
    try {
      const start =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[2]++,
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[0][0]++, startDate) ||
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[0][1]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))); // Default: 30 days ago
      const end =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[3]++,
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[1][0]++, endDate) ||
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[1][1]++, new Date()));
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[4]++;
      logger.debug('Executing calculate_kpi_metrics stored procedure', {
        organizationId,
        campaignIds,
        startDate: start,
        endDate: end
      });
      const result =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[5]++, await this.prisma.$queryRaw`
        SELECT * FROM calculate_kpi_metrics(
          ${organizationId}::uuid,
          ${campaignIds ?
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[2][0]++, `ARRAY[${campaignIds.map(id => {
        /* istanbul ignore next */
        cov_2m5wgvitkk().f[2]++;
        cov_2m5wgvitkk().s[6]++;
        return `'${id}'::uuid`;
      }).join(',')}]`) :
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[2][1]++, 'NULL')}::uuid[],
          ${start}::date,
          ${end}::date
        )
      `);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[7]++;
      return /* istanbul ignore next */(cov_2m5wgvitkk().b[3][0]++, result[0]) ||
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[3][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[8]++;
      logger.error('Error executing calculate_kpi_metrics stored procedure:', error);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[9]++;
      throw new Error('Failed to calculate KPI metrics using stored procedure');
    }
  }
  /**
   * Get top performing campaigns using stored procedure
   */
  async getTopCampaigns(organizationId, startDate, endDate, limit =
  /* istanbul ignore next */
  (cov_2m5wgvitkk().b[4][0]++, 10)) {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[3]++;
    cov_2m5wgvitkk().s[10]++;
    try {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[11]++;
      logger.debug('Executing get_top_campaigns stored procedure', {
        organizationId,
        startDate,
        endDate,
        limit
      });
      const result =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[12]++, await this.prisma.$queryRaw`
        SELECT * FROM get_top_campaigns(
          ${organizationId}::uuid,
          ${startDate}::date,
          ${endDate}::date,
          ${limit}::integer
        )
      `);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[13]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[14]++;
      logger.error('Error executing get_top_campaigns stored procedure:', error);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[15]++;
      throw new Error('Failed to get top campaigns using stored procedure');
    }
  }
  /**
   * Calculate funnel metrics using stored procedure
   */
  async calculateFunnelMetrics(campaignId, startDate, endDate) {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[4]++;
    cov_2m5wgvitkk().s[16]++;
    try {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[17]++;
      logger.debug('Executing calculate_funnel_metrics stored procedure', {
        campaignId,
        startDate,
        endDate
      });
      const result =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[18]++, await this.prisma.$queryRaw`
        SELECT * FROM calculate_funnel_metrics(
          ${campaignId}::uuid,
          ${startDate}::date,
          ${endDate}::date
        )
      `);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[19]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[20]++;
      logger.error('Error executing calculate_funnel_metrics stored procedure:', error);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[21]++;
      throw new Error('Failed to calculate funnel metrics using stored procedure');
    }
  }
  /**
   * Get real-time dashboard metrics using stored procedure
   */
  async getRealtimeDashboard(organizationId, hoursBack =
  /* istanbul ignore next */
  (cov_2m5wgvitkk().b[5][0]++, 24)) {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[5]++;
    cov_2m5wgvitkk().s[22]++;
    try {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[23]++;
      logger.debug('Executing get_realtime_dashboard stored procedure', {
        organizationId,
        hoursBack
      });
      const result =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[24]++, await this.prisma.$queryRaw`
        SELECT * FROM get_realtime_dashboard(
          ${organizationId}::uuid,
          ${hoursBack}::integer
        )
      `);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[25]++;
      return /* istanbul ignore next */(cov_2m5wgvitkk().b[6][0]++, result[0]) ||
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[6][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[26]++;
      logger.error('Error executing get_realtime_dashboard stored procedure:', error);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[27]++;
      throw new Error('Failed to get realtime dashboard using stored procedure');
    }
  }
  /**
   * Aggregate hourly metrics to daily using stored procedure
   */
  async aggregateHourlyToDaily(targetDate) {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[6]++;
    cov_2m5wgvitkk().s[28]++;
    try {
      const date =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[29]++,
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[7][0]++, targetDate) ||
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[7][1]++, new Date(Date.now() - 24 * 60 * 60 * 1000))); // Default: yesterday
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[30]++;
      logger.debug('Executing aggregate_hourly_to_daily stored procedure', {
        targetDate: date
      });
      const result =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[31]++, await this.prisma.$queryRaw`
        SELECT aggregate_hourly_to_daily(${date}::date) as aggregate_hourly_to_daily
      `);
      const processedCount =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[32]++,
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[8][0]++, result[0]?.aggregate_hourly_to_daily) ||
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[8][1]++, 0));
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[33]++;
      logger.info(`Aggregated ${processedCount} campaign metrics for date ${date.toISOString().split('T')[0]}`);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[34]++;
      return processedCount;
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[35]++;
      logger.error('Error executing aggregate_hourly_to_daily stored procedure:', error);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[36]++;
      throw new Error('Failed to aggregate hourly metrics using stored procedure');
    }
  }
  /**
   * Clean up old metrics data using stored procedure
   */
  async cleanupOldMetrics(retentionDays =
  /* istanbul ignore next */
  (cov_2m5wgvitkk().b[9][0]++, 90)) {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[7]++;
    cov_2m5wgvitkk().s[37]++;
    try {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[38]++;
      logger.debug('Executing cleanup_old_metrics stored procedure', {
        retentionDays
      });
      const result =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[39]++, await this.prisma.$queryRaw`
        SELECT cleanup_old_metrics(${retentionDays}::integer) as cleanup_old_metrics
      `);
      const deletedCount =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[40]++,
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[10][0]++, result[0]?.cleanup_old_metrics) ||
      /* istanbul ignore next */
      (cov_2m5wgvitkk().b[10][1]++, 0));
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[41]++;
      logger.info(`Cleaned up ${deletedCount} old metric records with retention of ${retentionDays} days`);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[42]++;
      return deletedCount;
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[43]++;
      logger.error('Error executing cleanup_old_metrics stored procedure:', error);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[44]++;
      throw new Error('Failed to cleanup old metrics using stored procedure');
    }
  }
  /**
   * Execute custom SQL query with proper error handling
   */
  async executeCustomQuery(query, params =
  /* istanbul ignore next */
  (cov_2m5wgvitkk().b[11][0]++, [])) {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[8]++;
    cov_2m5wgvitkk().s[45]++;
    try {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[46]++;
      logger.debug('Executing custom SQL query', {
        query,
        params
      });
      const result =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[47]++, await this.prisma.$queryRawUnsafe(query, ...params));
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[48]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[49]++;
      logger.error('Error executing custom SQL query:', error);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[50]++;
      throw new Error('Failed to execute custom SQL query');
    }
  }
  /**
   * Check if stored procedures are available
   */
  async checkStoredProceduresHealth() {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[9]++;
    cov_2m5wgvitkk().s[51]++;
    try {
      const expectedProcedures =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[52]++, ['calculate_kpi_metrics', 'get_top_campaigns', 'calculate_funnel_metrics', 'aggregate_hourly_to_daily', 'cleanup_old_metrics', 'get_realtime_dashboard']);
      const result =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[53]++, await this.prisma.$queryRaw`
        SELECT routine_name 
        FROM information_schema.routines 
        WHERE routine_type = 'FUNCTION' 
        AND routine_name = ANY(ARRAY[${expectedProcedures.map(p => {
        /* istanbul ignore next */
        cov_2m5wgvitkk().f[10]++;
        cov_2m5wgvitkk().s[54]++;
        return `'${p}'`;
      }).join(',')}])
      `);
      const availableProcedures =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[55]++, result.map(r => {
        /* istanbul ignore next */
        cov_2m5wgvitkk().f[11]++;
        cov_2m5wgvitkk().s[56]++;
        return r.routine_name;
      }));
      const missingProcedures =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[57]++, expectedProcedures.filter(proc => {
        /* istanbul ignore next */
        cov_2m5wgvitkk().f[12]++;
        cov_2m5wgvitkk().s[58]++;
        return !availableProcedures.includes(proc);
      }));
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[59]++;
      return {
        available: missingProcedures.length === 0,
        procedures: availableProcedures,
        missing: missingProcedures
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[60]++;
      logger.error('Error checking stored procedures health:', error);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[61]++;
      return {
        available: false,
        procedures: [],
        missing: []
      };
    }
  }
  /**
   * Install stored procedures from migration file
   */
  async installStoredProcedures() {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[13]++;
    cov_2m5wgvitkk().s[62]++;
    try {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[63]++;
      logger.info('Installing stored procedures...');
      // This would typically be handled by a migration system
      // For now, we'll just log that procedures should be installed manually
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[64]++;
      logger.warn('Stored procedures should be installed via migration system');
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[65]++;
      logger.info('Run the SQL file: prisma/migrations/001_create_metrics_procedures.sql');
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[66]++;
      logger.error('Error installing stored procedures:', error);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[67]++;
      throw new Error('Failed to install stored procedures');
    }
  }
  /**
   * Get performance statistics for stored procedures
   */
  async getPerformanceStats() {
    /* istanbul ignore next */
    cov_2m5wgvitkk().f[14]++;
    cov_2m5wgvitkk().s[68]++;
    try {
      // This requires pg_stat_statements extension
      const result =
      /* istanbul ignore next */
      (cov_2m5wgvitkk().s[69]++, await this.prisma.$queryRaw`
        SELECT 
          regexp_replace(query, '^SELECT \* FROM (\w+)\(.*', '\\1') as procedure_name,
          calls,
          total_exec_time as total_time,
          mean_exec_time as mean_time
        FROM pg_stat_statements 
        WHERE query LIKE 'SELECT * FROM calculate_%' 
           OR query LIKE 'SELECT * FROM get_%'
           OR query LIKE 'SELECT * FROM aggregate_%'
           OR query LIKE 'SELECT * FROM cleanup_%'
        ORDER BY calls DESC
      `);
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[70]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[71]++;
      logger.warn('Performance stats not available (pg_stat_statements extension may not be enabled)');
      /* istanbul ignore next */
      cov_2m5wgvitkk().s[72]++;
      return [];
    }
  }
}
// Singleton instance
let storedProceduresService;
/* istanbul ignore next */
cov_2m5wgvitkk().s[73]++;
export const getStoredProceduresService = prisma => {
  /* istanbul ignore next */
  cov_2m5wgvitkk().f[15]++;
  cov_2m5wgvitkk().s[74]++;
  if (!storedProceduresService) {
    /* istanbul ignore next */
    cov_2m5wgvitkk().b[12][0]++;
    cov_2m5wgvitkk().s[75]++;
    if (!prisma) {
      /* istanbul ignore next */
      cov_2m5wgvitkk().b[13][0]++;
      cov_2m5wgvitkk().s[76]++;
      throw new Error('PrismaService is required to initialize StoredProceduresService');
    } else
    /* istanbul ignore next */
    {
      cov_2m5wgvitkk().b[13][1]++;
    }
    cov_2m5wgvitkk().s[77]++;
    storedProceduresService = new StoredProceduresService(prisma);
  } else
  /* istanbul ignore next */
  {
    cov_2m5wgvitkk().b[12][1]++;
  }
  cov_2m5wgvitkk().s[78]++;
  return storedProceduresService;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,