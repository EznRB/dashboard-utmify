{"version":3,"names":["cov_1av6fuuarn","actualCoverage","Injectable","Logger","BadRequestException","UnauthorizedException","ConfigService","PrismaService","CryptoService","GoogleAdsApi","axios","Cron","googleAdsConfig","GoogleAdsService","s","GoogleAdsService_1","configService","prisma","cryptoService","logger","name","maxRetries","retryDelay","googleAdsClients","Map","constructor","f","generateAuthUrl","userId","redirectUri","b","state","encrypt","JSON","stringify","scopes","params","URLSearchParams","client_id","clientId","redirect_uri","scope","join","response_type","access_type","prompt","toString","exchangeCodeForToken","code","response","post","client_secret","clientSecret","grant_type","data","error","refreshAccessToken","refreshToken","refresh_token","storeTokens","tokens","encryptedAccessToken","access_token","encryptedRefreshToken","expiresAt","Date","now","expires_in","integration","upsert","where","userId_platform","platform","update","accessToken","isActive","lastSync","create","log","getAccessToken","findUnique","decrypt","newTokens","getGoogleAdsClient","cacheKey","has","get","client","developer_token","developerToken","Customer","credentials","set","getCustomerAccounts","query","customers","report","login_customer_id","loginCustomerId","map","customer","id","descriptive_name","currency","currency_code","timezone","time_zone","status","type","manager","getCampaigns","customerId","campaigns","customer_id","campaign","advertising_channel_type","start_date","end_date","budget_amount","campaign_budget","amount_micros","parseInt","undefined","budget_type","getKeywords","campaignIds","whereClause","length","campaignFilter","keywords","keyword","ad_group_criterion","criterion_id","text","match_type","quality_score","quality_info","first_page_cpc","position_estimates","first_page_cpc_micros","top_of_page_cpc","top_of_page_cpc_micros","campaign_id","ad_group_id","ad_group","getCampaignMetrics","dateRange","dateFilter","startDate","endDate","metrics","metric","impressions","clicks","cost_micros","conversions","parseFloat","ctr","average_cpc","cost_per_conversion","date","segments","getSearchTermsReport","searchTerms","term","search_term","search_term_view","keyword_id","syncUserData","force","accounts","account","syncAccountData","storeCampaignData","storeKeywordData","toISOString","split","storeCampaignMetrics","externalId_platform","externalId","budget","updatedAt","accountId","createdAt","matchType","qualityScore","firstPageCpc","topOfPageCpc","campaignId","adGroupId","campaignMetrics","campaignId_date_platform","cost","averageCpc","costPerConversion","disconnectIntegration","delete","scheduledSync","activeIntegrations","findMany","select","lastSyncThreshold","delay","ms","Promise","resolve","setTimeout","clearClientCache","clear","__decorate","_d","Object","_a","_b","_c"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../database/prisma.service';\nimport { CryptoService } from './crypto.service';\nimport { GoogleAdsApi, Customer, enums } from 'google-ads-api';\nimport axios from 'axios';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { googleAdsConfig } from '../config/env';\n\ninterface GoogleOAuthTokens {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n  token_type: string;\n  scope: string;\n}\n\ninterface GoogleAdsAccount {\n  id: string;\n  name: string;\n  currency: string;\n  timezone: string;\n  status: string;\n  type: string;\n}\n\ninterface GoogleAdsCampaign {\n  id: string;\n  name: string;\n  status: string;\n  type: string;\n  start_date?: string;\n  end_date?: string;\n  budget_amount?: number;\n  budget_type?: string;\n  customer_id: string;\n}\n\ninterface GoogleAdsKeyword {\n  id: string;\n  text: string;\n  match_type: string;\n  status: string;\n  quality_score?: number;\n  first_page_cpc?: number;\n  top_of_page_cpc?: number;\n  campaign_id: string;\n  ad_group_id: string;\n}\n\ninterface GoogleAdsCampaignMetrics {\n  campaign_id: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  ctr: number;\n  average_cpc: number;\n  cost_per_conversion?: number;\n  date: string;\n}\n\ninterface SearchTermReport {\n  search_term: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  campaign_id: string;\n  ad_group_id: string;\n  keyword_id?: string;\n}\n\n@Injectable()\nexport class GoogleAdsService {\n  private readonly logger = new Logger(GoogleAdsService.name);\n  private readonly maxRetries = 3;\n  private readonly retryDelay = 1000;\n  private googleAdsClients: Map<string, GoogleAdsApi> = new Map();\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly prisma: PrismaService,\n    private readonly cryptoService: CryptoService,\n  ) {}\n\n  /**\n   * Generate OAuth 2.0 authorization URL\n   */\n  generateAuthUrl(userId: string, redirectUri: string): string {\n    if (!googleAdsConfig) {\n      throw new BadRequestException('Google Ads integration not configured');\n    }\n\n    const state = this.cryptoService.encrypt(JSON.stringify({ userId, redirectUri }));\n    const scopes = ['https://www.googleapis.com/auth/adwords'];\n    \n    const params = new URLSearchParams({\n      client_id: googleAdsConfig.clientId,\n      redirect_uri: redirectUri,\n      scope: scopes.join(' '),\n      response_type: 'code',\n      access_type: 'offline',\n      prompt: 'consent',\n      state,\n    });\n\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  async exchangeCodeForToken(code: string, redirectUri: string): Promise<GoogleOAuthTokens> {\n    if (!googleAdsConfig) {\n      throw new BadRequestException('Google Ads integration not configured');\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: googleAdsConfig.clientId,\n        client_secret: googleAdsConfig.clientSecret,\n        code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      });\n\n      return response.data;\n    } catch (error) {\n      this.logger.error('Failed to exchange code for token', error);\n      throw new BadRequestException('Failed to exchange authorization code');\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshAccessToken(refreshToken: string): Promise<GoogleOAuthTokens> {\n    if (!googleAdsConfig) {\n      throw new BadRequestException('Google Ads integration not configured');\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: googleAdsConfig.clientId,\n        client_secret: googleAdsConfig.clientSecret,\n        refresh_token: refreshToken,\n        grant_type: 'refresh_token',\n      });\n\n      return {\n        ...response.data,\n        refresh_token: refreshToken, // Keep the original refresh token\n      };\n    } catch (error) {\n      this.logger.error('Failed to refresh access token', error);\n      throw new UnauthorizedException('Failed to refresh access token');\n    }\n  }\n\n  /**\n   * Store OAuth tokens securely\n   */\n  async storeTokens(userId: string, tokens: GoogleOAuthTokens): Promise<void> {\n    const encryptedAccessToken = this.cryptoService.encrypt(tokens.access_token);\n    const encryptedRefreshToken = this.cryptoService.encrypt(tokens.refresh_token);\n    const expiresAt = new Date(Date.now() + tokens.expires_in * 1000);\n\n    await this.prisma.integration.upsert({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n      create: {\n        userId,\n        platform: 'GOOGLE_ADS',\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n    });\n\n    this.logger.log(`Stored Google Ads tokens for user ${userId}`);\n  }\n\n  /**\n   * Get valid access token (refresh if needed)\n   */\n  async getAccessToken(userId: string): Promise<string> {\n    const integration = await this.prisma.integration.findUnique({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n    });\n\n    if (!integration || !integration.isActive) {\n      throw new UnauthorizedException('Google Ads integration not found or inactive');\n    }\n\n    // Check if token is expired\n    if (integration.expiresAt && integration.expiresAt <= new Date()) {\n      const refreshToken = this.cryptoService.decrypt(integration.refreshToken!);\n      const newTokens = await this.refreshAccessToken(refreshToken);\n      await this.storeTokens(userId, newTokens);\n      return newTokens.access_token;\n    }\n\n    return this.cryptoService.decrypt(integration.accessToken!);\n  }\n\n  /**\n   * Get Google Ads API client for user\n   */\n  private async getGoogleAdsClient(userId: string): Promise<GoogleAdsApi> {\n    if (!googleAdsConfig) {\n      throw new BadRequestException('Google Ads integration not configured');\n    }\n\n    const cacheKey = `google-ads-client-${userId}`;\n    \n    if (this.googleAdsClients.has(cacheKey)) {\n      return this.googleAdsClients.get(cacheKey)!;\n    }\n\n    const accessToken = await this.getAccessToken(userId);\n    \n    const client = new GoogleAdsApi({\n      client_id: googleAdsConfig.clientId,\n      client_secret: googleAdsConfig.clientSecret,\n      developer_token: googleAdsConfig.developerToken,\n    });\n\n    // Set the access token for the client\n    client.Customer.credentials = {\n      access_token: accessToken,\n    };\n\n    this.googleAdsClients.set(cacheKey, client);\n    return client;\n  }\n\n  /**\n   * Get accessible customer accounts\n   */\n  async getCustomerAccounts(userId: string): Promise<GoogleAdsAccount[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          customer.id,\n          customer.descriptive_name,\n          customer.currency_code,\n          customer.time_zone,\n          customer.status,\n          customer.manager\n        FROM customer\n        WHERE customer.status = 'ENABLED'\n      `;\n\n      const customers = await client.Customer().report({\n        query,\n        login_customer_id: googleAdsConfig?.loginCustomerId,\n      });\n\n      return customers.map((customer: any) => ({\n        id: customer.customer.id.toString(),\n        name: customer.customer.descriptive_name || `Customer ${customer.customer.id}`,\n        currency: customer.customer.currency_code,\n        timezone: customer.customer.time_zone,\n        status: customer.customer.status,\n        type: customer.customer.manager ? 'MANAGER' : 'CLIENT',\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get customer accounts', error);\n      throw new BadRequestException('Failed to retrieve customer accounts');\n    }\n  }\n\n  /**\n   * Get campaigns for a customer\n   */\n  async getCampaigns(userId: string, customerId: string): Promise<GoogleAdsCampaign[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          campaign.status,\n          campaign.advertising_channel_type,\n          campaign.start_date,\n          campaign.end_date,\n          campaign_budget.amount_micros,\n          campaign_budget.type\n        FROM campaign\n        WHERE campaign.status != 'REMOVED'\n        ORDER BY campaign.name\n      `;\n\n      const campaigns = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return campaigns.map((campaign: any) => ({\n        id: campaign.campaign.id.toString(),\n        name: campaign.campaign.name,\n        status: campaign.campaign.status,\n        type: campaign.campaign.advertising_channel_type,\n        start_date: campaign.campaign.start_date,\n        end_date: campaign.campaign.end_date,\n        budget_amount: campaign.campaign_budget?.amount_micros ? \n          parseInt(campaign.campaign_budget.amount_micros) / 1000000 : undefined,\n        budget_type: campaign.campaign_budget?.type,\n        customer_id: customerId,\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get campaigns', error);\n      throw new BadRequestException('Failed to retrieve campaigns');\n    }\n  }\n\n  /**\n   * Get keywords for campaigns\n   */\n  async getKeywords(userId: string, customerId: string, campaignIds?: string[]): Promise<GoogleAdsKeyword[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let whereClause = 'ad_group_criterion.status != \"REMOVED\" AND ad_group_criterion.type = \"KEYWORD\"';\n      if (campaignIds && campaignIds.length > 0) {\n        const campaignFilter = campaignIds.map(id => `\"${id}\"`).join(',');\n        whereClause += ` AND campaign.id IN (${campaignFilter})`;\n      }\n\n      const query = `\n        SELECT \n          ad_group_criterion.criterion_id,\n          ad_group_criterion.keyword.text,\n          ad_group_criterion.keyword.match_type,\n          ad_group_criterion.status,\n          ad_group_criterion.quality_info.quality_score,\n          ad_group_criterion.position_estimates.first_page_cpc_micros,\n          ad_group_criterion.position_estimates.top_of_page_cpc_micros,\n          campaign.id,\n          ad_group.id\n        FROM keyword_view\n        WHERE ${whereClause}\n        ORDER BY ad_group_criterion.keyword.text\n      `;\n\n      const keywords = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return keywords.map((keyword: any) => ({\n        id: keyword.ad_group_criterion.criterion_id.toString(),\n        text: keyword.ad_group_criterion.keyword.text,\n        match_type: keyword.ad_group_criterion.keyword.match_type,\n        status: keyword.ad_group_criterion.status,\n        quality_score: keyword.ad_group_criterion.quality_info?.quality_score,\n        first_page_cpc: keyword.ad_group_criterion.position_estimates?.first_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.first_page_cpc_micros) / 1000000 : undefined,\n        top_of_page_cpc: keyword.ad_group_criterion.position_estimates?.top_of_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.top_of_page_cpc_micros) / 1000000 : undefined,\n        campaign_id: keyword.campaign.id.toString(),\n        ad_group_id: keyword.ad_group.id.toString(),\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get keywords', error);\n      throw new BadRequestException('Failed to retrieve keywords');\n    }\n  }\n\n  /**\n   * Get campaign performance metrics\n   */\n  async getCampaignMetrics(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<GoogleAdsCampaignMetrics[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          campaign.id,\n          segments.date,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          metrics.ctr,\n          metrics.average_cpc\n        FROM campaign\n        WHERE campaign.status != 'REMOVED' ${dateFilter}\n        ORDER BY segments.date DESC, campaign.name\n      `;\n\n      const metrics = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return metrics.map((metric: any) => ({\n        campaign_id: metric.campaign.id.toString(),\n        impressions: parseInt(metric.metrics.impressions) || 0,\n        clicks: parseInt(metric.metrics.clicks) || 0,\n        cost_micros: parseInt(metric.metrics.cost_micros) || 0,\n        conversions: parseFloat(metric.metrics.conversions) || 0,\n        ctr: parseFloat(metric.metrics.ctr) || 0,\n        average_cpc: parseInt(metric.metrics.average_cpc) || 0,\n        cost_per_conversion: metric.metrics.conversions > 0 ?\n          parseInt(metric.metrics.cost_micros) / parseFloat(metric.metrics.conversions) / 1000000 : undefined,\n        date: metric.segments.date,\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get campaign metrics', error);\n      throw new BadRequestException('Failed to retrieve campaign metrics');\n    }\n  }\n\n  /**\n   * Get search terms report\n   */\n  async getSearchTermsReport(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<SearchTermReport[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          search_term_view.search_term,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          campaign.id,\n          ad_group.id,\n          ad_group_criterion.criterion_id\n        FROM search_term_view\n        WHERE search_term_view.status != 'NONE' ${dateFilter}\n        ORDER BY metrics.impressions DESC\n      `;\n\n      const searchTerms = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return searchTerms.map((term: any) => ({\n        search_term: term.search_term_view.search_term,\n        impressions: parseInt(term.metrics.impressions) || 0,\n        clicks: parseInt(term.metrics.clicks) || 0,\n        cost_micros: parseInt(term.metrics.cost_micros) || 0,\n        conversions: parseFloat(term.metrics.conversions) || 0,\n        campaign_id: term.campaign.id.toString(),\n        ad_group_id: term.ad_group.id.toString(),\n        keyword_id: term.ad_group_criterion?.criterion_id?.toString(),\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get search terms report', error);\n      throw new BadRequestException('Failed to retrieve search terms report');\n    }\n  }\n\n  /**\n   * Sync user data from Google Ads\n   */\n  async syncUserData(userId: string, force = false): Promise<void> {\n    try {\n      this.logger.log(`Starting Google Ads sync for user ${userId}`);\n      \n      const accounts = await this.getCustomerAccounts(userId);\n      \n      for (const account of accounts) {\n        if (account.type === 'CLIENT') { // Only sync client accounts, not manager accounts\n          await this.syncAccountData(userId, account);\n        }\n      }\n      \n      // Update last sync timestamp\n      await this.prisma.integration.update({\n        where: {\n          userId_platform: {\n            userId,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n        data: {\n          lastSync: new Date(),\n        },\n      });\n      \n      this.logger.log(`Completed Google Ads sync for user ${userId}`);\n    } catch (error) {\n      this.logger.error(`Failed to sync Google Ads data for user ${userId}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sync data for a specific account\n   */\n  private async syncAccountData(userId: string, account: GoogleAdsAccount): Promise<void> {\n    try {\n      // Sync campaigns\n      const campaigns = await this.getCampaigns(userId, account.id);\n      \n      for (const campaign of campaigns) {\n        await this.storeCampaignData(userId, account, campaign);\n        \n        // Sync keywords for this campaign\n        const keywords = await this.getKeywords(userId, account.id, [campaign.id]);\n        for (const keyword of keywords) {\n          await this.storeKeywordData(userId, keyword);\n        }\n        \n        // Sync metrics for the last 30 days\n        const endDate = new Date().toISOString().split('T')[0];\n        const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n        \n        const metrics = await this.getCampaignMetrics(userId, account.id, { startDate, endDate });\n        for (const metric of metrics) {\n          await this.storeCampaignMetrics(userId, metric);\n        }\n      }\n    } catch (error) {\n      this.logger.error(`Failed to sync account data for ${account.id}`, error);\n    }\n  }\n\n  /**\n   * Store campaign data in database\n   */\n  private async storeCampaignData(\n    userId: string,\n    account: GoogleAdsAccount,\n    campaign: GoogleAdsCampaign\n  ): Promise<void> {\n    await this.prisma.campaign.upsert({\n      where: {\n        externalId_platform: {\n          externalId: campaign.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: campaign.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        accountId: account.id,\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store keyword data in database\n   */\n  private async storeKeywordData(userId: string, keyword: GoogleAdsKeyword): Promise<void> {\n    await this.prisma.keyword.upsert({\n      where: {\n        externalId_platform: {\n          externalId: keyword.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: keyword.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        campaignId: keyword.campaign_id,\n        adGroupId: keyword.ad_group_id,\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store campaign metrics in database\n   */\n  private async storeCampaignMetrics(userId: string, metrics: GoogleAdsCampaignMetrics): Promise<void> {\n    await this.prisma.campaignMetrics.upsert({\n      where: {\n        campaignId_date_platform: {\n          campaignId: metrics.campaign_id,\n          date: new Date(metrics.date),\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000, // Convert micros to currency\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000, // Convert micros to currency\n        costPerConversion: metrics.cost_per_conversion,\n        updatedAt: new Date(),\n      },\n      create: {\n        campaignId: metrics.campaign_id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        date: new Date(metrics.date),\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000,\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000,\n        costPerConversion: metrics.cost_per_conversion,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Disconnect Google Ads integration\n   */\n  async disconnectIntegration(userId: string): Promise<void> {\n    await this.prisma.integration.update({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      data: {\n        isActive: false,\n        accessToken: null,\n        refreshToken: null,\n        expiresAt: null,\n      },\n    });\n\n    // Remove cached client\n    const cacheKey = `google-ads-client-${userId}`;\n    this.googleAdsClients.delete(cacheKey);\n\n    this.logger.log(`Disconnected Google Ads integration for user ${userId}`);\n  }\n\n  /**\n   * Scheduled sync job - runs every 30 minutes\n   */\n  @Cron('0 */30 * * * *')\n  async scheduledSync(): Promise<void> {\n    this.logger.log('Starting scheduled Google Ads sync');\n    \n    try {\n      const activeIntegrations = await this.prisma.integration.findMany({\n        where: {\n          platform: 'GOOGLE_ADS',\n          isActive: true,\n        },\n        select: {\n          userId: true,\n          lastSync: true,\n        },\n      });\n\n      for (const integration of activeIntegrations) {\n        try {\n          // Only sync if last sync was more than 25 minutes ago (to avoid overlapping)\n          const lastSyncThreshold = new Date(Date.now() - 25 * 60 * 1000);\n          if (!integration.lastSync || integration.lastSync < lastSyncThreshold) {\n            await this.syncUserData(integration.userId);\n            await this.delay(2000); // Rate limiting between users\n          }\n        } catch (error) {\n          this.logger.error(`Failed to sync user ${integration.userId}`, error);\n        }\n      }\n    } catch (error) {\n      this.logger.error('Failed to run scheduled sync', error);\n    }\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Clear cached clients (useful for testing or memory management)\n   */\n  clearClientCache(): void {\n    this.googleAdsClients.clear();\n  }\n}"],"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","ignoreList":[]}