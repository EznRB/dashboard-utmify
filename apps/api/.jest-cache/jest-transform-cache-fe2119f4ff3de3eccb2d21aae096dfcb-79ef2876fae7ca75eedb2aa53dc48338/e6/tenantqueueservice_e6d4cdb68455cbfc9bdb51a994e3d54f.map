{"version":3,"names":["cov_19zad6xbbc","actualCoverage","Injectable","Logger","Queue","TenantCacheService","TenantDatabaseService","TenantQueueService","s","TenantQueueService_1","tenantCacheService","tenantDatabaseService","logger","name","queues","Map","constructor","f","getTenantQueue","tenantId","queueName","queueKey","has","b","get","queueConfig","redis","host","process","env","REDIS_HOST","port","parseInt","REDIS_PORT","password","REDIS_PASSWORD","db","keyPrefix","defaultJobOptions","removeOnComplete","removeOnFail","attempts","backoff","type","delay","settings","stalledInterval","maxStalledCount","queue","setupQueueEventListeners","set","log","on","job","result","debug","id","updateQueueMetrics","err","error","message","stack","warn","progress","addJob","jobName","jobData","options","userId","validateQueueLimits","tenantInfo","executeInTenantContext","slug","tenantJobData","tenantSlug","data","metadata","priority","add","jobId","Date","now","processJobs","processor","concurrency","jobTenantId","Error","getQueueStats","waiting","active","completed","failed","delayed","Promise","all","getWaiting","getActive","getCompleted","getFailed","getDelayed","length","paused","isPaused","pauseQueue","pause","resumeQueue","resume","clearQueue","empty","stats","totalJobs","planLimits","FREE","maxJobs","maxQueues","BASIC","PRO","ENTERPRISE","tenantPlan","limits","action","key","increment","closeTenantQueues","tenantQueues","Array","from","entries","filter","startsWith","map","close","delete","getTenantQueueNames","keys","split","__decorate","_a","Object","_b"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\tenant-queue.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { Queue, Job, JobOptions } from 'bull';\nimport { InjectQueue } from '@nestjs/bull';\nimport { TenantCacheService } from './tenant-cache.service';\nimport { TenantDatabaseService } from './tenant-database.service';\n\ninterface TenantJobData {\n  tenantId: string;\n  tenantSlug: string;\n  userId?: string;\n  data: any;\n  metadata?: {\n    priority?: number;\n    attempts?: number;\n    delay?: number;\n    backoff?: string | { type: string; delay: number };\n  };\n}\n\ninterface QueueStats {\n  waiting: number;\n  active: number;\n  completed: number;\n  failed: number;\n  delayed: number;\n  paused: boolean;\n}\n\n@Injectable()\nexport class TenantQueueService {\n  private readonly logger = new Logger(TenantQueueService.name);\n  private readonly queues = new Map<string, Queue>();\n\n  constructor(\n    private readonly tenantCacheService: TenantCacheService,\n    private readonly tenantDatabaseService: TenantDatabaseService,\n  ) {}\n\n  // Criar ou obter uma fila específica para o tenant\n  private async getTenantQueue(tenantId: string, queueName: string): Promise<Queue> {\n    const queueKey = `${tenantId}:${queueName}`;\n    \n    if (this.queues.has(queueKey)) {\n      return this.queues.get(queueKey)!;\n    }\n\n    // Configurações específicas por tenant\n    const queueConfig = {\n      redis: {\n        host: process.env.REDIS_HOST || 'localhost',\n        port: parseInt(process.env.REDIS_PORT || '6379'),\n        password: process.env.REDIS_PASSWORD,\n        db: 0, // Usar database 0 mas com prefixo de tenant\n        keyPrefix: `tenant:${tenantId}:queue:`,\n      },\n      defaultJobOptions: {\n        removeOnComplete: 100, // Manter apenas os últimos 100 jobs completos\n        removeOnFail: 50, // Manter apenas os últimos 50 jobs falhados\n        attempts: 3,\n        backoff: {\n          type: 'exponential',\n          delay: 2000,\n        },\n      },\n      settings: {\n        stalledInterval: 30 * 1000, // 30 segundos\n        maxStalledCount: 1,\n      },\n    };\n\n    const queue = new Queue(queueName, queueConfig);\n    \n    // Configurar event listeners para logging e monitoramento\n    this.setupQueueEventListeners(queue, tenantId, queueName);\n    \n    this.queues.set(queueKey, queue);\n    \n    this.logger.log(`Created queue ${queueName} for tenant ${tenantId}`);\n    \n    return queue;\n  }\n\n  // Configurar listeners de eventos da fila\n  private setupQueueEventListeners(queue: Queue, tenantId: string, queueName: string) {\n    queue.on('completed', async (job: Job, result: any) => {\n      this.logger.debug(`Job ${job.id} completed in queue ${queueName} for tenant ${tenantId}`);\n      await this.updateQueueMetrics(tenantId, queueName, 'completed');\n    });\n\n    queue.on('failed', async (job: Job, err: Error) => {\n      this.logger.error(\n        `Job ${job.id} failed in queue ${queueName} for tenant ${tenantId}: ${err.message}`,\n        err.stack,\n      );\n      await this.updateQueueMetrics(tenantId, queueName, 'failed');\n    });\n\n    queue.on('stalled', async (job: Job) => {\n      this.logger.warn(`Job ${job.id} stalled in queue ${queueName} for tenant ${tenantId}`);\n    });\n\n    queue.on('progress', (job: Job, progress: number) => {\n      this.logger.debug(\n        `Job ${job.id} progress: ${progress}% in queue ${queueName} for tenant ${tenantId}`,\n      );\n    });\n  }\n\n  // Adicionar job à fila do tenant\n  async addJob(\n    tenantId: string,\n    queueName: string,\n    jobName: string,\n    jobData: any,\n    options: JobOptions = {},\n    userId?: string,\n  ): Promise<Job<TenantJobData>> {\n    try {\n      const queue = await this.getTenantQueue(tenantId, queueName);\n      \n      // Validar limites do plano\n      await this.validateQueueLimits(tenantId, queueName);\n      \n      // Obter informações do tenant\n      const tenantInfo = await this.tenantCacheService.get(\n        `tenant:${tenantId}:info`,\n        async () => {\n          return await this.tenantDatabaseService.executeInTenantContext(\n            tenantId,\n            async () => {\n              // Aqui você buscaria as informações do tenant do banco\n              return { id: tenantId, slug: `tenant-${tenantId}` };\n            },\n          );\n        },\n        300, // 5 minutos de cache\n      );\n\n      const tenantJobData: TenantJobData = {\n        tenantId,\n        tenantSlug: tenantInfo.slug,\n        userId,\n        data: jobData,\n        metadata: {\n          priority: options.priority,\n          attempts: options.attempts,\n          delay: options.delay,\n        },\n      };\n\n      const job = await queue.add(jobName, tenantJobData, {\n        ...options,\n        // Adicionar tenant context aos options\n        jobId: options.jobId || `${tenantId}:${jobName}:${Date.now()}`,\n      });\n\n      this.logger.log(\n        `Added job ${job.id} (${jobName}) to queue ${queueName} for tenant ${tenantId}`,\n      );\n\n      await this.updateQueueMetrics(tenantId, queueName, 'added');\n\n      return job;\n    } catch (error) {\n      this.logger.error(\n        `Failed to add job to queue ${queueName} for tenant ${tenantId}: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  // Processar jobs da fila do tenant\n  async processJobs(\n    tenantId: string,\n    queueName: string,\n    jobName: string,\n    processor: (job: Job<TenantJobData>) => Promise<any>,\n    concurrency: number = 1,\n  ): Promise<void> {\n    try {\n      const queue = await this.getTenantQueue(tenantId, queueName);\n      \n      queue.process(jobName, concurrency, async (job: Job<TenantJobData>) => {\n        const { tenantId: jobTenantId, data, userId } = job.data;\n        \n        // Validar que o job pertence ao tenant correto\n        if (jobTenantId !== tenantId) {\n          throw new Error(`Job tenant mismatch: expected ${tenantId}, got ${jobTenantId}`);\n        }\n\n        this.logger.debug(\n          `Processing job ${job.id} (${jobName}) for tenant ${tenantId}`,\n        );\n\n        // Executar o processador no contexto do tenant\n        return await this.tenantDatabaseService.executeInTenantContext(\n          tenantId,\n          async () => {\n            return await processor(job);\n          },\n        );\n      });\n\n      this.logger.log(\n        `Started processing jobs ${jobName} in queue ${queueName} for tenant ${tenantId} with concurrency ${concurrency}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Failed to setup job processor for queue ${queueName} tenant ${tenantId}: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  // Obter estatísticas da fila do tenant\n  async getQueueStats(tenantId: string, queueName: string): Promise<QueueStats> {\n    try {\n      const queue = await this.getTenantQueue(tenantId, queueName);\n      \n      const [waiting, active, completed, failed, delayed] = await Promise.all([\n        queue.getWaiting(),\n        queue.getActive(),\n        queue.getCompleted(),\n        queue.getFailed(),\n        queue.getDelayed(),\n      ]);\n\n      return {\n        waiting: waiting.length,\n        active: active.length,\n        completed: completed.length,\n        failed: failed.length,\n        delayed: delayed.length,\n        paused: await queue.isPaused(),\n      };\n    } catch (error) {\n      this.logger.error(\n        `Failed to get queue stats for ${queueName} tenant ${tenantId}: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  // Pausar fila do tenant\n  async pauseQueue(tenantId: string, queueName: string): Promise<void> {\n    try {\n      const queue = await this.getTenantQueue(tenantId, queueName);\n      await queue.pause();\n      \n      this.logger.log(`Paused queue ${queueName} for tenant ${tenantId}`);\n    } catch (error) {\n      this.logger.error(\n        `Failed to pause queue ${queueName} for tenant ${tenantId}: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  // Retomar fila do tenant\n  async resumeQueue(tenantId: string, queueName: string): Promise<void> {\n    try {\n      const queue = await this.getTenantQueue(tenantId, queueName);\n      await queue.resume();\n      \n      this.logger.log(`Resumed queue ${queueName} for tenant ${tenantId}`);\n    } catch (error) {\n      this.logger.error(\n        `Failed to resume queue ${queueName} for tenant ${tenantId}: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  // Limpar fila do tenant\n  async clearQueue(tenantId: string, queueName: string): Promise<void> {\n    try {\n      const queue = await this.getTenantQueue(tenantId, queueName);\n      await queue.empty();\n      \n      this.logger.log(`Cleared queue ${queueName} for tenant ${tenantId}`);\n    } catch (error) {\n      this.logger.error(\n        `Failed to clear queue ${queueName} for tenant ${tenantId}: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  // Validar limites do plano para filas\n  private async validateQueueLimits(tenantId: string, queueName: string): Promise<void> {\n    const stats = await this.getQueueStats(tenantId, queueName);\n    const totalJobs = stats.waiting + stats.active + stats.delayed;\n    \n    // Limites baseados no plano (exemplo)\n    const planLimits = {\n      FREE: { maxJobs: 100, maxQueues: 2 },\n      BASIC: { maxJobs: 1000, maxQueues: 5 },\n      PRO: { maxJobs: 10000, maxQueues: 20 },\n      ENTERPRISE: { maxJobs: -1, maxQueues: -1 }, // Ilimitado\n    };\n\n    // Aqui você buscaria o plano do tenant\n    const tenantPlan = 'FREE'; // Placeholder\n    const limits = planLimits[tenantPlan];\n\n    if (limits.maxJobs !== -1 && totalJobs >= limits.maxJobs) {\n      throw new Error(\n        `Queue limit exceeded for tenant ${tenantId}: ${totalJobs}/${limits.maxJobs} jobs`,\n      );\n    }\n  }\n\n  // Atualizar métricas da fila\n  private async updateQueueMetrics(\n    tenantId: string,\n    queueName: string,\n    action: string,\n  ): Promise<void> {\n    try {\n      const key = `queue:metrics:${tenantId}:${queueName}:${action}`;\n      await this.tenantCacheService.increment(key, 1, 3600); // 1 hora de TTL\n    } catch (error) {\n      this.logger.error(`Failed to update queue metrics: ${error.message}`);\n    }\n  }\n\n  // Cleanup - fechar todas as filas do tenant\n  async closeTenantQueues(tenantId: string): Promise<void> {\n    const tenantQueues = Array.from(this.queues.entries())\n      .filter(([key]) => key.startsWith(`${tenantId}:`))\n      .map(([key, queue]) => ({ key, queue }));\n\n    for (const { key, queue } of tenantQueues) {\n      try {\n        await queue.close();\n        this.queues.delete(key);\n        this.logger.log(`Closed queue ${key}`);\n      } catch (error) {\n        this.logger.error(`Failed to close queue ${key}: ${error.message}`);\n      }\n    }\n  }\n\n  // Obter todas as filas do tenant\n  getTenantQueueNames(tenantId: string): string[] {\n    return Array.from(this.queues.keys())\n      .filter(key => key.startsWith(`${tenantId}:`))\n      .map(key => key.split(':')[1]);\n  }\n}"],"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","ignoreList":[]}