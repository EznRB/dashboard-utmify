8ec2c3773d1503532520aa93e7310443
/* istanbul ignore next */
function cov_1av6fuuarn() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts";
  var hash = "6a81ba0dd4407aefec9dcb27a8ebf187a074f60e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 6,
          column: 1
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 2,
          column: 34
        },
        end: {
          line: 2,
          column: 125
        }
      },
      "3": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "4": {
        start: {
          line: 3,
          column: 79
        },
        end: {
          line: 3,
          column: 131
        }
      },
      "5": {
        start: {
          line: 4,
          column: 9
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "6": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "7": {
        start: {
          line: 4,
          column: 58
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "8": {
        start: {
          line: 4,
          column: 81
        },
        end: {
          line: 4,
          column: 150
        }
      },
      "9": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "10": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "11": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "12": {
        start: {
          line: 8,
          column: 79
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "13": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 631,
          column: 1
        }
      },
      "14": {
        start: {
          line: 24,
          column: 13
        },
        end: {
          line: 24,
          column: 48
        }
      },
      "15": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 18
        }
      },
      "16": {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 26,
          column: 21
        }
      },
      "17": {
        start: {
          line: 27,
          column: 23
        },
        end: {
          line: 27,
          column: 32
        }
      },
      "18": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 43
        }
      },
      "19": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 29
        }
      },
      "20": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 43
        }
      },
      "21": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "22": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 83
        }
      },
      "23": {
        start: {
          line: 40,
          column: 22
        },
        end: {
          line: 40,
          column: 89
        }
      },
      "24": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 66
        }
      },
      "25": {
        start: {
          line: 42,
          column: 23
        },
        end: {
          line: 50,
          column: 10
        }
      },
      "26": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 83
        }
      },
      "27": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "28": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 83
        }
      },
      "29": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "30": {
        start: {
          line: 61,
          column: 29
        },
        end: {
          line: 67,
          column: 14
        }
      },
      "31": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 33
        }
      },
      "32": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 74
        }
      },
      "33": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 83
        }
      },
      "34": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "35": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 83
        }
      },
      "36": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "37": {
        start: {
          line: 83,
          column: 29
        },
        end: {
          line: 88,
          column: 14
        }
      },
      "38": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "39": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 71
        }
      },
      "40": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 78
        }
      },
      "41": {
        start: {
          line: 103,
          column: 37
        },
        end: {
          line: 103,
          column: 84
        }
      },
      "42": {
        start: {
          line: 104,
          column: 38
        },
        end: {
          line: 104,
          column: 86
        }
      },
      "43": {
        start: {
          line: 105,
          column: 26
        },
        end: {
          line: 105,
          column: 73
        }
      },
      "44": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "45": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 71
        }
      },
      "46": {
        start: {
          line: 136,
          column: 28
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "47": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "48": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 92
        }
      },
      "49": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "50": {
        start: {
          line: 149,
          column: 33
        },
        end: {
          line: 149,
          column: 85
        }
      },
      "51": {
        start: {
          line: 150,
          column: 30
        },
        end: {
          line: 150,
          column: 73
        }
      },
      "52": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 54
        }
      },
      "53": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 42
        }
      },
      "54": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 67
        }
      },
      "55": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "56": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 83
        }
      },
      "57": {
        start: {
          line: 163,
          column: 25
        },
        end: {
          line: 163,
          column: 54
        }
      },
      "58": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "59": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 55
        }
      },
      "60": {
        start: {
          line: 167,
          column: 28
        },
        end: {
          line: 167,
          column: 61
        }
      },
      "61": {
        start: {
          line: 168,
          column: 23
        },
        end: {
          line: 172,
          column: 10
        }
      },
      "62": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 176,
          column: 10
        }
      },
      "63": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 52
        }
      },
      "64": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 22
        }
      },
      "65": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "66": {
        start: {
          line: 185,
          column: 27
        },
        end: {
          line: 185,
          column: 64
        }
      },
      "67": {
        start: {
          line: 186,
          column: 26
        },
        end: {
          line: 196,
          column: 7
        }
      },
      "68": {
        start: {
          line: 197,
          column: 30
        },
        end: {
          line: 200,
          column: 14
        }
      },
      "69": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 208,
          column: 16
        }
      },
      "70": {
        start: {
          line: 201,
          column: 48
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "71": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 72
        }
      },
      "72": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 82
        }
      },
      "73": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "74": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 220,
          column: 64
        }
      },
      "75": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 234,
          column: 7
        }
      },
      "76": {
        start: {
          line: 235,
          column: 30
        },
        end: {
          line: 237,
          column: 14
        }
      },
      "77": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 249,
          column: 16
        }
      },
      "78": {
        start: {
          line: 238,
          column: 48
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "79": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 64
        }
      },
      "80": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 74
        }
      },
      "81": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "82": {
        start: {
          line: 261,
          column: 27
        },
        end: {
          line: 261,
          column: 64
        }
      },
      "83": {
        start: {
          line: 262,
          column: 30
        },
        end: {
          line: 262,
          column: 110
        }
      },
      "84": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 266,
          column: 13
        }
      },
      "85": {
        start: {
          line: 264,
          column: 39
        },
        end: {
          line: 264,
          column: 81
        }
      },
      "86": {
        start: {
          line: 264,
          column: 61
        },
        end: {
          line: 264,
          column: 70
        }
      },
      "87": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 265,
          column: 73
        }
      },
      "88": {
        start: {
          line: 267,
          column: 26
        },
        end: {
          line: 281,
          column: 7
        }
      },
      "89": {
        start: {
          line: 282,
          column: 29
        },
        end: {
          line: 284,
          column: 14
        }
      },
      "90": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 297,
          column: 16
        }
      },
      "91": {
        start: {
          line: 285,
          column: 46
        },
        end: {
          line: 297,
          column: 13
        }
      },
      "92": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 63
        }
      },
      "93": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 73
        }
      },
      "94": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "95": {
        start: {
          line: 309,
          column: 27
        },
        end: {
          line: 309,
          column: 64
        }
      },
      "96": {
        start: {
          line: 310,
          column: 29
        },
        end: {
          line: 310,
          column: 31
        }
      },
      "97": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "98": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 121
        }
      },
      "99": {
        start: {
          line: 314,
          column: 26
        },
        end: {
          line: 327,
          column: 7
        }
      },
      "100": {
        start: {
          line: 328,
          column: 28
        },
        end: {
          line: 330,
          column: 14
        }
      },
      "101": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 342,
          column: 16
        }
      },
      "102": {
        start: {
          line: 331,
          column: 44
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "103": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 71
        }
      },
      "104": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 81
        }
      },
      "105": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "106": {
        start: {
          line: 354,
          column: 27
        },
        end: {
          line: 354,
          column: 64
        }
      },
      "107": {
        start: {
          line: 355,
          column: 29
        },
        end: {
          line: 355,
          column: 31
        }
      },
      "108": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "109": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 357,
          column: 121
        }
      },
      "110": {
        start: {
          line: 359,
          column: 26
        },
        end: {
          line: 372,
          column: 7
        }
      },
      "111": {
        start: {
          line: 373,
          column: 32
        },
        end: {
          line: 375,
          column: 14
        }
      },
      "112": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 385,
          column: 16
        }
      },
      "113": {
        start: {
          line: 376,
          column: 46
        },
        end: {
          line: 385,
          column: 13
        }
      },
      "114": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 74
        }
      },
      "115": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 84
        }
      },
      "116": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "117": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 75
        }
      },
      "118": {
        start: {
          line: 398,
          column: 29
        },
        end: {
          line: 398,
          column: 67
        }
      },
      "119": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "120": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 402,
          column: 17
        }
      },
      "121": {
        start: {
          line: 401,
          column: 20
        },
        end: {
          line: 401,
          column: 64
        }
      },
      "122": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 415,
          column: 15
        }
      },
      "123": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 76
        }
      },
      "124": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 90
        }
      },
      "125": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 24
        }
      },
      "126": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 448,
          column: 9
        }
      },
      "127": {
        start: {
          line: 429,
          column: 30
        },
        end: {
          line: 429,
          column: 73
        }
      },
      "128": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 444,
          column: 13
        }
      },
      "129": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 72
        }
      },
      "130": {
        start: {
          line: 433,
          column: 33
        },
        end: {
          line: 433,
          column: 90
        }
      },
      "131": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 436,
          column: 17
        }
      },
      "132": {
        start: {
          line: 435,
          column: 20
        },
        end: {
          line: 435,
          column: 65
        }
      },
      "133": {
        start: {
          line: 438,
          column: 32
        },
        end: {
          line: 438,
          column: 70
        }
      },
      "134": {
        start: {
          line: 439,
          column: 34
        },
        end: {
          line: 439,
          column: 109
        }
      },
      "135": {
        start: {
          line: 440,
          column: 32
        },
        end: {
          line: 440,
          column: 105
        }
      },
      "136": {
        start: {
          line: 441,
          column: 16
        },
        end: {
          line: 443,
          column: 17
        }
      },
      "137": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 442,
          column: 68
        }
      },
      "138": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 447,
          column: 86
        }
      },
      "139": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 484,
          column: 11
        }
      },
      "140": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 521,
          column: 11
        }
      },
      "141": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 560,
          column: 11
        }
      },
      "142": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 579,
          column: 11
        }
      },
      "143": {
        start: {
          line: 581,
          column: 25
        },
        end: {
          line: 581,
          column: 54
        }
      },
      "144": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 582,
          column: 47
        }
      },
      "145": {
        start: {
          line: 583,
          column: 8
        },
        end: {
          line: 583,
          column: 82
        }
      },
      "146": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 589,
          column: 62
        }
      },
      "147": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 617,
          column: 9
        }
      },
      "148": {
        start: {
          line: 591,
          column: 39
        },
        end: {
          line: 600,
          column: 14
        }
      },
      "149": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 613,
          column: 13
        }
      },
      "150": {
        start: {
          line: 602,
          column: 16
        },
        end: {
          line: 612,
          column: 17
        }
      },
      "151": {
        start: {
          line: 604,
          column: 46
        },
        end: {
          line: 604,
          column: 83
        }
      },
      "152": {
        start: {
          line: 605,
          column: 20
        },
        end: {
          line: 608,
          column: 21
        }
      },
      "153": {
        start: {
          line: 606,
          column: 24
        },
        end: {
          line: 606,
          column: 68
        }
      },
      "154": {
        start: {
          line: 607,
          column: 24
        },
        end: {
          line: 607,
          column: 47
        }
      },
      "155": {
        start: {
          line: 611,
          column: 20
        },
        end: {
          line: 611,
          column: 90
        }
      },
      "156": {
        start: {
          line: 616,
          column: 12
        },
        end: {
          line: 616,
          column: 69
        }
      },
      "157": {
        start: {
          line: 623,
          column: 8
        },
        end: {
          line: 623,
          column: 63
        }
      },
      "158": {
        start: {
          line: 623,
          column: 38
        },
        end: {
          line: 623,
          column: 61
        }
      },
      "159": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 629,
          column: 38
        }
      },
      "160": {
        start: {
          line: 632,
          column: 0
        },
        end: {
          line: 637,
          column: 54
        }
      },
      "161": {
        start: {
          line: 638,
          column: 0
        },
        end: {
          line: 641,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 1,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1,
            column: 87
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 62
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 54
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 41
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 50
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 56
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 43
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 78
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 38
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 102
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 33
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 135
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 37
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 159
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 38
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 183
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 201,
            column: 33
          },
          end: {
            line: 201,
            column: 34
          }
        },
        loc: {
          start: {
            line: 201,
            column: 48
          },
          end: {
            line: 208,
            column: 13
          }
        },
        line: 201
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 43
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 218
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 238,
            column: 33
          },
          end: {
            line: 238,
            column: 34
          }
        },
        loc: {
          start: {
            line: 238,
            column: 48
          },
          end: {
            line: 249,
            column: 13
          }
        },
        line: 238
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 55
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 259
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 264,
            column: 55
          },
          end: {
            line: 264,
            column: 56
          }
        },
        loc: {
          start: {
            line: 264,
            column: 61
          },
          end: {
            line: 264,
            column: 70
          }
        },
        line: 264
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 285,
            column: 32
          },
          end: {
            line: 285,
            column: 33
          }
        },
        loc: {
          start: {
            line: 285,
            column: 46
          },
          end: {
            line: 297,
            column: 13
          }
        },
        line: 285
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 5
          }
        },
        loc: {
          start: {
            line: 307,
            column: 60
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 307
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 331,
            column: 31
          },
          end: {
            line: 331,
            column: 32
          }
        },
        loc: {
          start: {
            line: 331,
            column: 44
          },
          end: {
            line: 342,
            column: 13
          }
        },
        line: 331
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 62
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 352
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 376,
            column: 35
          },
          end: {
            line: 376,
            column: 36
          }
        },
        loc: {
          start: {
            line: 376,
            column: 46
          },
          end: {
            line: 385,
            column: 13
          }
        },
        line: 376
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 46
          },
          end: {
            line: 422,
            column: 5
          }
        },
        line: 395
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 43
          },
          end: {
            line: 449,
            column: 5
          }
        },
        line: 426
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 453,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        },
        loc: {
          start: {
            line: 453,
            column: 55
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 453
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 489,
            column: 4
          },
          end: {
            line: 489,
            column: 5
          }
        },
        loc: {
          start: {
            line: 489,
            column: 44
          },
          end: {
            line: 522,
            column: 5
          }
        },
        line: 489
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 526,
            column: 4
          },
          end: {
            line: 526,
            column: 5
          }
        },
        loc: {
          start: {
            line: 526,
            column: 48
          },
          end: {
            line: 561,
            column: 5
          }
        },
        line: 526
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 565,
            column: 4
          },
          end: {
            line: 565,
            column: 5
          }
        },
        loc: {
          start: {
            line: 565,
            column: 40
          },
          end: {
            line: 584,
            column: 5
          }
        },
        line: 565
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 588,
            column: 4
          },
          end: {
            line: 588,
            column: 5
          }
        },
        loc: {
          start: {
            line: 588,
            column: 26
          },
          end: {
            line: 618,
            column: 5
          }
        },
        line: 588
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 622,
            column: 4
          },
          end: {
            line: 622,
            column: 5
          }
        },
        loc: {
          start: {
            line: 622,
            column: 14
          },
          end: {
            line: 624,
            column: 5
          }
        },
        line: 622
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 623,
            column: 27
          },
          end: {
            line: 623,
            column: 28
          }
        },
        loc: {
          start: {
            line: 623,
            column: 38
          },
          end: {
            line: 623,
            column: 61
          }
        },
        line: 623
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 628,
            column: 4
          },
          end: {
            line: 628,
            column: 5
          }
        },
        loc: {
          start: {
            line: 628,
            column: 23
          },
          end: {
            line: 630,
            column: 5
          }
        },
        line: 628
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 6,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1,
            column: 18
          },
          end: {
            line: 1,
            column: 22
          }
        }, {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 41
          }
        }, {
          start: {
            line: 1,
            column: 46
          },
          end: {
            line: 6,
            column: 1
          }
        }],
        line: 1
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 34
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 48
          }
        }, {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 2,
            column: 51
          },
          end: {
            line: 2,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 67
          },
          end: {
            line: 2,
            column: 118
          }
        }, {
          start: {
            line: 2,
            column: 121
          },
          end: {
            line: 2,
            column: 125
          }
        }],
        line: 2
      },
      "3": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 150
          }
        }],
        line: 3
      },
      "4": {
        loc: {
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 8
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 39
          },
          end: {
            line: 3,
            column: 77
          }
        }],
        line: 3
      },
      "5": {
        loc: {
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 58
          },
          end: {
            line: 4,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "6": {
        loc: {
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        }, {
          start: {
            line: 4,
            column: 148
          },
          end: {
            line: 4,
            column: 149
          }
        }],
        line: 4
      },
      "7": {
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 94
          },
          end: {
            line: 4,
            column: 98
          }
        }, {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "8": {
        loc: {
          start: {
            line: 4,
            column: 101
          },
          end: {
            line: 4,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 109
          },
          end: {
            line: 4,
            column: 126
          }
        }, {
          start: {
            line: 4,
            column: 129
          },
          end: {
            line: 4,
            column: 143
          }
        }],
        line: 4
      },
      "9": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 16
          }
        }, {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        }, {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 62
          }
        }],
        line: 5
      },
      "10": {
        loc: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 7,
            column: 22
          }
        }, {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 41
          }
        }, {
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        }],
        line: 7
      },
      "11": {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "12": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 8,
            column: 35
          }
        }, {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 8,
            column: 77
          }
        }],
        line: 8
      },
      "13": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "14": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "15": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "16": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "17": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 24
          }
        }, {
          start: {
            line: 144,
            column: 28
          },
          end: {
            line: 144,
            column: 49
          }
        }],
        line: 144
      },
      "18": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "19": {
        loc: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 148,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 148,
            column: 33
          }
        }, {
          start: {
            line: 148,
            column: 37
          },
          end: {
            line: 148,
            column: 72
          }
        }],
        line: 148
      },
      "20": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "21": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "22": {
        loc: {
          start: {
            line: 203,
            column: 22
          },
          end: {
            line: 203,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 22
          },
          end: {
            line: 203,
            column: 56
          }
        }, {
          start: {
            line: 203,
            column: 60
          },
          end: {
            line: 203,
            column: 94
          }
        }],
        line: 203
      },
      "23": {
        loc: {
          start: {
            line: 207,
            column: 22
          },
          end: {
            line: 207,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 50
          },
          end: {
            line: 207,
            column: 59
          }
        }, {
          start: {
            line: 207,
            column: 62
          },
          end: {
            line: 207,
            column: 70
          }
        }],
        line: 207
      },
      "24": {
        loc: {
          start: {
            line: 245,
            column: 31
          },
          end: {
            line: 246,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 246,
            column: 20
          },
          end: {
            line: 246,
            column: 78
          }
        }, {
          start: {
            line: 246,
            column: 81
          },
          end: {
            line: 246,
            column: 90
          }
        }],
        line: 245
      },
      "25": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 266,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 266,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "26": {
        loc: {
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 263,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 263,
            column: 27
          }
        }, {
          start: {
            line: 263,
            column: 31
          },
          end: {
            line: 263,
            column: 53
          }
        }],
        line: 263
      },
      "27": {
        loc: {
          start: {
            line: 291,
            column: 32
          },
          end: {
            line: 292,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 107
          }
        }, {
          start: {
            line: 292,
            column: 110
          },
          end: {
            line: 292,
            column: 119
          }
        }],
        line: 291
      },
      "28": {
        loc: {
          start: {
            line: 293,
            column: 33
          },
          end: {
            line: 294,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 294,
            column: 20
          },
          end: {
            line: 294,
            column: 108
          }
        }, {
          start: {
            line: 294,
            column: 111
          },
          end: {
            line: 294,
            column: 120
          }
        }],
        line: 293
      },
      "29": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "30": {
        loc: {
          start: {
            line: 333,
            column: 29
          },
          end: {
            line: 333,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 29
          },
          end: {
            line: 333,
            column: 65
          }
        }, {
          start: {
            line: 333,
            column: 69
          },
          end: {
            line: 333,
            column: 70
          }
        }],
        line: 333
      },
      "31": {
        loc: {
          start: {
            line: 334,
            column: 24
          },
          end: {
            line: 334,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 24
          },
          end: {
            line: 334,
            column: 55
          }
        }, {
          start: {
            line: 334,
            column: 59
          },
          end: {
            line: 334,
            column: 60
          }
        }],
        line: 334
      },
      "32": {
        loc: {
          start: {
            line: 335,
            column: 29
          },
          end: {
            line: 335,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 29
          },
          end: {
            line: 335,
            column: 65
          }
        }, {
          start: {
            line: 335,
            column: 69
          },
          end: {
            line: 335,
            column: 70
          }
        }],
        line: 335
      },
      "33": {
        loc: {
          start: {
            line: 336,
            column: 29
          },
          end: {
            line: 336,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 336,
            column: 29
          },
          end: {
            line: 336,
            column: 67
          }
        }, {
          start: {
            line: 336,
            column: 71
          },
          end: {
            line: 336,
            column: 72
          }
        }],
        line: 336
      },
      "34": {
        loc: {
          start: {
            line: 337,
            column: 21
          },
          end: {
            line: 337,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 337,
            column: 21
          },
          end: {
            line: 337,
            column: 51
          }
        }, {
          start: {
            line: 337,
            column: 55
          },
          end: {
            line: 337,
            column: 56
          }
        }],
        line: 337
      },
      "35": {
        loc: {
          start: {
            line: 338,
            column: 29
          },
          end: {
            line: 338,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 29
          },
          end: {
            line: 338,
            column: 65
          }
        }, {
          start: {
            line: 338,
            column: 69
          },
          end: {
            line: 338,
            column: 70
          }
        }],
        line: 338
      },
      "36": {
        loc: {
          start: {
            line: 339,
            column: 37
          },
          end: {
            line: 340,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 340,
            column: 20
          },
          end: {
            line: 340,
            column: 107
          }
        }, {
          start: {
            line: 340,
            column: 110
          },
          end: {
            line: 340,
            column: 119
          }
        }],
        line: 339
      },
      "37": {
        loc: {
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "38": {
        loc: {
          start: {
            line: 378,
            column: 29
          },
          end: {
            line: 378,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 29
          },
          end: {
            line: 378,
            column: 63
          }
        }, {
          start: {
            line: 378,
            column: 67
          },
          end: {
            line: 378,
            column: 68
          }
        }],
        line: 378
      },
      "39": {
        loc: {
          start: {
            line: 379,
            column: 24
          },
          end: {
            line: 379,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 379,
            column: 24
          },
          end: {
            line: 379,
            column: 53
          }
        }, {
          start: {
            line: 379,
            column: 57
          },
          end: {
            line: 379,
            column: 58
          }
        }],
        line: 379
      },
      "40": {
        loc: {
          start: {
            line: 380,
            column: 29
          },
          end: {
            line: 380,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 380,
            column: 29
          },
          end: {
            line: 380,
            column: 63
          }
        }, {
          start: {
            line: 380,
            column: 67
          },
          end: {
            line: 380,
            column: 68
          }
        }],
        line: 380
      },
      "41": {
        loc: {
          start: {
            line: 381,
            column: 29
          },
          end: {
            line: 381,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 29
          },
          end: {
            line: 381,
            column: 65
          }
        }, {
          start: {
            line: 381,
            column: 69
          },
          end: {
            line: 381,
            column: 70
          }
        }],
        line: 381
      },
      "42": {
        loc: {
          start: {
            line: 395,
            column: 31
          },
          end: {
            line: 395,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 395,
            column: 39
          },
          end: {
            line: 395,
            column: 44
          }
        }],
        line: 395
      },
      "43": {
        loc: {
          start: {
            line: 400,
            column: 16
          },
          end: {
            line: 402,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 16
          },
          end: {
            line: 402,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "44": {
        loc: {
          start: {
            line: 465,
            column: 27
          },
          end: {
            line: 465,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 465,
            column: 49
          },
          end: {
            line: 465,
            column: 78
          }
        }, {
          start: {
            line: 465,
            column: 81
          },
          end: {
            line: 465,
            column: 85
          }
        }],
        line: 465
      },
      "45": {
        loc: {
          start: {
            line: 466,
            column: 25
          },
          end: {
            line: 466,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 466,
            column: 45
          },
          end: {
            line: 466,
            column: 72
          }
        }, {
          start: {
            line: 466,
            column: 75
          },
          end: {
            line: 466,
            column: 79
          }
        }],
        line: 466
      },
      "46": {
        loc: {
          start: {
            line: 478,
            column: 27
          },
          end: {
            line: 478,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 478,
            column: 49
          },
          end: {
            line: 478,
            column: 78
          }
        }, {
          start: {
            line: 478,
            column: 81
          },
          end: {
            line: 478,
            column: 85
          }
        }],
        line: 478
      },
      "47": {
        loc: {
          start: {
            line: 479,
            column: 25
          },
          end: {
            line: 479,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 479,
            column: 45
          },
          end: {
            line: 479,
            column: 72
          }
        }, {
          start: {
            line: 479,
            column: 75
          },
          end: {
            line: 479,
            column: 79
          }
        }],
        line: 479
      },
      "48": {
        loc: {
          start: {
            line: 605,
            column: 20
          },
          end: {
            line: 608,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 605,
            column: 20
          },
          end: {
            line: 608,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 605
      },
      "49": {
        loc: {
          start: {
            line: 605,
            column: 24
          },
          end: {
            line: 605,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 605,
            column: 24
          },
          end: {
            line: 605,
            column: 45
          }
        }, {
          start: {
            line: 605,
            column: 49
          },
          end: {
            line: 605,
            column: 89
          }
        }],
        line: 605
      },
      "50": {
        loc: {
          start: {
            line: 636,
            column: 36
          },
          end: {
            line: 636,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 636,
            column: 109
          },
          end: {
            line: 636,
            column: 111
          }
        }, {
          start: {
            line: 636,
            column: 114
          },
          end: {
            line: 636,
            column: 120
          }
        }],
        line: 636
      },
      "51": {
        loc: {
          start: {
            line: 636,
            column: 49
          },
          end: {
            line: 636,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 636,
            column: 49
          },
          end: {
            line: 636,
            column: 79
          }
        }, {
          start: {
            line: 636,
            column: 83
          },
          end: {
            line: 636,
            column: 90
          }
        }],
        line: 636
      },
      "52": {
        loc: {
          start: {
            line: 640,
            column: 37
          },
          end: {
            line: 640,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 640,
            column: 122
          },
          end: {
            line: 640,
            column: 124
          }
        }, {
          start: {
            line: 640,
            column: 127
          },
          end: {
            line: 640,
            column: 133
          }
        }],
        line: 640
      },
      "53": {
        loc: {
          start: {
            line: 640,
            column: 50
          },
          end: {
            line: 640,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 640,
            column: 50
          },
          end: {
            line: 640,
            column: 86
          }
        }, {
          start: {
            line: 640,
            column: 90
          },
          end: {
            line: 640,
            column: 103
          }
        }],
        line: 640
      },
      "54": {
        loc: {
          start: {
            line: 640,
            column: 135
          },
          end: {
            line: 640,
            column: 231
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 640,
            column: 220
          },
          end: {
            line: 640,
            column: 222
          }
        }, {
          start: {
            line: 640,
            column: 225
          },
          end: {
            line: 640,
            column: 231
          }
        }],
        line: 640
      },
      "55": {
        loc: {
          start: {
            line: 640,
            column: 148
          },
          end: {
            line: 640,
            column: 201
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 640,
            column: 148
          },
          end: {
            line: 640,
            column: 184
          }
        }, {
          start: {
            line: 640,
            column: 188
          },
          end: {
            line: 640,
            column: 201
          }
        }],
        line: 640
      },
      "56": {
        loc: {
          start: {
            line: 640,
            column: 233
          },
          end: {
            line: 640,
            column: 329
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 640,
            column: 318
          },
          end: {
            line: 640,
            column: 320
          }
        }, {
          start: {
            line: 640,
            column: 323
          },
          end: {
            line: 640,
            column: 329
          }
        }],
        line: 640
      },
      "57": {
        loc: {
          start: {
            line: 640,
            column: 246
          },
          end: {
            line: 640,
            column: 299
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 640,
            column: 246
          },
          end: {
            line: 640,
            column: 282
          }
        }, {
          start: {
            line: 640,
            column: 286
          },
          end: {
            line: 640,
            column: 299
          }
        }],
        line: 640
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts",
      mappings: ";;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,MAAM,gBAAgB,CAAC;AAChG,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAC3D,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EAAE,YAAY,EAAmB,MAAM,gBAAgB,CAAC;AAC/D,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,IAAI,EAAkB,MAAM,kBAAkB,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAmEzC,IAAM,gBAAgB,wBAAtB,MAAM,gBAAgB;IAOR;IACA;IACA;IARF,MAAM,GAAG,IAAI,MAAM,CAAC,kBAAgB,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,GAAG,CAAC,CAAC;IACf,UAAU,GAAG,IAAI,CAAC;IAC3B,gBAAgB,GAA8B,IAAI,GAAG,EAAE,CAAC;IAEhE,YACmB,aAA4B,EAC5B,MAAqB,EACrB,aAA4B;QAF5B,kBAAa,GAAb,aAAa,CAAe;QAC5B,WAAM,GAAN,MAAM,CAAe;QACrB,kBAAa,GAAb,aAAa,CAAe;IAC5C,CAAC;IAEJ;;OAEG;IACH,eAAe,CAAC,MAAc,EAAE,WAAmB;QACjD,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,IAAI,mBAAmB,CAAC,uCAAuC,CAAC,CAAC;QACzE,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;QAClF,MAAM,MAAM,GAAG,CAAC,yCAAyC,CAAC,CAAC;QAE3D,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;YACjC,SAAS,EAAE,eAAe,CAAC,QAAQ;YACnC,YAAY,EAAE,WAAW;YACzB,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;YACvB,aAAa,EAAE,MAAM;YACrB,WAAW,EAAE,SAAS;YACtB,MAAM,EAAE,SAAS;YACjB,KAAK;SACN,CAAC,CAAC;QAEH,OAAO,gDAAgD,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC7E,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,IAAY,EAAE,WAAmB;QAC1D,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,IAAI,mBAAmB,CAAC,uCAAuC,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,qCAAqC,EAAE;gBACvE,SAAS,EAAE,eAAe,CAAC,QAAQ;gBACnC,aAAa,EAAE,eAAe,CAAC,YAAY;gBAC3C,IAAI;gBACJ,UAAU,EAAE,oBAAoB;gBAChC,YAAY,EAAE,WAAW;aAC1B,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC,IAAI,CAAC;QACvB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,IAAI,mBAAmB,CAAC,uCAAuC,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,YAAoB;QAC3C,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,IAAI,mBAAmB,CAAC,uCAAuC,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,qCAAqC,EAAE;gBACvE,SAAS,EAAE,eAAe,CAAC,QAAQ;gBACnC,aAAa,EAAE,eAAe,CAAC,YAAY;gBAC3C,aAAa,EAAE,YAAY;gBAC3B,UAAU,EAAE,eAAe;aAC5B,CAAC,CAAC;YAEH,OAAO;gBACL,GAAG,QAAQ,CAAC,IAAI;gBAChB,aAAa,EAAE,YAAY,EAAE,kCAAkC;aAChE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,IAAI,qBAAqB,CAAC,gCAAgC,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,MAAyB;QACzD,MAAM,oBAAoB,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC7E,MAAM,qBAAqB,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC/E,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC;QAElE,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;YACnC,KAAK,EAAE;gBACL,eAAe,EAAE;oBACf,MAAM;oBACN,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,MAAM,EAAE;gBACN,WAAW,EAAE,oBAAoB;gBACjC,YAAY,EAAE,qBAAqB;gBACnC,SAAS;gBACT,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,IAAI,IAAI,EAAE;aACrB;YACD,MAAM,EAAE;gBACN,MAAM;gBACN,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,oBAAoB;gBACjC,YAAY,EAAE,qBAAqB;gBACnC,SAAS;gBACT,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,IAAI,IAAI,EAAE;aACrB;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,qCAAqC,MAAM,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC;YAC3D,KAAK,EAAE;gBACL,eAAe,EAAE;oBACf,MAAM;oBACN,QAAQ,EAAE,YAAY;iBACvB;aACF;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC1C,MAAM,IAAI,qBAAqB,CAAC,8CAA8C,CAAC,CAAC;QAClF,CAAC;QAED,4BAA4B;QAC5B,IAAI,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,EAAE,CAAC;YACjE,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,YAAa,CAAC,CAAC;YAC3E,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAC9D,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAC1C,OAAO,SAAS,CAAC,YAAY,CAAC;QAChC,CAAC;QAED,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,WAAY,CAAC,CAAC;IAC9D,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB,CAAC,MAAc;QAC7C,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,IAAI,mBAAmB,CAAC,uCAAuC,CAAC,CAAC;QACzE,CAAC;QAED,MAAM,QAAQ,GAAG,qBAAqB,MAAM,EAAE,CAAC;QAE/C,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC;QAC9C,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAEtD,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC;YAC9B,SAAS,EAAE,eAAe,CAAC,QAAQ;YACnC,aAAa,EAAE,eAAe,CAAC,YAAY;YAC3C,eAAe,EAAE,eAAe,CAAC,cAAc;SAChD,CAAC,CAAC;QAEH,sCAAsC;QACtC,MAAM,CAAC,QAAQ,CAAC,WAAW,GAAG;YAC5B,YAAY,EAAE,WAAW;SAC1B,CAAC;QAEF,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB,CAAC,MAAc;QACtC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,MAAM,KAAK,GAAG;;;;;;;;;;OAUb,CAAC;YAEF,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;gBAC/C,KAAK;gBACL,iBAAiB,EAAE,eAAe,EAAE,eAAe;aACpD,CAAC,CAAC;YAEH,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,QAAa,EAAE,EAAE,CAAC,CAAC;gBACvC,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACnC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,IAAI,YAAY,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE;gBAC9E,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,aAAa;gBACzC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,SAAS;gBACrC,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM;gBAChC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ;aACvD,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,IAAI,mBAAmB,CAAC,sCAAsC,CAAC,CAAC;QACxE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc,EAAE,UAAkB;QACnD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,MAAM,KAAK,GAAG;;;;;;;;;;;;;OAab,CAAC;YAEF,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC;gBAC1E,KAAK;aACN,CAAC,CAAC;YAEH,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,QAAa,EAAE,EAAE,CAAC,CAAC;gBACvC,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACnC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,IAAI;gBAC5B,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM;gBAChC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,wBAAwB;gBAChD,UAAU,EAAE,QAAQ,CAAC,QAAQ,CAAC,UAAU;gBACxC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ;gBACpC,aAAa,EAAE,QAAQ,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;oBACtD,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,SAAS;gBACxE,WAAW,EAAE,QAAQ,CAAC,eAAe,EAAE,IAAI;gBAC3C,WAAW,EAAE,UAAU;aACxB,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,IAAI,mBAAmB,CAAC,8BAA8B,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,UAAkB,EAAE,WAAsB;QAC1E,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,IAAI,WAAW,GAAG,gFAAgF,CAAC;YACnG,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC1C,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClE,WAAW,IAAI,wBAAwB,cAAc,GAAG,CAAC;YAC3D,CAAC;YAED,MAAM,KAAK,GAAG;;;;;;;;;;;;gBAYJ,WAAW;;OAEpB,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC;gBACzE,KAAK;aACN,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAY,EAAE,EAAE,CAAC,CAAC;gBACrC,EAAE,EAAE,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,QAAQ,EAAE;gBACtD,IAAI,EAAE,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI;gBAC7C,UAAU,EAAE,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAU;gBACzD,MAAM,EAAE,OAAO,CAAC,kBAAkB,CAAC,MAAM;gBACzC,aAAa,EAAE,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa;gBACrE,cAAc,EAAE,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC;oBACpF,QAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,SAAS;gBACrG,eAAe,EAAE,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,CAAC;oBACtF,QAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,SAAS;gBACtG,WAAW,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBAC3C,WAAW,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;aAC5C,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,IAAI,mBAAmB,CAAC,6BAA6B,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CACtB,MAAc,EACd,UAAkB,EAClB,SAAkD;QAElD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,IAAI,SAAS,EAAE,CAAC;gBACd,UAAU,GAAG,yBAAyB,SAAS,CAAC,SAAS,2BAA2B,SAAS,CAAC,OAAO,GAAG,CAAC;YAC3G,CAAC;YAED,MAAM,KAAK,GAAG;;;;;;;;;;;6CAWyB,UAAU;;OAEhD,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC;gBACxE,KAAK;aACN,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;gBACnC,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBAC1C,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtD,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;gBAC5C,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtD,WAAW,EAAE,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACxD,GAAG,EAAE,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;gBACxC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtD,mBAAmB,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;oBACnD,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,SAAS;gBACrG,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI;aAC3B,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,IAAI,mBAAmB,CAAC,qCAAqC,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CACxB,MAAc,EACd,UAAkB,EAClB,SAAkD;QAElD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAErD,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,IAAI,SAAS,EAAE,CAAC;gBACd,UAAU,GAAG,yBAAyB,SAAS,CAAC,SAAS,2BAA2B,SAAS,CAAC,OAAO,GAAG,CAAC;YAC3G,CAAC;YAED,MAAM,KAAK,GAAG;;;;;;;;;;;kDAW8B,UAAU;;OAErD,CAAC;YAEF,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC;gBAC5E,KAAK;aACN,CAAC,CAAC;YAEH,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,CAAC;gBACrC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW;gBAC9C,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACpD,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;gBAC1C,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACpD,WAAW,EAAE,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtD,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACxC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACxC,UAAU,EAAE,IAAI,CAAC,kBAAkB,EAAE,YAAY,EAAE,QAAQ,EAAE;aAC9D,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,IAAI,mBAAmB,CAAC,wCAAwC,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc,EAAE,KAAK,GAAG,KAAK;QAC9C,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,qCAAqC,MAAM,EAAE,CAAC,CAAC;YAE/D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAExD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;gBAC/B,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC,CAAC,kDAAkD;oBACjF,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBAC9C,CAAC;YACH,CAAC;YAED,6BAA6B;YAC7B,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;gBACnC,KAAK,EAAE;oBACL,eAAe,EAAE;wBACf,MAAM;wBACN,QAAQ,EAAE,YAAY;qBACvB;iBACF;gBACD,IAAI,EAAE;oBACJ,QAAQ,EAAE,IAAI,IAAI,EAAE;iBACrB;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,sCAAsC,MAAM,EAAE,CAAC,CAAC;QAClE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2CAA2C,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC;YAC9E,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,eAAe,CAAC,MAAc,EAAE,OAAyB;QACrE,IAAI,CAAC;YACH,iBAAiB;YACjB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;YAE9D,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;gBACjC,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAExD,kCAAkC;gBAClC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC3E,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;oBAC/B,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBAC/C,CAAC;gBAED,oCAAoC;gBACpC,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvD,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE9F,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC1F,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;oBAC7B,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBAClD,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,OAAO,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAC7B,MAAc,EACd,OAAyB,EACzB,QAA2B;QAE3B,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAChC,KAAK,EAAE;gBACL,mBAAmB,EAAE;oBACnB,UAAU,EAAE,QAAQ,CAAC,EAAE;oBACvB,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,SAAS,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI;gBACrE,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC/D,MAAM,EAAE,QAAQ,CAAC,aAAa;gBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD,MAAM,EAAE;gBACN,UAAU,EAAE,QAAQ,CAAC,EAAE;gBACvB,QAAQ,EAAE,YAAY;gBACtB,MAAM;gBACN,SAAS,EAAE,OAAO,CAAC,EAAE;gBACrB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,SAAS,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI;gBACrE,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC/D,MAAM,EAAE,QAAQ,CAAC,aAAa;gBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,gBAAgB,CAAC,MAAc,EAAE,OAAyB;QACtE,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC/B,KAAK,EAAE;gBACL,mBAAmB,EAAE;oBACnB,UAAU,EAAE,OAAO,CAAC,EAAE;oBACtB,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,MAAM,EAAE;gBACN,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,SAAS,EAAE,OAAO,CAAC,UAAU;gBAC7B,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,YAAY,EAAE,OAAO,CAAC,aAAa;gBACnC,YAAY,EAAE,OAAO,CAAC,cAAc;gBACpC,YAAY,EAAE,OAAO,CAAC,eAAe;gBACrC,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD,MAAM,EAAE;gBACN,UAAU,EAAE,OAAO,CAAC,EAAE;gBACtB,QAAQ,EAAE,YAAY;gBACtB,MAAM;gBACN,UAAU,EAAE,OAAO,CAAC,WAAW;gBAC/B,SAAS,EAAE,OAAO,CAAC,WAAW;gBAC9B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,SAAS,EAAE,OAAO,CAAC,UAAU;gBAC7B,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,YAAY,EAAE,OAAO,CAAC,aAAa;gBACnC,YAAY,EAAE,OAAO,CAAC,cAAc;gBACpC,YAAY,EAAE,OAAO,CAAC,eAAe;gBACrC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB,CAAC,MAAc,EAAE,OAAiC;QAClF,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;YACvC,KAAK,EAAE;gBACL,wBAAwB,EAAE;oBACxB,UAAU,EAAE,OAAO,CAAC,WAAW;oBAC/B,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;oBAC5B,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,MAAM,EAAE;gBACN,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,IAAI,EAAE,OAAO,CAAC,WAAW,GAAG,OAAO,EAAE,6BAA6B;gBAClE,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,GAAG,EAAE,OAAO,CAAC,GAAG;gBAChB,UAAU,EAAE,OAAO,CAAC,WAAW,GAAG,OAAO,EAAE,6BAA6B;gBACxE,iBAAiB,EAAE,OAAO,CAAC,mBAAmB;gBAC9C,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD,MAAM,EAAE;gBACN,UAAU,EAAE,OAAO,CAAC,WAAW;gBAC/B,QAAQ,EAAE,YAAY;gBACtB,MAAM;gBACN,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;gBAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,IAAI,EAAE,OAAO,CAAC,WAAW,GAAG,OAAO;gBACnC,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,GAAG,EAAE,OAAO,CAAC,GAAG;gBAChB,UAAU,EAAE,OAAO,CAAC,WAAW,GAAG,OAAO;gBACzC,iBAAiB,EAAE,OAAO,CAAC,mBAAmB;gBAC9C,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CAAC,MAAc;QACxC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;YACnC,KAAK,EAAE;gBACL,eAAe,EAAE;oBACf,MAAM;oBACN,QAAQ,EAAE,YAAY;iBACvB;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,IAAI;gBAClB,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CAAC;QAEH,uBAAuB;QACvB,MAAM,QAAQ,GAAG,qBAAqB,MAAM,EAAE,CAAC;QAC/C,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,gDAAgD,MAAM,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IAEG,AAAN,KAAK,CAAC,aAAa;QACjB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;QAEtD,IAAI,CAAC;YACH,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;gBAChE,KAAK,EAAE;oBACL,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,IAAI;iBACf;gBACD,MAAM,EAAE;oBACN,MAAM,EAAE,IAAI;oBACZ,QAAQ,EAAE,IAAI;iBACf;aACF,CAAC,CAAC;YAEH,KAAK,MAAM,WAAW,IAAI,kBAAkB,EAAE,CAAC;gBAC7C,IAAI,CAAC;oBACH,6EAA6E;oBAC7E,MAAM,iBAAiB,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;oBAChE,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,GAAG,iBAAiB,EAAE,CAAC;wBACtE,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;wBAC5C,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,8BAA8B;oBACxD,CAAC;gBACH,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,WAAW,CAAC,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC;gBACxE,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,EAAU;QACtB,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;CACF,CAAA;AA7CO;IADL,IAAI,CAAC,gBAAgB,CAAC;;;wDACA,OAAO,oBAAP,OAAO;qDA8B7B;AAxpBU,gBAAgB;IAD5B,UAAU,EAAE;yDAQuB,aAAa,oBAAb,aAAa,oDACpB,aAAa,oBAAb,aAAa,oDACN,aAAa,oBAAb,aAAa;GATpC,gBAAgB,CAuqB5B",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\google-ads.service.ts"],
      sourcesContent: ["import { Injectable, Logger, BadRequestException, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../database/prisma.service';\nimport { CryptoService } from './crypto.service';\nimport { GoogleAdsApi, Customer, enums } from 'google-ads-api';\nimport axios from 'axios';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { googleAdsConfig } from '../config/env';\n\ninterface GoogleOAuthTokens {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n  token_type: string;\n  scope: string;\n}\n\ninterface GoogleAdsAccount {\n  id: string;\n  name: string;\n  currency: string;\n  timezone: string;\n  status: string;\n  type: string;\n}\n\ninterface GoogleAdsCampaign {\n  id: string;\n  name: string;\n  status: string;\n  type: string;\n  start_date?: string;\n  end_date?: string;\n  budget_amount?: number;\n  budget_type?: string;\n  customer_id: string;\n}\n\ninterface GoogleAdsKeyword {\n  id: string;\n  text: string;\n  match_type: string;\n  status: string;\n  quality_score?: number;\n  first_page_cpc?: number;\n  top_of_page_cpc?: number;\n  campaign_id: string;\n  ad_group_id: string;\n}\n\ninterface GoogleAdsCampaignMetrics {\n  campaign_id: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  ctr: number;\n  average_cpc: number;\n  cost_per_conversion?: number;\n  date: string;\n}\n\ninterface SearchTermReport {\n  search_term: string;\n  impressions: number;\n  clicks: number;\n  cost_micros: number;\n  conversions: number;\n  campaign_id: string;\n  ad_group_id: string;\n  keyword_id?: string;\n}\n\n@Injectable()\nexport class GoogleAdsService {\n  private readonly logger = new Logger(GoogleAdsService.name);\n  private readonly maxRetries = 3;\n  private readonly retryDelay = 1000;\n  private googleAdsClients: Map<string, GoogleAdsApi> = new Map();\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly prisma: PrismaService,\n    private readonly cryptoService: CryptoService,\n  ) {}\n\n  /**\n   * Generate OAuth 2.0 authorization URL\n   */\n  generateAuthUrl(userId: string, redirectUri: string): string {\n    if (!googleAdsConfig) {\n      throw new BadRequestException('Google Ads integration not configured');\n    }\n\n    const state = this.cryptoService.encrypt(JSON.stringify({ userId, redirectUri }));\n    const scopes = ['https://www.googleapis.com/auth/adwords'];\n    \n    const params = new URLSearchParams({\n      client_id: googleAdsConfig.clientId,\n      redirect_uri: redirectUri,\n      scope: scopes.join(' '),\n      response_type: 'code',\n      access_type: 'offline',\n      prompt: 'consent',\n      state,\n    });\n\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  async exchangeCodeForToken(code: string, redirectUri: string): Promise<GoogleOAuthTokens> {\n    if (!googleAdsConfig) {\n      throw new BadRequestException('Google Ads integration not configured');\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: googleAdsConfig.clientId,\n        client_secret: googleAdsConfig.clientSecret,\n        code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      });\n\n      return response.data;\n    } catch (error) {\n      this.logger.error('Failed to exchange code for token', error);\n      throw new BadRequestException('Failed to exchange authorization code');\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshAccessToken(refreshToken: string): Promise<GoogleOAuthTokens> {\n    if (!googleAdsConfig) {\n      throw new BadRequestException('Google Ads integration not configured');\n    }\n\n    try {\n      const response = await axios.post('https://oauth2.googleapis.com/token', {\n        client_id: googleAdsConfig.clientId,\n        client_secret: googleAdsConfig.clientSecret,\n        refresh_token: refreshToken,\n        grant_type: 'refresh_token',\n      });\n\n      return {\n        ...response.data,\n        refresh_token: refreshToken, // Keep the original refresh token\n      };\n    } catch (error) {\n      this.logger.error('Failed to refresh access token', error);\n      throw new UnauthorizedException('Failed to refresh access token');\n    }\n  }\n\n  /**\n   * Store OAuth tokens securely\n   */\n  async storeTokens(userId: string, tokens: GoogleOAuthTokens): Promise<void> {\n    const encryptedAccessToken = this.cryptoService.encrypt(tokens.access_token);\n    const encryptedRefreshToken = this.cryptoService.encrypt(tokens.refresh_token);\n    const expiresAt = new Date(Date.now() + tokens.expires_in * 1000);\n\n    await this.prisma.integration.upsert({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n      create: {\n        userId,\n        platform: 'GOOGLE_ADS',\n        accessToken: encryptedAccessToken,\n        refreshToken: encryptedRefreshToken,\n        expiresAt,\n        isActive: true,\n        lastSync: new Date(),\n      },\n    });\n\n    this.logger.log(`Stored Google Ads tokens for user ${userId}`);\n  }\n\n  /**\n   * Get valid access token (refresh if needed)\n   */\n  async getAccessToken(userId: string): Promise<string> {\n    const integration = await this.prisma.integration.findUnique({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n    });\n\n    if (!integration || !integration.isActive) {\n      throw new UnauthorizedException('Google Ads integration not found or inactive');\n    }\n\n    // Check if token is expired\n    if (integration.expiresAt && integration.expiresAt <= new Date()) {\n      const refreshToken = this.cryptoService.decrypt(integration.refreshToken!);\n      const newTokens = await this.refreshAccessToken(refreshToken);\n      await this.storeTokens(userId, newTokens);\n      return newTokens.access_token;\n    }\n\n    return this.cryptoService.decrypt(integration.accessToken!);\n  }\n\n  /**\n   * Get Google Ads API client for user\n   */\n  private async getGoogleAdsClient(userId: string): Promise<GoogleAdsApi> {\n    if (!googleAdsConfig) {\n      throw new BadRequestException('Google Ads integration not configured');\n    }\n\n    const cacheKey = `google-ads-client-${userId}`;\n    \n    if (this.googleAdsClients.has(cacheKey)) {\n      return this.googleAdsClients.get(cacheKey)!;\n    }\n\n    const accessToken = await this.getAccessToken(userId);\n    \n    const client = new GoogleAdsApi({\n      client_id: googleAdsConfig.clientId,\n      client_secret: googleAdsConfig.clientSecret,\n      developer_token: googleAdsConfig.developerToken,\n    });\n\n    // Set the access token for the client\n    client.Customer.credentials = {\n      access_token: accessToken,\n    };\n\n    this.googleAdsClients.set(cacheKey, client);\n    return client;\n  }\n\n  /**\n   * Get accessible customer accounts\n   */\n  async getCustomerAccounts(userId: string): Promise<GoogleAdsAccount[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          customer.id,\n          customer.descriptive_name,\n          customer.currency_code,\n          customer.time_zone,\n          customer.status,\n          customer.manager\n        FROM customer\n        WHERE customer.status = 'ENABLED'\n      `;\n\n      const customers = await client.Customer().report({\n        query,\n        login_customer_id: googleAdsConfig?.loginCustomerId,\n      });\n\n      return customers.map((customer: any) => ({\n        id: customer.customer.id.toString(),\n        name: customer.customer.descriptive_name || `Customer ${customer.customer.id}`,\n        currency: customer.customer.currency_code,\n        timezone: customer.customer.time_zone,\n        status: customer.customer.status,\n        type: customer.customer.manager ? 'MANAGER' : 'CLIENT',\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get customer accounts', error);\n      throw new BadRequestException('Failed to retrieve customer accounts');\n    }\n  }\n\n  /**\n   * Get campaigns for a customer\n   */\n  async getCampaigns(userId: string, customerId: string): Promise<GoogleAdsCampaign[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      const query = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          campaign.status,\n          campaign.advertising_channel_type,\n          campaign.start_date,\n          campaign.end_date,\n          campaign_budget.amount_micros,\n          campaign_budget.type\n        FROM campaign\n        WHERE campaign.status != 'REMOVED'\n        ORDER BY campaign.name\n      `;\n\n      const campaigns = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return campaigns.map((campaign: any) => ({\n        id: campaign.campaign.id.toString(),\n        name: campaign.campaign.name,\n        status: campaign.campaign.status,\n        type: campaign.campaign.advertising_channel_type,\n        start_date: campaign.campaign.start_date,\n        end_date: campaign.campaign.end_date,\n        budget_amount: campaign.campaign_budget?.amount_micros ? \n          parseInt(campaign.campaign_budget.amount_micros) / 1000000 : undefined,\n        budget_type: campaign.campaign_budget?.type,\n        customer_id: customerId,\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get campaigns', error);\n      throw new BadRequestException('Failed to retrieve campaigns');\n    }\n  }\n\n  /**\n   * Get keywords for campaigns\n   */\n  async getKeywords(userId: string, customerId: string, campaignIds?: string[]): Promise<GoogleAdsKeyword[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let whereClause = 'ad_group_criterion.status != \"REMOVED\" AND ad_group_criterion.type = \"KEYWORD\"';\n      if (campaignIds && campaignIds.length > 0) {\n        const campaignFilter = campaignIds.map(id => `\"${id}\"`).join(',');\n        whereClause += ` AND campaign.id IN (${campaignFilter})`;\n      }\n\n      const query = `\n        SELECT \n          ad_group_criterion.criterion_id,\n          ad_group_criterion.keyword.text,\n          ad_group_criterion.keyword.match_type,\n          ad_group_criterion.status,\n          ad_group_criterion.quality_info.quality_score,\n          ad_group_criterion.position_estimates.first_page_cpc_micros,\n          ad_group_criterion.position_estimates.top_of_page_cpc_micros,\n          campaign.id,\n          ad_group.id\n        FROM keyword_view\n        WHERE ${whereClause}\n        ORDER BY ad_group_criterion.keyword.text\n      `;\n\n      const keywords = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return keywords.map((keyword: any) => ({\n        id: keyword.ad_group_criterion.criterion_id.toString(),\n        text: keyword.ad_group_criterion.keyword.text,\n        match_type: keyword.ad_group_criterion.keyword.match_type,\n        status: keyword.ad_group_criterion.status,\n        quality_score: keyword.ad_group_criterion.quality_info?.quality_score,\n        first_page_cpc: keyword.ad_group_criterion.position_estimates?.first_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.first_page_cpc_micros) / 1000000 : undefined,\n        top_of_page_cpc: keyword.ad_group_criterion.position_estimates?.top_of_page_cpc_micros ?\n          parseInt(keyword.ad_group_criterion.position_estimates.top_of_page_cpc_micros) / 1000000 : undefined,\n        campaign_id: keyword.campaign.id.toString(),\n        ad_group_id: keyword.ad_group.id.toString(),\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get keywords', error);\n      throw new BadRequestException('Failed to retrieve keywords');\n    }\n  }\n\n  /**\n   * Get campaign performance metrics\n   */\n  async getCampaignMetrics(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<GoogleAdsCampaignMetrics[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          campaign.id,\n          segments.date,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          metrics.ctr,\n          metrics.average_cpc\n        FROM campaign\n        WHERE campaign.status != 'REMOVED' ${dateFilter}\n        ORDER BY segments.date DESC, campaign.name\n      `;\n\n      const metrics = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return metrics.map((metric: any) => ({\n        campaign_id: metric.campaign.id.toString(),\n        impressions: parseInt(metric.metrics.impressions) || 0,\n        clicks: parseInt(metric.metrics.clicks) || 0,\n        cost_micros: parseInt(metric.metrics.cost_micros) || 0,\n        conversions: parseFloat(metric.metrics.conversions) || 0,\n        ctr: parseFloat(metric.metrics.ctr) || 0,\n        average_cpc: parseInt(metric.metrics.average_cpc) || 0,\n        cost_per_conversion: metric.metrics.conversions > 0 ?\n          parseInt(metric.metrics.cost_micros) / parseFloat(metric.metrics.conversions) / 1000000 : undefined,\n        date: metric.segments.date,\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get campaign metrics', error);\n      throw new BadRequestException('Failed to retrieve campaign metrics');\n    }\n  }\n\n  /**\n   * Get search terms report\n   */\n  async getSearchTermsReport(\n    userId: string,\n    customerId: string,\n    dateRange?: { startDate: string; endDate: string }\n  ): Promise<SearchTermReport[]> {\n    try {\n      const client = await this.getGoogleAdsClient(userId);\n      \n      let dateFilter = '';\n      if (dateRange) {\n        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;\n      }\n\n      const query = `\n        SELECT \n          search_term_view.search_term,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          campaign.id,\n          ad_group.id,\n          ad_group_criterion.criterion_id\n        FROM search_term_view\n        WHERE search_term_view.status != 'NONE' ${dateFilter}\n        ORDER BY metrics.impressions DESC\n      `;\n\n      const searchTerms = await client.Customer({ customer_id: customerId }).report({\n        query,\n      });\n\n      return searchTerms.map((term: any) => ({\n        search_term: term.search_term_view.search_term,\n        impressions: parseInt(term.metrics.impressions) || 0,\n        clicks: parseInt(term.metrics.clicks) || 0,\n        cost_micros: parseInt(term.metrics.cost_micros) || 0,\n        conversions: parseFloat(term.metrics.conversions) || 0,\n        campaign_id: term.campaign.id.toString(),\n        ad_group_id: term.ad_group.id.toString(),\n        keyword_id: term.ad_group_criterion?.criterion_id?.toString(),\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get search terms report', error);\n      throw new BadRequestException('Failed to retrieve search terms report');\n    }\n  }\n\n  /**\n   * Sync user data from Google Ads\n   */\n  async syncUserData(userId: string, force = false): Promise<void> {\n    try {\n      this.logger.log(`Starting Google Ads sync for user ${userId}`);\n      \n      const accounts = await this.getCustomerAccounts(userId);\n      \n      for (const account of accounts) {\n        if (account.type === 'CLIENT') { // Only sync client accounts, not manager accounts\n          await this.syncAccountData(userId, account);\n        }\n      }\n      \n      // Update last sync timestamp\n      await this.prisma.integration.update({\n        where: {\n          userId_platform: {\n            userId,\n            platform: 'GOOGLE_ADS',\n          },\n        },\n        data: {\n          lastSync: new Date(),\n        },\n      });\n      \n      this.logger.log(`Completed Google Ads sync for user ${userId}`);\n    } catch (error) {\n      this.logger.error(`Failed to sync Google Ads data for user ${userId}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sync data for a specific account\n   */\n  private async syncAccountData(userId: string, account: GoogleAdsAccount): Promise<void> {\n    try {\n      // Sync campaigns\n      const campaigns = await this.getCampaigns(userId, account.id);\n      \n      for (const campaign of campaigns) {\n        await this.storeCampaignData(userId, account, campaign);\n        \n        // Sync keywords for this campaign\n        const keywords = await this.getKeywords(userId, account.id, [campaign.id]);\n        for (const keyword of keywords) {\n          await this.storeKeywordData(userId, keyword);\n        }\n        \n        // Sync metrics for the last 30 days\n        const endDate = new Date().toISOString().split('T')[0];\n        const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n        \n        const metrics = await this.getCampaignMetrics(userId, account.id, { startDate, endDate });\n        for (const metric of metrics) {\n          await this.storeCampaignMetrics(userId, metric);\n        }\n      }\n    } catch (error) {\n      this.logger.error(`Failed to sync account data for ${account.id}`, error);\n    }\n  }\n\n  /**\n   * Store campaign data in database\n   */\n  private async storeCampaignData(\n    userId: string,\n    account: GoogleAdsAccount,\n    campaign: GoogleAdsCampaign\n  ): Promise<void> {\n    await this.prisma.campaign.upsert({\n      where: {\n        externalId_platform: {\n          externalId: campaign.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: campaign.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        accountId: account.id,\n        name: campaign.name,\n        status: campaign.status,\n        type: campaign.type,\n        startDate: campaign.start_date ? new Date(campaign.start_date) : null,\n        endDate: campaign.end_date ? new Date(campaign.end_date) : null,\n        budget: campaign.budget_amount,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store keyword data in database\n   */\n  private async storeKeywordData(userId: string, keyword: GoogleAdsKeyword): Promise<void> {\n    await this.prisma.keyword.upsert({\n      where: {\n        externalId_platform: {\n          externalId: keyword.id,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        updatedAt: new Date(),\n      },\n      create: {\n        externalId: keyword.id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        campaignId: keyword.campaign_id,\n        adGroupId: keyword.ad_group_id,\n        text: keyword.text,\n        matchType: keyword.match_type,\n        status: keyword.status,\n        qualityScore: keyword.quality_score,\n        firstPageCpc: keyword.first_page_cpc,\n        topOfPageCpc: keyword.top_of_page_cpc,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Store campaign metrics in database\n   */\n  private async storeCampaignMetrics(userId: string, metrics: GoogleAdsCampaignMetrics): Promise<void> {\n    await this.prisma.campaignMetrics.upsert({\n      where: {\n        campaignId_date_platform: {\n          campaignId: metrics.campaign_id,\n          date: new Date(metrics.date),\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      update: {\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000, // Convert micros to currency\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000, // Convert micros to currency\n        costPerConversion: metrics.cost_per_conversion,\n        updatedAt: new Date(),\n      },\n      create: {\n        campaignId: metrics.campaign_id,\n        platform: 'GOOGLE_ADS',\n        userId,\n        date: new Date(metrics.date),\n        impressions: metrics.impressions,\n        clicks: metrics.clicks,\n        cost: metrics.cost_micros / 1000000,\n        conversions: metrics.conversions,\n        ctr: metrics.ctr,\n        averageCpc: metrics.average_cpc / 1000000,\n        costPerConversion: metrics.cost_per_conversion,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  /**\n   * Disconnect Google Ads integration\n   */\n  async disconnectIntegration(userId: string): Promise<void> {\n    await this.prisma.integration.update({\n      where: {\n        userId_platform: {\n          userId,\n          platform: 'GOOGLE_ADS',\n        },\n      },\n      data: {\n        isActive: false,\n        accessToken: null,\n        refreshToken: null,\n        expiresAt: null,\n      },\n    });\n\n    // Remove cached client\n    const cacheKey = `google-ads-client-${userId}`;\n    this.googleAdsClients.delete(cacheKey);\n\n    this.logger.log(`Disconnected Google Ads integration for user ${userId}`);\n  }\n\n  /**\n   * Scheduled sync job - runs every 30 minutes\n   */\n  @Cron('0 */30 * * * *')\n  async scheduledSync(): Promise<void> {\n    this.logger.log('Starting scheduled Google Ads sync');\n    \n    try {\n      const activeIntegrations = await this.prisma.integration.findMany({\n        where: {\n          platform: 'GOOGLE_ADS',\n          isActive: true,\n        },\n        select: {\n          userId: true,\n          lastSync: true,\n        },\n      });\n\n      for (const integration of activeIntegrations) {\n        try {\n          // Only sync if last sync was more than 25 minutes ago (to avoid overlapping)\n          const lastSyncThreshold = new Date(Date.now() - 25 * 60 * 1000);\n          if (!integration.lastSync || integration.lastSync < lastSyncThreshold) {\n            await this.syncUserData(integration.userId);\n            await this.delay(2000); // Rate limiting between users\n          }\n        } catch (error) {\n          this.logger.error(`Failed to sync user ${integration.userId}`, error);\n        }\n      }\n    } catch (error) {\n      this.logger.error('Failed to run scheduled sync', error);\n    }\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Clear cached clients (useful for testing or memory management)\n   */\n  clearClientCache(): void {\n    this.googleAdsClients.clear();\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6a81ba0dd4407aefec9dcb27a8ebf187a074f60e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1av6fuuarn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1av6fuuarn();
var __decorate =
/* istanbul ignore next */
(cov_1av6fuuarn().s[0]++,
/* istanbul ignore next */
(cov_1av6fuuarn().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1av6fuuarn().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_1av6fuuarn().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_1av6fuuarn().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_1av6fuuarn().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_1av6fuuarn().b[3][0]++;
    cov_1av6fuuarn().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_1av6fuuarn().b[3][1]++;
    cov_1av6fuuarn().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_1av6fuuarn().b[5][0]++;
        cov_1av6fuuarn().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_1av6fuuarn().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_1av6fuuarn().s[9]++;
  return /* istanbul ignore next */(cov_1av6fuuarn().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_1av6fuuarn().s[10]++,
/* istanbul ignore next */
(cov_1av6fuuarn().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1av6fuuarn().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_1av6fuuarn().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_1av6fuuarn().f[1]++;
  cov_1av6fuuarn().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_1av6fuuarn().b[11][0]++;
    cov_1av6fuuarn().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_1av6fuuarn().b[11][1]++;
  }
}));
var GoogleAdsService_1;
var _a, _b, _c, _d;
import { Injectable, Logger, BadRequestException, UnauthorizedException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from '../database/prisma.service';
import { CryptoService } from './crypto.service';
import { GoogleAdsApi } from 'google-ads-api';
import axios from 'axios';
import { Cron } from '@nestjs/schedule';
import { googleAdsConfig } from '../config/env';
let GoogleAdsService =
/* istanbul ignore next */
(cov_1av6fuuarn().s[13]++, GoogleAdsService_1 = class GoogleAdsService {
  configService;
  prisma;
  cryptoService;
  logger =
  /* istanbul ignore next */
  (cov_1av6fuuarn().s[14]++, new Logger(GoogleAdsService_1.name));
  maxRetries =
  /* istanbul ignore next */
  (cov_1av6fuuarn().s[15]++, 3);
  retryDelay =
  /* istanbul ignore next */
  (cov_1av6fuuarn().s[16]++, 1000);
  googleAdsClients =
  /* istanbul ignore next */
  (cov_1av6fuuarn().s[17]++, new Map());
  constructor(configService, prisma, cryptoService) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[2]++;
    cov_1av6fuuarn().s[18]++;
    this.configService = configService;
    /* istanbul ignore next */
    cov_1av6fuuarn().s[19]++;
    this.prisma = prisma;
    /* istanbul ignore next */
    cov_1av6fuuarn().s[20]++;
    this.cryptoService = cryptoService;
  }
  /**
   * Generate OAuth 2.0 authorization URL
   */
  generateAuthUrl(userId, redirectUri) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[3]++;
    cov_1av6fuuarn().s[21]++;
    if (!googleAdsConfig) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[13][0]++;
      cov_1av6fuuarn().s[22]++;
      throw new BadRequestException('Google Ads integration not configured');
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[13][1]++;
    }
    const state =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[23]++, this.cryptoService.encrypt(JSON.stringify({
      userId,
      redirectUri
    })));
    const scopes =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[24]++, ['https://www.googleapis.com/auth/adwords']);
    const params =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[25]++, new URLSearchParams({
      client_id: googleAdsConfig.clientId,
      redirect_uri: redirectUri,
      scope: scopes.join(' '),
      response_type: 'code',
      access_type: 'offline',
      prompt: 'consent',
      state
    }));
    /* istanbul ignore next */
    cov_1av6fuuarn().s[26]++;
    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
  }
  /**
   * Exchange authorization code for tokens
   */
  async exchangeCodeForToken(code, redirectUri) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[4]++;
    cov_1av6fuuarn().s[27]++;
    if (!googleAdsConfig) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[14][0]++;
      cov_1av6fuuarn().s[28]++;
      throw new BadRequestException('Google Ads integration not configured');
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[14][1]++;
    }
    cov_1av6fuuarn().s[29]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[30]++, await axios.post('https://oauth2.googleapis.com/token', {
        client_id: googleAdsConfig.clientId,
        client_secret: googleAdsConfig.clientSecret,
        code,
        grant_type: 'authorization_code',
        redirect_uri: redirectUri
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[31]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[32]++;
      this.logger.error('Failed to exchange code for token', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[33]++;
      throw new BadRequestException('Failed to exchange authorization code');
    }
  }
  /**
   * Refresh access token
   */
  async refreshAccessToken(refreshToken) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[5]++;
    cov_1av6fuuarn().s[34]++;
    if (!googleAdsConfig) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[15][0]++;
      cov_1av6fuuarn().s[35]++;
      throw new BadRequestException('Google Ads integration not configured');
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[15][1]++;
    }
    cov_1av6fuuarn().s[36]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[37]++, await axios.post('https://oauth2.googleapis.com/token', {
        client_id: googleAdsConfig.clientId,
        client_secret: googleAdsConfig.clientSecret,
        refresh_token: refreshToken,
        grant_type: 'refresh_token'
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[38]++;
      return {
        ...response.data,
        refresh_token: refreshToken // Keep the original refresh token
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[39]++;
      this.logger.error('Failed to refresh access token', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[40]++;
      throw new UnauthorizedException('Failed to refresh access token');
    }
  }
  /**
   * Store OAuth tokens securely
   */
  async storeTokens(userId, tokens) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[6]++;
    const encryptedAccessToken =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[41]++, this.cryptoService.encrypt(tokens.access_token));
    const encryptedRefreshToken =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[42]++, this.cryptoService.encrypt(tokens.refresh_token));
    const expiresAt =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[43]++, new Date(Date.now() + tokens.expires_in * 1000));
    /* istanbul ignore next */
    cov_1av6fuuarn().s[44]++;
    await this.prisma.integration.upsert({
      where: {
        userId_platform: {
          userId,
          platform: 'GOOGLE_ADS'
        }
      },
      update: {
        accessToken: encryptedAccessToken,
        refreshToken: encryptedRefreshToken,
        expiresAt,
        isActive: true,
        lastSync: new Date()
      },
      create: {
        userId,
        platform: 'GOOGLE_ADS',
        accessToken: encryptedAccessToken,
        refreshToken: encryptedRefreshToken,
        expiresAt,
        isActive: true,
        lastSync: new Date()
      }
    });
    /* istanbul ignore next */
    cov_1av6fuuarn().s[45]++;
    this.logger.log(`Stored Google Ads tokens for user ${userId}`);
  }
  /**
   * Get valid access token (refresh if needed)
   */
  async getAccessToken(userId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[7]++;
    const integration =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[46]++, await this.prisma.integration.findUnique({
      where: {
        userId_platform: {
          userId,
          platform: 'GOOGLE_ADS'
        }
      }
    }));
    /* istanbul ignore next */
    cov_1av6fuuarn().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[17][0]++, !integration) ||
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[17][1]++, !integration.isActive)) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[16][0]++;
      cov_1av6fuuarn().s[48]++;
      throw new UnauthorizedException('Google Ads integration not found or inactive');
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[16][1]++;
    }
    // Check if token is expired
    cov_1av6fuuarn().s[49]++;
    if (
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[19][0]++, integration.expiresAt) &&
    /* istanbul ignore next */
    (cov_1av6fuuarn().b[19][1]++, integration.expiresAt <= new Date())) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[18][0]++;
      const refreshToken =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[50]++, this.cryptoService.decrypt(integration.refreshToken));
      const newTokens =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[51]++, await this.refreshAccessToken(refreshToken));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[52]++;
      await this.storeTokens(userId, newTokens);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[53]++;
      return newTokens.access_token;
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[18][1]++;
    }
    cov_1av6fuuarn().s[54]++;
    return this.cryptoService.decrypt(integration.accessToken);
  }
  /**
   * Get Google Ads API client for user
   */
  async getGoogleAdsClient(userId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[8]++;
    cov_1av6fuuarn().s[55]++;
    if (!googleAdsConfig) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[20][0]++;
      cov_1av6fuuarn().s[56]++;
      throw new BadRequestException('Google Ads integration not configured');
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[20][1]++;
    }
    const cacheKey =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[57]++, `google-ads-client-${userId}`);
    /* istanbul ignore next */
    cov_1av6fuuarn().s[58]++;
    if (this.googleAdsClients.has(cacheKey)) {
      /* istanbul ignore next */
      cov_1av6fuuarn().b[21][0]++;
      cov_1av6fuuarn().s[59]++;
      return this.googleAdsClients.get(cacheKey);
    } else
    /* istanbul ignore next */
    {
      cov_1av6fuuarn().b[21][1]++;
    }
    const accessToken =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[60]++, await this.getAccessToken(userId));
    const client =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[61]++, new GoogleAdsApi({
      client_id: googleAdsConfig.clientId,
      client_secret: googleAdsConfig.clientSecret,
      developer_token: googleAdsConfig.developerToken
    }));
    // Set the access token for the client
    /* istanbul ignore next */
    cov_1av6fuuarn().s[62]++;
    client.Customer.credentials = {
      access_token: accessToken
    };
    /* istanbul ignore next */
    cov_1av6fuuarn().s[63]++;
    this.googleAdsClients.set(cacheKey, client);
    /* istanbul ignore next */
    cov_1av6fuuarn().s[64]++;
    return client;
  }
  /**
   * Get accessible customer accounts
   */
  async getCustomerAccounts(userId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[9]++;
    cov_1av6fuuarn().s[65]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[66]++, await this.getGoogleAdsClient(userId));
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[67]++, `
        SELECT 
          customer.id,
          customer.descriptive_name,
          customer.currency_code,
          customer.time_zone,
          customer.status,
          customer.manager
        FROM customer
        WHERE customer.status = 'ENABLED'
      `);
      const customers =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[68]++, await client.Customer().report({
        query,
        login_customer_id: googleAdsConfig?.loginCustomerId
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[69]++;
      return customers.map(customer => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[10]++;
        cov_1av6fuuarn().s[70]++;
        return {
          id: customer.customer.id.toString(),
          name:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[22][0]++, customer.customer.descriptive_name) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[22][1]++, `Customer ${customer.customer.id}`),
          currency: customer.customer.currency_code,
          timezone: customer.customer.time_zone,
          status: customer.customer.status,
          type: customer.customer.manager ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[23][0]++, 'MANAGER') :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[23][1]++, 'CLIENT')
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[71]++;
      this.logger.error('Failed to get customer accounts', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[72]++;
      throw new BadRequestException('Failed to retrieve customer accounts');
    }
  }
  /**
   * Get campaigns for a customer
   */
  async getCampaigns(userId, customerId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[11]++;
    cov_1av6fuuarn().s[73]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[74]++, await this.getGoogleAdsClient(userId));
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[75]++, `
        SELECT 
          campaign.id,
          campaign.name,
          campaign.status,
          campaign.advertising_channel_type,
          campaign.start_date,
          campaign.end_date,
          campaign_budget.amount_micros,
          campaign_budget.type
        FROM campaign
        WHERE campaign.status != 'REMOVED'
        ORDER BY campaign.name
      `);
      const campaigns =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[76]++, await client.Customer({
        customer_id: customerId
      }).report({
        query
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[77]++;
      return campaigns.map(campaign => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[12]++;
        cov_1av6fuuarn().s[78]++;
        return {
          id: campaign.campaign.id.toString(),
          name: campaign.campaign.name,
          status: campaign.campaign.status,
          type: campaign.campaign.advertising_channel_type,
          start_date: campaign.campaign.start_date,
          end_date: campaign.campaign.end_date,
          budget_amount: campaign.campaign_budget?.amount_micros ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[24][0]++, parseInt(campaign.campaign_budget.amount_micros) / 1000000) :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[24][1]++, undefined),
          budget_type: campaign.campaign_budget?.type,
          customer_id: customerId
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[79]++;
      this.logger.error('Failed to get campaigns', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[80]++;
      throw new BadRequestException('Failed to retrieve campaigns');
    }
  }
  /**
   * Get keywords for campaigns
   */
  async getKeywords(userId, customerId, campaignIds) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[13]++;
    cov_1av6fuuarn().s[81]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[82]++, await this.getGoogleAdsClient(userId));
      let whereClause =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[83]++, 'ad_group_criterion.status != "REMOVED" AND ad_group_criterion.type = "KEYWORD"');
      /* istanbul ignore next */
      cov_1av6fuuarn().s[84]++;
      if (
      /* istanbul ignore next */
      (cov_1av6fuuarn().b[26][0]++, campaignIds) &&
      /* istanbul ignore next */
      (cov_1av6fuuarn().b[26][1]++, campaignIds.length > 0)) {
        /* istanbul ignore next */
        cov_1av6fuuarn().b[25][0]++;
        const campaignFilter =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[85]++, campaignIds.map(id => {
          /* istanbul ignore next */
          cov_1av6fuuarn().f[14]++;
          cov_1av6fuuarn().s[86]++;
          return `"${id}"`;
        }).join(','));
        /* istanbul ignore next */
        cov_1av6fuuarn().s[87]++;
        whereClause += ` AND campaign.id IN (${campaignFilter})`;
      } else
      /* istanbul ignore next */
      {
        cov_1av6fuuarn().b[25][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[88]++, `
        SELECT 
          ad_group_criterion.criterion_id,
          ad_group_criterion.keyword.text,
          ad_group_criterion.keyword.match_type,
          ad_group_criterion.status,
          ad_group_criterion.quality_info.quality_score,
          ad_group_criterion.position_estimates.first_page_cpc_micros,
          ad_group_criterion.position_estimates.top_of_page_cpc_micros,
          campaign.id,
          ad_group.id
        FROM keyword_view
        WHERE ${whereClause}
        ORDER BY ad_group_criterion.keyword.text
      `);
      const keywords =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[89]++, await client.Customer({
        customer_id: customerId
      }).report({
        query
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[90]++;
      return keywords.map(keyword => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[15]++;
        cov_1av6fuuarn().s[91]++;
        return {
          id: keyword.ad_group_criterion.criterion_id.toString(),
          text: keyword.ad_group_criterion.keyword.text,
          match_type: keyword.ad_group_criterion.keyword.match_type,
          status: keyword.ad_group_criterion.status,
          quality_score: keyword.ad_group_criterion.quality_info?.quality_score,
          first_page_cpc: keyword.ad_group_criterion.position_estimates?.first_page_cpc_micros ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[27][0]++, parseInt(keyword.ad_group_criterion.position_estimates.first_page_cpc_micros) / 1000000) :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[27][1]++, undefined),
          top_of_page_cpc: keyword.ad_group_criterion.position_estimates?.top_of_page_cpc_micros ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[28][0]++, parseInt(keyword.ad_group_criterion.position_estimates.top_of_page_cpc_micros) / 1000000) :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[28][1]++, undefined),
          campaign_id: keyword.campaign.id.toString(),
          ad_group_id: keyword.ad_group.id.toString()
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[92]++;
      this.logger.error('Failed to get keywords', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[93]++;
      throw new BadRequestException('Failed to retrieve keywords');
    }
  }
  /**
   * Get campaign performance metrics
   */
  async getCampaignMetrics(userId, customerId, dateRange) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[16]++;
    cov_1av6fuuarn().s[94]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[95]++, await this.getGoogleAdsClient(userId));
      let dateFilter =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[96]++, '');
      /* istanbul ignore next */
      cov_1av6fuuarn().s[97]++;
      if (dateRange) {
        /* istanbul ignore next */
        cov_1av6fuuarn().b[29][0]++;
        cov_1av6fuuarn().s[98]++;
        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;
      } else
      /* istanbul ignore next */
      {
        cov_1av6fuuarn().b[29][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[99]++, `
        SELECT 
          campaign.id,
          segments.date,
          metrics.impressions,
          metrics.clicks,
          metrics.cost_micros,
          metrics.conversions,
          metrics.ctr,
          metrics.average_cpc
        FROM campaign
        WHERE campaign.status != 'REMOVED' ${dateFilter}
        ORDER BY segments.date DESC, campaign.name
      `);
      const metrics =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[100]++, await client.Customer({
        customer_id: customerId
      }).report({
        query
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[101]++;
      return metrics.map(metric => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[17]++;
        cov_1av6fuuarn().s[102]++;
        return {
          campaign_id: metric.campaign.id.toString(),
          impressions:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[30][0]++, parseInt(metric.metrics.impressions)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[30][1]++, 0),
          clicks:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[31][0]++, parseInt(metric.metrics.clicks)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[31][1]++, 0),
          cost_micros:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[32][0]++, parseInt(metric.metrics.cost_micros)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[32][1]++, 0),
          conversions:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[33][0]++, parseFloat(metric.metrics.conversions)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[33][1]++, 0),
          ctr:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[34][0]++, parseFloat(metric.metrics.ctr)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[34][1]++, 0),
          average_cpc:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[35][0]++, parseInt(metric.metrics.average_cpc)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[35][1]++, 0),
          cost_per_conversion: metric.metrics.conversions > 0 ?
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[36][0]++, parseInt(metric.metrics.cost_micros) / parseFloat(metric.metrics.conversions) / 1000000) :
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[36][1]++, undefined),
          date: metric.segments.date
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[103]++;
      this.logger.error('Failed to get campaign metrics', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[104]++;
      throw new BadRequestException('Failed to retrieve campaign metrics');
    }
  }
  /**
   * Get search terms report
   */
  async getSearchTermsReport(userId, customerId, dateRange) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[18]++;
    cov_1av6fuuarn().s[105]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[106]++, await this.getGoogleAdsClient(userId));
      let dateFilter =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[107]++, '');
      /* istanbul ignore next */
      cov_1av6fuuarn().s[108]++;
      if (dateRange) {
        /* istanbul ignore next */
        cov_1av6fuuarn().b[37][0]++;
        cov_1av6fuuarn().s[109]++;
        dateFilter = `AND segments.date >= '${dateRange.startDate}' AND segments.date <= '${dateRange.endDate}'`;
      } else
      /* istanbul ignore next */
      {
        cov_1av6fuuarn().b[37][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[110]++, `
        SELECT 
          search_term_view.search_term,
          metrics.impressions,
          metrics.clicks,
          metrics.cost_micros,
          metrics.conversions,
          campaign.id,
          ad_group.id,
          ad_group_criterion.criterion_id
        FROM search_term_view
        WHERE search_term_view.status != 'NONE' ${dateFilter}
        ORDER BY metrics.impressions DESC
      `);
      const searchTerms =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[111]++, await client.Customer({
        customer_id: customerId
      }).report({
        query
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[112]++;
      return searchTerms.map(term => {
        /* istanbul ignore next */
        cov_1av6fuuarn().f[19]++;
        cov_1av6fuuarn().s[113]++;
        return {
          search_term: term.search_term_view.search_term,
          impressions:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[38][0]++, parseInt(term.metrics.impressions)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[38][1]++, 0),
          clicks:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[39][0]++, parseInt(term.metrics.clicks)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[39][1]++, 0),
          cost_micros:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[40][0]++, parseInt(term.metrics.cost_micros)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[40][1]++, 0),
          conversions:
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[41][0]++, parseFloat(term.metrics.conversions)) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[41][1]++, 0),
          campaign_id: term.campaign.id.toString(),
          ad_group_id: term.ad_group.id.toString(),
          keyword_id: term.ad_group_criterion?.criterion_id?.toString()
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[114]++;
      this.logger.error('Failed to get search terms report', error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[115]++;
      throw new BadRequestException('Failed to retrieve search terms report');
    }
  }
  /**
   * Sync user data from Google Ads
   */
  async syncUserData(userId, force =
  /* istanbul ignore next */
  (cov_1av6fuuarn().b[42][0]++, false)) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[20]++;
    cov_1av6fuuarn().s[116]++;
    try {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[117]++;
      this.logger.log(`Starting Google Ads sync for user ${userId}`);
      const accounts =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[118]++, await this.getCustomerAccounts(userId));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[119]++;
      for (const account of accounts) {
        /* istanbul ignore next */
        cov_1av6fuuarn().s[120]++;
        if (account.type === 'CLIENT') {
          /* istanbul ignore next */
          cov_1av6fuuarn().b[43][0]++;
          cov_1av6fuuarn().s[121]++;
          // Only sync client accounts, not manager accounts
          await this.syncAccountData(userId, account);
        } else
        /* istanbul ignore next */
        {
          cov_1av6fuuarn().b[43][1]++;
        }
      }
      // Update last sync timestamp
      /* istanbul ignore next */
      cov_1av6fuuarn().s[122]++;
      await this.prisma.integration.update({
        where: {
          userId_platform: {
            userId,
            platform: 'GOOGLE_ADS'
          }
        },
        data: {
          lastSync: new Date()
        }
      });
      /* istanbul ignore next */
      cov_1av6fuuarn().s[123]++;
      this.logger.log(`Completed Google Ads sync for user ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[124]++;
      this.logger.error(`Failed to sync Google Ads data for user ${userId}`, error);
      /* istanbul ignore next */
      cov_1av6fuuarn().s[125]++;
      throw error;
    }
  }
  /**
   * Sync data for a specific account
   */
  async syncAccountData(userId, account) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[21]++;
    cov_1av6fuuarn().s[126]++;
    try {
      // Sync campaigns
      const campaigns =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[127]++, await this.getCampaigns(userId, account.id));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[128]++;
      for (const campaign of campaigns) {
        /* istanbul ignore next */
        cov_1av6fuuarn().s[129]++;
        await this.storeCampaignData(userId, account, campaign);
        // Sync keywords for this campaign
        const keywords =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[130]++, await this.getKeywords(userId, account.id, [campaign.id]));
        /* istanbul ignore next */
        cov_1av6fuuarn().s[131]++;
        for (const keyword of keywords) {
          /* istanbul ignore next */
          cov_1av6fuuarn().s[132]++;
          await this.storeKeywordData(userId, keyword);
        }
        // Sync metrics for the last 30 days
        const endDate =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[133]++, new Date().toISOString().split('T')[0]);
        const startDate =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[134]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]);
        const metrics =
        /* istanbul ignore next */
        (cov_1av6fuuarn().s[135]++, await this.getCampaignMetrics(userId, account.id, {
          startDate,
          endDate
        }));
        /* istanbul ignore next */
        cov_1av6fuuarn().s[136]++;
        for (const metric of metrics) {
          /* istanbul ignore next */
          cov_1av6fuuarn().s[137]++;
          await this.storeCampaignMetrics(userId, metric);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[138]++;
      this.logger.error(`Failed to sync account data for ${account.id}`, error);
    }
  }
  /**
   * Store campaign data in database
   */
  async storeCampaignData(userId, account, campaign) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[22]++;
    cov_1av6fuuarn().s[139]++;
    await this.prisma.campaign.upsert({
      where: {
        externalId_platform: {
          externalId: campaign.id,
          platform: 'GOOGLE_ADS'
        }
      },
      update: {
        name: campaign.name,
        status: campaign.status,
        type: campaign.type,
        startDate: campaign.start_date ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[44][0]++, new Date(campaign.start_date)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[44][1]++, null),
        endDate: campaign.end_date ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[45][0]++, new Date(campaign.end_date)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[45][1]++, null),
        budget: campaign.budget_amount,
        updatedAt: new Date()
      },
      create: {
        externalId: campaign.id,
        platform: 'GOOGLE_ADS',
        userId,
        accountId: account.id,
        name: campaign.name,
        status: campaign.status,
        type: campaign.type,
        startDate: campaign.start_date ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[46][0]++, new Date(campaign.start_date)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[46][1]++, null),
        endDate: campaign.end_date ?
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[47][0]++, new Date(campaign.end_date)) :
        /* istanbul ignore next */
        (cov_1av6fuuarn().b[47][1]++, null),
        budget: campaign.budget_amount,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
  }
  /**
   * Store keyword data in database
   */
  async storeKeywordData(userId, keyword) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[23]++;
    cov_1av6fuuarn().s[140]++;
    await this.prisma.keyword.upsert({
      where: {
        externalId_platform: {
          externalId: keyword.id,
          platform: 'GOOGLE_ADS'
        }
      },
      update: {
        text: keyword.text,
        matchType: keyword.match_type,
        status: keyword.status,
        qualityScore: keyword.quality_score,
        firstPageCpc: keyword.first_page_cpc,
        topOfPageCpc: keyword.top_of_page_cpc,
        updatedAt: new Date()
      },
      create: {
        externalId: keyword.id,
        platform: 'GOOGLE_ADS',
        userId,
        campaignId: keyword.campaign_id,
        adGroupId: keyword.ad_group_id,
        text: keyword.text,
        matchType: keyword.match_type,
        status: keyword.status,
        qualityScore: keyword.quality_score,
        firstPageCpc: keyword.first_page_cpc,
        topOfPageCpc: keyword.top_of_page_cpc,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
  }
  /**
   * Store campaign metrics in database
   */
  async storeCampaignMetrics(userId, metrics) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[24]++;
    cov_1av6fuuarn().s[141]++;
    await this.prisma.campaignMetrics.upsert({
      where: {
        campaignId_date_platform: {
          campaignId: metrics.campaign_id,
          date: new Date(metrics.date),
          platform: 'GOOGLE_ADS'
        }
      },
      update: {
        impressions: metrics.impressions,
        clicks: metrics.clicks,
        cost: metrics.cost_micros / 1000000,
        // Convert micros to currency
        conversions: metrics.conversions,
        ctr: metrics.ctr,
        averageCpc: metrics.average_cpc / 1000000,
        // Convert micros to currency
        costPerConversion: metrics.cost_per_conversion,
        updatedAt: new Date()
      },
      create: {
        campaignId: metrics.campaign_id,
        platform: 'GOOGLE_ADS',
        userId,
        date: new Date(metrics.date),
        impressions: metrics.impressions,
        clicks: metrics.clicks,
        cost: metrics.cost_micros / 1000000,
        conversions: metrics.conversions,
        ctr: metrics.ctr,
        averageCpc: metrics.average_cpc / 1000000,
        costPerConversion: metrics.cost_per_conversion,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
  }
  /**
   * Disconnect Google Ads integration
   */
  async disconnectIntegration(userId) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[25]++;
    cov_1av6fuuarn().s[142]++;
    await this.prisma.integration.update({
      where: {
        userId_platform: {
          userId,
          platform: 'GOOGLE_ADS'
        }
      },
      data: {
        isActive: false,
        accessToken: null,
        refreshToken: null,
        expiresAt: null
      }
    });
    // Remove cached client
    const cacheKey =
    /* istanbul ignore next */
    (cov_1av6fuuarn().s[143]++, `google-ads-client-${userId}`);
    /* istanbul ignore next */
    cov_1av6fuuarn().s[144]++;
    this.googleAdsClients.delete(cacheKey);
    /* istanbul ignore next */
    cov_1av6fuuarn().s[145]++;
    this.logger.log(`Disconnected Google Ads integration for user ${userId}`);
  }
  /**
   * Scheduled sync job - runs every 30 minutes
   */
  async scheduledSync() {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[26]++;
    cov_1av6fuuarn().s[146]++;
    this.logger.log('Starting scheduled Google Ads sync');
    /* istanbul ignore next */
    cov_1av6fuuarn().s[147]++;
    try {
      const activeIntegrations =
      /* istanbul ignore next */
      (cov_1av6fuuarn().s[148]++, await this.prisma.integration.findMany({
        where: {
          platform: 'GOOGLE_ADS',
          isActive: true
        },
        select: {
          userId: true,
          lastSync: true
        }
      }));
      /* istanbul ignore next */
      cov_1av6fuuarn().s[149]++;
      for (const integration of activeIntegrations) {
        /* istanbul ignore next */
        cov_1av6fuuarn().s[150]++;
        try {
          // Only sync if last sync was more than 25 minutes ago (to avoid overlapping)
          const lastSyncThreshold =
          /* istanbul ignore next */
          (cov_1av6fuuarn().s[151]++, new Date(Date.now() - 25 * 60 * 1000));
          /* istanbul ignore next */
          cov_1av6fuuarn().s[152]++;
          if (
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[49][0]++, !integration.lastSync) ||
          /* istanbul ignore next */
          (cov_1av6fuuarn().b[49][1]++, integration.lastSync < lastSyncThreshold)) {
            /* istanbul ignore next */
            cov_1av6fuuarn().b[48][0]++;
            cov_1av6fuuarn().s[153]++;
            await this.syncUserData(integration.userId);
            /* istanbul ignore next */
            cov_1av6fuuarn().s[154]++;
            await this.delay(2000); // Rate limiting between users
          } else
          /* istanbul ignore next */
          {
            cov_1av6fuuarn().b[48][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1av6fuuarn().s[155]++;
          this.logger.error(`Failed to sync user ${integration.userId}`, error);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1av6fuuarn().s[156]++;
      this.logger.error('Failed to run scheduled sync', error);
    }
  }
  /**
   * Utility method to add delay
   */
  delay(ms) {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[27]++;
    cov_1av6fuuarn().s[157]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1av6fuuarn().f[28]++;
      cov_1av6fuuarn().s[158]++;
      return setTimeout(resolve, ms);
    });
  }
  /**
   * Clear cached clients (useful for testing or memory management)
   */
  clearClientCache() {
    /* istanbul ignore next */
    cov_1av6fuuarn().f[29]++;
    cov_1av6fuuarn().s[159]++;
    this.googleAdsClients.clear();
  }
});
/* istanbul ignore next */
cov_1av6fuuarn().s[160]++;
__decorate([Cron('0 */30 * * * *'), __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", typeof (_d =
/* istanbul ignore next */
(cov_1av6fuuarn().b[51][0]++, typeof Promise !== "undefined") &&
/* istanbul ignore next */
(cov_1av6fuuarn().b[51][1]++, Promise)) === "function" ?
/* istanbul ignore next */
(cov_1av6fuuarn().b[50][0]++, _d) :
/* istanbul ignore next */
(cov_1av6fuuarn().b[50][1]++, Object))], GoogleAdsService.prototype, "scheduledSync", null);
/* istanbul ignore next */
cov_1av6fuuarn().s[161]++;
GoogleAdsService = GoogleAdsService_1 = __decorate([Injectable(), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_1av6fuuarn().b[53][0]++, typeof ConfigService !== "undefined") &&
/* istanbul ignore next */
(cov_1av6fuuarn().b[53][1]++, ConfigService)) === "function" ?
/* istanbul ignore next */
(cov_1av6fuuarn().b[52][0]++, _a) :
/* istanbul ignore next */
(cov_1av6fuuarn().b[52][1]++, Object), typeof (_b =
/* istanbul ignore next */
(cov_1av6fuuarn().b[55][0]++, typeof PrismaService !== "undefined") &&
/* istanbul ignore next */
(cov_1av6fuuarn().b[55][1]++, PrismaService)) === "function" ?
/* istanbul ignore next */
(cov_1av6fuuarn().b[54][0]++, _b) :
/* istanbul ignore next */
(cov_1av6fuuarn().b[54][1]++, Object), typeof (_c =
/* istanbul ignore next */
(cov_1av6fuuarn().b[57][0]++, typeof CryptoService !== "undefined") &&
/* istanbul ignore next */
(cov_1av6fuuarn().b[57][1]++, CryptoService)) === "function" ?
/* istanbul ignore next */
(cov_1av6fuuarn().b[56][0]++, _c) :
/* istanbul ignore next */
(cov_1av6fuuarn().b[56][1]++, Object)])], GoogleAdsService);
export { GoogleAdsService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,