6dbccf284724a502fe89e457d6bdfeee
/* istanbul ignore next */
function cov_2gxy6nbpoj() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\jobs.routes.ts";
  var hash = "dfc9839a848653abf2536efe17ff87297556ab47";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\jobs.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 50
        }
      },
      "1": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 58
        }
      },
      "2": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 55,
          column: 7
        }
      },
      "3": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "4": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 44,
          column: 46
        }
      },
      "5": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 45,
          column: 53
        }
      },
      "6": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "7": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 62
        }
      },
      "8": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 86
        }
      },
      "9": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 109,
          column: 7
        }
      },
      "10": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "11": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "12": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 96
        }
      },
      "13": {
        start: {
          line: 83,
          column: 31
        },
        end: {
          line: 83,
          column: 46
        }
      },
      "14": {
        start: {
          line: 84,
          column: 32
        },
        end: {
          line: 84,
          column: 56
        }
      },
      "15": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "16": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 76
        }
      },
      "17": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 93,
          column: 15
        }
      },
      "18": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 100,
          column: 15
        }
      },
      "19": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "20": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 28
        }
      },
      "21": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 73
        }
      },
      "22": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 106
        }
      },
      "23": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 155,
          column: 7
        }
      },
      "24": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "25": {
        start: {
          line: 136,
          column: 31
        },
        end: {
          line: 136,
          column: 46
        }
      },
      "26": {
        start: {
          line: 137,
          column: 31
        },
        end: {
          line: 137,
          column: 68
        }
      },
      "27": {
        start: {
          line: 138,
          column: 28
        },
        end: {
          line: 138,
          column: 51
        }
      },
      "28": {
        start: {
          line: 139,
          column: 28
        },
        end: {
          line: 139,
          column: 51
        }
      },
      "29": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 149,
          column: 15
        }
      },
      "30": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 77
        }
      },
      "31": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 108
        }
      },
      "32": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 276,
          column: 7
        }
      },
      "33": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "34": {
        start: {
          line: 202,
          column: 34
        },
        end: {
          line: 202,
          column: 47
        }
      },
      "35": {
        start: {
          line: 204,
          column: 28
        },
        end: {
          line: 204,
          column: 38
        }
      },
      "36": {
        start: {
          line: 205,
          column: 30
        },
        end: {
          line: 205,
          column: 40
        }
      },
      "37": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 58
        }
      },
      "38": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 43
        }
      },
      "39": {
        start: {
          line: 209,
          column: 30
        },
        end: {
          line: 214,
          column: 14
        }
      },
      "40": {
        start: {
          line: 215,
          column: 32
        },
        end: {
          line: 215,
          column: 56
        }
      },
      "41": {
        start: {
          line: 215,
          column: 51
        },
        end: {
          line: 215,
          column: 55
        }
      },
      "42": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 228,
          column: 13
        }
      },
      "43": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 227,
          column: 19
        }
      },
      "44": {
        start: {
          line: 230,
          column: 33
        },
        end: {
          line: 242,
          column: 14
        }
      },
      "45": {
        start: {
          line: 244,
          column: 28
        },
        end: {
          line: 244,
          column: 30
        }
      },
      "46": {
        start: {
          line: 245,
          column: 42
        },
        end: {
          line: 245,
          column: 43
        }
      },
      "47": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 258,
          column: 13
        }
      },
      "48": {
        start: {
          line: 246,
          column: 25
        },
        end: {
          line: 246,
          column: 26
        }
      },
      "49": {
        start: {
          line: 247,
          column: 29
        },
        end: {
          line: 247,
          column: 48
        }
      },
      "50": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 49
        }
      },
      "51": {
        start: {
          line: 249,
          column: 32
        },
        end: {
          line: 249,
          column: 64
        }
      },
      "52": {
        start: {
          line: 250,
          column: 35
        },
        end: {
          line: 250,
          column: 105
        }
      },
      "53": {
        start: {
          line: 250,
          column: 58
        },
        end: {
          line: 250,
          column: 104
        }
      },
      "54": {
        start: {
          line: 251,
          column: 43
        },
        end: {
          line: 251,
          column: 77
        }
      },
      "55": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 62
        }
      },
      "56": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 257,
          column: 19
        }
      },
      "57": {
        start: {
          line: 259,
          column: 33
        },
        end: {
          line: 259,
          column: 70
        }
      },
      "58": {
        start: {
          line: 259,
          column: 53
        },
        end: {
          line: 259,
          column: 62
        }
      },
      "59": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 270,
          column: 15
        }
      },
      "60": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 70
        }
      },
      "61": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 102
        }
      }
    },
    fnMap: {
      "0": {
        name: "jobsRoutes",
        decl: {
          start: {
            line: 5,
            column: 22
          },
          end: {
            line: 5,
            column: 32
          }
        },
        loc: {
          start: {
            line: 5,
            column: 42
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 7
          },
          end: {
            line: 42,
            column: 8
          }
        },
        loc: {
          start: {
            line: 42,
            column: 33
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 77,
            column: 7
          },
          end: {
            line: 77,
            column: 8
          }
        },
        loc: {
          start: {
            line: 77,
            column: 33
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 77
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 86,
            column: 57
          },
          end: {
            line: 86,
            column: 58
          }
        },
        loc: {
          start: {
            line: 86,
            column: 68
          },
          end: {
            line: 88,
            column: 13
          }
        },
        line: 86
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 134,
            column: 7
          },
          end: {
            line: 134,
            column: 8
          }
        },
        loc: {
          start: {
            line: 134,
            column: 33
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 134
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 200,
            column: 7
          },
          end: {
            line: 200,
            column: 8
          }
        },
        loc: {
          start: {
            line: 200,
            column: 33
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 200
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 215,
            column: 46
          },
          end: {
            line: 215,
            column: 47
          }
        },
        loc: {
          start: {
            line: 215,
            column: 51
          },
          end: {
            line: 215,
            column: 55
          }
        },
        line: 215
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 250,
            column: 53
          },
          end: {
            line: 250,
            column: 54
          }
        },
        loc: {
          start: {
            line: 250,
            column: 58
          },
          end: {
            line: 250,
            column: 104
          }
        },
        line: 250
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 259,
            column: 48
          },
          end: {
            line: 259,
            column: 49
          }
        },
        loc: {
          start: {
            line: 259,
            column: 53
          },
          end: {
            line: 259,
            column: 62
          }
        },
        line: 259
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "1": {
        loc: {
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 80,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 80,
            column: 45
          }
        }, {
          start: {
            line: 80,
            column: 49
          },
          end: {
            line: 80,
            column: 78
          }
        }],
        line: 80
      },
      "2": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "3": {
        loc: {
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 144,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 144,
            column: 39
          },
          end: {
            line: 144,
            column: 60
          }
        }, {
          start: {
            line: 144,
            column: 63
          },
          end: {
            line: 144,
            column: 67
          }
        }],
        line: 144
      },
      "4": {
        loc: {
          start: {
            line: 145,
            column: 29
          },
          end: {
            line: 145,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 39
          },
          end: {
            line: 145,
            column: 60
          }
        }, {
          start: {
            line: 145,
            column: 63
          },
          end: {
            line: 145,
            column: 67
          }
        }],
        line: 145
      },
      "5": {
        loc: {
          start: {
            line: 202,
            column: 20
          },
          end: {
            line: 202,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 202,
            column: 27
          },
          end: {
            line: 202,
            column: 29
          }
        }],
        line: 202
      },
      "6": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 228,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 228,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "7": {
        loc: {
          start: {
            line: 251,
            column: 43
          },
          end: {
            line: 251,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 43
          },
          end: {
            line: 251,
            column: 72
          }
        }, {
          start: {
            line: 251,
            column: 76
          },
          end: {
            line: 251,
            column: 77
          }
        }],
        line: 251
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\jobs.routes.ts",
      mappings: "AACA,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AACxC,OAAO,EAAE,cAAc,EAAE,sBAAsB,EAAE,MAAM,+BAA+B,CAAC;AACvF,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAEzC,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,OAAwB;IACvD,iBAAiB;IACjB,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IAC9C,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;IAEtD,wBAAwB;IACxB,OAAO,CAAC,GAAG,CACT,SAAS,EACT;QACE,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,MAAM,CAAC;YACd,OAAO,EAAE,wBAAwB;YACjC,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC,EAAE;gCAC1D,IAAI,EAAE;oCACJ,IAAI,EAAE,QAAQ;oCACd,UAAU,EAAE;wCACV,kBAAkB,EAAE;4CAClB,IAAI,EAAE,QAAQ;4CACd,UAAU,EAAE;gDACV,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;gDACxD,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE;gDAC3C,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE;6CAC5C;yCACF;qCACF;iCACF;6BACF;yBACF;qBACF;iBACF;aACF;SACF;KACF,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;YACnC,MAAM,MAAM,GAAG,UAAU,CAAC,aAAa,EAAE,CAAC;YAE1C,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,MAAM;aACb,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAClD,MAAM,IAAI,QAAQ,CAAC,2BAA2B,EAAE,mBAAmB,EAAE,GAAG,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC,CACF,CAAC;IAEF,qCAAqC;IACrC,OAAO,CAAC,IAAI,CACV,8BAA8B,EAC9B;QACE,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,MAAM,CAAC;YACd,OAAO,EAAE,oCAAoC;YAC7C,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAC3B,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6BAChC;yBACF;qBACF;iBACF;aACF;SACF;KACF,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,+BAA+B;YAC/B,IAAI,OAAO,CAAC,IAAK,CAAC,IAAI,KAAK,OAAO,IAAI,OAAO,CAAC,IAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;gBACrE,MAAM,IAAI,QAAQ,CAAC,0BAA0B,EAAE,0BAA0B,EAAE,GAAG,CAAC,CAAC;YAClF,CAAC;YAED,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;YACnC,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YAE7C,oCAAoC;YACpC,UAAU,CAAC,yBAAyB,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBACrD,MAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,sCAAsC,EAAE;gBAClD,MAAM,EAAE,OAAO,CAAC,IAAK,CAAC,EAAE;gBACxB,cAAc,EAAE,OAAO,CAAC,YAAa,CAAC,EAAE;gBACxC,WAAW;aACZ,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,OAAO,EAAE,4CAA4C;oBACrD,WAAW;iBACZ;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;gBAC9B,MAAM,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAC7D,MAAM,IAAI,QAAQ,CAAC,uCAAuC,EAAE,2BAA2B,EAAE,GAAG,CAAC,CAAC;QAChG,CAAC;IACH,CAAC,CACF,CAAC;IAEF,qCAAqC;IACrC,OAAO,CAAC,GAAG,CACT,6BAA6B,EAC7B;QACE,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,MAAM,CAAC;YACd,OAAO,EAAE,oCAAoC;YAC7C,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;gCAC9B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE;gCAC3C,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE;gCAC3C,cAAc,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gCAClC,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;6BAC7B;yBACF;qBACF;iBACF;aACF;SACF;KACF,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;YACnC,MAAM,UAAU,GAAG,UAAU,CAAC,wBAAwB,EAAE,CAAC;YAEzD,MAAM,OAAO,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC;YACxC,MAAM,OAAO,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC;YAExC,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,SAAS,EAAE,UAAU,CAAC,YAAY,EAAE;oBACpC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI;oBAC/C,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI;oBAC/C,cAAc,EAAE,aAAa,EAAE,iBAAiB;oBAChD,QAAQ,EAAE,mBAAmB;iBAC9B;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;YACjE,MAAM,IAAI,QAAQ,CAAC,0CAA0C,EAAE,0BAA0B,EAAE,GAAG,CAAC,CAAC;QAClG,CAAC;IACH,CAAC,CACF,CAAC;IAEF,yCAAyC;IACzC,OAAO,CAAC,GAAG,CACT,8BAA8B,EAC9B;QACE,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,MAAM,CAAC;YACd,OAAO,EAAE,iCAAiC;YAC1C,WAAW,EAAE;gBACX,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;iBAC/D;aACF;YACD,QAAQ,EAAE;gBACR,GAAG,EAAE;oBACH,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACV,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC5B,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,OAAO,EAAE;oCACP,IAAI,EAAE,OAAO;oCACb,KAAK,EAAE;wCACL,IAAI,EAAE,QAAQ;wCACd,UAAU,EAAE;4CACV,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CACxB,kBAAkB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;4CACtC,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;yCAC7B;qCACF;iCACF;gCACD,OAAO,EAAE;oCACP,IAAI,EAAE,QAAQ;oCACd,UAAU,EAAE;wCACV,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wCAC7B,YAAY,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wCAChC,uBAAuB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;qCAC5C;iCACF;6BACF;yBACF;qBACF;iBACF;aACF;SACF;KACF,EACD,KAAK,EAAE,OAAuB,EAAE,KAAmB,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC,KAA0B,CAAC;YAEzD,qDAAqD;YACrD,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;YAC3B,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YAC7B,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;YAC9C,SAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAE/B,+BAA+B;YAC/B,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAC1D,KAAK,EAAE;oBACL,cAAc,EAAE,OAAO,CAAC,YAAa,CAAC,EAAE;iBACzC;gBACD,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;aACrB,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAE7C,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7B,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC5B,OAAO,EAAE,IAAI;oBACb,IAAI,EAAE;wBACJ,OAAO,EAAE,EAAE;wBACX,OAAO,EAAE;4BACP,SAAS,EAAE,IAAI;4BACf,YAAY,EAAE,CAAC;4BACf,uBAAuB,EAAE,CAAC;yBAC3B;qBACF;iBACF,CAAC,CAAC;YACL,CAAC;YAED,oCAAoC;YACpC,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC;gBAChE,EAAE,EAAE,CAAC,MAAM,CAAC;gBACZ,KAAK,EAAE;oBACL,UAAU,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE;oBAC/B,IAAI,EAAE;wBACJ,GAAG,EAAE,SAAS;wBACd,GAAG,EAAE,OAAO;qBACb;iBACF;gBACD,MAAM,EAAE;oBACN,UAAU,EAAE,IAAI;iBACjB;aACF,CAAC,CAAC;YAEH,uBAAuB;YACvB,MAAM,OAAO,GAAG,EAAE,CAAC;YACnB,IAAI,uBAAuB,GAAG,CAAC,CAAC;YAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC9B,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;gBACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBACjC,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEjD,MAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACvC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,CAC/C,CAAC;gBAEF,MAAM,kBAAkB,GAAG,UAAU,EAAE,MAAM,CAAC,UAAU,IAAI,CAAC,CAAC;gBAC9D,uBAAuB,IAAI,kBAAkB,CAAC;gBAE9C,OAAO,CAAC,IAAI,CAAC;oBACX,IAAI,EAAE,OAAO;oBACb,kBAAkB;oBAClB,OAAO,EAAE,kBAAkB,GAAG,CAAC;iBAChC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;YAE3D,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC5B,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,OAAO;oBACP,OAAO,EAAE;wBACP,SAAS,EAAE,IAAI;wBACf,YAAY;wBACZ,uBAAuB;qBACxB;iBACF;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC1D,MAAM,IAAI,QAAQ,CAAC,mCAAmC,EAAE,2BAA2B,EAAE,GAAG,CAAC,CAAC;QAC5F,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\jobs.routes.ts"],
      sourcesContent: ["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { getJobManager } from '../jobs';\nimport { authMiddleware, organizationMiddleware } from '../middleware/auth.middleware';\nimport { ApiError } from '../utils/errors';\nimport { logger } from '../utils/logger';\n\nexport async function jobsRoutes(fastify: FastifyInstance) {\n  // Add middleware\n  fastify.addHook('preHandler', authMiddleware);\n  fastify.addHook('preHandler', organizationMiddleware);\n\n  // Health check for jobs\n  fastify.get(\n    '/health',\n    {\n      schema: {\n        tags: ['Jobs'],\n        summary: 'Get jobs health status',\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  status: { type: 'string', enum: ['healthy', 'unhealthy'] },\n                  jobs: {\n                    type: 'object',\n                    properties: {\n                      metricsAggregation: {\n                        type: 'object',\n                        properties: {\n                          status: { type: 'string', enum: ['running', 'stopped'] },\n                          nextRun: { type: 'string', nullable: true },\n                          lastRun: { type: 'string', nullable: true },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const jobManager = getJobManager();\n        const health = jobManager.getJobsHealth();\n\n        return reply.status(200).send({\n          success: true,\n          data: health,\n        });\n      } catch (error) {\n        logger.error('Error getting jobs health:', error);\n        throw new ApiError('Failed to get jobs health', 'JOBS_HEALTH_ERROR', 500);\n      }\n    }\n  );\n\n  // Trigger manual metrics aggregation\n  fastify.post(\n    '/metrics-aggregation/trigger',\n    {\n      schema: {\n        tags: ['Jobs'],\n        summary: 'Trigger manual metrics aggregation',\n        response: {\n          202: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  message: { type: 'string' },\n                  triggeredAt: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        // Check if user has admin role\n        if (request.user!.role !== 'OWNER' && request.user!.role !== 'ADMIN') {\n          throw new ApiError('Insufficient permissions', 'INSUFFICIENT_PERMISSIONS', 403);\n        }\n\n        const jobManager = getJobManager();\n        const triggeredAt = new Date().toISOString();\n\n        // Trigger aggregation in background\n        jobManager.triggerMetricsAggregation().catch((error) => {\n          logger.error('Error in manual metrics aggregation:', error);\n        });\n\n        logger.info('Manual metrics aggregation triggered', {\n          userId: request.user!.id,\n          organizationId: request.organization!.id,\n          triggeredAt,\n        });\n\n        return reply.status(202).send({\n          success: true,\n          data: {\n            message: 'Metrics aggregation triggered successfully',\n            triggeredAt,\n          },\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error triggering metrics aggregation:', error);\n        throw new ApiError('Failed to trigger metrics aggregation', 'TRIGGER_AGGREGATION_ERROR', 500);\n      }\n    }\n  );\n\n  // Get metrics aggregation job status\n  fastify.get(\n    '/metrics-aggregation/status',\n    {\n      schema: {\n        tags: ['Jobs'],\n        summary: 'Get metrics aggregation job status',\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  isRunning: { type: 'boolean' },\n                  nextRun: { type: 'string', nullable: true },\n                  lastRun: { type: 'string', nullable: true },\n                  cronExpression: { type: 'string' },\n                  timezone: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const jobManager = getJobManager();\n        const metricsJob = jobManager.getMetricsAggregationJob();\n        \n        const nextRun = metricsJob.getNextRun();\n        const lastRun = metricsJob.getLastRun();\n\n        return reply.status(200).send({\n          success: true,\n          data: {\n            isRunning: metricsJob.isJobRunning(),\n            nextRun: nextRun ? nextRun.toISOString() : null,\n            lastRun: lastRun ? lastRun.toISOString() : null,\n            cronExpression: '0 5 0 * * *', // Daily at 00:05\n            timezone: 'America/Sao_Paulo',\n          },\n        });\n      } catch (error) {\n        logger.error('Error getting metrics aggregation status:', error);\n        throw new ApiError('Failed to get metrics aggregation status', 'AGGREGATION_STATUS_ERROR', 500);\n      }\n    }\n  );\n\n  // Get aggregation history (last 30 days)\n  fastify.get(\n    '/metrics-aggregation/history',\n    {\n      schema: {\n        tags: ['Jobs'],\n        summary: 'Get metrics aggregation history',\n        querystring: {\n          type: 'object',\n          properties: {\n            days: { type: 'number', minimum: 1, maximum: 90, default: 30 },\n          },\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  history: {\n                    type: 'array',\n                    items: {\n                      type: 'object',\n                      properties: {\n                        date: { type: 'string' },\n                        campaignsProcessed: { type: 'number' },\n                        hasData: { type: 'boolean' },\n                      },\n                    },\n                  },\n                  summary: {\n                    type: 'object',\n                    properties: {\n                      totalDays: { type: 'number' },\n                      daysWithData: { type: 'number' },\n                      totalCampaignsProcessed: { type: 'number' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const { days = 30 } = request.query as { days?: number };\n        \n        // Get daily metrics for the organization's campaigns\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        startDate.setHours(0, 0, 0, 0);\n\n        // Get organization's campaigns\n        const campaigns = await request.server.db.campaign.findMany({\n          where: {\n            organizationId: request.organization!.id,\n          },\n          select: { id: true },\n        });\n\n        const campaignIds = campaigns.map(c => c.id);\n\n        if (campaignIds.length === 0) {\n          return reply.status(200).send({\n            success: true,\n            data: {\n              history: [],\n              summary: {\n                totalDays: days,\n                daysWithData: 0,\n                totalCampaignsProcessed: 0,\n              },\n            },\n          });\n        }\n\n        // Get daily metrics grouped by date\n        const dailyMetrics = await request.server.db.metricsDaily.groupBy({\n          by: ['date'],\n          where: {\n            campaignId: { in: campaignIds },\n            date: {\n              gte: startDate,\n              lte: endDate,\n            },\n          },\n          _count: {\n            campaignId: true,\n          },\n        });\n\n        // Create history array\n        const history = [];\n        let totalCampaignsProcessed = 0;\n        \n        for (let i = 0; i < days; i++) {\n          const date = new Date(startDate);\n          date.setDate(date.getDate() + i);\n          const dateStr = date.toISOString().split('T')[0];\n          \n          const dayMetrics = dailyMetrics.find(m => \n            m.date.toISOString().split('T')[0] === dateStr\n          );\n          \n          const campaignsProcessed = dayMetrics?._count.campaignId || 0;\n          totalCampaignsProcessed += campaignsProcessed;\n          \n          history.push({\n            date: dateStr,\n            campaignsProcessed,\n            hasData: campaignsProcessed > 0,\n          });\n        }\n\n        const daysWithData = history.filter(h => h.hasData).length;\n\n        return reply.status(200).send({\n          success: true,\n          data: {\n            history,\n            summary: {\n              totalDays: days,\n              daysWithData,\n              totalCampaignsProcessed,\n            },\n          },\n        });\n      } catch (error) {\n        logger.error('Error getting aggregation history:', error);\n        throw new ApiError('Failed to get aggregation history', 'AGGREGATION_HISTORY_ERROR', 500);\n      }\n    }\n  );\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dfc9839a848653abf2536efe17ff87297556ab47"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gxy6nbpoj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gxy6nbpoj();
import { getJobManager } from '../jobs';
import { authMiddleware, organizationMiddleware } from '../middleware/auth.middleware';
import { ApiError } from '../utils/errors';
import { logger } from '../utils/logger';
export async function jobsRoutes(fastify) {
  /* istanbul ignore next */
  cov_2gxy6nbpoj().f[0]++;
  cov_2gxy6nbpoj().s[0]++;
  // Add middleware
  fastify.addHook('preHandler', authMiddleware);
  /* istanbul ignore next */
  cov_2gxy6nbpoj().s[1]++;
  fastify.addHook('preHandler', organizationMiddleware);
  // Health check for jobs
  /* istanbul ignore next */
  cov_2gxy6nbpoj().s[2]++;
  fastify.get('/health', {
    schema: {
      tags: ['Jobs'],
      summary: 'Get jobs health status',
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                status: {
                  type: 'string',
                  enum: ['healthy', 'unhealthy']
                },
                jobs: {
                  type: 'object',
                  properties: {
                    metricsAggregation: {
                      type: 'object',
                      properties: {
                        status: {
                          type: 'string',
                          enum: ['running', 'stopped']
                        },
                        nextRun: {
                          type: 'string',
                          nullable: true
                        },
                        lastRun: {
                          type: 'string',
                          nullable: true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_2gxy6nbpoj().f[1]++;
    cov_2gxy6nbpoj().s[3]++;
    try {
      const jobManager =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[4]++, getJobManager());
      const health =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[5]++, jobManager.getJobsHealth());
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[6]++;
      return reply.status(200).send({
        success: true,
        data: health
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[7]++;
      logger.error('Error getting jobs health:', error);
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[8]++;
      throw new ApiError('Failed to get jobs health', 'JOBS_HEALTH_ERROR', 500);
    }
  });
  // Trigger manual metrics aggregation
  /* istanbul ignore next */
  cov_2gxy6nbpoj().s[9]++;
  fastify.post('/metrics-aggregation/trigger', {
    schema: {
      tags: ['Jobs'],
      summary: 'Trigger manual metrics aggregation',
      response: {
        202: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                message: {
                  type: 'string'
                },
                triggeredAt: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_2gxy6nbpoj().f[2]++;
    cov_2gxy6nbpoj().s[10]++;
    try {
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[11]++;
      // Check if user has admin role
      if (
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().b[1][0]++, request.user.role !== 'OWNER') &&
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().b[1][1]++, request.user.role !== 'ADMIN')) {
        /* istanbul ignore next */
        cov_2gxy6nbpoj().b[0][0]++;
        cov_2gxy6nbpoj().s[12]++;
        throw new ApiError('Insufficient permissions', 'INSUFFICIENT_PERMISSIONS', 403);
      } else
      /* istanbul ignore next */
      {
        cov_2gxy6nbpoj().b[0][1]++;
      }
      const jobManager =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[13]++, getJobManager());
      const triggeredAt =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[14]++, new Date().toISOString());
      // Trigger aggregation in background
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[15]++;
      jobManager.triggerMetricsAggregation().catch(error => {
        /* istanbul ignore next */
        cov_2gxy6nbpoj().f[3]++;
        cov_2gxy6nbpoj().s[16]++;
        logger.error('Error in manual metrics aggregation:', error);
      });
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[17]++;
      logger.info('Manual metrics aggregation triggered', {
        userId: request.user.id,
        organizationId: request.organization.id,
        triggeredAt
      });
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[18]++;
      return reply.status(202).send({
        success: true,
        data: {
          message: 'Metrics aggregation triggered successfully',
          triggeredAt
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[19]++;
      if (error instanceof ApiError) {
        /* istanbul ignore next */
        cov_2gxy6nbpoj().b[2][0]++;
        cov_2gxy6nbpoj().s[20]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_2gxy6nbpoj().b[2][1]++;
      }
      cov_2gxy6nbpoj().s[21]++;
      logger.error('Error triggering metrics aggregation:', error);
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[22]++;
      throw new ApiError('Failed to trigger metrics aggregation', 'TRIGGER_AGGREGATION_ERROR', 500);
    }
  });
  // Get metrics aggregation job status
  /* istanbul ignore next */
  cov_2gxy6nbpoj().s[23]++;
  fastify.get('/metrics-aggregation/status', {
    schema: {
      tags: ['Jobs'],
      summary: 'Get metrics aggregation job status',
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                isRunning: {
                  type: 'boolean'
                },
                nextRun: {
                  type: 'string',
                  nullable: true
                },
                lastRun: {
                  type: 'string',
                  nullable: true
                },
                cronExpression: {
                  type: 'string'
                },
                timezone: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_2gxy6nbpoj().f[4]++;
    cov_2gxy6nbpoj().s[24]++;
    try {
      const jobManager =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[25]++, getJobManager());
      const metricsJob =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[26]++, jobManager.getMetricsAggregationJob());
      const nextRun =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[27]++, metricsJob.getNextRun());
      const lastRun =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[28]++, metricsJob.getLastRun());
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[29]++;
      return reply.status(200).send({
        success: true,
        data: {
          isRunning: metricsJob.isJobRunning(),
          nextRun: nextRun ?
          /* istanbul ignore next */
          (cov_2gxy6nbpoj().b[3][0]++, nextRun.toISOString()) :
          /* istanbul ignore next */
          (cov_2gxy6nbpoj().b[3][1]++, null),
          lastRun: lastRun ?
          /* istanbul ignore next */
          (cov_2gxy6nbpoj().b[4][0]++, lastRun.toISOString()) :
          /* istanbul ignore next */
          (cov_2gxy6nbpoj().b[4][1]++, null),
          cronExpression: '0 5 0 * * *',
          // Daily at 00:05
          timezone: 'America/Sao_Paulo'
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[30]++;
      logger.error('Error getting metrics aggregation status:', error);
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[31]++;
      throw new ApiError('Failed to get metrics aggregation status', 'AGGREGATION_STATUS_ERROR', 500);
    }
  });
  // Get aggregation history (last 30 days)
  /* istanbul ignore next */
  cov_2gxy6nbpoj().s[32]++;
  fastify.get('/metrics-aggregation/history', {
    schema: {
      tags: ['Jobs'],
      summary: 'Get metrics aggregation history',
      querystring: {
        type: 'object',
        properties: {
          days: {
            type: 'number',
            minimum: 1,
            maximum: 90,
            default: 30
          }
        }
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean'
            },
            data: {
              type: 'object',
              properties: {
                history: {
                  type: 'array',
                  items: {
                    type: 'object',
                    properties: {
                      date: {
                        type: 'string'
                      },
                      campaignsProcessed: {
                        type: 'number'
                      },
                      hasData: {
                        type: 'boolean'
                      }
                    }
                  }
                },
                summary: {
                  type: 'object',
                  properties: {
                    totalDays: {
                      type: 'number'
                    },
                    daysWithData: {
                      type: 'number'
                    },
                    totalCampaignsProcessed: {
                      type: 'number'
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_2gxy6nbpoj().f[5]++;
    cov_2gxy6nbpoj().s[33]++;
    try {
      const {
        days =
        /* istanbul ignore next */
        (cov_2gxy6nbpoj().b[5][0]++, 30)
      } =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[34]++, request.query);
      // Get daily metrics for the organization's campaigns
      const endDate =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[35]++, new Date());
      const startDate =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[36]++, new Date());
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[37]++;
      startDate.setDate(startDate.getDate() - days);
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[38]++;
      startDate.setHours(0, 0, 0, 0);
      // Get organization's campaigns
      const campaigns =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[39]++, await request.server.db.campaign.findMany({
        where: {
          organizationId: request.organization.id
        },
        select: {
          id: true
        }
      }));
      const campaignIds =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[40]++, campaigns.map(c => {
        /* istanbul ignore next */
        cov_2gxy6nbpoj().f[6]++;
        cov_2gxy6nbpoj().s[41]++;
        return c.id;
      }));
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[42]++;
      if (campaignIds.length === 0) {
        /* istanbul ignore next */
        cov_2gxy6nbpoj().b[6][0]++;
        cov_2gxy6nbpoj().s[43]++;
        return reply.status(200).send({
          success: true,
          data: {
            history: [],
            summary: {
              totalDays: days,
              daysWithData: 0,
              totalCampaignsProcessed: 0
            }
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2gxy6nbpoj().b[6][1]++;
      }
      // Get daily metrics grouped by date
      const dailyMetrics =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[44]++, await request.server.db.metricsDaily.groupBy({
        by: ['date'],
        where: {
          campaignId: {
            in: campaignIds
          },
          date: {
            gte: startDate,
            lte: endDate
          }
        },
        _count: {
          campaignId: true
        }
      }));
      // Create history array
      const history =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[45]++, []);
      let totalCampaignsProcessed =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[46]++, 0);
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[47]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[48]++, 0); i < days; i++) {
        const date =
        /* istanbul ignore next */
        (cov_2gxy6nbpoj().s[49]++, new Date(startDate));
        /* istanbul ignore next */
        cov_2gxy6nbpoj().s[50]++;
        date.setDate(date.getDate() + i);
        const dateStr =
        /* istanbul ignore next */
        (cov_2gxy6nbpoj().s[51]++, date.toISOString().split('T')[0]);
        const dayMetrics =
        /* istanbul ignore next */
        (cov_2gxy6nbpoj().s[52]++, dailyMetrics.find(m => {
          /* istanbul ignore next */
          cov_2gxy6nbpoj().f[7]++;
          cov_2gxy6nbpoj().s[53]++;
          return m.date.toISOString().split('T')[0] === dateStr;
        }));
        const campaignsProcessed =
        /* istanbul ignore next */
        (cov_2gxy6nbpoj().s[54]++,
        /* istanbul ignore next */
        (cov_2gxy6nbpoj().b[7][0]++, dayMetrics?._count.campaignId) ||
        /* istanbul ignore next */
        (cov_2gxy6nbpoj().b[7][1]++, 0));
        /* istanbul ignore next */
        cov_2gxy6nbpoj().s[55]++;
        totalCampaignsProcessed += campaignsProcessed;
        /* istanbul ignore next */
        cov_2gxy6nbpoj().s[56]++;
        history.push({
          date: dateStr,
          campaignsProcessed,
          hasData: campaignsProcessed > 0
        });
      }
      const daysWithData =
      /* istanbul ignore next */
      (cov_2gxy6nbpoj().s[57]++, history.filter(h => {
        /* istanbul ignore next */
        cov_2gxy6nbpoj().f[8]++;
        cov_2gxy6nbpoj().s[58]++;
        return h.hasData;
      }).length);
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[59]++;
      return reply.status(200).send({
        success: true,
        data: {
          history,
          summary: {
            totalDays: days,
            daysWithData,
            totalCampaignsProcessed
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[60]++;
      logger.error('Error getting aggregation history:', error);
      /* istanbul ignore next */
      cov_2gxy6nbpoj().s[61]++;
      throw new ApiError('Failed to get aggregation history', 'AGGREGATION_HISTORY_ERROR', 500);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,