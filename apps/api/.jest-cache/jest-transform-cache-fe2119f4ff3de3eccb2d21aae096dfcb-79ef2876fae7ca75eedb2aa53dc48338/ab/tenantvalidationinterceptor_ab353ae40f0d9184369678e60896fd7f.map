{"version":3,"names":["cov_fxqw6b6lk","actualCoverage","Injectable","ForbiddenException","Logger","tap","Reflector","SKIP_TENANT_VALIDATION","s","SkipTenantValidation","f","SetMetadata","require","ALLOW_CROSS_TENANT","AllowCrossTenant","TenantValidationInterceptor","TenantValidationInterceptor_1","reflector","logger","name","constructor","intercept","context","next","request","switchToHttp","getRequest","handler","getHandler","controller","getClass","skipValidation","getAllAndOverride","b","handle","allowCrossTenant","tenant","user","error","organizationId","id","warn","role","debug","pipe","__decorate","_a","Object","TenantRoleGuard","canActivate","requiredRoles","hasRole","some","join","_b","Roles","roles"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\interceptors\\tenant-validation.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  ForbiddenException,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { TenantInfo } from '../decorators/get-tenant.decorator';\nimport { UserRole } from '@prisma/client';\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  organizationId: string;\n  role: UserRole;\n  name?: string;\n}\n\ninterface RequestWithTenant extends Request {\n  tenant?: TenantInfo;\n  user?: AuthUser;\n}\n\n// Decorator para marcar rotas que não precisam de validação de tenant\nexport const SKIP_TENANT_VALIDATION = 'skipTenantValidation';\nexport const SkipTenantValidation = () => {\n  const { SetMetadata } = require('@nestjs/common');\n  return SetMetadata(SKIP_TENANT_VALIDATION, true);\n};\n\n// Decorator para marcar rotas que permitem acesso cross-tenant (apenas para SUPER_ADMIN)\nexport const ALLOW_CROSS_TENANT = 'allowCrossTenant';\nexport const AllowCrossTenant = () => {\n  const { SetMetadata } = require('@nestjs/common');\n  return SetMetadata(ALLOW_CROSS_TENANT, true);\n};\n\n@Injectable()\nexport class TenantValidationInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(TenantValidationInterceptor.name);\n\n  constructor(private reflector: Reflector) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const request = context.switchToHttp().getRequest<RequestWithTenant>();\n    const handler = context.getHandler();\n    const controller = context.getClass();\n\n    // Verificar se deve pular a validação de tenant\n    const skipValidation = this.reflector.getAllAndOverride<boolean>(\n      SKIP_TENANT_VALIDATION,\n      [handler, controller],\n    );\n\n    if (skipValidation) {\n      return next.handle();\n    }\n\n    // Verificar se permite acesso cross-tenant\n    const allowCrossTenant = this.reflector.getAllAndOverride<boolean>(\n      ALLOW_CROSS_TENANT,\n      [handler, controller],\n    );\n\n    const tenant = request.tenant;\n    const user = request.user;\n\n    // Validações básicas\n    if (!tenant) {\n      this.logger.error('Tenant information not found in request');\n      throw new ForbiddenException('Informações de tenant não encontradas');\n    }\n\n    if (!user) {\n      this.logger.error('User information not found in request');\n      throw new ForbiddenException('Informações de usuário não encontradas');\n    }\n\n    // Validação de isolamento de tenant\n    if (!allowCrossTenant) {\n      // Verificar se o usuário pertence ao tenant atual\n      if (user.organizationId !== tenant.id) {\n        this.logger.warn(\n          `Cross-tenant access attempt: User ${user.id} (org: ${user.organizationId}) trying to access tenant ${tenant.id}`,\n        );\n        throw new ForbiddenException(\n          'Acesso negado: usuário não pertence a esta organização',\n        );\n      }\n    } else {\n      // Para rotas que permitem cross-tenant, verificar se é SUPER_ADMIN\n      if (user.role !== 'SUPER_ADMIN' && user.organizationId !== tenant.id) {\n        this.logger.warn(\n          `Unauthorized cross-tenant access attempt: User ${user.id} (role: ${user.role}) trying to access tenant ${tenant.id}`,\n        );\n        throw new ForbiddenException(\n          'Acesso cross-tenant permitido apenas para super administradores',\n        );\n      }\n    }\n\n    // Log da validação bem-sucedida\n    this.logger.debug(\n      `Tenant validation successful: User ${user.id} accessing tenant ${tenant.id}`,\n    );\n\n    return next.handle().pipe(\n      tap(() => {\n        // Log adicional após a execução (opcional)\n        this.logger.debug(\n          `Request completed for user ${user.id} on tenant ${tenant.id}`,\n        );\n      }),\n    );\n  }\n}\n\n// Guard adicional para validação de roles específicas por tenant\n@Injectable()\nexport class TenantRoleGuard {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride<UserRole[]>(\n      'roles',\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest<RequestWithTenant>();\n    const user = request.user;\n    const tenant = request.tenant;\n\n    if (!user || !tenant) {\n      return false;\n    }\n\n    // Verificar se o usuário tem uma das roles necessárias\n    const hasRole = requiredRoles.some((role) => user.role === role);\n\n    if (!hasRole) {\n      throw new ForbiddenException(\n        `Acesso negado: role necessária: ${requiredRoles.join(' ou ')}`,\n      );\n    }\n\n    return true;\n  }\n}\n\n// Decorator para definir roles necessárias\nexport const Roles = (...roles: UserRole[]) => {\n  const { SetMetadata } = require('@nestjs/common');\n  return SetMetadata('roles', roles);\n};"],"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","ignoreList":[]}