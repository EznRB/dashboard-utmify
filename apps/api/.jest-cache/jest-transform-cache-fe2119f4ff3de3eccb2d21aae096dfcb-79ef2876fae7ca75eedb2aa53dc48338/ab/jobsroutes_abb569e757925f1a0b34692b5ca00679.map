{"version":3,"names":["getJobManager","authMiddleware","organizationMiddleware","ApiError","logger","jobsRoutes","fastify","cov_2gxy6nbpoj","f","s","addHook","get","schema","tags","summary","response","type","properties","success","data","status","enum","jobs","metricsAggregation","nextRun","nullable","lastRun","request","reply","jobManager","health","getJobsHealth","send","error","post","message","triggeredAt","b","user","role","Date","toISOString","triggerMetricsAggregation","catch","info","userId","id","organizationId","organization","isRunning","cronExpression","timezone","metricsJob","getMetricsAggregationJob","getNextRun","getLastRun","isJobRunning","querystring","days","minimum","maximum","default","history","items","date","campaignsProcessed","hasData","totalDays","daysWithData","totalCampaignsProcessed","query","endDate","startDate","setDate","getDate","setHours","campaigns","server","db","campaign","findMany","where","select","campaignIds","map","c","length","dailyMetrics","metricsDaily","groupBy","by","campaignId","in","gte","lte","_count","i","dateStr","split","dayMetrics","find","m","push","filter","h"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\jobs.routes.ts"],"sourcesContent":["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { getJobManager } from '../jobs';\nimport { authMiddleware, organizationMiddleware } from '../middleware/auth.middleware';\nimport { ApiError } from '../utils/errors';\nimport { logger } from '../utils/logger';\n\nexport async function jobsRoutes(fastify: FastifyInstance) {\n  // Add middleware\n  fastify.addHook('preHandler', authMiddleware);\n  fastify.addHook('preHandler', organizationMiddleware);\n\n  // Health check for jobs\n  fastify.get(\n    '/health',\n    {\n      schema: {\n        tags: ['Jobs'],\n        summary: 'Get jobs health status',\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  status: { type: 'string', enum: ['healthy', 'unhealthy'] },\n                  jobs: {\n                    type: 'object',\n                    properties: {\n                      metricsAggregation: {\n                        type: 'object',\n                        properties: {\n                          status: { type: 'string', enum: ['running', 'stopped'] },\n                          nextRun: { type: 'string', nullable: true },\n                          lastRun: { type: 'string', nullable: true },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const jobManager = getJobManager();\n        const health = jobManager.getJobsHealth();\n\n        return reply.status(200).send({\n          success: true,\n          data: health,\n        });\n      } catch (error) {\n        logger.error('Error getting jobs health:', error);\n        throw new ApiError('Failed to get jobs health', 'JOBS_HEALTH_ERROR', 500);\n      }\n    }\n  );\n\n  // Trigger manual metrics aggregation\n  fastify.post(\n    '/metrics-aggregation/trigger',\n    {\n      schema: {\n        tags: ['Jobs'],\n        summary: 'Trigger manual metrics aggregation',\n        response: {\n          202: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  message: { type: 'string' },\n                  triggeredAt: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        // Check if user has admin role\n        if (request.user!.role !== 'OWNER' && request.user!.role !== 'ADMIN') {\n          throw new ApiError('Insufficient permissions', 'INSUFFICIENT_PERMISSIONS', 403);\n        }\n\n        const jobManager = getJobManager();\n        const triggeredAt = new Date().toISOString();\n\n        // Trigger aggregation in background\n        jobManager.triggerMetricsAggregation().catch((error) => {\n          logger.error('Error in manual metrics aggregation:', error);\n        });\n\n        logger.info('Manual metrics aggregation triggered', {\n          userId: request.user!.id,\n          organizationId: request.organization!.id,\n          triggeredAt,\n        });\n\n        return reply.status(202).send({\n          success: true,\n          data: {\n            message: 'Metrics aggregation triggered successfully',\n            triggeredAt,\n          },\n        });\n      } catch (error) {\n        if (error instanceof ApiError) {\n          throw error;\n        }\n        logger.error('Error triggering metrics aggregation:', error);\n        throw new ApiError('Failed to trigger metrics aggregation', 'TRIGGER_AGGREGATION_ERROR', 500);\n      }\n    }\n  );\n\n  // Get metrics aggregation job status\n  fastify.get(\n    '/metrics-aggregation/status',\n    {\n      schema: {\n        tags: ['Jobs'],\n        summary: 'Get metrics aggregation job status',\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  isRunning: { type: 'boolean' },\n                  nextRun: { type: 'string', nullable: true },\n                  lastRun: { type: 'string', nullable: true },\n                  cronExpression: { type: 'string' },\n                  timezone: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const jobManager = getJobManager();\n        const metricsJob = jobManager.getMetricsAggregationJob();\n        \n        const nextRun = metricsJob.getNextRun();\n        const lastRun = metricsJob.getLastRun();\n\n        return reply.status(200).send({\n          success: true,\n          data: {\n            isRunning: metricsJob.isJobRunning(),\n            nextRun: nextRun ? nextRun.toISOString() : null,\n            lastRun: lastRun ? lastRun.toISOString() : null,\n            cronExpression: '0 5 0 * * *', // Daily at 00:05\n            timezone: 'America/Sao_Paulo',\n          },\n        });\n      } catch (error) {\n        logger.error('Error getting metrics aggregation status:', error);\n        throw new ApiError('Failed to get metrics aggregation status', 'AGGREGATION_STATUS_ERROR', 500);\n      }\n    }\n  );\n\n  // Get aggregation history (last 30 days)\n  fastify.get(\n    '/metrics-aggregation/history',\n    {\n      schema: {\n        tags: ['Jobs'],\n        summary: 'Get metrics aggregation history',\n        querystring: {\n          type: 'object',\n          properties: {\n            days: { type: 'number', minimum: 1, maximum: 90, default: 30 },\n          },\n        },\n        response: {\n          200: {\n            type: 'object',\n            properties: {\n              success: { type: 'boolean' },\n              data: {\n                type: 'object',\n                properties: {\n                  history: {\n                    type: 'array',\n                    items: {\n                      type: 'object',\n                      properties: {\n                        date: { type: 'string' },\n                        campaignsProcessed: { type: 'number' },\n                        hasData: { type: 'boolean' },\n                      },\n                    },\n                  },\n                  summary: {\n                    type: 'object',\n                    properties: {\n                      totalDays: { type: 'number' },\n                      daysWithData: { type: 'number' },\n                      totalCampaignsProcessed: { type: 'number' },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        const { days = 30 } = request.query as { days?: number };\n        \n        // Get daily metrics for the organization's campaigns\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        startDate.setHours(0, 0, 0, 0);\n\n        // Get organization's campaigns\n        const campaigns = await request.server.db.campaign.findMany({\n          where: {\n            organizationId: request.organization!.id,\n          },\n          select: { id: true },\n        });\n\n        const campaignIds = campaigns.map(c => c.id);\n\n        if (campaignIds.length === 0) {\n          return reply.status(200).send({\n            success: true,\n            data: {\n              history: [],\n              summary: {\n                totalDays: days,\n                daysWithData: 0,\n                totalCampaignsProcessed: 0,\n              },\n            },\n          });\n        }\n\n        // Get daily metrics grouped by date\n        const dailyMetrics = await request.server.db.metricsDaily.groupBy({\n          by: ['date'],\n          where: {\n            campaignId: { in: campaignIds },\n            date: {\n              gte: startDate,\n              lte: endDate,\n            },\n          },\n          _count: {\n            campaignId: true,\n          },\n        });\n\n        // Create history array\n        const history = [];\n        let totalCampaignsProcessed = 0;\n        \n        for (let i = 0; i < days; i++) {\n          const date = new Date(startDate);\n          date.setDate(date.getDate() + i);\n          const dateStr = date.toISOString().split('T')[0];\n          \n          const dayMetrics = dailyMetrics.find(m => \n            m.date.toISOString().split('T')[0] === dateStr\n          );\n          \n          const campaignsProcessed = dayMetrics?._count.campaignId || 0;\n          totalCampaignsProcessed += campaignsProcessed;\n          \n          history.push({\n            date: dateStr,\n            campaignsProcessed,\n            hasData: campaignsProcessed > 0,\n          });\n        }\n\n        const daysWithData = history.filter(h => h.hasData).length;\n\n        return reply.status(200).send({\n          success: true,\n          data: {\n            history,\n            summary: {\n              totalDays: days,\n              daysWithData,\n              totalCampaignsProcessed,\n            },\n          },\n        });\n      } catch (error) {\n        logger.error('Error getting aggregation history:', error);\n        throw new ApiError('Failed to get aggregation history', 'AGGREGATION_HISTORY_ERROR', 500);\n      }\n    }\n  );\n}"],"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","ignoreList":[]}