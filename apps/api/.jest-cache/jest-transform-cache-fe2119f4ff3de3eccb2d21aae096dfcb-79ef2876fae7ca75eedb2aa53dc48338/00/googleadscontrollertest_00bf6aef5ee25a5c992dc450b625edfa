95cb96dcd923e9e4fb1974690e52be6a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the GetUser decorator
jest.mock('../../decorators/get-user.decorator', () => ({
    GetUser: () => (target, propertyKey, descriptor) => {
        // Mock implementation that returns the user from the first parameter
        return descriptor;
    },
}));
const testing_1 = require("@nestjs/testing");
const google_ads_controller_1 = require("../google-ads.controller");
const google_ads_service_1 = require("../../services/google-ads.service");
const passport_1 = require("@nestjs/passport");
describe('GoogleAdsController', () => {
    let controller;
    let mockGoogleAdsService;
    const mockUser = {
        id: 'user-1',
        email: 'test@example.com',
        organizationId: 'org-1',
    };
    const mockIntegration = {
        id: 'integration-1',
        organizationId: 'org-1',
        platform: 'google_ads',
        isActive: true,
        accessToken: 'encrypted-access-token',
        refreshToken: 'encrypted-refresh-token',
        expiresAt: new Date(Date.now() + 3600000),
        settings: {
            customerId: '123-456-7890',
            developerToken: 'test-developer-token',
        },
    };
    const mockAccounts = [
        {
            id: '1234567890',
            name: 'Test Account 1',
            currency: 'USD',
            timezone: 'America/New_York',
            status: 'ENABLED',
            type: 'STANDARD',
        },
        {
            id: '0987654321',
            name: 'Test Account 2',
            currency: 'EUR',
            timezone: 'Europe/London',
            status: 'ENABLED',
            type: 'STANDARD',
        },
    ];
    const mockCampaigns = [
        {
            id: '987654321',
            name: 'Test Campaign 1',
            status: 'ENABLED',
            type: 'SEARCH',
            budget_amount: 10000000,
            budget_type: 'STANDARD',
            impressions: 1000,
            clicks: 50,
            cost: 5000000,
            conversions: 5,
            customer_id: '1234567890',
        },
        {
            id: '123456789',
            name: 'Test Campaign 2',
            status: 'PAUSED',
            type: 'DISPLAY',
            budget_amount: 20000000,
            budget_type: 'ACCELERATED',
            impressions: 2000,
            clicks: 100,
            cost: 10000000,
            conversions: 10,
            customer_id: '1234567890',
        },
    ];
    const mockKeywords = [
        {
            id: 'keyword-1',
            text: 'test keyword',
            match_type: 'EXACT',
            status: 'ENABLED',
            quality_score: 8,
            impressions: 500,
            clicks: 25,
            cost: 2500000,
            conversions: 2,
            campaign_id: '987654321',
            customer_id: '1234567890',
        },
    ];
    const mockSyncLogs = [
        {
            id: 'log-1',
            status: 'success',
            message: 'Sincronização concluída com sucesso',
            startedAt: new Date('2024-01-01T10:00:00Z'),
            completedAt: new Date('2024-01-01T10:05:00Z'),
            stats: {
                campaigns: 2,
                keywords: 1,
                metrics: 3,
            },
        },
    ];
    const mockIntegrationStatus = {
        connected: true,
        lastSync: new Date('2024-01-01T10:00:00Z'),
        connectedAt: new Date('2024-01-01T09:00:00Z'),
        expiresAt: new Date(Date.now() + 3600000),
        status: 'active',
    };
    beforeEach(async () => {
        // Create mock service
        mockGoogleAdsService = {
            generateAuthUrl: jest.fn(),
            handleCallback: jest.fn(),
            getAccounts: jest.fn(),
            getCampaigns: jest.fn(),
            getKeywords: jest.fn(),
            syncData: jest.fn(),
            getSyncLogs: jest.fn(),
            getIntegrationStatus: jest.fn(),
            disconnect: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            controllers: [google_ads_controller_1.GoogleAdsController],
            providers: [
                {
                    provide: google_ads_service_1.GoogleAdsService,
                    useValue: mockGoogleAdsService,
                },
            ],
        })
            .overrideGuard((0, passport_1.AuthGuard)('jwt'))
            .useValue({ canActivate: () => true })
            .compile();
        controller = module.get(google_ads_controller_1.GoogleAdsController);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('connect', () => {
        it('should generate auth URL for Google Ads connection', async () => {
            const mockAuthData = {
                authUrl: 'https://accounts.google.com/oauth/authorize?client_id=test&redirect_uri=http://localhost:3000/callback',
                state: 'random-state-string',
            };
            mockGoogleAdsService.generateAuthUrl.mockResolvedValue(mockAuthData);
            const redirectUri = 'http://localhost:3000/callback';
            const result = await controller.connect(mockUser, { redirectUri });
            expect(mockGoogleAdsService.generateAuthUrl).toHaveBeenCalledWith(mockUser, redirectUri);
            expect(result).toEqual(mockAuthData);
        });
        it('should handle missing redirect URI', async () => {
            await expect(controller.connect(mockUser, {})).rejects.toThrow();
        });
    });
    describe('callback', () => {
        it('should handle OAuth callback successfully', async () => {
            mockGoogleAdsService.handleCallback.mockResolvedValue(mockIntegration);
            const code = 'auth-code';
            const state = 'valid-state';
            const redirectUri = 'http://localhost:3000/callback';
            const result = await controller.callback(mockUser, { code, state, redirectUri });
            expect(mockGoogleAdsService.handleCallback).toHaveBeenCalledWith(mockUser, code, state, redirectUri);
            expect(result).toEqual({
                success: true,
                message: 'Google Ads conectado com sucesso',
                integration: mockIntegration,
            });
        });
        it('should handle callback with missing parameters', async () => {
            await expect(controller.callback(mockUser, { code: 'test' })).rejects.toThrow();
        });
        it('should handle callback errors', async () => {
            mockGoogleAdsService.handleCallback.mockRejectedValue(new Error('Invalid authorization code'));
            await expect(controller.callback(mockUser, {
                code: 'invalid-code',
                state: 'state',
                redirectUri: 'redirect-uri',
            })).rejects.toThrow('Invalid authorization code');
        });
    });
    describe('getAccounts', () => {
        it('should return Google Ads accounts', async () => {
            mockGoogleAdsService.getAccounts.mockResolvedValue(mockAccounts);
            const result = await controller.getAccounts(mockUser);
            expect(mockGoogleAdsService.getAccounts).toHaveBeenCalledWith(mockUser);
            expect(result).toEqual(mockAccounts);
        });
        it('should handle service errors', async () => {
            mockGoogleAdsService.getAccounts.mockRejectedValue(new Error('Integration not found'));
            await expect(controller.getAccounts(mockUser)).rejects.toThrow('Integration not found');
        });
    });
    describe('getCampaigns', () => {
        it('should return campaigns for a customer', async () => {
            const customerId = '1234567890';
            mockGoogleAdsService.getCampaigns.mockResolvedValue(mockCampaigns);
            const result = await controller.getCampaigns(mockUser, customerId);
            expect(mockGoogleAdsService.getCampaigns).toHaveBeenCalledWith(mockUser, customerId);
            expect(result).toEqual(mockCampaigns);
        });
        it('should handle invalid customer ID', async () => {
            mockGoogleAdsService.getCampaigns.mockRejectedValue(new Error('Invalid customer ID'));
            await expect(controller.getCampaigns(mockUser, 'invalid-id')).rejects.toThrow('Invalid customer ID');
        });
    });
    describe('getKeywords', () => {
        it('should return keywords for a campaign', async () => {
            const customerId = '1234567890';
            const campaignId = '987654321';
            mockGoogleAdsService.getKeywords.mockResolvedValue(mockKeywords);
            const result = await controller.getKeywords(mockUser, customerId, campaignId);
            expect(mockGoogleAdsService.getKeywords).toHaveBeenCalledWith(mockUser, customerId, campaignId);
            expect(result).toEqual(mockKeywords);
        });
        it('should handle missing campaign ID', async () => {
            mockGoogleAdsService.getKeywords.mockRejectedValue(new Error('Campaign not found'));
            await expect(controller.getKeywords(mockUser, '1234567890', 'invalid-campaign')).rejects.toThrow('Campaign not found');
        });
    });
    describe('sync', () => {
        it('should trigger data synchronization', async () => {
            const mockSyncResult = {
                success: true,
                message: 'Sincronização concluída com sucesso',
                stats: {
                    campaigns: 2,
                    keywords: 1,
                    metrics: 3,
                },
            };
            mockGoogleAdsService.syncData.mockResolvedValue(mockSyncResult);
            const result = await controller.sync(mockUser, { force: true });
            expect(mockGoogleAdsService.syncData).toHaveBeenCalledWith(mockUser, { force: true });
            expect(result).toEqual(mockSyncResult);
        });
        it('should handle sync without force parameter', async () => {
            const mockSyncResult = {
                success: true,
                message: 'Sincronização concluída com sucesso',
                stats: {
                    campaigns: 2,
                    keywords: 1,
                    metrics: 3,
                },
            };
            mockGoogleAdsService.syncData.mockResolvedValue(mockSyncResult);
            const result = await controller.sync(mockUser, {});
            expect(mockGoogleAdsService.syncData).toHaveBeenCalledWith(mockUser, {});
            expect(result).toEqual(mockSyncResult);
        });
        it('should handle sync errors', async () => {
            mockGoogleAdsService.syncData.mockRejectedValue(new Error('Sync failed'));
            await expect(controller.sync(mockUser, { force: true })).rejects.toThrow('Sync failed');
        });
    });
    describe('getSyncLogs', () => {
        it('should return sync logs', async () => {
            mockGoogleAdsService.getSyncLogs.mockResolvedValue(mockSyncLogs);
            const result = await controller.getSyncLogs(mockUser);
            expect(mockGoogleAdsService.getSyncLogs).toHaveBeenCalledWith(mockUser);
            expect(result).toEqual(mockSyncLogs);
        });
        it('should handle empty sync logs', async () => {
            mockGoogleAdsService.getSyncLogs.mockResolvedValue([]);
            const result = await controller.getSyncLogs(mockUser);
            expect(result).toEqual([]);
        });
    });
    describe('getStatus', () => {
        it('should return integration status', async () => {
            mockGoogleAdsService.getIntegrationStatus.mockResolvedValue(mockIntegrationStatus);
            const result = await controller.getStatus(mockUser);
            expect(mockGoogleAdsService.getIntegrationStatus).toHaveBeenCalledWith(mockUser);
            expect(result).toEqual(mockIntegrationStatus);
        });
        it('should handle disconnected status', async () => {
            const disconnectedStatus = {
                connected: false,
                status: 'not_connected',
            };
            mockGoogleAdsService.getIntegrationStatus.mockResolvedValue(disconnectedStatus);
            const result = await controller.getStatus(mockUser);
            expect(result).toEqual(disconnectedStatus);
        });
    });
    describe('disconnect', () => {
        it('should disconnect Google Ads integration', async () => {
            const mockDisconnectResult = {
                success: true,
                message: 'Google Ads desconectado com sucesso',
            };
            mockGoogleAdsService.disconnect.mockResolvedValue(mockDisconnectResult);
            const result = await controller.disconnect(mockUser);
            expect(mockGoogleAdsService.disconnect).toHaveBeenCalledWith(mockUser);
            expect(result).toEqual(mockDisconnectResult);
        });
        it('should handle disconnect errors', async () => {
            mockGoogleAdsService.disconnect.mockRejectedValue(new Error('Integration not found'));
            await expect(controller.disconnect(mockUser)).rejects.toThrow('Integration not found');
        });
    });
    describe('Error Handling', () => {
        it('should handle service unavailable errors', async () => {
            mockGoogleAdsService.getAccounts.mockRejectedValue(new Error('Google Ads API is temporarily unavailable'));
            await expect(controller.getAccounts(mockUser)).rejects.toThrow('Google Ads API is temporarily unavailable');
        });
        it('should handle authentication errors', async () => {
            mockGoogleAdsService.getCampaigns.mockRejectedValue(new Error('Authentication failed - token expired'));
            await expect(controller.getCampaigns(mockUser, '1234567890')).rejects.toThrow('Authentication failed - token expired');
        });
        it('should handle rate limiting errors', async () => {
            mockGoogleAdsService.syncData.mockRejectedValue(new Error('Rate limit exceeded - please try again later'));
            await expect(controller.sync(mockUser, { force: true })).rejects.toThrow('Rate limit exceeded - please try again later');
        });
    });
    describe('Input Validation', () => {
        it('should validate redirect URI format', async () => {
            const invalidRedirectUri = 'not-a-valid-url';
            await expect(controller.connect(mockUser, { redirectUri: invalidRedirectUri })).rejects.toThrow();
        });
        it('should validate customer ID format', async () => {
            const invalidCustomerId = 'invalid-format';
            mockGoogleAdsService.getCampaigns.mockRejectedValue(new Error('Invalid customer ID format'));
            await expect(controller.getCampaigns(mockUser, invalidCustomerId)).rejects.toThrow('Invalid customer ID format');
        });
        it('should validate campaign ID format', async () => {
            const invalidCampaignId = 'invalid-format';
            mockGoogleAdsService.getKeywords.mockRejectedValue(new Error('Invalid campaign ID format'));
            await expect(controller.getKeywords(mockUser, '1234567890', invalidCampaignId)).rejects.toThrow('Invalid campaign ID format');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,