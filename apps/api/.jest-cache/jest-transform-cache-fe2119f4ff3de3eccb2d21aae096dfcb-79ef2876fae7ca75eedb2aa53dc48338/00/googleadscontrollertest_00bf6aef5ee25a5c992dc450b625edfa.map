{"file":"C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\__tests__\\google-ads.controller.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\controllers\\__tests__\\google-ads.controller.test.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { GoogleAdsController } from '../google-ads.controller';\nimport { GoogleAdsService } from '../../services/google-ads.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { GetUser } from '../../decorators/get-user.decorator';\nimport { Response } from 'express';\n\n// Mock the GetUser decorator\njest.mock('../../decorators/get-user.decorator', () => ({\n  GetUser: () => (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    // Mock implementation that returns the user from the first parameter\n    return descriptor;\n  },\n}));\n\ndescribe('GoogleAdsController', () => {\n  let controller: GoogleAdsController;\n  let mockGoogleAdsService: jest.Mocked<GoogleAdsService>;\n\n  const mockUser = {\n    id: 'user-1',\n    email: 'test@example.com',\n    organizationId: 'org-1',\n  };\n\n  const mockIntegration = {\n    id: 'integration-1',\n    organizationId: 'org-1',\n    platform: 'google_ads',\n    isActive: true,\n    accessToken: 'encrypted-access-token',\n    refreshToken: 'encrypted-refresh-token',\n    expiresAt: new Date(Date.now() + 3600000),\n    settings: {\n      customerId: '123-456-7890',\n      developerToken: 'test-developer-token',\n    },\n  };\n\n  const mockAccounts = [\n    {\n      id: '1234567890',\n      name: 'Test Account 1',\n      currency: 'USD',\n      timezone: 'America/New_York',\n      status: 'ENABLED',\n      type: 'STANDARD',\n    },\n    {\n      id: '0987654321',\n      name: 'Test Account 2',\n      currency: 'EUR',\n      timezone: 'Europe/London',\n      status: 'ENABLED',\n      type: 'STANDARD',\n    },\n  ];\n\n  const mockCampaigns = [\n    {\n      id: '987654321',\n      name: 'Test Campaign 1',\n      status: 'ENABLED',\n      type: 'SEARCH',\n      budget_amount: 10000000,\n      budget_type: 'STANDARD',\n      impressions: 1000,\n      clicks: 50,\n      cost: 5000000,\n      conversions: 5,\n      customer_id: '1234567890',\n    },\n    {\n      id: '123456789',\n      name: 'Test Campaign 2',\n      status: 'PAUSED',\n      type: 'DISPLAY',\n      budget_amount: 20000000,\n      budget_type: 'ACCELERATED',\n      impressions: 2000,\n      clicks: 100,\n      cost: 10000000,\n      conversions: 10,\n      customer_id: '1234567890',\n    },\n  ];\n\n  const mockKeywords = [\n    {\n      id: 'keyword-1',\n      text: 'test keyword',\n      match_type: 'EXACT',\n      status: 'ENABLED',\n      quality_score: 8,\n      impressions: 500,\n      clicks: 25,\n      cost: 2500000,\n      conversions: 2,\n      campaign_id: '987654321',\n      customer_id: '1234567890',\n    },\n  ];\n\n  const mockSyncLogs = [\n    {\n      id: 'log-1',\n      status: 'success',\n      message: 'Sincronização concluída com sucesso',\n      startedAt: new Date('2024-01-01T10:00:00Z'),\n      completedAt: new Date('2024-01-01T10:05:00Z'),\n      stats: {\n        campaigns: 2,\n        keywords: 1,\n        metrics: 3,\n      },\n    },\n  ];\n\n  const mockIntegrationStatus = {\n    connected: true,\n    lastSync: new Date('2024-01-01T10:00:00Z'),\n    connectedAt: new Date('2024-01-01T09:00:00Z'),\n    expiresAt: new Date(Date.now() + 3600000),\n    status: 'active',\n  };\n\n  beforeEach(async () => {\n    // Create mock service\n    mockGoogleAdsService = {\n      generateAuthUrl: jest.fn(),\n      handleCallback: jest.fn(),\n      getAccounts: jest.fn(),\n      getCampaigns: jest.fn(),\n      getKeywords: jest.fn(),\n      syncData: jest.fn(),\n      getSyncLogs: jest.fn(),\n      getIntegrationStatus: jest.fn(),\n      disconnect: jest.fn(),\n    } as any;\n\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [GoogleAdsController],\n      providers: [\n        {\n          provide: GoogleAdsService,\n          useValue: mockGoogleAdsService,\n        },\n      ],\n    })\n      .overrideGuard(AuthGuard('jwt'))\n      .useValue({ canActivate: () => true })\n      .compile();\n\n    controller = module.get<GoogleAdsController>(GoogleAdsController);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('connect', () => {\n    it('should generate auth URL for Google Ads connection', async () => {\n      const mockAuthData = {\n        authUrl: 'https://accounts.google.com/oauth/authorize?client_id=test&redirect_uri=http://localhost:3000/callback',\n        state: 'random-state-string',\n      };\n      \n      mockGoogleAdsService.generateAuthUrl.mockResolvedValue(mockAuthData);\n\n      const redirectUri = 'http://localhost:3000/callback';\n      const result = await controller.connect(mockUser, { redirectUri });\n\n      expect(mockGoogleAdsService.generateAuthUrl).toHaveBeenCalledWith(mockUser, redirectUri);\n      expect(result).toEqual(mockAuthData);\n    });\n\n    it('should handle missing redirect URI', async () => {\n      await expect(controller.connect(mockUser, {})).rejects.toThrow();\n    });\n  });\n\n  describe('callback', () => {\n    it('should handle OAuth callback successfully', async () => {\n      mockGoogleAdsService.handleCallback.mockResolvedValue(mockIntegration as any);\n\n      const code = 'auth-code';\n      const state = 'valid-state';\n      const redirectUri = 'http://localhost:3000/callback';\n\n      const result = await controller.callback(mockUser, { code, state, redirectUri });\n\n      expect(mockGoogleAdsService.handleCallback).toHaveBeenCalledWith(\n        mockUser,\n        code,\n        state,\n        redirectUri\n      );\n      expect(result).toEqual({\n        success: true,\n        message: 'Google Ads conectado com sucesso',\n        integration: mockIntegration,\n      });\n    });\n\n    it('should handle callback with missing parameters', async () => {\n      await expect(controller.callback(mockUser, { code: 'test' })).rejects.toThrow();\n    });\n\n    it('should handle callback errors', async () => {\n      mockGoogleAdsService.handleCallback.mockRejectedValue(new Error('Invalid authorization code'));\n\n      await expect(\n        controller.callback(mockUser, {\n          code: 'invalid-code',\n          state: 'state',\n          redirectUri: 'redirect-uri',\n        })\n      ).rejects.toThrow('Invalid authorization code');\n    });\n  });\n\n  describe('getAccounts', () => {\n    it('should return Google Ads accounts', async () => {\n      mockGoogleAdsService.getAccounts.mockResolvedValue(mockAccounts);\n\n      const result = await controller.getAccounts(mockUser);\n\n      expect(mockGoogleAdsService.getAccounts).toHaveBeenCalledWith(mockUser);\n      expect(result).toEqual(mockAccounts);\n    });\n\n    it('should handle service errors', async () => {\n      mockGoogleAdsService.getAccounts.mockRejectedValue(new Error('Integration not found'));\n\n      await expect(controller.getAccounts(mockUser)).rejects.toThrow('Integration not found');\n    });\n  });\n\n  describe('getCampaigns', () => {\n    it('should return campaigns for a customer', async () => {\n      const customerId = '1234567890';\n      mockGoogleAdsService.getCampaigns.mockResolvedValue(mockCampaigns);\n\n      const result = await controller.getCampaigns(mockUser, customerId);\n\n      expect(mockGoogleAdsService.getCampaigns).toHaveBeenCalledWith(mockUser, customerId);\n      expect(result).toEqual(mockCampaigns);\n    });\n\n    it('should handle invalid customer ID', async () => {\n      mockGoogleAdsService.getCampaigns.mockRejectedValue(new Error('Invalid customer ID'));\n\n      await expect(controller.getCampaigns(mockUser, 'invalid-id')).rejects.toThrow(\n        'Invalid customer ID'\n      );\n    });\n  });\n\n  describe('getKeywords', () => {\n    it('should return keywords for a campaign', async () => {\n      const customerId = '1234567890';\n      const campaignId = '987654321';\n      mockGoogleAdsService.getKeywords.mockResolvedValue(mockKeywords);\n\n      const result = await controller.getKeywords(mockUser, customerId, campaignId);\n\n      expect(mockGoogleAdsService.getKeywords).toHaveBeenCalledWith(\n        mockUser,\n        customerId,\n        campaignId\n      );\n      expect(result).toEqual(mockKeywords);\n    });\n\n    it('should handle missing campaign ID', async () => {\n      mockGoogleAdsService.getKeywords.mockRejectedValue(new Error('Campaign not found'));\n\n      await expect(\n        controller.getKeywords(mockUser, '1234567890', 'invalid-campaign')\n      ).rejects.toThrow('Campaign not found');\n    });\n  });\n\n  describe('sync', () => {\n    it('should trigger data synchronization', async () => {\n      const mockSyncResult = {\n        success: true,\n        message: 'Sincronização concluída com sucesso',\n        stats: {\n          campaigns: 2,\n          keywords: 1,\n          metrics: 3,\n        },\n      };\n\n      mockGoogleAdsService.syncData.mockResolvedValue(mockSyncResult);\n\n      const result = await controller.sync(mockUser, { force: true });\n\n      expect(mockGoogleAdsService.syncData).toHaveBeenCalledWith(mockUser, { force: true });\n      expect(result).toEqual(mockSyncResult);\n    });\n\n    it('should handle sync without force parameter', async () => {\n      const mockSyncResult = {\n        success: true,\n        message: 'Sincronização concluída com sucesso',\n        stats: {\n          campaigns: 2,\n          keywords: 1,\n          metrics: 3,\n        },\n      };\n\n      mockGoogleAdsService.syncData.mockResolvedValue(mockSyncResult);\n\n      const result = await controller.sync(mockUser, {});\n\n      expect(mockGoogleAdsService.syncData).toHaveBeenCalledWith(mockUser, {});\n      expect(result).toEqual(mockSyncResult);\n    });\n\n    it('should handle sync errors', async () => {\n      mockGoogleAdsService.syncData.mockRejectedValue(new Error('Sync failed'));\n\n      await expect(controller.sync(mockUser, { force: true })).rejects.toThrow('Sync failed');\n    });\n  });\n\n  describe('getSyncLogs', () => {\n    it('should return sync logs', async () => {\n      mockGoogleAdsService.getSyncLogs.mockResolvedValue(mockSyncLogs);\n\n      const result = await controller.getSyncLogs(mockUser);\n\n      expect(mockGoogleAdsService.getSyncLogs).toHaveBeenCalledWith(mockUser);\n      expect(result).toEqual(mockSyncLogs);\n    });\n\n    it('should handle empty sync logs', async () => {\n      mockGoogleAdsService.getSyncLogs.mockResolvedValue([]);\n\n      const result = await controller.getSyncLogs(mockUser);\n\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('getStatus', () => {\n    it('should return integration status', async () => {\n      mockGoogleAdsService.getIntegrationStatus.mockResolvedValue(mockIntegrationStatus);\n\n      const result = await controller.getStatus(mockUser);\n\n      expect(mockGoogleAdsService.getIntegrationStatus).toHaveBeenCalledWith(mockUser);\n      expect(result).toEqual(mockIntegrationStatus);\n    });\n\n    it('should handle disconnected status', async () => {\n      const disconnectedStatus = {\n        connected: false,\n        status: 'not_connected',\n      };\n      mockGoogleAdsService.getIntegrationStatus.mockResolvedValue(disconnectedStatus);\n\n      const result = await controller.getStatus(mockUser);\n\n      expect(result).toEqual(disconnectedStatus);\n    });\n  });\n\n  describe('disconnect', () => {\n    it('should disconnect Google Ads integration', async () => {\n      const mockDisconnectResult = {\n        success: true,\n        message: 'Google Ads desconectado com sucesso',\n      };\n\n      mockGoogleAdsService.disconnect.mockResolvedValue(mockDisconnectResult);\n\n      const result = await controller.disconnect(mockUser);\n\n      expect(mockGoogleAdsService.disconnect).toHaveBeenCalledWith(mockUser);\n      expect(result).toEqual(mockDisconnectResult);\n    });\n\n    it('should handle disconnect errors', async () => {\n      mockGoogleAdsService.disconnect.mockRejectedValue(new Error('Integration not found'));\n\n      await expect(controller.disconnect(mockUser)).rejects.toThrow('Integration not found');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle service unavailable errors', async () => {\n      mockGoogleAdsService.getAccounts.mockRejectedValue(\n        new Error('Google Ads API is temporarily unavailable')\n      );\n\n      await expect(controller.getAccounts(mockUser)).rejects.toThrow(\n        'Google Ads API is temporarily unavailable'\n      );\n    });\n\n    it('should handle authentication errors', async () => {\n      mockGoogleAdsService.getCampaigns.mockRejectedValue(\n        new Error('Authentication failed - token expired')\n      );\n\n      await expect(controller.getCampaigns(mockUser, '1234567890')).rejects.toThrow(\n        'Authentication failed - token expired'\n      );\n    });\n\n    it('should handle rate limiting errors', async () => {\n      mockGoogleAdsService.syncData.mockRejectedValue(\n        new Error('Rate limit exceeded - please try again later')\n      );\n\n      await expect(controller.sync(mockUser, { force: true })).rejects.toThrow(\n        'Rate limit exceeded - please try again later'\n      );\n    });\n  });\n\n  describe('Input Validation', () => {\n    it('should validate redirect URI format', async () => {\n      const invalidRedirectUri = 'not-a-valid-url';\n      \n      await expect(\n        controller.connect(mockUser, { redirectUri: invalidRedirectUri })\n      ).rejects.toThrow();\n    });\n\n    it('should validate customer ID format', async () => {\n      const invalidCustomerId = 'invalid-format';\n      mockGoogleAdsService.getCampaigns.mockRejectedValue(\n        new Error('Invalid customer ID format')\n      );\n\n      await expect(\n        controller.getCampaigns(mockUser, invalidCustomerId)\n      ).rejects.toThrow('Invalid customer ID format');\n    });\n\n    it('should validate campaign ID format', async () => {\n      const invalidCampaignId = 'invalid-format';\n      mockGoogleAdsService.getKeywords.mockRejectedValue(\n        new Error('Invalid campaign ID format')\n      );\n\n      await expect(\n        controller.getKeywords(mockUser, '1234567890', invalidCampaignId)\n      ).rejects.toThrow('Invalid campaign ID format');\n    });\n  });\n});"],"version":3}