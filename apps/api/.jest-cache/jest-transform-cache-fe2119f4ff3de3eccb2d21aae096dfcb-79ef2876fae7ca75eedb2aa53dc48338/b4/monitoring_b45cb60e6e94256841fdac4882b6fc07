5643e8c336ffa02db4f213cf2e9e19de
/* istanbul ignore next */
function cov_51at1kejo() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\monitoring.ts";
  var hash = "7dd901df03acf09d7e823e261e8afb2bbbdccce9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\monitoring.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 42,
          column: 7
        }
      },
      "1": {
        start: {
          line: 6,
          column: 29
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "2": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "3": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "4": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 28
        }
      },
      "5": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 55
        }
      },
      "6": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 57
        }
      },
      "7": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 45
        }
      },
      "8": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "9": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 52
        }
      },
      "10": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 54
        }
      },
      "11": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 45
        }
      },
      "12": {
        start: {
          line: 40,
          column: 27
        },
        end: {
          line: 40,
          column: 72
        }
      },
      "13": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 57
        }
      },
      "14": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 63,
          column: 7
        }
      },
      "15": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "16": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "17": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 28
        }
      },
      "18": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "19": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 61,
          column: 15
        }
      },
      "20": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 71,
          column: 7
        }
      },
      "21": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "22": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 106,
          column: 7
        }
      },
      "23": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "24": {
        start: {
          line: 86,
          column: 38
        },
        end: {
          line: 86,
          column: 51
        }
      },
      "25": {
        start: {
          line: 87,
          column: 34
        },
        end: {
          line: 87,
          column: 72
        }
      },
      "26": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "27": {
        start: {
          line: 89,
          column: 42
        },
        end: {
          line: 89,
          column: 86
        }
      },
      "28": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 92,
          column: 45
        }
      },
      "29": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "30": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 70
        }
      },
      "31": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "32": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 141,
          column: 7
        }
      },
      "33": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "34": {
        start: {
          line: 121,
          column: 38
        },
        end: {
          line: 121,
          column: 51
        }
      },
      "35": {
        start: {
          line: 122,
          column: 39
        },
        end: {
          line: 122,
          column: 82
        }
      },
      "36": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "37": {
        start: {
          line: 124,
          column: 42
        },
        end: {
          line: 124,
          column: 96
        }
      },
      "38": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 127,
          column: 45
        }
      },
      "39": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "40": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 75
        }
      },
      "41": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "42": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 176,
          column: 7
        }
      },
      "43": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "44": {
        start: {
          line: 156,
          column: 38
        },
        end: {
          line: 156,
          column: 51
        }
      },
      "45": {
        start: {
          line: 157,
          column: 36
        },
        end: {
          line: 157,
          column: 76
        }
      },
      "46": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "47": {
        start: {
          line: 159,
          column: 42
        },
        end: {
          line: 159,
          column: 90
        }
      },
      "48": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 162,
          column: 45
        }
      },
      "49": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "50": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 72
        }
      },
      "51": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 174,
          column: 15
        }
      },
      "52": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 263,
          column: 7
        }
      },
      "53": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "54": {
        start: {
          line: 189,
          column: 31
        },
        end: {
          line: 189,
          column: 44
        }
      },
      "55": {
        start: {
          line: 190,
          column: 34
        },
        end: {
          line: 190,
          column: 61
        }
      },
      "56": {
        start: {
          line: 191,
          column: 39
        },
        end: {
          line: 191,
          column: 71
        }
      },
      "57": {
        start: {
          line: 192,
          column: 36
        },
        end: {
          line: 192,
          column: 65
        }
      },
      "58": {
        start: {
          line: 193,
          column: 33
        },
        end: {
          line: 193,
          column: 58
        }
      },
      "59": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "60": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 201,
          column: 19
        }
      },
      "61": {
        start: {
          line: 204,
          column: 35
        },
        end: {
          line: 204,
          column: 37
        }
      },
      "62": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 217,
          column: 13
        }
      },
      "63": {
        start: {
          line: 207,
          column: 31
        },
        end: {
          line: 207,
          column: 47
        }
      },
      "64": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 93
        }
      },
      "65": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 78
        }
      },
      "66": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 87
        }
      },
      "67": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 99
        }
      },
      "68": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 81
        }
      },
      "69": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 93
        }
      },
      "70": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 93
        }
      },
      "71": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 78
        }
      },
      "72": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 89
        }
      },
      "73": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "74": {
        start: {
          line: 220,
          column: 31
        },
        end: {
          line: 220,
          column: 52
        }
      },
      "75": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 94
        }
      },
      "76": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 77
        }
      },
      "77": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 89
        }
      },
      "78": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 94
        }
      },
      "79": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 80
        }
      },
      "80": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 106
        }
      },
      "81": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 109
        }
      },
      "82": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 77
        }
      },
      "83": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 105
        }
      },
      "84": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 95
        }
      },
      "85": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 79
        }
      },
      "86": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 90
        }
      },
      "87": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 100
        }
      },
      "88": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 85
        }
      },
      "89": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 99
        }
      },
      "90": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 103
        }
      },
      "91": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 83
        }
      },
      "92": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 96
        }
      },
      "93": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "94": {
        start: {
          line: 242,
          column: 31
        },
        end: {
          line: 242,
          column: 49
        }
      },
      "95": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 86
        }
      },
      "96": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 73
        }
      },
      "97": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 85
        }
      },
      "98": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 96
        }
      },
      "99": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 80
        }
      },
      "100": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 89
        }
      },
      "101": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 94
        }
      },
      "102": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 80
        }
      },
      "103": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 89
        }
      },
      "104": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 255,
          column: 40
        }
      },
      "105": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 63
        }
      },
      "106": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 261,
          column: 15
        }
      },
      "107": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 281,
          column: 7
        }
      },
      "108": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "109": {
        start: {
          line: 269,
          column: 26
        },
        end: {
          line: 269,
          column: 51
        }
      },
      "110": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 273,
          column: 15
        }
      },
      "111": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 69
        }
      },
      "112": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 279,
          column: 15
        }
      },
      "113": {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 300,
          column: 7
        }
      },
      "114": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "115": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 33
        }
      },
      "116": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 292,
          column: 15
        }
      },
      "117": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 63
        }
      },
      "118": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 298,
          column: 15
        }
      },
      "119": {
        start: {
          line: 304,
          column: 4
        },
        end: {
          line: 306,
          column: 5
        }
      },
      "120": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 18
        }
      },
      "121": {
        start: {
          line: 307,
          column: 19
        },
        end: {
          line: 307,
          column: 46
        }
      },
      "122": {
        start: {
          line: 308,
          column: 17
        },
        end: {
          line: 308,
          column: 19
        }
      },
      "123": {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 331,
          column: 5
        }
      },
      "124": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 78
        }
      },
      "125": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 63
        }
      },
      "126": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 72
        }
      },
      "127": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 84
        }
      },
      "128": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 66
        }
      },
      "129": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 78
        }
      },
      "130": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 18
        }
      },
      "131": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 74
        }
      },
      "132": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 67
        }
      },
      "133": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 79
        }
      },
      "134": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 88
        }
      },
      "135": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 64
        }
      },
      "136": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 92
        }
      },
      "137": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 18
        }
      },
      "138": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 75
        }
      },
      "139": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 68
        }
      },
      "140": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 80
        }
      },
      "141": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 18
        }
      },
      "142": {
        start: {
          line: 332,
          column: 4
        },
        end: {
          line: 332,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "monitoringRoutes",
        decl: {
          start: {
            line: 3,
            column: 30
          },
          end: {
            line: 3,
            column: 46
          }
        },
        loc: {
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 301,
            column: 1
          }
        },
        line: 3
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 5,
            column: 27
          },
          end: {
            line: 5,
            column: 28
          }
        },
        loc: {
          start: {
            line: 5,
            column: 53
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 5
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 58
          },
          end: {
            line: 20,
            column: 59
          }
        },
        loc: {
          start: {
            line: 20,
            column: 70
          },
          end: {
            line: 24,
            column: 13
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 26
          },
          end: {
            line: 44,
            column: 27
          }
        },
        loc: {
          start: {
            line: 44,
            column: 52
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 58
          },
          end: {
            line: 47,
            column: 59
          }
        },
        loc: {
          start: {
            line: 47,
            column: 70
          },
          end: {
            line: 50,
            column: 13
          }
        },
        line: 47
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 65,
            column: 25
          },
          end: {
            line: 65,
            column: 26
          }
        },
        loc: {
          start: {
            line: 65,
            column: 51
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 65
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 84,
            column: 7
          },
          end: {
            line: 84,
            column: 8
          }
        },
        loc: {
          start: {
            line: 84,
            column: 33
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 84
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 119,
            column: 7
          },
          end: {
            line: 119,
            column: 8
          }
        },
        loc: {
          start: {
            line: 119,
            column: 33
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 119
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 154,
            column: 7
          },
          end: {
            line: 154,
            column: 8
          }
        },
        loc: {
          start: {
            line: 154,
            column: 33
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 154
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 187,
            column: 7
          },
          end: {
            line: 187,
            column: 8
          }
        },
        loc: {
          start: {
            line: 187,
            column: 33
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 187
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 267,
            column: 7
          },
          end: {
            line: 267,
            column: 8
          }
        },
        loc: {
          start: {
            line: 267,
            column: 33
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 267
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 285,
            column: 7
          },
          end: {
            line: 285,
            column: 8
          }
        },
        loc: {
          start: {
            line: 285,
            column: 33
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 285
      },
      "12": {
        name: "convertToPrometheus",
        decl: {
          start: {
            line: 303,
            column: 9
          },
          end: {
            line: 303,
            column: 28
          }
        },
        loc: {
          start: {
            line: 303,
            column: 44
          },
          end: {
            line: 333,
            column: 1
          }
        },
        line: 303
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 21
          },
          end: {
            line: 10,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 21
          },
          end: {
            line: 10,
            column: 44
          }
        }, {
          start: {
            line: 10,
            column: 48
          },
          end: {
            line: 10,
            column: 55
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 25
          },
          end: {
            line: 11,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 25
          },
          end: {
            line: 11,
            column: 45
          }
        }, {
          start: {
            line: 11,
            column: 49
          },
          end: {
            line: 11,
            column: 62
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 38
          },
          end: {
            line: 15,
            column: 47
          }
        }, {
          start: {
            line: 15,
            column: 50
          },
          end: {
            line: 15,
            column: 61
          }
        }],
        line: 15
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 27
          },
          end: {
            line: 40,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 63
          },
          end: {
            line: 40,
            column: 66
          }
        }, {
          start: {
            line: 40,
            column: 69
          },
          end: {
            line: 40,
            column: 72
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 87,
            column: 59
          },
          end: {
            line: 87,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 59
          },
          end: {
            line: 87,
            column: 64
          }
        }, {
          start: {
            line: 87,
            column: 68
          },
          end: {
            line: 87,
            column: 71
          }
        }],
        line: 87
      },
      "5": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "6": {
        loc: {
          start: {
            line: 122,
            column: 69
          },
          end: {
            line: 122,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 69
          },
          end: {
            line: 122,
            column: 74
          }
        }, {
          start: {
            line: 122,
            column: 78
          },
          end: {
            line: 122,
            column: 81
          }
        }],
        line: 122
      },
      "7": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "8": {
        loc: {
          start: {
            line: 157,
            column: 63
          },
          end: {
            line: 157,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 63
          },
          end: {
            line: 157,
            column: 68
          }
        }, {
          start: {
            line: 157,
            column: 72
          },
          end: {
            line: 157,
            column: 75
          }
        }],
        line: 157
      },
      "9": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "10": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "11": {
        loc: {
          start: {
            line: 196,
            column: 28
          },
          end: {
            line: 196,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 28
          },
          end: {
            line: 196,
            column: 44
          }
        }, {
          start: {
            line: 196,
            column: 48
          },
          end: {
            line: 196,
            column: 52
          }
        }],
        line: 196
      },
      "12": {
        loc: {
          start: {
            line: 197,
            column: 33
          },
          end: {
            line: 197,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 33
          },
          end: {
            line: 197,
            column: 54
          }
        }, {
          start: {
            line: 197,
            column: 58
          },
          end: {
            line: 197,
            column: 62
          }
        }],
        line: 197
      },
      "13": {
        loc: {
          start: {
            line: 198,
            column: 30
          },
          end: {
            line: 198,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 30
          },
          end: {
            line: 198,
            column: 48
          }
        }, {
          start: {
            line: 198,
            column: 52
          },
          end: {
            line: 198,
            column: 56
          }
        }],
        line: 198
      },
      "14": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "15": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "16": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "17": {
        loc: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "18": {
        loc: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 317,
            column: 18
          }
        }, {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 325,
            column: 18
          }
        }, {
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 330,
            column: 18
          }
        }],
        line: 309
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\monitoring.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\monitoring.ts"],
      sourcesContent: ["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport monitor from '../lib/monitoring';\nimport { monitorDatabaseQuery } from '../lib/sentry';\n\ninterface MonitoringQuery {\n  limit?: number;\n  startDate?: string;\n  endDate?: string;\n  format?: 'json' | 'prometheus';\n}\n\nexport default async function monitoringRoutes(fastify: FastifyInstance) {\n  // Health check endpoint\n  fastify.get('/health', async (request: FastifyRequest, reply: FastifyReply) => {\n    const healthStatus = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      version: process.env.APP_VERSION || '1.0.0',\n      environment: process.env.NODE_ENV || 'development',\n      services: {\n        database: 'unknown',\n        redis: 'unknown',\n        monitoring: monitor ? 'healthy' : 'unhealthy',\n      },\n    };\n\n    try {\n      // Check database connection\n      await monitorDatabaseQuery('health_check_db', async () => {\n        // This would be a simple query like SELECT 1\n        // await prisma.$queryRaw`SELECT 1`;\n        return true;\n      });\n      healthStatus.services.database = 'healthy';\n    } catch (error) {\n      healthStatus.services.database = 'unhealthy';\n      healthStatus.status = 'degraded';\n    }\n\n    try {\n      // Check Redis connection\n      // await redis.ping();\n      healthStatus.services.redis = 'healthy';\n    } catch (error) {\n      healthStatus.services.redis = 'unhealthy';\n      healthStatus.status = 'degraded';\n    }\n\n    const statusCode = healthStatus.status === 'healthy' ? 200 : 503;\n    return reply.code(statusCode).send(healthStatus);\n  });\n\n  // Readiness check (for Kubernetes)\n  fastify.get('/ready', async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      // Check if all critical services are ready\n      await monitorDatabaseQuery('readiness_check', async () => {\n        // Check database connection\n        return true;\n      });\n\n      return reply.code(200).send({\n        status: 'ready',\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      return reply.code(503).send({\n        status: 'not ready',\n        timestamp: new Date().toISOString(),\n        error: 'Database not ready',\n      });\n    }\n  });\n\n  // Liveness check (for Kubernetes)\n  fastify.get('/live', async (request: FastifyRequest, reply: FastifyReply) => {\n    return reply.code(200).send({\n      status: 'alive',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n    });\n  });\n\n  // System metrics endpoint\n  fastify.get('/metrics/system', {\n    preHandler: [fastify.authenticate], // Require authentication\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          limit: { type: 'number', minimum: 1, maximum: 1000, default: 100 },\n          format: { type: 'string', enum: ['json', 'prometheus'], default: 'json' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { limit, format } = request.query as MonitoringQuery;\n      const systemMetrics = monitor.getSystemMetrics(limit || 100);\n\n      if (format === 'prometheus') {\n        const prometheusMetrics = convertToPrometheus(systemMetrics, 'system');\n        return reply\n          .header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')\n          .send(prometheusMetrics);\n      }\n\n      return reply.code(200).send({\n        metrics: systemMetrics,\n        count: systemMetrics.length,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get system metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get system metrics',\n      });\n    }\n  });\n\n  // Application metrics endpoint\n  fastify.get('/metrics/application', {\n    preHandler: [fastify.authenticate],\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          limit: { type: 'number', minimum: 1, maximum: 1000, default: 100 },\n          format: { type: 'string', enum: ['json', 'prometheus'], default: 'json' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { limit, format } = request.query as MonitoringQuery;\n      const applicationMetrics = monitor.getApplicationMetrics(limit || 100);\n\n      if (format === 'prometheus') {\n        const prometheusMetrics = convertToPrometheus(applicationMetrics, 'application');\n        return reply\n          .header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')\n          .send(prometheusMetrics);\n      }\n\n      return reply.code(200).send({\n        metrics: applicationMetrics,\n        count: applicationMetrics.length,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get application metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get application metrics',\n      });\n    }\n  });\n\n  // Business metrics endpoint\n  fastify.get('/metrics/business', {\n    preHandler: [fastify.authenticate],\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          limit: { type: 'number', minimum: 1, maximum: 1000, default: 100 },\n          format: { type: 'string', enum: ['json', 'prometheus'], default: 'json' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { limit, format } = request.query as MonitoringQuery;\n      const businessMetrics = monitor.getBusinessMetrics(limit || 100);\n\n      if (format === 'prometheus') {\n        const prometheusMetrics = convertToPrometheus(businessMetrics, 'business');\n        return reply\n          .header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')\n          .send(prometheusMetrics);\n      }\n\n      return reply.code(200).send({\n        metrics: businessMetrics,\n        count: businessMetrics.length,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get business metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get business metrics',\n      });\n    }\n  });\n\n  // Combined metrics endpoint (Prometheus format)\n  fastify.get('/metrics', {\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          format: { type: 'string', enum: ['json', 'prometheus'], default: 'prometheus' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { format } = request.query as MonitoringQuery;\n      \n      const systemMetrics = monitor.getSystemMetrics(1); // Get latest\n      const applicationMetrics = monitor.getApplicationMetrics(1);\n      const businessMetrics = monitor.getBusinessMetrics(1);\n      const currentStats = monitor.getCurrentStats();\n\n      if (format === 'json') {\n        return reply.code(200).send({\n          system: systemMetrics[0] || null,\n          application: applicationMetrics[0] || null,\n          business: businessMetrics[0] || null,\n          stats: currentStats,\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      // Prometheus format\n      let prometheusOutput = '';\n      \n      // System metrics\n      if (systemMetrics[0]) {\n        const latest = systemMetrics[0];\n        prometheusOutput += `# HELP utmify_cpu_usage_percent CPU usage percentage\\n`;\n        prometheusOutput += `# TYPE utmify_cpu_usage_percent gauge\\n`;\n        prometheusOutput += `utmify_cpu_usage_percent ${latest.cpu.usage}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_memory_usage_percent Memory usage percentage\\n`;\n        prometheusOutput += `# TYPE utmify_memory_usage_percent gauge\\n`;\n        prometheusOutput += `utmify_memory_usage_percent ${latest.memory.usage}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_memory_used_bytes Memory used in bytes\\n`;\n        prometheusOutput += `# TYPE utmify_memory_used_bytes gauge\\n`;\n        prometheusOutput += `utmify_memory_used_bytes ${latest.memory.used}\\n\\n`;\n      }\n\n      // Application metrics\n      if (applicationMetrics[0]) {\n        const latest = applicationMetrics[0];\n        prometheusOutput += `# HELP utmify_requests_total Total number of requests\\n`;\n        prometheusOutput += `# TYPE utmify_requests_total counter\\n`;\n        prometheusOutput += `utmify_requests_total ${latest.requests.total}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_requests_per_second Requests per second\\n`;\n        prometheusOutput += `# TYPE utmify_requests_per_second gauge\\n`;\n        prometheusOutput += `utmify_requests_per_second ${latest.requests.requestsPerSecond}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_response_time_ms Average response time in milliseconds\\n`;\n        prometheusOutput += `# TYPE utmify_response_time_ms gauge\\n`;\n        prometheusOutput += `utmify_response_time_ms ${latest.requests.averageResponseTime}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_error_rate_percent Error rate percentage\\n`;\n        prometheusOutput += `# TYPE utmify_error_rate_percent gauge\\n`;\n        prometheusOutput += `utmify_error_rate_percent ${latest.errors.rate}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_database_queries_total Total database queries\\n`;\n        prometheusOutput += `# TYPE utmify_database_queries_total counter\\n`;\n        prometheusOutput += `utmify_database_queries_total ${latest.database.queries}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_cache_hit_rate_percent Cache hit rate percentage\\n`;\n        prometheusOutput += `# TYPE utmify_cache_hit_rate_percent gauge\\n`;\n        prometheusOutput += `utmify_cache_hit_rate_percent ${latest.cache.hitRate}\\n\\n`;\n      }\n\n      // Business metrics\n      if (businessMetrics[0]) {\n        const latest = businessMetrics[0];\n        prometheusOutput += `# HELP utmify_active_users Active users count\\n`;\n        prometheusOutput += `# TYPE utmify_active_users gauge\\n`;\n        prometheusOutput += `utmify_active_users ${latest.users.active}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_utm_created_total Total UTM links created\\n`;\n        prometheusOutput += `# TYPE utmify_utm_created_total counter\\n`;\n        prometheusOutput += `utmify_utm_created_total ${latest.utm.created}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_utm_clicked_total Total UTM link clicks\\n`;\n        prometheusOutput += `# TYPE utmify_utm_clicked_total counter\\n`;\n        prometheusOutput += `utmify_utm_clicked_total ${latest.utm.clicked}\\n\\n`;\n      }\n\n      return reply\n        .header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')\n        .send(prometheusOutput);\n    } catch (error) {\n      fastify.log.error('Failed to get metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get metrics',\n      });\n    }\n  });\n\n  // Current stats endpoint\n  fastify.get('/stats', {\n    preHandler: [fastify.authenticate],\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const stats = monitor.getCurrentStats();\n      return reply.code(200).send({\n        stats,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get current stats:', error);\n      return reply.code(500).send({\n        error: 'Failed to get current stats',\n      });\n    }\n  });\n\n  // Reset stats endpoint\n  fastify.post('/stats/reset', {\n    preHandler: [fastify.authenticate],\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      monitor.resetStats();\n      return reply.code(200).send({\n        success: true,\n        message: 'Stats reset successfully',\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to reset stats:', error);\n      return reply.code(500).send({\n        error: 'Failed to reset stats',\n      });\n    }\n  });\n}\n\n// Helper function to convert metrics to Prometheus format\nfunction convertToPrometheus(metrics: any[], type: string): string {\n  if (!metrics.length) {\n    return '';\n  }\n\n  const latest = metrics[metrics.length - 1];\n  let output = '';\n\n  switch (type) {\n    case 'system':\n      output += `# HELP utmify_system_cpu_usage CPU usage percentage\\n`;\n      output += `# TYPE utmify_system_cpu_usage gauge\\n`;\n      output += `utmify_system_cpu_usage ${latest.cpu.usage}\\n\\n`;\n      \n      output += `# HELP utmify_system_memory_usage Memory usage percentage\\n`;\n      output += `# TYPE utmify_system_memory_usage gauge\\n`;\n      output += `utmify_system_memory_usage ${latest.memory.usage}\\n\\n`;\n      break;\n      \n    case 'application':\n      output += `# HELP utmify_app_requests_total Total requests\\n`;\n      output += `# TYPE utmify_app_requests_total counter\\n`;\n      output += `utmify_app_requests_total ${latest.requests.total}\\n\\n`;\n      \n      output += `# HELP utmify_app_response_time Response time in milliseconds\\n`;\n      output += `# TYPE utmify_app_response_time gauge\\n`;\n      output += `utmify_app_response_time ${latest.requests.averageResponseTime}\\n\\n`;\n      break;\n      \n    case 'business':\n      output += `# HELP utmify_business_active_users Active users\\n`;\n      output += `# TYPE utmify_business_active_users gauge\\n`;\n      output += `utmify_business_active_users ${latest.users.active}\\n\\n`;\n      break;\n  }\n\n  return output;\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7dd901df03acf09d7e823e261e8afb2bbbdccce9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_51at1kejo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_51at1kejo();
import monitor from '../lib/monitoring';
import { monitorDatabaseQuery } from '../lib/sentry';
export default async function monitoringRoutes(fastify) {
  /* istanbul ignore next */
  cov_51at1kejo().f[0]++;
  cov_51at1kejo().s[0]++;
  // Health check endpoint
  fastify.get('/health', async (request, reply) => {
    /* istanbul ignore next */
    cov_51at1kejo().f[1]++;
    const healthStatus =
    /* istanbul ignore next */
    (cov_51at1kejo().s[1]++, {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      version:
      /* istanbul ignore next */
      (cov_51at1kejo().b[0][0]++, process.env.APP_VERSION) ||
      /* istanbul ignore next */
      (cov_51at1kejo().b[0][1]++, '1.0.0'),
      environment:
      /* istanbul ignore next */
      (cov_51at1kejo().b[1][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_51at1kejo().b[1][1]++, 'development'),
      services: {
        database: 'unknown',
        redis: 'unknown',
        monitoring: monitor ?
        /* istanbul ignore next */
        (cov_51at1kejo().b[2][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_51at1kejo().b[2][1]++, 'unhealthy')
      }
    });
    /* istanbul ignore next */
    cov_51at1kejo().s[2]++;
    try {
      /* istanbul ignore next */
      cov_51at1kejo().s[3]++;
      // Check database connection
      await monitorDatabaseQuery('health_check_db', async () => {
        /* istanbul ignore next */
        cov_51at1kejo().f[2]++;
        cov_51at1kejo().s[4]++;
        // This would be a simple query like SELECT 1
        // await prisma.$queryRaw`SELECT 1`;
        return true;
      });
      /* istanbul ignore next */
      cov_51at1kejo().s[5]++;
      healthStatus.services.database = 'healthy';
    } catch (error) {
      /* istanbul ignore next */
      cov_51at1kejo().s[6]++;
      healthStatus.services.database = 'unhealthy';
      /* istanbul ignore next */
      cov_51at1kejo().s[7]++;
      healthStatus.status = 'degraded';
    }
    /* istanbul ignore next */
    cov_51at1kejo().s[8]++;
    try {
      /* istanbul ignore next */
      cov_51at1kejo().s[9]++;
      // Check Redis connection
      // await redis.ping();
      healthStatus.services.redis = 'healthy';
    } catch (error) {
      /* istanbul ignore next */
      cov_51at1kejo().s[10]++;
      healthStatus.services.redis = 'unhealthy';
      /* istanbul ignore next */
      cov_51at1kejo().s[11]++;
      healthStatus.status = 'degraded';
    }
    const statusCode =
    /* istanbul ignore next */
    (cov_51at1kejo().s[12]++, healthStatus.status === 'healthy' ?
    /* istanbul ignore next */
    (cov_51at1kejo().b[3][0]++, 200) :
    /* istanbul ignore next */
    (cov_51at1kejo().b[3][1]++, 503));
    /* istanbul ignore next */
    cov_51at1kejo().s[13]++;
    return reply.code(statusCode).send(healthStatus);
  });
  // Readiness check (for Kubernetes)
  /* istanbul ignore next */
  cov_51at1kejo().s[14]++;
  fastify.get('/ready', async (request, reply) => {
    /* istanbul ignore next */
    cov_51at1kejo().f[3]++;
    cov_51at1kejo().s[15]++;
    try {
      /* istanbul ignore next */
      cov_51at1kejo().s[16]++;
      // Check if all critical services are ready
      await monitorDatabaseQuery('readiness_check', async () => {
        /* istanbul ignore next */
        cov_51at1kejo().f[4]++;
        cov_51at1kejo().s[17]++;
        // Check database connection
        return true;
      });
      /* istanbul ignore next */
      cov_51at1kejo().s[18]++;
      return reply.code(200).send({
        status: 'ready',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_51at1kejo().s[19]++;
      return reply.code(503).send({
        status: 'not ready',
        timestamp: new Date().toISOString(),
        error: 'Database not ready'
      });
    }
  });
  // Liveness check (for Kubernetes)
  /* istanbul ignore next */
  cov_51at1kejo().s[20]++;
  fastify.get('/live', async (request, reply) => {
    /* istanbul ignore next */
    cov_51at1kejo().f[5]++;
    cov_51at1kejo().s[21]++;
    return reply.code(200).send({
      status: 'alive',
      timestamp: new Date().toISOString(),
      uptime: process.uptime()
    });
  });
  // System metrics endpoint
  /* istanbul ignore next */
  cov_51at1kejo().s[22]++;
  fastify.get('/metrics/system', {
    preHandler: [fastify.authenticate],
    // Require authentication
    schema: {
      querystring: {
        type: 'object',
        properties: {
          limit: {
            type: 'number',
            minimum: 1,
            maximum: 1000,
            default: 100
          },
          format: {
            type: 'string',
            enum: ['json', 'prometheus'],
            default: 'json'
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_51at1kejo().f[6]++;
    cov_51at1kejo().s[23]++;
    try {
      const {
        limit,
        format
      } =
      /* istanbul ignore next */
      (cov_51at1kejo().s[24]++, request.query);
      const systemMetrics =
      /* istanbul ignore next */
      (cov_51at1kejo().s[25]++, monitor.getSystemMetrics(
      /* istanbul ignore next */
      (cov_51at1kejo().b[4][0]++, limit) ||
      /* istanbul ignore next */
      (cov_51at1kejo().b[4][1]++, 100)));
      /* istanbul ignore next */
      cov_51at1kejo().s[26]++;
      if (format === 'prometheus') {
        /* istanbul ignore next */
        cov_51at1kejo().b[5][0]++;
        const prometheusMetrics =
        /* istanbul ignore next */
        (cov_51at1kejo().s[27]++, convertToPrometheus(systemMetrics, 'system'));
        /* istanbul ignore next */
        cov_51at1kejo().s[28]++;
        return reply.header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8').send(prometheusMetrics);
      } else
      /* istanbul ignore next */
      {
        cov_51at1kejo().b[5][1]++;
      }
      cov_51at1kejo().s[29]++;
      return reply.code(200).send({
        metrics: systemMetrics,
        count: systemMetrics.length,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_51at1kejo().s[30]++;
      fastify.log.error('Failed to get system metrics:', error);
      /* istanbul ignore next */
      cov_51at1kejo().s[31]++;
      return reply.code(500).send({
        error: 'Failed to get system metrics'
      });
    }
  });
  // Application metrics endpoint
  /* istanbul ignore next */
  cov_51at1kejo().s[32]++;
  fastify.get('/metrics/application', {
    preHandler: [fastify.authenticate],
    schema: {
      querystring: {
        type: 'object',
        properties: {
          limit: {
            type: 'number',
            minimum: 1,
            maximum: 1000,
            default: 100
          },
          format: {
            type: 'string',
            enum: ['json', 'prometheus'],
            default: 'json'
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_51at1kejo().f[7]++;
    cov_51at1kejo().s[33]++;
    try {
      const {
        limit,
        format
      } =
      /* istanbul ignore next */
      (cov_51at1kejo().s[34]++, request.query);
      const applicationMetrics =
      /* istanbul ignore next */
      (cov_51at1kejo().s[35]++, monitor.getApplicationMetrics(
      /* istanbul ignore next */
      (cov_51at1kejo().b[6][0]++, limit) ||
      /* istanbul ignore next */
      (cov_51at1kejo().b[6][1]++, 100)));
      /* istanbul ignore next */
      cov_51at1kejo().s[36]++;
      if (format === 'prometheus') {
        /* istanbul ignore next */
        cov_51at1kejo().b[7][0]++;
        const prometheusMetrics =
        /* istanbul ignore next */
        (cov_51at1kejo().s[37]++, convertToPrometheus(applicationMetrics, 'application'));
        /* istanbul ignore next */
        cov_51at1kejo().s[38]++;
        return reply.header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8').send(prometheusMetrics);
      } else
      /* istanbul ignore next */
      {
        cov_51at1kejo().b[7][1]++;
      }
      cov_51at1kejo().s[39]++;
      return reply.code(200).send({
        metrics: applicationMetrics,
        count: applicationMetrics.length,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_51at1kejo().s[40]++;
      fastify.log.error('Failed to get application metrics:', error);
      /* istanbul ignore next */
      cov_51at1kejo().s[41]++;
      return reply.code(500).send({
        error: 'Failed to get application metrics'
      });
    }
  });
  // Business metrics endpoint
  /* istanbul ignore next */
  cov_51at1kejo().s[42]++;
  fastify.get('/metrics/business', {
    preHandler: [fastify.authenticate],
    schema: {
      querystring: {
        type: 'object',
        properties: {
          limit: {
            type: 'number',
            minimum: 1,
            maximum: 1000,
            default: 100
          },
          format: {
            type: 'string',
            enum: ['json', 'prometheus'],
            default: 'json'
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_51at1kejo().f[8]++;
    cov_51at1kejo().s[43]++;
    try {
      const {
        limit,
        format
      } =
      /* istanbul ignore next */
      (cov_51at1kejo().s[44]++, request.query);
      const businessMetrics =
      /* istanbul ignore next */
      (cov_51at1kejo().s[45]++, monitor.getBusinessMetrics(
      /* istanbul ignore next */
      (cov_51at1kejo().b[8][0]++, limit) ||
      /* istanbul ignore next */
      (cov_51at1kejo().b[8][1]++, 100)));
      /* istanbul ignore next */
      cov_51at1kejo().s[46]++;
      if (format === 'prometheus') {
        /* istanbul ignore next */
        cov_51at1kejo().b[9][0]++;
        const prometheusMetrics =
        /* istanbul ignore next */
        (cov_51at1kejo().s[47]++, convertToPrometheus(businessMetrics, 'business'));
        /* istanbul ignore next */
        cov_51at1kejo().s[48]++;
        return reply.header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8').send(prometheusMetrics);
      } else
      /* istanbul ignore next */
      {
        cov_51at1kejo().b[9][1]++;
      }
      cov_51at1kejo().s[49]++;
      return reply.code(200).send({
        metrics: businessMetrics,
        count: businessMetrics.length,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_51at1kejo().s[50]++;
      fastify.log.error('Failed to get business metrics:', error);
      /* istanbul ignore next */
      cov_51at1kejo().s[51]++;
      return reply.code(500).send({
        error: 'Failed to get business metrics'
      });
    }
  });
  // Combined metrics endpoint (Prometheus format)
  /* istanbul ignore next */
  cov_51at1kejo().s[52]++;
  fastify.get('/metrics', {
    schema: {
      querystring: {
        type: 'object',
        properties: {
          format: {
            type: 'string',
            enum: ['json', 'prometheus'],
            default: 'prometheus'
          }
        }
      }
    }
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_51at1kejo().f[9]++;
    cov_51at1kejo().s[53]++;
    try {
      const {
        format
      } =
      /* istanbul ignore next */
      (cov_51at1kejo().s[54]++, request.query);
      const systemMetrics =
      /* istanbul ignore next */
      (cov_51at1kejo().s[55]++, monitor.getSystemMetrics(1)); // Get latest
      const applicationMetrics =
      /* istanbul ignore next */
      (cov_51at1kejo().s[56]++, monitor.getApplicationMetrics(1));
      const businessMetrics =
      /* istanbul ignore next */
      (cov_51at1kejo().s[57]++, monitor.getBusinessMetrics(1));
      const currentStats =
      /* istanbul ignore next */
      (cov_51at1kejo().s[58]++, monitor.getCurrentStats());
      /* istanbul ignore next */
      cov_51at1kejo().s[59]++;
      if (format === 'json') {
        /* istanbul ignore next */
        cov_51at1kejo().b[10][0]++;
        cov_51at1kejo().s[60]++;
        return reply.code(200).send({
          system:
          /* istanbul ignore next */
          (cov_51at1kejo().b[11][0]++, systemMetrics[0]) ||
          /* istanbul ignore next */
          (cov_51at1kejo().b[11][1]++, null),
          application:
          /* istanbul ignore next */
          (cov_51at1kejo().b[12][0]++, applicationMetrics[0]) ||
          /* istanbul ignore next */
          (cov_51at1kejo().b[12][1]++, null),
          business:
          /* istanbul ignore next */
          (cov_51at1kejo().b[13][0]++, businessMetrics[0]) ||
          /* istanbul ignore next */
          (cov_51at1kejo().b[13][1]++, null),
          stats: currentStats,
          timestamp: new Date().toISOString()
        });
      } else
      /* istanbul ignore next */
      {
        cov_51at1kejo().b[10][1]++;
      }
      // Prometheus format
      let prometheusOutput =
      /* istanbul ignore next */
      (cov_51at1kejo().s[61]++, '');
      // System metrics
      /* istanbul ignore next */
      cov_51at1kejo().s[62]++;
      if (systemMetrics[0]) {
        /* istanbul ignore next */
        cov_51at1kejo().b[14][0]++;
        const latest =
        /* istanbul ignore next */
        (cov_51at1kejo().s[63]++, systemMetrics[0]);
        /* istanbul ignore next */
        cov_51at1kejo().s[64]++;
        prometheusOutput += `# HELP utmify_cpu_usage_percent CPU usage percentage\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[65]++;
        prometheusOutput += `# TYPE utmify_cpu_usage_percent gauge\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[66]++;
        prometheusOutput += `utmify_cpu_usage_percent ${latest.cpu.usage}\n\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[67]++;
        prometheusOutput += `# HELP utmify_memory_usage_percent Memory usage percentage\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[68]++;
        prometheusOutput += `# TYPE utmify_memory_usage_percent gauge\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[69]++;
        prometheusOutput += `utmify_memory_usage_percent ${latest.memory.usage}\n\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[70]++;
        prometheusOutput += `# HELP utmify_memory_used_bytes Memory used in bytes\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[71]++;
        prometheusOutput += `# TYPE utmify_memory_used_bytes gauge\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[72]++;
        prometheusOutput += `utmify_memory_used_bytes ${latest.memory.used}\n\n`;
      } else
      /* istanbul ignore next */
      {
        cov_51at1kejo().b[14][1]++;
      }
      // Application metrics
      cov_51at1kejo().s[73]++;
      if (applicationMetrics[0]) {
        /* istanbul ignore next */
        cov_51at1kejo().b[15][0]++;
        const latest =
        /* istanbul ignore next */
        (cov_51at1kejo().s[74]++, applicationMetrics[0]);
        /* istanbul ignore next */
        cov_51at1kejo().s[75]++;
        prometheusOutput += `# HELP utmify_requests_total Total number of requests\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[76]++;
        prometheusOutput += `# TYPE utmify_requests_total counter\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[77]++;
        prometheusOutput += `utmify_requests_total ${latest.requests.total}\n\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[78]++;
        prometheusOutput += `# HELP utmify_requests_per_second Requests per second\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[79]++;
        prometheusOutput += `# TYPE utmify_requests_per_second gauge\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[80]++;
        prometheusOutput += `utmify_requests_per_second ${latest.requests.requestsPerSecond}\n\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[81]++;
        prometheusOutput += `# HELP utmify_response_time_ms Average response time in milliseconds\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[82]++;
        prometheusOutput += `# TYPE utmify_response_time_ms gauge\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[83]++;
        prometheusOutput += `utmify_response_time_ms ${latest.requests.averageResponseTime}\n\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[84]++;
        prometheusOutput += `# HELP utmify_error_rate_percent Error rate percentage\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[85]++;
        prometheusOutput += `# TYPE utmify_error_rate_percent gauge\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[86]++;
        prometheusOutput += `utmify_error_rate_percent ${latest.errors.rate}\n\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[87]++;
        prometheusOutput += `# HELP utmify_database_queries_total Total database queries\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[88]++;
        prometheusOutput += `# TYPE utmify_database_queries_total counter\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[89]++;
        prometheusOutput += `utmify_database_queries_total ${latest.database.queries}\n\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[90]++;
        prometheusOutput += `# HELP utmify_cache_hit_rate_percent Cache hit rate percentage\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[91]++;
        prometheusOutput += `# TYPE utmify_cache_hit_rate_percent gauge\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[92]++;
        prometheusOutput += `utmify_cache_hit_rate_percent ${latest.cache.hitRate}\n\n`;
      } else
      /* istanbul ignore next */
      {
        cov_51at1kejo().b[15][1]++;
      }
      // Business metrics
      cov_51at1kejo().s[93]++;
      if (businessMetrics[0]) {
        /* istanbul ignore next */
        cov_51at1kejo().b[16][0]++;
        const latest =
        /* istanbul ignore next */
        (cov_51at1kejo().s[94]++, businessMetrics[0]);
        /* istanbul ignore next */
        cov_51at1kejo().s[95]++;
        prometheusOutput += `# HELP utmify_active_users Active users count\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[96]++;
        prometheusOutput += `# TYPE utmify_active_users gauge\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[97]++;
        prometheusOutput += `utmify_active_users ${latest.users.active}\n\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[98]++;
        prometheusOutput += `# HELP utmify_utm_created_total Total UTM links created\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[99]++;
        prometheusOutput += `# TYPE utmify_utm_created_total counter\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[100]++;
        prometheusOutput += `utmify_utm_created_total ${latest.utm.created}\n\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[101]++;
        prometheusOutput += `# HELP utmify_utm_clicked_total Total UTM link clicks\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[102]++;
        prometheusOutput += `# TYPE utmify_utm_clicked_total counter\n`;
        /* istanbul ignore next */
        cov_51at1kejo().s[103]++;
        prometheusOutput += `utmify_utm_clicked_total ${latest.utm.clicked}\n\n`;
      } else
      /* istanbul ignore next */
      {
        cov_51at1kejo().b[16][1]++;
      }
      cov_51at1kejo().s[104]++;
      return reply.header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8').send(prometheusOutput);
    } catch (error) {
      /* istanbul ignore next */
      cov_51at1kejo().s[105]++;
      fastify.log.error('Failed to get metrics:', error);
      /* istanbul ignore next */
      cov_51at1kejo().s[106]++;
      return reply.code(500).send({
        error: 'Failed to get metrics'
      });
    }
  });
  // Current stats endpoint
  /* istanbul ignore next */
  cov_51at1kejo().s[107]++;
  fastify.get('/stats', {
    preHandler: [fastify.authenticate]
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_51at1kejo().f[10]++;
    cov_51at1kejo().s[108]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_51at1kejo().s[109]++, monitor.getCurrentStats());
      /* istanbul ignore next */
      cov_51at1kejo().s[110]++;
      return reply.code(200).send({
        stats,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_51at1kejo().s[111]++;
      fastify.log.error('Failed to get current stats:', error);
      /* istanbul ignore next */
      cov_51at1kejo().s[112]++;
      return reply.code(500).send({
        error: 'Failed to get current stats'
      });
    }
  });
  // Reset stats endpoint
  /* istanbul ignore next */
  cov_51at1kejo().s[113]++;
  fastify.post('/stats/reset', {
    preHandler: [fastify.authenticate]
  }, async (request, reply) => {
    /* istanbul ignore next */
    cov_51at1kejo().f[11]++;
    cov_51at1kejo().s[114]++;
    try {
      /* istanbul ignore next */
      cov_51at1kejo().s[115]++;
      monitor.resetStats();
      /* istanbul ignore next */
      cov_51at1kejo().s[116]++;
      return reply.code(200).send({
        success: true,
        message: 'Stats reset successfully',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_51at1kejo().s[117]++;
      fastify.log.error('Failed to reset stats:', error);
      /* istanbul ignore next */
      cov_51at1kejo().s[118]++;
      return reply.code(500).send({
        error: 'Failed to reset stats'
      });
    }
  });
}
// Helper function to convert metrics to Prometheus format
function convertToPrometheus(metrics, type) {
  /* istanbul ignore next */
  cov_51at1kejo().f[12]++;
  cov_51at1kejo().s[119]++;
  if (!metrics.length) {
    /* istanbul ignore next */
    cov_51at1kejo().b[17][0]++;
    cov_51at1kejo().s[120]++;
    return '';
  } else
  /* istanbul ignore next */
  {
    cov_51at1kejo().b[17][1]++;
  }
  const latest =
  /* istanbul ignore next */
  (cov_51at1kejo().s[121]++, metrics[metrics.length - 1]);
  let output =
  /* istanbul ignore next */
  (cov_51at1kejo().s[122]++, '');
  /* istanbul ignore next */
  cov_51at1kejo().s[123]++;
  switch (type) {
    case 'system':
      /* istanbul ignore next */
      cov_51at1kejo().b[18][0]++;
      cov_51at1kejo().s[124]++;
      output += `# HELP utmify_system_cpu_usage CPU usage percentage\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[125]++;
      output += `# TYPE utmify_system_cpu_usage gauge\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[126]++;
      output += `utmify_system_cpu_usage ${latest.cpu.usage}\n\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[127]++;
      output += `# HELP utmify_system_memory_usage Memory usage percentage\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[128]++;
      output += `# TYPE utmify_system_memory_usage gauge\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[129]++;
      output += `utmify_system_memory_usage ${latest.memory.usage}\n\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[130]++;
      break;
    case 'application':
      /* istanbul ignore next */
      cov_51at1kejo().b[18][1]++;
      cov_51at1kejo().s[131]++;
      output += `# HELP utmify_app_requests_total Total requests\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[132]++;
      output += `# TYPE utmify_app_requests_total counter\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[133]++;
      output += `utmify_app_requests_total ${latest.requests.total}\n\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[134]++;
      output += `# HELP utmify_app_response_time Response time in milliseconds\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[135]++;
      output += `# TYPE utmify_app_response_time gauge\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[136]++;
      output += `utmify_app_response_time ${latest.requests.averageResponseTime}\n\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[137]++;
      break;
    case 'business':
      /* istanbul ignore next */
      cov_51at1kejo().b[18][2]++;
      cov_51at1kejo().s[138]++;
      output += `# HELP utmify_business_active_users Active users\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[139]++;
      output += `# TYPE utmify_business_active_users gauge\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[140]++;
      output += `utmify_business_active_users ${latest.users.active}\n\n`;
      /* istanbul ignore next */
      cov_51at1kejo().s[141]++;
      break;
  }
  /* istanbul ignore next */
  cov_51at1kejo().s[142]++;
  return output;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,