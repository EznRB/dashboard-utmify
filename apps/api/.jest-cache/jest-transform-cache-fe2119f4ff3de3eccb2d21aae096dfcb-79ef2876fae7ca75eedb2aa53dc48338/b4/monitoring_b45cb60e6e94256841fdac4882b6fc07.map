{"version":3,"names":["monitor","monitorDatabaseQuery","monitoringRoutes","fastify","cov_51at1kejo","f","s","get","request","reply","healthStatus","status","timestamp","Date","toISOString","uptime","process","version","b","env","APP_VERSION","environment","NODE_ENV","services","database","redis","monitoring","error","statusCode","code","send","preHandler","authenticate","schema","querystring","type","properties","limit","minimum","maximum","default","format","enum","query","systemMetrics","getSystemMetrics","prometheusMetrics","convertToPrometheus","header","metrics","count","length","log","applicationMetrics","getApplicationMetrics","businessMetrics","getBusinessMetrics","currentStats","getCurrentStats","system","application","business","stats","prometheusOutput","latest","cpu","usage","memory","used","requests","total","requestsPerSecond","averageResponseTime","errors","rate","queries","cache","hitRate","users","active","utm","created","clicked","post","resetStats","success","message","output"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\routes\\monitoring.ts"],"sourcesContent":["import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport monitor from '../lib/monitoring';\nimport { monitorDatabaseQuery } from '../lib/sentry';\n\ninterface MonitoringQuery {\n  limit?: number;\n  startDate?: string;\n  endDate?: string;\n  format?: 'json' | 'prometheus';\n}\n\nexport default async function monitoringRoutes(fastify: FastifyInstance) {\n  // Health check endpoint\n  fastify.get('/health', async (request: FastifyRequest, reply: FastifyReply) => {\n    const healthStatus = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      version: process.env.APP_VERSION || '1.0.0',\n      environment: process.env.NODE_ENV || 'development',\n      services: {\n        database: 'unknown',\n        redis: 'unknown',\n        monitoring: monitor ? 'healthy' : 'unhealthy',\n      },\n    };\n\n    try {\n      // Check database connection\n      await monitorDatabaseQuery('health_check_db', async () => {\n        // This would be a simple query like SELECT 1\n        // await prisma.$queryRaw`SELECT 1`;\n        return true;\n      });\n      healthStatus.services.database = 'healthy';\n    } catch (error) {\n      healthStatus.services.database = 'unhealthy';\n      healthStatus.status = 'degraded';\n    }\n\n    try {\n      // Check Redis connection\n      // await redis.ping();\n      healthStatus.services.redis = 'healthy';\n    } catch (error) {\n      healthStatus.services.redis = 'unhealthy';\n      healthStatus.status = 'degraded';\n    }\n\n    const statusCode = healthStatus.status === 'healthy' ? 200 : 503;\n    return reply.code(statusCode).send(healthStatus);\n  });\n\n  // Readiness check (for Kubernetes)\n  fastify.get('/ready', async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      // Check if all critical services are ready\n      await monitorDatabaseQuery('readiness_check', async () => {\n        // Check database connection\n        return true;\n      });\n\n      return reply.code(200).send({\n        status: 'ready',\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      return reply.code(503).send({\n        status: 'not ready',\n        timestamp: new Date().toISOString(),\n        error: 'Database not ready',\n      });\n    }\n  });\n\n  // Liveness check (for Kubernetes)\n  fastify.get('/live', async (request: FastifyRequest, reply: FastifyReply) => {\n    return reply.code(200).send({\n      status: 'alive',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n    });\n  });\n\n  // System metrics endpoint\n  fastify.get('/metrics/system', {\n    preHandler: [fastify.authenticate], // Require authentication\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          limit: { type: 'number', minimum: 1, maximum: 1000, default: 100 },\n          format: { type: 'string', enum: ['json', 'prometheus'], default: 'json' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { limit, format } = request.query as MonitoringQuery;\n      const systemMetrics = monitor.getSystemMetrics(limit || 100);\n\n      if (format === 'prometheus') {\n        const prometheusMetrics = convertToPrometheus(systemMetrics, 'system');\n        return reply\n          .header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')\n          .send(prometheusMetrics);\n      }\n\n      return reply.code(200).send({\n        metrics: systemMetrics,\n        count: systemMetrics.length,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get system metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get system metrics',\n      });\n    }\n  });\n\n  // Application metrics endpoint\n  fastify.get('/metrics/application', {\n    preHandler: [fastify.authenticate],\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          limit: { type: 'number', minimum: 1, maximum: 1000, default: 100 },\n          format: { type: 'string', enum: ['json', 'prometheus'], default: 'json' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { limit, format } = request.query as MonitoringQuery;\n      const applicationMetrics = monitor.getApplicationMetrics(limit || 100);\n\n      if (format === 'prometheus') {\n        const prometheusMetrics = convertToPrometheus(applicationMetrics, 'application');\n        return reply\n          .header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')\n          .send(prometheusMetrics);\n      }\n\n      return reply.code(200).send({\n        metrics: applicationMetrics,\n        count: applicationMetrics.length,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get application metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get application metrics',\n      });\n    }\n  });\n\n  // Business metrics endpoint\n  fastify.get('/metrics/business', {\n    preHandler: [fastify.authenticate],\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          limit: { type: 'number', minimum: 1, maximum: 1000, default: 100 },\n          format: { type: 'string', enum: ['json', 'prometheus'], default: 'json' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { limit, format } = request.query as MonitoringQuery;\n      const businessMetrics = monitor.getBusinessMetrics(limit || 100);\n\n      if (format === 'prometheus') {\n        const prometheusMetrics = convertToPrometheus(businessMetrics, 'business');\n        return reply\n          .header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')\n          .send(prometheusMetrics);\n      }\n\n      return reply.code(200).send({\n        metrics: businessMetrics,\n        count: businessMetrics.length,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get business metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get business metrics',\n      });\n    }\n  });\n\n  // Combined metrics endpoint (Prometheus format)\n  fastify.get('/metrics', {\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          format: { type: 'string', enum: ['json', 'prometheus'], default: 'prometheus' },\n        },\n      },\n    },\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const { format } = request.query as MonitoringQuery;\n      \n      const systemMetrics = monitor.getSystemMetrics(1); // Get latest\n      const applicationMetrics = monitor.getApplicationMetrics(1);\n      const businessMetrics = monitor.getBusinessMetrics(1);\n      const currentStats = monitor.getCurrentStats();\n\n      if (format === 'json') {\n        return reply.code(200).send({\n          system: systemMetrics[0] || null,\n          application: applicationMetrics[0] || null,\n          business: businessMetrics[0] || null,\n          stats: currentStats,\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      // Prometheus format\n      let prometheusOutput = '';\n      \n      // System metrics\n      if (systemMetrics[0]) {\n        const latest = systemMetrics[0];\n        prometheusOutput += `# HELP utmify_cpu_usage_percent CPU usage percentage\\n`;\n        prometheusOutput += `# TYPE utmify_cpu_usage_percent gauge\\n`;\n        prometheusOutput += `utmify_cpu_usage_percent ${latest.cpu.usage}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_memory_usage_percent Memory usage percentage\\n`;\n        prometheusOutput += `# TYPE utmify_memory_usage_percent gauge\\n`;\n        prometheusOutput += `utmify_memory_usage_percent ${latest.memory.usage}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_memory_used_bytes Memory used in bytes\\n`;\n        prometheusOutput += `# TYPE utmify_memory_used_bytes gauge\\n`;\n        prometheusOutput += `utmify_memory_used_bytes ${latest.memory.used}\\n\\n`;\n      }\n\n      // Application metrics\n      if (applicationMetrics[0]) {\n        const latest = applicationMetrics[0];\n        prometheusOutput += `# HELP utmify_requests_total Total number of requests\\n`;\n        prometheusOutput += `# TYPE utmify_requests_total counter\\n`;\n        prometheusOutput += `utmify_requests_total ${latest.requests.total}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_requests_per_second Requests per second\\n`;\n        prometheusOutput += `# TYPE utmify_requests_per_second gauge\\n`;\n        prometheusOutput += `utmify_requests_per_second ${latest.requests.requestsPerSecond}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_response_time_ms Average response time in milliseconds\\n`;\n        prometheusOutput += `# TYPE utmify_response_time_ms gauge\\n`;\n        prometheusOutput += `utmify_response_time_ms ${latest.requests.averageResponseTime}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_error_rate_percent Error rate percentage\\n`;\n        prometheusOutput += `# TYPE utmify_error_rate_percent gauge\\n`;\n        prometheusOutput += `utmify_error_rate_percent ${latest.errors.rate}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_database_queries_total Total database queries\\n`;\n        prometheusOutput += `# TYPE utmify_database_queries_total counter\\n`;\n        prometheusOutput += `utmify_database_queries_total ${latest.database.queries}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_cache_hit_rate_percent Cache hit rate percentage\\n`;\n        prometheusOutput += `# TYPE utmify_cache_hit_rate_percent gauge\\n`;\n        prometheusOutput += `utmify_cache_hit_rate_percent ${latest.cache.hitRate}\\n\\n`;\n      }\n\n      // Business metrics\n      if (businessMetrics[0]) {\n        const latest = businessMetrics[0];\n        prometheusOutput += `# HELP utmify_active_users Active users count\\n`;\n        prometheusOutput += `# TYPE utmify_active_users gauge\\n`;\n        prometheusOutput += `utmify_active_users ${latest.users.active}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_utm_created_total Total UTM links created\\n`;\n        prometheusOutput += `# TYPE utmify_utm_created_total counter\\n`;\n        prometheusOutput += `utmify_utm_created_total ${latest.utm.created}\\n\\n`;\n        \n        prometheusOutput += `# HELP utmify_utm_clicked_total Total UTM link clicks\\n`;\n        prometheusOutput += `# TYPE utmify_utm_clicked_total counter\\n`;\n        prometheusOutput += `utmify_utm_clicked_total ${latest.utm.clicked}\\n\\n`;\n      }\n\n      return reply\n        .header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')\n        .send(prometheusOutput);\n    } catch (error) {\n      fastify.log.error('Failed to get metrics:', error);\n      return reply.code(500).send({\n        error: 'Failed to get metrics',\n      });\n    }\n  });\n\n  // Current stats endpoint\n  fastify.get('/stats', {\n    preHandler: [fastify.authenticate],\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      const stats = monitor.getCurrentStats();\n      return reply.code(200).send({\n        stats,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to get current stats:', error);\n      return reply.code(500).send({\n        error: 'Failed to get current stats',\n      });\n    }\n  });\n\n  // Reset stats endpoint\n  fastify.post('/stats/reset', {\n    preHandler: [fastify.authenticate],\n  }, async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      monitor.resetStats();\n      return reply.code(200).send({\n        success: true,\n        message: 'Stats reset successfully',\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      fastify.log.error('Failed to reset stats:', error);\n      return reply.code(500).send({\n        error: 'Failed to reset stats',\n      });\n    }\n  });\n}\n\n// Helper function to convert metrics to Prometheus format\nfunction convertToPrometheus(metrics: any[], type: string): string {\n  if (!metrics.length) {\n    return '';\n  }\n\n  const latest = metrics[metrics.length - 1];\n  let output = '';\n\n  switch (type) {\n    case 'system':\n      output += `# HELP utmify_system_cpu_usage CPU usage percentage\\n`;\n      output += `# TYPE utmify_system_cpu_usage gauge\\n`;\n      output += `utmify_system_cpu_usage ${latest.cpu.usage}\\n\\n`;\n      \n      output += `# HELP utmify_system_memory_usage Memory usage percentage\\n`;\n      output += `# TYPE utmify_system_memory_usage gauge\\n`;\n      output += `utmify_system_memory_usage ${latest.memory.usage}\\n\\n`;\n      break;\n      \n    case 'application':\n      output += `# HELP utmify_app_requests_total Total requests\\n`;\n      output += `# TYPE utmify_app_requests_total counter\\n`;\n      output += `utmify_app_requests_total ${latest.requests.total}\\n\\n`;\n      \n      output += `# HELP utmify_app_response_time Response time in milliseconds\\n`;\n      output += `# TYPE utmify_app_response_time gauge\\n`;\n      output += `utmify_app_response_time ${latest.requests.averageResponseTime}\\n\\n`;\n      break;\n      \n    case 'business':\n      output += `# HELP utmify_business_active_users Active users\\n`;\n      output += `# TYPE utmify_business_active_users gauge\\n`;\n      output += `utmify_business_active_users ${latest.users.active}\\n\\n`;\n      break;\n  }\n\n  return output;\n}"],"mappingsmBAAmB;AACvC,SAASC,oBAAoB,QAAQ,eAAe;AASpD,eAAe,eAAeC,gBAAgBA,CAACC,OAAwB;EAAA;EAAAC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACrE;EACAH,OAAO,CAACI,GAAG,CAAC,SAAS,EAAE,OAAOC,OAAuB,EAAEC,KAAmB,KAAI;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAC5E,MAAMK,YAAY;IAAA;IAAA,CAAAN,aAAA,GAAAE,CAAA,OAAG;MACnBK,MAAM,EAAE,SAAS;MACjBC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MACnCC,MAAM,EAAEC,OAAO,CAACD,MAAM,EAAE;MACxBE,OAAO;MAAE;MAAA,CAAAb,aAAA,GAAAc,CAAA,UAAAF,OAAO,CAACG,GAAG,CAACC,WAAW;MAAA;MAAA,CAAAhB,aAAA,GAAAc,CAAA,UAAI,OAAO;MAC3CG,WAAW;MAAE;MAAA,CAAAjB,aAAA,GAAAc,CAAA,UAAAF,OAAO,CAACG,GAAG,CAACG,QAAQ;MAAA;MAAA,CAAAlB,aAAA,GAAAc,CAAA,UAAI,aAAa;MAClDK,QAAQ,EAAE;QACRC,QAAQ,EAAE,SAAS;QACnBC,KAAK,EAAE,SAAS;QAChBC,UAAU,EAAE1B,OAAO;QAAA;QAAA,CAAAI,aAAA,GAAAc,CAAA,UAAG,SAAS;QAAA;QAAA,CAAAd,aAAA,GAAAc,CAAA,UAAG,WAAW;;KAEhD;IAAC;IAAAd,aAAA,GAAAE,CAAA;IAEF,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF;MACA,MAAML,oBAAoB,CAAC,iBAAiB,EAAE,YAAW;QAAA;QAAAG,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAE,CAAA;QACvD;QACA;QACA,OAAO,IAAI;MACb,CAAC,CAAC;MAAC;MAAAF,aAAA,GAAAE,CAAA;MACHI,YAAY,CAACa,QAAQ,CAACC,QAAQ,GAAG,SAAS;IAC5C,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MACdI,YAAY,CAACa,QAAQ,CAACC,QAAQ,GAAG,WAAW;MAAC;MAAApB,aAAA,GAAAE,CAAA;MAC7CI,YAAY,CAACC,MAAM,GAAG,UAAU;IAClC;IAAC;IAAAP,aAAA,GAAAE,CAAA;IAED,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF;MACA;MACAI,YAAY,CAACa,QAAQ,CAACE,KAAK,GAAG,SAAS;IACzC,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MACdI,YAAY,CAACa,QAAQ,CAACE,KAAK,GAAG,WAAW;MAAC;MAAArB,aAAA,GAAAE,CAAA;MAC1CI,YAAY,CAACC,MAAM,GAAG,UAAU;IAClC;IAEA,MAAMiB,UAAU;IAAA;IAAA,CAAAxB,aAAA,GAAAE,CAAA,QAAGI,YAAY,CAACC,MAAM,KAAK,SAAS;IAAA;IAAA,CAAAP,aAAA,GAAAc,CAAA,UAAG,GAAG;IAAA;IAAA,CAAAd,aAAA,GAAAc,CAAA,UAAG,GAAG;IAAC;IAAAd,aAAA,GAAAE,CAAA;IACjE,OAAOG,KAAK,CAACoB,IAAI,CAACD,UAAU,CAAC,CAACE,IAAI,CAACpB,YAAY,CAAC;EAClD,CAAC,CAAC;EAEF;EAAA;EAAAN,aAAA,GAAAE,CAAA;EACAH,OAAO,CAACI,GAAG,CAAC,QAAQ,EAAE,OAAOC,OAAuB,EAAEC,KAAmB,KAAI;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC3E,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF;MACA,MAAML,oBAAoB,CAAC,iBAAiB,EAAE,YAAW;QAAA;QAAAG,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAE,CAAA;QACvD;QACA,OAAO,IAAI;MACb,CAAC,CAAC;MAAC;MAAAF,aAAA,GAAAE,CAAA;MAEH,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BnB,MAAM,EAAE,OAAO;QACfC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,CAAC;IACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MACd,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BnB,MAAM,EAAE,WAAW;QACnBC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;QACnCa,KAAK,EAAE;OACR,CAAC;IACJ;EACF,CAAC,CAAC;EAEF;EAAA;EAAAvB,aAAA,GAAAE,CAAA;EACAH,OAAO,CAACI,GAAG,CAAC,OAAO,EAAE,OAAOC,OAAuB,EAAEC,KAAmB,KAAI;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC1E,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BnB,MAAM,EAAE,OAAO;MACfC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MACnCC,MAAM,EAAEC,OAAO,CAACD,MAAM;KACvB,CAAC;EACJ,CAAC,CAAC;EAEF;EAAA;EAAAX,aAAA,GAAAE,CAAA;EACAH,OAAO,CAACI,GAAG,CAAC,iBAAiB,EAAE;IAC7BwB,UAAU,EAAE,CAAC5B,OAAO,CAAC6B,YAAY,CAAC;IAAE;IACpCC,MAAM,EAAE;MACNC,WAAW,EAAE;QACXC,IAAI,EAAE,QAAQ;QACdC,UAAU,EAAE;UACVC,KAAK,EAAE;YAAEF,IAAI,EAAE,QAAQ;YAAEG,OAAO,EAAE,CAAC;YAAEC,OAAO,EAAE,IAAI;YAAEC,OAAO,EAAE;UAAG,CAAE;UAClEC,MAAM,EAAE;YAAEN,IAAI,EAAE,QAAQ;YAAEO,IAAI,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC;YAAEF,OAAO,EAAE;UAAM;;;;GAI9E,EAAE,OAAOhC,OAAuB,EAAEC,KAAmB,KAAI;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACxD,IAAI;MACF,MAAM;QAAE+B,KAAK;QAAEI;MAAM,CAAE;MAAA;MAAA,CAAArC,aAAA,GAAAE,CAAA,QAAGE,OAAO,CAACmC,KAAwB;MAC1D,MAAMC,aAAa;MAAA;MAAA,CAAAxC,aAAA,GAAAE,CAAA,QAAGN,OAAO,CAAC6C,gBAAgB;MAAC;MAAA,CAAAzC,aAAA,GAAAc,CAAA,UAAAmB,KAAK;MAAA;MAAA,CAAAjC,aAAA,GAAAc,CAAA,UAAI,GAAG,EAAC;MAAC;MAAAd,aAAA,GAAAE,CAAA;MAE7D,IAAImC,MAAM,KAAK,YAAY,EAAE;QAAA;QAAArC,aAAA,GAAAc,CAAA;QAC3B,MAAM4B,iBAAiB;QAAA;QAAA,CAAA1C,aAAA,GAAAE,CAAA,QAAGyC,mBAAmB,CAACH,aAAa,EAAE,QAAQ,CAAC;QAAC;QAAAxC,aAAA,GAAAE,CAAA;QACvE,OAAOG,KAAK,CACTuC,MAAM,CAAC,cAAc,EAAE,0CAA0C,CAAC,CAClElB,IAAI,CAACgB,iBAAiB,CAAC;MAC5B,CAAC;MAAA;MAAA;QAAA1C,aAAA,GAAAc,CAAA;MAAA;MAAAd,aAAA,GAAAE,CAAA;MAED,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BmB,OAAO,EAAEL,aAAa;QACtBM,KAAK,EAAEN,aAAa,CAACO,MAAM;QAC3BvC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,CAAC;IACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MACdH,OAAO,CAACiD,GAAG,CAACzB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MAAC;MAAAvB,aAAA,GAAAE,CAAA;MAC1D,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BH,KAAK,EAAE;OACR,CAAC;IACJ;EACF,CAAC,CAAC;EAEF;EAAA;EAAAvB,aAAA,GAAAE,CAAA;EACAH,OAAO,CAACI,GAAG,CAAC,sBAAsB,EAAE;IAClCwB,UAAU,EAAE,CAAC5B,OAAO,CAAC6B,YAAY,CAAC;IAClCC,MAAM,EAAE;MACNC,WAAW,EAAE;QACXC,IAAI,EAAE,QAAQ;QACdC,UAAU,EAAE;UACVC,KAAK,EAAE;YAAEF,IAAI,EAAE,QAAQ;YAAEG,OAAO,EAAE,CAAC;YAAEC,OAAO,EAAE,IAAI;YAAEC,OAAO,EAAE;UAAG,CAAE;UAClEC,MAAM,EAAE;YAAEN,IAAI,EAAE,QAAQ;YAAEO,IAAI,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC;YAAEF,OAAO,EAAE;UAAM;;;;GAI9E,EAAE,OAAOhC,OAAuB,EAAEC,KAAmB,KAAI;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACxD,IAAI;MACF,MAAM;QAAE+B,KAAK;QAAEI;MAAM,CAAE;MAAA;MAAA,CAAArC,aAAA,GAAAE,CAAA,QAAGE,OAAO,CAACmC,KAAwB;MAC1D,MAAMU,kBAAkB;MAAA;MAAA,CAAAjD,aAAA,GAAAE,CAAA,QAAGN,OAAO,CAACsD,qBAAqB;MAAC;MAAA,CAAAlD,aAAA,GAAAc,CAAA,UAAAmB,KAAK;MAAA;MAAA,CAAAjC,aAAA,GAAAc,CAAA,UAAI,GAAG,EAAC;MAAC;MAAAd,aAAA,GAAAE,CAAA;MAEvE,IAAImC,MAAM,KAAK,YAAY,EAAE;QAAA;QAAArC,aAAA,GAAAc,CAAA;QAC3B,MAAM4B,iBAAiB;QAAA;QAAA,CAAA1C,aAAA,GAAAE,CAAA,QAAGyC,mBAAmB,CAACM,kBAAkB,EAAE,aAAa,CAAC;QAAC;QAAAjD,aAAA,GAAAE,CAAA;QACjF,OAAOG,KAAK,CACTuC,MAAM,CAAC,cAAc,EAAE,0CAA0C,CAAC,CAClElB,IAAI,CAACgB,iBAAiB,CAAC;MAC5B,CAAC;MAAA;MAAA;QAAA1C,aAAA,GAAAc,CAAA;MAAA;MAAAd,aAAA,GAAAE,CAAA;MAED,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BmB,OAAO,EAAEI,kBAAkB;QAC3BH,KAAK,EAAEG,kBAAkB,CAACF,MAAM;QAChCvC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,CAAC;IACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MACdH,OAAO,CAACiD,GAAG,CAACzB,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAAC;MAAAvB,aAAA,GAAAE,CAAA;MAC/D,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BH,KAAK,EAAE;OACR,CAAC;IACJ;EACF,CAAC,CAAC;EAEF;EAAA;EAAAvB,aAAA,GAAAE,CAAA;EACAH,OAAO,CAACI,GAAG,CAAC,mBAAmB,EAAE;IAC/BwB,UAAU,EAAE,CAAC5B,OAAO,CAAC6B,YAAY,CAAC;IAClCC,MAAM,EAAE;MACNC,WAAW,EAAE;QACXC,IAAI,EAAE,QAAQ;QACdC,UAAU,EAAE;UACVC,KAAK,EAAE;YAAEF,IAAI,EAAE,QAAQ;YAAEG,OAAO,EAAE,CAAC;YAAEC,OAAO,EAAE,IAAI;YAAEC,OAAO,EAAE;UAAG,CAAE;UAClEC,MAAM,EAAE;YAAEN,IAAI,EAAE,QAAQ;YAAEO,IAAI,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC;YAAEF,OAAO,EAAE;UAAM;;;;GAI9E,EAAE,OAAOhC,OAAuB,EAAEC,KAAmB,KAAI;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACxD,IAAI;MACF,MAAM;QAAE+B,KAAK;QAAEI;MAAM,CAAE;MAAA;MAAA,CAAArC,aAAA,GAAAE,CAAA,QAAGE,OAAO,CAACmC,KAAwB;MAC1D,MAAMY,eAAe;MAAA;MAAA,CAAAnD,aAAA,GAAAE,CAAA,QAAGN,OAAO,CAACwD,kBAAkB;MAAC;MAAA,CAAApD,aAAA,GAAAc,CAAA,UAAAmB,KAAK;MAAA;MAAA,CAAAjC,aAAA,GAAAc,CAAA,UAAI,GAAG,EAAC;MAAC;MAAAd,aAAA,GAAAE,CAAA;MAEjE,IAAImC,MAAM,KAAK,YAAY,EAAE;QAAA;QAAArC,aAAA,GAAAc,CAAA;QAC3B,MAAM4B,iBAAiB;QAAA;QAAA,CAAA1C,aAAA,GAAAE,CAAA,QAAGyC,mBAAmB,CAACQ,eAAe,EAAE,UAAU,CAAC;QAAC;QAAAnD,aAAA,GAAAE,CAAA;QAC3E,OAAOG,KAAK,CACTuC,MAAM,CAAC,cAAc,EAAE,0CAA0C,CAAC,CAClElB,IAAI,CAACgB,iBAAiB,CAAC;MAC5B,CAAC;MAAA;MAAA;QAAA1C,aAAA,GAAAc,CAAA;MAAA;MAAAd,aAAA,GAAAE,CAAA;MAED,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BmB,OAAO,EAAEM,eAAe;QACxBL,KAAK,EAAEK,eAAe,CAACJ,MAAM;QAC7BvC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,CAAC;IACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MACdH,OAAO,CAACiD,GAAG,CAACzB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAAC;MAAAvB,aAAA,GAAAE,CAAA;MAC5D,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BH,KAAK,EAAE;OACR,CAAC;IACJ;EACF,CAAC,CAAC;EAEF;EAAA;EAAAvB,aAAA,GAAAE,CAAA;EACAH,OAAO,CAACI,GAAG,CAAC,UAAU,EAAE;IACtB0B,MAAM,EAAE;MACNC,WAAW,EAAE;QACXC,IAAI,EAAE,QAAQ;QACdC,UAAU,EAAE;UACVK,MAAM,EAAE;YAAEN,IAAI,EAAE,QAAQ;YAAEO,IAAI,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC;YAAEF,OAAO,EAAE;UAAY;;;;GAIpF,EAAE,OAAOhC,OAAuB,EAAEC,KAAmB,KAAI;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACxD,IAAI;MACF,MAAM;QAAEmC;MAAM,CAAE;MAAA;MAAA,CAAArC,aAAA,GAAAE,CAAA,QAAGE,OAAO,CAACmC,KAAwB;MAEnD,MAAMC,aAAa;MAAA;MAAA,CAAAxC,aAAA,GAAAE,CAAA,QAAGN,OAAO,CAAC6C,gBAAgB,CAAC,CAAC,CAAC,EAAC,CAAC;MACnD,MAAMQ,kBAAkB;MAAA;MAAA,CAAAjD,aAAA,GAAAE,CAAA,QAAGN,OAAO,CAACsD,qBAAqB,CAAC,CAAC,CAAC;MAC3D,MAAMC,eAAe;MAAA;MAAA,CAAAnD,aAAA,GAAAE,CAAA,QAAGN,OAAO,CAACwD,kBAAkB,CAAC,CAAC,CAAC;MACrD,MAAMC,YAAY;MAAA;MAAA,CAAArD,aAAA,GAAAE,CAAA,QAAGN,OAAO,CAAC0D,eAAe,EAAE;MAAC;MAAAtD,aAAA,GAAAE,CAAA;MAE/C,IAAImC,MAAM,KAAK,MAAM,EAAE;QAAA;QAAArC,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAE,CAAA;QACrB,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1B6B,MAAM;UAAE;UAAA,CAAAvD,aAAA,GAAAc,CAAA,WAAA0B,aAAa,CAAC,CAAC,CAAC;UAAA;UAAA,CAAAxC,aAAA,GAAAc,CAAA,WAAI,IAAI;UAChC0C,WAAW;UAAE;UAAA,CAAAxD,aAAA,GAAAc,CAAA,WAAAmC,kBAAkB,CAAC,CAAC,CAAC;UAAA;UAAA,CAAAjD,aAAA,GAAAc,CAAA,WAAI,IAAI;UAC1C2C,QAAQ;UAAE;UAAA,CAAAzD,aAAA,GAAAc,CAAA,WAAAqC,eAAe,CAAC,CAAC,CAAC;UAAA;UAAA,CAAAnD,aAAA,GAAAc,CAAA,WAAI,IAAI;UACpC4C,KAAK,EAAEL,YAAY;UACnB7C,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;SAClC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAV,aAAA,GAAAc,CAAA;MAAA;MAED;MACA,IAAI6C,gBAAgB;MAAA;MAAA,CAAA3D,aAAA,GAAAE,CAAA,QAAG,EAAE;MAEzB;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACA,IAAIsC,aAAa,CAAC,CAAC,CAAC,EAAE;QAAA;QAAAxC,aAAA,GAAAc,CAAA;QACpB,MAAM8C,MAAM;QAAA;QAAA,CAAA5D,aAAA,GAAAE,CAAA,QAAGsC,aAAa,CAAC,CAAC,CAAC;QAAC;QAAAxC,aAAA,GAAAE,CAAA;QAChCyD,gBAAgB,IAAI,wDAAwD;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC7EyD,gBAAgB,IAAI,yCAAyC;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC9DyD,gBAAgB,IAAI,4BAA4BC,MAAM,CAACC,GAAG,CAACC,KAAK,MAAM;QAAC;QAAA9D,aAAA,GAAAE,CAAA;QAEvEyD,gBAAgB,IAAI,8DAA8D;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QACnFyD,gBAAgB,IAAI,4CAA4C;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QACjEyD,gBAAgB,IAAI,+BAA+BC,MAAM,CAACG,MAAM,CAACD,KAAK,MAAM;QAAC;QAAA9D,aAAA,GAAAE,CAAA;QAE7EyD,gBAAgB,IAAI,wDAAwD;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC7EyD,gBAAgB,IAAI,yCAAyC;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC9DyD,gBAAgB,IAAI,4BAA4BC,MAAM,CAACG,MAAM,CAACC,IAAI,MAAM;MAC1E,CAAC;MAAA;MAAA;QAAAhE,aAAA,GAAAc,CAAA;MAAA;MAED;MAAAd,aAAA,GAAAE,CAAA;MACA,IAAI+C,kBAAkB,CAAC,CAAC,CAAC,EAAE;QAAA;QAAAjD,aAAA,GAAAc,CAAA;QACzB,MAAM8C,MAAM;QAAA;QAAA,CAAA5D,aAAA,GAAAE,CAAA,QAAG+C,kBAAkB,CAAC,CAAC,CAAC;QAAC;QAAAjD,aAAA,GAAAE,CAAA;QACrCyD,gBAAgB,IAAI,yDAAyD;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC9EyD,gBAAgB,IAAI,wCAAwC;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC7DyD,gBAAgB,IAAI,yBAAyBC,MAAM,CAACK,QAAQ,CAACC,KAAK,MAAM;QAAC;QAAAlE,aAAA,GAAAE,CAAA;QAEzEyD,gBAAgB,IAAI,yDAAyD;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC9EyD,gBAAgB,IAAI,2CAA2C;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAChEyD,gBAAgB,IAAI,8BAA8BC,MAAM,CAACK,QAAQ,CAACE,iBAAiB,MAAM;QAAC;QAAAnE,aAAA,GAAAE,CAAA;QAE1FyD,gBAAgB,IAAI,wEAAwE;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC7FyD,gBAAgB,IAAI,wCAAwC;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC7DyD,gBAAgB,IAAI,2BAA2BC,MAAM,CAACK,QAAQ,CAACG,mBAAmB,MAAM;QAAC;QAAApE,aAAA,GAAAE,CAAA;QAEzFyD,gBAAgB,IAAI,0DAA0D;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC/EyD,gBAAgB,IAAI,0CAA0C;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC/DyD,gBAAgB,IAAI,6BAA6BC,MAAM,CAACS,MAAM,CAACC,IAAI,MAAM;QAAC;QAAAtE,aAAA,GAAAE,CAAA;QAE1EyD,gBAAgB,IAAI,+DAA+D;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QACpFyD,gBAAgB,IAAI,gDAAgD;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QACrEyD,gBAAgB,IAAI,iCAAiCC,MAAM,CAACxC,QAAQ,CAACmD,OAAO,MAAM;QAAC;QAAAvE,aAAA,GAAAE,CAAA;QAEnFyD,gBAAgB,IAAI,kEAAkE;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QACvFyD,gBAAgB,IAAI,8CAA8C;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QACnEyD,gBAAgB,IAAI,iCAAiCC,MAAM,CAACY,KAAK,CAACC,OAAO,MAAM;MACjF,CAAC;MAAA;MAAA;QAAAzE,aAAA,GAAAc,CAAA;MAAA;MAED;MAAAd,aAAA,GAAAE,CAAA;MACA,IAAIiD,eAAe,CAAC,CAAC,CAAC,EAAE;QAAA;QAAAnD,aAAA,GAAAc,CAAA;QACtB,MAAM8C,MAAM;QAAA;QAAA,CAAA5D,aAAA,GAAAE,CAAA,QAAGiD,eAAe,CAAC,CAAC,CAAC;QAAC;QAAAnD,aAAA,GAAAE,CAAA;QAClCyD,gBAAgB,IAAI,iDAAiD;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QACtEyD,gBAAgB,IAAI,oCAAoC;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QACzDyD,gBAAgB,IAAI,uBAAuBC,MAAM,CAACc,KAAK,CAACC,MAAM,MAAM;QAAC;QAAA3E,aAAA,GAAAE,CAAA;QAErEyD,gBAAgB,IAAI,2DAA2D;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAChFyD,gBAAgB,IAAI,2CAA2C;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAChEyD,gBAAgB,IAAI,4BAA4BC,MAAM,CAACgB,GAAG,CAACC,OAAO,MAAM;QAAC;QAAA7E,aAAA,GAAAE,CAAA;QAEzEyD,gBAAgB,IAAI,yDAAyD;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAC9EyD,gBAAgB,IAAI,2CAA2C;QAAC;QAAA3D,aAAA,GAAAE,CAAA;QAChEyD,gBAAgB,IAAI,4BAA4BC,MAAM,CAACgB,GAAG,CAACE,OAAO,MAAM;MAC1E,CAAC;MAAA;MAAA;QAAA9E,aAAA,GAAAc,CAAA;MAAA;MAAAd,aAAA,GAAAE,CAAA;MAED,OAAOG,KAAK,CACTuC,MAAM,CAAC,cAAc,EAAE,0CAA0C,CAAC,CAClElB,IAAI,CAACiC,gBAAgB,CAAC;IAC3B,CAAC,CAAC,OAAOpC,KAAK,EAAE;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MACdH,OAAO,CAACiD,GAAG,CAACzB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAAvB,aAAA,GAAAE,CAAA;MACnD,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BH,KAAK,EAAE;OACR,CAAC;IACJ;EACF,CAAC,CAAC;EAEF;EAAA;EAAAvB,aAAA,GAAAE,CAAA;EACAH,OAAO,CAACI,GAAG,CAAC,QAAQ,EAAE;IACpBwB,UAAU,EAAE,CAAC5B,OAAO,CAAC6B,YAAY;GAClC,EAAE,OAAOxB,OAAuB,EAAEC,KAAmB,KAAI;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACxD,IAAI;MACF,MAAMwD,KAAK;MAAA;MAAA,CAAA1D,aAAA,GAAAE,CAAA,SAAGN,OAAO,CAAC0D,eAAe,EAAE;MAAC;MAAAtD,aAAA,GAAAE,CAAA;MACxC,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BgC,KAAK;QACLlD,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,CAAC;IACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MACdH,OAAO,CAACiD,GAAG,CAACzB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MAAC;MAAAvB,aAAA,GAAAE,CAAA;MACzD,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BH,KAAK,EAAE;OACR,CAAC;IACJ;EACF,CAAC,CAAC;EAEF;EAAA;EAAAvB,aAAA,GAAAE,CAAA;EACAH,OAAO,CAACgF,IAAI,CAAC,cAAc,EAAE;IAC3BpD,UAAU,EAAE,CAAC5B,OAAO,CAAC6B,YAAY;GAClC,EAAE,OAAOxB,OAAuB,EAAEC,KAAmB,KAAI;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACxD,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACFN,OAAO,CAACoF,UAAU,EAAE;MAAC;MAAAhF,aAAA,GAAAE,CAAA;MACrB,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BuD,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,0BAA0B;QACnC1E,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,CAAC;IACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MACdH,OAAO,CAACiD,GAAG,CAACzB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAAvB,aAAA,GAAAE,CAAA;MACnD,OAAOG,KAAK,CAACoB,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BH,KAAK,EAAE;OACR,CAAC;IACJ;EACF,CAAC,CAAC;AACJ;AAEA;AACA,SAASoB,mBAAmBA,CAACE,OAAc,EAAEd,IAAY;EAAA;EAAA/B,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACvD,IAAI,CAAC2C,OAAO,CAACE,MAAM,EAAE;IAAA;IAAA/C,aAAA,GAAAc,CAAA;IAAAd,aAAA,GAAAE,CAAA;IACnB,OAAO,EAAE;EACX,CAAC;EAAA;EAAA;IAAAF,aAAA,GAAAc,CAAA;EAAA;EAED,MAAM8C,MAAM;EAAA;EAAA,CAAA5D,aAAA,GAAAE,CAAA,SAAG2C,OAAO,CAACA,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC;EAC1C,IAAIoC,MAAM;EAAA;EAAA,CAAAnF,aAAA,GAAAE,CAAA,SAAG,EAAE;EAAC;EAAAF,aAAA,GAAAE,CAAA;EAEhB,QAAQ6B,IAAI;IACV,KAAK,QAAQ;MAAA;MAAA/B,aAAA,GAAAc,CAAA;MAAAd,aAAA,GAAAE,CAAA;MACXiF,MAAM,IAAI,uDAAuD;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MAClEiF,MAAM,IAAI,wCAAwC;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MACnDiF,MAAM,IAAI,2BAA2BvB,MAAM,CAACC,GAAG,CAACC,KAAK,MAAM;MAAC;MAAA9D,aAAA,GAAAE,CAAA;MAE5DiF,MAAM,IAAI,6DAA6D;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MACxEiF,MAAM,IAAI,2CAA2C;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MACtDiF,MAAM,IAAI,8BAA8BvB,MAAM,CAACG,MAAM,CAACD,KAAK,MAAM;MAAC;MAAA9D,aAAA,GAAAE,CAAA;MAClE;IAEF,KAAK,aAAa;MAAA;MAAAF,aAAA,GAAAc,CAAA;MAAAd,aAAA,GAAAE,CAAA;MAChBiF,MAAM,IAAI,mDAAmD;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MAC9DiF,MAAM,IAAI,4CAA4C;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MACvDiF,MAAM,IAAI,6BAA6BvB,MAAM,CAACK,QAAQ,CAACC,KAAK,MAAM;MAAC;MAAAlE,aAAA,GAAAE,CAAA;MAEnEiF,MAAM,IAAI,iEAAiE;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MAC5EiF,MAAM,IAAI,yCAAyC;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MACpDiF,MAAM,IAAI,4BAA4BvB,MAAM,CAACK,QAAQ,CAACG,mBAAmB,MAAM;MAAC;MAAApE,aAAA,GAAAE,CAAA;MAChF;IAEF,KAAK,UAAU;MAAA;MAAAF,aAAA,GAAAc,CAAA;MAAAd,aAAA,GAAAE,CAAA;MACbiF,MAAM,IAAI,oDAAoD;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MAC/DiF,MAAM,IAAI,6CAA6C;MAAC;MAAAnF,aAAA,GAAAE,CAAA;MACxDiF,MAAM,IAAI,gCAAgCvB,MAAM,CAACc,KAAK,CAACC,MAAM,MAAM;MAAC;MAAA3E,aAAA,GAAAE,CAAA;MACpE;EACJ;EAAC;EAAAF,aAAA,GAAAE,CAAA;EAED,OAAOiF,MAAM;AACf","ignoreList":[]}