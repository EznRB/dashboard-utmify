{"version":3,"names":["cov_pmjx20wre","actualCoverage","Injectable","Logger","tap","catchError","Reflector","AuditLogService","s","AuditLog","options","f","target","propertyKey","descriptor","b","Reflect","defineMetadata","value","SkipAuditLog","SensitiveAuditLog","AuditLogInterceptor","AuditLogInterceptor_1","reflector","auditLogService","logger","name","constructor","intercept","context","next","request","switchToHttp","getRequest","handler","getHandler","controller","getClass","methodName","controllerName","skipAuditLog","getAllAndOverride","handle","user","organizationId","headers","userId","id","sensitiveOptions","auditOptions","action","determineAction","resource","determineResource","requestData","captureRequestData","startTime","Date","now","pipe","response","createAuditLog","success","details","method","url","duration","includeResponse","sanitizeResponse","ipAddress","getClientIp","userAgent","severity","category","error","errorMessage","message","errorStack","stack","data","httpMethod","toUpperCase","formattedMethodName","replace","params","Object","keys","length","query","includeRequest","body","requestBody","sanitizeRequestBody","sanitized","sensitiveFields","sanitizeObject","obj","Array","isArray","map","result","key","entries","lowerKey","toLowerCase","some","field","includes","responseStr","JSON","stringify","_truncated","_size","_preview","substring","connection","remoteAddress","socket","ip","__decorate","_a","_b","CrossTenantSecurityGuard","CrossTenantSecurityGuard_1","canActivate","targetOrganizationId","extractTargetOrganizationId","isValid","validateCrossTenantAccess","warn","_c"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\interceptors\\audit-log.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { Reflector } from '@nestjs/core';\nimport { AuditLogService } from '../services/audit-log.service';\n\n// Decorator para marcar métodos que devem ser auditados\nexport const AuditLog = (options: {\n  action?: string;\n  resource?: string;\n  includeRequest?: boolean;\n  includeResponse?: boolean;\n  severity?: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  category?: 'AUTH' | 'DATA' | 'ADMIN' | 'SECURITY' | 'SYSTEM';\n}) => {\n  return (target: any, propertyKey?: string, descriptor?: PropertyDescriptor) => {\n    if (descriptor) {\n      Reflect.defineMetadata('audit-log-options', options, descriptor.value);\n    } else {\n      Reflect.defineMetadata('audit-log-options', options, target);\n    }\n  };\n};\n\n// Decorator para pular auditoria\nexport const SkipAuditLog = () => {\n  return (target: any, propertyKey?: string, descriptor?: PropertyDescriptor) => {\n    if (descriptor) {\n      Reflect.defineMetadata('skip-audit-log', true, descriptor.value);\n    } else {\n      Reflect.defineMetadata('skip-audit-log', true, target);\n    }\n  };\n};\n\n// Decorator para auditoria sensível (sempre logar)\nexport const SensitiveAuditLog = (options: {\n  action: string;\n  resource: string;\n  reason?: string;\n}) => {\n  return (target: any, propertyKey?: string, descriptor?: PropertyDescriptor) => {\n    if (descriptor) {\n      Reflect.defineMetadata('sensitive-audit-log', options, descriptor.value);\n    } else {\n      Reflect.defineMetadata('sensitive-audit-log', options, target);\n    }\n  };\n};\n\n@Injectable()\nexport class AuditLogInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(AuditLogInterceptor.name);\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly auditLogService: AuditLogService,\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const request = context.switchToHttp().getRequest();\n    const handler = context.getHandler();\n    const controller = context.getClass();\n    const methodName = handler.name;\n    const controllerName = controller.name;\n\n    // Verificar se deve pular auditoria\n    const skipAuditLog = this.reflector.getAllAndOverride<boolean>(\n      'skip-audit-log',\n      [handler, controller],\n    );\n\n    if (skipAuditLog) {\n      return next.handle();\n    }\n\n    // Obter informações do usuário e organização\n    const user = request.user;\n    const organizationId = user?.organizationId || request.headers['x-organization-id'];\n    const userId = user?.id || 'ANONYMOUS';\n\n    // Se não há organização, pular auditoria (exceto para ações sensíveis)\n    const sensitiveOptions = this.reflector.getAllAndOverride<any>(\n      'sensitive-audit-log',\n      [handler, controller],\n    );\n\n    if (!organizationId && !sensitiveOptions) {\n      return next.handle();\n    }\n\n    // Obter opções de auditoria\n    const auditOptions = this.reflector.getAllAndOverride<any>(\n      'audit-log-options',\n      [handler, controller],\n    );\n\n    // Determinar ação e recurso\n    const action = this.determineAction(request, methodName, auditOptions, sensitiveOptions);\n    const resource = this.determineResource(controllerName, auditOptions, sensitiveOptions);\n\n    // Capturar dados da requisição\n    const requestData = this.captureRequestData(request, auditOptions);\n    const startTime = Date.now();\n\n    return next.handle().pipe(\n      tap((response) => {\n        // Log de sucesso\n        this.createAuditLog({\n          organizationId: organizationId || 'SYSTEM',\n          userId,\n          action,\n          resource,\n          success: true,\n          details: {\n            method: request.method,\n            url: request.url,\n            duration: Date.now() - startTime,\n            ...requestData,\n            ...(auditOptions?.includeResponse ? { response: this.sanitizeResponse(response) } : {}),\n          },\n          ipAddress: this.getClientIp(request),\n          userAgent: request.headers['user-agent'],\n          severity: auditOptions?.severity,\n          category: auditOptions?.category,\n        });\n      }),\n      catchError((error) => {\n        // Log de erro\n        this.createAuditLog({\n          organizationId: organizationId || 'SYSTEM',\n          userId,\n          action,\n          resource,\n          success: false,\n          errorMessage: error.message,\n          details: {\n            method: request.method,\n            url: request.url,\n            duration: Date.now() - startTime,\n            errorStack: error.stack,\n            ...requestData,\n          },\n          ipAddress: this.getClientIp(request),\n          userAgent: request.headers['user-agent'],\n          severity: 'HIGH', // Erros são sempre de alta severidade\n          category: auditOptions?.category || 'SYSTEM',\n        });\n\n        throw error;\n      }),\n    );\n  }\n\n  private async createAuditLog(data: any): Promise<void> {\n    try {\n      await this.auditLogService.createAuditLog(data);\n    } catch (error) {\n      this.logger.error(\n        `Failed to create audit log: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  private determineAction(\n    request: any,\n    methodName: string,\n    auditOptions?: any,\n    sensitiveOptions?: any,\n  ): string {\n    // Usar ação definida explicitamente\n    if (sensitiveOptions?.action) {\n      return sensitiveOptions.action;\n    }\n    \n    if (auditOptions?.action) {\n      return auditOptions.action;\n    }\n\n    // Mapear método HTTP + nome do método\n    const httpMethod = request.method.toUpperCase();\n    const formattedMethodName = methodName.replace(/([A-Z])/g, '_$1').toUpperCase();\n    \n    return `${httpMethod}_${formattedMethodName}`;\n  }\n\n  private determineResource(\n    controllerName: string,\n    auditOptions?: any,\n    sensitiveOptions?: any,\n  ): string {\n    // Usar recurso definido explicitamente\n    if (sensitiveOptions?.resource) {\n      return sensitiveOptions.resource;\n    }\n    \n    if (auditOptions?.resource) {\n      return auditOptions.resource;\n    }\n\n    // Extrair nome do recurso do controller\n    return controllerName.replace('Controller', '');\n  }\n\n  private captureRequestData(request: any, auditOptions?: any): Record<string, any> {\n    const data: Record<string, any> = {};\n\n    // Incluir parâmetros da URL\n    if (request.params && Object.keys(request.params).length > 0) {\n      data.params = request.params;\n    }\n\n    // Incluir query parameters\n    if (request.query && Object.keys(request.query).length > 0) {\n      data.query = request.query;\n    }\n\n    // Incluir body da requisição (se solicitado)\n    if (auditOptions?.includeRequest && request.body) {\n      data.requestBody = this.sanitizeRequestBody(request.body);\n    }\n\n    return data;\n  }\n\n  private sanitizeRequestBody(body: any): any {\n    if (!body || typeof body !== 'object') {\n      return body;\n    }\n\n    const sanitized = { ...body };\n    \n    // Remover campos sensíveis\n    const sensitiveFields = [\n      'password',\n      'token',\n      'secret',\n      'key',\n      'authorization',\n      'creditCard',\n      'ssn',\n      'cpf',\n    ];\n\n    const sanitizeObject = (obj: any): any => {\n      if (Array.isArray(obj)) {\n        return obj.map(sanitizeObject);\n      }\n      \n      if (obj && typeof obj === 'object') {\n        const result: any = {};\n        \n        for (const [key, value] of Object.entries(obj)) {\n          const lowerKey = key.toLowerCase();\n          \n          if (sensitiveFields.some(field => lowerKey.includes(field))) {\n            result[key] = '[REDACTED]';\n          } else {\n            result[key] = sanitizeObject(value);\n          }\n        }\n        \n        return result;\n      }\n      \n      return obj;\n    };\n\n    return sanitizeObject(sanitized);\n  }\n\n  private sanitizeResponse(response: any): any {\n    if (!response || typeof response !== 'object') {\n      return response;\n    }\n\n    // Limitar tamanho da resposta no log\n    const responseStr = JSON.stringify(response);\n    if (responseStr.length > 1000) {\n      return {\n        _truncated: true,\n        _size: responseStr.length,\n        _preview: responseStr.substring(0, 500) + '...',\n      };\n    }\n\n    return response;\n  }\n\n  private getClientIp(request: any): string {\n    return (\n      request.headers['x-forwarded-for'] ||\n      request.headers['x-real-ip'] ||\n      request.connection?.remoteAddress ||\n      request.socket?.remoteAddress ||\n      request.ip ||\n      'unknown'\n    );\n  }\n}\n\n// Guard para validação de segurança cross-tenant\n@Injectable()\nexport class CrossTenantSecurityGuard {\n  private readonly logger = new Logger(CrossTenantSecurityGuard.name);\n\n  constructor(\n    private readonly auditLogService: AuditLogService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    \n    if (!user || !user.organizationId) {\n      return true; // Deixar outros guards lidarem com autenticação\n    }\n\n    // Verificar se há tentativa de acesso a recursos de outra organização\n    const targetOrganizationId = this.extractTargetOrganizationId(request);\n    \n    if (targetOrganizationId && targetOrganizationId !== user.organizationId) {\n      const handler = context.getHandler();\n      const controller = context.getClass();\n      \n      const isValid = await this.auditLogService.validateCrossTenantAccess(\n        user.id,\n        user.organizationId,\n        targetOrganizationId,\n        controller.name.replace('Controller', ''),\n        handler.name,\n      );\n\n      if (!isValid) {\n        this.logger.warn(\n          `Cross-tenant access blocked: User ${user.id} from org ${user.organizationId} tried to access org ${targetOrganizationId}`,\n        );\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private extractTargetOrganizationId(request: any): string | null {\n    // Verificar parâmetros da URL\n    if (request.params?.organizationId) {\n      return request.params.organizationId;\n    }\n\n    // Verificar query parameters\n    if (request.query?.organizationId) {\n      return request.query.organizationId;\n    }\n\n    // Verificar body da requisição\n    if (request.body?.organizationId) {\n      return request.body.organizationId;\n    }\n\n    // Verificar headers\n    if (request.headers['x-target-organization-id']) {\n      return request.headers['x-target-organization-id'];\n    }\n\n    return null;\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}