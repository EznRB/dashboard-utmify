51cef05c06e5d775216c8a6b9d2f31e4
/* istanbul ignore next */
function cov_zxnczykvr() {
  var path = "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\crypto.service.ts";
  var hash = "035c6f86afd09e6d482a2d5ae3e7753d1af032fa";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\crypto.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 29
        }
      },
      "1": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 18
        }
      },
      "2": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 17
        }
      },
      "3": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 18
        }
      },
      "4": {
        start: {
          line: 10,
          column: 20
        },
        end: {
          line: 10,
          column: 71
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 13,
          column: 9
        }
      },
      "6": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 79
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 76
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "9": {
        start: {
          line: 22,
          column: 23
        },
        end: {
          line: 22,
          column: 56
        }
      },
      "10": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 23,
          column: 82
        }
      },
      "11": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "12": {
        start: {
          line: 25,
          column: 28
        },
        end: {
          line: 25,
          column: 62
        }
      },
      "13": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "14": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 27,
          column: 43
        }
      },
      "15": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 29,
          column: 79
        }
      },
      "16": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 26
        }
      },
      "17": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 67
        }
      },
      "18": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "19": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 67
        }
      },
      "20": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 43,
          column: 103
        }
      },
      "21": {
        start: {
          line: 44,
          column: 30
        },
        end: {
          line: 44,
          column: 87
        }
      },
      "22": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 45,
          column: 48
        }
      },
      "23": {
        start: {
          line: 46,
          column: 24
        },
        end: {
          line: 46,
          column: 50
        }
      },
      "24": {
        start: {
          line: 47,
          column: 29
        },
        end: {
          line: 47,
          column: 86
        }
      },
      "25": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 68
        }
      },
      "26": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 37
        }
      },
      "27": {
        start: {
          line: 50,
          column: 28
        },
        end: {
          line: 50,
          column: 69
        }
      },
      "28": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 48
        }
      },
      "29": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 29
        }
      },
      "30": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 67
        }
      },
      "31": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 58
        }
      },
      "32": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 70
        }
      },
      "33": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "34": {
        start: {
          line: 76,
          column: 30
        },
        end: {
          line: 76,
          column: 70
        }
      },
      "35": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "36": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 29
        }
      },
      "37": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 40
        }
      },
      "38": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 24
        }
      },
      "39": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 18
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 27
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 38
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 61
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 40
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 73
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 20
          },
          end: {
            line: 10,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 20
          },
          end: {
            line: 10,
            column: 41
          }
        }, {
          start: {
            line: 10,
            column: 45
          },
          end: {
            line: 10,
            column: 71
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 25
          },
          end: {
            line: 61,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 61,
            column: 34
          },
          end: {
            line: 61,
            column: 36
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\crypto.service.ts",
      mappings: "AAAA,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,MAAM,OAAO,aAAa;IACP,SAAS,GAAG,aAAa,CAAC;IAC1B,SAAS,GAAG,EAAE,CAAC,CAAC,WAAW;IAC3B,QAAQ,GAAG,EAAE,CAAC,CAAC,WAAW;IAC1B,SAAS,GAAG,EAAE,CAAC,CAAC,WAAW;IAC3B,aAAa,CAAS;IAEvC;QACE,MAAM,GAAG,GAAG,MAAM,CAAC,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;QAChE,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QACrE,CAAC;QAED,wDAAwD;QACxD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACtE,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7C,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YACvE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;YAEtD,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;YACnD,SAAS,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAEjC,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;YAEhC,oCAAoC;YACpC,MAAM,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;YACpE,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,sBAAsB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,aAAqB;QAC3B,IAAI,CAAC;YACH,sCAAsC;YACtC,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5F,MAAM,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAE5E,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACrC,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAEvC,MAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC3E,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;YACxD,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAEzB,IAAI,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAC1D,SAAS,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAEpC,OAAO,SAAS,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,sBAAsB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,SAAiB,EAAE;QACtC,OAAO,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,IAAY;QACf,OAAO,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,aAAqB;QACxC,IAAI,CAAC;YACH,8CAA8C;YAC9C,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3D,IAAI,aAAa,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC;gBACrC,OAAO,KAAK,CAAC;YACf,CAAC;YAED,yCAAyC;YACzC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAC5B,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;CACF",
      names: [],
      sources: ["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\crypto.service.ts"],
      sourcesContent: ["import * as crypto from 'crypto';\nimport { config } from '../config/env';\n\nexport class CryptoService {\n  private readonly algorithm = 'aes-256-gcm';\n  private readonly keyLength = 32; // 256 bits\n  private readonly ivLength = 16; // 128 bits\n  private readonly tagLength = 16; // 128 bits\n  private readonly encryptionKey: Buffer;\n\n  constructor() {\n    const key = config.ENCRYPTION_KEY || process.env.ENCRYPTION_KEY;\n    if (!key) {\n      throw new Error('ENCRYPTION_KEY environment variable is required');\n    }\n    \n    // Derive a consistent key from the environment variable\n    this.encryptionKey = crypto.scryptSync(key, 'salt', this.keyLength);\n  }\n\n  /**\n   * Encrypt a string value\n   */\n  encrypt(text: string): string {\n    try {\n      const iv = crypto.randomBytes(this.ivLength);\n      const cipher = crypto.createCipher(this.algorithm, this.encryptionKey);\n      cipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));\n      \n      let encrypted = cipher.update(text, 'utf8', 'hex');\n      encrypted += cipher.final('hex');\n      \n      const tag = cipher.getAuthTag();\n      \n      // Combine iv + tag + encrypted data\n      const result = iv.toString('hex') + tag.toString('hex') + encrypted;\n      return result;\n    } catch (error) {\n      throw new Error(`Encryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Decrypt a string value\n   */\n  decrypt(encryptedData: string): string {\n    try {\n      // Extract iv, tag, and encrypted data\n      const ivHex = encryptedData.slice(0, this.ivLength * 2);\n      const tagHex = encryptedData.slice(this.ivLength * 2, (this.ivLength + this.tagLength) * 2);\n      const encrypted = encryptedData.slice((this.ivLength + this.tagLength) * 2);\n      \n      const iv = Buffer.from(ivHex, 'hex');\n      const tag = Buffer.from(tagHex, 'hex');\n      \n      const decipher = crypto.createDecipher(this.algorithm, this.encryptionKey);\n      decipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));\n      decipher.setAuthTag(tag);\n      \n      let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n      \n      return decrypted;\n    } catch (error) {\n      throw new Error(`Decryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate a secure random string\n   */\n  generateRandomString(length: number = 32): string {\n    return crypto.randomBytes(length).toString('hex');\n  }\n\n  /**\n   * Hash a string using SHA-256\n   */\n  hash(text: string): string {\n    return crypto.createHash('sha256').update(text).digest('hex');\n  }\n\n  /**\n   * Verify if encrypted data is valid\n   */\n  isValidEncryptedData(encryptedData: string): boolean {\n    try {\n      // Check minimum length (iv + tag + some data)\n      const minLength = (this.ivLength + this.tagLength) * 2 + 2;\n      if (encryptedData.length < minLength) {\n        return false;\n      }\n      \n      // Try to decrypt (will throw if invalid)\n      this.decrypt(encryptedData);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "035c6f86afd09e6d482a2d5ae3e7753d1af032fa"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_zxnczykvr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_zxnczykvr();
import * as crypto from 'crypto';
import { config } from '../config/env';
export class CryptoService {
  algorithm =
  /* istanbul ignore next */
  (cov_zxnczykvr().s[0]++, 'aes-256-gcm');
  keyLength =
  /* istanbul ignore next */
  (cov_zxnczykvr().s[1]++, 32); // 256 bits
  ivLength =
  /* istanbul ignore next */
  (cov_zxnczykvr().s[2]++, 16); // 128 bits
  tagLength =
  /* istanbul ignore next */
  (cov_zxnczykvr().s[3]++, 16); // 128 bits
  encryptionKey;
  constructor() {
    /* istanbul ignore next */
    cov_zxnczykvr().f[0]++;
    const key =
    /* istanbul ignore next */
    (cov_zxnczykvr().s[4]++,
    /* istanbul ignore next */
    (cov_zxnczykvr().b[0][0]++, config.ENCRYPTION_KEY) ||
    /* istanbul ignore next */
    (cov_zxnczykvr().b[0][1]++, process.env.ENCRYPTION_KEY));
    /* istanbul ignore next */
    cov_zxnczykvr().s[5]++;
    if (!key) {
      /* istanbul ignore next */
      cov_zxnczykvr().b[1][0]++;
      cov_zxnczykvr().s[6]++;
      throw new Error('ENCRYPTION_KEY environment variable is required');
    } else
    /* istanbul ignore next */
    {
      cov_zxnczykvr().b[1][1]++;
    }
    // Derive a consistent key from the environment variable
    cov_zxnczykvr().s[7]++;
    this.encryptionKey = crypto.scryptSync(key, 'salt', this.keyLength);
  }
  /**
   * Encrypt a string value
   */
  encrypt(text) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[1]++;
    cov_zxnczykvr().s[8]++;
    try {
      const iv =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[9]++, crypto.randomBytes(this.ivLength));
      const cipher =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[10]++, crypto.createCipher(this.algorithm, this.encryptionKey));
      /* istanbul ignore next */
      cov_zxnczykvr().s[11]++;
      cipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));
      let encrypted =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[12]++, cipher.update(text, 'utf8', 'hex'));
      /* istanbul ignore next */
      cov_zxnczykvr().s[13]++;
      encrypted += cipher.final('hex');
      const tag =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[14]++, cipher.getAuthTag());
      // Combine iv + tag + encrypted data
      const result =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[15]++, iv.toString('hex') + tag.toString('hex') + encrypted);
      /* istanbul ignore next */
      cov_zxnczykvr().s[16]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_zxnczykvr().s[17]++;
      throw new Error(`Encryption failed: ${error.message}`);
    }
  }
  /**
   * Decrypt a string value
   */
  decrypt(encryptedData) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[2]++;
    cov_zxnczykvr().s[18]++;
    try {
      // Extract iv, tag, and encrypted data
      const ivHex =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[19]++, encryptedData.slice(0, this.ivLength * 2));
      const tagHex =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[20]++, encryptedData.slice(this.ivLength * 2, (this.ivLength + this.tagLength) * 2));
      const encrypted =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[21]++, encryptedData.slice((this.ivLength + this.tagLength) * 2));
      const iv =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[22]++, Buffer.from(ivHex, 'hex'));
      const tag =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[23]++, Buffer.from(tagHex, 'hex'));
      const decipher =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[24]++, crypto.createDecipher(this.algorithm, this.encryptionKey));
      /* istanbul ignore next */
      cov_zxnczykvr().s[25]++;
      decipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));
      /* istanbul ignore next */
      cov_zxnczykvr().s[26]++;
      decipher.setAuthTag(tag);
      let decrypted =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[27]++, decipher.update(encrypted, 'hex', 'utf8'));
      /* istanbul ignore next */
      cov_zxnczykvr().s[28]++;
      decrypted += decipher.final('utf8');
      /* istanbul ignore next */
      cov_zxnczykvr().s[29]++;
      return decrypted;
    } catch (error) {
      /* istanbul ignore next */
      cov_zxnczykvr().s[30]++;
      throw new Error(`Decryption failed: ${error.message}`);
    }
  }
  /**
   * Generate a secure random string
   */
  generateRandomString(length =
  /* istanbul ignore next */
  (cov_zxnczykvr().b[2][0]++, 32)) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[3]++;
    cov_zxnczykvr().s[31]++;
    return crypto.randomBytes(length).toString('hex');
  }
  /**
   * Hash a string using SHA-256
   */
  hash(text) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[4]++;
    cov_zxnczykvr().s[32]++;
    return crypto.createHash('sha256').update(text).digest('hex');
  }
  /**
   * Verify if encrypted data is valid
   */
  isValidEncryptedData(encryptedData) {
    /* istanbul ignore next */
    cov_zxnczykvr().f[5]++;
    cov_zxnczykvr().s[33]++;
    try {
      // Check minimum length (iv + tag + some data)
      const minLength =
      /* istanbul ignore next */
      (cov_zxnczykvr().s[34]++, (this.ivLength + this.tagLength) * 2 + 2);
      /* istanbul ignore next */
      cov_zxnczykvr().s[35]++;
      if (encryptedData.length < minLength) {
        /* istanbul ignore next */
        cov_zxnczykvr().b[3][0]++;
        cov_zxnczykvr().s[36]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_zxnczykvr().b[3][1]++;
      }
      // Try to decrypt (will throw if invalid)
      cov_zxnczykvr().s[37]++;
      this.decrypt(encryptedData);
      /* istanbul ignore next */
      cov_zxnczykvr().s[38]++;
      return true;
    } catch {
      /* istanbul ignore next */
      cov_zxnczykvr().s[39]++;
      return false;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,