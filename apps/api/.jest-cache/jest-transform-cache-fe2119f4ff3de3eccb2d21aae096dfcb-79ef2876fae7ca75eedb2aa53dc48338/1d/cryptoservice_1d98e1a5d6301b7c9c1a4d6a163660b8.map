{"version":3,"names":["cov_zxnczykvr","actualCoverage","crypto","config","CryptoService","algorithm","s","keyLength","ivLength","tagLength","encryptionKey","constructor","f","key","b","ENCRYPTION_KEY","process","env","Error","scryptSync","encrypt","text","iv","randomBytes","cipher","createCipher","setAAD","Buffer","from","encrypted","update","final","tag","getAuthTag","result","toString","error","message","decrypt","encryptedData","ivHex","slice","tagHex","decipher","createDecipher","setAuthTag","decrypted","generateRandomString","length","hash","createHash","digest","isValidEncryptedData","minLength"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\services\\crypto.service.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport { config } from '../config/env';\n\nexport class CryptoService {\n  private readonly algorithm = 'aes-256-gcm';\n  private readonly keyLength = 32; // 256 bits\n  private readonly ivLength = 16; // 128 bits\n  private readonly tagLength = 16; // 128 bits\n  private readonly encryptionKey: Buffer;\n\n  constructor() {\n    const key = config.ENCRYPTION_KEY || process.env.ENCRYPTION_KEY;\n    if (!key) {\n      throw new Error('ENCRYPTION_KEY environment variable is required');\n    }\n    \n    // Derive a consistent key from the environment variable\n    this.encryptionKey = crypto.scryptSync(key, 'salt', this.keyLength);\n  }\n\n  /**\n   * Encrypt a string value\n   */\n  encrypt(text: string): string {\n    try {\n      const iv = crypto.randomBytes(this.ivLength);\n      const cipher = crypto.createCipher(this.algorithm, this.encryptionKey);\n      cipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));\n      \n      let encrypted = cipher.update(text, 'utf8', 'hex');\n      encrypted += cipher.final('hex');\n      \n      const tag = cipher.getAuthTag();\n      \n      // Combine iv + tag + encrypted data\n      const result = iv.toString('hex') + tag.toString('hex') + encrypted;\n      return result;\n    } catch (error) {\n      throw new Error(`Encryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Decrypt a string value\n   */\n  decrypt(encryptedData: string): string {\n    try {\n      // Extract iv, tag, and encrypted data\n      const ivHex = encryptedData.slice(0, this.ivLength * 2);\n      const tagHex = encryptedData.slice(this.ivLength * 2, (this.ivLength + this.tagLength) * 2);\n      const encrypted = encryptedData.slice((this.ivLength + this.tagLength) * 2);\n      \n      const iv = Buffer.from(ivHex, 'hex');\n      const tag = Buffer.from(tagHex, 'hex');\n      \n      const decipher = crypto.createDecipher(this.algorithm, this.encryptionKey);\n      decipher.setAAD(Buffer.from('utmify-meta-ads', 'utf8'));\n      decipher.setAuthTag(tag);\n      \n      let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n      \n      return decrypted;\n    } catch (error) {\n      throw new Error(`Decryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate a secure random string\n   */\n  generateRandomString(length: number = 32): string {\n    return crypto.randomBytes(length).toString('hex');\n  }\n\n  /**\n   * Hash a string using SHA-256\n   */\n  hash(text: string): string {\n    return crypto.createHash('sha256').update(text).digest('hex');\n  }\n\n  /**\n   * Verify if encrypted data is valid\n   */\n  isValidEncryptedData(encryptedData: string): boolean {\n    try {\n      // Check minimum length (iv + tag + some data)\n      const minLength = (this.ivLength + this.tagLength) * 2 + 2;\n      if (encryptedData.length < minLength) {\n        return false;\n      }\n      \n      // Try to decrypt (will throw if invalid)\n      this.decrypt(encryptedData);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}"],"mappings":"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","ignoreList":[]}