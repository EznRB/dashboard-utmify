{"version":3,"names":["cov_1br81e50ft","actualCoverage","Injectable","Logger","Cron","CronExpression","TenantRateLimitService","RateLimitCleanupScheduler","s","RateLimitCleanupScheduler_1","rateLimitService","logger","name","constructor","f","handleRateLimitCleanup","log","deletedCount","cleanupOldCounters","error","message","stack","handleDailyRateLimitCleanup","handleRateLimitHealthCheck","testResult","checkRateLimit","b","debug","warn","handleWeeklyRateLimitReport","__decorate","EVERY_6_HOURS","Promise","_b","Object","_c","EVERY_HOUR","_d","_e","_a"],"sources":["C:\\Users\\Enzo Marcelo\\Desktop\\Projetos Empresa\\Saas Utmify\\utmify-clone\\apps\\api\\src\\schedulers\\rate-limit-cleanup.scheduler.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { TenantRateLimitService } from '../services/tenant-rate-limit.service';\n\n@Injectable()\nexport class RateLimitCleanupScheduler {\n  private readonly logger = new Logger(RateLimitCleanupScheduler.name);\n\n  constructor(\n    private readonly rateLimitService: TenantRateLimitService,\n  ) {}\n\n  // Executar limpeza a cada 6 horas\n  @Cron(CronExpression.EVERY_6_HOURS)\n  async handleRateLimitCleanup(): Promise<void> {\n    this.logger.log('Starting rate limit cleanup job...');\n    \n    try {\n      const deletedCount = await this.rateLimitService.cleanupOldCounters();\n      \n      this.logger.log(\n        `Rate limit cleanup completed successfully. Deleted ${deletedCount} old counters.`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Rate limit cleanup failed: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  // Executar limpeza diária às 3:00 AM (mais completa)\n  @Cron('0 3 * * *')\n  async handleDailyRateLimitCleanup(): Promise<void> {\n    this.logger.log('Starting daily rate limit cleanup job...');\n    \n    try {\n      // Executar limpeza mais agressiva\n      const deletedCount = await this.rateLimitService.cleanupOldCounters();\n      \n      // Log estatísticas de uso se necessário\n      this.logger.log(\n        `Daily rate limit cleanup completed. Deleted ${deletedCount} old counters.`,\n      );\n      \n      // Aqui poderia adicionar outras tarefas de manutenção\n      // como compactação de logs, estatísticas, etc.\n      \n    } catch (error) {\n      this.logger.error(\n        `Daily rate limit cleanup failed: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  // Executar verificação de saúde a cada hora\n  @Cron(CronExpression.EVERY_HOUR)\n  async handleRateLimitHealthCheck(): Promise<void> {\n    try {\n      // Verificar se o serviço de rate limit está funcionando\n      // Fazer uma verificação simples\n      const testResult = await this.rateLimitService.checkRateLimit(\n        'health-check-org',\n        'api',\n        'health-check',\n      );\n      \n      if (testResult) {\n        this.logger.debug('Rate limit service health check passed');\n      }\n    } catch (error) {\n      this.logger.warn(\n        `Rate limit health check failed: ${error.message}`,\n      );\n    }\n  }\n\n  // Executar relatório semanal às segundas-feiras às 9:00 AM\n  @Cron('0 9 * * 1')\n  async handleWeeklyRateLimitReport(): Promise<void> {\n    this.logger.log('Generating weekly rate limit report...');\n    \n    try {\n      // Aqui poderia gerar relatórios de uso\n      // Por exemplo, organizações que mais consomem rate limit\n      // Estatísticas de bloqueios, etc.\n      \n      this.logger.log('Weekly rate limit report generated successfully');\n    } catch (error) {\n      this.logger.error(\n        `Weekly rate limit report failed: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n}"],"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","ignoreList":[]}