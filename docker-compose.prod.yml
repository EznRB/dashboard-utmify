version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: utmify-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/certbot/conf:/etc/letsencrypt:ro
      - ./docker/certbot/www:/var/www/certbot:ro
      - ./docker/nginx/logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - utmify-network
    restart: unless-stopped

  # Certbot for SSL
  certbot:
    image: certbot/certbot
    container_name: utmify-certbot
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email your-email@domain.com -d your-domain.com -d www.your-domain.com --agree-tos
    networks:
      - utmify-network

  # Web Application (Next.js)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: utmify-web
    environment:
      - NODE_ENV=production
      - NEXTAUTH_URL=https://your-domain.com
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - API_URL=http://api:8000
    depends_on:
      - postgres
      - redis
    networks:
      - utmify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Application (Fastify)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: utmify-api
    environment:
      - NODE_ENV=production
      - PORT=8000
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - GOOGLE_ADS_DEVELOPER_TOKEN=${GOOGLE_ADS_DEVELOPER_TOKEN}
      - META_ACCESS_TOKEN=${META_ACCESS_TOKEN}
    depends_on:
      - postgres
      - redis
    networks:
      - utmify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: utmify-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-utmify}
      - POSTGRES_USER=${POSTGRES_USER:-utmify}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - utmify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-utmify}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: utmify-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - utmify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration Runner
  migrate:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: utmify-migrate
    environment:
      - DATABASE_URL=${DATABASE_URL}
    command: |
      sh -c '
        cd packages/database &&
        npx prisma migrate deploy &&
        npx prisma db seed
      '
    depends_on:
      - postgres
    networks:
      - utmify-network
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  utmify-network:
    driver: bridge